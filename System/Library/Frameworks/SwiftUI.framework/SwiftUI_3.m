uint64_t outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ProgressViewStyleModifier<CircularProgressViewStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ProgressViewStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for ProgressViewStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type CircularProgressViewStyle and conformance CircularProgressViewStyle;
  if (!lazy protocol witness table cache variable for type CircularProgressViewStyle and conformance CircularProgressViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle;
  if (!lazy protocol witness table cache variable for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type LinearProgressViewStyle and conformance LinearProgressViewStyle;
  if (!lazy protocol witness table cache variable for type LinearProgressViewStyle and conformance LinearProgressViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
  }
  return result;
}

uint64_t partial apply for closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)()
{
  return Collection.withContiguousStorage<A>(_:)();
}

char *CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v74 = a6;
  uint64_t v77 = a5;
  uint64_t v67 = a2;
  uint64_t v71 = a1;
  uint64_t v12 = a3[3];
  uint64_t v14 = a3[4];
  uint64_t v13 = a3[5];
  uint64_t v81 = a3[2];
  uint64_t v11 = v81;
  uint64_t v82 = v12;
  uint64_t v83 = v14;
  uint64_t v84 = v13;
  uint64_t v15 = type metadata accessor for CollectionChanges.Element();
  MEMORY[0x1F4188790](v15);
  v17 = (char *)&v52 - v16;
  uint64_t v56 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v18);
  v66 = (uint64_t *)((char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v20);
  v63 = (char *)&v52 - v21;
  uint64_t v55 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v22);
  v79 = (uint64_t *)((char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v24);
  v62 = (char *)&v52 - v25;
  v76 = v8;
  uint64_t v26 = *v8;
  uint64_t v70 = a8;
  uint64_t v75 = a7;
  uint64_t v57 = v13;
  uint64_t v58 = v14;
  uint64_t v69 = v26;
  uint64_t v72 = v12;
  uint64_t v73 = v11;
  unint64_t result = (char *)CollectionChanges.changedOffsets<A, B>(from:to:limit:)();
  if (result)
  {
    v29 = v28;
    v78 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(result);
    swift_bridgeObjectRelease();
    v65 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v29);
    swift_bridgeObjectRelease();
    uint64_t v80 = dispatch thunk of Collection.count.getter();
    uint64_t v30 = dispatch thunk of Collection.count.getter();
    dispatch thunk of Collection.endIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v31 = Array.init()();
    unint64_t result = (char *)swift_bridgeObjectRelease();
    uint64_t *v76 = v31;
    uint64_t v69 = v30;
    BOOL v32 = v30 > 0;
    if (v80 > 0 || v69 >= 1)
    {
      uint64_t v37 = 0;
      v68 = 0;
      unint64_t v38 = 0;
      unint64_t v64 = 0;
      v53 = v65 + 32;
      v59 = v78 + 32;
      uint64_t v54 = v15;
      while (1)
      {
        v39 = (uint64_t *)&v59[16 * v38];
        unint64_t v40 = v38;
        while ((v38 & 0x8000000000000000) == 0 && v40 < *((void *)v78 + 2) && *v39 == v37)
        {
          uint64_t v41 = v39[1];
          uint64_t v42 = v41 - v37;
          if (__OFSUB__(v41, v37))
          {
            __break(1u);
            goto LABEL_32;
          }
          iterateRange #1 <A, B><A1, B1><A2>(from:length:in:) in CollectionChanges.formChanges<A, B>(from:to:)((void (*)(void, void, void))v79, (void *)v42, v17);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for Array();
          unint64_t result = (char *)Array.append(_:)();
          ++v40;
          v37 += v42;
          v39 += 2;
          if (v37 >= v80 && !v32) {
            goto LABEL_4;
          }
        }
        unint64_t v43 = v64;
        if ((v64 & 0x8000000000000000) != 0 || v64 >= *((void *)v65 + 2) || *(char **)&v53[16 * v64] != v68)
        {
          uint64_t v47 = v80;
          if ((v38 & 0x8000000000000000) == 0)
          {
            uint64_t v47 = v80;
            if (v40 < *((void *)v78 + 2)) {
              uint64_t v47 = *v39;
            }
          }
          uint64_t v48 = v69;
          if ((v64 & 0x8000000000000000) == 0)
          {
            uint64_t v48 = v69;
            if (v64 < *((void *)v65 + 2)) {
              uint64_t v48 = *(void *)&v53[16 * v64];
            }
          }
          v49 = (void *)(v47 - v37);
          v50 = (void *)(v48 - (void)v68);
          if ((uint64_t)v50 >= (uint64_t)v49) {
            v51 = v49;
          }
          else {
            v51 = v50;
          }
          v60 = v51;
          type metadata accessor for Range();
          type metadata accessor for Range();
          v61 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          iterateRange #1 <A, B><A1, B1><A2>(from:length:in:) in CollectionChanges.formChanges<A, B>(from:to:)((void (*)(void, void, void))v79, v51, v17);
          v46 = v60;
          v45 = v68;
          iterateRange #1 <A, B><A1, B1><A2>(from:length:in:) in CollectionChanges.formChanges<A, B>(from:to:)((void (*)(void, void, void))v66, v60, v61);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for Array();
          unint64_t result = (char *)Array.append(_:)();
          v37 += (uint64_t)v46;
        }
        else
        {
          uint64_t v44 = *(void *)&v53[16 * v64 + 8];
          v45 = v68;
          v46 = (void *)(v44 - (void)v68);
          unint64_t result = (char *)v66;
          if (__OFSUB__(v44, v68))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          iterateRange #1 <A, B><A1, B1><A2>(from:length:in:) in CollectionChanges.formChanges<A, B>(from:to:)((void (*)(void, void, void))v66, v46, v17);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for Array();
          unint64_t result = (char *)Array.append(_:)();
          unint64_t v64 = v43 + 1;
        }
        v68 = &v45[(void)v46];
        BOOL v32 = (uint64_t)&v45[(void)v46] < v69;
        unint64_t v38 = v40;
        if (v37 >= v80)
        {
          unint64_t v38 = v40;
          if ((uint64_t)v68 >= v69) {
            break;
          }
        }
      }
    }
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = *(void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v34 = v72;
    v33((char *)v66, v72);
    v35 = *(uint64_t (**)(char *, uint64_t))(v55 + 8);
    uint64_t v36 = v73;
    v35((char *)v79, v73);
    v33(v63, v34);
    return (char *)v35(v62, v36);
  }
  else
  {
LABEL_33:
    __break(1u);
  }
  return result;
}

uint64_t ToolbarBridge.makeStorage(in:from:strategy:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v159 = a3;
  v167 = a2;
  uint64_t v160 = *MEMORY[0x1E4FBC8C8] & *v3;
  uint64_t v166 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v165 = *(void *)(v166 - 8);
  MEMORY[0x1F4188790](v166);
  uint64_t v152 = (uint64_t)v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v154 = (uint64_t)v143 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v171 = (uint64_t)v143 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v143 - v11;
  uint64_t v168 = a1;
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v177);
  uint64_t v13 = (char *)v3 + direct field offset for ToolbarBridge.storageByLocation;
  swift_beginAccess();
  uint64_t v14 = *(void *)v13;
  if (*(void *)(*(void *)v13 + 16)
    && (uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v177), (v16 & 1) != 0))
  {
    v17 = (uint64_t *)(*(void *)(v14 + 56) + 24 * v15);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    unint64_t v20 = v17[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(v19);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)&v177);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = specialized Sequence.compactMap<A>(_:)(v19, v18);
  swift_bridgeObjectRelease();
  unint64_t v150 = v20;
  swift_bridgeObjectRelease();
  v143[1] = v18;
  swift_bridgeObjectRelease();
  v177 = v167;
  _s7SwiftUI14ToolbarStorageV10SearchItemVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB320]);
  uint64_t v23 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))specialized implicit closure #2 in ToolbarBridge.makeStorage(in:from:strategy:), 0, v23, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v25);
  uint64_t v27 = MEMORY[0x1E4FBC860];
  v177 = (void *)MEMORY[0x1E4FBC860];
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v21, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v177;
  v177 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  long long v180 = xmmword_188382680;
  char v29 = specialized static Toolbar.BarLocation.== infix(_:_:)(v168, (uint64_t)&v177);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v177);
  unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(v27);
  unint64_t v170 = specialized Dictionary.init(dictionaryLiteral:)(v27);
  uint64_t v185 = v27;
  uint64_t v31 = v28[2];
  if (v31)
  {
    v172 = (void *)v30;
    if (v29) {
      char v32 = 0;
    }
    else {
      char v32 = 2;
    }
    v148 = v28 + 4;
    uint64_t v153 = v31 - 1;
    v158 = &v181;
    swift_bridgeObjectRetain();
    unint64_t v33 = 0;
    uint64_t v149 = v19;
    v143[0] = v19 + 40;
    long long v164 = xmmword_18838AA10;
    v163 = v12;
    v147 = v28;
    uint64_t v146 = v31;
    while (v33 < v28[2])
    {
      uint64_t v34 = &v148[5 * v33];
      int v35 = *((unsigned __int8 *)v34 + 32);
      unint64_t v161 = v33;
      if (v35)
      {
        uint64_t v36 = *v34;
        uint64_t v37 = (char *)v34[1];
        uint64_t v169 = *v34;
        v162 = v37;
        if (v35 == 1)
        {
          if ((char *)v36 != v37)
          {
            if ((uint64_t)v37 < v36) {
              goto LABEL_157;
            }
            if (v36 >= (uint64_t)v37) {
              goto LABEL_159;
            }
            v157 = *(char **)(v160 + 88);
            v155 = (char *)*((void *)v157 + 9);
            v156 = v157 + 72;
            uint64_t v173 = -v36;
            uint64_t v38 = 16 * v36 + 32;
            v151 = v37 - 1;
            while (v36 < (uint64_t)v37)
            {
              memset(v183, 0, sizeof(v183));
              long long v184 = v164;
              outlined init with copy of Toolbar.BarLocation(v168, (uint64_t)&v177);
              outlined init with copy of Toolbar.BarLocation((uint64_t)v183, (uint64_t)v158);
              switch((uint64_t)v180)
              {
                case 0:
                  if (v182) {
                    goto LABEL_53;
                  }
                  goto LABEL_56;
                case 1:
                  if (v182 == 1) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 2:
                  if (v182 == 2) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 3:
                  if (v182 == 3) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 4:
                  if (v182 == 4) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 5:
                  if (v182 == 5) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 6:
                  if (v182 == 6) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 7:
                  if (v182 == 7) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 8:
                  if (v182 == 8) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 9:
                  if (v182 == 9) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 10:
                  if (v182 == 10) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 11:
                  if (v182 == 11) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 12:
                  if (v182 == 12) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                case 13:
                  if (v182 != 13) {
                    goto LABEL_53;
                  }
                  goto LABEL_56;
                case 14:
                  if (v182 == 14) {
                    goto LABEL_56;
                  }
                  goto LABEL_53;
                default:
                  outlined init with copy of Toolbar.BarLocation((uint64_t)&v177, (uint64_t)v176);
                  if (v182 < 0xF)
                  {
                    outlined destroy of AnyHashable((uint64_t)v176);
LABEL_53:
                    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)&v177, (uint64_t)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation), (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(void))type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role));
                    goto LABEL_54;
                  }
                  long long v39 = *((_OWORD *)v158 + 1);
                  v174[0] = *(_OWORD *)v158;
                  v174[1] = v39;
                  uint64_t v175 = *((void *)v158 + 4);
                  char v40 = MEMORY[0x18C1174E0](v176, v174);
                  outlined destroy of AnyHashable((uint64_t)v174);
                  outlined destroy of AnyHashable((uint64_t)v176);
                  if ((v40 & 1) == 0)
                  {
                    outlined destroy of Toolbar.BarLocation((uint64_t)&v177);
LABEL_54:
                    outlined destroy of Toolbar.BarLocation((uint64_t)v183);
                    goto LABEL_61;
                  }
LABEL_56:
                  outlined destroy of Toolbar.BarLocation((uint64_t)&v177);
                  outlined destroy of Toolbar.BarLocation((uint64_t)v183);
                  if (v151 == (char *)v36) {
                    char v41 = 1;
                  }
                  else {
                    char v41 = v32;
                  }
                  if (v161 == v153) {
                    char v32 = v41;
                  }
LABEL_61:
                  uint64_t v42 = v166;
                  Array.subscript.getter();
                  v12[*(int *)(v42 + 20)] = v32;
                  uint64_t v43 = ((uint64_t (*)(char *, void, char *))v155)(v12, *(void *)(v160 + 80), v157);
                  uint64_t v47 = (char *)v185;
                  unint64_t v48 = *(void *)(v185 + 16);
                  if ((uint64_t)v48 < v36) {
                    goto LABEL_139;
                  }
                  if (v169 < 0) {
                    goto LABEL_140;
                  }
                  uint64_t v49 = v43;
                  uint64_t v50 = v44;
                  v51 = v45;
                  char v52 = v46;
                  swift_bridgeObjectRetain();
                  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
                  if (!isUniquelyReferenced_nonNull_native || v48 >= *((void *)v47 + 3) >> 1) {
                    uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v48 + 1, 1, v47);
                  }
                  uint64_t v54 = (uint64_t *)&v47[v38];
                  swift_arrayDestroy();
                  uint64_t v55 = v173 + *((void *)v47 + 2);
                  if (v55 < 0) {
                    goto LABEL_162;
                  }
                  memmove(v54 + 2, &v47[v38], 16 * v55);
                  ++*((void *)v47 + 2);
                  *uint64_t v54 = v49;
                  v54[1] = v50;
                  uint64_t v185 = (uint64_t)v47;
                  _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0((uint64_t)v12, v171, type metadata accessor for ToolbarStorage.Entry);
                  swift_bridgeObjectRetain();
                  uint64_t v56 = v172;
                  int v57 = swift_isUniquelyReferenced_nonNull_native();
                  v177 = v56;
                  unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
                  uint64_t v60 = v56[2];
                  BOOL v61 = (v58 & 1) == 0;
                  uint64_t v62 = v60 + v61;
                  if (__OFADD__(v60, v61)) {
                    goto LABEL_141;
                  }
                  char v63 = v58;
                  if (v56[3] >= v62)
                  {
                    if (v57)
                    {
                      v66 = v177;
                      if (v58) {
                        goto LABEL_74;
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary.copy()();
                      v66 = v177;
                      if (v63) {
                        goto LABEL_74;
                      }
                    }
                  }
                  else
                  {
                    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v62, v57);
                    unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
                    if ((v63 & 1) != (v65 & 1)) {
                      goto LABEL_163;
                    }
                    unint64_t v59 = v64;
                    v66 = v177;
                    if (v63)
                    {
LABEL_74:
                      outlined assign with take of ToolbarStorage.Entry(v171, v66[7] + *(void *)(v165 + 72) * v59);
                      goto LABEL_79;
                    }
                  }
                  v66[(v59 >> 6) + 8] |= 1 << v59;
                  uint64_t v67 = (uint64_t *)(v66[6] + 16 * v59);
                  *uint64_t v67 = v49;
                  v67[1] = v50;
                  _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v171, v66[7] + *(void *)(v165 + 72) * v59, type metadata accessor for ToolbarStorage.Entry);
                  uint64_t v68 = v66[2];
                  BOOL v69 = __OFADD__(v68, 1);
                  uint64_t v70 = v68 + 1;
                  if (v69) {
                    goto LABEL_143;
                  }
                  v66[2] = v70;
                  swift_bridgeObjectRetain();
LABEL_79:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v172 = v66;
                  if (v52 == -1)
                  {
                    uint64_t v12 = v163;
                    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v163, type metadata accessor for ToolbarStorage.Entry);
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    id v71 = v51;
                    unint64_t v72 = v170;
                    char v73 = swift_isUniquelyReferenced_nonNull_native();
                    v177 = (void *)v72;
                    unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
                    uint64_t v76 = *(void *)(v72 + 16);
                    BOOL v77 = (v74 & 1) == 0;
                    uint64_t v78 = v76 + v77;
                    if (__OFADD__(v76, v77)) {
                      goto LABEL_142;
                    }
                    char v79 = v74;
                    if (*(void *)(v72 + 24) >= v78)
                    {
                      if ((v73 & 1) == 0) {
                        specialized _NativeDictionary.copy()();
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, v73);
                      unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
                      if ((v79 & 1) != (v81 & 1)) {
                        goto LABEL_163;
                      }
                      unint64_t v75 = v80;
                    }
                    uint64_t v82 = v177;
                    unint64_t v170 = (unint64_t)v177;
                    if (v79)
                    {
                      uint64_t v83 = v177[7] + 16 * v75;

                      *(void *)uint64_t v83 = v51;
                      *(unsigned char *)(v83 + 8) = v52;
                    }
                    else
                    {
                      v177[(v75 >> 6) + 8] |= 1 << v75;
                      uint64_t v84 = (uint64_t *)(v82[6] + 16 * v75);
                      *uint64_t v84 = v49;
                      v84[1] = v50;
                      uint64_t v85 = v82[7] + 16 * v75;
                      *(void *)uint64_t v85 = v51;
                      *(unsigned char *)(v85 + 8) = v52;
                      uint64_t v86 = v82[2];
                      BOOL v69 = __OFADD__(v86, 1);
                      uint64_t v87 = v86 + 1;
                      if (v69) {
                        goto LABEL_144;
                      }
                      v82[2] = v87;
                      swift_bridgeObjectRetain();
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined consume of Toolbar.VendedItem?(v51, v52);
                    outlined consume of Toolbar.VendedItem?(v51, v52);
                    uint64_t v12 = v163;
                    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v163, type metadata accessor for ToolbarStorage.Entry);
                  }
                  uint64_t v37 = v162;
                  ++v36;
                  --v173;
                  v38 += 16;
                  char v32 = 2;
                  if (v162 == (char *)v36) {
                    goto LABEL_10;
                  }
                  break;
              }
            }
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            goto LABEL_145;
          }
        }
        else
        {
          uint64_t v89 = v34[2];
          uint64_t v88 = v34[3];
          uint64_t v173 = v89;
          LOBYTE(v183[0]) = 0;
          if ((char *)v36 != v37)
          {
            if ((uint64_t)v37 < v36) {
              goto LABEL_158;
            }
            if (v36 >= (uint64_t)v37) {
              goto LABEL_160;
            }
            v90 = (char *)(v88 - v173);
            if (v88 != v173)
            {
              if (v88 <= v173) {
                goto LABEL_161;
              }
              v91 = 0;
              v156 = v37 - 1;
              v157 = v90 - 1;
              v92 = (uint64_t *)(v143[0] + 16 * v36);
              v155 = (char *)(v88 - v173);
              while (v90 != v91)
              {
                BOOL v93 = v33 == v153;
                v177 = 0;
                uint64_t v178 = 0;
                uint64_t v179 = 0;
                long long v180 = v164;
                int v94 = specialized static Toolbar.BarLocation.== infix(_:_:)(v168, (uint64_t)&v177);
                outlined destroy of Toolbar.BarLocation((uint64_t)&v177);
                if ((v94 & v93 & (v157 == v91)) != 0) {
                  char v95 = 1;
                }
                else {
                  char v95 = v32;
                }
                if (v36 < 0) {
                  goto LABEL_146;
                }
                v96 = &v91[v36];
                if ((unint64_t)&v91[v36] >= *(void *)(v149 + 16)) {
                  goto LABEL_147;
                }
                uint64_t v97 = (uint64_t)&v91[v173];
                uint64_t v98 = *(v92 - 1);
                uint64_t v99 = *v92;
                swift_bridgeObjectRetain();
                uint64_t v100 = v154;
                uint64_t v101 = v166;
                Array.subscript.getter();
                *(unsigned char *)(v100 + *(int *)(v101 + 20)) = v95;
                unint64_t v102 = v150;
                if (*(void *)(v150 + 16))
                {
                  swift_bridgeObjectRetain();
                  unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v98, v99);
                  if (v104)
                  {
                    uint64_t v105 = *(void *)(v102 + 56) + 16 * v103;
                    id v106 = *(id *)v105;
                    uint64_t v107 = *(unsigned __int8 *)(v105 + 8);
                    id v108 = *(id *)v105;
                    swift_bridgeObjectRelease();
                    uint64_t v109 = *(void *)(v160 + 80);
                    v110 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(*(void *)(v160 + 88) + 80);
                    id v145 = v106;
                    LODWORD(v151) = v107;
                    v110(v106, v107, v154, v109);
                    swift_bridgeObjectRetain();
                    id v144 = v108;
                    unint64_t v111 = v170;
                    char v112 = swift_isUniquelyReferenced_nonNull_native();
                    v177 = (void *)v111;
                    unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(v98, v99);
                    uint64_t v115 = *(void *)(v111 + 16);
                    BOOL v116 = (v113 & 1) == 0;
                    uint64_t v117 = v115 + v116;
                    if (__OFADD__(v115, v116)) {
                      goto LABEL_155;
                    }
                    char v118 = v113;
                    if (*(void *)(v111 + 24) >= v117)
                    {
                      if ((v112 & 1) == 0) {
                        specialized _NativeDictionary.copy()();
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, v112);
                      unint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(v98, v99);
                      if ((v118 & 1) != (v120 & 1)) {
                        goto LABEL_163;
                      }
                      unint64_t v114 = v119;
                    }
                    v121 = v177;
                    unint64_t v170 = (unint64_t)v177;
                    if (v118)
                    {
                      uint64_t v122 = v177[7] + 16 * v114;

                      *(void *)uint64_t v122 = v145;
                      *(unsigned char *)(v122 + 8) = (_BYTE)v151;
                    }
                    else
                    {
                      v177[(v114 >> 6) + 8] |= 1 << v114;
                      v123 = (uint64_t *)(v121[6] + 16 * v114);
                      uint64_t *v123 = v98;
                      v123[1] = v99;
                      uint64_t v124 = v121[7] + 16 * v114;
                      *(void *)uint64_t v124 = v145;
                      *(unsigned char *)(v124 + 8) = (_BYTE)v151;
                      uint64_t v125 = v121[2];
                      BOOL v69 = __OFADD__(v125, 1);
                      uint64_t v126 = v125 + 1;
                      if (v69) {
                        goto LABEL_156;
                      }
                      v121[2] = v126;
                      swift_bridgeObjectRetain();
                    }

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v37 = v162;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                }
                if (*(void *)(v185 + 16) < v97) {
                  goto LABEL_148;
                }
                if (v173 < 0) {
                  goto LABEL_149;
                }
                swift_bridgeObjectRetain();
                specialized Array.replaceSubrange<A>(_:with:)(v97, v97, v98, v99);
                _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(v154, v152, type metadata accessor for ToolbarStorage.Entry);
                v127 = v172;
                int v128 = swift_isUniquelyReferenced_nonNull_native();
                v177 = v127;
                unint64_t v130 = specialized __RawDictionaryStorage.find<A>(_:)(v98, v99);
                uint64_t v131 = v127[2];
                BOOL v132 = (v129 & 1) == 0;
                uint64_t v133 = v131 + v132;
                if (__OFADD__(v131, v132)) {
                  goto LABEL_150;
                }
                char v134 = v129;
                if (v127[3] >= v133)
                {
                  if ((v128 & 1) == 0) {
                    specialized _NativeDictionary.copy()();
                  }
                }
                else
                {
                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v133, v128);
                  unint64_t v135 = specialized __RawDictionaryStorage.find<A>(_:)(v98, v99);
                  if ((v134 & 1) != (v136 & 1)) {
                    goto LABEL_163;
                  }
                  unint64_t v130 = v135;
                }
                v137 = v177;
                v172 = v177;
                if (v134)
                {
                  outlined assign with take of ToolbarStorage.Entry(v152, v177[7] + *(void *)(v165 + 72) * v130);
                }
                else
                {
                  v177[(v130 >> 6) + 8] |= 1 << v130;
                  v138 = (uint64_t *)(v137[6] + 16 * v130);
                  uint64_t *v138 = v98;
                  v138[1] = v99;
                  _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v152, v137[7] + *(void *)(v165 + 72) * v130, type metadata accessor for ToolbarStorage.Entry);
                  uint64_t v139 = v137[2];
                  BOOL v69 = __OFADD__(v139, 1);
                  uint64_t v140 = v139 + 1;
                  if (v69) {
                    goto LABEL_154;
                  }
                  v137[2] = v140;
                  swift_bridgeObjectRetain();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v154, type metadata accessor for ToolbarStorage.Entry);
                char v32 = 2;
                uint64_t v12 = v163;
                if (v183[0]) {
                  goto LABEL_10;
                }
                unint64_t v33 = v161;
                if (v96 + 1 == v37) {
                  goto LABEL_10;
                }
                uint64_t v36 = v169;
                if ((uint64_t)(v96 + 1) < v169) {
                  goto LABEL_151;
                }
                if (v96 == v156) {
                  goto LABEL_152;
                }
                ++v91;
                v92 += 2;
                v90 = v155;
                if (v155 == v91) {
                  goto LABEL_10;
                }
              }
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
              break;
            }
          }
        }
      }
LABEL_10:
      unint64_t v33 = v161 + 1;
      v28 = v147;
      if (v161 + 1 == v146)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v141 = v185;
        goto LABEL_137;
      }
    }
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_163:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v141 = MEMORY[0x1E4FBC860];
LABEL_137:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v141;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v26 - v13;
  MEMORY[0x1F4188790](v15);
  unint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v27 = v14;
  uint64_t v43 = Array.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  char v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void type metadata accessor for (AnyHashable, PassthroughSubject<Any, Never>)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void _ss11AnyHashableV_7Combine18PassthroughSubjectCyyps5NeverOGtMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t specialized CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t, void, uint64_t, uint64_t))
{
  uint64_t result = a3(a2 + 32, *(void *)(a2 + 16), a1 + 32, *(void *)(a1 + 16), *v3, 0x7FFFFFFFFFFFFFFFLL);
  if (!result)
  {
LABEL_95:
    __break(1u);
    return result;
  }
  uint64_t v8 = v7;
  uint64_t v68 = v3;
  uint64_t v9 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)((char *)result);
  swift_bridgeObjectRelease();
  uint64_t v10 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v75 = v10;
  if (!(v11 | v12))
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    goto LABEL_84;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  v66 = v10 + 32;
  uint64_t v67 = v9 + 32;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v70 = v9;
  uint64_t v74 = v12;
LABEL_4:
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  unint64_t v76 = v17;
  unint64_t v72 = &v66[16 * v18];
  unint64_t v73 = v17;
  unint64_t v71 = v18;
  while (2)
  {
    BOOL v69 = &v67[16 * v76];
    uint64_t v22 = v20;
    while ((v17 & 0x8000000000000000) != 0 || v76 >= *((void *)v9 + 2) || *(void *)v69 != v15)
    {
      unint64_t v23 = *((void *)v75 + 2);
      if (v18 < v23 && *(void *)v72 == v16)
      {
        uint64_t v54 = *(void *)&v66[16 * v18 + 8];
        uint64_t v55 = v54 - v16;
        if (__OFSUB__(v54, v16)) {
          goto LABEL_89;
        }
        uint64_t v56 = v12 - v21;
        if (v55 < 1)
        {
          if (v56 > 0) {
            goto LABEL_72;
          }
          uint64_t v14 = v12;
          if (v55 >= v56) {
            goto LABEL_72;
          }
        }
        else if (v56 < 0 || (uint64_t v14 = v12, v56 >= (unint64_t)v55))
        {
LABEL_72:
          uint64_t v14 = v21 + v55;
          if (__OFADD__(v21, v55)) {
            goto LABEL_93;
          }
        }
        if (v14 < v21) {
          goto LABEL_90;
        }
        uint64_t v57 = v22;
        uint64_t v58 = v16;
        uint64_t v59 = v19;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v19 = v59;
        }
        else
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1, (char *)v59);
          uint64_t v19 = result;
        }
        unint64_t v61 = *(void *)(v19 + 16);
        unint64_t v60 = *(void *)(v19 + 24);
        unint64_t v62 = v61 + 1;
        if (v61 >= v60 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1, (char *)v19);
          unint64_t v62 = v61 + 1;
          uint64_t v13 = v57;
          uint64_t v63 = v58;
          uint64_t v19 = result;
        }
        else
        {
          uint64_t v63 = v58;
          uint64_t v13 = v57;
        }
        *(void *)(v19 + 16) = v62;
        unint64_t v64 = v19 + 40 * v61;
        *(void *)(v64 + 32) = v21;
        *(void *)(v64 + 40) = v14;
        *(void *)(v64 + 48) = 0;
        *(void *)(v64 + 56) = 0;
        *(unsigned char *)(v64 + 64) = 1;
        ++v18;
        uint64_t v16 = v55 + v63;
        unint64_t v17 = v76;
        uint64_t v12 = v74;
        if (v15 < v11) {
          goto LABEL_4;
        }
        unint64_t v17 = v76;
        if (v16 < v74) {
          goto LABEL_4;
        }
        goto LABEL_84;
      }
      uint64_t v24 = v11;
      if ((v17 & 0x8000000000000000) == 0)
      {
        uint64_t v24 = v11;
        if (v76 < *((void *)v9 + 2)) {
          uint64_t v24 = *(void *)v69;
        }
      }
      uint64_t v25 = v12;
      if (v18 < v23) {
        uint64_t v25 = *(void *)v72;
      }
      if (v25 - v16 >= v24 - v15) {
        uint64_t v26 = v24 - v15;
      }
      else {
        uint64_t v26 = v25 - v16;
      }
      uint64_t v27 = v11 - v22;
      if (v26 < 1)
      {
        if (v27 <= 0 && v26 < v27)
        {
          if (v11 < v22) {
            goto LABEL_85;
          }
          uint64_t v28 = v12 - v21;
          uint64_t v29 = v11;
LABEL_34:
          if (v28 <= 0)
          {
            uint64_t v30 = v12;
            if (v26 < v28) {
              goto LABEL_37;
            }
          }
          goto LABEL_36;
        }
      }
      else if ((v27 & 0x8000000000000000) == 0 && v27 < (unint64_t)v26)
      {
        if (v11 < v22) {
          goto LABEL_85;
        }
        uint64_t v28 = v12 - v21;
        uint64_t v29 = v11;
        goto LABEL_31;
      }
      uint64_t v29 = v22 + v26;
      if (__OFADD__(v22, v26)) {
        goto LABEL_87;
      }
      if (v29 < v22)
      {
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
      uint64_t v28 = v12 - v21;
      if (v26 < 1) {
        goto LABEL_34;
      }
LABEL_31:
      if ((v28 & 0x8000000000000000) == 0)
      {
        uint64_t v30 = v12;
        if (v28 < (unint64_t)v26) {
          goto LABEL_37;
        }
      }
LABEL_36:
      uint64_t v30 = v21 + v26;
      if (__OFADD__(v21, v26)) {
        goto LABEL_88;
      }
LABEL_37:
      if (v30 < v21) {
        goto LABEL_86;
      }
      uint64_t v31 = v21;
      uint64_t v32 = v22;
      uint64_t v33 = v11;
      uint64_t v34 = v15;
      uint64_t v35 = v16;
      uint64_t v36 = v19;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v19 = v36;
      }
      else
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1, (char *)v36);
        uint64_t v19 = result;
      }
      unint64_t v38 = *(void *)(v19 + 16);
      unint64_t v37 = *(void *)(v19 + 24);
      if (v38 >= v37 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, (char *)v19);
        uint64_t v40 = v32;
        uint64_t v39 = v35;
        uint64_t v19 = result;
      }
      else
      {
        uint64_t v39 = v35;
        uint64_t v40 = v32;
      }
      *(void *)(v19 + 16) = v38 + 1;
      unint64_t v41 = v19 + 40 * v38;
      *(void *)(v41 + 32) = v40;
      *(void *)(v41 + 40) = v29;
      uint64_t v15 = v26 + v34;
      *(void *)(v41 + 48) = v31;
      *(void *)(v41 + 56) = v30;
      *(unsigned char *)(v41 + 64) = 2;
      uint64_t v16 = v26 + v39;
      uint64_t v22 = v29;
      uint64_t v21 = v30;
      uint64_t v11 = v33;
      BOOL v42 = v15 < v33;
      uint64_t v9 = v70;
      unint64_t v18 = v71;
      unint64_t v17 = v73;
      uint64_t v12 = v74;
      if (!v42)
      {
        uint64_t v22 = v29;
        uint64_t v21 = v30;
        if (v16 >= v74) {
          goto LABEL_84;
        }
      }
    }
    uint64_t v43 = *(void *)&v67[16 * v76 + 8];
    uint64_t v44 = v43 - v15;
    if (__OFSUB__(v43, v15)) {
      goto LABEL_91;
    }
    uint64_t v45 = v11 - v22;
    if (v44 < 1)
    {
      if (v45 > 0) {
        goto LABEL_54;
      }
      uint64_t v20 = v11;
      if (v44 >= v45) {
        goto LABEL_54;
      }
    }
    else if (v45 < 0 || (uint64_t v20 = v11, v45 >= (unint64_t)v44))
    {
LABEL_54:
      uint64_t v20 = v22 + v44;
      if (__OFADD__(v22, v44)) {
        goto LABEL_94;
      }
    }
    if (v20 < v22) {
      goto LABEL_92;
    }
    uint64_t v46 = v16;
    uint64_t v47 = v22;
    uint64_t v48 = v19;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v19 = v48;
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v48 + 16) + 1, 1, (char *)v48);
      uint64_t v19 = result;
    }
    unint64_t v50 = *(void *)(v19 + 16);
    unint64_t v49 = *(void *)(v19 + 24);
    unint64_t v51 = v50 + 1;
    if (v50 >= v49 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, (char *)v19);
      unint64_t v51 = v50 + 1;
      uint64_t v52 = v47;
      uint64_t v16 = v46;
      uint64_t v19 = result;
    }
    else
    {
      uint64_t v16 = v46;
      uint64_t v52 = v47;
    }
    unint64_t v17 = v73;
    uint64_t v12 = v74;
    *(void *)(v19 + 16) = v51;
    unint64_t v53 = v19 + 40 * v50;
    *(void *)(v53 + 32) = v52;
    *(void *)(v53 + 40) = v20;
    ++v76;
    v15 += v44;
    *(void *)(v53 + 48) = 0;
    *(void *)(v53 + 56) = 0;
    *(unsigned char *)(v53 + 64) = 0;
    if (v15 < v11 || v16 < v74) {
      continue;
    }
    break;
  }
LABEL_84:
  uint64_t v65 = v19;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t *v68 = v65;
  return result;
}

char *convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(char *a1)
{
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1);
  unint64_t v3 = *((void *)a1 + 2);
  unint64_t v2 = *((void *)a1 + 3);
  unint64_t v4 = v3 + 1;
  if (v3 >= v2 >> 1) {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, a1);
  }
  int64_t v5 = 0;
  uint64_t v6 = 0;
  *((void *)a1 + 2) = v4;
  *(void *)&a1[8 * v3 + 32] = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  char v8 = 1;
  unint64_t v9 = 0x8000000000000000;
  do
  {
    int64_t v13 = v9;
    unint64_t v9 = *(void *)&a1[8 * v6 + 32];
    if (v13 < (uint64_t)(v9 - 1)) {
      unint64_t v12 = *(void *)&a1[8 * v6 + 32];
    }
    else {
      unint64_t v12 = v5;
    }
    char v10 = (v13 >= (uint64_t)(v9 - 1)) & v8;
    if (v13 < (uint64_t)(v9 - 1) && (v8 & 1) == 0)
    {
      int64_t v14 = v13 + 1;
      if (v13 + 1 < v5)
      {
        __break(1u);
        goto LABEL_19;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v16 = *((void *)v7 + 2);
      unint64_t v15 = *((void *)v7 + 3);
      if (v16 >= v15 >> 1) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v7);
      }
      char v10 = 0;
      *((void *)v7 + 2) = v16 + 1;
      uint64_t v11 = &v7[16 * v16];
      *((void *)v11 + 4) = v5;
      *((void *)v11 + 5) = v14;
      unint64_t v12 = v9;
    }
    ++v6;
    int64_t v5 = v12;
    char v8 = v10;
  }
  while (v4 != v6);
  swift_bridgeObjectRelease();
  return v7;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  char v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v38 = v2;
  swift_bridgeObjectRetain();
  v25[1] = a1;
  char v10 = (uint64_t *)(a1 + 40);
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v13 = *(v10 - 1);
    uint64_t v12 = *v10;
    uint64_t v14 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    if (v14 && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12), (v16 & 1) != 0))
    {
      _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(*(void *)(a2 + 56) + *(void *)(v6 + 72) * v15, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
      ToolbarStorage.Entry.id.getter((uint64_t)&v32);
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
    }
    else
    {
      char v37 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v33 + 1))
    {
      long long v28 = v34;
      long long v29 = v35;
      long long v30 = v36;
      char v31 = v37;
      long long v26 = v32;
      long long v27 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      }
      unint64_t v18 = *((void *)v11 + 2);
      unint64_t v17 = *((void *)v11 + 3);
      if (v18 >= v17 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v11);
      }
      *((void *)v11 + 2) = v18 + 1;
      uint64_t v19 = &v11[88 * v18];
      long long v20 = v27;
      *((_OWORD *)v19 + 2) = v26;
      *((_OWORD *)v19 + 3) = v20;
      long long v21 = v28;
      long long v22 = v29;
      long long v23 = v30;
      v19[112] = v31;
      *((_OWORD *)v19 + 5) = v22;
      *((_OWORD *)v19 + 6) = v23;
      *((_OWORD *)v19 + 4) = v21;
    }
    else
    {
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
    }
    v10 += 2;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Swift::UInt v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v16[24];

  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v3 = a2 + 16;
  unint64_t v4 = (char *)(swift_bridgeObjectRetain() + 184);
  uint64_t v5 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v7 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v8 = *v4;
    swift_beginAccess();
    if (*(void *)(*(void *)v3 + 16))
    {
      outlined copy of SceneID(v7, v6, v8);
      specialized __RawDictionaryStorage.find<A>(_:)(v7, v6, v8);
      if (v9)
      {
        swift_endAccess();
        swift_bridgeObjectRetain();
        outlined consume of SceneID(v7, v6, v8);
        static Semantics.v6.getter();
        if (isLinkedOnOrAfter(_:)())
        {
          char v10 = swift_bridgeObjectRetain();
          specialized Sequence<>.max()(v10, v16);
        }
        else
        {
          uint64_t v11 = swift_bridgeObjectRetain();
          specialized Sequence<>.min()(v11, v16);
        }
        swift_bridgeObjectRelease_n();
        if (v16[0] == 3) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = v16[0];
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        uint64_t v14 = *((void *)v5 + 2);
        uint64_t v13 = *((void *)v5 + 3);
        if (v14 >= v13 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v5);
        }
        *((void *)v5 + 2) = v14 + 1;
        v5[v14 + 32] = v12;
      }
      else
      {
        swift_endAccess();
        outlined consume of SceneID(v7, v6, v8);
      }
    }
    else
    {
      swift_endAccess();
    }
    v4 += 280;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v15)(void, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29[19];
  unsigned char v30[152];
  unsigned char v31[160];
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void v36[8];
  char *v37;

  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  long long v27 = (void *)(a2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  unint64_t v3 = swift_bridgeObjectRetain() + 56;
  unint64_t v4 = (char *)MEMORY[0x1E4FBC860];
  long long v26 = MEMORY[0x1E4FBC840] + 8;
  do
  {
    char v37 = v4;
    uint64_t v6 = *(void *)(v3 - 24);
    uint64_t v5 = *(void *)(v3 - 16);
    uint64_t v7 = *(unsigned char *)(v3 - 8);
    char v8 = v27[1];
    v36[4] = *v27;
    v36[5] = v8;
    outlined copy of Text.Storage(v6, v5, v7);
    swift_bridgeObjectRetain_n();
    outlined copy of Text.Storage(v6, v5, v7);
    swift_retain();
    swift_retain();
    AccessibilityNode.attachment.getter(&v32);
    uint64_t v9 = v32;

    long long v28 = v2;
    if (*(void *)(v9 + 16)
      && (char v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey),
          (v11 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v9 + 56) + 40 * v10, (uint64_t)&v32);
      uint64_t v12 = v34;
      uint64_t v13 = v35;
      __swift_project_boxed_opaque_existential_1(&v32, v34);
      uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 8);
      swift_bridgeObjectRetain();
      v14(v36, v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
    }
    else
    {
      memset(v36, 0, 32);
      swift_bridgeObjectRetain();
    }
    unint64_t v15 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sypSgMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v26, MEMORY[0x1E4FBB718]);
    _sypSgMaTm_5(0, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, v15);
    if (swift_dynamicCast())
    {
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v32, v16, v17, v18);
      outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)&v32, (uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityTextLayoutProperties??);
      swift_bridgeObjectRelease_n();
      outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)v29, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityTextLayoutProperties??);
      _s7SwiftUI4PathVSgWObTm_0((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
      if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v31) != 1) {
        outlined release of AccessibilityTextLayoutProperties??(v29);
      }
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    long long v33 = 0;
    long long v32 = 0;
    uint64_t v19 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
    long long v21 = v20;
    outlined consume of Text.Storage(v6, v5, v7);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v6, v5, v7);
    swift_bridgeObjectRelease();
    unint64_t v4 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    }
    long long v23 = *((void *)v4 + 2);
    long long v22 = *((void *)v4 + 3);
    if (v23 >= v22 >> 1) {
      unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v23 + 1;
    uint64_t v24 = &v4[16 * v23];
    *((void *)v24 + 4) = v19;
    *((void *)v24 + 5) = v21;
    v3 += 32;
    uint64_t v2 = v28 - 1;
  }
  while (v28 != 1);
  swift_bridgeObjectRelease();
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  long long v13;
  long long v14;
  unsigned __int8 v15;
  uint64_t v16[2];

  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v6 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    char v8 = *v5;
    v16[0] = *(v5 - 1);
    v16[1] = v8;
    swift_bridgeObjectRetain();
    closure #1 in TabViewCoordinator_Phone.updatedOrder(within:newOrder:customization:tabCache:)(v16, a2, (uint64_t)&v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = v15;
    if (v15 != 255)
    {
      uint64_t v13 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      }
      uint64_t v11 = *((void *)v6 + 2);
      char v10 = *((void *)v6 + 3);
      if (v11 >= v10 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v11 + 1;
      uint64_t v7 = &v6[24 * v11];
      *((_OWORD *)v7 + 2) = v13;
      v7[48] = v9 & 1;
    }
    v5 += 2;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(uint64_t a1, Swift::Int a2, uint64_t a3, Swift::Int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = a3;
  uint64_t v94 = a6;
  uint64_t v91 = a5;
  uint64_t v92 = a1;
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for CollectionDifference<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBBD80]);
  uint64_t v89 = *(void *)(v8 - 8);
  Swift::Int v90 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v88 = (char *)&v84 - v9;
  char v10 = (void *)MEMORY[0x1E4FBC868];
  id v106 = (void *)MEMORY[0x1E4FBC868];
  type metadata accessor for [TableRowID : Int](0, &lazy cache variable for type metadata for [ToolbarStorage.Entry.ID : Int], (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  uint64_t v12 = v11;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    uint64_t v105 = v10;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0) {
        goto LABEL_121;
      }
      uint64_t v28 = 0;
      long long v29 = v105;
      uint64_t v30 = v92;
      while (1)
      {
        if (a2 == v28) {
          goto LABEL_116;
        }
        outlined init with copy of ToolbarStorage.Entry.ID(v30, (uint64_t)v97);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v103[0] = v29;
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97);
        uint64_t v34 = v29[2];
        BOOL v35 = (v32 & 1) == 0;
        uint64_t v36 = v34 + v35;
        if (__OFADD__(v34, v35)) {
          goto LABEL_117;
        }
        char v37 = v32;
        if (v29[3] >= v36)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            long long v29 = (void *)v103[0];
            if ((v32 & 1) == 0) {
              goto LABEL_32;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            long long v29 = (void *)v103[0];
            if ((v37 & 1) == 0) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
          unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97);
          if ((v37 & 1) != (v39 & 1)) {
            goto LABEL_122;
          }
          unint64_t v33 = v38;
          long long v29 = (void *)v103[0];
          if ((v37 & 1) == 0)
          {
LABEL_32:
            v29[(v33 >> 6) + 8] |= 1 << v33;
            outlined init with copy of ToolbarStorage.Entry.ID((uint64_t)v97, v29[6] + 88 * v33);
            *(void *)(v29[7] + 8 * v33) = v28;
            uint64_t v40 = v29[2];
            BOOL v26 = __OFADD__(v40, 1);
            uint64_t v41 = v40 + 1;
            if (v26) {
              goto LABEL_119;
            }
            v29[2] = v41;
            goto LABEL_23;
          }
        }
        *(void *)(v29[7] + 8 * v33) = v28;
LABEL_23:
        ++v28;
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v97);
        v30 += 88;
        if (a2 == v28)
        {
          uint64_t v105 = v29;
          break;
        }
      }
    }
    if (v106[2] == a4 && v105[2] == a2)
    {
      LODWORD(v91) = a2 != 0;
      if (a4 | a2)
      {
        Swift::Int v42 = 0;
        Swift::Int v43 = 0;
        uint64_t v85 = &v102;
        uint64_t v86 = &v104;
        uint64_t v87 = &v99;
        uint64_t v44 = MEMORY[0x1E4FBC860];
        uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
LABEL_41:
        uint64_t v88 = v45;
LABEL_42:
        uint64_t v89 = v92 + 88 * v43;
        Swift::Int v90 = v43;
        uint64_t v46 = v93 + 88 * v42;
        while (1)
        {
          uint64_t v47 = *(void *)(v44 + 16);
          uint64_t v48 = *((void *)v45 + 2);
          if (v48 + v47 > v94) {
            goto LABEL_110;
          }
          if (v43 == a2)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47 + 1, 1, (char *)v44);
            }
            unint64_t v50 = *(void *)(v44 + 16);
            unint64_t v49 = *(void *)(v44 + 24);
            unint64_t v51 = v50 + 1;
            Swift::Int v43 = v90;
            if (v50 >= v49 >> 1)
            {
              uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, (char *)v44);
              Swift::Int v43 = v90;
              uint64_t v44 = (uint64_t)v52;
            }
            goto LABEL_44;
          }
          if (a4 == v42)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48 + 1, 1, v45);
            }
            unint64_t v66 = *((void *)v45 + 2);
            unint64_t v65 = *((void *)v45 + 3);
            Swift::Int v67 = v90;
            if (v66 >= v65 >> 1)
            {
              BOOL v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v45);
              Swift::Int v67 = v90;
              uint64_t v45 = v77;
            }
            *((void *)v45 + 2) = v66 + 1;
            *(void *)&v45[8 * v66 + 32] = v67;
            Swift::Int v43 = v67 + 1;
            Swift::Int v42 = a4;
            goto LABEL_87;
          }
          outlined init with copy of ToolbarStorage.Entry.ID(v46, (uint64_t)v103);
          outlined init with copy of ToolbarStorage.Entry.ID(v89, (uint64_t)v101);
          if (MEMORY[0x18C1174E0](v103, v101))
          {
            unint64_t v53 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
            outlined init with copy of CollectionDifference<AnyHashable>.Change((uint64_t)v86, (uint64_t)v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
            outlined init with copy of CollectionDifference<AnyHashable>.Change((uint64_t)v85, (uint64_t)v87, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v53);
            if (v98 == 255)
            {
              if (v100 == 255)
              {
                outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
                uint64_t v45 = v88;
LABEL_74:
                outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v101);
                outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v103);
                ++v42;
                Swift::Int v43 = v90 + 1;
                LODWORD(v91) = v90 + 1 < a2;
                if (v42 < a4 || v43 < a2) {
                  goto LABEL_42;
                }
                goto LABEL_110;
              }
            }
            else
            {
              outlined init with copy of CollectionDifference<AnyHashable>.Change((uint64_t)v97, (uint64_t)v96, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
              if (v100 != 255)
              {
                outlined init with take of ToolbarItemPlacement.Role((uint64_t)v87, (uint64_t)v95);
                char v54 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v96, (uint64_t)v95);
                outlined destroy of ToolbarItemPlacement.Role((uint64_t)v95);
                outlined destroy of ToolbarItemPlacement.Role((uint64_t)v96);
                outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
                uint64_t v45 = v88;
                if (v54) {
                  goto LABEL_74;
                }
                goto LABEL_61;
              }
              outlined destroy of ToolbarItemPlacement.Role((uint64_t)v96);
            }
            _ss11AnyHashableVSg_ACtWOhTm_0((uint64_t)v97, (uint64_t)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?), (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(void))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
          }
LABEL_61:
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v101);
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v103);
          outlined init with copy of ToolbarStorage.Entry.ID(v46, (uint64_t)v97);
          uint64_t v55 = v105;
          if (v105[2] && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97), (v57 & 1) != 0))
          {
            int v58 = 0;
            uint64_t v59 = *(void *)(v55[7] + 8 * v56);
          }
          else
          {
            uint64_t v59 = 0;
            int v58 = 1;
          }
          outlined init with copy of ToolbarStorage.Entry.ID(v89, (uint64_t)v103);
          unint64_t v60 = v106;
          if (v106[2] && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v103), (v62 & 1) != 0))
          {
            if (!v58)
            {
              Swift::Int v72 = *(void *)(v60[7] + 8 * v61);
              outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v103);
              outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v97);
              Swift::Int v73 = v59 - v90;
              if (v59 >= v90)
              {
                if (v72 < v42)
                {
                  uint64_t v45 = v88;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
                  }
                  unint64_t v70 = *((void *)v45 + 2);
                  unint64_t v69 = *((void *)v45 + 3);
                  int64_t v71 = v70 + 1;
                  Swift::Int v68 = v90;
                  if (v70 < v69 >> 1) {
                    goto LABEL_86;
                  }
                  goto LABEL_101;
                }
                uint64_t v45 = v88;
                if (v72 - v42 >= v73)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
                  }
                  Swift::Int v68 = v90;
                  goto LABEL_85;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
                }
              }
              else
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
                }
                uint64_t v45 = v88;
              }
              unint64_t v75 = *(void *)(v44 + 16);
              unint64_t v74 = *(void *)(v44 + 24);
              Swift::Int v43 = v90;
              if (v75 >= v74 >> 1)
              {
                uint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, (char *)v44);
                Swift::Int v43 = v90;
                uint64_t v44 = (uint64_t)v78;
              }
              *(void *)(v44 + 16) = v75 + 1;
              *(void *)(v44 + 8 * v75 + 32) = v42++;
LABEL_87:
              LODWORD(v91) = v43 < a2;
              if (v42 < a4 || v43 < a2) {
                goto LABEL_41;
              }
              goto LABEL_110;
            }
          }
          else if ((v58 & 1) == 0)
          {
            outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v103);
            outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v97);
            uint64_t v45 = v88;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
            }
            Swift::Int v68 = v90;
LABEL_85:
            unint64_t v70 = *((void *)v45 + 2);
            unint64_t v69 = *((void *)v45 + 3);
            int64_t v71 = v70 + 1;
            if (v70 < v69 >> 1)
            {
LABEL_86:
              *((void *)v45 + 2) = v71;
              *(void *)&v45[8 * v70 + 32] = v68;
              Swift::Int v43 = v68 + 1;
              goto LABEL_87;
            }
LABEL_101:
            unint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v71, 1, v45);
            Swift::Int v68 = v90;
            uint64_t v45 = v76;
            goto LABEL_86;
          }
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v103);
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v97);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
          }
          unint64_t v50 = *(void *)(v44 + 16);
          unint64_t v63 = *(void *)(v44 + 24);
          unint64_t v51 = v50 + 1;
          Swift::Int v43 = v90;
          if (v50 >= v63 >> 1)
          {
            unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v50 + 1, 1, (char *)v44);
            Swift::Int v43 = v90;
            uint64_t v44 = (uint64_t)v64;
          }
          uint64_t v45 = v88;
LABEL_44:
          *(void *)(v44 + 16) = v51;
          *(void *)(v44 + 8 * v50 + 32) = v42++;
          v46 += 88;
          if (!((v42 < a4) | v91 & 1)) {
            goto LABEL_110;
          }
        }
      }
      uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v44 = MEMORY[0x1E4FBC860];
LABEL_110:
      if (*((void *)v45 + 2) + *(void *)(v44 + 16) <= v94)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = 0;
      }
    }
    else
    {
      v97[0] = v92;
      v97[1] = a2;
      v103[0] = v93;
      v103[1] = a4;
      type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBB0C0]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>();
      lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
      char v79 = v88;
      BidirectionalCollection<>.difference<A>(from:)();
      Swift::Int v80 = v90;
      uint64_t v81 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV5EntryV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f23OyAL_GXEfU_Si_SiSayAA14ij2V5K11V2IDVGAZTG5AJ0dP0VyS2iGTf1cn_nTf4nd_nTm(v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV5EntryV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f23OyAL_GXEfU_Si_SiSayAA14ij2V5K11V2IDVGAZTG5AJ0dP0VyS2iGTf1cn_nTf4nd_nTm(v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, Swift::Int))(v89 + 8))(v79, v80);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v44;
  }
  if (a4 < 0) {
    goto LABEL_120;
  }
  uint64_t v87 = (uint64_t *)v12;
  uint64_t v13 = 0;
  uint64_t v14 = v106;
  uint64_t v15 = v93;
  while (a4 != v13)
  {
    outlined init with copy of ToolbarStorage.Entry.ID(v15, (uint64_t)v97);
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    v103[0] = v14;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97);
    uint64_t v19 = v14[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      goto LABEL_115;
    }
    char v22 = v17;
    if (v14[3] >= v21)
    {
      if (v16)
      {
        uint64_t v14 = (void *)v103[0];
        if ((v17 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v14 = (void *)v103[0];
        if ((v22 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v16);
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v97);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_122;
      }
      unint64_t v18 = v23;
      uint64_t v14 = (void *)v103[0];
      if ((v22 & 1) == 0)
      {
LABEL_14:
        v14[(v18 >> 6) + 8] |= 1 << v18;
        outlined init with copy of ToolbarStorage.Entry.ID((uint64_t)v97, v14[6] + 88 * v18);
        *(void *)(v14[7] + 8 * v18) = v13;
        uint64_t v25 = v14[2];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_118;
        }
        v14[2] = v27;
        goto LABEL_5;
      }
    }
    *(void *)(v14[7] + 8 * v18) = v13;
LABEL_5:
    ++v13;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v97);
    v15 += 88;
    if (a4 == v13)
    {
      id v106 = v14;
      char v10 = (void *)MEMORY[0x1E4FBC868];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  Swift::Int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  Swift::Int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char v54;
  void *v55;
  unint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  Swift::Int v67;
  Swift::Int v68;
  unint64_t v69;
  unint64_t v70;
  int64_t v71;
  Swift::Int v72;
  Swift::Int v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  Swift::Int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;
  void v84[2];
  char *v85;
  char *v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void v92[5];
  void *v93;
  void v94[6];
  void *v95;

  Swift::Int v90 = a3;
  uint64_t v91 = a6;
  uint64_t v88 = a5;
  uint64_t v89 = a1;
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for CollectionDifference<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBBD80]);
  uint64_t v87 = v8;
  uint64_t v86 = *(char **)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v85 = (char *)v84 - v9;
  char v10 = (void *)MEMORY[0x1E4FBC868];
  char v95 = (void *)MEMORY[0x1E4FBC868];
  type metadata accessor for [Int : Int](0, &lazy cache variable for type metadata for [AnyHashable : Int]);
  uint64_t v12 = v11;
  Dictionary.reserveCapacity(_:)(a4);
  if (a4)
  {
    if (a4 < 0) {
      goto LABEL_112;
    }
    v84[1] = v12;
    uint64_t v13 = 0;
    uint64_t v14 = v95;
    uint64_t v15 = v90;
    while (1)
    {
      if (a4 == v13)
      {
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      outlined init with copy of AnyHashable(v15, (uint64_t)v94);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v92[0] = v14;
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94);
      uint64_t v19 = v14[2];
      BOOL v20 = (v17 & 1) == 0;
      uint64_t v21 = v19 + v20;
      if (__OFADD__(v19, v20)) {
        goto LABEL_107;
      }
      char v22 = v17;
      if (v14[3] >= v21)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v14 = (void *)v92[0];
          if ((v17 & 1) == 0) {
            goto LABEL_14;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v14 = (void *)v92[0];
          if ((v22 & 1) == 0) {
            goto LABEL_14;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
        unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94);
        if ((v22 & 1) != (v24 & 1)) {
          goto LABEL_114;
        }
        unint64_t v18 = v23;
        uint64_t v14 = (void *)v92[0];
        if ((v22 & 1) == 0)
        {
LABEL_14:
          v14[(v18 >> 6) + 8] |= 1 << v18;
          outlined init with copy of AnyHashable((uint64_t)v94, v14[6] + 40 * v18);
          *(void *)(v14[7] + 8 * v18) = v13;
          uint64_t v25 = v14[2];
          BOOL v26 = __OFADD__(v25, 1);
          uint64_t v27 = v25 + 1;
          if (v26) {
            goto LABEL_110;
          }
          v14[2] = v27;
          goto LABEL_5;
        }
      }
      *(void *)(v14[7] + 8 * v18) = v13;
LABEL_5:
      ++v13;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v94);
      v15 += 40;
      if (a4 == v13)
      {
        char v95 = v14;
        char v10 = (void *)MEMORY[0x1E4FBC868];
        break;
      }
    }
  }
  uint64_t v93 = v10;
  Dictionary.reserveCapacity(_:)(a2);
  if (a2)
  {
    if (a2 < 0) {
      goto LABEL_113;
    }
    uint64_t v28 = 0;
    long long v29 = v93;
    uint64_t v30 = v89;
    while (1)
    {
      if (a2 == v28) {
        goto LABEL_108;
      }
      outlined init with copy of AnyHashable(v30, (uint64_t)v94);
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      v92[0] = v29;
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94);
      uint64_t v34 = v29[2];
      BOOL v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35)) {
        goto LABEL_109;
      }
      char v37 = v32;
      if (v29[3] >= v36)
      {
        if (v31)
        {
          long long v29 = (void *)v92[0];
          if ((v32 & 1) == 0) {
            goto LABEL_32;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          long long v29 = (void *)v92[0];
          if ((v37 & 1) == 0) {
            goto LABEL_32;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, v31);
        unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_114;
        }
        unint64_t v33 = v38;
        long long v29 = (void *)v92[0];
        if ((v37 & 1) == 0)
        {
LABEL_32:
          v29[(v33 >> 6) + 8] |= 1 << v33;
          outlined init with copy of AnyHashable((uint64_t)v94, v29[6] + 40 * v33);
          *(void *)(v29[7] + 8 * v33) = v28;
          uint64_t v40 = v29[2];
          BOOL v26 = __OFADD__(v40, 1);
          uint64_t v41 = v40 + 1;
          if (v26) {
            goto LABEL_111;
          }
          v29[2] = v41;
          goto LABEL_23;
        }
      }
      *(void *)(v29[7] + 8 * v33) = v28;
LABEL_23:
      ++v28;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v94);
      v30 += 40;
      if (a2 == v28)
      {
        uint64_t v93 = v29;
        break;
      }
    }
  }
  if (v95[2] != a4 || v93[2] != a2)
  {
    v94[0] = v89;
    v94[1] = a2;
    v92[0] = v90;
    v92[1] = a4;
    type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB0C0]);
    lazy protocol witness table accessor for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>();
    char v79 = v85;
    BidirectionalCollection<>.difference<A>(from:)();
    Swift::Int v80 = v87;
    uint64_t v81 = CollectionDifference.removals.getter();
    swift_bridgeObjectRetain();
    uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOys11AnyHashableV_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_y1_y6Says11gH7VGAVTG50K2UI0dM0VyS2iGTf1cn_nTf4nd_nTm(v81);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v82 = CollectionDifference.insertions.getter();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOys11AnyHashableV_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_y1_y6Says11gH7VGAVTG50K2UI0dM0VyS2iGTf1cn_nTf4nd_nTm(v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*((void (**)(char *, Swift::Int))v86 + 1))(v79, v80);
    swift_bridgeObjectRelease();
    goto LABEL_105;
  }
  LODWORD(v88) = a2 != 0;
  if (!(a4 | a2))
  {
    uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v44 = MEMORY[0x1E4FBC860];
    goto LABEL_102;
  }
  Swift::Int v42 = 0;
  Swift::Int v43 = 0;
  uint64_t v44 = MEMORY[0x1E4FBC860];
  uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
LABEL_41:
  uint64_t v86 = v45;
  while (2)
  {
    uint64_t v46 = v89 + 40 * v43;
    uint64_t v47 = v90 + 40 * v42;
    uint64_t v87 = v43;
    while (1)
    {
      uint64_t v48 = *(void *)(v44 + 16);
      unint64_t v49 = *((void *)v45 + 2);
      if (v49 + v48 > v91) {
        goto LABEL_102;
      }
      if (v43 == a2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48 + 1, 1, (char *)v44);
        }
        unint64_t v51 = *(void *)(v44 + 16);
        unint64_t v50 = *(void *)(v44 + 24);
        uint64_t v52 = v51 + 1;
        Swift::Int v43 = v87;
        if (v51 >= v50 >> 1)
        {
          unint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, (char *)v44);
          Swift::Int v43 = v87;
          uint64_t v44 = (uint64_t)v53;
        }
        goto LABEL_44;
      }
      if (a4 == v42)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 + 1, 1, v45);
        }
        unint64_t v66 = *((void *)v45 + 2);
        unint64_t v65 = *((void *)v45 + 3);
        Swift::Int v67 = v87;
        if (v66 >= v65 >> 1)
        {
          BOOL v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v45);
          Swift::Int v67 = v87;
          uint64_t v45 = v77;
        }
        *((void *)v45 + 2) = v66 + 1;
        *(void *)&v45[8 * v66 + 32] = v67;
        Swift::Int v43 = v67 + 1;
        Swift::Int v42 = a4;
        goto LABEL_79;
      }
      outlined init with copy of AnyHashable(v47, (uint64_t)v94);
      outlined init with copy of AnyHashable(v46, (uint64_t)v92);
      char v54 = MEMORY[0x18C1174E0](v94, v92);
      outlined destroy of AnyHashable((uint64_t)v92);
      outlined destroy of AnyHashable((uint64_t)v94);
      if (v54) {
        break;
      }
      outlined init with copy of AnyHashable(v47, (uint64_t)v94);
      uint64_t v55 = v93;
      if (v93[2] && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94), (v57 & 1) != 0))
      {
        int v58 = 0;
        uint64_t v59 = *(void *)(v55[7] + 8 * v56);
      }
      else
      {
        uint64_t v59 = 0;
        int v58 = 1;
      }
      outlined init with copy of AnyHashable(v46, (uint64_t)v92);
      unint64_t v60 = v95;
      if (v95[2] && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v92), (v62 & 1) != 0))
      {
        if (!v58)
        {
          Swift::Int v72 = *(void *)(v60[7] + 8 * v61);
          outlined destroy of AnyHashable((uint64_t)v92);
          outlined destroy of AnyHashable((uint64_t)v94);
          Swift::Int v73 = v59 - v87;
          if (v59 >= v87)
          {
            if (v72 < v42)
            {
              uint64_t v45 = v86;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
              }
              unint64_t v70 = *((void *)v45 + 2);
              unint64_t v69 = *((void *)v45 + 3);
              int64_t v71 = v70 + 1;
              Swift::Int v68 = v87;
              if (v70 < v69 >> 1) {
                goto LABEL_78;
              }
              goto LABEL_93;
            }
            uint64_t v45 = v86;
            if (v72 - v42 >= v73)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
              }
              Swift::Int v68 = v87;
              goto LABEL_77;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
            }
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
            }
            uint64_t v45 = v86;
          }
          unint64_t v75 = *(void *)(v44 + 16);
          unint64_t v74 = *(void *)(v44 + 24);
          Swift::Int v43 = v87;
          if (v75 >= v74 >> 1)
          {
            uint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, (char *)v44);
            Swift::Int v43 = v87;
            uint64_t v44 = (uint64_t)v78;
          }
          *(void *)(v44 + 16) = v75 + 1;
          *(void *)(v44 + 8 * v75 + 32) = v42++;
LABEL_79:
          LODWORD(v88) = v43 < a2;
          if (v42 < a4 || v43 < a2) {
            goto LABEL_41;
          }
          goto LABEL_102;
        }
      }
      else if ((v58 & 1) == 0)
      {
        outlined destroy of AnyHashable((uint64_t)v92);
        outlined destroy of AnyHashable((uint64_t)v94);
        uint64_t v45 = v86;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
        }
        Swift::Int v68 = v87;
LABEL_77:
        unint64_t v70 = *((void *)v45 + 2);
        unint64_t v69 = *((void *)v45 + 3);
        int64_t v71 = v70 + 1;
        if (v70 < v69 >> 1)
        {
LABEL_78:
          *((void *)v45 + 2) = v71;
          *(void *)&v45[8 * v70 + 32] = v68;
          Swift::Int v43 = v68 + 1;
          goto LABEL_79;
        }
LABEL_93:
        unint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v71, 1, v45);
        Swift::Int v68 = v87;
        uint64_t v45 = v76;
        goto LABEL_78;
      }
      outlined destroy of AnyHashable((uint64_t)v92);
      outlined destroy of AnyHashable((uint64_t)v94);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
      }
      unint64_t v51 = *(void *)(v44 + 16);
      unint64_t v63 = *(void *)(v44 + 24);
      uint64_t v52 = v51 + 1;
      Swift::Int v43 = v87;
      if (v51 >= v63 >> 1)
      {
        unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v51 + 1, 1, (char *)v44);
        Swift::Int v43 = v87;
        uint64_t v44 = (uint64_t)v64;
      }
      uint64_t v45 = v86;
LABEL_44:
      *(void *)(v44 + 16) = v52;
      *(void *)(v44 + 8 * v51 + 32) = v42++;
      v47 += 40;
      if (!((v42 < a4) | v88 & 1)) {
        goto LABEL_102;
      }
    }
    ++v42;
    Swift::Int v43 = v87 + 1;
    LODWORD(v88) = v87 + 1 < a2;
    if (v42 < a4 || v43 < a2) {
      continue;
    }
    break;
  }
LABEL_102:
  if (*((void *)v45 + 2) + *(void *)(v44 + 16) <= v91)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v44 = 0;
  }
LABEL_105:
  swift_bridgeObjectRelease();
  return v44;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  BOOL v60;
  Swift::Int v61;
  Swift::Int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  Swift::Int v69;
  uint64_t v70;
  id *v71;
  Swift::Int v72;
  uint64_t v73;
  void **v74;
  char v75;
  void **v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  Swift::Int v91;
  Swift::Int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  Swift::Int v96;
  Swift::Int v97;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t result;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id *v114;
  void **v115;
  void **v116;
  void **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  void *v126;
  Swift::Int v127;
  unint64_t v128;
  unint64_t v129;

  char v113 = a5;
  v121 = a3;
  uint64_t v122 = a2;
  char v120 = a1;
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for CollectionDifference<SystemSegmentItem>, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentItem, MEMORY[0x1E4FBBD80]);
  unint64_t v111 = *(void *)(v8 - 8);
  char v112 = v8;
  MEMORY[0x1F4188790](v8);
  v110 = (char *)&v107 - v9;
  id v108 = type metadata accessor for SystemSegmentItem();
  unint64_t v119 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108);
  uint64_t v117 = (void **)((char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (void **)((char *)&v107 - v12);
  MEMORY[0x1F4188790](v14);
  uint64_t v115 = (void **)((char *)&v107 - v15);
  MEMORY[0x1F4188790](v16);
  unint64_t v114 = (id *)((char *)&v107 - v17);
  MEMORY[0x1F4188790](v18);
  BOOL v20 = (void **)((char *)&v107 - v19);
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (void **)((char *)&v107 - v22);
  char v24 = MEMORY[0x1E4FBC868];
  char v129 = MEMORY[0x1E4FBC868];
  type metadata accessor for [SystemSegmentItem : Int]();
  BOOL v26 = v25;
  Dictionary.reserveCapacity(_:)(a4);
  v123 = a4;
  BOOL v116 = v13;
  char v118 = a6;
  if (!a4)
  {
LABEL_19:
    int v128 = v24;
    Swift::Int v43 = v122;
    Dictionary.reserveCapacity(_:)(v122);
    if (!v43)
    {
LABEL_37:
      uint64_t v59 = v123;
      if (*(void *)(v129 + 16) == v123 && (uint64_t v59 = v123, *(void *)(v128 + 16) == v43))
      {
        unint64_t v60 = v43 != 0;
        if (v123 | v43)
        {
          unint64_t v61 = 0;
          char v62 = 0;
          unint64_t v63 = MEMORY[0x1E4FBC860];
          unint64_t v64 = (char *)MEMORY[0x1E4FBC860];
LABEL_41:
          LODWORD(v112) = v60;
          while (1)
          {
            unint64_t v65 = *(void *)(v63 + 16);
            unint64_t v66 = *((void *)v64 + 2);
            if (v66 + v65 > a6) {
              goto LABEL_97;
            }
            if (v62 == v122)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v63 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65 + 1, 1, (char *)v63);
              }
            }
            else
            {
              if (v123 == v61)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66 + 1, 1, v64);
                }
                Swift::Int v90 = *((void *)v64 + 2);
                uint64_t v89 = *((void *)v64 + 3);
                if (v90 >= v89 >> 1) {
                  unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v89 > 1), v90 + 1, 1, v64);
                }
                *((void *)v64 + 2) = v90 + 1;
                *(void *)&v64[8 * v90 + 32] = v62++;
                uint64_t v91 = v123;
                unint64_t v61 = v123;
                goto LABEL_79;
              }
              char v113 = v63;
              Swift::Int v67 = v64;
              Swift::Int v68 = *(void *)(v119 + 72);
              unint64_t v69 = v61;
              unint64_t v70 = v121 + v68 * v61;
              int64_t v71 = v114;
              _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v70, (uint64_t)v114, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
              Swift::Int v72 = v62;
              Swift::Int v73 = v120 + v68 * v62;
              unint64_t v74 = v115;
              _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v73, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
              unint64_t v75 = specialized static SystemSegmentItem.== infix(_:_:)(v71, v74);
              _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v74, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
              _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
              if (v75)
              {
                unint64_t v61 = v69 + 1;
                ++v62;
                uint64_t v92 = v122;
                unint64_t v60 = v72 + 1 < v122;
                a6 = v118;
                unint64_t v64 = v67;
                unint64_t v63 = v113;
                if (v69 + 1 < v123) {
                  goto LABEL_41;
                }
                goto LABEL_80;
              }
              unint64_t v76 = v116;
              _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v70, (uint64_t)v116, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
              BOOL v77 = v128;
              unint64_t v64 = v67;
              unint64_t v61 = v69;
              if (*(void *)(v128 + 16))
              {
                uint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
                LOBYTE(v60) = v112;
                if (v79)
                {
                  Swift::Int v80 = 0;
                  uint64_t v81 = *(void *)(*(void *)(v77 + 56) + 8 * v78);
                }
                else
                {
                  uint64_t v81 = 0;
                  Swift::Int v80 = 1;
                }
              }
              else
              {
                uint64_t v81 = 0;
                Swift::Int v80 = 1;
                LOBYTE(v60) = v112;
              }
              uint64_t v82 = v73;
              uint64_t v83 = v117;
              _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v82, (uint64_t)v117, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
              uint64_t v84 = v129;
              if (*(void *)(v129 + 16) && (uint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v83), (v86 & 1) != 0))
              {
                if (!v80)
                {
                  v96 = *(void *)(*(void *)(v84 + 56) + 8 * v85);
                  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v117, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v116, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                  uint64_t v97 = v81 - v62;
                  if (v81 >= v62)
                  {
                    a6 = v118;
                    unint64_t v63 = v113;
                    if (v96 < v69 || v96 - v69 >= v97)
                    {
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v64 + 2) + 1, 1, v64);
                      }
                      uint64_t v94 = *((void *)v64 + 2);
                      uint64_t v101 = *((void *)v64 + 3);
                      char v95 = v94 + 1;
                      if (v94 >= v101 >> 1) {
                        unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v101 > 1), v94 + 1, 1, v64);
                      }
                      goto LABEL_77;
                    }
                    if (swift_isUniquelyReferenced_nonNull_native()) {
                      goto LABEL_84;
                    }
                  }
                  else
                  {
                    unint64_t v63 = v113;
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    a6 = v118;
                    if (isUniquelyReferenced_nonNull_native)
                    {
LABEL_84:
                      unsigned __int8 v100 = *(void *)(v63 + 16);
                      uint64_t v99 = *(void *)(v63 + 24);
                      if (v100 >= v99 >> 1) {
                        unint64_t v63 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v100 + 1, 1, (char *)v63);
                      }
                      *(void *)(v63 + 16) = v100 + 1;
                      *(void *)(v63 + 8 * v100 + 32) = v69;
                      unint64_t v61 = v69 + 1;
                      goto LABEL_78;
                    }
                  }
                  unint64_t v63 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1, (char *)v63);
                  goto LABEL_84;
                }
              }
              else if ((v80 & 1) == 0)
              {
                _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v117, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v116, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v64 + 2) + 1, 1, v64);
                }
                a6 = v118;
                uint64_t v94 = *((void *)v64 + 2);
                uint64_t v93 = *((void *)v64 + 3);
                char v95 = v94 + 1;
                if (v94 >= v93 >> 1) {
                  unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v93 > 1), v94 + 1, 1, v64);
                }
                unint64_t v63 = v113;
LABEL_77:
                *((void *)v64 + 2) = v95;
                *(void *)&v64[8 * v94 + 32] = v62++;
LABEL_78:
                uint64_t v91 = v123;
LABEL_79:
                uint64_t v92 = v122;
                unint64_t v60 = v62 < v122;
                if (v61 < v91) {
                  goto LABEL_41;
                }
LABEL_80:
                if (v62 < v92) {
                  goto LABEL_41;
                }
                goto LABEL_97;
              }
              _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v117, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
              _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v116, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
              unint64_t v63 = v113;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v63 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1, (char *)v63);
              }
              a6 = v118;
            }
            uint64_t v88 = *(void *)(v63 + 16);
            uint64_t v87 = *(void *)(v63 + 24);
            if (v88 >= v87 >> 1) {
              unint64_t v63 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v87 > 1), v88 + 1, 1, (char *)v63);
            }
            *(void *)(v63 + 16) = v88 + 1;
            *(void *)(v63 + 8 * v88 + 32) = v61++;
            if (v61 >= v123 && !v60) {
              goto LABEL_97;
            }
          }
        }
        unint64_t v64 = (char *)MEMORY[0x1E4FBC860];
        unint64_t v63 = MEMORY[0x1E4FBC860];
LABEL_97:
        if (*((void *)v64 + 2) + *(void *)(v63 + 16) <= a6)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v63 = 0;
        }
      }
      else
      {
        uint64_t v126 = (void *)v120;
        v127 = v43;
        uint64_t v124 = v121;
        uint64_t v125 = v59;
        type metadata accessor for UnsafeBufferPointer<SystemSegmentItem>(0);
        lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type UnsafeBufferPointer<SystemSegmentItem> and conformance UnsafeBufferPointer<A>, type metadata accessor for UnsafeBufferPointer<SystemSegmentItem>);
        lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem((unint64_t *)&lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem, (void (*)(uint64_t))type metadata accessor for SystemSegmentItem);
        uint64_t v102 = v110;
        BidirectionalCollection<>.difference<A>(from:)();
        unint64_t v103 = v112;
        uint64_t v104 = CollectionDifference.removals.getter();
        swift_bridgeObjectRetain();
        unint64_t v63 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI17SystemSegmentItemV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA17ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v104);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v105 = CollectionDifference.insertions.getter();
        swift_bridgeObjectRetain();
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI17SystemSegmentItemV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA17ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v111 + 8))(v102, v103);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      return v63;
    }
    if (v43 < 0) {
      goto LABEL_108;
    }
    uint64_t v44 = 0;
    uint64_t v45 = (void *)v128;
    uint64_t v46 = v120;
    uint64_t v47 = *(void *)(v119 + 72);
    while (1)
    {
      if (v43 == v44) {
        goto LABEL_103;
      }
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v46, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      uint64_t v48 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v126 = v45;
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
      unint64_t v51 = v45[2];
      uint64_t v52 = (v49 & 1) == 0;
      unint64_t v53 = v51 + v52;
      if (__OFADD__(v51, v52)) {
        goto LABEL_104;
      }
      char v54 = v49;
      if (v45[3] >= v53)
      {
        if (v48)
        {
          uint64_t v45 = v126;
          if ((v49 & 1) == 0) {
            goto LABEL_32;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v45 = v126;
          if ((v54 & 1) == 0) {
            goto LABEL_32;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, v48);
        uint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
        if ((v54 & 1) != (v56 & 1))
        {
          int v128 = 0x8000000000000000;
          goto LABEL_111;
        }
        unint64_t v50 = v55;
        uint64_t v45 = v126;
        if ((v54 & 1) == 0)
        {
LABEL_32:
          v45[(v50 >> 6) + 8] |= 1 << v50;
          _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v20, v45[6] + v50 * v47, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
          *(void *)(v45[7] + 8 * v50) = v44;
          char v57 = v45[2];
          uint64_t v41 = __OFADD__(v57, 1);
          int v58 = v57 + 1;
          if (v41) {
            goto LABEL_106;
          }
          v45[2] = v58;
          goto LABEL_23;
        }
      }
      *(void *)(v45[7] + 8 * v50) = v44;
LABEL_23:
      ++v44;
      swift_bridgeObjectRelease();
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      v46 += v47;
      Swift::Int v43 = v122;
      if (v122 == v44)
      {
        int v128 = (unint64_t)v45;
        a6 = v118;
        goto LABEL_37;
      }
    }
  }
  if (a4 < 0) {
    goto LABEL_107;
  }
  uint64_t v109 = v26;
  uint64_t v27 = 0;
  uint64_t v28 = (void *)v129;
  long long v29 = *(void *)(v119 + 72);
  uint64_t v30 = v121;
  while (a4 != v27)
  {
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v30, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v126 = v28;
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
    uint64_t v34 = v28[2];
    BOOL v35 = (v32 & 1) == 0;
    uint64_t v36 = v34 + v35;
    if (__OFADD__(v34, v35)) {
      goto LABEL_102;
    }
    char v37 = v32;
    if (v28[3] >= v36)
    {
      if (v31)
      {
        uint64_t v28 = v126;
        if ((v32 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v28 = v126;
        if ((v37 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, v31);
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_109;
      }
      unint64_t v33 = v38;
      uint64_t v28 = v126;
      if ((v37 & 1) == 0)
      {
LABEL_14:
        v28[(v33 >> 6) + 8] |= 1 << v33;
        _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v23, v28[6] + v33 * v29, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
        *(void *)(v28[7] + 8 * v33) = v27;
        uint64_t v40 = v28[2];
        uint64_t v41 = __OFADD__(v40, 1);
        Swift::Int v42 = v40 + 1;
        if (v41) {
          goto LABEL_105;
        }
        v28[2] = v42;
        goto LABEL_5;
      }
    }
    *(void *)(v28[7] + 8 * v33) = v27;
LABEL_5:
    ++v27;
    swift_bridgeObjectRelease();
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    v30 += v29;
    a4 = v123;
    if (v123 == v27)
    {
      char v129 = (unint64_t)v28;
      a6 = v118;
      char v24 = MEMORY[0x1E4FBC868];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  char v129 = 0x8000000000000000;
LABEL_111:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  Swift::Int v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  char v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  Swift::Int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  long long v53;
  char v54;
  void *v55;
  unint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  Swift::Int v67;
  Swift::Int v68;
  unint64_t v69;
  unint64_t v70;
  int64_t v71;
  Swift::Int v72;
  Swift::Int v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  Swift::Int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[2];
  uint64_t v94;
  void v95[6];
  void v96[5];
  char v97;
  uint64_t v98;
  char v99;
  unsigned char v100[48];
  void v101[6];
  void *v102;
  void *v103;

  uint64_t v91 = a3;
  uint64_t v92 = a6;
  uint64_t v89 = a5;
  Swift::Int v90 = a1;
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for CollectionDifference<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBD80]);
  uint64_t v87 = *(void *)(v8 - 8);
  uint64_t v88 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v86 = (uint64_t *)((char *)&v84 - v9);
  char v10 = (void *)MEMORY[0x1E4FBC868];
  unint64_t v103 = (void *)MEMORY[0x1E4FBC868];
  type metadata accessor for [TableRowID : Int](0, &lazy cache variable for type metadata for [TableRowID : Int], (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  uint64_t v12 = v11;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    uint64_t v102 = v10;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0) {
        goto LABEL_121;
      }
      uint64_t v28 = 0;
      long long v29 = v102;
      uint64_t v30 = v90;
      while (1)
      {
        if (a2 == v28) {
          goto LABEL_116;
        }
        outlined init with copy of TableRowID(v30, (uint64_t)v96);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v101[0] = v29;
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v96);
        uint64_t v34 = v29[2];
        BOOL v35 = (v32 & 1) == 0;
        uint64_t v36 = v34 + v35;
        if (__OFADD__(v34, v35)) {
          goto LABEL_117;
        }
        char v37 = v32;
        if (v29[3] >= v36)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            long long v29 = (void *)v101[0];
            if ((v32 & 1) == 0) {
              goto LABEL_32;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            long long v29 = (void *)v101[0];
            if ((v37 & 1) == 0) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
          unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v96);
          if ((v37 & 1) != (v39 & 1)) {
            goto LABEL_122;
          }
          unint64_t v33 = v38;
          long long v29 = (void *)v101[0];
          if ((v37 & 1) == 0)
          {
LABEL_32:
            v29[(v33 >> 6) + 8] |= 1 << v33;
            outlined init with copy of TableRowID((uint64_t)v96, v29[6] + 48 * v33);
            *(void *)(v29[7] + 8 * v33) = v28;
            uint64_t v40 = v29[2];
            BOOL v26 = __OFADD__(v40, 1);
            uint64_t v41 = v40 + 1;
            if (v26) {
              goto LABEL_119;
            }
            v29[2] = v41;
            goto LABEL_23;
          }
        }
        *(void *)(v29[7] + 8 * v33) = v28;
LABEL_23:
        ++v28;
        swift_bridgeObjectRelease();
        outlined destroy of TableRowID((uint64_t)v96);
        v30 += 48;
        if (a2 == v28)
        {
          uint64_t v102 = v29;
          break;
        }
      }
    }
    if (v103[2] == a4 && v102[2] == a2)
    {
      LODWORD(v89) = a2 != 0;
      if (a4 | a2)
      {
        Swift::Int v42 = 0;
        Swift::Int v43 = 0;
        uint64_t v86 = &v98;
        uint64_t v44 = MEMORY[0x1E4FBC860];
        uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
LABEL_41:
        uint64_t v85 = v45;
LABEL_42:
        uint64_t v87 = v90 + 48 * v43;
        uint64_t v88 = v43;
        uint64_t v46 = v91 + 48 * v42;
        while (1)
        {
          uint64_t v47 = *(void *)(v44 + 16);
          uint64_t v48 = *((void *)v45 + 2);
          if (v48 + v47 > v92) {
            goto LABEL_110;
          }
          if (v43 == a2)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47 + 1, 1, (char *)v44);
            }
            unint64_t v50 = *(void *)(v44 + 16);
            unint64_t v49 = *(void *)(v44 + 24);
            unint64_t v51 = v50 + 1;
            Swift::Int v43 = v88;
            if (v50 >= v49 >> 1)
            {
              uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, (char *)v44);
              Swift::Int v43 = v88;
              uint64_t v44 = (uint64_t)v52;
            }
            goto LABEL_44;
          }
          if (a4 == v42)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48 + 1, 1, v45);
            }
            unint64_t v66 = *((void *)v45 + 2);
            unint64_t v65 = *((void *)v45 + 3);
            Swift::Int v67 = v88;
            if (v66 >= v65 >> 1)
            {
              BOOL v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v45);
              Swift::Int v67 = v88;
              uint64_t v45 = v77;
            }
            *((void *)v45 + 2) = v66 + 1;
            *(void *)&v45[8 * v66 + 32] = v67;
            Swift::Int v43 = v67 + 1;
            Swift::Int v42 = a4;
            goto LABEL_87;
          }
          outlined init with copy of TableRowID(v46, (uint64_t)v101);
          outlined init with copy of TableRowID(v87, (uint64_t)v100);
          outlined init with copy of TableRowID((uint64_t)v101, (uint64_t)v96);
          outlined init with copy of TableRowID((uint64_t)v100, (uint64_t)v86);
          if (v97)
          {
            outlined init with copy of TableRowID((uint64_t)v96, (uint64_t)v95);
            if (v99)
            {
              unint64_t v53 = *((_OWORD *)v86 + 1);
              v93[0] = *(_OWORD *)v86;
              v93[1] = v53;
              uint64_t v94 = v86[4];
              char v54 = MEMORY[0x18C1174E0](v95, v93);
              outlined destroy of AnyHashable((uint64_t)v93);
              outlined destroy of AnyHashable((uint64_t)v95);
              if (v54) {
                goto LABEL_74;
              }
LABEL_58:
              outlined destroy of TableRowID((uint64_t)v96);
              goto LABEL_61;
            }
            outlined destroy of AnyHashable((uint64_t)v95);
          }
          else
          {
            outlined init with copy of TableRowID((uint64_t)v96, (uint64_t)v95);
            if ((v99 & 1) == 0)
            {
              if (v95[0] == v98)
              {
LABEL_74:
                outlined destroy of TableRowID((uint64_t)v96);
                outlined destroy of TableRowID((uint64_t)v100);
                outlined destroy of TableRowID((uint64_t)v101);
                ++v42;
                Swift::Int v43 = v88 + 1;
                LODWORD(v89) = v88 + 1 < a2;
                if (v42 < a4 || v43 < a2) {
                  goto LABEL_42;
                }
                goto LABEL_110;
              }
              goto LABEL_58;
            }
          }
          _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v96, (uint64_t (*)(void))type metadata accessor for (TableRowID, TableRowID));
LABEL_61:
          outlined destroy of TableRowID((uint64_t)v100);
          outlined destroy of TableRowID((uint64_t)v101);
          outlined init with copy of TableRowID(v46, (uint64_t)v96);
          uint64_t v55 = v102;
          if (v102[2] && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v96), (v57 & 1) != 0))
          {
            int v58 = 0;
            uint64_t v59 = *(void *)(v55[7] + 8 * v56);
          }
          else
          {
            uint64_t v59 = 0;
            int v58 = 1;
          }
          outlined init with copy of TableRowID(v87, (uint64_t)v101);
          unint64_t v60 = v103;
          if (v103[2] && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v101), (v62 & 1) != 0))
          {
            if (!v58)
            {
              Swift::Int v72 = *(void *)(v60[7] + 8 * v61);
              outlined destroy of TableRowID((uint64_t)v101);
              outlined destroy of TableRowID((uint64_t)v96);
              Swift::Int v73 = v59 - v88;
              if (v59 >= v88)
              {
                if (v72 < v42)
                {
                  uint64_t v45 = v85;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
                  }
                  unint64_t v70 = *((void *)v45 + 2);
                  unint64_t v69 = *((void *)v45 + 3);
                  int64_t v71 = v70 + 1;
                  Swift::Int v68 = v88;
                  if (v70 < v69 >> 1) {
                    goto LABEL_86;
                  }
                  goto LABEL_101;
                }
                uint64_t v45 = v85;
                if (v72 - v42 >= v73)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
                  }
                  Swift::Int v68 = v88;
                  goto LABEL_85;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
                }
              }
              else
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
                }
                uint64_t v45 = v85;
              }
              unint64_t v75 = *(void *)(v44 + 16);
              unint64_t v74 = *(void *)(v44 + 24);
              Swift::Int v43 = v88;
              if (v75 >= v74 >> 1)
              {
                uint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, (char *)v44);
                Swift::Int v43 = v88;
                uint64_t v44 = (uint64_t)v78;
              }
              *(void *)(v44 + 16) = v75 + 1;
              *(void *)(v44 + 8 * v75 + 32) = v42++;
LABEL_87:
              LODWORD(v89) = v43 < a2;
              if (v42 < a4 || v43 < a2) {
                goto LABEL_41;
              }
              goto LABEL_110;
            }
          }
          else if ((v58 & 1) == 0)
          {
            outlined destroy of TableRowID((uint64_t)v101);
            outlined destroy of TableRowID((uint64_t)v96);
            uint64_t v45 = v85;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45);
            }
            Swift::Int v68 = v88;
LABEL_85:
            unint64_t v70 = *((void *)v45 + 2);
            unint64_t v69 = *((void *)v45 + 3);
            int64_t v71 = v70 + 1;
            if (v70 < v69 >> 1)
            {
LABEL_86:
              *((void *)v45 + 2) = v71;
              *(void *)&v45[8 * v70 + 32] = v68;
              Swift::Int v43 = v68 + 1;
              goto LABEL_87;
            }
LABEL_101:
            unint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v71, 1, v45);
            Swift::Int v68 = v88;
            uint64_t v45 = v76;
            goto LABEL_86;
          }
          outlined destroy of TableRowID((uint64_t)v101);
          outlined destroy of TableRowID((uint64_t)v96);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v44 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
          }
          unint64_t v50 = *(void *)(v44 + 16);
          unint64_t v63 = *(void *)(v44 + 24);
          unint64_t v51 = v50 + 1;
          Swift::Int v43 = v88;
          if (v50 >= v63 >> 1)
          {
            unint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v50 + 1, 1, (char *)v44);
            Swift::Int v43 = v88;
            uint64_t v44 = (uint64_t)v64;
          }
          uint64_t v45 = v85;
LABEL_44:
          *(void *)(v44 + 16) = v51;
          *(void *)(v44 + 8 * v50 + 32) = v42++;
          v46 += 48;
          if (!((v42 < a4) | v89 & 1)) {
            goto LABEL_110;
          }
        }
      }
      uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v44 = MEMORY[0x1E4FBC860];
LABEL_110:
      if (*((void *)v45 + 2) + *(void *)(v44 + 16) <= v92)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = 0;
      }
    }
    else
    {
      v96[0] = v90;
      v96[1] = a2;
      v101[0] = v91;
      v101[1] = a4;
      type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB0C0]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>();
      lazy protocol witness table accessor for type TableRowID and conformance TableRowID();
      char v79 = (uint64_t)v86;
      BidirectionalCollection<>.difference<A>(from:)();
      Swift::Int v80 = v88;
      uint64_t v81 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI10TableRowIDO_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f54OyAL_GXEfU_AA13CountingIndexVySiG_AvA0tuC0VyAA09Shadowj8C0VyAA22I46DataSourceAdaptorVGGAXyAA08ResolvedxW3IDsVGTG5AJ0dO0VyAJ13CountingIndexVySiGAVGTf1cn_nTf4nd_nTm(v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI10TableRowIDO_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f54OyAL_GXEfU_AA13CountingIndexVySiG_AvA0tuC0VyAA09Shadowj8C0VyAA22I46DataSourceAdaptorVGGAXyAA08ResolvedxW3IDsVGTG5AJ0dO0VyAJ13CountingIndexVySiGAVGTf1cn_nTf4nd_nTm(v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, Swift::Int))(v87 + 8))(v79, v80);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v44;
  }
  if (a4 < 0) {
    goto LABEL_120;
  }
  uint64_t v85 = v12;
  uint64_t v13 = 0;
  uint64_t v14 = v103;
  uint64_t v15 = v91;
  while (a4 != v13)
  {
    outlined init with copy of TableRowID(v15, (uint64_t)v96);
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    v101[0] = v14;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v96);
    uint64_t v19 = v14[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      goto LABEL_115;
    }
    char v22 = v17;
    if (v14[3] >= v21)
    {
      if (v16)
      {
        uint64_t v14 = (void *)v101[0];
        if ((v17 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v14 = (void *)v101[0];
        if ((v22 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v16);
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v96);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_122;
      }
      unint64_t v18 = v23;
      uint64_t v14 = (void *)v101[0];
      if ((v22 & 1) == 0)
      {
LABEL_14:
        v14[(v18 >> 6) + 8] |= 1 << v18;
        outlined init with copy of TableRowID((uint64_t)v96, v14[6] + 48 * v18);
        *(void *)(v14[7] + 8 * v18) = v13;
        uint64_t v25 = v14[2];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_118;
        }
        v14[2] = v27;
        goto LABEL_5;
      }
    }
    *(void *)(v14[7] + 8 * v18) = v13;
LABEL_5:
    ++v13;
    swift_bridgeObjectRelease();
    outlined destroy of TableRowID((uint64_t)v96);
    v15 += 48;
    if (a4 == v13)
    {
      unint64_t v103 = v14;
      char v10 = (void *)MEMORY[0x1E4FBC868];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void type metadata accessor for MutableBox<UInt32>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t specialized CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, uint64_t a2)
{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, uint64_t))specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, uint64_t))specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;

  unint64_t v5 = *v2;
  uint64_t v6 = *(void *)(type metadata accessor for SystemSegmentItem() - 8);
  uint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(a2 + v7, *(void *)(a2 + 16), a1 + v7, *(void *)(a1 + 16), v5, 0x7FFFFFFFFFFFFFFFLL);
  if (!result)
  {
LABEL_95:
    __break(1u);
    return result;
  }
  char v10 = v9;
  unint64_t v70 = v2;
  uint64_t v11 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)((char *)result);
  swift_bridgeObjectRelease();
  uint64_t v12 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v77 = v12;
  if (!(v13 | v14))
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    goto LABEL_84;
  }
  uint64_t v15 = 0;
  char v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  BOOL v20 = 0;
  Swift::Int v68 = v12 + 32;
  unint64_t v69 = v11 + 32;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  Swift::Int v72 = v11;
  unint64_t v76 = v14;
LABEL_4:
  char v22 = v15;
  unint64_t v23 = v16;
  uint64_t v78 = v19;
  unint64_t v74 = &v68[16 * v20];
  unint64_t v75 = v19;
  Swift::Int v73 = v20;
  while (2)
  {
    int64_t v71 = &v69[16 * v78];
    char v24 = v22;
    while ((v19 & 0x8000000000000000) != 0 || v78 >= *((void *)v11 + 2) || *(void *)v71 != v17)
    {
      uint64_t v25 = *((void *)v77 + 2);
      if (v20 < v25 && *(void *)v74 == v18)
      {
        unint64_t v56 = *(void *)&v68[16 * v20 + 8];
        char v57 = v56 - v18;
        if (__OFSUB__(v56, v18)) {
          goto LABEL_89;
        }
        int v58 = v14 - v23;
        if (v57 < 1)
        {
          if (v58 > 0) {
            goto LABEL_72;
          }
          char v16 = v14;
          if (v57 >= v58) {
            goto LABEL_72;
          }
        }
        else if (v58 < 0 || (char v16 = v14, v58 >= (unint64_t)v57))
        {
LABEL_72:
          char v16 = v23 + v57;
          if (__OFADD__(v23, v57)) {
            goto LABEL_93;
          }
        }
        if (v16 < v23) {
          goto LABEL_90;
        }
        uint64_t v59 = v24;
        unint64_t v60 = v18;
        unint64_t v61 = v21;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v21 = v61;
        }
        else
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v61 + 16) + 1, 1, (char *)v61);
          uint64_t v21 = result;
        }
        unint64_t v63 = *(void *)(v21 + 16);
        char v62 = *(void *)(v21 + 24);
        unint64_t v64 = v63 + 1;
        if (v63 >= v62 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, (char *)v21);
          unint64_t v64 = v63 + 1;
          uint64_t v15 = v59;
          unint64_t v65 = v60;
          uint64_t v21 = result;
        }
        else
        {
          unint64_t v65 = v60;
          uint64_t v15 = v59;
        }
        *(void *)(v21 + 16) = v64;
        unint64_t v66 = v21 + 40 * v63;
        *(void *)(v66 + 32) = v23;
        *(void *)(v66 + 40) = v16;
        *(void *)(v66 + 48) = 0;
        *(void *)(v66 + 56) = 0;
        *(unsigned char *)(v66 + 64) = 1;
        ++v20;
        unint64_t v18 = v57 + v65;
        uint64_t v19 = v78;
        uint64_t v14 = v76;
        if (v17 < v13) {
          goto LABEL_4;
        }
        uint64_t v19 = v78;
        if (v18 < v76) {
          goto LABEL_4;
        }
        goto LABEL_84;
      }
      BOOL v26 = v13;
      if ((v19 & 0x8000000000000000) == 0)
      {
        BOOL v26 = v13;
        if (v78 < *((void *)v11 + 2)) {
          BOOL v26 = *(void *)v71;
        }
      }
      uint64_t v27 = v14;
      if (v20 < v25) {
        uint64_t v27 = *(void *)v74;
      }
      if (v27 - v18 >= v26 - v17) {
        uint64_t v28 = v26 - v17;
      }
      else {
        uint64_t v28 = v27 - v18;
      }
      long long v29 = v13 - v24;
      if (v28 < 1)
      {
        if (v29 <= 0 && v28 < v29)
        {
          if (v13 < v24) {
            goto LABEL_85;
          }
          uint64_t v30 = v14 - v23;
          char v31 = v13;
LABEL_34:
          if (v30 <= 0)
          {
            char v32 = v14;
            if (v28 < v30) {
              goto LABEL_37;
            }
          }
          goto LABEL_36;
        }
      }
      else if ((v29 & 0x8000000000000000) == 0 && v29 < (unint64_t)v28)
      {
        if (v13 < v24) {
          goto LABEL_85;
        }
        uint64_t v30 = v14 - v23;
        char v31 = v13;
        goto LABEL_31;
      }
      char v31 = v24 + v28;
      if (__OFADD__(v24, v28)) {
        goto LABEL_87;
      }
      if (v31 < v24)
      {
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
      uint64_t v30 = v14 - v23;
      if (v28 < 1) {
        goto LABEL_34;
      }
LABEL_31:
      if ((v30 & 0x8000000000000000) == 0)
      {
        char v32 = v14;
        if (v30 < (unint64_t)v28) {
          goto LABEL_37;
        }
      }
LABEL_36:
      char v32 = v23 + v28;
      if (__OFADD__(v23, v28)) {
        goto LABEL_88;
      }
LABEL_37:
      if (v32 < v23) {
        goto LABEL_86;
      }
      unint64_t v33 = v23;
      uint64_t v34 = v24;
      BOOL v35 = v13;
      uint64_t v36 = v17;
      char v37 = v18;
      unint64_t v38 = v21;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v21 = v38;
      }
      else
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1, (char *)v38);
        uint64_t v21 = result;
      }
      uint64_t v40 = *(void *)(v21 + 16);
      char v39 = *(void *)(v21 + 24);
      if (v40 >= v39 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, (char *)v21);
        Swift::Int v42 = v34;
        uint64_t v41 = v37;
        uint64_t v21 = result;
      }
      else
      {
        uint64_t v41 = v37;
        Swift::Int v42 = v34;
      }
      *(void *)(v21 + 16) = v40 + 1;
      Swift::Int v43 = v21 + 40 * v40;
      *(void *)(v43 + 32) = v42;
      *(void *)(v43 + 40) = v31;
      char v17 = v28 + v36;
      *(void *)(v43 + 48) = v33;
      *(void *)(v43 + 56) = v32;
      *(unsigned char *)(v43 + 64) = 2;
      unint64_t v18 = v28 + v41;
      char v24 = v31;
      unint64_t v23 = v32;
      uint64_t v13 = v35;
      uint64_t v44 = v17 < v35;
      uint64_t v11 = v72;
      BOOL v20 = v73;
      uint64_t v19 = v75;
      uint64_t v14 = v76;
      if (!v44)
      {
        char v24 = v31;
        unint64_t v23 = v32;
        if (v18 >= v76) {
          goto LABEL_84;
        }
      }
    }
    uint64_t v45 = *(void *)&v69[16 * v78 + 8];
    uint64_t v46 = v45 - v17;
    if (__OFSUB__(v45, v17)) {
      goto LABEL_91;
    }
    uint64_t v47 = v13 - v24;
    if (v46 < 1)
    {
      if (v47 > 0) {
        goto LABEL_54;
      }
      char v22 = v13;
      if (v46 >= v47) {
        goto LABEL_54;
      }
    }
    else if (v47 < 0 || (char v22 = v13, v47 >= (unint64_t)v46))
    {
LABEL_54:
      char v22 = v24 + v46;
      if (__OFADD__(v24, v46)) {
        goto LABEL_94;
      }
    }
    if (v22 < v24) {
      goto LABEL_92;
    }
    uint64_t v48 = v18;
    unint64_t v49 = v24;
    unint64_t v50 = v21;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v21 = v50;
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v50 + 16) + 1, 1, (char *)v50);
      uint64_t v21 = result;
    }
    uint64_t v52 = *(void *)(v21 + 16);
    unint64_t v51 = *(void *)(v21 + 24);
    unint64_t v53 = v52 + 1;
    if (v52 >= v51 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, (char *)v21);
      unint64_t v53 = v52 + 1;
      char v54 = v49;
      unint64_t v18 = v48;
      uint64_t v21 = result;
    }
    else
    {
      unint64_t v18 = v48;
      char v54 = v49;
    }
    uint64_t v19 = v75;
    uint64_t v14 = v76;
    *(void *)(v21 + 16) = v53;
    uint64_t v55 = v21 + 40 * v52;
    *(void *)(v55 + 32) = v54;
    *(void *)(v55 + 40) = v22;
    ++v78;
    v17 += v46;
    *(void *)(v55 + 48) = 0;
    *(void *)(v55 + 56) = 0;
    *(unsigned char *)(v55 + 64) = 0;
    if (v17 < v13 || v18 < v76) {
      continue;
    }
    break;
  }
LABEL_84:
  Swift::Int v67 = v21;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v70 = v67;
  return result;
}

{
  return specialized CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, uint64_t))specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:));
}

uint64_t ShadowRowCollection.count.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t iterateRange #1 <A, B><A1, B1><A2>(from:length:in:) in CollectionChanges.formChanges<A, B>(from:to:)@<X0>(void (*a1)(void, void, void)@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v40 = a2;
  unint64_t v38 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  BOOL v35 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v34 = (char *)&v33 - v7;
  Swift::Int v8 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v33 - v14;
  char v16 = (void (*)(char *, void (*)(void, void, void), uint64_t, double))v8[2];
  char v39 = a1;
  v16((char *)&v33 - v14, a1, AssociatedTypeWitness, v13);
  dispatch thunk of Collection.endIndex.getter();
  Collection.formIndex(_:offsetBy:limitedBy:)();
  uint64_t v36 = (void (*)(char *, uint64_t))v8[1];
  v36(v11, AssociatedTypeWitness);
  char v17 = v39;
  char v39 = (void (*)(void, void, void))v16;
  ((void (*)(char *, void, uint64_t))v16)(v11, v17, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v33 = v15;
  uint64_t v19 = AssociatedConformanceWitness;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    char v22 = v34;
    uint64_t v21 = v35;
    uint64_t v40 = v8 + 1;
    uint64_t v23 = TupleTypeMetadata2;
    char v24 = &v34[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v25 = (void (*)(char *, char *, uint64_t))v8[4];
    v25(v34, v33, AssociatedTypeWitness);
    v25(v24, v11, AssociatedTypeWitness);
    uint64_t v26 = *(int *)(v23 + 48);
    unint64_t v33 = (char *)v19;
    uint64_t v27 = &v21[v26];
    uint64_t v28 = (void (*)(char *, char *, uint64_t))v39;
    v39(v21, v22, AssociatedTypeWitness);
    v28(v27, v24, AssociatedTypeWitness);
    long long v29 = v38;
    v25(v38, v21, AssociatedTypeWitness);
    uint64_t v30 = (uint64_t (*)(char *, uint64_t))v36;
    v36(v27, AssociatedTypeWitness);
    char v31 = &v21[*(int *)(v23 + 48)];
    v25(v21, v22, AssociatedTypeWitness);
    v25(v31, v24, AssociatedTypeWitness);
    uint64_t v32 = type metadata accessor for Range();
    v25(&v29[*(int *)(v32 + 36)], v31, AssociatedTypeWitness);
    return v30(v21, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CollectionChanges.changedOffsets<A, B>(from:to:limit:)()
{
  type metadata accessor for ([Int], [Int])?();
  Collection.withContiguousStorage<A>(_:)();
  return v1;
}

void type metadata accessor for ([Int], [Int])?()
{
  if (!lazy cache variable for type metadata for ([Int], [Int])?)
  {
    type metadata accessor for ([Int], [Int])();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ([Int], [Int])?);
    }
  }
}

uint64_t partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)(a1, a2);
}

uint64_t partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)(a1, a2);
}

uint64_t closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID;
  if (!lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID;
  if (!lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  }
  return result;
}

uint64_t protocol witness for ToolbarStrategy.makeContent(entry:) in conformance UIKitToolbarStrategy(uint64_t a1)
{
  return UIKitToolbarStrategy.makeContent(entry:)(a1);
}

uint64_t UIKitToolbarStrategy.makeContent(entry:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ToolbarStorage.Entry.Kind(a1, (uint64_t)v14, type metadata accessor for ToolbarStorage.Entry.Kind);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v14, (uint64_t)v4, type metadata accessor for ToolbarStorage.GroupItem);
    if (v4[1])
    {
      uint64_t v16 = *v4;
      swift_bridgeObjectRetain();
    }
    else
    {
      UUID.init()();
      uint64_t v16 = UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    char v17 = type metadata accessor for ToolbarStorage.GroupItem;
    uint64_t v18 = (uint64_t)v4;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v14, (uint64_t)v11, type metadata accessor for ToolbarStorage.Item);
    if (*((void *)v11 + 5))
    {
      uint64_t v16 = *((void *)v11 + 4);
      swift_bridgeObjectRetain();
    }
    else
    {
      UUID.init()();
      uint64_t v16 = UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    char v17 = type metadata accessor for ToolbarStorage.Item;
    uint64_t v18 = (uint64_t)v11;
LABEL_12:
    outlined destroy of ToolbarStorage.NavigationProperties(v18, v17);
    return v16;
  }
  outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v14, type metadata accessor for ToolbarStorage.Entry.Kind);
  return 0;
}

void type metadata accessor for ([Int], [Int])()
{
  if (!lazy cache variable for type metadata for ([Int], [Int]))
  {
    _sSaySiGMaTm_0(255, &lazy cache variable for type metadata for [Int], MEMORY[0x1E4FBB320]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for ([Int], [Int]));
    }
  }
}

void type metadata accessor for [Int](uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB550]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _sSaySiGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB550]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized _UIHostingView.init(rootView:)(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0x88)) = 0;
  uint64_t v5 = (char *)v1 + *(void *)((*v4 & *v1) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  uint64_t v6 = (char *)v1 + *(void *)((*v4 & *v1) + 0x98);
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  uint64_t v10 = v1;
  *(void *)((char *)v1 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 160) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for DragAndDropBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for TooltipBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for EditMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for PencilEventsBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(void *)((char *)v10 + v30) = v31;
  uint64_t v32 = *(void *)((*v4 & *v10) + 0x168);
  type metadata accessor for ContextMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v4 & *v10) + 0x178);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1A0)) = 0;
  BOOL v35 = (char *)v10 + *(void *)((*v4 & *v10) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1D8)) = 0;
  uint64_t v141 = a1;
  uint64_t v39 = outlined init with copy of ModifiedContent<TableRowView, CollectionViewCellModifier>(a1, (uint64_t)v10 + *(void *)((*v4 & *v10) + 0x60), &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier);
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(ObjectType + 1192))(&v144, v40);
  if ((v144 & 1) == 0)
  {
    if ((v144 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v144 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v144 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v144 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v144 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v144 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v144 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v144 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  unint64_t v144 = specialized FocusViewGraph.init(graph:)(v44);
  uint64_t v145 = v45;
  uint64_t v146 = v46;
  LOWORD(v147) = v47 & 0x101;
  BYTE2(v147) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  LOWORD(v145) = 0;
  unint64_t v144 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  unint64_t v144 = 0;
  LOBYTE(v147) = 0;
  unint64_t v148 = 0;
  unint64_t v149 = v50;
  uint64_t v150 = v38;
  char v151 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for HoverEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  unint64_t v144 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
  v147 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
  v147 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for KeyEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  unint64_t v144 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
  v143.receiver = v10;
  v143.super_class = v53;
  char v54 = objc_msgSendSuper2(&v143, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v144, (uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v4 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = qword_1EB2E8DA0;
    uint64_t v60 = qword_1EB2E8DA8;
    char v61 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v62 = swift_retain();
      outlined copy of RepresentableContextValues?(v62, v58, v59, v60, v61);
      uint64_t v63 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v63 && (swift_release(), v57 == v63))
      {
        uint64_t v64 = swift_release();
        if (v61) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v64 = swift_release();
        if (v61)
        {
LABEL_25:
          MEMORY[0x1F4188790](v64);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
          unint64_t v66 = v144;
          uint64_t v65 = v145;
LABEL_32:
          uint64_t v67 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x68));
          uint64_t v68 = *(void *)(v67 + 120);
          *(void *)(v67 + 120) = v66;
          *(void *)(v67 + 128) = v65;
          outlined consume of EnvironmentValues?(v68);
          outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, v61 & 1);
      if (v61) {
        goto LABEL_25;
      }
    }
    unint64_t v144 = v59;
    uint64_t v145 = v60;
    swift_retain();
    swift_retain();
    uint64_t v65 = v60;
    unint64_t v66 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v69 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v70 = (char **)(v69 + 24);
  swift_beginAccess();
  int64_t v71 = *(char **)(v69 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v69 + 24) = v71;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v71 + 2) + 1, 1, v71);
    *unint64_t v70 = v71;
  }
  unint64_t v74 = *((void *)v71 + 2);
  unint64_t v73 = *((void *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    int64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *unint64_t v70 = v71;
  }
  *((void *)v71 + 2) = v74 + 1;
  unint64_t v75 = &v71[24 * v74];
  *((void *)v75 + 4) = &type metadata for StatusBarKey;
  *((void *)v75 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v75 + 12) = -1;
  swift_release();
  swift_release();
  uint64_t v76 = *(void *)((*v4 & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  BOOL v77 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v78 = v77;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  char v79 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v80 = v79;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v81 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v81)
  {
    uint64_t v82 = v81;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = *(void (**)(uint64_t))((*v4 & *v83) + 0x1F0);
    uint64_t v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  uint64_t v87 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0xF8));
  uint64_t v88 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  *(void *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v89 = FocusBridge.host.getter();
  if (v89)
  {
    uint64_t v91 = (void *)v89;
    uint64_t v92 = v90;
    uint64_t v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v94 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x100));
  uint64_t v95 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v95);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v97 = (void *)result;
  uint64_t v98 = swift_getObjectType();
  swift_retain();
  id v99 = v94;

  if ((*(uint64_t (**)(void))(v98 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  unsigned __int8 v100 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v101 = v100;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x148));
  uint64_t v107 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v107);
  if (!result) {
    goto LABEL_70;
  }
  id v108 = (void *)result;
  id v109 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v110 = objc_msgSend(v54, sel_traitCollection);
  id v111 = objc_msgSend(v110, sel_userInterfaceIdiom);

  if (v111 == (id)1
    || (id v112 = objc_msgSend(v54, sel_traitCollection),
        id v113 = objc_msgSend(v112, sel_userInterfaceIdiom),
        v112,
        v113 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
    id v115 = objc_msgSend(objc_allocWithZone(v114), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v116 = *(void *)((*v4 & *v54) + 0x158);
    uint64_t v117 = *(void **)((char *)v54 + v116);
    *(void *)((char *)v54 + v116) = v115;
  }
  char v118 = *(char **)((char *)v54 + v76);
  uint64_t result = MEMORY[0x18C119DF0](&v118[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  unint64_t v119 = (void *)result;
  uint64_t v120 = swift_getObjectType();
  swift_retain();
  v121 = v118;

  if ((*(uint64_t (**)(void))(v120 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v122 = *(char **)((char *)v54 + *(void *)((*v4 & *v54) + 0x178));
  *(void *)&v122[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>();
  uint64_t v123 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v123);
  swift_retain();
  uint64_t v124 = v122;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v125 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v126 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  swift_beginAccess();
  *(void *)(v125 + 24) = v126;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)((*v4 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v127 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = *(void *)((char *)v54 + v128);
  uint64_t v130 = *(void *)(v129 + 48);
  if (v130)
  {
    uint64_t v131 = v54;
    swift_retain();
    objc_msgSend(v131, sel_addGestureRecognizer_, v130);
  }
  else
  {
    BOOL v132 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v129 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v133 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v134 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v135 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v135)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v135; ++i)
    {
      uint64_t v137 = *(void *)(v134 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v137, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v138 = one-time initialization token for didUpdateListLayout;
  uint64_t v139 = v54;
  if (v138 != -1) {
    swift_once();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v139, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v140 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v140, (uint64_t)v142);
  v142[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v142, (uint64_t)v139);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(v141);
  return (uint64_t)v139;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  objc_class *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char **v74;
  char *v75;
  char isUniquelyReferenced_nonNull_native;
  void *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  void *v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t result;
  void *v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  void *v110;
  id v111;
  void *v112;
  uint64_t v113;
  void *v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  Class v120;
  id v121;
  uint64_t v122;
  void *v123;
  char *v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t i;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  unsigned char v148[16];
  objc_super v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  ValueMetadata *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char v157;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<AnyView, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<AnyView, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  uint64_t v18 = MEMORY[0x1E4F41618];
  Class v19 = MEMORY[0x1E4F41610];
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for DragAndDropBridge<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v21 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for TooltipBridge<AnyView>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  Class v23 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for EditMenuBridge<AnyView>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<AnyView>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(void *)(v26 + 24) = v15;
  *(void *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v25) = v26;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  Class v27 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<AnyView>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  Class v29 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for PencilEventsBridge<AnyView>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  uint64_t v31 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<AnyView>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(void *)((char *)v9 + v31) = v32;
  Class v33 = v3;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for ContextMenuBridge<AnyView>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone(v35), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v36 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v36) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  unint64_t v37 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)unint64_t v37 = 0;
  v37[8] = 0;
  *((_DWORD *)v37 + 3) = 0;
  uint64_t v38 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  uint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *uint64_t v38 = 0;
  v38[1] = v39;
  uint64_t v40 = MEMORY[0x1E4FBC868];
  v38[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x60)) = a1;
  uint64_t v41 = swift_retain();
  uint64_t v42 = MEMORY[0x18C113CA0](v41);
  uint64_t v43 = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(ObjectType + 1192))(&v150, v42);
  if ((v150 & 1) == 0)
  {
    if ((v150 & 2) != 0)
    {
      uint64_t v44 = 2;
      if ((v150 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v44 = 0;
      if ((v150 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v150 & 2) == 0)
  {
    uint64_t v44 = 1;
    if ((v150 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v44 = 3;
  if ((v150 & 4) != 0) {
LABEL_7:
  }
    v44 |= 4uLL;
LABEL_8:
  if ((v150 & 0x10) != 0) {
    v44 |= 8uLL;
  }
  if ((v150 & 0x20) != 0) {
    v44 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v43)) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = v44 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v33 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v45, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v46 = swift_retain_n();
  uint64_t v150 = specialized FocusViewGraph.init(graph:)(v46);
  char v151 = v47;
  uint64_t v152 = v48;
  LOWORD(v153) = v49 & 0x101;
  BYTE2(v153) = v50 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  LOWORD(v151) = 0;
  uint64_t v150 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<AnyView>.EnableVFDFeature, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<AnyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v51 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  char v151 = 0;
  uint64_t v152 = 0;
  uint64_t v150 = 0;
  LOBYTE(v153) = 0;
  uint64_t v154 = 0;
  v155 = v52;
  v156 = v40;
  v157 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v52);
  unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(v51);
  uint64_t v153 = &type metadata for HoverEventDispatcher;
  uint64_t v154 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  uint64_t v150 = v53;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
  uint64_t v153 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v154 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
  uint64_t v153 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v154 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
  char v54 = specialized Dictionary.init(dictionaryLiteral:)(v51);
  uint64_t v153 = &type metadata for KeyEventDispatcher;
  uint64_t v154 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  uint64_t v150 = v54;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v33 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  uint64_t v55 = MEMORY[0x1E4F41618];
  unint64_t v56 = MEMORY[0x1E4F41610];
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v149.receiver = v9;
  v149.super_class = v57;
  uint64_t v58 = objc_msgSendSuper2(&v149, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<AnyView>.HostViewGraph, v55, v56, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<AnyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v59 = outlined destroy of _UIHostingView<AnyView>.HostViewGraph((uint64_t)&v150);
  (*(void (**)(uint64_t))((*v33 & *v58) + 0x500))(v59);
  uint64_t v60 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v60 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  char v61 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v62 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v63 = qword_1EB2E8DA0;
    uint64_t v64 = qword_1EB2E8DA8;
    uint64_t v65 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      unint64_t v66 = swift_retain();
      outlined copy of RepresentableContextValues?(v66, v62, v63, v64, v65);
      uint64_t v67 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v67 && (swift_release(), v61 == v67))
      {
        uint64_t v68 = swift_release();
        if (v65) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v68 = swift_release();
        if (v65)
        {
LABEL_25:
          MEMORY[0x1F4188790](v68);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v63, v64, 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v61, v62, v63, v64, v65);
          unint64_t v70 = v150;
          uint64_t v69 = v151;
LABEL_32:
          int64_t v71 = *(void *)((char *)v58 + *(void *)((*v33 & *v58) + 0x68));
          Swift::Int v72 = *(void *)(v71 + 120);
          *(void *)(v71 + 120) = v70;
          *(void *)(v71 + 128) = v69;
          outlined consume of EnvironmentValues?(v72);
          outlined consume of RepresentableContextValues?(v61, v62, v63, v64, v65);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v68 = outlined copy of RepresentableContextValues.EnvironmentStorage(v63, v64, v65 & 1);
      if (v65) {
        goto LABEL_25;
      }
    }
    uint64_t v150 = v63;
    char v151 = v64;
    swift_retain();
    swift_retain();
    uint64_t v69 = v64;
    unint64_t v70 = v63;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  unint64_t v73 = *(void *)((char *)v58 + *(void *)((*v33 & *v58) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v74 = (char **)(v73 + 24);
  swift_beginAccess();
  unint64_t v75 = *(char **)(v73 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v73 + 24) = v75;
  BOOL v77 = v33;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v75 + 2) + 1, 1, v75);
    *unint64_t v74 = v75;
  }
  char v79 = *((void *)v75 + 2);
  id v78 = *((void *)v75 + 3);
  if (v79 >= v78 >> 1)
  {
    unint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v79 + 1, 1, v75);
    *unint64_t v74 = v75;
  }
  *((void *)v75 + 2) = v79 + 1;
  id v80 = &v75[24 * v79];
  *((void *)v80 + 4) = &type metadata for StatusBarKey;
  *((void *)v80 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v80 + 12) = -1;
  swift_release();
  swift_release();
  uint64_t v81 = *(void *)((*v77 & *v58) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v82 = *(void **)((char *)v58 + *(void *)((*v77 & *v58) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v83 = v82;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v84 = *(void **)((char *)v58 + *(void *)((*v77 & *v58) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v85 = v84;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    uint64_t v87 = v86;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v88 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v88)
  {
    uint64_t v89 = v88;
    uint64_t v90 = *(void (**)(uint64_t))((*v77 & *v88) + 0x1F0);
    uint64_t v91 = swift_retain();
    v90(v91);

    swift_release();
  }
  uint64_t v92 = *(void *)((char *)v58 + *(void *)((*v77 & *v58) + 0xF8));
  uint64_t v93 = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  *(void *)(v92 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v92 + 40) = v93;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v94 = FocusBridge.host.getter();
  if (v94)
  {
    v96 = (void *)v94;
    uint64_t v97 = v95;
    uint64_t v98 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v97 + 8) + 16))(v98);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  id v99 = *(void **)((char *)v58 + *(void *)((*v77 & *v58) + 0x100));
  unsigned __int8 v100 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v100);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v102 = (void *)result;
  id v103 = swift_getObjectType();
  swift_retain();
  uint64_t v104 = v99;

  if ((*(uint64_t (**)(uint64_t))(v103 + 1208))(v105))
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v106 = *(void **)((char *)v58 + *(void *)((*v77 & *v58) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v107 = v106;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v108 = *(void **)((char *)v58 + *(void *)((*v77 & *v58) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v109 = v108;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v110 = *(void **)((char *)v58 + *(void *)((*v77 & *v58) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v111 = v110;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v112 = *(void **)((char *)v58 + *(void *)((*v77 & *v58) + 0x148));
  id v113 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v113);
  if (!result) {
    goto LABEL_70;
  }
  Class v114 = (void *)result;
  id v115 = v112;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t v116 = objc_msgSend(v58, sel_traitCollection, 0);
  uint64_t v117 = objc_msgSend(v116, sel_userInterfaceIdiom);

  if (v117 == (id)1
    || (char v118 = objc_msgSend(v58, sel_traitCollection),
        unint64_t v119 = objc_msgSend(v118, sel_userInterfaceIdiom),
        v118,
        v119 == (id)6))
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for PointerBridge<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v121 = objc_msgSend(objc_allocWithZone(v120), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v122 = *(void *)((*v77 & *v58) + 0x158);
    uint64_t v123 = *(void **)((char *)v58 + v122);
    *(void *)((char *)v58 + v122) = v121;
  }
  uint64_t v124 = *(char **)((char *)v58 + v81);
  uint64_t result = MEMORY[0x18C119DF0](&v124[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v125 = (void *)result;
  uint64_t v126 = swift_getObjectType();
  swift_retain();
  uint64_t v127 = v124;

  if ((*(uint64_t (**)(void))(v126 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v128 = *(char **)((char *)v58 + *(void *)((*v77 & *v58) + 0x178));
  *(void *)&v128[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  uint64_t v129 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v129);
  swift_retain();
  uint64_t v130 = v128;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v131 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  BOOL v132 = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v131 + 24) = v132;
  swift_unknownObjectWeakAssign();
  swift_release();
  id v133 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v134 = *(void *)((*v77 & *v58) + 0xD0);
  swift_beginAccess();
  *(void *)(v133 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v135 = *(void *)((char *)v58 + v134);
  char v136 = *(void *)(v135 + 48);
  if (v136)
  {
    uint64_t v137 = v58;
    swift_retain();
    objc_msgSend(v137, sel_addGestureRecognizer_, v136);
  }
  else
  {
    uint64_t v138 = v58;
    swift_retain();
  }
  objc_msgSend(v58, sel_addGestureRecognizer_, *(void *)(v135 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  uint64_t v139 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v140 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v141 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v141)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v141; ++i)
    {
      objc_super v143 = *(void *)(v140 + 8 * i + 32);
      objc_msgSend(v139, sel_addObserver_selector_name_object_, v58, sel_accessibilityBooleanDidChange_, v143, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v139, sel_addObserver_selector_name_object_, v58, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  unint64_t v144 = one-time initialization token for didUpdateListLayout;
  uint64_t v145 = v58;
  if (v144 != -1) {
    swift_once();
  }
  objc_msgSend(v139, sel_addObserver_selector_name_object_, v145, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v146 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v146, (uint64_t)v148);
  v148[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v148, (uint64_t)v145);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v145;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  Class v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t result;
  void *v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  Class v113;
  id v114;
  uint64_t v115;
  void *v116;
  char *v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned char v141[16];
  objc_super v142;
  long long v143;
  uint64_t v144;
  ValueMetadata *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;

  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0x88)) = 0;
  uint64_t v5 = (char *)v1 + *(void *)((*v4 & *v1) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  uint64_t v6 = (char *)v1 + *(void *)((*v4 & *v1) + 0x98);
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  uint64_t v10 = v1;
  *(void *)((char *)v1 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 160) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, RootModifier>>();
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for TooltipBridge<ModifiedContent<AnyView, RootModifier>>();
  *(void *)((char *)v10 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, RootModifier>>();
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, RootModifier>>();
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, RootModifier>>();
  *(void *)((char *)v10 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, RootModifier>>();
  *(void *)((char *)v10 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, RootModifier>>();
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(void *)((char *)v10 + v30) = v31;
  uint64_t v32 = *(void *)((*v4 & *v10) + 0x168);
  type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, RootModifier>>();
  *(void *)((char *)v10 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v4 & *v10) + 0x178);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1A0)) = 0;
  BOOL v35 = (char *)v10 + *(void *)((*v4 & *v10) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1D8)) = 0;
  uint64_t v140 = a1;
  uint64_t v39 = outlined init with copy of ModifiedContent<TableRowView, CollectionViewCellModifier>(a1, (uint64_t)v10 + *(void *)((*v4 & *v10) + 0x60), (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier);
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v143, v40);
  if ((v143 & 1) == 0)
  {
    if ((v143 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v143 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v143 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v143 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v143 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v143 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&objc_super v143 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v143 + 1) = v45;
  unint64_t v144 = v46;
  LOWORD(v145) = v47 & 0x101;
  BYTE2(v145) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v143) = 0;
  *(void *)&objc_super v143 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v144 = 0;
  objc_super v143 = 0uLL;
  LOBYTE(v145) = 0;
  uint64_t v146 = 0;
  v147 = v50;
  unint64_t v148 = v38;
  unint64_t v149 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for HoverEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&objc_super v143 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for KeyEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&objc_super v143 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>();
  v142.receiver = v10;
  v142.super_class = v53;
  char v54 = objc_msgSendSuper2(&v142, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v4 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v143 + 1);
          uint64_t v65 = v143;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    objc_super v143 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = *(void *)((*v4 & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v76 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  BOOL v77 = v76;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v78 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v80)
  {
    uint64_t v81 = v80;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = *(void (**)(uint64_t))((*v4 & *v82) + 0x1F0);
    uint64_t v85 = swift_retain();
    v84(v85);

    swift_release();
  }
  uint64_t v86 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0xF8));
  uint64_t v87 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>);
  *(void *)(v86 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v86 + 40) = v87;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v88 = FocusBridge.host.getter();
  if (v88)
  {
    uint64_t v90 = (void *)v88;
    uint64_t v91 = v89;
    uint64_t v92 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v91 + 8) + 16))(v92);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v93 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x100));
  uint64_t v94 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v94);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  v96 = (void *)result;
  uint64_t v97 = swift_getObjectType();
  swift_retain();
  uint64_t v98 = v93;

  if ((*(uint64_t (**)(void))(v97 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v99 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  unsigned __int8 v100 = v99;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v101 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v102 = v101;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v103 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v104 = v103;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x148));
  id v106 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v106);
  if (!result) {
    goto LABEL_70;
  }
  uint64_t v107 = (void *)result;
  id v108 = v105;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v109 = objc_msgSend(v54, sel_traitCollection);
  id v110 = objc_msgSend(v109, sel_userInterfaceIdiom);

  if (v110 == (id)1
    || (id v111 = objc_msgSend(v54, sel_traitCollection),
        id v112 = objc_msgSend(v111, sel_userInterfaceIdiom),
        v111,
        v112 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<AnyView, RootModifier>>();
    Class v114 = objc_msgSend(objc_allocWithZone(v113), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    id v115 = *(void *)((*v4 & *v54) + 0x158);
    uint64_t v116 = *(void **)((char *)v54 + v115);
    *(void *)((char *)v54 + v115) = v114;
  }
  uint64_t v117 = *(char **)((char *)v54 + v75);
  uint64_t result = MEMORY[0x18C119DF0](&v117[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  char v118 = (void *)result;
  unint64_t v119 = swift_getObjectType();
  swift_retain();
  uint64_t v120 = v117;

  if ((*(uint64_t (**)(void))(v119 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  v121 = *(char **)((char *)v54 + *(void *)((*v4 & *v54) + 0x178));
  *(void *)&v121[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>();
  uint64_t v122 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v122);
  swift_retain();
  uint64_t v123 = v121;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v124 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v125 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>);
  swift_beginAccess();
  *(void *)(v124 + 24) = v125;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v126 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v127 = *(void *)((*v4 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v126 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v128 = *(void *)((char *)v54 + v127);
  uint64_t v129 = *(void *)(v128 + 48);
  if (v129)
  {
    uint64_t v130 = v54;
    swift_retain();
    objc_msgSend(v130, sel_addGestureRecognizer_, v129);
  }
  else
  {
    uint64_t v131 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v128 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  BOOL v132 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  id v133 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v134 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v134)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v134; ++i)
    {
      char v136 = *(void *)(v133 + 8 * i + 32);
      objc_msgSend(v132, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v136, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v137 = one-time initialization token for didUpdateListLayout;
  uint64_t v138 = v54;
  if (v137 != -1) {
    swift_once();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v138, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v139 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v139, (uint64_t)v141);
  v141[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v141, (uint64_t)v138);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<AnyView, RootModifier>(v140);
  return (uint64_t)v138;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t result;
  void *v98;
  uint64_t v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  uint64_t v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  Class v115;
  id v116;
  uint64_t v117;
  void *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t i;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v143;
  unsigned char v144[16];
  objc_super v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  ValueMetadata *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<BarItemView, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<BarItemView, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for DragAndDropBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for TooltipBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for EditMenuBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PencilEventsBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v32 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for ContextMenuBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  BOOL v35 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(v31);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v39 = outlined init with copy of BarItemView(a1, (uint64_t)v9 + *(void *)((*v3 & *v9) + 0x60));
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(ObjectType + 1192))(&v146, v40);
  if ((v146 & 1) == 0)
  {
    if ((v146 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v146 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v146 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v146 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v146 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v146 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v146 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v146 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  uint64_t v146 = specialized FocusViewGraph.init(graph:)(v44);
  v147 = v45;
  unint64_t v148 = v46;
  LOWORD(v149) = v47 & 0x101;
  BYTE2(v149) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  LOWORD(v147) = 0;
  uint64_t v146 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<BarItemView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v147 = 0;
  unint64_t v148 = 0;
  uint64_t v146 = 0;
  LOBYTE(v149) = 0;
  uint64_t v150 = 0;
  char v151 = v50;
  uint64_t v152 = v38;
  uint64_t v153 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  unint64_t v149 = &type metadata for HoverEventDispatcher;
  uint64_t v150 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  uint64_t v146 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  unint64_t v149 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v150 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  unint64_t v149 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v150 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  unint64_t v149 = &type metadata for KeyEventDispatcher;
  uint64_t v150 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  uint64_t v146 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v145.receiver = v9;
  v145.super_class = v53;
  char v54 = objc_msgSendSuper2(&v145, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<BarItemView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<BarItemView>.HostViewGraph((uint64_t)&v146);
  (*(void (**)(uint64_t))((*v3 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = qword_1EB2E8DA0;
    uint64_t v60 = qword_1EB2E8DA8;
    char v61 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v62 = swift_retain();
      outlined copy of RepresentableContextValues?(v62, v58, v59, v60, v61);
      uint64_t v63 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v63 && (swift_release(), v57 == v63))
      {
        uint64_t v64 = swift_release();
        if (v61) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v64 = swift_release();
        if (v61)
        {
LABEL_25:
          MEMORY[0x1F4188790](v64);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
          unint64_t v66 = v146;
          uint64_t v65 = v147;
LABEL_32:
          uint64_t v67 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x68));
          uint64_t v68 = *(void *)(v67 + 120);
          *(void *)(v67 + 120) = v66;
          *(void *)(v67 + 128) = v65;
          outlined consume of EnvironmentValues?(v68);
          outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, v61 & 1);
      if (v61) {
        goto LABEL_25;
      }
    }
    uint64_t v146 = v59;
    v147 = v60;
    swift_retain();
    swift_retain();
    uint64_t v65 = v60;
    unint64_t v66 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v69 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v70 = (char **)(v69 + 24);
  swift_beginAccess();
  int64_t v71 = *(char **)(v69 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v69 + 24) = v71;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v71 + 2) + 1, 1, v71);
    *unint64_t v70 = v71;
  }
  unint64_t v74 = *((void *)v71 + 2);
  unint64_t v73 = *((void *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    int64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *unint64_t v70 = v71;
  }
  *((void *)v71 + 2) = v74 + 1;
  unint64_t v75 = &v71[24 * v74];
  *((void *)v75 + 4) = &type metadata for StatusBarKey;
  *((void *)v75 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v75 + 12) = -1;
  swift_release();
  swift_release();
  uint64_t v76 = (void *)MEMORY[0x1E4FBC8C8];
  BOOL v77 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  id v78 = *(void **)((char *)v54 + *(void *)((*v76 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = *(void **)((char *)v54 + *(void *)((*v76 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v81 = v80;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    uint64_t v83 = v82;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    uint64_t v85 = v84;
    uint64_t v86 = *(void (**)(uint64_t))((*v76 & *v84) + 0x1F0);
    uint64_t v87 = swift_retain();
    v86(v87);

    swift_release();
  }
  uint64_t v88 = *(void *)((char *)v54 + *(void *)((*v76 & *v54) + 0xF8));
  uint64_t v89 = lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
  *(void *)(v88 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v88 + 40) = v89;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v90 = FocusBridge.host.getter();
  if (v90)
  {
    uint64_t v92 = (void *)v90;
    uint64_t v93 = v91;
    uint64_t v94 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v93 + 8) + 16))(v94);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v95 = *(void **)((char *)v54 + *(void *)((*v76 & *v54) + 0x100));
  v96 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v96);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v98 = (void *)result;
  id v99 = swift_getObjectType();
  swift_retain();
  unsigned __int8 v100 = v95;

  if ((*(uint64_t (**)(void))(v99 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v101 = *(void **)((char *)v54 + *(void *)((*v76 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v102 = v101;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v103 = *(void **)((char *)v54 + *(void *)((*v76 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v104 = v103;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v54 + *(void *)((*v76 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v106 = v105;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v107 = *(void **)((char *)v54 + *(void *)((*v76 & *v54) + 0x148));
  id v108 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v108);
  if (!result) {
    goto LABEL_70;
  }
  id v109 = (void *)result;
  id v110 = v107;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v111 = objc_msgSend(v54, sel_traitCollection);
  id v112 = objc_msgSend(v111, sel_userInterfaceIdiom);

  if (v112 == (id)1
    || (id v113 = objc_msgSend(v54, sel_traitCollection),
        Class v114 = objc_msgSend(v113, sel_userInterfaceIdiom),
        v113,
        v114 == (id)6))
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PointerBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    uint64_t v116 = objc_msgSend(objc_allocWithZone(v115), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v117 = *(void *)((*v76 & *v54) + 0x158);
    char v118 = *(void **)((char *)v54 + v117);
    *(void *)((char *)v54 + v117) = v116;
  }
  unint64_t v119 = *(char **)((char *)v54 + v77);
  uint64_t result = MEMORY[0x18C119DF0](&v119[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v120 = (void *)result;
  v121 = swift_getObjectType();
  swift_retain();
  uint64_t v122 = v119;

  if ((*(uint64_t (**)(void))(v121 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v123 = *(char **)((char *)v54 + *(void *)((*v76 & *v54) + 0x178));
  *(void *)&v123[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
  uint64_t v124 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v124);
  swift_retain();
  uint64_t v125 = v123;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v126 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v127 = lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v126 + 24) = v127;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v128 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v129 = *(void *)((*v76 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v128 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v130 = *(void *)((char *)v54 + v129);
  uint64_t v131 = *(void *)(v130 + 48);
  if (v131)
  {
    BOOL v132 = v54;
    swift_retain();
    objc_msgSend(v132, sel_addGestureRecognizer_, v131);
  }
  else
  {
    id v133 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v130 + 56), a1);
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  uint64_t v134 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v135 = static AccessibilityCore.UserSettings.didChangeNotifications;
  char v136 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v136)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v136; ++i)
    {
      uint64_t v138 = *(void *)(v135 + 8 * i + 32);
      objc_msgSend(v134, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v138, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v139 = one-time initialization token for didUpdateListLayout;
  uint64_t v140 = v54;
  if (v139 != -1) {
    swift_once();
  }
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v140, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v141 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v141, (uint64_t)v144);
  v144[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v144, (uint64_t)v140);
  swift_endAccess();

  static Update.end()();
  outlined destroy of BarItemView(v143);
  return (uint64_t)v140;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  Class v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t result;
  void *v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  Class v113;
  id v114;
  uint64_t v115;
  void *v116;
  char *v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned char v141[16];
  objc_super v142;
  long long v143;
  uint64_t v144;
  ValueMetadata *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;

  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0x88)) = 0;
  uint64_t v5 = (char *)v1 + *(void *)((*v4 & *v1) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  uint64_t v6 = (char *)v1 + *(void *)((*v4 & *v1) + 0x98);
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  uint64_t v10 = v1;
  *(void *)((char *)v1 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 160) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for DragAndDropBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for TooltipBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for EditMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for PencilEventsBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(void *)((char *)v10 + v30) = v31;
  uint64_t v32 = *(void *)((*v4 & *v10) + 0x168);
  type metadata accessor for ContextMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  *(void *)((char *)v10 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v4 & *v10) + 0x178);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1A0)) = 0;
  BOOL v35 = (char *)v10 + *(void *)((*v4 & *v10) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1D8)) = 0;
  uint64_t v140 = a1;
  uint64_t v39 = outlined init with copy of ModifiedContent<TableRowView, CollectionViewCellModifier>(a1, (uint64_t)v10 + *(void *)((*v4 & *v10) + 0x60), (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier);
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v143, v40);
  if ((v143 & 1) == 0)
  {
    if ((v143 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v143 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v143 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v143 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v143 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v143 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&objc_super v143 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v143 + 1) = v45;
  unint64_t v144 = v46;
  LOWORD(v145) = v47 & 0x101;
  BYTE2(v145) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v143) = 0;
  *(void *)&objc_super v143 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v144 = 0;
  objc_super v143 = 0uLL;
  LOBYTE(v145) = 0;
  uint64_t v146 = 0;
  v147 = v50;
  unint64_t v148 = v38;
  unint64_t v149 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for HoverEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&objc_super v143 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for KeyEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&objc_super v143 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  v142.receiver = v10;
  v142.super_class = v53;
  char v54 = objc_msgSendSuper2(&v142, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v4 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v143 + 1);
          uint64_t v65 = v143;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    objc_super v143 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = *(void *)((*v4 & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v76 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  BOOL v77 = v76;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v78 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v80)
  {
    uint64_t v81 = v80;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = *(void (**)(uint64_t))((*v4 & *v82) + 0x1F0);
    uint64_t v85 = swift_retain();
    v84(v85);

    swift_release();
  }
  uint64_t v86 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0xF8));
  uint64_t v87 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  *(void *)(v86 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v86 + 40) = v87;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v88 = FocusBridge.host.getter();
  if (v88)
  {
    uint64_t v90 = (void *)v88;
    uint64_t v91 = v89;
    uint64_t v92 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v91 + 8) + 16))(v92);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v93 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x100));
  uint64_t v94 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v94);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  v96 = (void *)result;
  uint64_t v97 = swift_getObjectType();
  swift_retain();
  uint64_t v98 = v93;

  if ((*(uint64_t (**)(void))(v97 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v99 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  unsigned __int8 v100 = v99;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v101 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v102 = v101;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v103 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v104 = v103;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x148));
  id v106 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v106);
  if (!result) {
    goto LABEL_70;
  }
  uint64_t v107 = (void *)result;
  id v108 = v105;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v109 = objc_msgSend(v54, sel_traitCollection);
  id v110 = objc_msgSend(v109, sel_userInterfaceIdiom);

  if (v110 == (id)1
    || (id v111 = objc_msgSend(v54, sel_traitCollection),
        id v112 = objc_msgSend(v111, sel_userInterfaceIdiom),
        v111,
        v112 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
    Class v114 = objc_msgSend(objc_allocWithZone(v113), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    id v115 = *(void *)((*v4 & *v54) + 0x158);
    uint64_t v116 = *(void **)((char *)v54 + v115);
    *(void *)((char *)v54 + v115) = v114;
  }
  uint64_t v117 = *(char **)((char *)v54 + v75);
  uint64_t result = MEMORY[0x18C119DF0](&v117[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  char v118 = (void *)result;
  unint64_t v119 = swift_getObjectType();
  swift_retain();
  uint64_t v120 = v117;

  if ((*(uint64_t (**)(void))(v119 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  v121 = *(char **)((char *)v54 + *(void *)((*v4 & *v54) + 0x178));
  *(void *)&v121[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>();
  uint64_t v122 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v122);
  swift_retain();
  uint64_t v123 = v121;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v124 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v125 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  swift_beginAccess();
  *(void *)(v124 + 24) = v125;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v126 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v127 = *(void *)((*v4 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v126 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v128 = *(void *)((char *)v54 + v127);
  uint64_t v129 = *(void *)(v128 + 48);
  if (v129)
  {
    uint64_t v130 = v54;
    swift_retain();
    objc_msgSend(v130, sel_addGestureRecognizer_, v129);
  }
  else
  {
    uint64_t v131 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v128 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  BOOL v132 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  id v133 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v134 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v134)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v134; ++i)
    {
      char v136 = *(void *)(v133 + 8 * i + 32);
      objc_msgSend(v132, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v136, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v137 = one-time initialization token for didUpdateListLayout;
  uint64_t v138 = v54;
  if (v137 != -1) {
    swift_once();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v138, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v139 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v139, (uint64_t)v141);
  v141[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v141, (uint64_t)v138);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>(v140);
  return (uint64_t)v138;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  Class v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t result;
  void *v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  Class v113;
  id v114;
  uint64_t v115;
  void *v116;
  char *v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned char v141[16];
  objc_super v142;
  long long v143;
  uint64_t v144;
  ValueMetadata *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;

  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0x88)) = 0;
  uint64_t v5 = (char *)v1 + *(void *)((*v4 & *v1) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  uint64_t v6 = (char *)v1 + *(void *)((*v4 & *v1) + 0x98);
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  uint64_t v10 = v1;
  *(void *)((char *)v1 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 160) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  *(void *)((char *)v10 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  *(void *)((char *)v10 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  *(void *)((char *)v10 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(void *)((char *)v10 + v30) = v31;
  uint64_t v32 = *(void *)((*v4 & *v10) + 0x168);
  type metadata accessor for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  *(void *)((char *)v10 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v4 & *v10) + 0x178);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1A0)) = 0;
  BOOL v35 = (char *)v10 + *(void *)((*v4 & *v10) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1D8)) = 0;
  uint64_t v140 = a1;
  uint64_t v39 = outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a1, (uint64_t)v10 + *(void *)((*v4 & *v10) + 0x60), &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v143, v40);
  if ((v143 & 1) == 0)
  {
    if ((v143 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v143 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v143 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v143 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v143 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v143 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&objc_super v143 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v143 + 1) = v45;
  unint64_t v144 = v46;
  LOWORD(v145) = v47 & 0x101;
  BYTE2(v145) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v143) = 0;
  *(void *)&objc_super v143 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v144 = 0;
  objc_super v143 = 0uLL;
  LOBYTE(v145) = 0;
  uint64_t v146 = 0;
  v147 = v50;
  unint64_t v148 = v38;
  unint64_t v149 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for HoverEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&objc_super v143 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for KeyEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&objc_super v143 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
  v142.receiver = v10;
  v142.super_class = v53;
  char v54 = objc_msgSendSuper2(&v142, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v4 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v143 + 1);
          uint64_t v65 = v143;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    objc_super v143 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = *(void *)((*v4 & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v76 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  BOOL v77 = v76;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v78 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v80)
  {
    uint64_t v81 = v80;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = *(void (**)(uint64_t))((*v4 & *v82) + 0x1F0);
    uint64_t v85 = swift_retain();
    v84(v85);

    swift_release();
  }
  uint64_t v86 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0xF8));
  uint64_t v87 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  *(void *)(v86 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v86 + 40) = v87;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v88 = FocusBridge.host.getter();
  if (v88)
  {
    uint64_t v90 = (void *)v88;
    uint64_t v91 = v89;
    uint64_t v92 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v91 + 8) + 16))(v92);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v93 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x100));
  uint64_t v94 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v94);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  v96 = (void *)result;
  uint64_t v97 = swift_getObjectType();
  swift_retain();
  uint64_t v98 = v93;

  if ((*(uint64_t (**)(void))(v97 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v99 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  unsigned __int8 v100 = v99;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v101 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v102 = v101;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v103 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v104 = v103;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x148));
  id v106 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v106);
  if (!result) {
    goto LABEL_70;
  }
  uint64_t v107 = (void *)result;
  id v108 = v105;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v109 = objc_msgSend(v54, sel_traitCollection);
  id v110 = objc_msgSend(v109, sel_userInterfaceIdiom);

  if (v110 == (id)1
    || (id v111 = objc_msgSend(v54, sel_traitCollection),
        id v112 = objc_msgSend(v111, sel_userInterfaceIdiom),
        v111,
        v112 == (id)6))
  {
    type metadata accessor for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>();
    Class v114 = objc_msgSend(objc_allocWithZone(v113), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    id v115 = *(void *)((*v4 & *v54) + 0x158);
    uint64_t v116 = *(void **)((char *)v54 + v115);
    *(void *)((char *)v54 + v115) = v114;
  }
  uint64_t v117 = *(char **)((char *)v54 + v75);
  uint64_t result = MEMORY[0x18C119DF0](&v117[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  char v118 = (void *)result;
  unint64_t v119 = swift_getObjectType();
  swift_retain();
  uint64_t v120 = v117;

  if ((*(uint64_t (**)(void))(v119 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  v121 = *(char **)((char *)v54 + *(void *)((*v4 & *v54) + 0x178));
  *(void *)&v121[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>();
  uint64_t v122 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v122);
  swift_retain();
  uint64_t v123 = v121;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v124 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v125 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  swift_beginAccess();
  *(void *)(v124 + 24) = v125;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v126 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v127 = *(void *)((*v4 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v126 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v128 = *(void *)((char *)v54 + v127);
  uint64_t v129 = *(void *)(v128 + 48);
  if (v129)
  {
    uint64_t v130 = v54;
    swift_retain();
    objc_msgSend(v130, sel_addGestureRecognizer_, v129);
  }
  else
  {
    uint64_t v131 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v128 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  BOOL v132 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  id v133 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v134 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v134)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v134; ++i)
    {
      char v136 = *(void *)(v133 + 8 * i + 32);
      objc_msgSend(v132, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v136, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v137 = one-time initialization token for didUpdateListLayout;
  uint64_t v138 = v54;
  if (v137 != -1) {
    swift_once();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v138, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v139 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v139, (uint64_t)v141);
  v141[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v141, (uint64_t)v138);
  swift_endAccess();

  static Update.end()();
  outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(v140, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  return (uint64_t)v138;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t result;
  void *v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Class v114;
  id v115;
  uint64_t v116;
  void *v117;
  char *v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v142;
  unsigned char v143[16];
  objc_super v144;
  long long v145;
  uint64_t v146;
  ValueMetadata *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>, (uint64_t)&type metadata for Alert.Presentation, (uint64_t)&protocol witness table for Alert.Presentation, (uint64_t (*)(uint64_t, void *))type metadata accessor for DeprecatedAlertBridge);
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, ActionSheet.Presentation>, (uint64_t)&type metadata for ActionSheet.Presentation, (uint64_t)&protocol witness table for ActionSheet.Presentation, (uint64_t (*)(uint64_t, void *))type metadata accessor for DeprecatedAlertBridge);
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for DragAndDropBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for TooltipBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for EditMenuBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for PencilEventsBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v32 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for ContextMenuBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  BOOL v35 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(v31);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v39 = outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a1, (uint64_t)v9 + *(void *)((*v3 & *v9) + 0x60), (uint64_t (*)(void))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v145, v40);
  if ((v145 & 1) == 0)
  {
    if ((v145 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v145 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v145 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v145 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v145 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v145 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, type metadata accessor for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&uint64_t v145 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v145 + 1) = v45;
  uint64_t v146 = v46;
  LOWORD(v147) = v47 & 0x101;
  BYTE2(v147) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v145) = 0;
  *(void *)&uint64_t v145 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v146 = 0;
  uint64_t v145 = 0uLL;
  LOBYTE(v147) = 0;
  unint64_t v148 = 0;
  unint64_t v149 = v50;
  uint64_t v150 = v38;
  char v151 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for HoverEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&uint64_t v145 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for KeyEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&uint64_t v145 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v144.receiver = v9;
  v144.super_class = v53;
  char v54 = objc_msgSendSuper2(&v144, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph((uint64_t)&v145, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>);
  (*(void (**)(uint64_t))((*v3 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v145 + 1);
          uint64_t v65 = v145;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    uint64_t v145 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v76 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  BOOL v77 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v78 = v77;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  char v79 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v80 = v79;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v81 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v81)
  {
    uint64_t v82 = v81;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = *(void (**)(uint64_t))((*v75 & *v83) + 0x1F0);
    uint64_t v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  uint64_t v87 = *(void *)((char *)v54 + *(void *)((*v75 & *v54) + 0xF8));
  uint64_t v88 = lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>();
  *(void *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v89 = FocusBridge.host.getter();
  if (v89)
  {
    uint64_t v91 = (void *)v89;
    uint64_t v92 = v90;
    uint64_t v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v94 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x100));
  uint64_t v95 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v95);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v97 = (void *)result;
  uint64_t v98 = swift_getObjectType();
  swift_retain();
  id v99 = v94;

  if ((*(uint64_t (**)(void))(v98 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  unsigned __int8 v100 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v101 = v100;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x148));
  uint64_t v107 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v107);
  if (!result) {
    goto LABEL_70;
  }
  id v108 = (void *)result;
  id v109 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v110 = objc_msgSend(v54, sel_traitCollection);
  id v111 = objc_msgSend(v110, sel_userInterfaceIdiom);

  if (v111 == (id)1
    || (id v112 = objc_msgSend(v54, sel_traitCollection),
        id v113 = objc_msgSend(v112, sel_userInterfaceIdiom),
        v112,
        v113 == (id)6))
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for PointerBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    id v115 = objc_msgSend(objc_allocWithZone(v114), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v116 = *(void *)((*v75 & *v54) + 0x158);
    uint64_t v117 = *(void **)((char *)v54 + v116);
    *(void *)((char *)v54 + v116) = v115;
  }
  char v118 = *(char **)((char *)v54 + v76);
  uint64_t result = MEMORY[0x18C119DF0](&v118[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  unint64_t v119 = (void *)result;
  uint64_t v120 = swift_getObjectType();
  swift_retain();
  v121 = v118;

  if ((*(uint64_t (**)(void))(v120 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v122 = *(char **)((char *)v54 + *(void *)((*v75 & *v54) + 0x178));
  *(void *)&v122[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>();
  uint64_t v123 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v123);
  swift_retain();
  uint64_t v124 = v122;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v125 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v126 = lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v125 + 24) = v126;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)((*v75 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v127 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = *(void *)((char *)v54 + v128);
  uint64_t v130 = *(void *)(v129 + 48);
  if (v130)
  {
    uint64_t v131 = v54;
    swift_retain();
    objc_msgSend(v131, sel_addGestureRecognizer_, v130);
  }
  else
  {
    BOOL v132 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v129 + 56), a1);
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v133 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v134 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v135 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v135)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v135; ++i)
    {
      uint64_t v137 = *(void *)(v134 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v137, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v138 = one-time initialization token for didUpdateListLayout;
  uint64_t v139 = v54;
  if (v138 != -1) {
    swift_once();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v139, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v140 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v140, (uint64_t)v143);
  v143[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v143, (uint64_t)v139);
  swift_endAccess();

  static Update.end()();
  outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph(v142, (uint64_t (*)(void))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  return (uint64_t)v139;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  uint64_t v33;
  char *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  long long v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char **v68;
  char *v69;
  char isUniquelyReferenced_nonNull_native;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t result;
  void *v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  Class v113;
  id v114;
  uint64_t v115;
  void *v116;
  char *v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  unsigned char v141[16];
  objc_super v142;
  long long v143;
  uint64_t v144;
  ValueMetadata *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>, (uint64_t)&type metadata for Alert.Presentation, (uint64_t)&protocol witness table for Alert.Presentation, (uint64_t (*)(uint64_t, void *))type metadata accessor for DeprecatedAlertBridge);
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>, (uint64_t)type metadata accessor for DeprecatedAlertBridge, (uint64_t (*)(void, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, ActionSheet.Presentation>, (uint64_t)&type metadata for ActionSheet.Presentation, (uint64_t)&protocol witness table for ActionSheet.Presentation, (uint64_t (*)(uint64_t, void *))type metadata accessor for DeprecatedAlertBridge);
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, ActionSheet.Presentation>, (uint64_t)type metadata accessor for DeprecatedAlertBridge, (uint64_t (*)(void, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v31 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  *(void *)((char *)v9 + v31) = objc_msgSend(objc_allocWithZone(v32), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  Class v33 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v33) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  uint64_t v34 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)uint64_t v34 = 0;
  v34[8] = 0;
  *((_DWORD *)v34 + 3) = 0;
  BOOL v35 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  uint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *BOOL v35 = 0;
  v35[1] = v36;
  unint64_t v37 = MEMORY[0x1E4FBC868];
  v35[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v38 = outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a1, (uint64_t)v9 + *(void *)((*v3 & *v9) + 0x60), (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  uint64_t v39 = MEMORY[0x18C113CA0](v38);
  uint64_t v40 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v143, v39);
  if ((v143 & 1) == 0)
  {
    if ((v143 & 2) != 0)
    {
      uint64_t v41 = 2;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v41 = 0;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v143 & 2) == 0)
  {
    uint64_t v41 = 1;
    if ((v143 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v41 = 3;
  if ((v143 & 4) != 0) {
LABEL_7:
  }
    v41 |= 4uLL;
LABEL_8:
  if ((v143 & 0x10) != 0) {
    v41 |= 8uLL;
  }
  if ((v143 & 0x20) != 0) {
    v41 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v40)) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = v41 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v42, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v43 = swift_retain_n();
  *(void *)&objc_super v143 = specialized FocusViewGraph.init(graph:)(v43);
  *((void *)&v143 + 1) = v44;
  unint64_t v144 = v45;
  LOWORD(v145) = v46 & 0x101;
  BYTE2(v145) = v47 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v143) = 0;
  *(void *)&objc_super v143 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  char v48 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v49 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v144 = 0;
  objc_super v143 = 0uLL;
  LOBYTE(v145) = 0;
  uint64_t v146 = 0;
  v147 = v49;
  unint64_t v148 = v37;
  unint64_t v149 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v49);
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(v48);
  uint64_t v145 = &type metadata for HoverEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&objc_super v143 = v50;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v48);
  uint64_t v145 = &type metadata for KeyEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&objc_super v143 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
  v142.receiver = v9;
  v142.super_class = v52;
  unint64_t v53 = objc_msgSendSuper2(&v142, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  char v54 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v3 & *v53) + 0x500))(v54);
  uint64_t v55 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v55 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  unint64_t v56 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v57 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v58 = xmmword_1EB2E8DA0;
    uint64_t v59 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v60 = swift_retain();
      outlined copy of RepresentableContextValues?(v60, v57, v58, *((uint64_t *)&v58 + 1), v59);
      char v61 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v61 && (swift_release(), v56 == v61))
      {
        uint64_t v62 = swift_release();
        if (v59) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v62 = swift_release();
        if (v59)
        {
LABEL_25:
          MEMORY[0x1F4188790](v62);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v58, *((uint64_t *)&v58 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v56, v57, v58, *((uint64_t *)&v58 + 1), v59);
          uint64_t v63 = *((void *)&v143 + 1);
          uint64_t v64 = v143;
LABEL_32:
          uint64_t v65 = *(void *)((char *)v53 + *(void *)((*v3 & *v53) + 0x68));
          unint64_t v66 = *(void *)(v65 + 120);
          *(void *)(v65 + 120) = v64;
          *(void *)(v65 + 128) = v63;
          outlined consume of EnvironmentValues?(v66);
          outlined consume of RepresentableContextValues?(v56, v57, v58, *((uint64_t *)&v58 + 1), v59);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v62 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, *((uint64_t *)&v58 + 1), v59 & 1);
      if (v59) {
        goto LABEL_25;
      }
    }
    objc_super v143 = v58;
    swift_retain();
    swift_retain();
    uint64_t v63 = *((void *)&v58 + 1);
    uint64_t v64 = v58;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v67 = *(void *)((char *)v53 + *(void *)((*v3 & *v53) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v68 = (char **)(v67 + 24);
  swift_beginAccess();
  uint64_t v69 = *(char **)(v67 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v67 + 24) = v69;
  int64_t v71 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v69 + 2) + 1, 1, v69);
    uint64_t *v68 = v69;
  }
  unint64_t v73 = *((void *)v69 + 2);
  Swift::Int v72 = *((void *)v69 + 3);
  if (v73 >= v72 >> 1)
  {
    uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v69);
    uint64_t *v68 = v69;
  }
  *((void *)v69 + 2) = v73 + 1;
  unint64_t v74 = &v69[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = *(void *)((*v71 & *v53) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v76 = *(void **)((char *)v53 + *(void *)((*v71 & *v53) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  BOOL v77 = v76;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v78 = *(void **)((char *)v53 + *(void *)((*v71 & *v53) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = specialized _UIHostingView.sheetBridge.getter();
  if (v80)
  {
    uint64_t v81 = v80;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter();
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = *(void (**)(uint64_t))((*v71 & *v82) + 0x1F0);
    uint64_t v85 = swift_retain();
    v84(v85);

    swift_release();
  }
  uint64_t v86 = *(void *)((char *)v53 + *(void *)((*v71 & *v53) + 0xF8));
  uint64_t v87 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  *(void *)(v86 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v86 + 40) = v87;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v88 = FocusBridge.host.getter();
  if (v88)
  {
    uint64_t v90 = (void *)v88;
    uint64_t v91 = v89;
    uint64_t v92 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v91 + 8) + 16))(v92);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v93 = *(void **)((char *)v53 + *(void *)((*v71 & *v53) + 0x100));
  uint64_t v94 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v94);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  v96 = (void *)result;
  uint64_t v97 = swift_getObjectType();
  swift_retain();
  uint64_t v98 = v93;

  if ((*(uint64_t (**)(void))(v97 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v99 = *(void **)((char *)v53 + *(void *)((*v71 & *v53) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  unsigned __int8 v100 = v99;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v101 = *(void **)((char *)v53 + *(void *)((*v71 & *v53) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v102 = v101;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v103 = *(void **)((char *)v53 + *(void *)((*v71 & *v53) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v104 = v103;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v53 + *(void *)((*v71 & *v53) + 0x148));
  id v106 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v106);
  if (!result) {
    goto LABEL_70;
  }
  uint64_t v107 = (void *)result;
  id v108 = v105;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v109 = objc_msgSend(v53, sel_traitCollection);
  id v110 = objc_msgSend(v109, sel_userInterfaceIdiom);

  if (v110 == (id)1
    || (id v111 = objc_msgSend(v53, sel_traitCollection),
        id v112 = objc_msgSend(v111, sel_userInterfaceIdiom),
        v111,
        v112 == (id)6))
  {
    type metadata accessor for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>();
    Class v114 = objc_msgSend(objc_allocWithZone(v113), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    id v115 = *(void *)((*v71 & *v53) + 0x158);
    uint64_t v116 = *(void **)((char *)v53 + v115);
    *(void *)((char *)v53 + v115) = v114;
  }
  uint64_t v117 = *(char **)((char *)v53 + v75);
  uint64_t result = MEMORY[0x18C119DF0](&v117[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  char v118 = (void *)result;
  unint64_t v119 = swift_getObjectType();
  swift_retain();
  uint64_t v120 = v117;

  if ((*(uint64_t (**)(void))(v119 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  v121 = *(char **)((char *)v53 + *(void *)((*v71 & *v53) + 0x178));
  *(void *)&v121[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>();
  uint64_t v122 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v122);
  swift_retain();
  uint64_t v123 = v121;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v124 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v125 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  swift_beginAccess();
  *(void *)(v124 + 24) = v125;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v126 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v127 = *(void *)((*v71 & *v53) + 0xD0);
  swift_beginAccess();
  *(void *)(v126 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v128 = *(void *)((char *)v53 + v127);
  uint64_t v129 = *(void *)(v128 + 48);
  if (v129)
  {
    uint64_t v130 = v53;
    swift_retain();
    objc_msgSend(v130, sel_addGestureRecognizer_, v129);
  }
  else
  {
    uint64_t v131 = v53;
    swift_retain();
  }
  objc_msgSend(v53, sel_addGestureRecognizer_, *(void *)(v128 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  BOOL v132 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  id v133 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v134 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v134)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v134; ++i)
    {
      char v136 = *(void *)(v133 + 8 * i + 32);
      objc_msgSend(v132, sel_addObserver_selector_name_object_, v53, sel_accessibilityBooleanDidChange_, v136, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v53, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v137 = one-time initialization token for didUpdateListLayout;
  uint64_t v138 = v53;
  if (v137 != -1) {
    swift_once();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v138, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v139 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v139, (uint64_t)v141);
  v141[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v141, (uint64_t)v138);
  swift_endAccess();

  static Update.end()();
  outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a1, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  return (uint64_t)v138;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t result;
  void *v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Class v114;
  id v115;
  uint64_t v116;
  void *v117;
  char *v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v142;
  unsigned char v143[16];
  objc_super v144;
  long long v145;
  uint64_t v146;
  ValueMetadata *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for DragAndDropBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for TooltipBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for EditMenuBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PencilEventsBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v32 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for ContextMenuBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  BOOL v35 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(v31);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v39 = outlined init with copy of TabItem.RootView(a1, (uint64_t)v9 + *(void *)((*v3 & *v9) + 0x60));
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v145, v40);
  if ((v145 & 1) == 0)
  {
    if ((v145 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v145 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v145 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v145 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v145 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v145 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&uint64_t v145 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v145 + 1) = v45;
  uint64_t v146 = v46;
  LOWORD(v147) = v47 & 0x101;
  BYTE2(v147) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v145) = 0;
  *(void *)&uint64_t v145 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v146 = 0;
  uint64_t v145 = 0uLL;
  LOBYTE(v147) = 0;
  unint64_t v148 = 0;
  unint64_t v149 = v50;
  uint64_t v150 = v38;
  char v151 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for HoverEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&uint64_t v145 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for KeyEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&uint64_t v145 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v144.receiver = v9;
  v144.super_class = v53;
  char v54 = objc_msgSendSuper2(&v144, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<TabItem.RootView>.HostViewGraph((uint64_t)&v145);
  (*(void (**)(uint64_t))((*v3 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v145 + 1);
          uint64_t v65 = v145;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    uint64_t v145 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v76 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  BOOL v77 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v78 = v77;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  char v79 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v80 = v79;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v81 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v81)
  {
    uint64_t v82 = v81;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = *(void (**)(uint64_t))((*v75 & *v83) + 0x1F0);
    uint64_t v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  uint64_t v87 = *(void *)((char *)v54 + *(void *)((*v75 & *v54) + 0xF8));
  uint64_t v88 = lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
  *(void *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v89 = FocusBridge.host.getter();
  if (v89)
  {
    uint64_t v91 = (void *)v89;
    uint64_t v92 = v90;
    uint64_t v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v94 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x100));
  uint64_t v95 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v95);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v97 = (void *)result;
  uint64_t v98 = swift_getObjectType();
  swift_retain();
  id v99 = v94;

  if ((*(uint64_t (**)(void))(v98 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  unsigned __int8 v100 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v101 = v100;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x148));
  uint64_t v107 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v107);
  if (!result) {
    goto LABEL_70;
  }
  id v108 = (void *)result;
  id v109 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v110 = objc_msgSend(v54, sel_traitCollection);
  id v111 = objc_msgSend(v110, sel_userInterfaceIdiom);

  if (v111 == (id)1
    || (id v112 = objc_msgSend(v54, sel_traitCollection),
        id v113 = objc_msgSend(v112, sel_userInterfaceIdiom),
        v112,
        v113 == (id)6))
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PointerBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    id v115 = objc_msgSend(objc_allocWithZone(v114), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v116 = *(void *)((*v75 & *v54) + 0x158);
    uint64_t v117 = *(void **)((char *)v54 + v116);
    *(void *)((char *)v54 + v116) = v115;
  }
  char v118 = *(char **)((char *)v54 + v76);
  uint64_t result = MEMORY[0x18C119DF0](&v118[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  unint64_t v119 = (void *)result;
  uint64_t v120 = swift_getObjectType();
  swift_retain();
  v121 = v118;

  if ((*(uint64_t (**)(void))(v120 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v122 = *(char **)((char *)v54 + *(void *)((*v75 & *v54) + 0x178));
  *(void *)&v122[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
  uint64_t v123 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v123);
  swift_retain();
  uint64_t v124 = v122;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v125 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v126 = lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v125 + 24) = v126;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)((*v75 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v127 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = *(void *)((char *)v54 + v128);
  uint64_t v130 = *(void *)(v129 + 48);
  if (v130)
  {
    uint64_t v131 = v54;
    swift_retain();
    objc_msgSend(v131, sel_addGestureRecognizer_, v130);
  }
  else
  {
    BOOL v132 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v129 + 56), a1);
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v133 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v134 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v135 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v135)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v135; ++i)
    {
      uint64_t v137 = *(void *)(v134 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v137, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v138 = one-time initialization token for didUpdateListLayout;
  uint64_t v139 = v54;
  if (v138 != -1) {
    swift_once();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v139, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v140 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v140, (uint64_t)v143);
  v143[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v143, (uint64_t)v139);
  swift_endAccess();

  static Update.end()();
  outlined destroy of TabItem.RootView(v142);
  return (uint64_t)v139;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t result;
  void *v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Class v114;
  id v115;
  uint64_t v116;
  void *v117;
  char *v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v142;
  unsigned char v143[16];
  objc_super v144;
  long long v145;
  uint64_t v146;
  ValueMetadata *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for DragAndDropBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for TooltipBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for EditMenuBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PencilEventsBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v32 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for ContextMenuBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  BOOL v35 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(v31);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v39 = outlined init with copy of DocumentGroupsIntroRootView(a1, (uint64_t)v9 + *(void *)((*v3 & *v9) + 0x60));
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v145, v40);
  if ((v145 & 1) == 0)
  {
    if ((v145 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v145 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v145 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v145 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v145 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v145 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&uint64_t v145 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v145 + 1) = v45;
  uint64_t v146 = v46;
  LOWORD(v147) = v47 & 0x101;
  BYTE2(v147) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v145) = 0;
  *(void *)&uint64_t v145 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v146 = 0;
  uint64_t v145 = 0uLL;
  LOBYTE(v147) = 0;
  unint64_t v148 = 0;
  unint64_t v149 = v50;
  uint64_t v150 = v38;
  char v151 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for HoverEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&uint64_t v145 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for KeyEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&uint64_t v145 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v144.receiver = v9;
  v144.super_class = v53;
  char v54 = objc_msgSendSuper2(&v144, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph((uint64_t)&v145);
  (*(void (**)(uint64_t))((*v3 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v145 + 1);
          uint64_t v65 = v145;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    uint64_t v145 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v76 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  BOOL v77 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v78 = v77;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  char v79 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v80 = v79;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v81 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v81)
  {
    uint64_t v82 = v81;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = *(void (**)(uint64_t))((*v75 & *v83) + 0x1F0);
    uint64_t v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  uint64_t v87 = *(void *)((char *)v54 + *(void *)((*v75 & *v54) + 0xF8));
  uint64_t v88 = lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>();
  *(void *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v89 = FocusBridge.host.getter();
  if (v89)
  {
    uint64_t v91 = (void *)v89;
    uint64_t v92 = v90;
    uint64_t v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v94 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x100));
  uint64_t v95 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v95);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v97 = (void *)result;
  uint64_t v98 = swift_getObjectType();
  swift_retain();
  id v99 = v94;

  if ((*(uint64_t (**)(void))(v98 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  unsigned __int8 v100 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v101 = v100;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x148));
  uint64_t v107 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v107);
  if (!result) {
    goto LABEL_70;
  }
  id v108 = (void *)result;
  id v109 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v110 = objc_msgSend(v54, sel_traitCollection);
  id v111 = objc_msgSend(v110, sel_userInterfaceIdiom);

  if (v111 == (id)1
    || (id v112 = objc_msgSend(v54, sel_traitCollection),
        id v113 = objc_msgSend(v112, sel_userInterfaceIdiom),
        v112,
        v113 == (id)6))
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PointerBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    id v115 = objc_msgSend(objc_allocWithZone(v114), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v116 = *(void *)((*v75 & *v54) + 0x158);
    uint64_t v117 = *(void **)((char *)v54 + v116);
    *(void *)((char *)v54 + v116) = v115;
  }
  char v118 = *(char **)((char *)v54 + v76);
  uint64_t result = MEMORY[0x18C119DF0](&v118[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  unint64_t v119 = (void *)result;
  uint64_t v120 = swift_getObjectType();
  swift_retain();
  v121 = v118;

  if ((*(uint64_t (**)(void))(v120 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v122 = *(char **)((char *)v54 + *(void *)((*v75 & *v54) + 0x178));
  *(void *)&v122[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>();
  uint64_t v123 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v123);
  swift_retain();
  uint64_t v124 = v122;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v125 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v126 = lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v125 + 24) = v126;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)((*v75 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v127 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = *(void *)((char *)v54 + v128);
  uint64_t v130 = *(void *)(v129 + 48);
  if (v130)
  {
    uint64_t v131 = v54;
    swift_retain();
    objc_msgSend(v131, sel_addGestureRecognizer_, v130);
  }
  else
  {
    BOOL v132 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v129 + 56), a1);
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v133 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v134 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v135 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v135)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v135; ++i)
    {
      uint64_t v137 = *(void *)(v134 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v137, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v138 = one-time initialization token for didUpdateListLayout;
  uint64_t v139 = v54;
  if (v138 != -1) {
    swift_once();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v139, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v140 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v140, (uint64_t)v143);
  v143[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v143, (uint64_t)v139);
  swift_endAccess();

  static Update.end()();
  outlined destroy of DocumentGroupsIntroRootView(v142);
  return (uint64_t)v139;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  objc_class *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char **v73;
  char *v74;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t result;
  void *v101;
  uint64_t v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  void *v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  Class v118;
  id v119;
  uint64_t v120;
  void *v121;
  char *v122;
  void *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t i;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v146;
  unsigned char v147[16];
  objc_super v148;
  long long v149;
  uint64_t v150;
  ValueMetadata *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char v155;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  uint64_t v18 = MEMORY[0x1E4F3F308];
  Class v19 = MEMORY[0x1E4F3F300];
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<_ViewList_View>, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v21 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for TooltipBridge<_ViewList_View>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  Class v23 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for EditMenuBridge<_ViewList_View>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<_ViewList_View>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(void *)(v26 + 24) = v15;
  *(void *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v25) = v26;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  Class v27 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<_ViewList_View>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  Class v29 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for PencilEventsBridge<_ViewList_View>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  uint64_t v31 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<_ViewList_View>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  Class v33 = MEMORY[0x1E4FBC860];
  *(void *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v9 + v31) = v32;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for ContextMenuBridge<_ViewList_View>, v18, v19, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone(v35), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v36 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v36) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  unint64_t v37 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)unint64_t v37 = 0;
  v37[8] = 0;
  *((_DWORD *)v37 + 3) = 0;
  uint64_t v38 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  uint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  *uint64_t v38 = 0;
  v38[1] = v39;
  uint64_t v40 = MEMORY[0x1E4FBC868];
  v38[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v41 = outlined init with copy of _ViewList_View(a1, (uint64_t)v9 + *(void *)((*v3 & *v9) + 0x60));
  uint64_t v42 = MEMORY[0x18C113CA0](v41);
  uint64_t v43 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v149, v42);
  if ((v149 & 1) == 0)
  {
    if ((v149 & 2) != 0)
    {
      uint64_t v44 = 2;
      if ((v149 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v44 = 0;
      if ((v149 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v149 & 2) == 0)
  {
    uint64_t v44 = 1;
    if ((v149 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v44 = 3;
  if ((v149 & 4) != 0) {
LABEL_7:
  }
    v44 |= 4uLL;
LABEL_8:
  if ((v149 & 0x10) != 0) {
    v44 |= 8uLL;
  }
  if ((v149 & 0x20) != 0) {
    v44 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v43)) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = v44 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v45, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v46 = swift_retain_n();
  *(void *)&unint64_t v149 = specialized FocusViewGraph.init(graph:)(v46);
  *((void *)&v149 + 1) = v47;
  uint64_t v150 = v48;
  LOWORD(v151) = v49 & 0x101;
  BYTE2(v151) = v50 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v149) = 0;
  *(void *)&unint64_t v149 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<_ViewList_View>.EnableVFDFeature, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<_ViewList_View>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v51 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v150 = 0;
  unint64_t v149 = 0uLL;
  LOBYTE(v151) = 0;
  uint64_t v152 = 0;
  uint64_t v153 = v52;
  uint64_t v154 = v40;
  v155 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v52);
  unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(v51);
  char v151 = &type metadata for HoverEventDispatcher;
  uint64_t v152 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&unint64_t v149 = v53;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
  char v151 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v152 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
  char v151 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v152 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
  char v54 = specialized Dictionary.init(dictionaryLiteral:)(v51);
  char v151 = &type metadata for KeyEventDispatcher;
  uint64_t v152 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&unint64_t v149 = v54;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  uint64_t v55 = MEMORY[0x1E4F3F308];
  unint64_t v56 = MEMORY[0x1E4F3F300];
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v148.receiver = v9;
  v148.super_class = v57;
  uint64_t v58 = objc_msgSendSuper2(&v148, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<_ViewList_View>.HostViewGraph, v55, v56, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<_ViewList_View>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v59 = outlined destroy of _UIHostingView<_ViewList_View>.HostViewGraph((uint64_t)&v149);
  (*(void (**)(uint64_t))((*v3 & *v58) + 0x500))(v59);
  uint64_t v60 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v60 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  char v61 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v62 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v63 = xmmword_1EB2E8DA0;
    uint64_t v64 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v65 = swift_retain();
      outlined copy of RepresentableContextValues?(v65, v62, v63, *((uint64_t *)&v63 + 1), v64);
      unint64_t v66 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v66 && (swift_release(), v61 == v66))
      {
        uint64_t v67 = swift_release();
        if (v64) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v67 = swift_release();
        if (v64)
        {
LABEL_25:
          MEMORY[0x1F4188790](v67);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v63, *((uint64_t *)&v63 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v61, v62, v63, *((uint64_t *)&v63 + 1), v64);
          uint64_t v68 = *((void *)&v149 + 1);
          uint64_t v69 = v149;
LABEL_32:
          unint64_t v70 = *(void *)((char *)v58 + *(void *)((*v3 & *v58) + 0x68));
          int64_t v71 = *(void *)(v70 + 120);
          *(void *)(v70 + 120) = v69;
          *(void *)(v70 + 128) = v68;
          outlined consume of EnvironmentValues?(v71);
          outlined consume of RepresentableContextValues?(v61, v62, v63, *((uint64_t *)&v63 + 1), v64);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v67 = outlined copy of RepresentableContextValues.EnvironmentStorage(v63, *((uint64_t *)&v63 + 1), v64 & 1);
      if (v64) {
        goto LABEL_25;
      }
    }
    unint64_t v149 = v63;
    swift_retain();
    swift_retain();
    uint64_t v68 = *((void *)&v63 + 1);
    uint64_t v69 = v63;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  Swift::Int v72 = *(void *)((char *)v58 + *(void *)((*v3 & *v58) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v73 = (char **)(v72 + 24);
  swift_beginAccess();
  unint64_t v74 = *(char **)(v72 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v72 + 24) = v74;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v74 + 2) + 1, 1, v74);
    *unint64_t v73 = v74;
  }
  BOOL v77 = *((void *)v74 + 2);
  uint64_t v76 = *((void *)v74 + 3);
  if (v77 >= v76 >> 1)
  {
    unint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v74);
    *unint64_t v73 = v74;
  }
  *((void *)v74 + 2) = v77 + 1;
  id v78 = &v74[24 * v77];
  *((void *)v78 + 4) = &type metadata for StatusBarKey;
  *((void *)v78 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  char v79 = (void *)MEMORY[0x1E4FBC8C8];
  id v80 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v58) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v81 = *(void **)((char *)v58 + *(void *)((*v79 & *v58) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v82 = v81;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v83 = *(void **)((char *)v58 + *(void *)((*v79 & *v58) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v84 = v83;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??);
  if (v85)
  {
    uint64_t v86 = v85;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v87 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??);
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = *(void (**)(uint64_t))((*v79 & *v87) + 0x1F0);
    uint64_t v90 = swift_retain();
    v89(v90);

    swift_release();
  }
  uint64_t v91 = *(void *)((char *)v58 + *(void *)((*v79 & *v58) + 0xF8));
  uint64_t v92 = lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>();
  *(void *)(v91 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v91 + 40) = v92;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v93 = FocusBridge.host.getter();
  if (v93)
  {
    uint64_t v95 = (void *)v93;
    v96 = v94;
    uint64_t v97 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v96 + 8) + 16))(v97);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v98 = *(void **)((char *)v58 + *(void *)((*v79 & *v58) + 0x100));
  id v99 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v99);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  id v101 = (void *)result;
  uint64_t v102 = swift_getObjectType();
  swift_retain();
  id v103 = v98;

  if ((*(uint64_t (**)(void))(v102 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t v104 = *(void **)((char *)v58 + *(void *)((*v79 & *v58) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v58 + *(void *)((*v79 & *v58) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v107 = v106;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v108 = *(void **)((char *)v58 + *(void *)((*v79 & *v58) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v109 = v108;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v110 = *(void **)((char *)v58 + *(void *)((*v79 & *v58) + 0x148));
  id v111 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v111);
  if (!result) {
    goto LABEL_70;
  }
  id v112 = (void *)result;
  id v113 = v110;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  Class v114 = objc_msgSend(v58, sel_traitCollection);
  id v115 = objc_msgSend(v114, sel_userInterfaceIdiom);

  if (v115 == (id)1
    || (uint64_t v116 = objc_msgSend(v58, sel_traitCollection),
        uint64_t v117 = objc_msgSend(v116, sel_userInterfaceIdiom),
        v116,
        v117 == (id)6))
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for PointerBridge<_ViewList_View>, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    unint64_t v119 = objc_msgSend(objc_allocWithZone(v118), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v120 = *(void *)((*v79 & *v58) + 0x158);
    v121 = *(void **)((char *)v58 + v120);
    *(void *)((char *)v58 + v120) = v119;
  }
  uint64_t v122 = *(char **)((char *)v58 + v80);
  uint64_t result = MEMORY[0x18C119DF0](&v122[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v123 = (void *)result;
  uint64_t v124 = swift_getObjectType();
  swift_retain();
  uint64_t v125 = v122;

  if ((*(uint64_t (**)(void))(v124 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v126 = *(char **)((char *)v58 + *(void *)((*v79 & *v58) + 0x178));
  *(void *)&v126[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>();
  uint64_t v127 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v127);
  swift_retain();
  uint64_t v128 = v126;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v129 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v130 = lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v129 + 24) = v130;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v131 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  BOOL v132 = *(void *)((*v79 & *v58) + 0xD0);
  swift_beginAccess();
  *(void *)(v131 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  id v133 = *(void *)((char *)v58 + v132);
  uint64_t v134 = *(void *)(v133 + 48);
  if (v134)
  {
    uint64_t v135 = v58;
    swift_retain();
    objc_msgSend(v135, sel_addGestureRecognizer_, v134);
  }
  else
  {
    char v136 = v58;
    swift_retain();
  }
  objc_msgSend(v58, sel_addGestureRecognizer_, *(void *)(v133 + 56), a1);
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  uint64_t v137 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v138 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v139 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v139)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v139; ++i)
    {
      uint64_t v141 = *(void *)(v138 + 8 * i + 32);
      objc_msgSend(v137, sel_addObserver_selector_name_object_, v58, sel_accessibilityBooleanDidChange_, v141, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v137, sel_addObserver_selector_name_object_, v58, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  v142 = one-time initialization token for didUpdateListLayout;
  objc_super v143 = v58;
  if (v142 != -1) {
    swift_once();
  }
  objc_msgSend(v137, sel_addObserver_selector_name_object_, v143, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  unint64_t v144 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v144, (uint64_t)v147);
  v147[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v147, (uint64_t)v143);
  swift_endAccess();

  static Update.end()();
  outlined destroy of _ViewList_View(v146);
  return (uint64_t)v143;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  Class v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t result;
  void *v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  Class v113;
  id v114;
  uint64_t v115;
  void *v116;
  char *v117;
  void *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned char v141[16];
  objc_super v142;
  long long v143;
  uint64_t v144;
  ValueMetadata *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;

  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0x88)) = 0;
  uint64_t v5 = (char *)v1 + *(void *)((*v4 & *v1) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  uint64_t v6 = (char *)v1 + *(void *)((*v4 & *v1) + 0x98);
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  uint64_t v10 = v1;
  *(void *)((char *)v1 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 160) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for DragAndDropBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for TooltipBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  *(void *)((char *)v10 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for EditMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  *(void *)((char *)v10 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for PencilEventsBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  *(void *)((char *)v10 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(void *)((char *)v10 + v30) = v31;
  uint64_t v32 = *(void *)((*v4 & *v10) + 0x168);
  type metadata accessor for ContextMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  *(void *)((char *)v10 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v4 & *v10) + 0x178);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1A0)) = 0;
  BOOL v35 = (char *)v10 + *(void *)((*v4 & *v10) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1D8)) = 0;
  uint64_t v140 = a1;
  uint64_t v39 = outlined init with copy of ModifiedContent<TableRowView, CollectionViewCellModifier>(a1, (uint64_t)v10 + *(void *)((*v4 & *v10) + 0x60), &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier);
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v143, v40);
  if ((v143 & 1) == 0)
  {
    if ((v143 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v143 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v143 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v143 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v143 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v143 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&objc_super v143 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v143 + 1) = v45;
  unint64_t v144 = v46;
  LOWORD(v145) = v47 & 0x101;
  BYTE2(v145) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v143) = 0;
  *(void *)&objc_super v143 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v144 = 0;
  objc_super v143 = 0uLL;
  LOBYTE(v145) = 0;
  uint64_t v146 = 0;
  v147 = v50;
  unint64_t v148 = v38;
  unint64_t v149 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for HoverEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&objc_super v143 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for KeyEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&objc_super v143 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
  v142.receiver = v10;
  v142.super_class = v53;
  char v54 = objc_msgSendSuper2(&v142, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v4 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v143 + 1);
          uint64_t v65 = v143;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    objc_super v143 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = *(void *)((*v4 & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v76 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  BOOL v77 = v76;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v78 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v80)
  {
    uint64_t v81 = v80;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = *(void (**)(uint64_t))((*v4 & *v82) + 0x1F0);
    uint64_t v85 = swift_retain();
    v84(v85);

    swift_release();
  }
  uint64_t v86 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0xF8));
  uint64_t v87 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  *(void *)(v86 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v86 + 40) = v87;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v88 = FocusBridge.host.getter();
  if (v88)
  {
    uint64_t v90 = (void *)v88;
    uint64_t v91 = v89;
    uint64_t v92 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v91 + 8) + 16))(v92);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v93 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x100));
  uint64_t v94 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v94);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  v96 = (void *)result;
  uint64_t v97 = swift_getObjectType();
  swift_retain();
  uint64_t v98 = v93;

  if ((*(uint64_t (**)(void))(v97 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v99 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  unsigned __int8 v100 = v99;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v101 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v102 = v101;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v103 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v104 = v103;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x148));
  id v106 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v106);
  if (!result) {
    goto LABEL_70;
  }
  uint64_t v107 = (void *)result;
  id v108 = v105;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v109 = objc_msgSend(v54, sel_traitCollection);
  id v110 = objc_msgSend(v109, sel_userInterfaceIdiom);

  if (v110 == (id)1
    || (id v111 = objc_msgSend(v54, sel_traitCollection),
        id v112 = objc_msgSend(v111, sel_userInterfaceIdiom),
        v111,
        v112 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    Class v114 = objc_msgSend(objc_allocWithZone(v113), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    id v115 = *(void *)((*v4 & *v54) + 0x158);
    uint64_t v116 = *(void **)((char *)v54 + v115);
    *(void *)((char *)v54 + v115) = v114;
  }
  uint64_t v117 = *(char **)((char *)v54 + v75);
  uint64_t result = MEMORY[0x18C119DF0](&v117[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  char v118 = (void *)result;
  unint64_t v119 = swift_getObjectType();
  swift_retain();
  uint64_t v120 = v117;

  if ((*(uint64_t (**)(void))(v119 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  v121 = *(char **)((char *)v54 + *(void *)((*v4 & *v54) + 0x178));
  *(void *)&v121[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>();
  uint64_t v122 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v122);
  swift_retain();
  uint64_t v123 = v121;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v124 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v125 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  swift_beginAccess();
  *(void *)(v124 + 24) = v125;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v126 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v127 = *(void *)((*v4 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v126 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v128 = *(void *)((char *)v54 + v127);
  uint64_t v129 = *(void *)(v128 + 48);
  if (v129)
  {
    uint64_t v130 = v54;
    swift_retain();
    objc_msgSend(v130, sel_addGestureRecognizer_, v129);
  }
  else
  {
    uint64_t v131 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v128 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  BOOL v132 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  id v133 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v134 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v134)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v134; ++i)
    {
      char v136 = *(void *)(v133 + 8 * i + 32);
      objc_msgSend(v132, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v136, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v137 = one-time initialization token for didUpdateListLayout;
  uint64_t v138 = v54;
  if (v137 != -1) {
    swift_once();
  }
  objc_msgSend(v132, sel_addObserver_selector_name_object_, v138, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v139 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v139, (uint64_t)v141);
  v141[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v141, (uint64_t)v138);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<_ViewList_View, ListTableCellModifier>(v140);
  return (uint64_t)v138;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t result;
  void *v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Class v114;
  id v115;
  uint64_t v116;
  void *v117;
  char *v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v142;
  unsigned char v143[16];
  objc_super v144;
  long long v145;
  uint64_t v146;
  ValueMetadata *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for TooltipBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v32 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  BOOL v35 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(v31);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v39 = outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a1, (uint64_t)v9 + *(void *)((*v3 & *v9) + 0x60), (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v145, v40);
  if ((v145 & 1) == 0)
  {
    if ((v145 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v145 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v145 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v145 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v145 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v145 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&uint64_t v145 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v145 + 1) = v45;
  uint64_t v146 = v46;
  LOWORD(v147) = v47 & 0x101;
  BYTE2(v147) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v145) = 0;
  *(void *)&uint64_t v145 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.EnableVFDFeature, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v146 = 0;
  uint64_t v145 = 0uLL;
  LOBYTE(v147) = 0;
  unint64_t v148 = 0;
  unint64_t v149 = v50;
  uint64_t v150 = v38;
  char v151 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for HoverEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&uint64_t v145 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for KeyEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&uint64_t v145 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v144.receiver = v9;
  v144.super_class = v53;
  char v54 = objc_msgSendSuper2(&v144, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.HostViewGraph, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph((uint64_t)&v145, &lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.HostViewGraph, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>);
  (*(void (**)(uint64_t))((*v3 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v145 + 1);
          uint64_t v65 = v145;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    uint64_t v145 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v76 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  BOOL v77 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v78 = v77;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  char v79 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v80 = v79;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v81 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v81)
  {
    uint64_t v82 = v81;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = *(void (**)(uint64_t))((*v75 & *v83) + 0x1F0);
    uint64_t v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  uint64_t v87 = *(void *)((char *)v54 + *(void *)((*v75 & *v54) + 0xF8));
  uint64_t v88 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>();
  *(void *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v89 = FocusBridge.host.getter();
  if (v89)
  {
    uint64_t v91 = (void *)v89;
    uint64_t v92 = v90;
    uint64_t v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v94 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x100));
  uint64_t v95 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v95);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v97 = (void *)result;
  uint64_t v98 = swift_getObjectType();
  swift_retain();
  id v99 = v94;

  if ((*(uint64_t (**)(void))(v98 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  unsigned __int8 v100 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v101 = v100;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x148));
  uint64_t v107 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v107);
  if (!result) {
    goto LABEL_70;
  }
  id v108 = (void *)result;
  id v109 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v110 = objc_msgSend(v54, sel_traitCollection);
  id v111 = objc_msgSend(v110, sel_userInterfaceIdiom);

  if (v111 == (id)1
    || (id v112 = objc_msgSend(v54, sel_traitCollection),
        id v113 = objc_msgSend(v112, sel_userInterfaceIdiom),
        v112,
        v113 == (id)6))
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, &lazy cache variable for type metadata for PointerBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    id v115 = objc_msgSend(objc_allocWithZone(v114), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v116 = *(void *)((*v75 & *v54) + 0x158);
    uint64_t v117 = *(void **)((char *)v54 + v116);
    *(void *)((char *)v54 + v116) = v115;
  }
  char v118 = *(char **)((char *)v54 + v76);
  uint64_t result = MEMORY[0x18C119DF0](&v118[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  unint64_t v119 = (void *)result;
  uint64_t v120 = swift_getObjectType();
  swift_retain();
  v121 = v118;

  if ((*(uint64_t (**)(void))(v120 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v122 = *(char **)((char *)v54 + *(void *)((*v75 & *v54) + 0x178));
  *(void *)&v122[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>();
  uint64_t v123 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v123);
  swift_retain();
  uint64_t v124 = v122;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v125 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v126 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v125 + 24) = v126;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)((*v75 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v127 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = *(void *)((char *)v54 + v128);
  uint64_t v130 = *(void *)(v129 + 48);
  if (v130)
  {
    uint64_t v131 = v54;
    swift_retain();
    objc_msgSend(v131, sel_addGestureRecognizer_, v130);
  }
  else
  {
    BOOL v132 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v129 + 56), a1);
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v133 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v134 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v135 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v135)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v135; ++i)
    {
      uint64_t v137 = *(void *)(v134 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v137, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v138 = one-time initialization token for didUpdateListLayout;
  uint64_t v139 = v54;
  if (v138 != -1) {
    swift_once();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v139, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v140 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v140, (uint64_t)v143);
  v143[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v143, (uint64_t)v139);
  swift_endAccess();

  static Update.end()();
  outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph(v142, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  return (uint64_t)v139;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t result;
  void *v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Class v114;
  id v115;
  uint64_t v116;
  void *v117;
  char *v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v142;
  unsigned char v143[16];
  objc_super v144;
  long long v145;
  uint64_t v146;
  ValueMetadata *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for DragAndDropBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for TooltipBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for EditMenuBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PencilEventsBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v32 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for ContextMenuBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  BOOL v35 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(v31);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v39 = outlined init with copy of BridgedNavigationView.RootView(a1, (uint64_t)v9 + *(void *)((*v3 & *v9) + 0x60));
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v145, v40);
  if ((v145 & 1) == 0)
  {
    if ((v145 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v145 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v145 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v145 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v145 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v145 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&uint64_t v145 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v145 + 1) = v45;
  uint64_t v146 = v46;
  LOWORD(v147) = v47 & 0x101;
  BYTE2(v147) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v145) = 0;
  *(void *)&uint64_t v145 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v146 = 0;
  uint64_t v145 = 0uLL;
  LOBYTE(v147) = 0;
  unint64_t v148 = 0;
  unint64_t v149 = v50;
  uint64_t v150 = v38;
  char v151 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for HoverEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&uint64_t v145 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  v147 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  v147 = &type metadata for KeyEventDispatcher;
  unint64_t v148 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&uint64_t v145 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v144.receiver = v9;
  v144.super_class = v53;
  char v54 = objc_msgSendSuper2(&v144, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph((uint64_t)&v145);
  (*(void (**)(uint64_t))((*v3 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v145 + 1);
          uint64_t v65 = v145;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    uint64_t v145 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v3 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v76 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  BOOL v77 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v78 = v77;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  char v79 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v80 = v79;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v81 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v81)
  {
    uint64_t v82 = v81;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = *(void (**)(uint64_t))((*v75 & *v83) + 0x1F0);
    uint64_t v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  uint64_t v87 = *(void *)((char *)v54 + *(void *)((*v75 & *v54) + 0xF8));
  uint64_t v88 = lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>();
  *(void *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v89 = FocusBridge.host.getter();
  if (v89)
  {
    uint64_t v91 = (void *)v89;
    uint64_t v92 = v90;
    uint64_t v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v94 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x100));
  uint64_t v95 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v95);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v97 = (void *)result;
  uint64_t v98 = swift_getObjectType();
  swift_retain();
  id v99 = v94;

  if ((*(uint64_t (**)(void))(v98 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  unsigned __int8 v100 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v101 = v100;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v75 & *v54) + 0x148));
  uint64_t v107 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v107);
  if (!result) {
    goto LABEL_70;
  }
  id v108 = (void *)result;
  id v109 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v110 = objc_msgSend(v54, sel_traitCollection);
  id v111 = objc_msgSend(v110, sel_userInterfaceIdiom);

  if (v111 == (id)1
    || (id v112 = objc_msgSend(v54, sel_traitCollection),
        id v113 = objc_msgSend(v112, sel_userInterfaceIdiom),
        v112,
        v113 == (id)6))
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PointerBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    id v115 = objc_msgSend(objc_allocWithZone(v114), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v116 = *(void *)((*v75 & *v54) + 0x158);
    uint64_t v117 = *(void **)((char *)v54 + v116);
    *(void *)((char *)v54 + v116) = v115;
  }
  char v118 = *(char **)((char *)v54 + v76);
  uint64_t result = MEMORY[0x18C119DF0](&v118[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  unint64_t v119 = (void *)result;
  uint64_t v120 = swift_getObjectType();
  swift_retain();
  v121 = v118;

  if ((*(uint64_t (**)(void))(v120 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v122 = *(char **)((char *)v54 + *(void *)((*v75 & *v54) + 0x178));
  *(void *)&v122[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>();
  uint64_t v123 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v123);
  swift_retain();
  uint64_t v124 = v122;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v125 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v126 = lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v125 + 24) = v126;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)((*v75 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v127 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = *(void *)((char *)v54 + v128);
  uint64_t v130 = *(void *)(v129 + 48);
  if (v130)
  {
    uint64_t v131 = v54;
    swift_retain();
    objc_msgSend(v131, sel_addGestureRecognizer_, v130);
  }
  else
  {
    BOOL v132 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v129 + 56), a1);
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v133 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v134 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v135 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v135)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v135; ++i)
    {
      uint64_t v137 = *(void *)(v134 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v137, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v138 = one-time initialization token for didUpdateListLayout;
  uint64_t v139 = v54;
  if (v138 != -1) {
    swift_once();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v139, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v140 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v140, (uint64_t)v143);
  v143[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v143, (uint64_t)v139);
  swift_endAccess();

  static Update.end()();
  outlined destroy of BridgedNavigationView.RootView(v142);
  return (uint64_t)v139;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  uint64_t v33;
  char *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t result;
  void *v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  uint64_t v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  Class v115;
  id v116;
  uint64_t v117;
  void *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t i;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  unsigned char v143[16];
  objc_super v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  ValueMetadata *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>, (uint64_t)&type metadata for Alert.Presentation, (uint64_t)&protocol witness table for Alert.Presentation, (uint64_t (*)(uint64_t, void *))type metadata accessor for DeprecatedAlertBridge);
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>, (uint64_t)type metadata accessor for DeprecatedAlertBridge, (uint64_t (*)(void, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, ActionSheet.Presentation>, (uint64_t)&type metadata for ActionSheet.Presentation, (uint64_t)&protocol witness table for ActionSheet.Presentation, (uint64_t (*)(uint64_t, void *))type metadata accessor for DeprecatedAlertBridge);
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, ActionSheet.Presentation>, (uint64_t)type metadata accessor for DeprecatedAlertBridge, (uint64_t (*)(void, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, EmptyModifier>>();
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for TooltipBridge<ModifiedContent<AnyView, EmptyModifier>>();
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, EmptyModifier>>();
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, EmptyModifier>>();
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, EmptyModifier>>();
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, EmptyModifier>>();
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, EmptyModifier>>();
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v31 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, EmptyModifier>>();
  *(void *)((char *)v9 + v31) = objc_msgSend(objc_allocWithZone(v32), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  Class v33 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v33) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  uint64_t v34 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)uint64_t v34 = 0;
  v34[8] = 0;
  *((_DWORD *)v34 + 3) = 0;
  BOOL v35 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  uint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *BOOL v35 = 0;
  v35[1] = v36;
  unint64_t v37 = MEMORY[0x1E4FBC868];
  v35[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x60)) = a1;
  uint64_t v38 = swift_retain();
  uint64_t v39 = MEMORY[0x18C113CA0](v38);
  uint64_t v40 = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(ObjectType + 1192))(&v145, v39);
  if ((v145 & 1) == 0)
  {
    if ((v145 & 2) != 0)
    {
      uint64_t v41 = 2;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v41 = 0;
      if ((v145 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v145 & 2) == 0)
  {
    uint64_t v41 = 1;
    if ((v145 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v41 = 3;
  if ((v145 & 4) != 0) {
LABEL_7:
  }
    v41 |= 4uLL;
LABEL_8:
  if ((v145 & 0x10) != 0) {
    v41 |= 8uLL;
  }
  if ((v145 & 0x20) != 0) {
    v41 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v40)) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = v41 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v42, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v43 = swift_retain_n();
  uint64_t v145 = specialized FocusViewGraph.init(graph:)(v43);
  uint64_t v146 = v44;
  v147 = v45;
  LOWORD(v148) = v46 & 0x101;
  BYTE2(v148) = v47 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  LOWORD(v146) = 0;
  uint64_t v145 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  char v48 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v49 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v146 = 0;
  v147 = 0;
  uint64_t v145 = 0;
  LOBYTE(v148) = 0;
  unint64_t v149 = 0;
  uint64_t v150 = v49;
  char v151 = v37;
  uint64_t v152 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v49);
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(v48);
  unint64_t v148 = &type metadata for HoverEventDispatcher;
  unint64_t v149 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  uint64_t v145 = v50;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  unint64_t v148 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v149 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  unint64_t v148 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v149 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v48);
  unint64_t v148 = &type metadata for KeyEventDispatcher;
  unint64_t v149 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  uint64_t v145 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  v144.receiver = v9;
  v144.super_class = v52;
  unint64_t v53 = objc_msgSendSuper2(&v144, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  char v54 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v145, (uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v3 & *v53) + 0x500))(v54);
  uint64_t v55 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v55 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  unint64_t v56 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v57 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v58 = qword_1EB2E8DA0;
    uint64_t v59 = qword_1EB2E8DA8;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v57, v58, v59, v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v56 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
          uint64_t v65 = v145;
          uint64_t v64 = v146;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v53 + *(void *)((*v3 & *v53) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    uint64_t v145 = v58;
    uint64_t v146 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = v59;
    uint64_t v65 = v58;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v53 + *(void *)((*v3 & *v53) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  Swift::Int v72 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v74 = *((void *)v70 + 2);
  unint64_t v73 = *((void *)v70 + 3);
  if (v74 >= v73 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v74 + 1;
  unint64_t v75 = &v70[24 * v74];
  *((void *)v75 + 4) = &type metadata for StatusBarKey;
  *((void *)v75 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v75 + 12) = -1;
  swift_release();
  swift_release();
  uint64_t v76 = *(void *)((*v72 & *v53) + 0x168);
  swift_unknownObjectWeakAssign();
  BOOL v77 = *(void **)((char *)v53 + *(void *)((*v72 & *v53) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v78 = v77;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  char v79 = *(void **)((char *)v53 + *(void *)((*v72 & *v53) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v80 = v79;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v81 = specialized _UIHostingView.sheetBridge.getter();
  if (v81)
  {
    uint64_t v82 = v81;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v83 = specialized _UIHostingView.sheetBridge.getter();
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = *(void (**)(uint64_t))((*v72 & *v83) + 0x1F0);
    uint64_t v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  uint64_t v87 = *(void *)((char *)v53 + *(void *)((*v72 & *v53) + 0xF8));
  uint64_t v88 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
  *(void *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v89 = FocusBridge.host.getter();
  if (v89)
  {
    uint64_t v91 = (void *)v89;
    uint64_t v92 = v90;
    uint64_t v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v94 = *(void **)((char *)v53 + *(void *)((*v72 & *v53) + 0x100));
  uint64_t v95 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v95);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v97 = (void *)result;
  uint64_t v98 = swift_getObjectType();
  swift_retain();
  id v99 = v94;

  if ((*(uint64_t (**)(uint64_t))(v98 + 1208))(v100))
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v101 = *(void **)((char *)v53 + *(void *)((*v72 & *v53) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v102 = v101;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v103 = *(void **)((char *)v53 + *(void *)((*v72 & *v53) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v104 = v103;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v53 + *(void *)((*v72 & *v53) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v106 = v105;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v107 = *(void **)((char *)v53 + *(void *)((*v72 & *v53) + 0x148));
  id v108 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v108);
  if (!result) {
    goto LABEL_70;
  }
  id v109 = (void *)result;
  id v110 = v107;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v111 = objc_msgSend(v53, sel_traitCollection, 0);
  id v112 = objc_msgSend(v111, sel_userInterfaceIdiom);

  if (v112 == (id)1
    || (id v113 = objc_msgSend(v53, sel_traitCollection),
        Class v114 = objc_msgSend(v113, sel_userInterfaceIdiom),
        v113,
        v114 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<AnyView, EmptyModifier>>();
    uint64_t v116 = objc_msgSend(objc_allocWithZone(v115), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v117 = *(void *)((*v72 & *v53) + 0x158);
    char v118 = *(void **)((char *)v53 + v117);
    *(void *)((char *)v53 + v117) = v116;
  }
  unint64_t v119 = *(char **)((char *)v53 + v76);
  uint64_t result = MEMORY[0x18C119DF0](&v119[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v120 = (void *)result;
  v121 = swift_getObjectType();
  swift_retain();
  uint64_t v122 = v119;

  if ((*(uint64_t (**)(void))(v121 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v123 = *(char **)((char *)v53 + *(void *)((*v72 & *v53) + 0x178));
  *(void *)&v123[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>();
  uint64_t v124 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v124);
  swift_retain();
  uint64_t v125 = v123;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v126 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v127 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
  swift_beginAccess();
  *(void *)(v126 + 24) = v127;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v128 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v129 = *(void *)((*v72 & *v53) + 0xD0);
  swift_beginAccess();
  *(void *)(v128 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v130 = *(void *)((char *)v53 + v129);
  uint64_t v131 = *(void *)(v130 + 48);
  if (v131)
  {
    BOOL v132 = v53;
    swift_retain();
    objc_msgSend(v132, sel_addGestureRecognizer_, v131);
  }
  else
  {
    id v133 = v53;
    swift_retain();
  }
  objc_msgSend(v53, sel_addGestureRecognizer_, *(void *)(v130 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  uint64_t v134 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v135 = static AccessibilityCore.UserSettings.didChangeNotifications;
  char v136 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v136)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v136; ++i)
    {
      uint64_t v138 = *(void *)(v135 + 8 * i + 32);
      objc_msgSend(v134, sel_addObserver_selector_name_object_, v53, sel_accessibilityBooleanDidChange_, v138, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v53, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v139 = one-time initialization token for didUpdateListLayout;
  uint64_t v140 = v53;
  if (v139 != -1) {
    swift_once();
  }
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v140, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v141 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v141, (uint64_t)v143);
  v143[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v143, (uint64_t)v140);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v140;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  Class v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t result;
  void *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Class v114;
  id v115;
  uint64_t v116;
  void *v117;
  char *v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unsigned char v141[16];
  objc_super v142;
  long long v143;
  uint64_t v144;
  ValueMetadata *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;

  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0x88)) = 0;
  uint64_t v5 = (char *)v1 + *(void *)((*v4 & *v1) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  uint64_t v6 = (char *)v1 + *(void *)((*v4 & *v1) + 0x98);
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  uint64_t v10 = v1;
  *(void *)((char *)v1 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 160) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for TooltipBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  *(void *)((char *)v10 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  *(void *)((char *)v10 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  *(void *)((char *)v10 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(void *)((char *)v10 + v30) = v31;
  uint64_t v32 = *(void *)((*v4 & *v10) + 0x168);
  type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  *(void *)((char *)v10 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v4 & *v10) + 0x178);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1A0)) = 0;
  BOOL v35 = (char *)v10 + *(void *)((*v4 & *v10) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1D8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x60)) = a1;
  uint64_t v39 = swift_retain();
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v143, v40);
  if ((v143 & 1) == 0)
  {
    if ((v143 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v143 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v143 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v143 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v143 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v143 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&objc_super v143 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v143 + 1) = v45;
  unint64_t v144 = v46;
  LOWORD(v145) = v47 & 0x101;
  BYTE2(v145) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v143) = 0;
  *(void *)&objc_super v143 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v144 = 0;
  objc_super v143 = 0uLL;
  LOBYTE(v145) = 0;
  uint64_t v146 = 0;
  v147 = v50;
  unint64_t v148 = v38;
  unint64_t v149 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for HoverEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&objc_super v143 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for KeyEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&objc_super v143 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
  v142.receiver = v10;
  v142.super_class = v53;
  char v54 = objc_msgSendSuper2(&v142, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v4 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v143 + 1);
          uint64_t v65 = v143;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    objc_super v143 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = *(void *)((*v4 & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v76 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  BOOL v77 = v76;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v78 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v80)
  {
    uint64_t v81 = v80;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = *(void (**)(uint64_t))((*v4 & *v82) + 0x1F0);
    uint64_t v85 = swift_retain();
    v84(v85);

    swift_release();
  }
  uint64_t v86 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0xF8));
  uint64_t v87 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  *(void *)(v86 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v86 + 40) = v87;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v88 = FocusBridge.host.getter();
  if (v88)
  {
    uint64_t v90 = (void *)v88;
    uint64_t v91 = v89;
    uint64_t v92 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v91 + 8) + 16))(v92);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v93 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x100));
  uint64_t v94 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v94);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  v96 = (void *)result;
  uint64_t v97 = swift_getObjectType();
  swift_retain();
  uint64_t v98 = v93;

  if ((*(uint64_t (**)(uint64_t))(v97 + 1208))(v99))
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  unsigned __int8 v100 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v101 = v100;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x148));
  uint64_t v107 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v107);
  if (!result) {
    goto LABEL_70;
  }
  id v108 = (void *)result;
  id v109 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v110 = objc_msgSend(v54, sel_traitCollection, 0);
  id v111 = objc_msgSend(v110, sel_userInterfaceIdiom);

  if (v111 == (id)1
    || (id v112 = objc_msgSend(v54, sel_traitCollection),
        id v113 = objc_msgSend(v112, sel_userInterfaceIdiom),
        v112,
        v113 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
    id v115 = objc_msgSend(objc_allocWithZone(v114), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v116 = *(void *)((*v4 & *v54) + 0x158);
    uint64_t v117 = *(void **)((char *)v54 + v116);
    *(void *)((char *)v54 + v116) = v115;
  }
  char v118 = *(char **)((char *)v54 + v75);
  uint64_t result = MEMORY[0x18C119DF0](&v118[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  unint64_t v119 = (void *)result;
  uint64_t v120 = swift_getObjectType();
  swift_retain();
  v121 = v118;

  if ((*(uint64_t (**)(void))(v120 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v122 = *(char **)((char *)v54 + *(void *)((*v4 & *v54) + 0x178));
  *(void *)&v122[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>();
  uint64_t v123 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v123);
  swift_retain();
  uint64_t v124 = v122;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v125 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v126 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  swift_beginAccess();
  *(void *)(v125 + 24) = v126;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)((*v4 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v127 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = *(void *)((char *)v54 + v128);
  uint64_t v130 = *(void *)(v129 + 48);
  if (v130)
  {
    uint64_t v131 = v54;
    swift_retain();
    objc_msgSend(v131, sel_addGestureRecognizer_, v130);
  }
  else
  {
    BOOL v132 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v129 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v133 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v134 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v135 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v135)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v135; ++i)
    {
      uint64_t v137 = *(void *)(v134 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v137, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v138 = one-time initialization token for didUpdateListLayout;
  uint64_t v139 = v54;
  if (v138 != -1) {
    swift_once();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v139, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v140 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v140, (uint64_t)v141);
  v141[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v141, (uint64_t)v139);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v139;
}

{
  void *v1;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  char v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  objc_class *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  long long v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char **v74;
  char *v75;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t result;
  void *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  void *v111;
  uint64_t v112;
  void *v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  Class v119;
  id v120;
  uint64_t v121;
  void *v122;
  char *v123;
  void *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t i;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t ObjectType;
  unsigned char v147[16];
  objc_super v148;
  long long v149;
  uint64_t v150;
  ValueMetadata *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char v155;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for DragAndDropBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for TooltipBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for EditMenuBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  uint64_t v25 = (void *)MEMORY[0x1E4FBC860];
  *(void *)(v24 + 24) = MEMORY[0x1E4FBC860];
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for PencilEventsBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v25);
  *(void *)((char *)v9 + v30) = v31;
  uint64_t v32 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for ContextMenuBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  BOOL v35 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v25);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  uint64_t v39 = (char *)v9 + *(void *)((*v3 & *v9) + 0x60);
  uint64_t v40 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)a1;
  *((_OWORD *)v39 + 1) = v40;
  uint64_t v41 = *(_OWORD *)(a1 + 32);
  uint64_t v42 = *(_OWORD *)(a1 + 48);
  uint64_t v43 = *(_OWORD *)(a1 + 64);
  *((void *)v39 + 10) = *(void *)(a1 + 80);
  *((_OWORD *)v39 + 3) = v42;
  *((_OWORD *)v39 + 4) = v43;
  *((_OWORD *)v39 + 2) = v41;
  uint64_t v44 = outlined retain of BoundInputsView(a1);
  uint64_t v45 = MEMORY[0x18C113CA0](v44);
  uint64_t v46 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v149, v45);
  if ((v149 & 1) == 0)
  {
    if ((v149 & 2) != 0)
    {
      __int16 v47 = 2;
      if ((v149 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      __int16 v47 = 0;
      if ((v149 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v149 & 2) == 0)
  {
    __int16 v47 = 1;
    if ((v149 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  __int16 v47 = 3;
  if ((v149 & 4) != 0) {
LABEL_7:
  }
    v47 |= 4uLL;
LABEL_8:
  if ((v149 & 0x10) != 0) {
    v47 |= 8uLL;
  }
  if ((v149 & 0x20) != 0) {
    v47 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v46)) {
    char v48 = v47;
  }
  else {
    char v48 = v47 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v48, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  unint64_t v49 = swift_retain_n();
  *(void *)&unint64_t v149 = specialized FocusViewGraph.init(graph:)(v49);
  *((void *)&v149 + 1) = v50;
  uint64_t v150 = v51;
  LOWORD(v151) = v52 & 0x101;
  BYTE2(v151) = v53 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v149) = 0;
  *(void *)&unint64_t v149 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<BoundInputsView>.EnableVFDFeature, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<BoundInputsView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  char v54 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v55 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v150 = 0;
  unint64_t v149 = 0uLL;
  LOBYTE(v151) = 0;
  uint64_t v152 = 0;
  uint64_t v153 = v55;
  uint64_t v154 = v38;
  v155 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v55);
  unint64_t v56 = specialized Dictionary.init(dictionaryLiteral:)(v54);
  char v151 = &type metadata for HoverEventDispatcher;
  uint64_t v152 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&unint64_t v149 = v56;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
  char v151 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v152 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
  char v151 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v152 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
  uint64_t v57 = specialized Dictionary.init(dictionaryLiteral:)(v54);
  char v151 = &type metadata for KeyEventDispatcher;
  uint64_t v152 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&unint64_t v149 = v57;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v148.receiver = v9;
  v148.super_class = v58;
  uint64_t v59 = objc_msgSendSuper2(&v148, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<BoundInputsView>.HostViewGraph, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<BoundInputsView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v60 = outlined destroy of _UIHostingView<BoundInputsView>.HostViewGraph((uint64_t)&v149);
  (*(void (**)(uint64_t))((*v3 & *v59) + 0x500))(v60);
  char v61 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v61 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v62 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v63 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v64 = xmmword_1EB2E8DA0;
    uint64_t v65 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      unint64_t v66 = swift_retain();
      outlined copy of RepresentableContextValues?(v66, v63, v64, *((uint64_t *)&v64 + 1), v65);
      uint64_t v67 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v67 && (swift_release(), v62 == v67))
      {
        uint64_t v68 = swift_release();
        if (v65) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v68 = swift_release();
        if (v65)
        {
LABEL_25:
          MEMORY[0x1F4188790](v68);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v64, *((uint64_t *)&v64 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v62, v63, v64, *((uint64_t *)&v64 + 1), v65);
          uint64_t v69 = *((void *)&v149 + 1);
          unint64_t v70 = v149;
LABEL_32:
          int64_t v71 = *(void *)((char *)v59 + *(void *)((*v3 & *v59) + 0x68));
          Swift::Int v72 = *(void *)(v71 + 120);
          *(void *)(v71 + 120) = v70;
          *(void *)(v71 + 128) = v69;
          outlined consume of EnvironmentValues?(v72);
          outlined consume of RepresentableContextValues?(v62, v63, v64, *((uint64_t *)&v64 + 1), v65);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v68 = outlined copy of RepresentableContextValues.EnvironmentStorage(v64, *((uint64_t *)&v64 + 1), v65 & 1);
      if (v65) {
        goto LABEL_25;
      }
    }
    unint64_t v149 = v64;
    swift_retain();
    swift_retain();
    uint64_t v69 = *((void *)&v64 + 1);
    unint64_t v70 = v64;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  unint64_t v73 = *(void *)((char *)v59 + *(void *)((*v3 & *v59) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v74 = (char **)(v73 + 24);
  swift_beginAccess();
  unint64_t v75 = *(char **)(v73 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v73 + 24) = v75;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v75 + 2) + 1, 1, v75);
    *unint64_t v74 = v75;
  }
  id v78 = *((void *)v75 + 2);
  BOOL v77 = *((void *)v75 + 3);
  if (v78 >= v77 >> 1)
  {
    unint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 1, 1, v75);
    *unint64_t v74 = v75;
  }
  *((void *)v75 + 2) = v78 + 1;
  char v79 = &v75[24 * v78];
  *((void *)v79 + 4) = &type metadata for StatusBarKey;
  *((void *)v79 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v79 + 12) = -1;
  swift_release();
  swift_release();
  id v80 = *(void *)((*v3 & *v59) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v81 = *(void **)((char *)v59 + *(void *)((*v3 & *v59) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v82 = v81;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v83 = *(void **)((char *)v59 + *(void *)((*v3 & *v59) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v84 = v83;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v85)
  {
    uint64_t v86 = v85;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v87 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = *(void (**)(uint64_t))((*v3 & *v87) + 0x1F0);
    uint64_t v90 = swift_retain();
    v89(v90);

    swift_release();
  }
  uint64_t v91 = *(void *)((char *)v59 + *(void *)((*v3 & *v59) + 0xF8));
  uint64_t v92 = lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>();
  *(void *)(v91 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v91 + 40) = v92;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v93 = FocusBridge.host.getter();
  if (v93)
  {
    uint64_t v95 = (void *)v93;
    v96 = v94;
    uint64_t v97 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v96 + 8) + 16))(v97);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v98 = *(void **)((char *)v59 + *(void *)((*v3 & *v59) + 0x100));
  id v99 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v99);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  id v101 = (void *)result;
  uint64_t v102 = swift_getObjectType();
  swift_retain();
  id v103 = v98;

  if ((*(uint64_t (**)(uint64_t))(v102 + 1208))(v104))
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v105 = *(void **)((char *)v59 + *(void *)((*v3 & *v59) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v106 = v105;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v107 = *(void **)((char *)v59 + *(void *)((*v3 & *v59) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v108 = v107;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v109 = *(void **)((char *)v59 + *(void *)((*v3 & *v59) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v110 = v109;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v111 = *(void **)((char *)v59 + *(void *)((*v3 & *v59) + 0x148));
  id v112 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v112);
  if (!result) {
    goto LABEL_70;
  }
  id v113 = (void *)result;
  Class v114 = v111;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v115 = objc_msgSend(v59, sel_traitCollection, 0);
  uint64_t v116 = objc_msgSend(v115, sel_userInterfaceIdiom);

  if (v116 == (id)1
    || (uint64_t v117 = objc_msgSend(v59, sel_traitCollection),
        char v118 = objc_msgSend(v117, sel_userInterfaceIdiom),
        v117,
        v118 == (id)6))
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for PointerBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    uint64_t v120 = objc_msgSend(objc_allocWithZone(v119), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v121 = *(void *)((*v3 & *v59) + 0x158);
    uint64_t v122 = *(void **)((char *)v59 + v121);
    *(void *)((char *)v59 + v121) = v120;
  }
  uint64_t v123 = *(char **)((char *)v59 + v80);
  uint64_t result = MEMORY[0x18C119DF0](&v123[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v124 = (void *)result;
  uint64_t v125 = swift_getObjectType();
  swift_retain();
  uint64_t v126 = v123;

  if ((*(uint64_t (**)(void))(v125 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v127 = *(char **)((char *)v59 + *(void *)((*v3 & *v59) + 0x178));
  *(void *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>();
  uint64_t v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v128);
  swift_retain();
  uint64_t v129 = v127;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v130 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v131 = lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v130 + 24) = v131;
  swift_unknownObjectWeakAssign();
  swift_release();
  BOOL v132 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  id v133 = *(void *)((*v3 & *v59) + 0xD0);
  swift_beginAccess();
  *(void *)(v132 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v134 = *(void *)((char *)v59 + v133);
  uint64_t v135 = *(void *)(v134 + 48);
  if (v135)
  {
    char v136 = v59;
    swift_retain();
    objc_msgSend(v136, sel_addGestureRecognizer_, v135);
  }
  else
  {
    uint64_t v137 = v59;
    swift_retain();
  }
  objc_msgSend(v59, sel_addGestureRecognizer_, *(void *)(v134 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  uint64_t v138 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v139 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v140 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v140)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v140; ++i)
    {
      v142 = *(void *)(v139 + 8 * i + 32);
      objc_msgSend(v138, sel_addObserver_selector_name_object_, v59, sel_accessibilityBooleanDidChange_, v142, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v59, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  objc_super v143 = one-time initialization token for didUpdateListLayout;
  unint64_t v144 = v59;
  if (v143 != -1) {
    swift_once();
  }
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v144, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v145 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v145, (uint64_t)v147);
  v147[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v147, (uint64_t)v144);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v144;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t result;
  void *v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  Class v116;
  id v117;
  uint64_t v118;
  void *v119;
  char *v120;
  void *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t i;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  unsigned char v144[16];
  objc_super v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  ValueMetadata *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  unint64_t v4 = (char *)v1 + *(void *)((*v3 & *v1) + 0x90);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  uint64_t v5 = (char *)v1 + *(void *)((*v3 & *v1) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xD8)) = 2;
  uint64_t v6 = *(void *)((*v3 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>();
  Class v8 = objc_allocWithZone(v7);
  id v9 = v1;
  *(void *)((char *)v1 + v6) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>);
  uint64_t v10 = *(void *)((*v3 & *v9) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>();
  Class v12 = objc_allocWithZone(v11);
  *(void *)((char *)v9 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0xF0)) = 1;
  id v13 = *(void *)((*v3 & *v9) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v9 + v13) = v14;
  unint64_t v17 = *(void *)((*v3 & *v9) + 0x100);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for DragAndDropBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v9 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x108)) = 0;
  Class v19 = *(void *)((*v3 & *v9) + 0x110);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for TooltipBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v9 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  Class v21 = *(void *)((*v3 & *v9) + 0x118);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for EditMenuBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v9 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x120)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x128)) = 0;
  Class v23 = *(void *)((*v3 & *v9) + 0x130);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(void *)(v24 + 24) = v15;
  *(void *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + v23) = v24;
  swift_weakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x140)) = 0;
  uint64_t v25 = *(void *)((*v3 & *v9) + 0x148);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v9 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  Class v27 = *(void *)((*v3 & *v9) + 0x150);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PencilEventsBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v9 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x158)) = 0;
  Class v29 = *(void *)((*v3 & *v9) + 0x160);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(void *)((char *)v9 + v29) = v30;
  uint64_t v31 = v3;
  uint64_t v32 = *(void *)((*v3 & *v9) + 0x168);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for ContextMenuBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v9 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v3 & *v9) + 0x178);
  *(void *)((char *)v9 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x180)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x188)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x190)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1A0)) = 0;
  BOOL v35 = (char *)v9 + *(void *)((*v3 & *v9) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1B8)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1C0)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1C8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x1D0)) = 0;
  *((unsigned char *)v9 + *(void *)((*v3 & *v9) + 0x1D8)) = 0;
  *(void *)((char *)v9 + *(void *)((*v3 & *v9) + 0x60)) = a1;
  uint64_t v39 = swift_bridgeObjectRetain();
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(ObjectType + 1192))(&v146, v40);
  if ((v146 & 1) == 0)
  {
    if ((v146 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v146 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v146 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v146 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v146 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v146 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v146 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v146 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v9 + *(void *)((*v31 & *v9) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  uint64_t v146 = specialized FocusViewGraph.init(graph:)(v44);
  v147 = v45;
  unint64_t v148 = v46;
  LOWORD(v149) = v47 & 0x101;
  BYTE2(v149) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  LOWORD(v147) = 0;
  uint64_t v146 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v147 = 0;
  unint64_t v148 = 0;
  uint64_t v146 = 0;
  LOBYTE(v149) = 0;
  uint64_t v150 = 0;
  char v151 = v50;
  uint64_t v152 = v38;
  uint64_t v153 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  unint64_t v149 = &type metadata for HoverEventDispatcher;
  uint64_t v150 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  uint64_t v146 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  unint64_t v149 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v150 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  unint64_t v149 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v150 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  unint64_t v149 = &type metadata for KeyEventDispatcher;
  uint64_t v150 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  uint64_t v146 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v9 + *(void *)((*v31 & *v9) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v145.receiver = v9;
  v145.super_class = v53;
  char v54 = objc_msgSendSuper2(&v145, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<InputAccessoryBar>.HostViewGraph((uint64_t)&v146);
  (*(void (**)(uint64_t))((*v31 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = qword_1EB2E8DA0;
    uint64_t v60 = qword_1EB2E8DA8;
    char v61 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v62 = swift_retain();
      outlined copy of RepresentableContextValues?(v62, v58, v59, v60, v61);
      uint64_t v63 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v63 && (swift_release(), v57 == v63))
      {
        uint64_t v64 = swift_release();
        if (v61) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v64 = swift_release();
        if (v61)
        {
LABEL_25:
          MEMORY[0x1F4188790](v64);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
          unint64_t v66 = v146;
          uint64_t v65 = v147;
LABEL_32:
          uint64_t v67 = *(void *)((char *)v54 + *(void *)((*v31 & *v54) + 0x68));
          uint64_t v68 = *(void *)(v67 + 120);
          *(void *)(v67 + 120) = v66;
          *(void *)(v67 + 128) = v65;
          outlined consume of EnvironmentValues?(v68);
          outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, v61 & 1);
      if (v61) {
        goto LABEL_25;
      }
    }
    uint64_t v146 = v59;
    v147 = v60;
    swift_retain();
    swift_retain();
    uint64_t v65 = v60;
    unint64_t v66 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v69 = *(void *)((char *)v54 + *(void *)((*v31 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v70 = (char **)(v69 + 24);
  swift_beginAccess();
  int64_t v71 = *(char **)(v69 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v69 + 24) = v71;
  unint64_t v73 = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v71 + 2) + 1, 1, v71);
    *unint64_t v70 = v71;
  }
  unint64_t v75 = *((void *)v71 + 2);
  unint64_t v74 = *((void *)v71 + 3);
  if (v75 >= v74 >> 1)
  {
    int64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v71);
    *unint64_t v70 = v71;
  }
  *((void *)v71 + 2) = v75 + 1;
  uint64_t v76 = &v71[24 * v75];
  *((void *)v76 + 4) = &type metadata for StatusBarKey;
  *((void *)v76 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v76 + 12) = -1;
  swift_release();
  swift_release();
  BOOL v77 = *(void *)((*v73 & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  id v78 = *(void **)((char *)v54 + *(void *)((*v73 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = *(void **)((char *)v54 + *(void *)((*v73 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v81 = v80;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    uint64_t v83 = v82;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    uint64_t v85 = v84;
    uint64_t v86 = *(void (**)(uint64_t))((*v73 & *v84) + 0x1F0);
    uint64_t v87 = swift_retain();
    v86(v87);

    swift_release();
  }
  uint64_t v88 = *(void *)((char *)v54 + *(void *)((*v73 & *v54) + 0xF8));
  uint64_t v89 = lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>();
  *(void *)(v88 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v88 + 40) = v89;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v90 = FocusBridge.host.getter();
  if (v90)
  {
    uint64_t v92 = (void *)v90;
    uint64_t v93 = v91;
    uint64_t v94 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v93 + 8) + 16))(v94);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v95 = *(void **)((char *)v54 + *(void *)((*v73 & *v54) + 0x100));
  v96 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v96);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v98 = (void *)result;
  id v99 = swift_getObjectType();
  swift_retain();
  unsigned __int8 v100 = v95;

  if ((*(uint64_t (**)(uint64_t))(v99 + 1208))(v101))
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v73 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v73 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v73 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v107 = v106;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v108 = *(void **)((char *)v54 + *(void *)((*v73 & *v54) + 0x148));
  id v109 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v109);
  if (!result) {
    goto LABEL_70;
  }
  id v110 = (void *)result;
  id v111 = v108;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v112 = objc_msgSend(v54, sel_traitCollection, 0);
  id v113 = objc_msgSend(v112, sel_userInterfaceIdiom);

  if (v113 == (id)1
    || (Class v114 = objc_msgSend(v54, sel_traitCollection),
        id v115 = objc_msgSend(v114, sel_userInterfaceIdiom),
        v114,
        v115 == (id)6))
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PointerBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    uint64_t v117 = objc_msgSend(objc_allocWithZone(v116), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    char v118 = *(void *)((*v73 & *v54) + 0x158);
    unint64_t v119 = *(void **)((char *)v54 + v118);
    *(void *)((char *)v54 + v118) = v117;
  }
  uint64_t v120 = *(char **)((char *)v54 + v77);
  uint64_t result = MEMORY[0x18C119DF0](&v120[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  v121 = (void *)result;
  uint64_t v122 = swift_getObjectType();
  swift_retain();
  uint64_t v123 = v120;

  if ((*(uint64_t (**)(void))(v122 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v124 = *(char **)((char *)v54 + *(void *)((*v73 & *v54) + 0x178));
  *(void *)&v124[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>();
  uint64_t v125 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v125);
  swift_retain();
  uint64_t v126 = v124;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v127 + 24) = v128;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v130 = *(void *)((*v73 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v129 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v131 = *(void *)((char *)v54 + v130);
  BOOL v132 = *(void *)(v131 + 48);
  if (v132)
  {
    id v133 = v54;
    swift_retain();
    objc_msgSend(v133, sel_addGestureRecognizer_, v132);
  }
  else
  {
    uint64_t v134 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v131 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  uint64_t v135 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  char v136 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v137 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v137)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v137; ++i)
    {
      uint64_t v139 = *(void *)(v136 + 8 * i + 32);
      objc_msgSend(v135, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v139, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v140 = one-time initialization token for didUpdateListLayout;
  uint64_t v141 = v54;
  if (v140 != -1) {
    swift_once();
  }
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v141, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  v142 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v142, (uint64_t)v144);
  v144[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v144, (uint64_t)v141);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v141;
}

{
  void *v1;
  uint64_t ObjectType;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  Class v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t result;
  void *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  Class v114;
  id v115;
  uint64_t v116;
  void *v117;
  char *v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unsigned char v141[16];
  objc_super v142;
  long long v143;
  uint64_t v144;
  ValueMetadata *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;

  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0x88)) = 0;
  uint64_t v5 = (char *)v1 + *(void *)((*v4 & *v1) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  uint64_t v6 = (char *)v1 + *(void *)((*v4 & *v1) + 0x98);
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  uint64_t v10 = v1;
  *(void *)((char *)v1 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 160) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for DragAndDropBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for TooltipBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  *(void *)((char *)v10 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for EditMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  *(void *)((char *)v10 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for PencilEventsBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  *(void *)((char *)v10 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(void *)((char *)v10 + v30) = v31;
  uint64_t v32 = *(void *)((*v4 & *v10) + 0x168);
  type metadata accessor for ContextMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  *(void *)((char *)v10 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v4 & *v10) + 0x178);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1A0)) = 0;
  BOOL v35 = (char *)v10 + *(void *)((*v4 & *v10) + 0x1A8);
  *(void *)BOOL v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  uint64_t v36 = (void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *uint64_t v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1D8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x60)) = a1;
  uint64_t v39 = swift_retain();
  uint64_t v40 = MEMORY[0x18C113CA0](v39);
  uint64_t v41 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v143, v40);
  if ((v143 & 1) == 0)
  {
    if ((v143 & 2) != 0)
    {
      uint64_t v42 = 2;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if ((v143 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v143 & 2) == 0)
  {
    uint64_t v42 = 1;
    if ((v143 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v42 = 3;
  if ((v143 & 4) != 0) {
LABEL_7:
  }
    v42 |= 4uLL;
LABEL_8:
  if ((v143 & 0x10) != 0) {
    v42 |= 8uLL;
  }
  if ((v143 & 0x20) != 0) {
    v42 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v41)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v42 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v44 = swift_retain_n();
  *(void *)&objc_super v143 = specialized FocusViewGraph.init(graph:)(v44);
  *((void *)&v143 + 1) = v45;
  unint64_t v144 = v46;
  LOWORD(v145) = v47 & 0x101;
  BYTE2(v145) = v48 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v143) = 0;
  *(void *)&objc_super v143 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v144 = 0;
  objc_super v143 = 0uLL;
  LOBYTE(v145) = 0;
  uint64_t v146 = 0;
  v147 = v50;
  unint64_t v148 = v38;
  unint64_t v149 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v50);
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for HoverEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&objc_super v143 = v51;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilDoubleTapEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  uint64_t v145 = &type metadata for PencilSqueezeEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v49);
  uint64_t v145 = &type metadata for KeyEventDispatcher;
  uint64_t v146 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&objc_super v143 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
  v142.receiver = v10;
  v142.super_class = v53;
  char v54 = objc_msgSendSuper2(&v142, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v55 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v143, (uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v4 & *v54) + 0x500))(v55);
  unint64_t v56 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v56 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v57 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v58 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v59 = xmmword_1EB2E8DA0;
    uint64_t v60 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      char v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v58, v59, *((uint64_t *)&v59 + 1), v60);
      uint64_t v62 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v62 && (swift_release(), v57 == v62))
      {
        uint64_t v63 = swift_release();
        if (v60) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v63 = swift_release();
        if (v60)
        {
LABEL_25:
          MEMORY[0x1F4188790](v63);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          uint64_t v64 = *((void *)&v143 + 1);
          uint64_t v65 = v143;
LABEL_32:
          unint64_t v66 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x68));
          uint64_t v67 = *(void *)(v66 + 120);
          *(void *)(v66 + 120) = v65;
          *(void *)(v66 + 128) = v64;
          outlined consume of EnvironmentValues?(v67);
          outlined consume of RepresentableContextValues?(v57, v58, v59, *((uint64_t *)&v59 + 1), v60);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, *((uint64_t *)&v59 + 1), v60 & 1);
      if (v60) {
        goto LABEL_25;
      }
    }
    objc_super v143 = v59;
    swift_retain();
    swift_retain();
    uint64_t v64 = *((void *)&v59 + 1);
    uint64_t v65 = v59;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v69 = (char **)(v68 + 24);
  swift_beginAccess();
  unint64_t v70 = *(char **)(v68 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  unint64_t v73 = *((void *)v70 + 2);
  Swift::Int v72 = *((void *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *uint64_t v69 = v70;
  }
  *((void *)v70 + 2) = v73 + 1;
  unint64_t v74 = &v70[24 * v73];
  *((void *)v74 + 4) = &type metadata for StatusBarKey;
  *((void *)v74 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v74 + 12) = -1;
  swift_release();
  swift_release();
  unint64_t v75 = *(void *)((*v4 & *v54) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v76 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  BOOL v77 = v76;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v78 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  char v79 = v78;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v80 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v80)
  {
    uint64_t v81 = v80;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = *(void (**)(uint64_t))((*v4 & *v82) + 0x1F0);
    uint64_t v85 = swift_retain();
    v84(v85);

    swift_release();
  }
  uint64_t v86 = *(void *)((char *)v54 + *(void *)((*v4 & *v54) + 0xF8));
  uint64_t v87 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  *(void *)(v86 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v86 + 40) = v87;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v88 = FocusBridge.host.getter();
  if (v88)
  {
    uint64_t v90 = (void *)v88;
    uint64_t v91 = v89;
    uint64_t v92 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v91 + 8) + 16))(v92);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v93 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x100));
  uint64_t v94 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v94);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  v96 = (void *)result;
  uint64_t v97 = swift_getObjectType();
  swift_retain();
  uint64_t v98 = v93;

  if ((*(uint64_t (**)(uint64_t))(v97 + 1208))(v99))
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  unsigned __int8 v100 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v101 = v100;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v102 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v103 = v102;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v104 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v54 + *(void *)((*v4 & *v54) + 0x148));
  uint64_t v107 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v107);
  if (!result) {
    goto LABEL_70;
  }
  id v108 = (void *)result;
  id v109 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v110 = objc_msgSend(v54, sel_traitCollection, 0);
  id v111 = objc_msgSend(v110, sel_userInterfaceIdiom);

  if (v111 == (id)1
    || (id v112 = objc_msgSend(v54, sel_traitCollection),
        id v113 = objc_msgSend(v112, sel_userInterfaceIdiom),
        v112,
        v113 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
    id v115 = objc_msgSend(objc_allocWithZone(v114), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v116 = *(void *)((*v4 & *v54) + 0x158);
    uint64_t v117 = *(void **)((char *)v54 + v116);
    *(void *)((char *)v54 + v116) = v115;
  }
  char v118 = *(char **)((char *)v54 + v75);
  uint64_t result = MEMORY[0x18C119DF0](&v118[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  unint64_t v119 = (void *)result;
  uint64_t v120 = swift_getObjectType();
  swift_retain();
  v121 = v118;

  if ((*(uint64_t (**)(void))(v120 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v122 = *(char **)((char *)v54 + *(void *)((*v4 & *v54) + 0x178));
  *(void *)&v122[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>();
  uint64_t v123 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v123);
  swift_retain();
  uint64_t v124 = v122;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v125 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v126 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  swift_beginAccess();
  *(void *)(v125 + 24) = v126;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v127 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v128 = *(void *)((*v4 & *v54) + 0xD0);
  swift_beginAccess();
  *(void *)(v127 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v129 = *(void *)((char *)v54 + v128);
  uint64_t v130 = *(void *)(v129 + 48);
  if (v130)
  {
    uint64_t v131 = v54;
    swift_retain();
    objc_msgSend(v131, sel_addGestureRecognizer_, v130);
  }
  else
  {
    BOOL v132 = v54;
    swift_retain();
  }
  objc_msgSend(v54, sel_addGestureRecognizer_, *(void *)(v129 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v133 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v134 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v135 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v135)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v135; ++i)
    {
      uint64_t v137 = *(void *)(v134 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityBooleanDidChange_, v137, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v54, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v138 = one-time initialization token for didUpdateListLayout;
  uint64_t v139 = v54;
  if (v138 != -1) {
    swift_once();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v139, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v140 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v140, (uint64_t)v141);
  v141[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v141, (uint64_t)v139);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v139;
}

void *specialized _UIHostingView.base.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68));
  uint64_t v4 = MEMORY[0x18C119DF0](v3 + 2);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    swift_retain();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    swift_retain();
  }
  if (MEMORY[0x18C119DF0](v3 + 3))
  {
    swift_unknownObjectRelease();
  }
  else
  {
    v3[4] = a1();
    swift_unknownObjectWeakAssign();
  }
  if (MEMORY[0x18C119DF0](v3 + 5))
  {
    swift_unknownObjectRelease();
  }
  else
  {
    v3[6] = &protocol witness table for _UIHostingView<A>;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v6 = v3[9];
  swift_beginAccess();
  if (MEMORY[0x18C119DF0](v6 + 40))
  {
    swift_unknownObjectRelease();
  }
  else
  {
    a1();
    swift_retain();
    uint64_t v7 = v1;
    DisplayList.ViewRenderer.host.setter();
    swift_release();
  }
  return v3;
}

uint64_t CollectionViewListDataSource.configureCell(_:transaction:context:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v32 = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for _RowVisitationContext();
  double v10 = MEMORY[0x1F4188790](v9);
  Class v12 = (char *)&v28 - v11;
  uint64_t v34 = v14;
  uint64_t v35 = v13;
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v28 - v11, a3, v10);
  uint64_t v15 = *((void *)v12 + 9);
  uint64_t v16 = *((unsigned int *)v12 + 16);
  uint64_t v17 = *((unsigned int *)v12 + 17);
  unsigned __int8 v39 = 0;
  uint64_t v18 = *((void *)v12 + 13);
  v38[2] = v18;
  uint64_t v19 = v5 + *(int *)(a4 + 52);
  if (*(unsigned char *)(v19 + 8)) {
    double v20 = 44.0;
  }
  else {
    double v20 = *(double *)v19;
  }
  v40[0] = v16;
  v40[1] = v17;
  uint64_t v41 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  v38[0] = v36[0];
  v38[1] = v36[1];
  CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)(&v39, v38, 0, 0, (uint64_t)v40, v20);
  Class v21 = (uint64_t *)(a1 + direct field offset for ListCollectionViewCellBase.viewListID);
  *Class v21 = v16 | (v17 << 32);
  v21[1] = v15;
  swift_bridgeObjectRelease();
  v36[0] = v18;
  LOBYTE(v38[0]) = 0;
  unint64_t v29 = ViewTraitCollection.listItemBackground(kind:)((unsigned __int8 *)v38);
  uint64_t v33 = a4;
  uint64_t v22 = *(int *)(a4 + 44);
  uint64_t v31 = v5;
  if (*(void *)(v5 + v22 + 8))
  {
    Class v23 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40930];
    type metadata accessor for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    v12[*(int *)(v35 + 52)] = v36[0];
    type metadata accessor for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey, v23);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    uint64_t v24 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40930];
    type metadata accessor for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    v12[*(int *)(v35 + 52)] = v36[0];
    type metadata accessor for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey, v24);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v25 = v35;
  v12[*(int *)(v35 + 56)] = v36[0];
  v12[*(int *)(v25 + 48)] = *(unsigned char *)(v31 + *(int *)(v33 + 48));
  ListCollectionViewCellBase.configureAccessories<A>(context:)((uint64_t)v12);
  outlined init with copy of _ViewList_View((uint64_t)(v12 + 16), (uint64_t)v36);
  outlined init with copy of CollectionViewCellModifier((uint64_t)v40, (uint64_t)&v37);
  uint64_t v26 = v32;
  specialized ListCollectionViewCellBase.configureContent(_:transaction:)((uint64_t)v36, v32);
  outlined destroy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>((uint64_t)v36);
  swift_bridgeObjectRetain();
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v29, v26);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionViewCellModifier((uint64_t)v40);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v25);
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(uint64_t a1)
{
  type metadata accessor for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>(0, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ListCollectionViewCellBase.configureAccessories<A>(context:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UICellAccessory.ReorderOptions();
  uint64_t v97 = *(void *)(v2 - 8);
  uint64_t v98 = v2;
  MEMORY[0x1F4188790](v2);
  v96 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UICellAccessory.DeleteOptions();
  uint64_t v105 = *(void *)(v4 - 8);
  uint64_t v106 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v104 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIListContentConfiguration?(0, &lazy cache variable for type metadata for UICellAccessory.LayoutDimension?, MEMORY[0x1E4FB0E38], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  id v113 = (char *)&v90 - v7;
  uint64_t v93 = type metadata accessor for UICellAccessory.MultiselectOptions();
  uint64_t v92 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  uint64_t v91 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v114 = v9;
  uint64_t v115 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v95 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v94 = (char *)&v90 - v13;
  MEMORY[0x1F4188790](v14);
  id v101 = (char *)&v90 - v15;
  MEMORY[0x1F4188790](v16);
  id v103 = (char *)&v90 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v102 = (char *)&v90 - v19;
  MEMORY[0x1F4188790](v20);
  id v108 = (char *)&v90 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v90 = (char *)&v90 - v23;
  uint64_t v24 = type metadata accessor for UICellAccessory();
  uint64_t v111 = *(void *)(v24 - 8);
  uint64_t v112 = v24;
  MEMORY[0x1F4188790](v24);
  unsigned __int8 v100 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v107 = (char *)&v90 - v27;
  MEMORY[0x1F4188790](v28);
  id v99 = (char *)&v90 - v29;
  uint64_t v30 = (int *)type metadata accessor for _RowVisitationContext();
  uint64_t v31 = *((void *)v30 - 1);
  MEMORY[0x1F4188790](v30);
  id v109 = (char *)&v90 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v90 - v34;
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v90 - v37;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = type metadata accessor for Optional();
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v43 = (char *)&v90 - v42;
  _RowVisitationContext.selectionValue(respectSelectionDisabled:)(1, (uint64_t)v30, (uint64_t)&v90 - v42);
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48);
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v46 = v31;
  int v47 = v44(v43, 1, v45);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
  char v48 = *(void (**)(char *, uint64_t, int *))(v31 + 16);
  uint64_t v49 = a1;
  v48(v38, a1, v30);
  uint64_t v110 = v46;
  if (v47 == 1)
  {
    unint64_t v50 = *(void (**)(char *, int *))(v46 + 8);
    v50(v38, v30);
LABEL_7:
    unint64_t v56 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v59 = a1;
    uint64_t v60 = v109;
    goto LABEL_8;
  }
  char v51 = v38[v30[12]];
  unint64_t v50 = *(void (**)(char *, int *))(v46 + 8);
  v50(v38, v30);
  if ((v51 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v52 = v114;
  unint64_t v53 = v90;
  (*(void (**)(char *, void, uint64_t))(v115 + 104))(v90, *MEMORY[0x1E4FB0E08], v114);
  uint64_t v54 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v113, 1, 1, v54);
  uint64_t v55 = v91;
  UICellAccessory.MultiselectOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)();
  static UICellAccessory.multiselect(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v55, v93);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v53, v52);
  unint64_t v56 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v58 = v56[2];
  unint64_t v57 = v56[3];
  uint64_t v59 = v49;
  if (v58 >= v57 >> 1) {
    unint64_t v56 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1, v56);
  }
  uint64_t v60 = v109;
  v56[2] = v58 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v111 + 32))((unint64_t)v56+ ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))+ *(void *)(v111 + 72) * v58, v99, v112);
LABEL_8:
  BOOL v61 = _RowVisitationContext.canDelete.getter((uint64_t)v30);
  v48(v35, v59, v30);
  uint64_t v62 = v115;
  if (v61)
  {
    v50(v35, v30);
    goto LABEL_12;
  }
  int v63 = v35[v30[13]];
  v48(v60, (uint64_t)v35, v30);
  if (!v63)
  {
    v50(v60, v30);
    v50(v35, v30);
    goto LABEL_15;
  }
  char v64 = _RowVisitationContext.hasSwipeActions.getter();
  v50(v60, v30);
  v50(v35, v30);
  if ((v64 & 1) == 0)
  {
LABEL_15:
    uint64_t v66 = v114;
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v65 = (unsigned int *)MEMORY[0x1E4FB0E10];
  uint64_t v66 = v114;
  uint64_t v68 = v107;
  uint64_t v67 = v108;
  switch(*(unsigned char *)(v59 + v30[13]))
  {
    case 2:
      goto LABEL_17;
    case 3:
      uint64_t v65 = (unsigned int *)MEMORY[0x1E4FB0E18];
      goto LABEL_17;
    case 4:
      break;
    default:
      uint64_t v65 = (unsigned int *)MEMORY[0x1E4FB0E08];
LABEL_17:
      uint64_t v69 = v103;
      (*(void (**)(char *, void, uint64_t))(v62 + 104))(v103, *v65, v114);
      unint64_t v70 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
      int64_t v71 = v68;
      Swift::Int v72 = v102;
      v70(v102, v69, v66);
      unint64_t v73 = v72;
      unint64_t v74 = v71;
      v70(v67, v73, v66);
      uint64_t v75 = type metadata accessor for UICellAccessory.LayoutDimension();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v113, 1, 1, v75);
      uint64_t v76 = v104;
      UICellAccessory.DeleteOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)();
      static UICellAccessory.delete(displayed:options:actionHandler:)();
      (*(void (**)(char *, uint64_t))(v105 + 8))(v76, v106);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v56 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
      }
      unint64_t v78 = v56[2];
      unint64_t v77 = v56[3];
      uint64_t v62 = v115;
      if (v78 >= v77 >> 1) {
        unint64_t v56 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v56);
      }
      v56[2] = v78 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v111 + 32))((unint64_t)v56+ ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))+ *(void *)(v111 + 72) * v78, v74, v112);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v66);
      break;
  }
LABEL_22:
  if (_RowVisitationContext.canMove.getter())
  {
    char v79 = (unsigned int *)MEMORY[0x1E4FB0E10];
    uint64_t v81 = v100;
    id v80 = v101;
    switch(*(unsigned char *)(v59 + v30[14]))
    {
      case 2:
        goto LABEL_26;
      case 3:
        char v79 = (unsigned int *)MEMORY[0x1E4FB0E18];
        goto LABEL_26;
      case 4:
        return UICollectionViewListCell.accessories.setter();
      default:
        char v79 = (unsigned int *)MEMORY[0x1E4FB0E08];
LABEL_26:
        uint64_t v82 = v95;
        (*(void (**)(char *, void, uint64_t))(v62 + 104))(v95, *v79, v66);
        uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
        uint64_t v84 = v94;
        v83(v94, v82, v66);
        v83(v80, v84, v66);
        uint64_t v85 = type metadata accessor for UICellAccessory.LayoutDimension();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v113, 1, 1, v85);
        uint64_t v86 = v96;
        UICellAccessory.ReorderOptions.init(isHidden:reservedLayoutWidth:tintColor:showsVerticalSeparator:)();
        static UICellAccessory.reorder(displayed:options:)();
        (*(void (**)(char *, uint64_t))(v97 + 8))(v86, v98);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v56 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
        }
        unint64_t v88 = v56[2];
        unint64_t v87 = v56[3];
        if (v88 >= v87 >> 1) {
          unint64_t v56 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1, v56);
        }
        v56[2] = v88 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v111 + 32))((unint64_t)v56+ ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))+ *(void *)(v111 + 72) * v88, v81, v112);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v80, v66);
        break;
    }
  }
  return UICollectionViewListCell.accessories.setter();
}

uint64_t initializeWithCopy for _RowVisitationContext(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v6 + v10 + a1) & ~v10, (v6 + v10 + a2) & ~v10, v7);
  uint64_t v11 = *(void *)(v9 + 48);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 16;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = ((v6 + v10) & ~v10) + v11 + v15;
  uint64_t v17 = (v16 + a1) & ~v15;
  uint64_t v18 = (v16 + a2) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v17, v18, v12);
  uint64_t v19 = *(void *)(v14 + 48) + 7;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (char *)(((unint64_t)v20 + v24 + 8) & ~v24);
  uint64_t v26 = (char *)(((unint64_t)v21 + v24 + 8) & ~v24);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain();
  if (v27(v26, 1, v22))
  {
    int v28 = *(_DWORD *)(v23 + 84);
    size_t v29 = *(void *)(v23 + 64);
    if (v28) {
      size_t v30 = v29;
    }
    else {
      size_t v30 = v29 + 1;
    }
    memcpy(v25, v26, v30);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v25, v26, v22);
    uint64_t v32 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
    uint64_t v31 = v23 + 56;
    v32(v25, 0, 1, v22);
    int v28 = *(_DWORD *)(v31 + 28);
    size_t v29 = *(void *)(v31 + 8);
  }
  if (v28) {
    size_t v33 = v29;
  }
  else {
    size_t v33 = v29 + 1;
  }
  uint64_t v34 = &v25[v33];
  uint64_t v35 = &v26[v33];
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  v34[2] = v35[2];
  return a1;
}

void type metadata accessor for UIListContentConfiguration?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X2>, char a3@<W3>, char a4@<W4>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v10 = *a1;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  *(void *)a5 = swift_getKeyPath();
  *(unsigned char *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = swift_getKeyPath();
  *(unsigned char *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = swift_getKeyPath();
  *(_WORD *)(a5 + 40) = 0;
  *(void *)(a5 + 48) = swift_getKeyPath();
  *(void *)(a5 + 56) = 0;
  *(void *)(a5 + 64) = 0;
  *(void *)(a5 + 72) = 0;
  *(unsigned char *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = swift_getKeyPath();
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 154) = 0u;
  *(void *)(a5 + 176) = swift_getKeyPath();
  *(void *)(a5 + 184) = 0;
  *(unsigned char *)(a5 + 192) = 0;
  *(unsigned char *)(a5 + 193) = v10;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  *(_OWORD *)(a5 + 200) = v15;
  *(_OWORD *)(a5 + 216) = v16;
  *(unsigned char *)(a5 + 232) = v17;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  *(void *)(a5 + 240) = v15;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  *(void *)(a5 + 256) = v15;
  *(unsigned char *)(a5 + 264) = BYTE8(v15);
  if (v10 == 1)
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v14 = 1;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v14 = 0;
  }
  *(unsigned char *)(a5 + 265) = v14;
  *(double *)(a5 + 272) = a6;
  *(void *)(a5 + 280) = v11;
  *(void *)(a5 + 288) = v12;
  *(unsigned char *)(a5 + 350) = 1;
  *(unsigned char *)(a5 + 351) = a3;
  *(unsigned char *)(a5 + 248) = a4 & 1;
  return result;
}

BOOL _RowVisitationContext.canDelete.getter(uint64_t a1)
{
  type metadata accessor for DeleteInteraction?(0, &lazy cache variable for type metadata for DeleteInteraction?, (void (*)(uint64_t))type metadata accessor for DeleteInteraction);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v14 - v4;
  v14[1] = *(void *)(v1 + *(int *)(a1 + 40));
  ViewTraitCollection.deleteInteraction.getter((void *)((char *)v14 - v4));
  uint64_t v6 = type metadata accessor for DeleteInteraction();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of DeleteInteraction?((uint64_t)v5, &lazy cache variable for type metadata for DeleteInteraction?, (void (*)(uint64_t))type metadata accessor for DeleteInteraction);
    return 0;
  }
  else
  {
    unint64_t v8 = (uint64_t *)&v5[*(int *)(v6 + 24)];
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    BOOL v7 = *v8 != 0;
    if (*v8)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v9;
      *(void *)(v11 + 24) = v10;
      uint64_t v12 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
    }
    else
    {
      uint64_t v12 = 0;
    }
    outlined copy of AppIntentExecutor?(v9);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v12);
    outlined destroy of MoveInteraction((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DeleteInteraction);
  }
  return v7;
}

void type metadata accessor for DeleteInteraction?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for DeleteInteraction()
{
  uint64_t result = type metadata singleton initialization cache for DeleteInteraction;
  if (!type metadata singleton initialization cache for DeleteInteraction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeleteInteraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F23594);
}

BOOL _RowVisitationContext.canMove.getter()
{
  type metadata accessor for DeleteInteraction?(0, &lazy cache variable for type metadata for MoveInteraction?, (void (*)(uint64_t))type metadata accessor for MoveInteraction);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (uint64_t *)((char *)&v10 - v1);
  _RowVisitationContext.moveInteraction.getter((uint64_t)&v10 - v1);
  uint64_t v3 = type metadata accessor for MoveInteraction();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of DeleteInteraction?((uint64_t)v2, &lazy cache variable for type metadata for MoveInteraction?, (void (*)(uint64_t))type metadata accessor for MoveInteraction);
    return 0;
  }
  else
  {
    uint64_t v5 = *v2;
    uint64_t v6 = v2[1];
    BOOL v4 = *v2 != 0;
    if (*v2)
    {
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v5;
      *(void *)(v7 + 24) = v6;
      unint64_t v8 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ();
    }
    else
    {
      unint64_t v8 = 0;
    }
    outlined copy of AppIntentExecutor?(v5);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
    outlined destroy of MoveInteraction((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  }
  return v4;
}

uint64_t type metadata accessor for MoveInteraction()
{
  uint64_t result = type metadata singleton initialization cache for MoveInteraction;
  if (!type metadata singleton initialization cache for MoveInteraction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t _RowVisitationContext.moveInteraction.getter@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v9)
  {
    uint64_t v2 = type metadata accessor for MoveInteraction();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  }
  else
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v3 = ViewTraitCollection.onMove.getter();
    uint64_t v5 = v4;
    type metadata accessor for IndexSet();
    uint64_t v6 = type metadata accessor for MoveInteraction();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
    dispatch thunk of SetAlgebra.init()();
    dispatch thunk of SetAlgebra.insert(_:)();
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + *(int *)(v6 + 28)) = v8;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 0, 1, v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t (*ViewTraitCollection.onMove.getter())(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v3) {
    return 0;
  }
  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (!v4)
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v4;
  *(void *)(v2 + 24) = v5;
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @in_guaranteed Int) -> (@out ());
}

unint64_t ViewTraitCollection.listItemBackground(kind:)(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v2 = v5;
  if (v5 == 1)
  {
    if (v1) {
      return 0;
    }
LABEL_7:
    ViewTraitCollection.value<A>(for:defaultValue:)();
    return v4;
  }
  if (v1 < 0x40 && ((v4 >> v1) & 1) == 0)
  {
    outlined consume of Text.LineStyle?(v4, v5);
    if (v1) {
      return 0;
    }
    goto LABEL_7;
  }
  return v2;
}

uint64_t outlined destroy of DeleteInteraction?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for DeleteInteraction?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t storeEnumTagSinglePayload for MoveInteraction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C9E5D0);
}

uint64_t getEnumTagSinglePayload for MoveInteraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C9E514);
}

unint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    type metadata accessor for IndexSet();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    type metadata accessor for IndexSet();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
}

void type metadata accessor for EditMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

uint64_t outlined assign with take of UICellConfigurationState?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.ListDiffable.SectionIDs.Collection.Index) -> (@owned String?, @error @owned Error)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in UICollectionViewListCoordinatorBase.indexTitles(for:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  return ShadowListDataSource<>.sectionIndexLabel(forSectionAt:)(a1, v4, v3);
}

uint64_t ShadowListDataSource<>.sectionIndexLabel(forSectionAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppIntentExecutingLocation.get()(v9, (uint64_t)v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, v5, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v10;
}

uint64_t protocol witness for CollectionViewListDataSourceBase.sectionIndexLabel(forSectionAt:) in conformance CollectionViewListDataSource<A>(Swift::Int *a1)
{
  return CollectionViewListDataSource.sectionIndexLabel(forSectionAt:)(*a1).value._countAndFlagsBits;
}

Swift::String_optional __swiftcall CollectionViewListDataSource.sectionIndexLabel(forSectionAt:)(Swift::Int forSectionAt)
{
  if (forSectionAt < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)(v1 + 56);
  if (*(void *)(v2 + 16) <= (unint64_t)forSectionAt)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  outlined init with copy of SectionAccumulator.Item(v2 + 136 * forSectionAt + 32, (uint64_t)v11);
  if (!v12)
  {
    outlined destroy of SectionAccumulator.Item((uint64_t)v11);
    goto LABEL_9;
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  outlined destroy of SectionAccumulator.Item((uint64_t)v11);
  Swift::Int v3 = 0;
  uint64_t v4 = 0;
  if (v10 >> 1 != 0xFFFFFFFF)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      outlined copy of Text.Storage(v8, v9, v10 & 1);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      Swift::Int v3 = Text.resolveString(in:with:idiom:)();
      uint64_t v4 = v5;
      outlined consume of Text.Storage(v8, v9, v10 & 1);
      swift_bridgeObjectRelease();
      outlined consume of SectionIndexLabel?(v8, v9, v10);
      swift_release();
      swift_release();
      goto LABEL_10;
    }
    outlined consume of SectionIndexLabel?(v8, v9, v10);
LABEL_9:
    Swift::Int v3 = 0;
    uint64_t v4 = 0;
  }
LABEL_10:
  forSectionAt = v3;
  uint64_t v6 = v4;
LABEL_13:
  result.value._object = v6;
  result.value._countAndFlagsBits = forSectionAt;
  return result;
}

uint64_t @objc ListCollectionViewCellBase.updateConfiguration(using:)(void *a1)
{
  uint64_t v2 = type metadata accessor for UICellConfigurationState();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a1;
  ListCollectionViewCellBase.updateConfiguration(using:)((uint64_t)v5);

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void ListCollectionViewCellBase.updateConfiguration(using:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *(void *)v1;
  uint64_t v5 = type metadata accessor for UIListContentConfiguration();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  uint64_t v48 = *(void *)(v4 + 176);
  uint64_t v13 = (objc_class *)type metadata accessor for ListCollectionViewCellBase();
  v55.receiver = v2;
  v55.super_class = v13;
  objc_msgSendSuper2(&v55, sel__bridgedUpdateConfigurationUsingState_, isa);

  char v14 = UICellConfigurationState.isEditing.getter();
  uint64_t v15 = direct field offset for ListCollectionViewCellBase.wasEditing;
  if ((v14 & 1) != v2[direct field offset for ListCollectionViewCellBase.wasEditing])
  {
    long long v16 = *(void **)&v2[direct field offset for ListCollectionViewCellBase.host];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = _UIHostingView.base.getter();
      uint64_t v47 = a1;
      uint64_t v19 = v18;

      *((unsigned char *)v19 + 219) = 1;
      a1 = v47;
      swift_release();
    }
    v2[v15] = UICellConfigurationState.isEditing.getter() & 1;
  }
  MEMORY[0x18C116B40]();
  uint64_t v20 = type metadata accessor for UICellConfigurationState();
  unint64_t v50 = (void *)v20;
  char v51 = (uint64_t (*)())MEMORY[0x1E4FB0EF8];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(aBlock);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(boxed_opaque_existential_1, a1, v20);
  UIListContentConfiguration.updated(for:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
  uint64_t v22 = (uint64_t)&v2[direct field offset for ListCollectionViewCellBase.lastConfiguration];
  swift_beginAccess();
  outlined assign with take of UIListContentConfiguration?((uint64_t)v11, v22);
  swift_endAccess();
  uint64_t v23 = direct field offset for ListCollectionViewCellBase.host;
  uint64_t v24 = *(void **)&v2[direct field offset for ListCollectionViewCellBase.host];
  if (v24)
  {
    LOWORD(aBlock[0]) = 2;
    type metadata accessor for ModifiedContent();
    uint64_t v25 = *(void *)(v48 + 8);
    unint64_t v26 = lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier();
    uint64_t v53 = v25;
    unint64_t v54 = v26;
    id v27 = v24;
    swift_getWitnessTable();
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    int v28 = *(void **)&v2[v23];
    if (v28)
    {
      id v29 = v28;
      id v30 = objc_msgSend(v2, sel_contentView);
      objc_msgSend(v30, sel_bounds);
      double v32 = v31;
      double v34 = v33;
      double v36 = v35;
      double v38 = v37;

      objc_msgSend(v29, sel_setFrame_, v32, v34, v36, v38);
    }
  }
  char v39 = UICellConfigurationState.isSwiped.getter();
  uint64_t v40 = direct field offset for ListCollectionViewCellBase.wasSwiped;
  if ((v39 & 1) != v2[direct field offset for ListCollectionViewCellBase.wasSwiped]
    && (ListCollectionViewCellBase.canUpdateSwipeActionPresentationBinding.getter() & 1) != 0)
  {
    v2[v40] = UICellConfigurationState.isSwiped.getter() & 1;
    if (UICellConfigurationState.isSwiped.getter())
    {
      ListCollectionViewCellBase.updateSwipeActionPresentationBinding()();
    }
    else
    {
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v2;
      uint64_t v42 = self;
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = partial apply for closure #1 in ListCollectionViewCellBase.updateConfiguration(using:);
      *(void *)(v43 + 24) = v41;
      char v51 = partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:);
      uint64_t v52 = v43;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      unint64_t v50 = &block_descriptor_25_0;
      uint64_t v44 = _Block_copy(aBlock);
      uint64_t v45 = v2;
      swift_retain();
      swift_release();
      unsigned int v46 = objc_msgSend(v42, sel__addCompletion_, v44);
      _Block_release(v44);
      if (!v46) {
        ListCollectionViewCellBase.updateSwipeActionPresentationBinding()();
      }
      swift_release();
    }
  }
}

uint64_t outlined assign with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIBackgroundConfiguration?(0, &lazy cache variable for type metadata for UIListContentConfiguration?, MEMORY[0x1E4FB0F90]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v88 = a2;
  Swift::Int v80 = a1;
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v83 = *MEMORY[0x1E4FBC8C8] & *v4;
  uint64_t v8 = v83;
  uint64_t v9 = type metadata accessor for UICollectionLayoutListConfiguration.ContentHuggingElements();
  uint64_t v86 = *(void *)(v9 - 8);
  uint64_t v87 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v85 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v84 = (char *)&v63 - v12;
  MEMORY[0x1F4188790](v13);
  int v63 = (char *)&v63 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v65 = (char *)&v63 - v16;
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for UICollectionLayoutListConfiguration.ContentHuggingElements?, MEMORY[0x1E4FB1120], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v17 - 8);
  char v64 = (char *)&v63 - v18;
  uint64_t v77 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode();
  uint64_t v76 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](v77);
  uint64_t v75 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v8 + 736);
  uint64_t v81 = *(void *)(v8 + 752);
  uint64_t v82 = v20;
  uint64_t v21 = type metadata accessor for ShadowListDataSource();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v63 - v23;
  uint64_t v70 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v68 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v27 = *a3;
  uint64_t v78 = a3[1];
  uint64_t v79 = v27;
  UICollectionViewListCoordinator.listAppearance.getter();
  UICollectionLayoutListConfiguration.init(appearance:)();
  uint64_t v90 = v4;
  if (*(void *)((char *)v4 + OBJC_IVAR____TtC7SwiftUI39UICollectionViewListCoordinatorBaseBase_backgroundColor))
  {
    id v28 = objc_msgSend(self, sel_clearColor);
    UICollectionLayoutListConfiguration.backgroundColor.setter();
  }
  uint64_t v89 = (char *)v90 + *(void *)((*v7 & *v90) + 0x88);
  id v29 = v89;
  swift_beginAccess();
  uint64_t v66 = a4;
  uint64_t v30 = v22;
  double v31 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v31(v24, v29, v21);
  unint64_t v73 = v31;
  uint64_t v74 = v22 + 16;
  swift_getWitnessTable();
  Swift::Int v32 = v80;
  Swift::Bool v33 = ListDiffable.hasHeader(forSectionAtOffset:)(v80);
  double v34 = *(void (**)(char *, uint64_t))(v30 + 8);
  v34(v24, v21);
  Swift::Int v72 = v34;
  uint64_t v71 = v30 + 8;
  double v35 = (unsigned int *)MEMORY[0x1E4FB1108];
  if (!v33) {
    double v35 = (unsigned int *)MEMORY[0x1E4FB1118];
  }
  (*(void (**)(char *, void, uint64_t))(v69 + 104))(v68, *v35, v70);
  UICollectionLayoutListConfiguration.headerMode.setter();
  uint64_t v67 = v21;
  v31(v24, v89, v21);
  Swift::Bool v36 = ListDiffable.hasFooter(forSectionAtOffset:)(v32);
  v34(v24, v21);
  double v37 = (unsigned int *)MEMORY[0x1E4FB10F8];
  if (!v36) {
    double v37 = (unsigned int *)MEMORY[0x1E4FB1100];
  }
  (*(void (**)(char *, void, uint64_t))(v76 + 104))(v75, *v37, v77);
  UICollectionLayoutListConfiguration.footerMode.setter();
  uint64_t v38 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v39 = (void *)swift_allocObject();
  uint64_t v41 = v82;
  uint64_t v40 = v83;
  v39[2] = v82;
  uint64_t v42 = *(void *)(v40 + 744);
  uint64_t v43 = v81;
  v39[3] = v42;
  v39[4] = v43;
  uint64_t v44 = *(void *)(v40 + 760);
  v39[5] = v44;
  v39[6] = v38;
  UICollectionLayoutListConfiguration.itemSeparatorHandler.setter();
  uint64_t v45 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unsigned int v46 = (void *)swift_allocObject();
  v46[2] = v41;
  v46[3] = v42;
  v46[4] = v43;
  v46[5] = v44;
  v46[6] = v45;
  UICollectionLayoutListConfiguration.leadingSwipeActionsConfigurationProvider.setter();
  uint64_t v47 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v48 = (void *)swift_allocObject();
  v48[2] = v41;
  v48[3] = v42;
  v48[4] = v43;
  v48[5] = v44;
  v48[6] = v47;
  v48[7] = v79;
  v48[8] = v78;
  swift_retain();
  swift_retain();
  UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter();
  uint64_t v49 = v67;
  v73(v24, v89, v67);
  LOBYTE(v47) = ShadowListDataSource.hasGlobalHeader.getter(v49);
  v72(v24, v49);
  uint64_t v51 = v86;
  uint64_t v50 = v87;
  uint64_t v52 = v84;
  if (v47)
  {
    UICollectionLayoutListConfiguration.headerTopPadding.setter();
    uint64_t v53 = v65;
    static UICollectionLayoutListConfiguration.ContentHuggingElements.supplementaryHeader.getter();
    unint64_t v54 = (void (*)(char *, void))UICollectionLayoutListConfiguration.contentHuggingElements.modify();
    (*(void (**)(char *))(v51 + 16))(v52);
    _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.ContentHuggingElements and conformance UICollectionLayoutListConfiguration.ContentHuggingElements, MEMORY[0x1E4FB1120]);
    objc_super v55 = v63;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if (dispatch thunk of SetAlgebra.isEmpty.getter())
    {
      unint64_t v56 = v53;
      unint64_t v57 = *(void (**)(char *, uint64_t))(v51 + 8);
      v57(v55, v50);
      uint64_t v58 = (uint64_t)v64;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v64, 1, 1, v50);
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      uint64_t v58 = (uint64_t)v64;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v64, v55, v50);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v58, 0, 1, v50);
      unint64_t v56 = v53;
      unint64_t v57 = *(void (**)(char *, uint64_t))(v51 + 8);
    }
    v57(v56, v50);
    outlined destroy of SceneList.Item?(v58, (uint64_t)&lazy cache variable for type metadata for UICollectionLayoutListConfiguration.ContentHuggingElements?, MEMORY[0x1E4FB1120], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s5UIKit25UIBackgroundConfigurationVSgMaTm_0);
    v54(v91, 0);
  }
  UICollectionLayoutListConfiguration.contentHuggingElements.getter();
  uint64_t v59 = v85;
  static UICollectionLayoutListConfiguration.ContentHuggingElements.supplementaryHeader.getter();
  _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.ContentHuggingElements and conformance UICollectionLayoutListConfiguration.ContentHuggingElements, MEMORY[0x1E4FB1120]);
  char v60 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  BOOL v61 = *(void (**)(char *, uint64_t))(v51 + 8);
  v61(v59, v50);
  v61(v52, v50);
  uint64_t result = UICollectionViewListCoordinatorBase.sectionHeadersShouldHugContent.setter(v60 & 1);
  if ((*(unsigned char *)(v88 + 48) & 1) == 0) {
    return UICollectionLayoutListConfiguration.headerTopPadding.setter();
  }
  return result;
}

uint64_t closure #1 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UIListSeparatorConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for UIListSeparatorConfiguration?, MEMORY[0x1E4FB1018], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v16 - v13;
  swift_beginAccess();
  if (MEMORY[0x18C119DF0](a3 + 16)) {
    UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)(a1, a2, (uint64_t)v14);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v14, 1, 1, v8);
  (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v11, a2, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
    return outlined destroy of SceneList.Item?((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for UIListSeparatorConfiguration?, MEMORY[0x1E4FB1018], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s5UIKit25UIBackgroundConfigurationVSgMaTm_0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v14, v8);
  }
}

void type metadata accessor for UIBackgroundConfiguration?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v53 = a2;
  uint64_t v59 = a1;
  uint64_t v45 = type metadata accessor for ShadowRowCollection();
  v44[7] = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  v44[6] = (char *)v44 - v6;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v48 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  uint64_t v57 = v10;
  MEMORY[0x1F4188790](v9);
  objc_super v55 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v54 = (char *)v44 - v13;
  uint64_t v14 = type metadata accessor for UIListSeparatorConfiguration.Visibility();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v52 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v44 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v47 = (char *)v44 - v21;
  MEMORY[0x1F4188790](v22);
  unsigned int v46 = (char *)v44 - v23;
  uint64_t v24 = type metadata accessor for ShadowListDataSource();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)v44 - v26;
  uint64_t v28 = type metadata accessor for UIListSeparatorConfiguration();
  id v29 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v28 - 8) + 16);
  uint64_t v58 = a3;
  v29(a3, v53, v28);
  uint64_t v30 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x88);
  uint64_t v53 = v4;
  double v31 = (char *)v4 + v30;
  swift_beginAccess();
  Swift::Int v32 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v44[3] = v31;
  v44[2] = v25 + 16;
  v44[1] = v32;
  v32(v27, v31, v24);
  uint64_t WitnessTable = swift_getWitnessTable();
  char v34 = ListCoreDataSource.separatorConfiguration(forRowAt:)(v59, v24, WitnessTable);
  uint64_t v51 = v35;
  char v37 = v36;
  uint64_t v39 = v38;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v25 + 8);
  v44[4] = v27;
  v44[5] = v25 + 8;
  v44[0] = v40;
  v40(v27, v24);
  if (!IndexPath.row.getter())
  {
    uint64_t v41 = v47;
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v47, **((unsigned int **)&unk_1E53B90A0 + v34), v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v46, v41, v14);
    UIListSeparatorConfiguration.topSeparatorVisibility.setter();
  }
  uint64_t v42 = v52;
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v52, **((unsigned int **)&unk_1E53B90A0 + v37), v14);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v42, v14);
  UIListSeparatorConfiguration.bottomSeparatorVisibility.setter();
  if (v39)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    uint64_t v43 = swift_retain();
    UIColor.init(_:)(v43);
    UIListSeparatorConfiguration.color.setter();
  }
  static HorizontalAlignment.listRowSeparatorLeading.getter();
  explicitInset #1 <A, B>(of:edge:) in UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)();
}

uint64_t sub_1873E325C(uint64_t a1, char a2)
{
  *(void *)(v4 - 216) = v2;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(v4 - 168);
    uint64_t v25 = (void (*)(uint64_t, void))UIListSeparatorConfiguration.bottomSeparatorInsets.modify();
    *(void *)(v26 + 8) = a1;
    v25(v4 - 144, 0);
    uint64_t v27 = *(void *)(v4 - 192);
    UICollectionViewListCoordinator.listAppearance.getter();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
    uint64_t v30 = *(void *)(v4 - 184);
    uint64_t v29 = *(void *)(v4 - 176);
    v28(v30, *MEMORY[0x1E4FB10C8], v29);
    char v31 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
    Swift::Int v32 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v32(v30, v29);
    v32(v27, v29);
    if (v31) {
      goto LABEL_17;
    }
    uint64_t v33 = *(void *)(v4 - 192);
    UICollectionViewListCoordinator.listAppearance.getter();
    uint64_t v34 = *MEMORY[0x1E4FB10D0];
    *(void *)(v4 - 168) = a1;
    uint64_t v36 = *(void *)(v4 - 184);
    uint64_t v35 = *(void *)(v4 - 176);
    v28(v36, v34, v35);
    char v37 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
    a1 = *(void *)(v4 - 168);
    v32(v36, v35);
    v32(v33, v35);
    if (v37)
    {
LABEL_17:
      if (!IndexPath.row.getter())
      {
        uint64_t v38 = (void (*)(uint64_t, void))UIListSeparatorConfiguration.topSeparatorInsets.modify();
        *(void *)(v39 + 8) = a1;
        v38(v4 - 144, 0);
      }
    }
LABEL_13:
    static HorizontalAlignment.listRowSeparatorTrailing.getter();
    explicitInset #1 <A, B>(of:edge:) in UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)();
  }
  uint64_t v7 = *(void *)(v4 - 192);
  UICollectionViewListCoordinator.listAppearance.getter();
  uint64_t v9 = *(void *)(v4 - 176);
  uint64_t v8 = *(void *)(v4 - 168);
  uint64_t v10 = *(void *)(v4 - 184);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FB10D8], v9);
  _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.Appearance and conformance UICollectionLayoutListConfiguration.Appearance, MEMORY[0x1E4FB10E8]);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v10, v9);
  uint64_t v13 = v7;
  uint64_t v14 = *(void *)(v4 - 152);
  v12(v13, v9);
  uint64_t v16 = *(void *)(v4 - 248);
  uint64_t v15 = *(void *)(v4 - 240);
  uint64_t v17 = *(void *)(v4 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v16, v14, v17);
  if ((v11 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    goto LABEL_8;
  }
  *(void *)(v4 - 208) = IndexPath.row.getter();
  uint64_t v18 = *(void *)(v4 - 304);
  (*(void (**)(uint64_t, void, uint64_t))(v4 - 328))(v18, *(void *)(v4 - 312), v3);
  uint64_t v19 = IndexPath.section.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = *(void *)(v4 - 288);
  ListDiffable.rowIDs(forSectionAtOffset:)(v19, v3, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(v4 - 336))(v18, v3);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  uint64_t v22 = *(void *)(v4 - 272);
  uint64_t v23 = ShadowRowCollection.count.getter(v22);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 280) + 8))(v21, v22);
  if (!__OFSUB__(v23, 1))
  {
    if (*(void *)(v4 - 208) >= v23 - 1) {
      goto LABEL_13;
    }
LABEL_8:
    UICollectionViewListCoordinatorBase.collectionView.getter();
  }
  __break(1u);
  return result;
}

uint64_t UICollectionViewListCoordinator.listAppearance.getter()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  uint64_t v2 = *(void *)(v1 + 0x2F0);
  uint64_t v3 = type metadata accessor for ShadowListDataSource();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = (char *)v0 + *(void *)(v1 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, v3);
  ShadowListDataSource<>.style.getter(v3, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ShadowListDataSource<>.style.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppIntentExecutingLocation.get()(v7, (uint64_t)v6);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(v3, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AppIntentExecutingLocation.get()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t protocol witness for CollectionViewListDataSourceBase.style.getter in conformance CollectionViewListDataSource<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

void explicitInset #1 <A, B>(of:edge:) in UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)()
{
}

void *sub_1873E3A18(void *result)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v5 = objc_msgSend(v3, sel_cellForItemAtIndexPath_, isa);

  if (!v5) {
    return 0;
  }
  type metadata accessor for AnyListCollectionViewCell();
  uint64_t v6 = swift_dynamicCastClass();
  if (!v6)
  {
LABEL_8:

    return 0;
  }
  uint64_t v7 = (void *)v6;
  id v5 = v5;
  id v8 = objc_msgSend(v7, sel_contentView);
  objc_msgSend(v8, sel_frame);
  double v10 = v9;
  double v12 = v11;

  *(double *)&uint64_t v13 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, double, double))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x68))(v2, v10, v12));
  if (v14)
  {

    goto LABEL_8;
  }
  double v15 = *(double *)&v13;
  if (v1)
  {
    objc_msgSend(v7, sel_bounds);
    double Width = CGRectGetWidth(v39);
    id v28 = objc_msgSend(v7, sel_contentView);
    objc_msgSend(v28, sel_frame);
    CGFloat v30 = v29;
    CGFloat v32 = v31;
    CGFloat v34 = v33;
    CGFloat v36 = v35;

    v40.origin.x = v30;
    v40.origin.y = v32;
    v40.size.width = v34;
    v40.size.height = v36;
    double MinX = CGRectGetMinX(v40);

    double v26 = Width - (MinX + v15);
  }
  else
  {
    id v16 = objc_msgSend(v7, sel_contentView);
    objc_msgSend(v16, sel_frame);
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    CGFloat v22 = v21;
    CGFloat v24 = v23;

    v38.origin.x = v18;
    v38.origin.y = v20;
    v38.size.width = v22;
    v38.size.height = v24;
    double v25 = CGRectGetMinX(v38);

    double v26 = v25 + v15;
  }
  return *(void **)&v26;
}

void UICollectionViewListCoordinatorBase.collectionView.getter()
{
}

uint64_t type metadata accessor for AnyListCollectionViewCell()
{
  return self;
}

uint64_t ListCollectionViewCellBase.explicitAlignment(of:at:)()
{
  char v1 = *(void **)(v0 + direct field offset for ListCollectionViewCellBase.host);
  if (!v1) {
    return 0;
  }
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier();
  id v2 = v1;
  swift_getWitnessTable();
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  uint64_t v3 = ViewRendererHost.explicitAlignment(of:at:)();

  return v3;
}

unint64_t lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier;
  if (!lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier);
  }
  return result;
}

uint64_t ListCoreDataSource.separatorConfiguration(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a1;
  uint64_t v5 = *(void *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v9 = (char *)&v16 - v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v16 - v12;
  ListDiffable.rowIndex(at:)((uint64_t)&v16 - v12, (uint64_t)v9, v17, a2, v5);
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a3 + 216))(v13, v9, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v14;
}

uint64_t ShadowListDataSource.separatorConfiguration(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v52 = *(void *)(a3 + 24);
  uint64_t v4 = *(void *)(v52 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v49 = (uint64_t)&v39 - v6;
  uint64_t v48 = v4;
  swift_getAssociatedTypeWitness();
  uint64_t v44 = v3;
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v8 = v43;
  MEMORY[0x1F4188790](v7);
  uint64_t v46 = (uint64_t)&v39 - v9;
  uint64_t v54 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v53 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v47 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  double v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  double v19 = (char *)&v39 - v18;
  uint64_t v21 = *(int *)(v20 + 48);
  uint64_t v45 = v20;
  CGFloat v22 = (char *)&v39 + v21 - v18;
  CGRect v40 = v22;
  uint64_t v41 = v7;
  double v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  uint64_t v42 = (char *)&v39 - v18;
  v23((char *)&v39 - v18, v50, v7, v17);
  CGFloat v24 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
  v24(v22, v51, AssociatedTypeWitness);
  uint64_t v25 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v56, v44);
  uint64_t v26 = (uint64_t)&v15[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v23)(v15, v19, v7);
  v24((char *)v26, (uint64_t)v40, AssociatedTypeWitness);
  uint64_t v27 = v25;
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  uint64_t v29 = v46;
  uint64_t v30 = v49;
  ShadowListUpdateRecorder.initialIndex(_:)(v46, v49, (uint64_t)v15, v26, updated);
  double v31 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  v31(v26, v12);
  CGFloat v32 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v33 = v41;
  v32(v15, v41);
  CGFloat v34 = v53;
  LODWORD(v56) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 216))(v29, v30, v27);
  uint64_t v55 = v35;
  LODWORD(v52) = v36;
  uint64_t v51 = v37;
  v31(v30, v12);
  v32((char *)v29, v33);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v34, v27);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v45);
  return v56;
}

uint64_t protocol witness for ListCoreDataSource.separatorConfiguration(forRowAt:) in conformance CollectionViewListDataSource<A>(uint64_t *a1, uint64_t *a2)
{
  return CollectionViewListDataSource.separatorConfiguration(forRowAt:)(*a1, *a2);
}

uint64_t CollectionViewListDataSource.separatorConfiguration(forRowAt:)(uint64_t a1, uint64_t a2)
{
  Swift::tuple_SwiftUI_ListRowSeparatorVisitor_Options_tuple_Int_Int v3 = ListSectionInfo.separatorVisitorOptions(forRowAt:)(*(Swift::tuple_Int_Int *)&a1);
  specialized ListSectionInfo.visitRow<A>(index:visitor:)(v3._1._0, v3._1._1);
  swift_retain();
  swift_retain();
  outlined consume of ListRowSeparatorVisitor.Neighbor?(0x3FFFFFFFCuLL, 0, 0);
  swift_release();
  swift_release();
  outlined consume of ListRowSeparatorVisitor.Neighbor?(0x3FFFFFFFCuLL, 0, 0);
  return 0;
}

uint64_t specialized closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  if (*(void *)result >= v2) {
    return 1;
  }
  uint64_t v5 = result;
  uint64_t v6 = result + 32;
  while (v3 < v2)
  {
    outlined init with copy of TableColumnList(v6, (uint64_t)v9);
    uint64_t v7 = *(void **)(a2 + 48);
    swift_bridgeObjectRetain();
    id v8 = v7;
    _ViewList_View.init(elements:id:index:count:contentSubgraph:)();
    v9[0] = *(void *)(v5 + 72);
    LOBYTE(v7) = ListRowSeparatorVisitor.visit(view:traits:)();
    unint64_t result = outlined destroy of _ViewList_View((uint64_t)v10);
    if ((v7 & 1) == 0) {
      return 0;
    }
    if (v2 == ++v3) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9[5];
  unsigned char v10[88];

  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  if (*(void *)result >= v2) {
    return 1;
  }
  uint64_t v5 = result;
  uint64_t v6 = result + 32;
  while (v3 < v2)
  {
    outlined init with copy of TableColumnList(v6, (uint64_t)v9);
    uint64_t v7 = *(void **)(a2 + 48);
    swift_bridgeObjectRetain();
    id v8 = v7;
    _ViewList_View.init(elements:id:index:count:contentSubgraph:)();
    v9[0] = *(void *)(v5 + 72);
    LOBYTE(v7) = CollectionViewHeaderFooterVisitor.visit(view:traits:)((uint64_t)v10, v9);
    unint64_t result = outlined destroy of _ViewList_View((uint64_t)v10);
    if ((v7 & 1) == 0) {
      return 0;
    }
    if (v2 == ++v3) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)result;
  uint64_t v5 = *(void *)(result + 8);
  if (*(void *)result >= v5) {
    return 1;
  }
  uint64_t v9 = result;
  uint64_t v10 = result + 32;
  uint64_t v11 = *(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t))(a5 + 8);
  while (v6 < v5)
  {
    outlined init with copy of TableColumnList(v10, (uint64_t)v15);
    uint64_t v12 = *(void **)(a2 + 48);
    swift_bridgeObjectRetain();
    id v13 = v12;
    _ViewList_View.init(elements:id:index:count:contentSubgraph:)();
    v15[0] = *(void *)(v9 + 72);
    LOBYTE(v12) = v11(v16, v15, a4, a5);
    unint64_t result = outlined destroy of _ViewList_View((uint64_t)v16);
    if ((v12 & 1) == 0) {
      return 0;
    }
    if (v5 == ++v6) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of _ViewList_View(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for ViewListVisitor.visit(view:traits:) in conformance ListContentVisitor<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return 0;
}

uint64_t ListRowSeparatorVisitor.visit(view:traits:)()
{
  if (*(unsigned char *)(v0 + 96))
  {
    if (*(unsigned char *)(v0 + 96) == 1)
    {
      uint64_t v1 = *(void *)(v0 + 104);
      if (v1)
      {
        ViewTraitCollection.value<A>(for:defaultValue:)();
        outlined consume of ListRowSeparatorVisitor.Neighbor?(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
        *(void *)uint64_t v0 = v3;
        *(void *)(v0 + 8) = v4;
        *(void *)(v0 + 16) = v5;
        *(void *)(v0 + 24) = v6;
      }
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_release();
      swift_release();
      *(unsigned char *)(v0 + 32) = v3;
      *(void *)(v0 + 40) = v4;
      *(unsigned char *)(v0 + 48) = v5;
      *(void *)(v0 + 56) = v6;
      *(unsigned char *)(v0 + 96) = 2;
      if ((v1 & 2) != 0)
      {
        ViewTraitCollection.value<A>(for:defaultValue:)();
        outlined consume of ListRowSeparatorVisitor.Neighbor?(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
        uint64_t result = 0;
        *(void *)(v0 + 64) = v3;
        *(void *)(v0 + 72) = v4;
        *(void *)(v0 + 80) = v5;
        *(void *)(v0 + 88) = v6;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      ViewTraitCollection.value<A>(for:defaultValue:)();
      outlined consume of ListRowSeparatorVisitor.Neighbor?(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
      uint64_t result = 0;
      *(void *)(v0 + 64) = v3;
      *(void *)(v0 + 72) = v4;
      *(void *)(v0 + 80) = v5 | 0x8000000000000000;
      *(void *)(v0 + 88) = v6;
    }
  }
  else
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    outlined consume of ListRowSeparatorVisitor.Neighbor?(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
    *(void *)uint64_t v0 = v3;
    *(void *)(v0 + 8) = v4;
    *(void *)(v0 + 16) = v5 | 0x8000000000000000;
    *(void *)(v0 + 24) = v6;
    uint64_t result = 1;
    *(unsigned char *)(v0 + 96) = 1;
  }
  return result;
}

unint64_t outlined consume of ListRowSeparatorVisitor.Neighbor?(unint64_t result, uint64_t a2, unint64_t a3)
{
  if (result >> 2 != 0xFFFFFFFF || a3 >= 4) {
    return outlined consume of ListRowSeparatorVisitor.Neighbor();
  }
  return result;
}

uint64_t outlined consume of ListRowSeparatorVisitor.Neighbor()
{
  swift_release();

  return swift_release();
}

Swift::tuple_SwiftUI_ListRowSeparatorVisitor_Options_tuple_Int_Int __swiftcall ListSectionInfo.separatorVisitorOptions(forRowAt:)(Swift::tuple_Int_Int forRowAt)
{
  if (forRowAt._0 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  Swift::Int v2 = forRowAt._0;
  if (*(void *)(*(void *)(v1 + 56) + 16) <= forRowAt._0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  Swift::Int v3 = forRowAt._1;
  swift_bridgeObjectRetain();
  uint64_t v4 = SectionAccumulator.RowIDs.startIndex.getter();
  uint64_t v5 = SectionAccumulator.RowIDs.endIndex.getter();
  forRowAt._0 = swift_bridgeObjectRelease();
  if (v5 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v4 == v5 || v4 != v3)
  {
    uint64_t v8 = v3 - 1;
    if (__OFSUB__(v3, 1))
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = SectionAccumulator.RowIDs.startIndex.getter();
    uint64_t v10 = SectionAccumulator.RowIDs.endIndex.getter();
    forRowAt._0 = swift_bridgeObjectRelease();
    if (v8 < v9 || v8 >= v10) {
      goto LABEL_22;
    }
    Swift::Int v7 = 0;
  }
  else
  {
    Swift::Int v7 = 1;
    uint64_t v8 = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = SectionAccumulator.RowIDs.startIndex.getter();
  uint64_t v12 = SectionAccumulator.RowIDs.endIndex.getter();
  forRowAt._0 = swift_bridgeObjectRelease();
  if (v12 < v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v11 != v12)
  {
    if (v11 < v12)
    {
      if (v12 - 1 == v3) {
        v7 |= 2uLL;
      }
      goto LABEL_16;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_16:
  forRowAt._0 = v7;
  forRowAt._1 = v2;
  Swift::Int v6 = v8;
LABEL_24:
  result._0 = (SwiftUI::ListRowSeparatorVisitor::Options)forRowAt._0;
  result._1._0 = forRowAt._1;
  result._1._1 = v6;
  return result;
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Bool __swiftcall ListDiffable.hasFooter(forSectionAtOffset:)(Swift::Int forSectionAtOffset)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  ListDiffable.sectionIndex(atOffset:)(forSectionAtOffset, v4, v3);
  LOBYTE(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 72))(v9, v4, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v3 & 1;
}

uint64_t UICollectionViewListCoordinatorBase.sectionHeadersShouldHugContent.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x128)) = result;
  return result;
}

uint64_t outlined destroy of SceneList.Item?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

BOOL AccessibilityNode.HeaderVisitor.visit(node:)(void *a1)
{
  uint64_t v2 = v1;
  char v4 = specialized AccessibilityNode.HeaderVisitor.isTargetHeader(node:)((uint64_t)a1, *v2);
  if (v4)
  {
    AccessibilityNode.platformElement.getter();
    if (!v5) {
      id v5 = a1;
    }
    uint64_t v6 = v5;
    uint64_t v7 = swift_dynamicCastObjCProtocolConditional();
    if (v7)
    {
      uint64_t v8 = v7;
      _sypSgMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_188351940;
      *(void *)(v9 + 32) = v8;
      uint64_t v11 = v9;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      v2[1] = v11;
    }
    else
    {
    }
  }
  return (v4 & 1) == 0;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
    {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -56)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = 56 * (v4 / 56);
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -56)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
    {
      return (char *)memmove(result, v3, 56 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -72)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 72;
    if (result != v3 || result >= &v3[72 * v6])
    {
      return (char *)memmove(result, v3, 72 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -64)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = (v4 + (v4 < 0 ? 0x3FuLL : 0)) & 0xFFFFFFFFFFFFFFC0;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -136)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 136;
    if (result != v3 || result >= &v3[136 * v6])
    {
      return (char *)memmove(result, v3, 136 * v6);
    }
  }
  return result;
}

void AccessibilityNode.platformElement.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 40 * v3;
    while (v3 <= *(void *)(v2 + 16))
    {
      uint64_t v5 = (void *)AccessibilityAttachment.platformElement.getter();

      if (v5)
      {
        if (v3 <= *(void *)(v2 + 16))
        {
          if (!AccessibilityAttachment.platformElement.getter()) {
            __break(1u);
          }
          goto LABEL_11;
        }
LABEL_13:
        __break(1u);
        return;
      }
      v4 -= 40;
      if (!--v3) {
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
LABEL_11:
  swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for PencilEventsBridge()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for DragAndDropBridge()
{
  return swift_initClassMetadata2();
}

_DWORD *assignWithCopy for ContextMenuModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 27;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 27;
  unint64_t v7 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  char v10 = *(unsigned char *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v8, v10);
  uint64_t v11 = *(void *)v7;
  char v12 = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  unint64_t v13 = v6 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  LOBYTE(v9) = *(unsigned char *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(v15, v9);
  uint64_t v16 = *(void *)v13;
  char v17 = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v9;
  outlined consume of Environment<Bool>.Content(v16, v17);
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))((*(unsigned __int8 *)(v18 + 80) + 9 + v13) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(unsigned __int8 *)(v18 + 80) + 9 + v14) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t type metadata completion function for Button()
{
  uint64_t result = type metadata accessor for ButtonAction();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v12 - v7;
  uint64_t v9 = type metadata accessor for _RowVisitationContext();
  _RowVisitationContext.selectionValue(respectSelectionDisabled:)(a1, v9, (uint64_t)v8);
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, AssociatedTypeWitness);
  }
}

uint64_t _RowVisitationContext.selectionValue(respectSelectionDisabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  char v6 = a1;
  uint64_t v22 = a3;
  uint64_t v7 = a2 - 8;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v7 + 32);
  v21[0] = *(void *)(v7 + 24);
  v21[1] = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v21 - v15;
  uint64_t v24 = *(void *)(v4 + *(int *)(v7 + 48));
  char v23 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v25 & 1) == 0 && (v6) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v22, 1, 1, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v4 + *(int *)(a2 + 44), v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a2);
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, AssociatedTypeWitness);
  uint64_t v20 = v22;
  if (v19 == 1)
  {
    uint64_t v24 = *(void *)&v10[*(int *)(a2 + 40)];
    swift_getAssociatedConformanceWitness();
    ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, AssociatedTypeWitness, v20);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v20, v16, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, AssociatedTypeWitness);
  }
}

uint64_t ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *v3;
  uint64_t v23 = *v3;
  if (ViewTraitCollection.isAuxiliaryContent.getter()) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  uint64_t v23 = v11;
  LOBYTE(v22) = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v18 & 1) == 0 && (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  uint64_t v23 = v11;
  ViewTraitCollection.tag<A>(for:)();
  uint64_t v13 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v21 = 0;
    uint64_t v22 = v11;
    uint64_t v18 = 1;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v14 = v23;
    uint64_t v15 = v24;
    uint64_t v16 = v25;
    if (v23)
    {
      if (v23 != 1)
      {
        swift_retain();
        AnyNavigationLinkPresentedValue.as<A>(_:)(a2, v14, a2);
        outlined consume of NavigationLinkSelectionIdentifier?(v14, v15, v16);
        return swift_release();
      }
    }
    else
    {
      outlined consume of NavigationLinkSelectionIdentifier?(0, v24, v25);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, 1, 1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v10, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a3, 0, 1, a2);
  }
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance SwipeActions.Feature()
{
  _ViewOutputs.subscript.getter();
  uint64_t result = AGCreateWeakAttribute();
  *(void *)uint64_t v0 = result;
  *(unsigned char *)(v0 + 8) = 0;
  return result;
}

uint64_t View.scrollDisabled(_:)(char a1)
{
  return View.scrollIndicatorsAlwaysOverlayContent(_:)(a1);
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance SizeFittingLayoutComputer.Engine()
{
  swift_retain();
  ViewSizeCache.get(_:makeValue:)();
  double v1 = v0;
  swift_release();
  return v1;
}

void *static AccessibilityCore.queryFilter(elements:options:)(unint64_t a1, uint64_t a2)
{
  if ((a2 & 8) != 0)
  {
    swift_bridgeObjectRetain_n();
    v25[0] = (void *)specialized _copySequenceToContiguousArray<A>(_:)(a1);
    specialized MutableCollection<>.sort(by:)(v25);
    swift_bridgeObjectRelease();
    uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_7SwiftUI17AccessibilityNodeC7elementtG_AIs5NeverOTg505_sST7e6UIAA17gh2C7B125RtzrlE24sortedSupplementaryItemsSayACGyFACSi6offset_AC7elementt_tcfu_33_0d1082609908173d57d8a66622345aa3SiAH_AcItACTf3nnnpk_nTf1cn_n((uint64_t)v25[0]);
    swift_bridgeObjectRelease();
    swift_release();
    a1 = v4;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  if (a2)
  {
    v25[0] = (void *)MEMORY[0x1E4FBC860];
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11)
      {
LABEL_18:
        if (v11 >= 1)
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if ((a1 & 0xC000000000000001) != 0) {
              id v13 = (id)MEMORY[0x18C117680](i, a1);
            }
            else {
              id v13 = *(id *)(a1 + 8 * i + 32);
            }
            uint64_t v14 = v13;
            AccessibilityNode.automationVisibility.getter((int *)v26);
            if ((v26[0] & 4) != 0 || (v26[0] & 8) != 0 && (v26[0] & 0x400000000) == 0)
            {
            }
            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v15 = (unint64_t)v25[0];
          if ((a2 & 4) == 0) {
            return (void *)v15;
          }
          goto LABEL_44;
        }
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v11) {
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v15 = MEMORY[0x1E4FBC860];
    if ((a2 & 4) == 0) {
      return (void *)v15;
    }
    goto LABEL_44;
  }
  unint64_t v6 = specialized Sequence.filter(_:)(a1, 0);
  swift_bridgeObjectRelease();
  v26[0] = v5;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_7:
      if (v7 >= 1)
      {
        for (uint64_t j = 0; j != v7; ++j)
        {
          if ((v6 & 0xC000000000000001) != 0) {
            id v9 = (id)MEMORY[0x18C117680](j, v6);
          }
          else {
            id v9 = *(id *)(v6 + 8 * j + 32);
          }
          uint64_t v10 = v9;
          AccessibilityNode.traits.getter((uint64_t *)v25);
          if ((BYTE1(v25[0]) & 0x40) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v15 = v26[0];
        if ((v26[0] & 0x8000000000000000) != 0) {
          goto LABEL_42;
        }
        goto LABEL_35;
      }
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v15 = MEMORY[0x1E4FBC860];
  if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0) {
    goto LABEL_42;
  }
LABEL_35:
  if ((v15 & 0x4000000000000000) == 0)
  {
    if (!*(void *)(v15 + 16)) {
      goto LABEL_43;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    if ((a2 & 4) == 0) {
      return (void *)v15;
    }
    goto LABEL_44;
  }
LABEL_42:
  swift_retain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v16) {
    goto LABEL_37;
  }
LABEL_43:
  swift_release();
  unint64_t v15 = v6;
  if ((a2 & 4) == 0) {
    return (void *)v15;
  }
LABEL_44:
  v25[0] = v5;
  if (!(v15 >> 62))
  {
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_46;
    }
LABEL_56:
    swift_bridgeObjectRelease_n();
    return v25[0];
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  if (!v17) {
    goto LABEL_56;
  }
LABEL_46:
  if (v17 >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = MEMORY[0x1E4FBC838] + 8;
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        id v22 = (id)MEMORY[0x18C117680](v18, v15);
      }
      else {
        id v22 = *(id *)(v15 + 8 * v18 + 32);
      }
      uint64_t v23 = v22;
      AccessibilityNode.visibility.getter((int *)v26);
      if ((v26[0] & 0x10) != 0)
      {
        unint64_t v21 = static AccessibilityCore.queryChildren(element:options:)(v23, a2);
      }
      else
      {
        _sypSgMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, v19, MEMORY[0x1E4FBBE00]);
        uint64_t v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = xmmword_188351940;
        *(void *)(v20 + 32) = v23;
        v26[0] = v20;
        specialized Array._endMutation()();
        unint64_t v21 = v26[0];
      }
      ++v18;
      specialized Array.append<A>(contentsOf:)(v21);
    }
    while (v17 != v18);
    goto LABEL_56;
  }
LABEL_60:
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_49;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      if (v2 < 1)
      {
        __break(1u);
        goto LABEL_56;
      }
      if ((a1 & 0xC000000000000001) == 0) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      unint64_t v6 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v7 = (void *)(MEMORY[0x1E4FBC860] + 32);
      while (1)
      {
        uint64_t v8 = MEMORY[0x18C117680](v5, a1);
        if (!v4)
        {
          unint64_t v9 = *((void *)v6 + 3);
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_47;
          }
          int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = v10;
          }
          _ss23_ContiguousArrayStorageCySo18NSNotificationNameaGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: AccessibilityNode), MEMORY[0x1E4FBBE00]);
          uint64_t v12 = (char *)swift_allocObject();
          int64_t v13 = _swift_stdlib_malloc_size_2(v12);
          uint64_t v14 = v13 - 32;
          if (v13 < 32) {
            uint64_t v14 = v13 - 17;
          }
          uint64_t v15 = v14 >> 4;
          *((void *)v12 + 2) = v11;
          *((void *)v12 + 3) = 2 * (v14 >> 4);
          unint64_t v16 = (unint64_t)(v12 + 32);
          uint64_t v17 = *((void *)v6 + 3) >> 1;
          if (*((void *)v6 + 2))
          {
            if (v12 != v6 || v16 >= (unint64_t)&v6[16 * v17 + 32]) {
              memmove(v12 + 32, v6 + 32, 16 * v17);
            }
            *((void *)v6 + 2) = 0;
          }
          uint64_t v7 = (void *)(v16 + 16 * v17);
          uint64_t v4 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
          swift_release();
          unint64_t v6 = v12;
        }
        BOOL v19 = __OFSUB__(v4--, 1);
        if (v19) {
          break;
        }
        *uint64_t v7 = v5;
        v7[1] = v8;
        v7 += 2;
        if (v2 == ++v5) {
          goto LABEL_44;
        }
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v2 = result;
      if (!result) {
        goto LABEL_50;
      }
    }
    uint64_t v4 = 0;
    uint64_t v20 = 0;
    unint64_t v6 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v21 = (char *)(MEMORY[0x1E4FBC860] + 32);
    do
    {
      id v22 = *(void **)(a1 + 8 * v20 + 32);
      if (v4)
      {
        id v23 = v22;
        BOOL v19 = __OFSUB__(v4--, 1);
        if (v19) {
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v24 = *((void *)v6 + 3);
        if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_48;
        }
        int64_t v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (v25 <= 1) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = v25;
        }
        _ss23_ContiguousArrayStorageCySo18NSNotificationNameaGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: AccessibilityNode), MEMORY[0x1E4FBBE00]);
        uint64_t v27 = (char *)swift_allocObject();
        int64_t v28 = _swift_stdlib_malloc_size_2(v27);
        uint64_t v29 = v28 - 32;
        if (v28 < 32) {
          uint64_t v29 = v28 - 17;
        }
        uint64_t v30 = v29 >> 4;
        *((void *)v27 + 2) = v26;
        *((void *)v27 + 3) = 2 * (v29 >> 4);
        double v31 = v27 + 32;
        uint64_t v32 = *((void *)v6 + 3) >> 1;
        unint64_t v21 = &v27[16 * v32 + 32];
        uint64_t v33 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
        if (*((void *)v6 + 2))
        {
          CGFloat v34 = v6 + 32;
          if (v27 != v6 || v31 >= &v34[16 * v32]) {
            memmove(v31, v34, 16 * v32);
          }
          id v35 = v22;
          *((void *)v6 + 2) = 0;
        }
        else
        {
          id v36 = v22;
        }
        swift_release();
        unint64_t v6 = v27;
        BOOL v19 = __OFSUB__(v33, 1);
        uint64_t v4 = v33 - 1;
        if (v19) {
          goto LABEL_46;
        }
      }
      *(void *)unint64_t v21 = v20;
      *((void *)v21 + 1) = v22;
      v21 += 16;
      ++v20;
    }
    while (v2 != v20);
LABEL_44:
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
LABEL_50:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    unint64_t v6 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v37 = *((void *)v6 + 3);
  if (v37 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v38 = v37 >> 1;
  BOOL v19 = __OFSUB__(v38, v4);
  uint64_t v39 = v38 - v4;
  if (!v19)
  {
    *((void *)v6 + 2) = v39;
    return (uint64_t)v6;
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

ValueMetadata *type metadata accessor for IsSelectionEnabledTraitKey()
{
  return &type metadata for IsSelectionEnabledTraitKey;
}

uint64_t protocol witness for RootTransformProvider.rootTransform() in conformance _UIHostingView<A>()
{
  return _UIHostingView.rootTransform()();
}

uint64_t _UIHostingView.rootTransform()()
{
  uint64_t v1 = v0;
  v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68));
  if ((*(unsigned char *)(v2 + 241) & 1) == 0)
  {
    *(unsigned char *)(v2 + 241) = 1;
    objc_msgSend(v0, sel__registerForGeometryChanges);
  }
  v29[0] = 0;
  v29[1] = 0;
  closure #1 in _UIHostingView.rootTransform()((int)v29, v0);
  char v3 = static SemanticFeature.isEnabled.getter();
  objc_msgSend(v1, sel_bounds);
  if (v3)
  {
    double v8 = v4;
    double v9 = v5;
    double v10 = v6;
    double v11 = v7;
    id v12 = objc_msgSend(v1, sel_window);
    if (v12)
    {
      int64_t v13 = v12;
      objc_msgSend(v1, sel_convertRect_toCoordinateSpace_, v12, v8, v9, v10, v11);
      static ScrollGeometry.rootViewTransform(contentOffset:containerSize:)();
      long long v15 = v22;
      long long v16 = v23;
      long long v17 = v24;
      long long v18 = v25;
      long long v19 = v26;
      long long v20 = v27;
      long long v21 = v28;
      ViewTransform.UnsafeBuffer.appendScrollGeometry(_:isClipped:)();
    }
    objc_msgSend(v1, sel_clipsToBounds, v15, v16, v17, v18, v19, v20, v21);
    static ScrollGeometry.rootViewTransform(contentOffset:containerSize:)();
    ViewTransform.UnsafeBuffer.appendScrollGeometry(_:isClipped:)();
  }
  else
  {
    objc_msgSend(v1, sel_clipsToBounds);
  }
  hostingViewCoordinateSpace.getter();
  ViewTransform.UnsafeBuffer.appendCoordinateSpace(id:)();
  if (one-time initialization token for UIKitHostContainerCoordinateSpace != -1) {
    swift_once();
  }
  ViewTransform.UnsafeBuffer.appendCoordinateSpace(id:)();
  ViewTransform.init()();
  return ViewTransform.append(movingContentsOf:)();
}

uint64_t @objc _UIHostingView.clipsToBounds.getter(void *a1)
{
  id v1 = a1;
  unsigned __int8 v2 = _UIHostingView.clipsToBounds.getter();

  return v2 & 1;
}

id _UIHostingView.clipsToBounds.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UIHostingView();
  return objc_msgSendSuper2(&v2, sel_clipsToBounds);
}

void closure #1 in _UIHostingView.rootTransform()(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_window);
  if (v3)
  {
    double v4 = v3;
    id v5 = objc_msgSend(v3, sel_layer);
  }
  else
  {
    id v5 = 0;
  }
  id v6 = objc_msgSend(a2, sel_layer);
  CALayerMapGeometry();
}

uint64_t base witness table accessor for _AttributeBody in CoordinateSpaceTransform<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of BarAppearanceBridge.PlatformStorage(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in NavigationPropertiesModifier.NavigationTitleTransform.value.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>();
  MEMORY[0x1F4188790](v4 - 8);
  id v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  MEMORY[0x1F4188790](v7 - 8);
  double v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformItemList.Item?(0);
  MEMORY[0x1F4188790](v10 - 8);
  id v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PlatformItemList.Item();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  long long v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(a2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  uint64_t v17 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v9, 1, v17) == 1)
  {
    _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
LABEL_4:
    long long v18 = (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?;
    uint64_t v19 = (uint64_t)v12;
    return _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0(v19, v18);
  }
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0((uint64_t)&v9[*(int *)(v17 + 24)], (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)v9, type metadata accessor for ToolbarStorage.NavigationProperties);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1) {
    goto LABEL_4;
  }
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVWObTm_0((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  unint64_t v20 = *((void *)v16 + 41);
  if (v20 >> 2 != 0xFFFFFFFF && (v20 & 0xC000000000000000) == 0x4000000000000000)
  {
    long long v28 = (void *)*((void *)v16 + 37);
    uint64_t v65 = *((void *)v16 + 38);
    uint64_t v64 = *((void *)v16 + 39);
    uint64_t v63 = *((void *)v16 + 40);
    uint64_t v68 = *((void *)v16 + 42);
    uint64_t v67 = *((void *)v16 + 43);
    uint64_t v66 = *((void *)v16 + 44);
    uint64_t v29 = *((void *)v16 + 46);
    uint64_t v62 = *((void *)v16 + 45);
    uint64_t v30 = *((void *)v16 + 47);
    uint64_t v31 = *((void *)v16 + 48);
    uint64_t v32 = *((void *)v16 + 49);
    uint64_t v33 = (uint64_t)v28 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
    swift_beginAccess();
    _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(v33, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TextField<_TextFieldStyleLabel>);
    uint64_t v35 = *((void *)v6 + 9);
    uint64_t v34 = *((void *)v6 + 10);
    uint64_t v36 = *((void *)v6 + 11);
    uint64_t v37 = *((void *)v6 + 12);
    uint64_t v39 = *((void *)v6 + 13);
    uint64_t v38 = *((void *)v6 + 14);
    uint64_t v41 = *((void *)v6 + 15);
    uint64_t v40 = *((void *)v6 + 16);
    uint64_t v43 = *((void *)v6 + 17);
    uint64_t v42 = *((void *)v6 + 18);
    uint64_t v45 = *((void *)v6 + 19);
    uint64_t v44 = *((void *)v6 + 20);
    uint64_t v46 = *((void *)v6 + 21);
    char v47 = v6[180];
    uint64_t v59 = a1;
    unint64_t v58 = v20;
    uint64_t v57 = v28;
    uint64_t v56 = v29;
    uint64_t v55 = v30;
    uint64_t v54 = v31;
    uint64_t v53 = v32;
    if (v47)
    {
      int v48 = *((_DWORD *)v6 + 44);
      uint64_t v69 = v35;
      uint64_t v70 = v34;
      uint64_t v71 = v36;
      uint64_t v72 = v37;
      uint64_t v73 = v39;
      uint64_t v74 = v38;
      uint64_t v75 = v41;
      uint64_t v76 = v40;
      uint64_t v77 = v43;
      uint64_t v78 = v42;
      uint64_t v79 = v45;
      uint64_t v80 = v44;
      LOBYTE(v81) = v46 & 1;
      HIDWORD(v81) = HIDWORD(v46);
      __int16 v82 = v48 & 0xFF01;
      char v83 = BYTE2(v48) & 1;
      char v84 = HIBYTE(v48) & 1;
      outlined copy of PlatformItemList.Item.SystemItem(v28, v65, v64, v63, v20, v68, v67, v66, v62, v29, v30, v31, v32);
      _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_3(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](v85);
    }
    else
    {
      uint64_t v69 = v35;
      uint64_t v70 = v34;
      uint64_t v71 = v36;
      uint64_t v72 = v37;
      uint64_t v73 = v39;
      uint64_t v74 = v38;
      uint64_t v75 = v41;
      uint64_t v76 = v40;
      uint64_t v77 = v43;
      uint64_t v78 = v42;
      LOBYTE(v79) = v45 & 1;
      HIDWORD(v79) = HIDWORD(v45);
      LOWORD(v80) = v44 & 0xFF01;
      BYTE2(v80) = BYTE2(v44) & 1;
      BYTE3(v80) = BYTE3(v44) & 1;
      uint64_t v81 = v46;
      outlined copy of PlatformItemList.Item.SystemItem(v28, v65, v64, v63, v20, v68, v67, v66, v62, v29, v30, v31, v32);
      _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
      State.wrappedValue.getter();
    }
    uint64_t v24 = v85[0];
    unint64_t v26 = v85[1];
    uint64_t v49 = v85[2];
    uint64_t v50 = v85[6];
    uint64_t v61 = v85[8];
    uint64_t v60 = v85[9];
    _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TextField<_TextFieldStyleLabel>);
    outlined consume of TextFieldState.FormatActions?(v49);
    outlined consume of TextFieldState.FormatActions?(v50);
    uint64_t v51 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      uint64_t v51 = v24 & 0xFFFFFFFFFFFFLL;
    }
    if (v51)
    {
      outlined consume of PlatformItemList.Item.SystemItem?(v57, v65, v64, v63, v58, v68, v67, v66, v62, v56, v55, v54, v53);
      uint64_t v27 = MEMORY[0x1E4FBC860];
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of PlatformItemList.Item.SystemItem?(v57, v65, v64, v63, v58, v68, v67, v66, v62, v56, v55, v54, v53);
      uint64_t v24 = 0;
      unint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    a1 = v59;
  }
  else if (*(void *)v16)
  {
    id v22 = *(id *)v16;
    id v23 = objc_msgSend(v22, sel_string);
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    uint64_t v27 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v24 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  outlined copy of Text?(v24, v26, 0, v27);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI4TextV_s5NeverOytTg503_s7c129UI28NavigationPropertiesModifierV0C14TitleTransform33_4E1BC05EE94CBE2933101E32D46EF6C1LLV5valueyyAA0cF7StorageVSgzcvgyAJzcfU_yAA4E6VXEfU_AD0iN7StorageVSgTf1cn_n(v24, v26, 0, v27, a1);
  outlined consume of Text?(v24, v26, 0, v27);
  outlined consume of Text?(v24, v26, 0, v27);
  long long v18 = (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item;
  uint64_t v19 = (uint64_t)v16;
  return _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0(v19, v18);
}

void protocol witness for ImageProvider.resolve(in:) in conformance UIImage(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

void UIImage.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  unsigned int v6 = objc_msgSend(v2, sel__hasImageAsset);
  if (objc_msgSend(v3, sel_isSymbolImage)) {
    goto LABEL_5;
  }
  if (!v6) {
    goto LABEL_5;
  }
  id v7 = objc_msgSend(v3, sel_imageAsset);
  if (!v7) {
    goto LABEL_5;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v3, sel_traitCollection);
  swift_retain();
  swift_retain();
  id v10 = objc_msgSend(v9, sel__environmentWrapper);
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
  swift_release();
  swift_release();

  id v12 = objc_msgSend(v8, sel_imageWithTraitCollection_, v11);
  if (!v12) {
LABEL_5:
  }
    id v12 = v3;
  UIImage._resolve(in:)(a1, a2);
}

double UIImage._resolve(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  objc_msgSend(v2, sel_imageOrientation);
  id v6 = objc_msgSend(v2, sel_CGImage);
  if (v6)
  {
    id v7 = v6;
    char v42 = 0;
  }
  else
  {
    id v8 = objc_msgSend(v2, sel_ioSurface);
    id v7 = v8;
    if (v8)
    {
      id v9 = v8;
      char v10 = 1;
    }
    else
    {
      char v10 = -1;
    }
    char v42 = v10;
  }
  objc_msgSend(v2, sel_scale);
  objc_msgSend(v2, sel_size);
  uint64_t v11 = 0;
  unsigned int v41 = objc_msgSend(v2, sel_isSymbolImage);
  if (v41)
  {
    objc_msgSend(v2, sel_contentInsets);
    UIImage.baselineOffsetFromBottom.getter();
    Image.LayoutMetrics.init(baselineOffset:capHeight:contentSize:alignmentOrigin:)();
    uint64_t v11 = v43;
    uint64_t v37 = *(void *)&v45[16];
    uint64_t v39 = *(void *)&v45[8];
    uint64_t v35 = *(void *)&v45[24];
    uint64_t v12 = *(void *)v45;
    uint64_t v14 = *((void *)&v44 + 1);
    uint64_t v13 = v44;
    uint64_t v15 = *((void *)&v43 + 1);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    uint64_t v37 = 0;
    uint64_t v39 = 0;
    uint64_t v35 = 0;
  }
  CGSize.unapply(_:)();
  uint64_t v16 = *a1;
  uint64_t v17 = a1[1];
  *(void *)&long long v43 = *a1;
  *((void *)&v43 + 1) = v17;
  swift_retain();
  swift_retain();
  id v18 = objc_msgSend(v2, sel_renderingMode);
  if (v18 == (id)1) {
    char v19 = 1;
  }
  else {
    char v19 = 2;
  }
  if (v18 == (id)2) {
    char v19 = 0;
  }
  LOBYTE(v54) = v19;
  EnvironmentValues.imageIsTemplate(renderingMode:)();
  swift_release();
  swift_release();
  outlined copy of GraphicsImage.Contents?(v7, v42);
  UIImage.resizingInfo.getter((uint64_t)&v43);
  char v53 = 1;
  GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)();
  *(void *)&long long v43 = v54;
  BYTE8(v43) = v55;
  long long v44 = v56;
  *(void *)uint64_t v45 = v57;
  v45[8] = v58;
  *(_OWORD *)&v45[12] = v59;
  v45[28] = v60;
  long long v46 = v61;
  long long v47 = v62;
  LODWORD(v48) = v63;
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)();
  *(void *)&long long v43 = v16;
  *((void *)&v43 + 1) = v17;
  if (EnvironmentValues.shouldRedactContent.getter())
  {
    *(void *)&long long v43 = v16;
    *((void *)&v43 + 1) = v17;
    GraphicsImage.redact(in:)();
  }
  id v20 = objc_msgSend(v2, sel_accessibilityLabel, v35, v37, v39);
  if (v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    uint64_t v24 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  unint64_t v25 = v54;
  char v26 = v55;
  char v53 = 3;
  id v27 = v3;
  outlined copy of GraphicsImage.Contents?(v25, v26);
  outlined copy of Text?(v21, v23, 0, v24);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)();
  if (v41)
  {
    swift_release();
    long long v28 = (void *)swift_allocObject();
    v28[2] = v11;
    v28[3] = v15;
    v28[4] = v13;
    v28[5] = v14;
    v28[6] = v12;
    v28[7] = v40;
    v28[8] = v38;
    v28[9] = v36;
    outlined consume of Text?(v21, v23, 0, v24);
    outlined consume of GraphicsImage.Contents?(v7, v42);
    outlined consume of GraphicsImage.Contents?(v25, v26);
    *(void *)&long long v51 = v28;
  }
  else
  {
    outlined consume of GraphicsImage.Contents?(v25, v26);
    outlined consume of GraphicsImage.Contents?(v7, v42);
    outlined consume of Text?(v21, v23, 0, v24);
  }
  long long v29 = v51;
  *(_OWORD *)(a2 + 128) = v50;
  *(_OWORD *)(a2 + 144) = v29;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)v52;
  *(_DWORD *)(a2 + 175) = *(_DWORD *)&v52[15];
  long long v30 = v47;
  *(_OWORD *)(a2 + 64) = v46;
  *(_OWORD *)(a2 + 80) = v30;
  long long v31 = v49;
  *(_OWORD *)(a2 + 96) = v48;
  *(_OWORD *)(a2 + 112) = v31;
  long long v32 = v44;
  *(_OWORD *)a2 = v43;
  *(_OWORD *)(a2 + 16) = v32;
  double result = *(double *)v45;
  long long v34 = *(_OWORD *)&v45[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v45;
  *(_OWORD *)(a2 + 48) = v34;
  return result;
}

id UIImage.resizingInfo.getter@<X0>(uint64_t a1@<X8>)
{
  id result = objc_msgSend(v1, sel_capInsets);
  if (v7 == *MEMORY[0x1E4FB2848]
    && v4 == *(double *)(MEMORY[0x1E4FB2848] + 8)
    && v5 == *(double *)(MEMORY[0x1E4FB2848] + 16)
    && v6 == *(double *)(MEMORY[0x1E4FB2848] + 24))
  {
    char v19 = 2;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    objc_msgSend(v1, sel_capInsets);
    uint64_t v12 = v11;
    objc_msgSend(v1, sel_capInsets);
    uint64_t v14 = v13;
    objc_msgSend(v1, sel_capInsets);
    uint64_t v16 = v15;
    objc_msgSend(v1, sel_capInsets);
    uint64_t v18 = v17;
    id result = objc_msgSend(v1, sel_resizingMode);
    char v19 = result != 0;
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v18;
  *(unsigned char *)(a1 + 32) = v19;
  return result;
}

double specialized static PlatformViewRepresentable._makeView(view:inputs:)@<D0>(int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for UIKitAdaptableTabView(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    *(void *)&v71[56] = *(void *)&v75[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    *(_DWORD *)&v71[48] = 0;
    *(_DWORD *)&v71[52] = 0;
    v71[56] = 1;
    *(void *)&v71[64] = 0;
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    *(void *)&v71[56] = *(void *)&v75[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    *(_DWORD *)&v71[48] = 0;
    *(_DWORD *)&v71[52] = 0;
    v71[56] = 1;
    *(void *)&v71[64] = 0;
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for PlatformTextFieldAdaptor(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for UIKitSearchBarAdaptor(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>((unint64_t *)&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for UIKitCalendarViewRepresentable(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    *(void *)&v71[56] = *(void *)&v75[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    *(_DWORD *)&v71[48] = 0;
    *(_DWORD *)&v71[52] = 0;
    v71[56] = 1;
    *(void *)&v71[64] = 0;
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for TextViewAdaptor(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    *(void *)&v71[56] = *(void *)&v75[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    *(_DWORD *)&v71[48] = 0;
    *(_DWORD *)&v71[52] = 0;
    v71[56] = 1;
    *(void *)&v71[64] = 0;
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    *(void *)&v71[56] = *(void *)&v75[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    *(_DWORD *)&v71[48] = 0;
    *(_DWORD *)&v71[52] = 0;
    v71[56] = 1;
    *(void *)&v71[64] = 0;
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    *(void *)&v71[56] = *(void *)&v75[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    *(_DWORD *)&v71[48] = 0;
    *(_DWORD *)&v71[52] = 0;
    v71[56] = 1;
    *(void *)&v71[64] = 0;
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    *(void *)&v71[56] = *(void *)&v75[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    *(_DWORD *)&v71[48] = 0;
    *(_DWORD *)&v71[52] = 0;
    v71[56] = 1;
    *(void *)&v71[64] = 0;
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for UIKitTextViewAdaptor(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<KitRepresentable>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for KitRepresentable(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<KitRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for UIKitRichTextEditor(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    *(void *)&v71[56] = *(void *)&v75[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    *(_DWORD *)&v71[48] = 0;
    *(_DWORD *)&v71[52] = 0;
    v71[56] = 1;
    *(void *)&v71[64] = 0;
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

{
  long long v6;
  long long v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  char v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  uint64_t v68;
  int v69;
  long long v70;
  unsigned char v71[72];
  int v72;
  uint64_t v73;
  long long v74;
  unsigned char v75[68];
  long long v76;
  unsigned char v77[32];
  unsigned char v78[36];
  uint64_t v79;

  uint64_t v79 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v70)
  {
    _ViewOutputs.init()();
    *(void *)&long long v70 = *(void *)(a2 + 48);
    DWORD2(v70) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v12 = v70;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v13;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v14;
      LODWORD(v74) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v70) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
      unsigned int v15 = _GraphValue.value.getter();
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v16;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v17;
      unsigned int v18 = _ViewInputs.animatedPosition()();
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v19;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v70 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v71 = v20;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v71[32] = v22;
      *(_OWORD *)&v71[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v71[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)uint64_t v71 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v70 = __PAIR64__(v15, v12);
      *((void *)&v70 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)uint64_t v71 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformArchivedDisplayList<A>, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v70) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(void *)a3 = v76;
    double result = *((double *)&v76 + 1);
    a3[1] = *((double *)&v76 + 1);
  }
  else
  {
    uint64_t v45 = a3;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v75[32] = v6;
    *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v74 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v75 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    uint64_t v47 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v46 = swift_allocObject();
    type metadata accessor for UIKitDatePickerRepresentable(0);
    static DynamicPropertyCache.fields(of:)();
    char v43 = v71[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    int v42 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    int v41 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v71[20] = *(_DWORD *)&v75[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)uint64_t v71 = v42;
    *(_DWORD *)&v71[8] = v41;
    *(_DWORD *)&v71[12] = v74;
    *(_DWORD *)&v71[16] = 0;
    *(void *)&v71[24] = v47;
    *(void *)&v71[32] = v46;
    memset(&v71[48], 0, 24);
    int v72 = 0;
    uint64_t v73 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    long long v76 = 0uLL;
    LODWORD(v62) = a1;
    v71[0] = v43;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    unsigned int v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    int v48 = v70;
    int v10 = static AGAttributeFlags.transactional.getter();
    int v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11) {
      int v24 = DWORD2(v74);
    }
    else {
      int v24 = DWORD2(v74);
    }
    *(void *)&long long v70 = v74;
    DWORD2(v70) = v24;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_DWORD *)&v71[8] = *(_DWORD *)&v75[8];
    *(_DWORD *)&v71[12] = *(_DWORD *)&v75[12];
    *(void *)&v71[16] = *(void *)&v75[16];
    *(void *)&v71[24] = *(void *)&v75[24];
    *(void *)&v71[32] = *(void *)&v75[32];
    *(void *)&v71[40] = *(void *)&v75[40];
    *(_DWORD *)&v71[48] = *(_DWORD *)&v75[48];
    *(_DWORD *)&v71[52] = *(_DWORD *)&v75[52];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    AGGraphSetFlags();
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int v44 = v9;
    _ViewInputs.time.getter();
    uint64_t v62 = v74;
    int v63 = v24;
    uint64_t v64 = *(void *)v75;
    long long v65 = *(_OWORD *)&v75[8];
    long long v66 = *(_OWORD *)&v75[24];
    long long v67 = *(_OWORD *)&v75[40];
    uint64_t v68 = *(void *)&v75[56];
    int v69 = *(_DWORD *)&v75[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
    LODWORD(v76) = v48;
    *(void *)uint64_t v71 = *(void *)v75;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v75[24];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v75[40];
    *(void *)&v71[56] = *(void *)&v75[56];
    *(_DWORD *)&v71[64] = *(_DWORD *)&v75[64];
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v70 = *(void *)&v75[32];
    DWORD2(v70) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
      unsigned int v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v70 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph8ExternalVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (void (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v27 = outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
      *(void *)&long long v70 = *(void *)&v75[32];
      DWORD2(v70) = *(_DWORD *)&v75[40];
      MEMORY[0x1F4188790](v27);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t v30 = swift_bridgeObjectRelease();
      *(void *)&long long v70 = v28;
      DWORD2(v70) = v29;
      MEMORY[0x1F4188790](v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)&v75[32];
      int v29 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v70 = v28;
    DWORD2(v70) = v29;
    uint64_t v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    int v32 = v29;
    uint64_t v33 = v28;
    if (v31)
    {
      *(void *)&long long v70 = v74;
      DWORD2(v70) = DWORD2(v74);
      *(_OWORD *)&v71[8] = *(_OWORD *)&v75[8];
      *(void *)uint64_t v71 = *(void *)v75;
      *(void *)&v71[24] = *(void *)&v75[24];
      *(void *)&v71[32] = v28;
      *(_DWORD *)&v71[40] = v29;
      *(_OWORD *)&v71[44] = *(_OWORD *)&v75[44];
      *(void *)&v71[60] = *(void *)&v75[60];
      LODWORD(v76) = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v70, v34, (uint64_t)v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      long long v76 = v51[0];
      *(_OWORD *)uint64_t v77 = v51[1];
      *(void *)&v77[16] = v52;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance ViewResponderFilter<A>, (void (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v76) = 0;
      _ViewOutputs.subscript.setter();
      uint64_t v31 = outlined release of ViewResponderFilter<A>((uint64_t)v51);
      uint64_t v33 = *(void *)&v75[32];
      int v32 = *(_DWORD *)&v75[40];
    }
    *(void *)&long long v76 = v28;
    DWORD2(v76) = v29;
    MEMORY[0x1F4188790](v31);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    *(void *)&long long v76 = v33;
    DWORD2(v76) = v32;
    MEMORY[0x1F4188790](v35);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v77[16] = *(_OWORD *)&v75[16];
    *(_OWORD *)uint64_t v78 = *(_OWORD *)&v75[32];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v75[48];
    *(_DWORD *)&v78[32] = *(_DWORD *)&v75[64];
    long long v76 = v74;
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v76, v44, (uint64_t)&v49);
    PreferencesInputs.remove<A>(_:)();
    unint64_t v53 = v49;
    double v54 = v50;
    uint64_t v36 = _ViewOutputs.subscript.getter();
    unint64_t v37 = *(void *)&v75[32];
    int v38 = *(_DWORD *)&v75[40];
    unint64_t v53 = *(void *)&v75[32];
    LODWORD(v54) = *(_DWORD *)&v75[40];
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v53) = 1;
      _ViewOutputs.subscript.setter();
    }
    unint64_t v53 = v76;
    LODWORD(v54) = DWORD2(v76);
    uint64_t v55 = *(void *)v77;
    long long v56 = *(_OWORD *)&v77[8];
    uint64_t v57 = *(void *)&v77[24];
    unint64_t v58 = v37;
    int v59 = v38;
    long long v60 = *(_OWORD *)&v78[12];
    uint64_t v61 = *(void *)&v78[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v53 = v37;
    LODWORD(v54) = v38;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v36 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v53 = v49;
      double v54 = v50;
      uint64_t v39 = _ViewOutputs.subscript.getter();
      unsigned int v40 = *MEMORY[0x1E4F4E7A0];
      if ((v39 & 0x100000000) == 0) {
        unsigned int v40 = v39;
      }
      unint64_t v53 = __PAIR64__(v40, v36);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v53) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v45 = v49;
    double result = v50;
    v45[1] = v50;
  }
  return result;
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t NavigationTitleBinder.updateValue()()
{
  uint64_t v1 = v0;
  int v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v2;
    *(void *)(v0 + 16) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 24) = 0;
    outlined consume of NavigationTitleStorage??(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
    *(void *)(v0 + 32) = 0;
    *(void *)(v0 + 40) = 0;
    *(void *)(v0 + 48) = 0;
    *(void *)(v0 + 56) = 2;
    *(void *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = 0;
    *(void *)(v0 + 64) = 0;
    *(unsigned char *)(v0 + 88) = 0;
  }
  type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  char v5 = v4;
  uint64_t result = _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(Value, (uint64_t)v79, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  if (v5)
  {
    uint64_t v55 = *(void *)(Value + 8);
    uint64_t v56 = *(void *)Value;
    uint64_t v53 = *(void *)(Value + 24);
    uint64_t v54 = *(void *)(Value + 16);
    uint64_t v51 = *(void *)(Value + 40);
    uint64_t v52 = *(void *)(Value + 32);
    uint64_t v7 = *(void *)(Value + 48);
    char v57 = *(unsigned char *)(Value + 56);
    uint64_t v9 = *(void *)(v1 + 32);
    uint64_t v8 = *(void *)(v1 + 40);
    uint64_t v11 = *(void *)(v1 + 48);
    uint64_t v10 = *(void *)(v1 + 56);
    uint64_t v12 = *(void *)(v1 + 64);
    uint64_t v13 = *(void *)(v1 + 80);
    char v14 = *(unsigned char *)(v1 + 88);
    uint64_t v49 = v9;
    uint64_t v50 = v7;
    char v47 = v11;
    uint64_t v48 = v8;
    uint64_t v45 = v12;
    uint64_t v46 = v10;
    if ((unint64_t)(v10 - 1) >= 2)
    {
      uint64_t v15 = *(void *)(v1 + 72);
      outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = 0;
      char v14 = 0;
      uint64_t v10 = 1;
    }
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v79, (uint64_t)v80, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
    uint64_t v16 = v81;
    char v58 = v14;
    if (v81 == 1)
    {
      if (v10 == 1)
      {
        long long v17 = outlined copy of NavigationTitleStorage?;
        return outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))v17);
      }
      char v24 = 0;
      uint64_t v23 = 0;
      uint64_t v22 = 0;
      uint64_t v21 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = v80[0];
      uint64_t v18 = v80[1];
      uint64_t v20 = v80[2];
      uint64_t v21 = v82;
      uint64_t v22 = v83;
      uint64_t v23 = v84;
      char v24 = v85;
      if (v10 == 1) {
        goto LABEL_15;
      }
    }
    uint64_t v63 = v9;
    uint64_t v64 = v8;
    uint64_t v65 = v11;
    uint64_t v66 = v10;
    uint64_t v67 = v12;
    uint64_t v68 = v15;
    uint64_t v69 = v13;
    char v70 = v14;
    uint64_t v25 = v10;
    if (v81 != 1)
    {
      v59[0] = v19;
      v59[1] = v18;
      v59[2] = v20;
      v59[3] = v81;
      v59[4] = v21;
      char v60 = v22;
      uint64_t v61 = v23;
      char v62 = v24;
      outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
      outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
      outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
      outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
      char v35 = specialized static EquatableNavigationTitle.== infix(_:_:)(&v63, v59);
      uint64_t v27 = v67;
      outlined consume of Text?(v63, v64, v65, v66);
      outlined consume of Transaction?(v27);
      swift_release();
      uint64_t v37 = v9;
      uint64_t v39 = v8;
      char v41 = v11;
      uint64_t v43 = v12;
      char v28 = v11;
      uint64_t v26 = v25;
      outlined consume of NavigationTitleStorage?(v9, v8, v28, v25, v12);
      if (v35)
      {
LABEL_19:
        outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined consume of NavigationTitleStorage?);
        outlined consume of NavigationTitleStorage?(v37, v39, v41, v26, v43);
        long long v17 = outlined consume of NavigationTitleStorage?;
        return outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))v17);
      }
LABEL_17:
      outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
      outlined consume of NavigationTitleStorage??(v49, v48, v47, v46, v45);
      *(void *)(v1 + 32) = v56;
      *(void *)(v1 + 40) = v55;
      *(void *)(v1 + 48) = v54;
      *(void *)(v1 + 56) = v53;
      *(void *)(v1 + 64) = v52;
      *(void *)(v1 + 72) = v51;
      *(void *)(v1 + 80) = v50;
      *(unsigned char *)(v1 + 88) = v57;
      if (UpdateCycleDetector.dispatch(label:isDebug:)())
      {
        AGGraphClearUpdate();
        int v29 = (uint64_t *)AGGraphGetValue();
        uint64_t v31 = *v29;
        uint64_t v30 = v29[1];
        swift_retain();
        AGGraphSetUpdate();
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = v31;
        *(void *)(v32 + 24) = v30;
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v79, v32 + 32, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
        outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
        swift_retain();
        static Update.enqueueAction(_:)();
        outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined consume of NavigationTitleStorage?);
        outlined consume of NavigationTitleStorage?(v37, v39, v41, v26, v43);
        outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined consume of NavigationTitleStorage?);
        swift_release();
        return swift_release();
      }
      goto LABEL_19;
    }
    char v44 = v24;
    uint64_t v40 = v22;
    uint64_t v42 = v23;
    uint64_t v36 = v20;
    uint64_t v38 = v21;
    uint64_t v33 = v19;
    uint64_t v34 = v18;
    outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    char v14 = v58;
    outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
    outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
    outlined consume of Text?(v9, v8, v11, v10);
    outlined consume of Transaction?(v12);
    swift_release();
    uint64_t v19 = v33;
    uint64_t v18 = v34;
    uint64_t v20 = v36;
    uint64_t v21 = v38;
    uint64_t v22 = v40;
    uint64_t v23 = v42;
    char v24 = v44;
LABEL_15:
    uint64_t v37 = v9;
    uint64_t v39 = v8;
    uint64_t v63 = v9;
    uint64_t v64 = v8;
    char v41 = v11;
    uint64_t v43 = v12;
    uint64_t v65 = v11;
    uint64_t v66 = v10;
    uint64_t v26 = v10;
    uint64_t v67 = v12;
    uint64_t v68 = v15;
    uint64_t v69 = v13;
    char v70 = v14;
    uint64_t v71 = v19;
    uint64_t v72 = v18;
    uint64_t v73 = v20;
    uint64_t v74 = v16;
    uint64_t v75 = v21;
    uint64_t v76 = v22;
    uint64_t v77 = v23;
    char v78 = v24;
    outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    outlined retain of NavigationTitleStorage?((uint64_t)v79, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    outlined release of (EquatableNavigationTitle?, EquatableNavigationTitle?)(&v63);
    goto LABEL_17;
  }
  return result;
}

uint64_t outlined retain of NavigationTitleStorage?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of NavigationTitleStorage??(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 != 2) {
    return outlined consume of NavigationTitleStorage?(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t outlined consume of NavigationTitleStorage?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 != 1)
  {
    outlined consume of Text?(result, a2, a3, a4);
    outlined consume of Transaction?(a5);
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void static UIViewRepresentable._makeView(view:inputs:)(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  long long v15 = *(_OWORD *)(a1 + 5);
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  int v11 = *((_DWORD *)a1 + 20);
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v12 = type metadata accessor for PlatformViewRepresentableAdaptor();
    type metadata accessor for _GraphValue();
    _GraphValue.unsafeBitCast<A>(to:)();
    uint64_t v16 = v3;
    LODWORD(v17) = v4;
    uint64_t v18 = v5;
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    long long v21 = v15;
    uint64_t v22 = v8;
    uint64_t v23 = v9;
    uint64_t v24 = v10;
    int v25 = v11;
    uint64_t WitnessTable = swift_getWitnessTable();
    static PlatformViewRepresentable._makeView(view:inputs:)(&v26, (uint64_t)&v16, v12, WitnessTable, a2);
  }
}

uint64_t type metadata accessor for PlatformViewRepresentableAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined copy of NavigationTitleStorage?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 != 1)
  {
    outlined copy of Text?(result, a2, a3, a4);
    outlined copy of Transaction?(a5);
    return swift_retain();
  }
  return result;
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>(a1, (uint64_t (*)(void))type metadata accessor for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void storeEnumTagSinglePayload for GeometryActionBinder(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v7 + 64);
  if (v9 <= 0xFE) {
    unsigned int v12 = 254;
  }
  else {
    unsigned int v12 = v9;
  }
  if (!v8) {
    ++v11;
  }
  size_t v13 = ((v11 + v10 + ((v11 + v10) & ~v10)) & ~v10) + v11;
  size_t v14 = ((v10
        + ((((((v10 + 9) & ~v10) + ((v10 + 28) & ~(v10 | 3)) + v13 + 19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 4) & ~v10)
      + v11;
  if (a3 <= v12) {
    goto LABEL_16;
  }
  if (v14 <= 3)
  {
    unsigned int v15 = ((a3 - v12 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v15))
    {
      int v6 = 4;
      if (v12 >= a2) {
        goto LABEL_24;
      }
      goto LABEL_17;
    }
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
LABEL_16:
    if (v12 >= a2) {
      goto LABEL_24;
    }
    goto LABEL_17;
  }
  int v6 = 1;
  if (v12 >= a2)
  {
LABEL_24:
    switch(v6)
    {
      case 1:
        a1[v14] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_28;
      default:
LABEL_28:
        if (a2)
        {
LABEL_29:
          unint64_t v19 = (((((((((((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                 + (v10 | 3)
                 + 4) & ~(v10 | 3))
               + 7) & 0xFFFFFFFFFFFFFFFCLL;
          if (v9 > 0xFE)
          {
            uint64_t v20 = (unsigned char *)((v10 + v19 + 5) & ~v10);
            if (v9 >= a2)
            {
              uint64_t v24 = *(void (**)(unint64_t, void))(v7 + 56);
              v24((v10 + v19 + 5) & ~v10, a2 + 1);
            }
            else
            {
              if (v13 <= 3) {
                int v21 = ~(-1 << (8 * v13));
              }
              else {
                int v21 = -1;
              }
              if (v13)
              {
                int v22 = v21 & (~v9 + a2);
                if (v13 <= 3) {
                  int v23 = v13;
                }
                else {
                  int v23 = 4;
                }
                bzero(v20, v13);
                switch(v23)
                {
                  case 2:
                    *(_WORD *)uint64_t v20 = v22;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v20 = v22;
                    v20[2] = BYTE2(v22);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v20 = v22;
                    break;
                  default:
                    *uint64_t v20 = v22;
                    break;
                }
              }
            }
          }
          else
          {
            *(unsigned char *)(((((((((((((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                               + 7) & 0xFFFFFFFFFFFFFFFCLL)
                             + 7) & 0xFFFFFFFFFFFFFFFCLL)
                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                         + (v10 | 3)
                         + 4) & ~(v10 | 3))
                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + 4) = a2 + 1;
          }
        }
        break;
    }
    return;
  }
LABEL_17:
  unsigned int v16 = ~v12 + a2;
  if (v14 < 4)
  {
    int v17 = (v16 >> (8 * v14)) + 1;
    if (v14)
    {
      int v18 = v16 & ~(-1 << (8 * v14));
      bzero(a1, v14);
      if (v14 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if (v14 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
  }
  else
  {
    bzero(a1, v14);
    *(_DWORD *)a1 = v16;
    int v17 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v14] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v17;
      break;
    case 3:
LABEL_56:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v14] = v17;
      break;
    default:
      return;
  }
}

uint64_t assignWithTake for MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  int v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_weakTakeAssign();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  char v7 = *(unsigned char *)(a2 + 120);
  uint64_t v8 = *(void *)(a1 + 112);
  char v9 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for AnimatedValuePlaybackConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t initializeWithCopy for MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  char v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  id v7 = v5;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  char v10 = *(unsigned char *)(a2 + 120);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(void **)(a2 + 40);
  char v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_weakCopyAssign();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  uint64_t v7 = *(void *)(a2 + 112);
  char v8 = *(unsigned char *)(a2 + 120);
  outlined copy of Environment<Bool>.Content(v7, v8);
  uint64_t v9 = *(void *)(a1 + 112);
  char v10 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 112) = v7;
  *(unsigned char *)(a1 + 120) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  uint64_t v11 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v11;
  LOBYTE(v11) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = v11;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t View.presentationSource<A>(id:cornerRadius:style:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  char v7 = *a2;
  *(double *)&v9[2] = a7;
  char v10 = v7;
  return View.presentationSource<A>(id:configuration:)(a1, (uint64_t)partial apply for closure #1 in View.presentationSource<A>(id:cornerRadius:style:), (uint64_t)v9, a3, a4, a5, a6);
}

uint64_t View.presentationSource<A>(id:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a1;
  if (one-time initialization token for _sharedNamespaceID != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  v16[2] = a2;
  v16[3] = a3;
  return View.matchedTransitionSource<A, B>(id:in:configuration:)(v13, v14, (uint64_t)partial apply for closure #1 in View.presentationSource<A>(id:configuration:), (uint64_t)v16, a4, a5, (uint64_t)&unk_1ED42FB90, a6, a7, (uint64_t)&protocol witness table for BridgedConfiguration);
}

uint64_t View.matchedTransitionSource<A, B>(id:in:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v19 = a8;
  uint64_t v18 = a5;
  uint64_t v12 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v26 = 0u;
  char v29 = 1;
  v15();
  (*(void (**)(long long *, uint64_t, uint64_t))(a10 + 8))(&v26, a7, a10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a7);
  _convertToAnyHashable<A>(_:)();
  v20[0] = a2;
  long long v21 = v26;
  long long v22 = v27;
  uint64_t v23 = *(void *)v28;
  long long v24 = *(_OWORD *)&v28[8];
  char v25 = v29;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113660](v20, v18, &type metadata for MatchedTransitionSourceModifier, v19);
  outlined destroy of MatchedTransitionSourceModifier((uint64_t)v20);
  swift_release();
  return swift_release();
}

uint64_t destroy for _ResolvedMatchedTransitionSourceConfiguration()
{
  swift_release();

  return swift_release();
}

uint64_t outlined destroy of MatchedTransitionSourceModifier(uint64_t a1)
{
  return a1;
}

uint64_t destroy for MatchedTransitionSourceModifier(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_release();

  return swift_release();
}

double partial apply for closure #1 in View.presentationSource<A>(id:configuration:)@<D0>(uint64_t a1@<X8>)
{
  void (*v3)(_OWORD *__return_ptr, _OWORD *);
  uint64_t v4;
  double result;
  char v6;
  long long v7;
  _OWORD v8[3];
  char v9;
  _OWORD v10[2];
  uint64_t v11;
  double v12;
  char v13;

  uint64_t v3 = *(void (**)(_OWORD *__return_ptr, _OWORD *))(v1 + 16);
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 1;
  v3(v10, v8);
  long long v4 = v11;
  uint64_t result = v12;
  id v6 = v13;
  char v7 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = v4;
  *(double *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 48) = v6;
  return result;
}

uint64_t protocol witness for MatchedTransitionSourceConfiguration._update(configuration:) in conformance BridgedConfiguration(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[5];
  char v8 = *((unsigned char *)v1 + 48);
  *(void *)(a1 + 32) = v1[4];
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  if (v3)
  {
    swift_retain();
    uint64_t result = swift_release();
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

uint64_t closure #1 in View.presentationSource<A>(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  *(unsigned char *)(a2 + 48) = v4;
  swift_retain();

  return swift_retain();
}

uint64_t CombinedMatchedTransitionSourceConfiguration._update(configuration:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2[5] + 8))(a1, a2[3]);
}

__n128 protocol witness for MatchedTransitionSourceConfiguration._update(configuration:) in conformance CornerConfiguration(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = v1[1].n128_u8[0];
  __n128 result = *v1;
  *(__n128 *)(a1 + 40) = *v1;
  return result;
}

void specialized CellConfiguration.updateValues<A>(pre:post:)(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3 = v2;
  int v4 = a1;
  int v5 = a2;
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  uint64_t v58 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v57 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  char v10 = (char *)&v51 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v51 - v12;
  type metadata accessor for PreferenceValues.Value<FocusItem?>(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8);
  unsigned int v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = type metadata accessor for UICellConfigurationState();
  MEMORY[0x1F4188790](v20);
  long long v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  if (v4 == 2)
  {
    if (v5 == 2) {
      return;
    }
  }
  else if (v5 != 2 && ((((v4 & 1) == 0) ^ v5) & 1) != 0)
  {
    return;
  }
  uint64_t v55 = (char *)&v51 - v24;
  uint64_t v56 = v10;
  uint64_t v53 = v13;
  uint64_t v26 = v25;
  uint64_t v27 = v6;
  uint64_t v54 = (int *)type metadata accessor for CellConfiguration();
  int v28 = *(unsigned __int8 *)(v3 + v54[7]);
  uint64_t v29 = v26;
  uint64_t v30 = (uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v28 == 2)
  {
    outlined init with copy of UICellConfigurationState?(v3, (uint64_t)v19);
    uint64_t v31 = v27;
    uint64_t v32 = (uint64_t)v56;
    int v33 = (*v30)(v19, 1, v20);
  }
  else
  {
    outlined init with copy of UICellConfigurationState?(v3, (uint64_t)v16);
    uint64_t v34 = *v30;
    if ((*v30)(v16, 1, v20) == 1)
    {
      outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v16, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v19, 1, 1, v20);
LABEL_16:
      outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v19, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
      return;
    }
    uint64_t v52 = v3;
    char v35 = v16;
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v36(v22, v35, v20);
    if (v28)
    {
      UICellConfigurationState.isDisabled.setter();
      uint64_t v40 = v27;
      uint64_t v32 = (uint64_t)v56;
      uint64_t v39 = v36;
      uint64_t v31 = v40;
    }
    else
    {
      char v37 = UICellConfigurationState.isHighlighted.getter();
      uint64_t v38 = v27;
      uint64_t v32 = (uint64_t)v56;
      uint64_t v39 = v36;
      uint64_t v31 = v38;
      if (v37)
      {
        UICellConfigurationState.isHighlighted.setter();
        UICellConfigurationState.isSelected.setter();
      }
    }
    v39(v19, v22, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v19, 0, 1, v20);
    uint64_t v3 = v52;
    int v33 = v34(v19, 1, v20);
  }
  if (v33 == 1) {
    goto LABEL_16;
  }
  char v41 = v55;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v55, v19, v20);
  uint64_t v42 = v54;
  if (*(unsigned char *)(v3 + v54[5]) == 1)
  {
    uint64_t v43 = v3;
    char v44 = (void (**)(uint64_t, uint64_t))(v58 + 8);
    if (*(unsigned char *)(v3 + v54[6])) {
      static UIListContentConfiguration.header()();
    }
    else {
      static UIListContentConfiguration.cell()();
    }
    uint64_t v60 = v20;
    uint64_t v61 = MEMORY[0x1E4FB0EF8];
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v59);
    uint64_t v49 = v55;
    (*(void (**)(uint64_t *, char *, uint64_t))(v29 + 16))(boxed_opaque_existential_1, v55, v20);
    uint64_t v50 = (uint64_t)v53;
    UIListContentConfiguration.updated(for:)();
    (*v44)(v32, v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    specialized CellConfiguration.Values.init(_:)(v50, v59);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v49, v20);
    uint64_t v47 = v43 + v42[9];
  }
  else
  {
    uint64_t v45 = v57;
    static UIListContentConfiguration.cell()();
    uint64_t v60 = v20;
    uint64_t v61 = MEMORY[0x1E4FB0EF8];
    uint64_t v46 = __swift_allocate_boxed_opaque_existential_1(v59);
    (*(void (**)(uint64_t *, char *, uint64_t))(v29 + 16))(v46, v41, v20);
    UIListContentConfiguration.updated(for:)();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    specialized CellConfiguration.Values.init(_:)(v32, v59);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v41, v20);
    uint64_t v47 = v3 + v42[9];
  }
  outlined assign with take of CellConfiguration.Values((uint64_t)v59, v47);
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t (**v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, char *, uint64_t);
  char v40;
  char *v41;
  int *v42;
  uint64_t v43;
  char v44;
  void (**v45)(uint64_t, uint64_t);
  uint64_t *v46;
  uint64_t v47;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v49;
  char *v50;
  int *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;

  uint64_t v3 = a1;
  int v4 = type metadata accessor for UIListContentConfiguration();
  uint64_t v56 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v50 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v50 - v11;
  type metadata accessor for PreferenceValues.Value<FocusItem?>(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v50 - v17;
  uint64_t v19 = type metadata accessor for UICellConfigurationState();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  long long v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  if (v3 != a2)
  {
    uint64_t v53 = v9;
    uint64_t v54 = v6;
    uint64_t v52 = (char *)&v50 - v25;
    uint64_t v26 = v24;
    uint64_t v50 = v12;
    uint64_t v55 = v4;
    uint64_t v51 = (int *)type metadata accessor for CellConfiguration();
    uint64_t v27 = *(unsigned __int8 *)(v57 + v51[7]);
    int v28 = v20;
    uint64_t v29 = (uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
    if (v27 == 2)
    {
      uint64_t v30 = v57;
      outlined init with copy of UICellConfigurationState?(v57, (uint64_t)v18);
      uint64_t v32 = (uint64_t)v53;
      uint64_t v31 = v54;
      int v33 = v26;
      char v35 = v55;
      uint64_t v34 = v56;
      uint64_t v36 = (*v29)(v18, 1, v33);
    }
    else
    {
      outlined init with copy of UICellConfigurationState?(v57, (uint64_t)v15);
      char v37 = *v29;
      int v33 = v26;
      if ((*v29)(v15, 1, v26) == 1)
      {
        outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v15, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v18, 1, 1, v26);
LABEL_12:
        outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v18, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        return;
      }
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
      v38(v22, v15, v33);
      if (v27)
      {
        uint64_t v39 = v38;
        UICellConfigurationState.isDisabled.setter();
        uint64_t v32 = (uint64_t)v53;
        uint64_t v34 = v56;
      }
      else
      {
        uint64_t v39 = v38;
        uint64_t v40 = UICellConfigurationState.isHighlighted.getter();
        uint64_t v32 = (uint64_t)v53;
        uint64_t v34 = v56;
        if (v40)
        {
          UICellConfigurationState.isHighlighted.setter();
          UICellConfigurationState.isSelected.setter();
        }
      }
      v39(v18, v22, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v18, 0, 1, v33);
      uint64_t v30 = v57;
      uint64_t v31 = v54;
      char v35 = v55;
      uint64_t v36 = v37(v18, 1, v33);
    }
    if (v36 == 1) {
      goto LABEL_12;
    }
    char v41 = v52;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v52, v18, v33);
    uint64_t v42 = v51;
    uint64_t v43 = v30;
    if (*(unsigned char *)(v30 + v51[5]) == 1)
    {
      char v44 = *(unsigned char *)(v30 + v51[6]);
      uint64_t v45 = (void (**)(uint64_t, uint64_t))(v34 + 8);
      if (v44) {
        static UIListContentConfiguration.header()();
      }
      else {
        static UIListContentConfiguration.cell()();
      }
      int v59 = v33;
      uint64_t v60 = MEMORY[0x1E4FB0EF8];
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
      (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 16))(boxed_opaque_existential_1, v41, v33);
      uint64_t v49 = (uint64_t)v50;
      UIListContentConfiguration.updated(for:)();
      (*v45)(v32, v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      uint64_t v47 = v49;
    }
    else
    {
      static UIListContentConfiguration.cell()();
      int v59 = v33;
      uint64_t v60 = MEMORY[0x1E4FB0EF8];
      uint64_t v46 = __swift_allocate_boxed_opaque_existential_1(v58);
      (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 16))(v46, v41, v33);
      UIListContentConfiguration.updated(for:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      uint64_t v47 = v32;
    }
    specialized CellConfiguration.Values.init(_:)(v47, v58);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v41, v33);
    outlined assign with take of CellConfiguration.Values((uint64_t)v58, v43 + v42[9]);
  }
}

uint64_t outlined destroy of PreferenceValues.Value<FocusItem?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for PreferenceValues.Value<FocusItem?>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for PreferenceValues.Value<FocusItem?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t partial apply for closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:)(uint64_t a1)
{
  return closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:)(a1, *(unsigned char *)(v1 + 16));
}

ValueMetadata *type metadata accessor for NavigationSplitViewExtraWidePrimaryColumnTraitKey()
{
  return &type metadata for NavigationSplitViewExtraWidePrimaryColumnTraitKey;
}

uint64_t assignWithCopy for PickerBuilder.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for WheelPickerRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  *(unsigned char *)(*(void *)(v9 + 40) + v12) = *(unsigned char *)(*(void *)(v9 + 40) + v13);
  return a1;
}

uint64_t assignWithCopy for Tuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 50);
  swift_weakCopyAssign();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 128);
  if (!*(void *)(a1 + 128))
  {
    if (v5)
    {
      *(void *)(a1 + 128) = v5;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 104, a2 + 104);
      return a1;
    }
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 104);
    long long v7 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 104) = v6;
    *(_OWORD *)(a1 + 120) = v7;
    return a1;
  }
  if (!v5)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
  return a1;
}

uint64_t outlined init with copy of _NavigationTransitionOutputs?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _NavigationTransitionOutputs?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t View.navigationTransition<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(void *__return_ptr))(a5 + 8))(v6);
  View.preference<A>(key:value:)();
  return _s7SwiftUI28_NavigationTransitionOutputsVSgWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationTransitionOutputs?);
}

uint64_t protocol witness for NavigationTransitionStyle._outputs.getter in conformance ZoomNavigationTransitionStyle@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return outlined init with copy of AnyHashable((uint64_t)(v1 + 1), (uint64_t)(a1 + 1));
}

uint64_t outlined destroy of _NavigationTransitionOutputs?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI28_NavigationTransitionOutputsVSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for _NavigationTransitionOutputs?()
{
  if (!lazy cache variable for type metadata for _NavigationTransitionOutputs?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NavigationTransitionOutputs?);
    }
  }
}

uint64_t assignWithCopy for _NavigationTransitionStyleOutputs(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if (*(void *)(a1 + 32))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)a2 + 1);
    }
    else
    {
      _s7SwiftUI28_NavigationTransitionOutputsVSgWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for (namespace: Namespace.ID, sourceID: AnyHashable));
      long long v7 = a2[1];
      long long v6 = a2[2];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v6;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v5 = *((void *)a2 + 4);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 8, (uint64_t)a2 + 8);
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)a1 = v8;
  }
  return a1;
}

void *assignWithCopy for SelectionContainerModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  return a1;
}

uint64_t assignWithCopy for NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  long long v7 = *(void **)(a2 + 96);
  long long v8 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v7;
  id v9 = v7;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
  uint64_t v10 = *(void **)(a2 + 152);
  uint64_t v11 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v10;
  id v12 = v10;

  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_WORD *)(a1 + 218) = *(_WORD *)(a2 + 218);
  swift_weakCopyAssign();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_retain();
  swift_release();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  uint64_t v13 = *(void *)(a2 + 288);
  if (!*(void *)(a1 + 288))
  {
    if (v13)
    {
      *(void *)(a1 + 288) = v13;
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 264, a2 + 264);
      return a1;
    }
LABEL_7:
    long long v14 = *(_OWORD *)(a2 + 264);
    long long v15 = *(_OWORD *)(a2 + 280);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(_OWORD *)(a1 + 264) = v14;
    *(_OWORD *)(a1 + 280) = v15;
    return a1;
  }
  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 264);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 264), (uint64_t *)(a2 + 264));
  return a1;
}

Swift::Void __swiftcall MatchedTransitionSourceMarkingView.layoutSubviews()()
{
  v3.receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);
  MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(v0[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom]);
}

uint64_t MatchedTransitionSourceSourceMarkingEffect.needsUpdateFor(newValue:)(uint64_t a1)
{
  outlined init with copy of TableColumnList(a1, (uint64_t)v19);
  type metadata accessor for PlatformGroupFactory();
  if ((swift_dynamicCast() & 1) == 0) {
    memset(v18, 0, 137);
  }
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(v1, (uint64_t)v17);
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v18, (uint64_t)v8);
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v17, (uint64_t)v10);
  if (!v9)
  {
    outlined destroy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
    if (!(void)v11)
    {
      outlined destroy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
      char v3 = 0;
      goto LABEL_10;
    }
LABEL_9:
    outlined destroy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for (MatchedTransitionSourceSourceMarkingEffect?, MatchedTransitionSourceSourceMarkingEffect?));
    char v3 = 1;
    goto LABEL_10;
  }
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v8, (uint64_t)v7);
  if (!(void)v11)
  {
    outlined destroy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
    outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v7);
    goto LABEL_9;
  }
  v5[6] = v15;
  v6[0] = v16[0];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v16 + 9);
  v5[2] = v11;
  v5[3] = v12;
  v5[4] = v13;
  v5[5] = v14;
  v5[0] = v10[0];
  v5[1] = v10[1];
  char v2 = specialized static MatchedTransitionSourceSourceMarkingEffect.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v5);
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v7);
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
  char v3 = v2 ^ 1;
LABEL_10:
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
  return v3 & 1;
}

uint64_t outlined destroy of MatchedTransitionSourceSourceMarkingEffect?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for LocationBasedFeedbackAdaptor(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
}

void type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?()
{
  if (!lazy cache variable for type metadata for MatchedTransitionSourceSourceMarkingEffect?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MatchedTransitionSourceSourceMarkingEffect?);
    }
  }
}

uint64_t outlined init with copy of MatchedTransitionSourceSourceMarkingEffect?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for PlatformGroupFactory()
{
  unint64_t result = lazy cache variable for type metadata for PlatformGroupFactory;
  if (!lazy cache variable for type metadata for PlatformGroupFactory)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PlatformGroupFactory);
  }
  return result;
}

uint64_t specialized static MatchedTransitionSourceSourceMarkingEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || (MEMORY[0x18C1174E0](a1 + 8, a2 + 8) & 1) == 0) {
    goto LABEL_23;
  }
  char v4 = *(unsigned char *)(a2 + 64);
  if (*(unsigned char *)(a1 + 64))
  {
    if (!*(unsigned char *)(a2 + 64)) {
      return v4 & 1;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 64)) {
      goto LABEL_23;
    }
    BOOL v5 = *(float *)(a1 + 48) == COERCE_FLOAT(*(void *)(a2 + 48))
      && *(float *)(a1 + 52) == COERCE_FLOAT(HIDWORD(*(void *)(a2 + 48)));
    BOOL v6 = v5 && *(float *)(a1 + 56) == COERCE_FLOAT(*(void *)(a2 + 56));
    if (!v6 || *(float *)(a1 + 60) != COERCE_FLOAT(HIDWORD(*(void *)(a2 + 56)))) {
      goto LABEL_23;
    }
  }
  if (*(double *)(a1 + 72) != *(double *)(a2 + 72)
    || (*(double *)(a1 + 80) == *(double *)(a2 + 80) ? (BOOL v8 = *(double *)(a1 + 88) == *(double *)(a2 + 88)) : (BOOL v8 = 0),
        !v8))
  {
LABEL_23:
    char v4 = 0;
    return v4 & 1;
  }
  char v4 = *(unsigned char *)(a2 + 112);
  if (*(unsigned char *)(a1 + 112))
  {
    if (!*(unsigned char *)(a2 + 112)) {
      return v4 & 1;
    }
LABEL_33:
    char v4 = 0;
    if (*(double *)(a1 + 120) == *(double *)(a2 + 120) && *(double *)(a1 + 128) == *(double *)(a2 + 128)) {
      char v4 = *(unsigned char *)(a1 + 136) ^ *(unsigned char *)(a2 + 136) ^ 1;
    }
    return v4 & 1;
  }
  if (*(unsigned char *)(a2 + 112)) {
    goto LABEL_23;
  }
  char v4 = 0;
  uint64_t v10 = *(void *)(a2 + 96);
  if (*(float *)(a1 + 96) == *(float *)&v10 && *(float *)(a1 + 100) == *((float *)&v10 + 1))
  {
    uint64_t v11 = *(void *)(a2 + 104);
    if (*(float *)(a1 + 104) == *(float *)&v11 && *(float *)(a1 + 108) == *((float *)&v11 + 1)) {
      goto LABEL_33;
    }
  }
  return v4 & 1;
}

uint64_t assignWithCopy for _FocusableModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_retain();
  swift_release();
  return a1;
}

char *protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance MatchedTransitionSourceSourceMarkingEffect()
{
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(v0, (uint64_t)v3);
  id v1 = objc_allocWithZone((Class)type metadata accessor for MatchedTransitionSourceMarkingView());
  return MatchedTransitionSourceMarkingView.init(effect:)((uint64_t)v3);
}

char *MatchedTransitionSourceMarkingView.init(effect:)(uint64_t a1)
{
  char v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView;
  type metadata accessor for _UIGraphicsView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v7 = objc_allocWithZone(ObjCClassFromMetadata);
  BOOL v8 = v2;
  *(void *)&v2[v5] = objc_msgSend(v7, sel_init);
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView;
  *(void *)&v8[v9] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  v8[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom] = 0;
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(a1, (uint64_t)&v8[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect]);

  v23.receiver = v8;
  v23.super_class = ObjectType;
  uint64_t v10 = (char *)objc_msgSendSuper2(&v23, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v11 = objc_msgSend(v10, sel_layer);
  objc_msgSend(v11, sel_setAllowsGroupOpacity_, 0);

  id v12 = objc_msgSend(v10, sel_layer);
  objc_msgSend(v12, sel_setAllowsGroupBlending_, 0);

  id v13 = objc_msgSend(v10, sel_layer);
  objc_msgSend(v13, sel_setShadowPathIsBounds_, 1);

  uint64_t v14 = OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView;
  id v15 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView], sel_layer);
  objc_msgSend(v15, sel_setAllowsGroupOpacity_, 0);

  id v16 = objc_msgSend(*(id *)&v10[v14], sel_layer);
  objc_msgSend(v16, sel_setAllowsGroupBlending_, 0);

  id v17 = objc_msgSend(*(id *)&v10[v14], sel_layer);
  objc_msgSend(v17, sel_setShadowPathIsBounds_, 1);

  objc_msgSend(v10, sel_addSubview_, *(void *)&v10[v14]);
  uint64_t v18 = OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView;
  id v19 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView], sel_layer);
  objc_msgSend(v19, sel_setAllowsGroupOpacity_, 0);

  id v20 = objc_msgSend(*(id *)&v10[v18], sel_layer);
  objc_msgSend(v20, sel_setAllowsGroupBlending_, 0);

  id v21 = objc_msgSend(*(id *)&v10[v18], sel_layer);
  objc_msgSend(v21, sel_setShadowPathIsBounds_, 1);

  objc_msgSend(v10, sel_addSubview_, *(void *)&v10[v18]);
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect(a1);
  return v10;
}

uint64_t assignWithCopy for MatchedTransitionSourceModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t closure #1 in MatchedTransitionSourceModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  MatchedTransitionSourceModifier.makeEffect(in:)((uint64_t)v3);
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v3, a1);
  return outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v3);
}

uint64_t MatchedTransitionSourceSourceMarkingEffect.updatePlatformGroup(_:)()
{
  type metadata accessor for MatchedTransitionSourceMarkingView();
  swift_unknownObjectRetain();
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = v1;
    outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(v0, (uint64_t)v5);
    uint64_t v3 = v2 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect;
    swift_beginAccess();
    outlined assign with copy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v5, v3);
    swift_endAccess();
    MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(*(unsigned char *)(v2
                                                                             + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom));
    outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v5);
    return swift_unknownObjectRelease();
  }
  else
  {
    return swift_unknownObjectRelease();
  }
}

uint64_t outlined destroy of MatchedTransitionSourceSourceMarkingEffect(uint64_t a1)
{
  return a1;
}

id protocol witness for PlatformGroupFactory.platformGroupContainer(_:) in conformance MatchedTransitionSourceSourceMarkingEffect()
{
  type metadata accessor for MatchedTransitionSourceMarkingView();
  uint64_t v0 = *(void **)(swift_dynamicCastClassUnconditional()
                + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView);

  return v0;
}

uint64_t type metadata accessor for MatchedTransitionSourceMarkingView()
{
  return self;
}

id MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(char a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView);
  id v4 = objc_msgSend(v3, sel_layer);
  uint64_t v5 = v1 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect;
  swift_beginAccess();
  BOOL v6 = 0;
  if ((*(unsigned char *)(v5 + 112) & 1) == 0) {
    BOOL v6 = (void *)Color.Resolved.cgColor.getter();
  }
  objc_msgSend(v4, sel_setBackgroundColor_, v6);

  id v7 = objc_msgSend(v3, sel_layer);
  uint64_t v8 = *(void *)(v5 + 128);
  v30[0] = *(void *)(v5 + 120);
  v30[1] = v8;
  v30[2] = v30[0];
  v30[3] = v8;
  v30[4] = v30[0];
  v30[5] = v8;
  v30[6] = v30[0];
  v30[7] = v8;
  objc_msgSend(v7, sel_setCornerRadii_, v30);

  id v9 = objc_msgSend(v3, sel_layer);
  uint64_t v10 = (id *)MEMORY[0x1E4F39EA0];
  if (*(unsigned char *)(v5 + 136)) {
    uint64_t v10 = (id *)MEMORY[0x1E4F39EA8];
  }
  id v11 = *v10;
  objc_msgSend(v9, sel_setCornerCurve_, v11);

  int v12 = 0;
  id v13 = objc_msgSend(v3, sel_layer);
  uint64_t v14 = (void *)Color.Resolved.cgColor.getter();
  objc_msgSend(v13, sel_setShadowColor_, v14);

  id v15 = objc_msgSend(v3, sel_layer);
  objc_msgSend(v15, sel_setShadowRadius_, *(double *)(v5 + 72));

  id v16 = objc_msgSend(v3, sel_layer);
  objc_msgSend(v16, sel_setShadowOffset_, *(double *)(v5 + 80), *(double *)(v5 + 88));

  id v17 = objc_msgSend(v3, sel_layer);
  id v19 = v17;
  if ((a1 & 1) == 0 && (*(unsigned char *)(v5 + 64) & 1) == 0) {
    int v12 = *(_DWORD *)(v5 + 60);
  }
  LODWORD(v18) = v12;
  objc_msgSend(v17, sel_setShadowOpacity_, v18);

  id v20 = objc_msgSend(v3, sel_layer);
  objc_msgSend(v20, sel_setMasksToBounds_, 1);

  id v21 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView);
  id v22 = objc_msgSend(v21, sel_layer);
  objc_super v23 = (void *)Color.Resolved.cgColor.getter();
  objc_msgSend(v22, sel_setShadowColor_, v23);

  id v24 = objc_msgSend(v21, sel_layer);
  objc_msgSend(v24, sel_setShadowRadius_, *(double *)(v5 + 72));

  id v25 = objc_msgSend(v21, sel_layer);
  objc_msgSend(v25, sel_setShadowOffset_, *(double *)(v5 + 80), *(double *)(v5 + 88));

  id v26 = objc_msgSend(v21, sel_layer);
  uint64_t v27 = v26;
  double v28 = 0.0;
  if ((*(unsigned char *)(v5 + 64) & 1) == 0) {
    LODWORD(v28) = *(_DWORD *)(v5 + 60);
  }
  objc_msgSend(v26, sel_setShadowOpacity_, v28);

  return objc_msgSend(v21, sel_setHidden_, a1 & 1);
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance MatchedTransitionSourceSourceMarkingEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (void *)swift_allocObject();
  v5[5] = a1;
  v5[6] = lazy protocol witness table accessor for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect();
  uint64_t v6 = swift_allocObject();
  v5[2] = v6;
  uint64_t result = outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(v2, v6 + 16);
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 3;
  return result;
}

uint64_t outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  long long v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2 + 8, a1 + 8);
  long long v5 = *(_OWORD *)(a1 + 48);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v5;
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  char v6 = *(unsigned char *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(unsigned char *)(a2 + 112) = v6;
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(unsigned char *)(a2 + 136) = *(unsigned char *)(a1 + 136);
  return a2;
}

unint64_t lazy protocol witness table accessor for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

uint64_t outlined assign with copy of MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithCopy for MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        id v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 MatchedTransitionSourceModifier.makeEffect(in:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  outlined init with copy of AnyHashable((uint64_t)(v1 + 1), (uint64_t)v26);
  uint64_t v5 = v1[6];
  int8x16_t v6 = 0uLL;
  if (!v5)
  {
    int8x16_t v14 = 0uLL;
    uint64_t v7 = 0;
    long long v25 = 0u;
    uint64_t v15 = v1[10];
    if (!v15) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = v1[9];
  long long v25 = *(_OWORD *)(v1 + 7);
  dispatch thunk of AnyColorBox.resolve(in:)();
  unsigned int v9 = v8;
  int8x16_t v6 = 0uLL;
  v11.i64[0] = v10;
  v11.i64[1] = v9;
  v13.i32[1] = v12;
  int8x16_t v14 = vorrq_s8((int8x16_t)vshll_n_s32(v13, 0x20uLL), v11);
  uint64_t v15 = v1[10];
  if (v15)
  {
LABEL_3:
    int8x16_t v24 = v14;
    dispatch thunk of AnyColorBox.resolve(in:)();
    v18.i64[0] = v16;
    v18.i64[1] = v17;
    v20.i32[1] = v19;
    int8x16_t v14 = v24;
    int8x16_t v6 = vorrq_s8((int8x16_t)vshll_n_s32(v20, 0x20uLL), v18);
  }
LABEL_4:
  long long v21 = v26[1];
  *(_OWORD *)(a1 + 8) = v26[0];
  char v22 = *((unsigned char *)v2 + 104);
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 24) = v21;
  *(void *)(a1 + 40) = v27;
  *(int8x16_t *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v5 == 0;
  *(_OWORD *)(a1 + 72) = v25;
  *(void *)(a1 + 88) = v7;
  *(int8x16_t *)(a1 + 96) = v6;
  *(unsigned char *)(a1 + 112) = v15 == 0;
  __n128 result = *(__n128 *)(v2 + 11);
  *(__n128 *)(a1 + 120) = result;
  *(unsigned char *)(a1 + 136) = v22;
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NavigationPropertiesModifier.init(provider:title:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for NavigationPropertiesModifier() + 60);
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t static NavigationPropertiesModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, id *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  void (*v64)(void *__return_ptr, uint64_t, id *);
  void *v65;
  uint64_t v66;
  void *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  id v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  void *v81;
  uint64_t v82;
  void v83[3];
  ValueMetadata *v84;
  uint64_t v85;
  _UNKNOWN **v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  void *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  long long v108;
  uint64_t v109;
  int v110;
  unsigned __int8 v111;
  int v112;
  uint64_t v113;

  uint64_t v63 = a4;
  uint64_t v64 = a3;
  uint64_t v67 = a9;
  id v113 = *MEMORY[0x1E4F143B8];
  int v14 = *a1;
  uint64_t v61 = *(ValueMetadata **)a2;
  LODWORD(v73) = *(_DWORD *)(a2 + 8);
  uint64_t v15 = *(_UNKNOWN ***)(a2 + 16);
  uint64_t v72 = *(_DWORD *)(a2 + 24);
  uint64_t v71 = *(_DWORD *)(a2 + 28);
  unsigned int v16 = *(_DWORD *)(a2 + 36);
  uint64_t v69 = *(_DWORD *)(a2 + 32);
  uint64_t v17 = *(void *)(a2 + 40);
  uint64_t v81 = *(void **)(a2 + 48);
  uint64_t v80 = *(_DWORD *)(a2 + 56);
  unsigned int v59 = *(_DWORD *)(a2 + 60);
  unsigned int v58 = *(_DWORD *)(a2 + 64);
  unsigned int v57 = *(_DWORD *)(a2 + 68);
  unsigned int v56 = *(_DWORD *)(a2 + 72);
  unsigned int v55 = *(_DWORD *)(a2 + 76);
  uint64_t v68 = *(_DWORD *)(a2 + 80);
  int v62 = v14;
  LODWORD(v84) = v14;
  id v99 = (id)a5;
  unsigned __int8 v100 = a6;
  id v101 = a7;
  uint64_t v102 = a8;
  uint64_t v82 = a10;
  id v103 = a10;
  type metadata accessor for NavigationPropertiesModifier();
  uint64_t v60 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  char v70 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(*(void *)(v70 - 8) + 64);
  uint64_t v79 = a8;
  char v78 = a7;
  uint64_t v66 = a6;
  uint64_t v65 = (void *)a5;
  if (v18) {
    closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(1, a5, a6, a7, a8, v82);
  }
  LODWORD(v77) = AGGraphCreateOffsetAttribute2();
  uint64_t v84 = v61;
  LODWORD(v85) = v73;
  uint64_t v86 = v15;
  uint64_t v87 = __PAIR64__(v71, v72);
  uint64_t v88 = v69;
  uint64_t v89 = v16;
  uint64_t v90 = v17;
  uint64_t v91 = v81;
  unsigned int v45 = v16;
  uint64_t v46 = v17;
  uint64_t v92 = v80;
  uint64_t v93 = v59;
  uint64_t v94 = v58;
  uint64_t v95 = v57;
  v96 = v56;
  uint64_t v97 = v55;
  uint64_t v98 = v68;
  v83[2] = v82;
  uint64_t WitnessTable = swift_getWitnessTable();
  PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(v77, (uint64_t *)&v84, 1, (uint64_t)&v99);
  id v50 = v99;
  int v49 = v100;
  uint64_t v77 = v101;
  int v48 = v102;
  uint64_t v76 = v103;
  uint64_t v75 = v106;
  uint64_t v74 = v107;
  int v53 = v110;
  int v52 = v111;
  int v51 = v112;
  uint64_t v19 = v104;
  int32x2_t v20 = v105;
  long long v47 = v108;
  uint64_t v21 = v109;
  id v99 = v61;
  LODWORD(v100) = v73;
  id v101 = (uint64_t)v15;
  uint64_t v102 = __PAIR64__(v71, v72);
  id v103 = __PAIR64__(v16, v69);
  uint64_t v104 = v17;
  uint64_t v105 = v81;
  uint64_t v106 = __PAIR64__(v59, v80);
  uint64_t v107 = __PAIR64__(v57, v58);
  *(void *)&id v108 = __PAIR64__(v55, v56);
  DWORD2(v108) = v68;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  v64(v83, v22, &v99);
  LODWORD(v99) = v62;
  uint64_t v23 = _GraphValue.value.getter();
  uint64_t v72 = v23;
  LODWORD(v100) = v49;
  id v99 = v50;
  id v101 = v77;
  LODWORD(v102) = v48;
  id v103 = v76;
  uint64_t v104 = v19;
  uint64_t v105 = v20;
  uint64_t v106 = v75;
  uint64_t v107 = v74;
  id v108 = v47;
  id v109 = v21;
  uint64_t v110 = v53;
  uint64_t v111 = v52;
  uint64_t v112 = v51;
  MEMORY[0x1F4188790](v23);
  uint64_t v84 = &type metadata for AllPlatformItemListFlags;
  char v85 = v70;
  uint64_t v86 = &protocol witness table for AllPlatformItemListFlags;
  uint64_t v87 = WitnessTable;
  uint64_t v43 = type metadata accessor for PlatformItemListGenerator();
  uint64_t v44 = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_3(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v25 = v24;
  uint64_t v73 = v50;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v99, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v41, v43, MEMORY[0x1E4FBC248], v25, MEMORY[0x1E4FBC278], v26);
  uint64_t v27 = v99;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v28 = swift_release();
  uint64_t v84 = (ValueMetadata *)__PAIR64__(v84, v72);
  MEMORY[0x1F4188790](v28);
  id v99 = v65;
  unsigned __int8 v100 = v66;
  id v101 = v78;
  uint64_t v29 = v78;
  uint64_t v30 = v82;
  uint64_t v102 = v79;
  id v103 = v82;
  uint64_t v31 = type metadata accessor for NavigationPropertiesModifier.PropertiesValue();
  uint64_t v43 = v31;
  uint64_t v44 = swift_getWitnessTable();
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgMaTm_0(0, &lazy cache variable for type metadata for Attribute<ToolbarStorage.NavigationProperties?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.NavigationProperties?, MEMORY[0x1E4F4E740]);
  uint64_t v34 = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v84, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_38, (uint64_t)&v41, v31, MEMORY[0x1E4FBC248], v32, MEMORY[0x1E4FBC278], v33);
  int v35 = (int)v99;
  uint64_t v36 = v81;
  id v99 = v81;
  LODWORD(v25) = v80;
  LODWORD(v100) = v80;
  MEMORY[0x1F4188790](v34);
  uint64_t v41 = v29;
  unint64_t v37 = v79;
  unint64_t v42 = v79;
  uint64_t v43 = v30;
  LODWORD(v44) = v35;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t v38 = swift_bridgeObjectRelease();
  id v99 = v36;
  LODWORD(v100) = v25;
  MEMORY[0x1F4188790](v38);
  uint64_t v41 = v78;
  unint64_t v42 = v37;
  uint64_t v43 = v30;
  LODWORD(v44) = v35;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v40 = v67;
  *uint64_t v67 = v83[0];
  v40[1] = v83[1];
  return result;
}

uint64_t type metadata accessor for NavigationPropertiesModifier()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for Toolbar.UpdateContext()
{
  return &type metadata for Toolbar.UpdateContext;
}

ValueMetadata *type metadata accessor for NavigationSplitLeadingColumnBehavior()
{
  return &type metadata for NavigationSplitLeadingColumnBehavior;
}

ValueMetadata *type metadata accessor for _NavigationStackStyleConfiguration()
{
  return &type metadata for _NavigationStackStyleConfiguration;
}

ValueMetadata *type metadata accessor for NavigationLinkTraitValueModifier()
{
  return &type metadata for NavigationLinkTraitValueModifier;
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorStorage()
{
  return &type metadata for UINavigationItemAdaptorStorage;
}

ValueMetadata *type metadata accessor for NavigationSplitViewColumnWidth()
{
  return &type metadata for NavigationSplitViewColumnWidth;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContextMenuPreviewModifierCore<A, B>@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t, long long *)@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return static ContextMenuPreviewModifierCore._makeView(modifier:inputs:body:)(a1, a2, a3, *(ValueMetadata **)(a4 + 16), *(ValueMetadata **)(a4 + 24), *(_UNKNOWN ***)(a4 + 32), *(_UNKNOWN ***)(a4 + 40), a5);
}

ValueMetadata *type metadata accessor for ToolbarButtonContentModifier()
{
  return &type metadata for ToolbarButtonContentModifier;
}

ValueMetadata *type metadata accessor for LabelGroupStyleConfiguration.Content()
{
  return &type metadata for LabelGroupStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for PersistentSystemOverlaysKey.Overlays()
{
  return &type metadata for PersistentSystemOverlaysKey.Overlays;
}

ValueMetadata *type metadata accessor for HasCustomAccessoryPredicate()
{
  return &type metadata for HasCustomAccessoryPredicate;
}

ValueMetadata *type metadata accessor for CollectionViewListUtilities.CoordinatorKind()
{
  return &type metadata for CollectionViewListUtilities.CoordinatorKind;
}

ValueMetadata *type metadata accessor for AccessibilityHidesLabelIcon()
{
  return &type metadata for AccessibilityHidesLabelIcon;
}

ValueMetadata *type metadata accessor for ToolbarButtonLabelModifier()
{
  return &type metadata for ToolbarButtonLabelModifier;
}

ValueMetadata *type metadata accessor for SearchSuggestionsPlacement.Role()
{
  return &type metadata for SearchSuggestionsPlacement.Role;
}

ValueMetadata *type metadata accessor for ToolbarAppearanceModifier()
{
  return &type metadata for ToolbarAppearanceModifier;
}

ValueMetadata *type metadata accessor for CircularUIKitProgressView()
{
  return &type metadata for CircularUIKitProgressView;
}

ValueMetadata *type metadata accessor for CircularProgressViewStyle()
{
  return &type metadata for CircularProgressViewStyle;
}

ValueMetadata *type metadata accessor for ScrollPhaseChangeContext()
{
  return &type metadata for ScrollPhaseChangeContext;
}

ValueMetadata *type metadata accessor for PlatformItemTintModifier()
{
  return &type metadata for PlatformItemTintModifier;
}

ValueMetadata *type metadata accessor for ResolvedLabelGroupStyle()
{
  return &type metadata for ResolvedLabelGroupStyle;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.NavigationSplitViewKey()
{
  return &type metadata for ContainerBackgroundKeys.NavigationSplitViewKey;
}

ValueMetadata *type metadata accessor for ResolvedLabeledContent()
{
  return &type metadata for ResolvedLabeledContent;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LazyPlatformItemWriter<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, ValueMetadata **)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  return static LazyPlatformItemWriter._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

ValueMetadata *type metadata accessor for ContentScrollViewBox()
{
  return &type metadata for ContentScrollViewBox;
}

ValueMetadata *type metadata accessor for _IdentifiedViewTree()
{
  return &type metadata for _IdentifiedViewTree;
}

ValueMetadata *type metadata accessor for SubmitScopeModifier()
{
  return &type metadata for SubmitScopeModifier;
}

ValueMetadata *type metadata accessor for ResolvedLabelStyle()
{
  return &type metadata for ResolvedLabelStyle;
}

ValueMetadata *type metadata accessor for ConfirmationDialog()
{
  return &type metadata for ConfirmationDialog;
}

ValueMetadata *type metadata accessor for ListPaddingAnchor()
{
  return &type metadata for ListPaddingAnchor;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchCustomScopeBar()
{
  return &type metadata for EnvironmentValues.SearchCustomScopeBar;
}

ValueMetadata *type metadata accessor for InspectorStorage()
{
  return &type metadata for InspectorStorage;
}

ValueMetadata *type metadata accessor for ListLabelStyle()
{
  return &type metadata for ListLabelStyle;
}

ValueMetadata *type metadata accessor for LabelItemRole()
{
  return &type metadata for LabelItemRole;
}

ValueMetadata *type metadata accessor for ListItemTint.Effect()
{
  return &type metadata for ListItemTint.Effect;
}

ValueMetadata *type metadata accessor for AlertStorage()
{
  return &type metadata for AlertStorage;
}

ValueMetadata *type metadata accessor for SearchFieldConfigurationTokenFieldStyle()
{
  return &type metadata for SearchFieldConfigurationTokenFieldStyle;
}

ValueMetadata *type metadata accessor for SearchFieldConfigurationTextFieldStyle()
{
  return &type metadata for SearchFieldConfigurationTextFieldStyle;
}

ValueMetadata *type metadata accessor for OnModifierKeysChangedModifier()
{
  return &type metadata for OnModifierKeysChangedModifier;
}

uint64_t outlined init with take of ResolvedScrollBehavior?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for [HandGestureShortcutPaginationDirection](0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for [HandGestureShortcutPaginationDirection](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for closure #1 in NavigationSeedHost.seeds.setter()
{
  return closure #1 in NavigationSeedHost.seeds.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in NavigationSeedHost.seeds.setter(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t type metadata accessor for AnyHoverEffectBox()
{
  return self;
}

uint64_t assignWithCopy for OnPlatformContainerSelectionModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*(void *)a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  uint64_t v7 = a2[3];
  unsigned __int8 v8 = *((unsigned char *)a2 + 32);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v8);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a2[7];
  char v14 = *((unsigned char *)a2 + 65);
  unsigned __int8 v15 = *((unsigned char *)a2 + 64);
  outlined copy of Environment<KeyboardShortcut?>.Content(v11, v12, v13, v15, v14);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  char v19 = *(unsigned char *)(a1 + 65);
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  uint64_t v20 = *(unsigned __int8 *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = v15;
  *(unsigned char *)(a1 + 65) = v14;
  outlined consume of Environment<KeyboardShortcut?>.Content(v16, v17, v18, v20, v19);
  uint64_t v21 = a2[9];
  uint64_t v22 = *((unsigned __int8 *)a2 + 80);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v21, v22);
  uint64_t v23 = *(void *)(a1 + 72);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 80);
  *(void *)(a1 + 72) = v21;
  *(unsigned char *)(a1 + 80) = v22;
  outlined consume of Environment<Bool?>.Content(v23, v24);
  return a1;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnPlatformContainerSelectionModifier@<X0>(uint64_t (**a1)(uint64_t *a1)@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  void v9[3] = v3;
  v9[4] = *(_OWORD *)(v1 + 64);
  char v10 = *(unsigned char *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v4;
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(v1 + 64);
  *(unsigned char *)(v5 + 96) = *(unsigned char *)(v1 + 80);
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  *a1 = partial apply for closure #1 in OnPlatformContainerSelectionModifier.body(content:);
  a1[1] = (uint64_t (*)(uint64_t *))v5;
  return outlined retain of OnPlatformContainerSelectionModifier((uint64_t)v9);
}

uint64_t outlined retain of OnPlatformContainerSelectionModifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 65);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 64);
  outlined copy of AppIntentExecutor?(*(void *)a1);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
  outlined copy of Environment<KeyboardShortcut?>.Content(v4, v5, v6, v10, v7);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  return a1;
}

uint64_t closure #1 in ButtonActionModifier.PlatformSelectionBehavior.value.getter(uint64_t *a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PlatformItemList.Item();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v21 - v13;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v21 - v13);
  swift_bridgeObjectRelease();
  if (a2)
  {
    unsigned __int8 v15 = (uint64_t *)(a4 + *(int *)(type metadata accessor for ButtonActionModifier() + 36));
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    swift_retain();
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    a3 = 0;
  }
  outlined consume of PlatformItemList.Item.SelectionBehavior?(*((void *)v14 + 50), *((void *)v14 + 51), *((void *)v14 + 52), *((void *)v14 + 53), *((void *)v14 + 54), *((void *)v14 + 55));
  *((void *)v14 + 50) = 1;
  *((void *)v14 + 51) = v17;
  *((void *)v14 + 52) = v16;
  *(_OWORD *)(v14 + 424) = 0u;
  *(_OWORD *)(v14 + 440) = 0u;
  *((void *)v14 + 57) = 0;
  v14[464] = a3;
  v14[56] = a2 & 1;
  outlined init with copy of PlatformItemList.Item((uint64_t)v14, (uint64_t)v11);
  type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v11, v19 + v18);
  *a1 = v19;
  return outlined destroy of ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
}

double static ButtonActionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, double *a5@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  long long v10 = a2[3];
  long long v42 = a2[2];
  long long v43 = v10;
  long long v44 = a2[4];
  int v45 = *((_DWORD *)a2 + 20);
  long long v11 = a2[1];
  long long v40 = *a2;
  long long v41 = v11;
  type metadata accessor for ButtonActionModifier();
  LODWORD(v32) = v9;
  long long v12 = a2[3];
  long long v36 = a2[2];
  long long v37 = v12;
  long long v38 = a2[4];
  int v39 = *((_DWORD *)a2 + 20);
  long long v13 = a2[1];
  long long v34 = *a2;
  long long v35 = v13;
  swift_getWitnessTable();
  static GestureViewModifier.makeView(modifier:inputs:body:)();
  uint64_t v32 = v43;
  int v33 = DWORD2(v43);
  *(void *)&long long v34 = v43;
  DWORD2(v34) = DWORD2(v43);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs((uint64_t)&v40);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v40);
    if (v34)
    {
      type metadata accessor for _GraphValue();
      unsigned int v14 = _GraphValue.value.getter();
      swift_getKeyPath();
      unsigned int v15 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      long long v36 = v42;
      long long v37 = v43;
      long long v38 = v44;
      int v39 = v45;
      HIDWORD(v34) = HIDWORD(v40);
      long long v35 = v41;
      swift_getKeyPath();
      int v16 = _ViewInputs.mapEnvironment<A>(_:)();
      uint64_t v17 = swift_release();
      MEMORY[0x1F4188790](v17);
      v26[0] = a3;
      v26[1] = a4;
      unint64_t v27 = __PAIR64__(v15, v14);
      LODWORD(WitnessTable) = v16;
      *(void *)&long long v34 = v32;
      DWORD2(v34) = v33;
      MEMORY[0x1F4188790](v18);
      outlined retain of [Text.Modifier]((uint64_t)&v32);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
    }
  }
  *(void *)&long long v34 = v32;
  DWORD2(v34) = v33;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs((uint64_t)&v40);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v40);
    if ((v34 & 8) != 0)
    {
      LODWORD(v34) = v9;
      type metadata accessor for _GraphValue();
      uint64_t v19 = _GraphValue.value.getter();
      LODWORD(v34) = v19;
      MEMORY[0x1F4188790](v19);
      unint64_t v27 = type metadata accessor for ButtonActionModifier.PlatformAction();
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>(0, &lazy cache variable for type metadata for Attribute<(())?>, (uint64_t (*)(uint64_t))type metadata accessor for (())?, MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v34, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_35, (uint64_t)v26, v27, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
      unsigned int v22 = v29;
      long long v36 = v42;
      long long v37 = v43;
      long long v38 = v44;
      int v39 = v45;
      long long v34 = v40;
      long long v35 = v41;
      swift_getKeyPath();
      unsigned int v23 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      long long v36 = v42;
      long long v37 = v43;
      long long v38 = v44;
      int v39 = v45;
      long long v34 = v40;
      long long v35 = v41;
      swift_getKeyPath();
      int v24 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      *(void *)&long long v34 = __PAIR64__(v23, v22);
      DWORD2(v34) = v24;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformButtonActionTransform.SelectionContent and conformance PlatformButtonActionTransform.SelectionContent();
      LODWORD(v34) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformButtonActionTransform.MakeTransform and conformance PlatformButtonActionTransform.MakeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)&v30, (uint64_t)&v40);
    }
  }
  *(void *)a5 = v30;
  double result = v31;
  a5[1] = v31;
  return result;
}

uint64_t type metadata accessor for ButtonActionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in OnPlatformContainerSelectionModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  char v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v10 = (char *)&v37 - v9;
  uint64_t v11 = *a1;
  if (*(void *)(*a1 + 16) == 1)
  {
    uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v13 = (v12 + 32) & ~v12;
    outlined init with copy of PlatformItemList.Item(v11 + v13, (uint64_t)&v37 - v9);
    uint64_t v14 = *(void *)a2;
    if (*(void *)a2)
    {
      uint64_t v45 = v12;
      uint64_t v46 = (v12 + 32) & ~v12;
      *(void *)&long long v51 = *(void *)(a2 + 8);
      uint64_t v15 = *(void *)(a2 + 72);
      uint64_t v16 = *(unsigned __int8 *)(a2 + 80);
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v15, v16);
      specialized Environment.wrappedValue.getter(v15, v16, &v52);
      outlined consume of Environment<Bool?>.Content(v15, v16);
      int v44 = v52;
      uint64_t v17 = *(void *)(a2 + 24);
      uint64_t v18 = *(unsigned __int8 *)(a2 + 32);
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v17, v18);
      char v19 = specialized Environment.wrappedValue.getter(v17, v18);
      outlined consume of Environment<Bool?>.Content(v17, v18);
      int v49 = v7;
      id v50 = a1;
      uint64_t v47 = v5;
      uint64_t v48 = v11;
      if (v19)
      {
        swift_retain();
      }
      else
      {
        uint64_t v14 = 0;
        *(void *)&long long v51 = 0;
      }
      uint64_t v20 = *(unsigned __int8 *)(a2 + 16) | 0x100;
      uint64_t v21 = *((void *)v10 + 51);
      uint64_t v42 = *((void *)v10 + 50);
      uint64_t v43 = v20;
      uint64_t v22 = *((void *)v10 + 52);
      uint64_t v23 = *((void *)v10 + 53);
      uint64_t v40 = *((void *)v10 + 54);
      uint64_t v41 = v22;
      uint64_t v24 = *((void *)v10 + 55);
      uint64_t v38 = *((void *)v10 + 56);
      uint64_t v39 = v24;
      uint64_t v37 = *((void *)v10 + 57);
      char v25 = v10[464];
      uint64_t v26 = v51;
      outlined copy of AppIntentExecutor?(v14);
      outlined copy of AppIntentExecutor?(0);
      outlined copy of AppIntentExecutor?(0);
      LOBYTE(v36) = v25;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v42, v21, v41, v23, v40, v39, v38, v37, v36, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      *((void *)v10 + 50) = v43;
      *((void *)v10 + 51) = v14;
      *((void *)v10 + 52) = v26;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 440) = 0u;
      *((void *)v10 + 57) = 0;
      v10[464] = v44;
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v17, v18);
      char v27 = specialized Environment.wrappedValue.getter(v17, v18);
      outlined consume of Environment<Bool?>.Content(v17, v18);
      v10[56] = v27 & 1;
      uint64_t v28 = *(void *)(a2 + 40);
      uint64_t v29 = *(void *)(a2 + 48);
      uint64_t v30 = *(void *)(a2 + 56);
      uint64_t v31 = *(unsigned __int8 *)(a2 + 64);
      int v32 = *(unsigned __int8 *)(a2 + 65);
      outlined copy of Environment<KeyboardShortcut?>.Content(v28, v29, v30, v31, v32);
      specialized Environment.wrappedValue.getter(v28, v29, v30, v31 | (v32 << 8), (uint64_t)&v52);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
      outlined consume of Environment<KeyboardShortcut?>.Content(v28, v29, v30, v31, v32);
      long long v51 = v52;
      uint64_t v33 = v53;
      LOBYTE(v29) = v54;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v10 + 472) = v51;
      *((void *)v10 + 61) = v33;
      v10[496] = v29;
      char v7 = v49;
      a1 = v50;
      uint64_t v13 = v46;
    }
    outlined init with copy of PlatformItemList.Item((uint64_t)v10, (uint64_t)v7);
    type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_18834BB80;
    outlined init with take of PlatformItemList.Item((uint64_t)v7, v34 + v13);
    swift_bridgeObjectRelease();
    *a1 = v34;
    return outlined destroy of CommandOperation((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t PlatformItemList.containerSelectionBehavior.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  char v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    uint64_t v55 = 0;
    uint64_t v49 = 0;
    long long v52 = 0;
    uint64_t v51 = 0;
    char v54 = 0;
    uint64_t result = 0;
    uint64_t v50 = 1;
    goto LABEL_51;
  }
  uint64_t v61 = a2;
  uint64_t v62 = a1;
  uint64_t v72 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  swift_bridgeObjectRetain();
  uint64_t v63 = 0;
  uint64_t v66 = 0;
  LODWORD(v65) = 0;
  unint64_t v9 = 0;
  uint64_t v70 = -(uint64_t)v8;
  uint64_t v68 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v69 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v67 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v71 = v5;
  unint64_t v64 = v8;
LABEL_3:
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = -(uint64_t)v10;
  ++v9;
  do
  {
    if (v11 + v9 == 1)
    {
      __break(1u);
LABEL_53:
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    outlined init with copy of PlatformItemList.Item(v72 + *(void *)(v5 + 72) * (v9 - 1), (uint64_t)v7);
    unint64_t v13 = *((void *)v7 + 50);
    uint64_t v12 = *((void *)v7 + 51);
    uint64_t v15 = *((void *)v7 + 52);
    uint64_t v14 = *((void *)v7 + 53);
    uint64_t v17 = *((void *)v7 + 54);
    uint64_t v16 = *((void *)v7 + 55);
    uint64_t v18 = *((void *)v7 + 56);
    char v19 = v7[464];
    LOBYTE(v58) = v19;
    uint64_t v73 = *((void *)v7 + 57);
    uint64_t v74 = v18;
    outlined copy of PlatformItemList.Item.SelectionBehavior?(v13, v12, v15, v14, v17, v16, v18, v73, v58, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of CommandOperation((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (v12 != 1)
    {
      if ((v13 & 0x100) != 0)
      {
        if (v12)
        {
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = v12;
          *(void *)(v20 + 24) = v15;
          uint64_t v65 = v20;
          swift_retain_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
          }
          unint64_t v22 = v67[2];
          unint64_t v21 = v67[3];
          unint64_t v23 = v22 + 1;
          if (v22 >= v21 >> 1)
          {
            unint64_t v60 = v22 + 1;
            uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v67);
            unint64_t v23 = v60;
            uint64_t v67 = v43;
          }
          uint64_t v24 = v67;
          v67[2] = v23;
          char v25 = &v24[2 * v22];
          uint64_t v26 = v65;
          v25[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
          v25[5] = v26;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
        }
        unint64_t v8 = v64;
        if (v14)
        {
          uint64_t v27 = swift_allocObject();
          *(void *)(v27 + 16) = v14;
          *(void *)(v27 + 24) = v17;
          uint64_t v65 = v27;
          swift_retain_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
          }
          unint64_t v29 = v68[2];
          unint64_t v28 = v68[3];
          unint64_t v30 = v29 + 1;
          if (v29 >= v28 >> 1)
          {
            unint64_t v60 = v29 + 1;
            int v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v68);
            unint64_t v30 = v60;
            uint64_t v68 = v44;
          }
          uint64_t v31 = v68;
          v68[2] = v30;
          int v32 = &v31[2 * v29];
          uint64_t v33 = v65;
          v32[4] = partial apply for thunk for @callee_guaranteed () -> ();
          v32[5] = v33;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
          unint64_t v8 = v64;
        }
        if (v16)
        {
          uint64_t v34 = swift_allocObject();
          *(void *)(v34 + 16) = v16;
          uint64_t v65 = v34;
          *(void *)(v34 + 24) = v74;
          swift_retain_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
          }
          unint64_t v36 = v69[2];
          unint64_t v35 = v69[3];
          unint64_t v37 = v36 + 1;
          if (v36 >= v35 >> 1)
          {
            unint64_t v60 = v36 + 1;
            uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v69);
            unint64_t v37 = v60;
            uint64_t v69 = v45;
          }
          uint64_t v38 = v69;
          v69[2] = v37;
          uint64_t v39 = &v38[2 * v36];
          uint64_t v40 = v65;
          v39[4] = partial apply for thunk for @escaping @callee_guaranteed (@unowned ()?) -> (@unowned Bool);
          v39[5] = v40;
          uint64_t v41 = v74;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
          uint64_t v42 = v41;
          unint64_t v8 = v64;
        }
        else
        {
          uint64_t v42 = v74;
        }
        LODWORD(v66) = v66 | v13;
        HIDWORD(v66) |= (v13 >> 16) & 1;
        LOBYTE(v58) = v19;
        outlined copy of PlatformItemList.Item.SelectionBehavior?(v13, v12, v15, v14, v17, v16, v42, v73, v58, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
        if (v63)
        {
          LODWORD(v65) = 1;
          uint64_t v5 = v71;
          if (v70 + v9) {
            goto LABEL_3;
          }
        }
        else
        {
          uint64_t v63 = BYTE4(v13);
          LODWORD(v65) = 1;
          uint64_t v5 = v71;
          if (v70 + v9) {
            goto LABEL_3;
          }
        }
        goto LABEL_53;
      }
      LOBYTE(v58) = v19;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v13, v12, v15, v14, v17, v16, v74, v73, v58, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    }
    ++v9;
    uint64_t v5 = v71;
  }
  while (v70 + v9 != 1);
  swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = 0;
    uint64_t v49 = 0;
    long long v52 = 0;
    uint64_t v51 = 0;
    char v54 = 0;
    uint64_t result = 0;
    uint64_t v50 = 1;
    a2 = v61;
    goto LABEL_51;
  }
LABEL_37:
  a2 = v61;
  uint64_t v46 = v68;
  uint64_t v47 = v69;
  uint64_t v48 = v67;
  if (v67[2])
  {
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v48;
    uint64_t v50 = (uint64_t)partial apply for specialized closure #1 in PlatformItemList.containerSelectionBehavior.getter;
    if (v46[2]) {
      goto LABEL_39;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    long long v52 = 0;
    uint64_t v51 = 0;
    if (v47[2]) {
      goto LABEL_40;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    char v54 = 0;
    uint64_t result = 0;
    goto LABEL_46;
  }
  swift_bridgeObjectRelease();
  uint64_t v50 = 0;
  uint64_t v49 = 0;
  if (!v46[2]) {
    goto LABEL_44;
  }
LABEL_39:
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = v46;
  long long v52 = partial apply for specialized closure #2 in PlatformItemList.containerSelectionBehavior.getter;
  if (!v47[2]) {
    goto LABEL_45;
  }
LABEL_40:
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v47;
  char v54 = partial apply for specialized closure #3 in PlatformItemList.containerSelectionBehavior.getter;
LABEL_46:
  uint64_t v56 = 256;
  if (v66) {
    uint64_t v56 = 257;
  }
  uint64_t v57 = 0x10000;
  if ((v66 & 0x100000000) == 0) {
    uint64_t v57 = 0;
  }
  uint64_t v55 = v56 | (v63 << 32) | v57;
LABEL_51:
  *(void *)a2 = v55;
  *(void *)(a2 + 8) = v50;
  *(void *)(a2 + 16) = v49;
  *(void *)(a2 + 24) = v52;
  *(void *)(a2 + 32) = v51;
  *(void *)(a2 + 40) = v54;
  *(void *)(a2 + 48) = result;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

uint64_t outlined init with copy of PlatformItemList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CommandOperation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x100) != 0)
  {
    *(void *)a5 = a1;
    *(void *)(a5 + 8) = a2;
    *(void *)(a5 + 16) = a3;
    *(unsigned char *)(a5 + 24) = a4;
    return outlined copy of Environment<KeyboardShortcut?>.Content(a1, a2, a3, a4, 1);
  }
  else
  {
    outlined copy of Environment<KeyboardShortcut?>.Content(a1, a2, a3, a4, 0);
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    unint64_t v10 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v15 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x8000000188327E00, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v13, -1, -1);
      MEMORY[0x18C119C60](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<KeyboardShortcut?>.Content(a1, a2, a3, a4, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t MergePlatformItemsView.Transform.value.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MergePlatformItemsView.Transform.list.getter(a1);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  PlatformItemList.mergedContentItem.getter(v7, (uint64_t)v5);
  swift_bridgeObjectRelease();
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v5, v9 + v8);
  return v9;
}

uint64_t outlined init with take of PlatformItemList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PlatformItemList.mergedContentItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *((void *)v4 - 1);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v104 = (uint64_t)v91 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v101 = (uint64_t)v91 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v97 = (uint64_t)v91 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v91 - v15;
  MEMORY[0x1F4188790](v17);
  char v19 = (char *)v91 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v110 = (uint64_t)v91 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v91 - v23;
  if (*(void *)(a1 + 16) == 1)
  {
    uint64_t v25 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    return outlined init with copy of PlatformItemList.Item(v25, a2);
  }
  unint64_t v106 = *(void *)(a1 + 16);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v151);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v151, (uint64_t)&v138, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  v136[0] = xmmword_18834BB90;
  memset(&v136[1], 0, 48);
  char v137 = 0;
  __n128 v124 = 0uLL;
  *(void *)&long long v125 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)&v138, v136, &v124, 0, 0, (uint64_t)v24);
  if (v106)
  {
    uint64_t v92 = a2;
    uint64_t v93 = v7;
    unint64_t v27 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v105 = *(void *)(v5 + 72);
    uint64_t v98 = v101 + 64;
    id v99 = v16 + 64;
    id v108 = v24 + 64;
    id v109 = v24 + 521;
    uint64_t v102 = v19 + 64;
    id v103 = v19 + 521;
    uint64_t v107 = v24 + 528;
    swift_bridgeObjectRetain();
    unint64_t v28 = 0;
    v91[0] = v27;
    v91[1] = a1;
    uint64_t v94 = a1 + v27;
    uint64_t v29 = -1;
    uint64_t v95 = (void *)MEMORY[0x1E4FBC860];
    v96 = v16;
    unsigned __int8 v100 = v4;
LABEL_7:
    char v30 = 0;
    uint64_t v31 = v94 + v105 * v28++;
    while (1)
    {
      uint64_t v32 = v110;
      outlined init with copy of PlatformItemList.Item(v31, v110);
      uint64_t result = outlined init with copy of PlatformItemList.Item(v32, (uint64_t)v19);
      if (v30)
      {
        BOOL v33 = __OFSUB__(v29--, 1);
        if (v33) {
          goto LABEL_93;
        }
        uint64_t v34 = *((void *)v19 + 5);
        BOOL v33 = __OFSUB__(v34, 1);
        uint64_t v35 = v34 - 1;
        if (v33) {
          goto LABEL_94;
        }
        *((void *)v19 + 5) = v35;
        if (v29 < 0) {
          goto LABEL_19;
        }
      }
      else if (v29 < 0)
      {
        goto LABEL_19;
      }
      if (__OFADD__(v29, 1)) {
        goto LABEL_92;
      }
      if (*((void *)v19 + 5) == v29 + 1)
      {
        if (!*(void *)v24)
        {
          uint64_t v39 = *(void **)v19;
          if (*(void *)v19)
          {
            char v30 = 1;
            *(void *)uint64_t v24 = v39;
            goto LABEL_37;
          }
        }
        outlined init with copy of PlatformItemList.Item((uint64_t)v24, (uint64_t)v16);
        uint64_t v36 = MEMORY[0x1E4F41550];
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v99, (uint64_t)v136, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v136, (uint64_t)&v138, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v36);
        if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v138) == 1)
        {
          outlined destroy of CommandOperation((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          uint64_t v37 = v104;
          uint64_t v38 = v101;
        }
        else
        {
          if (v150)
          {
            outlined retain of Image.Resolved?((uint64_t)v136, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
            swift_unknownObjectRetain();
            self;
            uint64_t v40 = (void *)swift_dynamicCastObjCClassUnconditional();
            uint64_t v41 = v97;
            outlined init with copy of PlatformItemList.Item((uint64_t)v16, v97);
            if (v40)
            {
              outlined retain of Image.Resolved?((uint64_t)v136, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
              outlined destroy of CommandOperation(v41, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
              outlined destroy of CommandOperation((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);

              goto LABEL_77;
            }
          }
          else
          {
            _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v136, (uint64_t)&v124, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
            outlined retain of Image.Resolved((uint64_t)&v124);
            uint64_t v41 = v97;
            outlined init with copy of PlatformItemList.Item((uint64_t)v16, v97);
          }
          uint64_t v42 = v41;
          id v43 = v138;
          char v44 = v139;
          v124.n128_u64[0] = (unint64_t)v138;
          v124.n128_u8[8] = v139;
          long long v125 = v140;
          uint64_t v126 = v141;
          char v127 = v142;
          long long v128 = v143;
          char v129 = v144;
          long long v130 = v145;
          long long v131 = v146;
          char v132 = v147;
          char v133 = v148;
          __int16 v134 = v149;
          uint64_t v45 = *(void *)(v42 + 48);
          outlined copy of GraphicsImage.Contents?(v138, v139);
          id v46 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v45);
          outlined retain of Image.Resolved?((uint64_t)v136, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
          uint64_t v47 = v43;
          uint64_t v38 = v101;
          uint64_t v37 = v104;
          outlined consume of GraphicsImage.Contents?(v47, v44);
          uint64_t v48 = v42;
          uint64_t v16 = v96;
          outlined destroy of CommandOperation(v48, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          outlined destroy of CommandOperation((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);

          if (v46) {
            goto LABEL_77;
          }
        }
        outlined init with copy of PlatformItemList.Item((uint64_t)v19, v38);
        uint64_t v49 = MEMORY[0x1E4F41550];
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2(v98, (uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v123, (uint64_t)&v124, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v49);
        if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v124) == 1)
        {
          outlined destroy of CommandOperation(v38, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
LABEL_77:
          outlined init with copy of PlatformItemList.Item((uint64_t)v19, (uint64_t)v93);
          uint64_t v88 = v95;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v88 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88[2] + 1, 1, v88);
          }
          uint64_t v4 = v100;
          unint64_t v90 = v88[2];
          unint64_t v89 = v88[3];
          if (v90 >= v89 >> 1) {
            uint64_t v88 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1, v88);
          }
          v88[2] = v90 + 1;
          outlined init with take of PlatformItemList.Item((uint64_t)v93, (uint64_t)v88 + v91[0] + v90 * v105);
          outlined destroy of CommandOperation((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          uint64_t v29 = *(void *)(v110 + 40);
          uint64_t result = outlined destroy of CommandOperation(v110, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          if (v106 != v28)
          {
            uint64_t v95 = v88;
            if (v28 < v106) {
              goto LABEL_7;
            }
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
            return result;
          }
          swift_bridgeObjectRelease();
          a2 = v92;
          if (v88[2]) {
            goto LABEL_85;
          }
LABEL_87:
          swift_bridgeObjectRelease();
          return outlined init with take of PlatformItemList.Item((uint64_t)v24, a2);
        }
        if (v135)
        {
          outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
          swift_unknownObjectRetain();
          self;
          uint64_t v50 = (void *)swift_dynamicCastObjCClassUnconditional();
          outlined init with copy of PlatformItemList.Item(v38, v37);
          if (v50)
          {
            outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
            outlined destroy of CommandOperation(v37, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            outlined destroy of CommandOperation(v38, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            goto LABEL_35;
          }
        }
        else
        {
          _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v123, (uint64_t)&v111, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
          outlined retain of Image.Resolved((uint64_t)&v111);
          outlined init with copy of PlatformItemList.Item(v38, v37);
        }
        uint64_t v51 = (void *)v124.n128_u64[0];
        char v52 = v124.n128_i8[8];
        unint64_t v111 = v124.n128_u64[0];
        unsigned __int8 v112 = v124.n128_u8[8];
        long long v113 = v125;
        uint64_t v114 = v126;
        char v115 = v127;
        long long v116 = v128;
        char v117 = v129;
        long long v118 = v130;
        long long v119 = v131;
        char v120 = v132;
        char v121 = v133;
        __int16 v122 = v134;
        uint64_t v53 = *(void *)(v104 + 48);
        outlined copy of GraphicsImage.Contents?((id)v124.n128_u64[0], v124.n128_i8[8]);
        uint64_t v50 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v53);
        outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
        outlined consume of GraphicsImage.Contents?(v51, v52);
        outlined destroy of CommandOperation(v104, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        outlined destroy of CommandOperation(v101, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (!v50) {
          goto LABEL_77;
        }
LABEL_35:

        char v30 = 1;
        uint64_t v4 = v100;
        if (!*(void *)v24)
        {
LABEL_36:
          uint64_t v39 = *(void **)v19;
          *(void *)uint64_t v24 = *(void *)v19;
          goto LABEL_37;
        }
        goto LABEL_20;
      }
LABEL_19:
      char v30 = 0;
      if (!*(void *)v24) {
        goto LABEL_36;
      }
LABEL_20:
      if (*((void *)v24 + 1)) {
        goto LABEL_38;
      }
      uint64_t v39 = *(void **)v19;
      *((void *)v24 + 1) = *(void *)v19;
LABEL_37:
      id v54 = v39;
LABEL_38:
      if (*v109 == 1)
      {
        char v55 = *v103;
        v24[520] = v19[520];
        *id v109 = v55;
      }
      uint64_t v56 = MEMORY[0x1E4F41550];
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v108, (uint64_t)v136, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v136, (uint64_t)&v138, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v56);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v138) == 1)
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v102, (uint64_t)&v124, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v56);
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)&v124, (uint64_t)v108, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v56);
        outlined retain of Image.Resolved?((uint64_t)&v124, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        if (!*((void *)v24 + 6)) {
          goto LABEL_42;
        }
      }
      else if (!*((void *)v24 + 6))
      {
LABEL_42:
        *((void *)v24 + 6) = *((void *)v19 + 6);
        swift_retain();
        if (*((void *)v24 + 32)) {
          goto LABEL_46;
        }
LABEL_43:
        uint64_t v57 = *((void *)v19 + 31);
        uint64_t v58 = *((void *)v19 + 32);
        uint64_t v59 = (void *)*((void *)v19 + 33);
        uint64_t v60 = *((void *)v19 + 34);
        uint64_t v61 = *((void *)v19 + 35);
        uint64_t v62 = *((void *)v19 + 36);
        *((void *)v24 + 31) = v57;
        *((void *)v24 + 32) = v58;
        *((void *)v24 + 33) = v59;
        *((void *)v24 + 34) = v60;
        *((void *)v24 + 35) = v61;
        *((void *)v24 + 36) = v62;
        outlined copy of Image.NamedResolved?(v57, v58, v59);
        goto LABEL_46;
      }
      if (!*((void *)v24 + 32)) {
        goto LABEL_43;
      }
LABEL_46:
      uint64_t v63 = *((void *)v19 + 66);
      if (*v107)
      {
        if (v63)
        {
          v124.n128_u64[0] = *((void *)v19 + 66);
          AccessibilityProperties.merge(with:)((uint64_t *)&v124);
        }
        if (!*((void *)v24 + 77))
        {
LABEL_69:
          *((void *)v24 + 77) = *((void *)v19 + 77);
          swift_bridgeObjectRetain();
          if (*((void *)v24 + 78)) {
            goto LABEL_51;
          }
          goto LABEL_70;
        }
      }
      else
      {
        uint64_t v81 = *((void *)v19 + 67);
        uint64_t v82 = *((void *)v19 + 68);
        *((void *)v24 + 66) = v63;
        *((void *)v24 + 67) = v81;
        *((void *)v24 + 68) = v82;
        outlined copy of PlatformItemList.Item.Accessibility?(v63);
        if (!*((void *)v24 + 77)) {
          goto LABEL_69;
        }
      }
      if (*((void *)v24 + 78)) {
        goto LABEL_51;
      }
LABEL_70:
      *((void *)v24 + 78) = *((void *)v19 + 78);
      swift_bridgeObjectRetain();
LABEL_51:
      if (*((void *)v24 + 41) >> 2 == 0xFFFFFFFFLL)
      {
        unint64_t v64 = (void *)*((void *)v19 + 37);
        uint64_t v65 = *((void *)v19 + 38);
        uint64_t v66 = *((void *)v19 + 39);
        uint64_t v67 = *((void *)v19 + 40);
        unint64_t v68 = *((void *)v19 + 41);
        uint64_t v69 = *((void *)v19 + 42);
        uint64_t v70 = *((void *)v19 + 43);
        uint64_t v71 = *((void *)v19 + 44);
        uint64_t v72 = *((void *)v19 + 45);
        uint64_t v73 = *((void *)v19 + 46);
        uint64_t v74 = *((void *)v19 + 47);
        uint64_t v75 = *((void *)v19 + 48);
        uint64_t v76 = *((void *)v19 + 49);
        *((void *)v24 + 37) = v64;
        *((void *)v24 + 38) = v65;
        *((void *)v24 + 39) = v66;
        *((void *)v24 + 40) = v67;
        *((void *)v24 + 41) = v68;
        *((void *)v24 + 42) = v69;
        *((void *)v24 + 43) = v70;
        *((void *)v24 + 44) = v71;
        *((void *)v24 + 45) = v72;
        *((void *)v24 + 46) = v73;
        *((void *)v24 + 47) = v74;
        *((void *)v24 + 48) = v75;
        *((void *)v24 + 49) = v76;
        outlined copy of PlatformItemList.Item.SystemItem?(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76);
      }
      uint64_t v77 = v4[33];
      if (*(void *)&v24[v77])
      {
        if (*((void *)v24 + 72)) {
          goto LABEL_55;
        }
      }
      else
      {
        *(void *)&v24[v77] = *(void *)&v19[v77];
        swift_retain();
        if (*((void *)v24 + 72))
        {
LABEL_55:
          if (*((void *)v24 + 3)) {
            goto LABEL_56;
          }
          goto LABEL_73;
        }
      }
      unsigned __int8 v83 = (void *)*((void *)v19 + 72);
      *((void *)v24 + 72) = v83;
      id v84 = v83;
      if (*((void *)v24 + 3))
      {
LABEL_56:
        if (!*((void *)v24 + 74)) {
          goto LABEL_74;
        }
        goto LABEL_57;
      }
LABEL_73:
      uint64_t v85 = *((void *)v19 + 3);
      *((void *)v24 + 2) = *((void *)v19 + 2);
      *((void *)v24 + 3) = v85;
      swift_bridgeObjectRetain();
      if (!*((void *)v24 + 74))
      {
LABEL_74:
        uint64_t v86 = *((void *)v19 + 74);
        *((void *)v24 + 73) = *((void *)v19 + 73);
        *((void *)v24 + 74) = v86;
        swift_bridgeObjectRetain();
        if (*((void *)v24 + 76)) {
          goto LABEL_58;
        }
        goto LABEL_75;
      }
LABEL_57:
      if (*((void *)v24 + 76)) {
        goto LABEL_58;
      }
LABEL_75:
      uint64_t v87 = *((void *)v19 + 76);
      *((void *)v24 + 75) = *((void *)v19 + 75);
      *((void *)v24 + 76) = v87;
      swift_bridgeObjectRetain();
LABEL_58:
      uint64_t v78 = v4[31];
      if (v24[v78] == 2) {
        v24[v78] = v19[v78];
      }
      uint64_t v79 = v4[32];
      if (!v24[v79]) {
        v24[v79] = v19[v79];
      }
      if (v24[633] == 5) {
        v24[633] = v19[633];
      }
      outlined destroy of CommandOperation((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v29 = *(void *)(v110 + 40);
      uint64_t result = outlined destroy of CommandOperation(v110, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (v106 == v28)
      {
        swift_bridgeObjectRelease();
        a2 = v92;
        uint64_t v88 = v95;
        if (!v95[2]) {
          goto LABEL_87;
        }
        goto LABEL_85;
      }
      v31 += v105;
      if (v28++ >= v106) {
        goto LABEL_91;
      }
    }
  }
  uint64_t v88 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_87;
  }
LABEL_85:
  swift_bridgeObjectRelease();
  *((void *)v24 + 78) = v88;
  outlined consume of PlatformItemList.Item.SystemItem?(*((void **)v24 + 37), *((void *)v24 + 38), *((void *)v24 + 39), *((void *)v24 + 40), *((void *)v24 + 41), *((void *)v24 + 42), *((void *)v24 + 43), *((void *)v24 + 44), *((void *)v24 + 45), *((void *)v24 + 46), *((void *)v24 + 47), *((void *)v24 + 48), *((void *)v24 + 49));
  *((void *)v24 + 37) = 3;
  *((void *)v24 + 38) = 0;
  *((void *)v24 + 39) = 0;
  *((void *)v24 + 40) = 0;
  *((void *)v24 + 41) = 0xC000000000000000;
  *((_OWORD *)v24 + 21) = 0u;
  *((_OWORD *)v24 + 22) = 0u;
  *((_OWORD *)v24 + 23) = 0u;
  *((_OWORD *)v24 + 24) = 0u;
  return outlined init with take of PlatformItemList.Item((uint64_t)v24, a2);
}

__n128 PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2(a2, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  long long v23 = a3[1];
  long long v24 = *a3;
  uint64_t v13 = *((void *)a3 + 6);
  uint64_t v12 = *((void *)a3 + 7);
  char v14 = *((unsigned char *)a3 + 64);
  __n128 v21 = *a4;
  long long v22 = a3[2];
  unint64_t v15 = a4[1].n128_u64[0];
  *(void *)(a7 + 16) = 0;
  *(void *)(a7 + 24) = 0;
  *(void *)(a7 + 8) = 0;
  *(unsigned char *)(a7 + 32) = 0;
  *(void *)(a7 + 40) = -1;
  *(unsigned char *)(a7 + 56) = 1;
  *(_OWORD *)(a7 + 248) = 0u;
  *(_OWORD *)(a7 + 296) = 0u;
  *(_OWORD *)(a7 + 312) = 0u;
  *(_OWORD *)(a7 + 264) = 0u;
  *(_OWORD *)(a7 + 280) = 0u;
  *(void *)(a7 + 328) = 0x3FFFFFFFCLL;
  *(_OWORD *)(a7 + 336) = 0u;
  *(_OWORD *)(a7 + 352) = 0u;
  *(_OWORD *)(a7 + 368) = 0u;
  *(_OWORD *)(a7 + 384) = 0u;
  *(void *)(a7 + 480) = 0;
  *(void *)(a7 + 488) = 0;
  *(void *)(a7 + 472) = 0;
  *(unsigned char *)(a7 + 496) = 0;
  *(void *)(a7 + 504) = 0;
  *(void *)(a7 + 512) = 0;
  *(_WORD *)(a7 + 520) = 256;
  *(void *)(a7 + 552) = 1;
  *(_OWORD *)(a7 + 560) = 0u;
  *(_OWORD *)(a7 + 576) = 0u;
  *(_OWORD *)(a7 + 592) = 0u;
  *(_OWORD *)(a7 + 608) = 0u;
  *(void *)(a7 + 624) = 0;
  *(_WORD *)(a7 + 632) = 1283;
  *(unsigned char *)(a7 + 634) = 3;
  uint64_t v16 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v17 = a7 + v16[28];
  uint64_t v18 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(unsigned char *)(a7 + v16[29]) = 0;
  *(unsigned char *)(a7 + v16[30]) = 0;
  *(unsigned char *)(a7 + v16[31]) = 2;
  *(unsigned char *)(a7 + v16[32]) = 0;
  uint64_t v19 = v16[33];
  *(void *)a7 = a1;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v26, a7 + 64, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  *(_OWORD *)(a7 + 400) = v24;
  *(_OWORD *)(a7 + 416) = v23;
  *(_OWORD *)(a7 + 432) = v22;
  *(void *)(a7 + 448) = v13;
  *(void *)(a7 + 456) = v12;
  *(unsigned char *)(a7 + 464) = v14;
  __n128 result = v21;
  *(__n128 *)(a7 + 528) = v21;
  *(void *)(a7 + 544) = v15;
  *(void *)(a7 + v19) = a5;
  *(void *)(a7 + 48) = a6;
  return result;
}

uint64_t storeEnumTagSinglePayload for CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188190B94);
}

uint64_t storeEnumTagSinglePayload for CommandOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D73B1C);
}

double _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 175) = 0;
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined init with take of WeakBox<Swift.AnyObject>(a1, (uint64_t)v20, &lazy cache variable for type metadata for NavigationSplitViewColumnWidth?, (uint64_t)&type metadata for NavigationSplitViewColumnWidth, MEMORY[0x1E4FBB718]);
  uint64_t v6 = v20[0];
  uint64_t v7 = v20[1];
  uint64_t v8 = v20[2];
  uint64_t v9 = v20[3];
  char v10 = v21;
  outlined init with take of WeakBox<Swift.AnyObject>(a1, (uint64_t)v22, &lazy cache variable for type metadata for NavigationSplitViewColumnWidth?, (uint64_t)&type metadata for NavigationSplitViewColumnWidth, v5);
  if (v23 >> 1 != 0xFFFFFFFF || v24 >= 2u)
  {
    *(void *)&long long v25 = v6;
    *((void *)&v25 + 1) = v7;
    uint64_t v26 = v8;
    uint64_t v27 = v9;
    char v28 = v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v25, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v19;
    return swift_bridgeObjectRelease();
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if (v14)
  {
    unint64_t v15 = result;
    int v16 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v3;
    *(void *)&long long v25 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!v16)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v17 = v25;
    }
    specialized _NativeDictionary._delete(at:)(v15, v17);
    uint64_t *v3 = v17;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t HostingViewRegistry.add<A>(_:)(uint64_t a1)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v3, (uint64_t)v4);
  v4[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v4, a1);
  return swift_endAccess();
}

uint64_t outlined init with take of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<Swift.AnyObject>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<Swift.AnyObject>()
{
  if (!lazy cache variable for type metadata for WeakBox<Swift.AnyObject>)
  {
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>);
    }
  }
}

uint64_t outlined init with take of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  _sypSgMaTm_2(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI7WeakBoxVyyXlGWObTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with take of Image.Resolved?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Image.Resolved?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Attribute<PlatformItemList>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for [TableColumnCustomizationID](0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI5ImageVAAE8ResolvedVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_3(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  _sypSgMaTm_7(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for NavigationState.StackContent.Key?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_5(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>)
  {
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F41720]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>);
    }
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt v2;
  Swift::Int v3;
  uint64_t vars8;

  Hasher.init(_seed:)();
  if ((a1 - 2) >= 3u)
  {
    Hasher._combine(_:)(0);
    Swift::Int v2 = a1 & 1;
  }
  else
  {
    Swift::Int v2 = (a1 - 2) + 1;
  }
  Hasher._combine(_:)(v2);
  uint64_t v3 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  int v7;

  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      uint64_t v7 = *(unsigned __int8 *)(*(void *)(v2 + 48) + result);
      switch(v7)
      {
        case 2:
          if (a1 == 2) {
            return result;
          }
          break;
        case 3:
          if (a1 == 3) {
            return result;
          }
          break;
        case 4:
          if (a1 == 4) {
            return result;
          }
          break;
        default:
          if (a1 - 2 >= 3 && ((v7 ^ a1) & 1) == 0) {
            return result;
          }
          break;
      }
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t outlined retain of ResolvedBorderedButton(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 80);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 120);
  uint64_t v17 = *(void *)(a1 + 136);
  char v15 = *(unsigned char *)(a1 + 129);
  unsigned int v16 = *(unsigned __int8 *)(a1 + 144);
  uint64_t v19 = *(void *)(a1 + 152);
  unsigned int v18 = *(unsigned __int8 *)(a1 + 160);
  unsigned int v21 = *(unsigned __int8 *)(a1 + 192);
  uint64_t v24 = *(void *)(a1 + 208);
  uint64_t v25 = *(void *)(a1 + 200);
  uint64_t v22 = *(void *)(a1 + 184);
  uint64_t v23 = *(void *)(a1 + 216);
  uint64_t v28 = *(void *)(a1 + 232);
  char v26 = *(unsigned char *)(a1 + 225);
  unsigned int v27 = *(unsigned __int8 *)(a1 + 240);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 128);
  unsigned int v20 = *(unsigned __int8 *)(a1 + 224);
  outlined copy of Environment<Material?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v5);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v7);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v13, v12);
  outlined copy of Environment<CGFloat?>.Content(v14, v10, v15);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v17, v16);
  outlined copy of Environment<Color?>.Content(v19, v18);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v22, v21);
  outlined copy of Environment<KeyboardShortcut?>.Content(v25, v24, v23, v20, v26);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v28, v27);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(unsigned char *)(a1 + 73);
  uint64_t v13 = *(void *)(a1 + 80);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 88);
  unsigned int v18 = *(void *)(a1 + 120);
  uint64_t v19 = *(void *)(a1 + 112);
  unsigned int v16 = *(void *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 128);
  unsigned int v20 = *(unsigned char *)(a1 + 137);
  unsigned int v21 = *(unsigned __int8 *)(a1 + 152);
  uint64_t v22 = *(void *)(a1 + 144);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 136);
  char v15 = *(unsigned __int8 *)(a1 + 104);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v5);
  outlined copy of Environment<Color?>.Content(v6, v7);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v13, v12);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v16, v15);
  outlined copy of Environment<KeyboardShortcut?>.Content(v19, v18, v17, v14, v20);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v22, v21);
  swift_retain();
  return a1;
}

uint64_t outlined copy of Environment<Material?>.Content(uint64_t a1, unsigned __int8 a2, char a3)
{
  if (a3) {
    return outlined copy of Material?(a1, a2);
  }
  else {
    return swift_retain();
  }
}

uint64_t initializeWithCopy for ResolvedBorderedButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Material?>.Content(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  LOBYTE(v5) = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v5);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v5;
  uint64_t v8 = *(void *)(a2 + 40);
  LOBYTE(v5) = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v5);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v5;
  uint64_t v9 = *(void *)(a2 + 56);
  LOBYTE(v5) = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v9, v5);
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v5;
  uint64_t v10 = *(void *)(a2 + 72);
  LOBYTE(v5) = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v10, v5);
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 104);
  uint64_t v12 = *(unsigned __int8 *)(a2 + 112);
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v11, v12);
  *(void *)(a1 + 104) = v11;
  *(unsigned char *)(a1 + 112) = v12;
  uint64_t v13 = *(void *)(a2 + 120);
  LOBYTE(v12) = *(unsigned char *)(a2 + 129);
  unsigned __int8 v14 = *(unsigned char *)(a2 + 128);
  outlined copy of Environment<CGFloat?>.Content(v13, v14, v12);
  *(void *)(a1 + 120) = v13;
  *(unsigned char *)(a1 + 128) = v14;
  *(unsigned char *)(a1 + 129) = v12;
  uint64_t v15 = *(void *)(a2 + 136);
  LOBYTE(v12) = *(unsigned char *)(a2 + 144);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v15, v12);
  *(void *)(a1 + 136) = v15;
  *(unsigned char *)(a1 + 144) = v12;
  uint64_t v16 = *(void *)(a2 + 152);
  LOBYTE(v12) = *(unsigned char *)(a2 + 160);
  outlined copy of Environment<Color?>.Content(v16, v12);
  *(void *)(a1 + 152) = v16;
  *(unsigned char *)(a1 + 160) = v12;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v17 = *(void *)(a2 + 184);
  LOBYTE(v12) = *(unsigned char *)(a2 + 192);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v17, v12);
  *(void *)(a1 + 184) = v17;
  *(unsigned char *)(a1 + 192) = v12;
  uint64_t v18 = *(void *)(a2 + 200);
  uint64_t v19 = *(void *)(a2 + 208);
  uint64_t v20 = *(void *)(a2 + 216);
  char v21 = *(unsigned char *)(a2 + 225);
  unsigned __int8 v22 = *(unsigned char *)(a2 + 224);
  outlined copy of Environment<KeyboardShortcut?>.Content(v18, v19, v20, v22, v21);
  *(void *)(a1 + 200) = v18;
  *(void *)(a1 + 208) = v19;
  *(void *)(a1 + 216) = v20;
  *(unsigned char *)(a1 + 224) = v22;
  *(unsigned char *)(a1 + 225) = v21;
  uint64_t v23 = *(void *)(a2 + 232);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 240);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v23, v24);
  *(void *)(a1 + 232) = v23;
  *(unsigned char *)(a1 + 240) = v24;
  return a1;
}

uint64_t initializeWithCopy for BorderedButtonStyle_Phone(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  LOBYTE(v5) = *(unsigned char *)(a2 + 41);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v5);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 41) = v5;
  uint64_t v8 = *(void *)(a2 + 48);
  LOBYTE(v5) = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v5);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v5;
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(unsigned __int8 *)(a2 + 72);
  outlined copy of Environment<Color?>.Content(v9, v10);
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = v10;
  return a1;
}

uint64_t initializeWithCopy for OnPlatformContainerSelectionModifier(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v5, v6);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  char v10 = *(unsigned char *)(a2 + 65);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<KeyboardShortcut?>.Content(v7, v8, v9, v11, v10);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 65) = v10;
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(unsigned __int8 *)(a2 + 80);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v12, v13);
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v13;
  return a1;
}

void type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_WORD *destructiveInjectEnumTag for AnyNavigationSplitVisibility.Kind(_WORD *result, unsigned int a2)
{
  if (a2 < 3) {
    *unint64_t result = *result & 0x103 | ((_WORD)a2 << 14);
  }
  else {
    *unint64_t result = (((_WORD)a2 - 3) << 6) & 0x100 | (a2 - 3) & 3 | 0xC000;
  }
  return result;
}

uint64_t View.allowsHitTesting(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for _AllowsHitTestingModifier, a3);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl>)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, (uint64_t)&unk_1ED43FD50, (uint64_t)&type metadata for ArchivesInteractiveControlsEffect, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, HandGestureShortcutInteractiveControl>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect>, (uint64_t)&unk_1ED43FD50, (uint64_t)&type metadata for ArchivesInteractiveControlsEffect, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody.ArchiveBody, ArchivesInteractiveControlsEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyleBody.ArchiveBody and conformance ResolvedToggleStyleBody.ArchiveBody);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableToggleAppIntentModifier>, TemporalStateViewModifier<ToggleState>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(255, &lazy cache variable for type metadata for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for Binding<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>();
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, (uint64_t)&unk_1ED43FDD0, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>);
    }
  }
}

void *specialized AccessibilityToggleModifier.body(content:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v37 = a1[3];
  uint64_t v38 = *a1;
  uint64_t v27 = a1[4];
  char v35 = *((unsigned char *)a1 + 40);
  uint64_t v34 = a1[6];
  uint64_t v33 = a1[7];
  uint64_t v32 = a1[8];
  uint64_t v5 = a1[10];
  uint64_t v30 = a1[1];
  uint64_t v31 = (void *)a1[9];
  char v28 = a1[2] & 1;
  char v29 = *((unsigned char *)a1 + 41) & 1;
  uint64_t v6 = a1[11];
  type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = 12;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  *(void *)&long long v42 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)&__src[0] + 1);
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = *(void *)&__src[0];
  *(void *)(v9 + 24) = v8;
  outlined retain of ToggleStyleConfiguration(a1);
  swift_release();
  type metadata accessor for Binding<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityTraitSet>, MEMORY[0x1E4F40760], MEMORY[0x1E4FBBE00]);
  swift_allocObject();
  AccessibilityTraitSet.init(traits:)();
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v9 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v10 = dword_1ED466048;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v9 + 16, v10 | (v10 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  long long v11 = v3[3];
  long long v12 = v3[1];
  *(_OWORD *)&v58[16] = v3[2];
  long long v59 = v11;
  long long v13 = v3[3];
  long long v14 = v3[5];
  long long v60 = v3[4];
  long long v61 = v14;
  long long v15 = v3[1];
  long long v57 = *v3;
  *(_OWORD *)uint64_t v58 = v15;
  __src[2] = *(_OWORD *)&v58[16];
  __src[3] = v13;
  long long v16 = v3[5];
  __src[4] = v60;
  __src[5] = v16;
  __src[0] = v57;
  __src[1] = v12;
  ToggleStyleConfiguration.accessibilityActions.getter();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  uint64_t v17 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v18);
  *(void *)&long long v42 = specialized AccessibilityProperties.subscript.getter(*(void *)(v9 + 16));
  uint64_t v19 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v19);
  specialized AccessibilityProperties.subscript.setter(v42);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v9 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  __src[0] = *(_OWORD *)&v58[8];
  LOBYTE(__src[1]) = v58[24];
  type metadata accessor for Binding<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E4F3F540], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v41);
  if (v41) {
    char v20 = 2 * (v41 != 1);
  }
  else {
    char v20 = 1;
  }
  LOBYTE(v42) = v20;
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  AccessibilityValueStorage.init<A>(_:description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)__src, (uint64_t)v40);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  uint64_t v21 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v21, &v42);
  swift_bridgeObjectRelease();
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v40, (uint64_t)v39);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v39);
  specialized AccessibilityProperties.subscript.getter(*(void *)(v9 + 16), v39);
  specialized Optional<A>.merge(with:)((uint64_t)&v42);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v39);
  outlined destroy of AccessibilityValueStorage?((uint64_t)&v42);
  swift_endAccess();
  swift_release();
  swift_release();
  *(void *)&long long v42 = v38;
  *((void *)&v42 + 1) = v30;
  char v43 = v28;
  uint64_t v44 = v37;
  uint64_t v45 = v27;
  char v46 = v35;
  char v47 = v29;
  uint64_t v48 = v34;
  uint64_t v49 = v33;
  uint64_t v50 = v32;
  uint64_t v51 = v31;
  uint64_t v52 = v5;
  uint64_t v53 = v6;
  uint64_t v54 = v9;
  uint64_t v55 = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v34, v33, v32, v31);
  swift_retain();
  swift_retain();
  outlined destroy of AccessibilityValueStorage?((uint64_t)v40);
  outlined destroy of AccessibilityValueStorage((uint64_t)__src);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v34, v33, v32, v31);
  swift_release();
  swift_release();
  type metadata accessor for Binding<Bool>(0, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
  type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, (uint64_t)&unk_1ED43FDD0, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>();
  lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
  View.staticIf<A, B>(_:trueModifier:)();
  uint64_t v22 = v48;
  uint64_t v23 = v49;
  char v24 = v50;
  uint64_t v25 = v51;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v22, v23, v24, v25);
  swift_release();
  swift_release();
  return memcpy(a2, __src, 0x110uLL);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, (uint64_t)&unk_1ED43FDD0, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody, (uint64_t)&unk_1ED43FDD0, (uint64_t (*)(uint64_t, void *))type metadata accessor for AccessibilityToggleModifier.RepresentationModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, (uint64_t)&unk_1ED43FDD0, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ToggleStyleModifier<DefaultToggleStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(255, &lazy cache variable for type metadata for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(255, a4, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, a5);
    unint64_t v8 = type metadata accessor for ModifiedContent();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t Toggle.init(isOn:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void (*a4)(void)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  *(unsigned char *)(v14 + 48) = a3;
  uint64_t v19 = v14;
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for [Binding<Bool>], MEMORY[0x1E4FBB320]);
  uint64_t v16 = v15;
  unint64_t v17 = lazy protocol witness table accessor for type [Binding<Bool>] and conformance [A]();
  swift_retain();
  swift_retain();
  Toggle.init<A>(toggledOn:label:)((uint64_t)&v19, a4, a5, v16, a6, v17, a7);
  swift_release();
  return swift_release();
}

void type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI7BindingVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [Binding<Bool>] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Binding<Bool>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Binding<Bool>] and conformance [A])
  {
    type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(255, (unint64_t *)&lazy cache variable for type metadata for [Binding<Bool>], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Binding<Bool>] and conformance [A]);
  }
  return result;
}

uint64_t Toggle.init<A>(toggledOn:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v32 = a6;
  uint64_t v34 = a5;
  uint64_t v35 = a1;
  uint64_t v30 = a3;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](a1);
  long long v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(int *)(type metadata accessor for Toggle() + 40);
  uint64_t v33 = a7;
  uint64_t v15 = (_OWORD *)((char *)a7 + v14);
  v15[1] = 0u;
  v15[2] = 0u;
  *uint64_t v15 = 0u;
  a2();
  uint64_t v16 = v11;
  char v29 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v29(v13, a1, a4);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v31 = v11;
  uint64_t v18 = (v17 + 64) & ~v17;
  v28[1] = v17 | 7;
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  uint64_t v20 = v30;
  *((void *)v19 + 4) = v30;
  *((void *)v19 + 5) = a4;
  uint64_t v21 = v32;
  *((void *)v19 + 6) = v34;
  *((void *)v19 + 7) = v21;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v22(&v19[v18], v13, a4);
  v29(v13, v35, a4);
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 3) = 0;
  *((void *)v23 + 4) = v20;
  *((void *)v23 + 5) = a4;
  *((void *)v23 + 6) = v34;
  *((void *)v23 + 7) = v21;
  v22(&v23[v18], v13, a4);
  Binding.init(get:set:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v35, a4);
  uint64_t v25 = v37;
  char v26 = v38;
  uint64_t v27 = v33;
  *uint64_t v33 = v36;
  v27[1] = v25;
  *((unsigned char *)v27 + 16) = v26;
  return result;
}

uint64_t closure #1 in Toggle.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Toggle();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 36));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t type metadata accessor for Toggle()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>)
  {
    type metadata accessor for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody, (uint64_t)&unk_1ED43FDD0, (uint64_t (*)(uint64_t, void *))type metadata accessor for AccessibilityToggleModifier.RepresentationModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label> and conformance AccessibilityToggleModifier<A>.RepresentationModifier<A1>);
  }
  return result;
}

void type metadata accessor for AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, void *))
{
  if (!*a2)
  {
    v10[0] = a4;
    v10[1] = &type metadata for ToggleStyleConfiguration.Label;
    _OWORD v10[2] = a3();
    v10[3] = &protocol witness table for ToggleStyleConfiguration.Label;
    unint64_t v8 = a5(a1, v10);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for AccessibilityToggleModifier.RepresentationModifier()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedToggleStyleBody(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyleBody and conformance ResolvedToggleStyleBody);
  }
  return result;
}

void *ResolvedToggleStyle.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v15 = *v1;
  long long v16 = v3;
  long long v4 = v1[3];
  long long v17 = v1[2];
  long long v18 = v4;
  long long v5 = v1[5];
  long long v19 = v1[4];
  long long v20 = v5;
  uint64_t v6 = *((void *)&v16 + 1);
  long long v21 = v15;
  char v22 = v16;
  uint64_t v23 = *((void *)&v16 + 1);
  uint64_t v24 = v17;
  __int16 v25 = WORD4(v17);
  long long v26 = v18;
  long long v27 = v19;
  long long v28 = v5;
  long long v29 = v15;
  char v30 = v16;
  uint64_t v31 = *((void *)&v16 + 1);
  uint64_t v32 = v17;
  __int16 v33 = WORD4(v17);
  long long v34 = v18;
  long long v35 = v19;
  long long v36 = v5;
  outlined retain of ToggleStyleConfiguration(&v15);
  specialized AccessibilityToggleModifier.body(content:)((uint64_t *)&v21, __src);
  outlined release of ToggleStyleConfiguration(&v15);
  uint64_t v13 = v6;
  type metadata accessor for Binding<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E4F3F540], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v14);
  LOBYTE(v6) = v14;
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = v6;
  unint64_t v8 = (_OWORD *)swift_allocObject();
  long long v9 = v18;
  v8[3] = v17;
  v8[4] = v9;
  long long v10 = v20;
  v8[5] = v19;
  v8[6] = v10;
  long long v11 = v16;
  v8[1] = v15;
  v8[2] = v11;
  memcpy((void *)a1, __src, 0x110uLL);
  *(unsigned char *)(a1 + 272) = 1;
  *(_DWORD *)(a1 + 273) = v13;
  *(_DWORD *)(a1 + 276) = *(_DWORD *)((char *)&v13 + 3);
  *(void *)(a1 + 280) = partial apply for closure #1 in View.platformItemToggleState(_:);
  *(void *)(a1 + 288) = v7;
  *(void *)(a1 + 296) = partial apply for closure #2 in ResolvedToggleStyle.body.getter;
  *(void *)(a1 + 304) = v8;
  return outlined retain of ToggleStyleConfiguration(&v15);
}

void *outlined retain of ToggleStyleConfiguration(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  long long v5 = (void *)a1[9];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  return a1;
}

void *outlined release of ToggleStyleConfiguration(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  long long v5 = (void *)a1[9];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type DefaultToggleStyle and conformance DefaultToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultToggleStyle and conformance DefaultToggleStyle;
  if (!lazy protocol witness table cache variable for type DefaultToggleStyle and conformance DefaultToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultToggleStyle and conformance DefaultToggleStyle);
  }
  return result;
}

uint64_t PickerContent.keyboardShortcut(_:modifiers:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  _OWORD v6[2] = a2;
  char v7 = 0;
  return PickerContent.keyboardShortcut(_:)((uint64_t)v6, a3, a4);
}

uint64_t PickerContent.keyboardShortcut(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  long long v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = v10[2];
  char v14 = *((unsigned char *)v10 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v3, a2, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v9, a2);
  uint64_t v15 = a3 + *(int *)(type metadata accessor for _KeyboardShortcutPickerContent() + 36);
  *(void *)uint64_t v15 = v12;
  *(void *)(v15 + 8) = v11;
  *(void *)(v15 + 16) = v13;
  *(unsigned char *)(v15 + 24) = v14;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for _KeyboardShortcutPickerContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for PrimitiveButtonGesture(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      long long v6 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      char v10 = v4 & 1;
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *((void *)a2 + 1);
      outlined copy of HoverCallback();
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v12;
      *(unsigned char *)(a1 + 16) = v10;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of ButtonPressingAction(a1);
    char v5 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(unsigned char *)(a1 + 16) = v5;
  }
  else
  {
    char v7 = v4 & 1;
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = *((void *)a2 + 1);
    outlined copy of HoverCallback();
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = v7;
    outlined consume of HoverCallback();
  }
  uint64_t v13 = *((void *)a2 + 4);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = v13;
  swift_retain();
  swift_release();
  uint64_t v14 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v14;
  return a1;
}

uint64_t assignWithCopy for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  char v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *char v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    unsigned int v11 = *(unsigned __int8 *)(v9 + 24);
    if (v11 >= 2) {
      unsigned int v11 = *(_DWORD *)v9 + 2;
    }
    swift_release();
    if (v11 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v12 = *(unsigned __int8 *)(v10 + 24);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)v10 + 2;
    }
    *(void *)unint64_t v9 = *(void *)v10;
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
    if (v12 == 1)
    {
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(unsigned char *)(v9 + 24) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)(v9 + 24) = 0;
    }
    swift_retain();
    swift_retain();
  }
  unint64_t v13 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *(void *)(v14 + 8);
  char v17 = *(unsigned char *)(v14 + 16);
  outlined copy of HoverCallback();
  *(void *)unint64_t v13 = v15;
  *(void *)(v13 + 8) = v16;
  *(unsigned char *)(v13 + 16) = v17;
  outlined consume of HoverCallback();
  return a1;
}

void *assignWithCopy for List(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v3 = a3;
  int v4 = __src;
  uint64_t v67 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v67 - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v10 = v9 | 7;
  uint64_t v11 = ~(v9 | 7);
  uint64_t v70 = (v9 + 23) & v11;
  unsigned int v12 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 >= 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      *__dst = *__src;
      swift_retain();
      swift_release();
      *unsigned int v12 = *v13;
      swift_retain();
      swift_release();
      uint64_t v15 = (unsigned __int8 *)(((unint64_t)v12 + v10 + 8) & v11);
      uint64_t v16 = (unsigned __int8 *)(((unint64_t)v13 + v10 + 8) & v11);
      if (v7) {
        size_t v17 = v8;
      }
      else {
        size_t v17 = v8 + 1;
      }
      if (v17 <= v8) {
        unint64_t v18 = v8;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18 <= 8) {
        uint64_t v19 = 8;
      }
      else {
        uint64_t v19 = v18;
      }
      if (v15 == v16) {
        goto LABEL_122;
      }
      unsigned int v20 = v15[v19];
      unsigned int v21 = v20 - 3;
      if (v20 < 3)
      {
        uint64_t v23 = v67;
LABEL_71:
        if (v20 == 2) {
          goto LABEL_100;
        }
      }
      else
      {
        if (v19 <= 3) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = 4;
        }
        uint64_t v23 = v67;
        switch(v22)
        {
          case 1:
            int v24 = *v15;
            break;
          case 2:
            int v24 = *(unsigned __int16 *)v15;
            break;
          case 3:
            int v24 = *(unsigned __int16 *)v15 | (v15[2] << 16);
            break;
          case 4:
            int v24 = *(_DWORD *)v15;
            break;
          default:
            goto LABEL_71;
        }
        int v46 = (v24 | (v21 << (8 * v19))) + 3;
        unsigned int v20 = v24 + 3;
        if (v19 < 4) {
          unsigned int v20 = v46;
        }
        if (v20 == 2) {
          goto LABEL_100;
        }
      }
      if (v20 != 1)
      {
        swift_bridgeObjectRelease();
LABEL_102:
        unsigned int v47 = v16[v19];
        unsigned int v48 = v47 - 3;
        if (v47 >= 3)
        {
          if (v19 <= 3) {
            uint64_t v49 = v19;
          }
          else {
            uint64_t v49 = 4;
          }
          switch(v49)
          {
            case 1:
              int v50 = *v16;
              goto LABEL_111;
            case 2:
              int v50 = *(unsigned __int16 *)v16;
              goto LABEL_111;
            case 3:
              int v50 = *(unsigned __int16 *)v16 | (v16[2] << 16);
              goto LABEL_111;
            case 4:
              int v50 = *(_DWORD *)v16;
LABEL_111:
              int v51 = (v50 | (v48 << (8 * v19))) + 3;
              unsigned int v47 = v50 + 3;
              if (v19 < 4) {
                unsigned int v47 = v51;
              }
              break;
            default:
              break;
          }
        }
        if (v47 == 2)
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(v15, v16, v23);
          char v52 = 2;
        }
        else
        {
          if (v47 != 1)
          {
            *(void *)uint64_t v15 = *(void *)v16;
            v15[v19] = 0;
            swift_bridgeObjectRetain();
LABEL_122:
            uint64_t v3 = a3;
            uint64_t v39 = v70;
            goto LABEL_123;
          }
          if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v23))
          {
            memcpy(v15, v16, v17);
          }
          else
          {
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(v15, v16, v23);
            (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v23);
          }
          char v52 = 1;
        }
        v15[v19] = v52;
        goto LABEL_122;
      }
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v23)) {
        goto LABEL_102;
      }
LABEL_100:
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v15, v23);
      goto LABEL_102;
    }
    swift_release();
    swift_release();
    long long v34 = (unsigned __int8 *)(((unint64_t)v12 + v10 + 8) & v11);
    if (v7) {
      unint64_t v35 = v8;
    }
    else {
      unint64_t v35 = v8 + 1;
    }
    if (v35 <= v8) {
      unint64_t v35 = v8;
    }
    if (v35 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v35;
    }
    unsigned int v36 = v34[v19];
    unsigned int v37 = v36 - 3;
    if (v36 < 3)
    {
      uint64_t v39 = v70;
LABEL_64:
      if (v36 == 2) {
        goto LABEL_90;
      }
    }
    else
    {
      if (v19 <= 3) {
        uint64_t v38 = v19;
      }
      else {
        uint64_t v38 = 4;
      }
      uint64_t v39 = v70;
      switch(v38)
      {
        case 1:
          int v40 = *v34;
          break;
        case 2:
          int v40 = *(unsigned __int16 *)v34;
          break;
        case 3:
          int v40 = *(unsigned __int16 *)(((unint64_t)v12 + v10 + 8) & v11) | (*(unsigned __int8 *)((((unint64_t)v12 + v10 + 8) & v11) + 2) << 16);
          break;
        case 4:
          int v40 = *(_DWORD *)v34;
          break;
        default:
          goto LABEL_64;
      }
      int v45 = (v40 | (v37 << (8 * v19))) + 3;
      unsigned int v36 = v40 + 3;
      if (v19 < 4) {
        unsigned int v36 = v45;
      }
      if (v36 == 2) {
        goto LABEL_90;
      }
    }
    if (v36 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v34, 1, v67)) {
LABEL_90:
      }
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v34, v67);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    memcpy(__dst, v4, v19 + v39 + 1);
    uint64_t v3 = a3;
    goto LABEL_123;
  }
  if (v14 < 0xFFFFFFFF)
  {
    if (v7) {
      unint64_t v41 = *(void *)(*(void *)(v67 - 8) + 64);
    }
    else {
      unint64_t v41 = v8 + 1;
    }
    if (v41 <= v8) {
      unint64_t v41 = *(void *)(*(void *)(v67 - 8) + 64);
    }
    if (v41 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v41;
    }
    uint64_t v39 = v70;
    memcpy(__dst, __src, v19 + v70 + 1);
  }
  else
  {
    *__dst = *__src;
    *unsigned int v12 = *v13;
    uint64_t v26 = v10 + 8;
    long long v27 = (void *)(((unint64_t)v12 + v10 + 8) & v11);
    long long v28 = (unsigned __int8 *)(((unint64_t)v13 + v26) & v11);
    if (v7) {
      size_t v29 = v8;
    }
    else {
      size_t v29 = v8 + 1;
    }
    if (v29 <= v8) {
      unint64_t v30 = v8;
    }
    else {
      unint64_t v30 = v29;
    }
    if (v30 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v30;
    }
    unsigned int v31 = v28[v19];
    swift_retain();
    swift_retain();
    if (v31 < 3)
    {
      int v4 = __src;
      uint64_t v3 = a3;
LABEL_59:
      if (v31 == 2)
      {
LABEL_82:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v27, v28, v67);
        char v42 = 2;
LABEL_83:
        *((unsigned char *)v27 + v19) = v42;
        uint64_t v39 = v70;
        goto LABEL_123;
      }
    }
    else
    {
      if (v19 <= 3) {
        uint64_t v32 = v19;
      }
      else {
        uint64_t v32 = 4;
      }
      int v4 = __src;
      uint64_t v3 = a3;
      switch(v32)
      {
        case 1:
          int v33 = *v28;
          break;
        case 2:
          int v33 = *(unsigned __int16 *)v28;
          break;
        case 3:
          int v33 = *(unsigned __int16 *)v28 | (v28[2] << 16);
          break;
        case 4:
          int v33 = *(_DWORD *)v28;
          break;
        default:
          goto LABEL_59;
      }
      int v43 = (v33 | ((v31 - 3) << (8 * v19))) + 3;
      unsigned int v44 = v33 + 3;
      if (v19 >= 4) {
        unsigned int v31 = v44;
      }
      else {
        unsigned int v31 = v43;
      }
      if (v31 == 2) {
        goto LABEL_82;
      }
    }
    if (v31 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v28, 1, v67))
      {
        memcpy(v27, v28, v29);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v27, v28, v67);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v67);
      }
      char v42 = 1;
      goto LABEL_83;
    }
    *long long v27 = *(void *)v28;
    *((unsigned char *)v27 + v19) = 0;
    swift_bridgeObjectRetain();
    uint64_t v39 = v70;
  }
LABEL_123:
  uint64_t v53 = *(void *)(*(void *)(v3 + 24) - 8);
  uint64_t v54 = v53 + 24;
  uint64_t v55 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v56 = v19 + v39 + v55 + 1;
  unint64_t v57 = ((unint64_t)__dst + v56) & ~v55;
  unint64_t v58 = ((unint64_t)v4 + v56) & ~v55;
  (*(void (**)(unint64_t, unint64_t))(v53 + 24))(v57, v58);
  uint64_t v59 = *(void *)(v54 + 40) + 7;
  long long v60 = (void *)((v59 + v57) & 0xFFFFFFFFFFFFFFF8);
  long long v61 = (void *)((v59 + v58) & 0xFFFFFFFFFFFFFFF8);
  void *v60 = *v61;
  unint64_t v62 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v63 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v64 = *(void *)v63;
  uint64_t v65 = *(void *)(v63 + 8);
  LOBYTE(v54) = *(unsigned char *)(v63 + 16);
  outlined copy of HoverCallback();
  *(void *)unint64_t v62 = v64;
  *(void *)(v62 + 8) = v65;
  *(unsigned char *)(v62 + 16) = v54;
  outlined consume of HoverCallback();
  return __dst;
}

uint64_t PickerContent.disabled(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = a1;
  uint64_t v7 = *(void *)(a2 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, a2, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, a2);
  uint64_t result = type metadata accessor for _DisabledPickerContent();
  *(unsigned char *)(a3 + *(int *)(result + 36)) = v5;
  return result;
}

uint64_t type metadata accessor for _DisabledPickerContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _DisabledPickerContent._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v13 = (char *)v17 - v12;
  (*(void (**)(uint64_t, uint64_t, double))(v7 + 56))(v8, v7, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v7;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  swift_getAssociatedConformanceWitness();
  View.transformTrait<A>(_:transform:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t _KeyboardShortcutPickerContent._identifiedView.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v14 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 56))(v4, v3, v7);
  uint64_t v10 = (long long *)(v1 + *(int *)(a1 + 36));
  uint64_t v11 = *((void *)v10 + 2);
  char v12 = *((unsigned char *)v10 + 24);
  long long v14 = *v10;
  uint64_t v15 = v11;
  char v16 = v12;
  swift_getAssociatedConformanceWitness();
  View._trait<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

uint64_t PickerOption._identifiedView.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[5];
  uint64_t v7 = type metadata accessor for VStack();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v15[-v9];
  uint64_t v16 = a1[2];
  uint64_t v11 = v16;
  uint64_t v17 = v5;
  uint64_t v12 = a1[4];
  uint64_t v18 = v12;
  uint64_t v19 = v6;
  uint64_t v20 = v2;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.tag<A>(_:includeOptional:)(v2, 1, v7, v11, WitnessTable, v12, a2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t View.tag<A>(_:includeOptional:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a5;
  v31[1] = a3;
  int v36 = a2;
  uint64_t v44 = a7;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v47 = a6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = v10;
  uint64_t v11 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v43 = v11;
  MEMORY[0x1F4188790](v11);
  unint64_t v41 = (char *)v31 - v12;
  uint64_t v32 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v13 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v15 = (char *)v31 - v14;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for _TraitWritingModifier();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v16 - 8);
  uint64_t v38 = v16;
  v17.n128_f64[0] = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v31 - v18;
  uint64_t v20 = *(void *)(a4 - 8);
  unsigned int v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  v31[0] = a1;
  v21(v15, a1, a4, v17);
  uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56);
  v22(v15, 0, 1, a4);
  long long v34 = v19;
  uint64_t v23 = v35;
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v32);
  if (v36)
  {
    int v24 = v41;
    ((void (*)(char *, void, uint64_t))v21)(v41, v31[0], a4);
    v22(v24, 0, 1, a4);
    uint64_t v25 = swift_checkMetadataState();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
  }
  else
  {
    uint64_t v26 = swift_checkMetadataState();
    int v24 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v41, 1, 1, v26);
  }
  type metadata accessor for TagValueTraitKey();
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v45 = v23;
  uint64_t v46 = v27;
  uint64_t v28 = v38;
  swift_getWitnessTable();
  swift_getWitnessTable();
  size_t v29 = v34;
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v24, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v29, v28);
}

uint64_t initializeWithCopy for _DisabledPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t initializeWithCopy for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for WheelPickerRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  *(unsigned char *)(*(void *)(v9 + 48) + v12) = *(unsigned char *)(*(void *)(v9 + 48) + v13);
  return a1;
}

void *initializeWithCopy for Picker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  swift_bridgeObjectRetain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = *(void *)(v7 + 48) + v13;
  uint64_t v15 = (v14 + v9) & ~v13;
  uint64_t v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v15, v16);
  *(void *)((*(void *)(v12 + 48) + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v12 + 48)
                                                                                       + 7
                                                                                       + v16) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for PickerBuilder.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithCopy for Tuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithCopy for DelaySource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithCopy for _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 128);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v7;
    *(void *)(a1 + 136) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 104, a2 + 104, v7);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v9;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
  }
  return a1;
}

uint64_t initializeWithCopy for TupleTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithCopy for NavigationSplitReader(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of HoverCallback();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = a2[5];
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  uint64_t v8 = a2[8];
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = a2[9];
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for NavigationSplitView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v23 = *(unsigned __int8 *)(v22 + 18);
  if (v23 >= 2) {
    unsigned int v23 = *(_DWORD *)v22 + 2;
  }
  if (v23 == 1)
  {
    *(void *)unint64_t v21 = *(void *)v22;
    *(void *)(v21 + 8) = *(void *)(v22 + 8);
    *(_WORD *)(v21 + 16) = *(_WORD *)(v22 + 16);
    swift_retain();
    char v24 = 1;
  }
  else
  {
    char v24 = 0;
    *(_WORD *)unint64_t v21 = *(_WORD *)v22;
    *(void *)(v21 + 8) = *(void *)(v22 + 8);
  }
  swift_retain();
  *(unsigned char *)(v21 + 18) = v24;
  unint64_t v25 = (v22 + 26) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v26 = *(unsigned __int8 *)(v25 + 17);
  if (v26 >= 2) {
    unsigned int v26 = *(_DWORD *)v25 + 2;
  }
  unint64_t v27 = (v21 + 26) & 0xFFFFFFFFFFFFFFF8;
  if (v26 == 1)
  {
    *(void *)unint64_t v27 = *(void *)v25;
    *(void *)(v27 + 8) = *(void *)(v25 + 8);
    *(unsigned char *)(v27 + 16) = *(unsigned char *)(v25 + 16);
    swift_retain();
    char v28 = 1;
  }
  else
  {
    char v28 = 0;
    *(unsigned char *)unint64_t v27 = *(unsigned char *)v25;
    *(void *)(v27 + 8) = *(void *)(v25 + 8);
  }
  swift_retain();
  *(unsigned char *)(v27 + 17) = v28;
  *(_WORD *)(v27 + 18) = *(_WORD *)(v25 + 18);
  return a1;
}

uint64_t initializeWithCopy for PrimitiveButtonGesture(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    char v5 = v4 & 1;
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    outlined copy of HoverCallback();
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = v5;
  }
  uint64_t v8 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v11 = *(unsigned __int8 *)(v10 + 24);
  if (v11 >= 2) {
    unsigned int v11 = *(_DWORD *)v10 + 2;
  }
  *(void *)unint64_t v9 = *(void *)v10;
  if (v11 == 1)
  {
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
    *(void *)(v9 + 16) = *(void *)(v10 + 16);
    swift_retain();
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
  }
  swift_retain();
  swift_retain();
  *(unsigned char *)(v9 + 24) = v12;
  unint64_t v13 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *(void *)(v14 + 8);
  char v17 = *(unsigned char *)(v14 + 16);
  outlined copy of HoverCallback();
  *(void *)unint64_t v13 = v15;
  *(void *)(v13 + 8) = v16;
  *(unsigned char *)(v13 + 16) = v17;
  return a1;
}

void *initializeWithCopy for List(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  int v9 = *(_DWORD *)(v7 + 84);
  uint64_t v10 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v11 = v10 | 7;
  uint64_t v12 = (v10 + 23) & ~(v10 | 7);
  unint64_t v13 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = *v13;
  if ((unint64_t)*v13 < 0xFFFFFFFF)
  {
    if (v9) {
      unint64_t v23 = *(void *)(v7 + 64);
    }
    else {
      unint64_t v23 = v8 + 1;
    }
    if (v23 > v8) {
      unint64_t v8 = v23;
    }
    if (v8 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v8;
    }
    memcpy(__dst, __src, v19 + v12 + 1);
  }
  else
  {
    BOOL v15 = v9 == 0;
    *__dst = *__src;
    uint64_t v16 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v16 = v14;
    __dsta = (void *)(((unint64_t)v16 + v11 + 8) & ~v11);
    uint64_t v41 = v12;
    char v17 = (unsigned __int8 *)(((unint64_t)v13 + v11 + 8) & ~v11);
    if (v15) {
      size_t v18 = v8 + 1;
    }
    else {
      size_t v18 = v8;
    }
    if (v18 > v8) {
      unint64_t v8 = v18;
    }
    if (v8 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v8;
    }
    unsigned int v20 = v17[v19];
    swift_retain();
    swift_retain();
    if (v20 >= 3)
    {
      if (v19 <= 3) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *v17;
          goto LABEL_28;
        case 2:
          int v22 = *(unsigned __int16 *)v17;
          goto LABEL_28;
        case 3:
          int v22 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          goto LABEL_28;
        case 4:
          int v22 = *(_DWORD *)v17;
LABEL_28:
          int v24 = (v22 | ((v20 - 3) << (8 * v19))) + 3;
          unsigned int v25 = v22 + 3;
          if (v19 >= 4) {
            unsigned int v20 = v25;
          }
          else {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(__dsta, v17, v6);
      *((unsigned char *)__dsta + v19) = 2;
    }
    else if (v20 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(v17, 1, v6))
      {
        memcpy(__dsta, v17, v18);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(__dsta, v17, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(__dsta, 0, 1, v6);
      }
      *((unsigned char *)__dsta + v19) = 1;
    }
    else
    {
      void *__dsta = *(void *)v17;
      *((unsigned char *)__dsta + v19) = 0;
      swift_bridgeObjectRetain();
    }
    uint64_t v12 = v41;
  }
  uint64_t v26 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v27 = v26 + 16;
  uint64_t v28 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v29 = v19 + v12 + v28 + 1;
  unint64_t v30 = ((unint64_t)__dst + v29) & ~v28;
  unint64_t v31 = ((unint64_t)__src + v29) & ~v28;
  (*(void (**)(unint64_t, unint64_t))(v26 + 16))(v30, v31);
  uint64_t v32 = *(void *)(v27 + 48) + 7;
  uint64_t v33 = (void *)((v32 + v30) & 0xFFFFFFFFFFFFFFF8);
  long long v34 = (void *)((v32 + v31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v33 = *v34;
  unint64_t v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = *(void *)v36;
  uint64_t v38 = *(void *)(v36 + 8);
  LOBYTE(v27) = *(unsigned char *)(v36 + 16);
  outlined copy of HoverCallback();
  *(void *)unint64_t v35 = v37;
  *(void *)(v35 + 8) = v38;
  *(unsigned char *)(v35 + 16) = v27;
  return __dst;
}

uint64_t outlined copy of HoverCallback()
{
  return swift_retain();
}

uint64_t one-time initialization function for newItem()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.newItem);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.newItem);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D29B0;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

void type metadata completion function for ToolbarBridge()
{
  type metadata accessor for ToolbarStorage.SearchItem?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ToolbarStorage.NavigationProperties?(319);
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t one-time initialization function for toolbar()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.toolbar);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.toolbar);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2A20;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t one-time initialization function for sidebar()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.sidebar);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.sidebar);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2A30;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

{
  uint64_t ObjCClassFromMetadata;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v1 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = objc_msgSend(v1, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  LOBYTE(ObjCClassFromMetadata) = v6;
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static Text.Accessibility.sidebar = v3;
  *(void *)algn_1E90FC0D8 = v5;
  byte_1E90FC0E0 = ObjCClassFromMetadata & 1;
  qword_1E90FC0E8 = v8;
  return result;
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)a2);
  uint64_t v6 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  uint64_t v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)a2);
  uint64_t v6 = type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t closure #1 in NavigationPropertiesModifier.PropertiesTransform.value.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  uint64_t v7 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  int v8 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  if (v8 != 1) {
    return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV20NavigationPropertiesV_s5NeverOytTg503_s7c4UI23gh32KeyV6reduce5value9nextValueyAA14eF26V0cD0VSgz_AKyXEtFZyAJXEfU_AHSgTf1cn_n(a2, a1);
  }
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  return _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(a2, a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
}

void closure #1 in UIKitToolbarStrategy.updateRenameDelegate()(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  type metadata accessor for PlatformItemList.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v23 - v5;
  uint64_t v7 = type metadata accessor for PlatformItemList.Item();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1 + direct field offset for ToolbarBridge.platformVended;
  id v12 = *(id *)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
  uint64_t v13 = UINavigationItem.renameDelegate.getter();

  uint64_t v14 = a1 + direct field offset for ToolbarBridge.navigationProperties;
  swift_beginAccess();
  uint64_t v15 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
LABEL_4:
    outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
LABEL_5:
    id v16 = *(id *)(v11 + 8);
    UINavigationItem.renameDelegate.setter();

    goto LABEL_6;
  }
  outlined init with copy of ToolbarStorage.NavigationProperties?(v14 + *(int *)(v15 + 24), (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    goto LABEL_4;
  }
  outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  unint64_t v20 = *((void *)v10 + 41);
  if (v20 >> 2 == 0xFFFFFFFF || v20 >> 62 != 1)
  {
    outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    goto LABEL_5;
  }
  id v21 = *(id *)(v11 + 8);
  ToolbarBridge<>.platformDelegate.getter();
  if (v22) {
    lazy protocol witness table accessor for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate();
  }
  UINavigationItem.renameDelegate.setter();

  outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
LABEL_6:
  id v17 = *(id *)(v11 + 8);
  uint64_t v18 = UINavigationItem.renameDelegate.getter();

  BOOL v19 = v13 == 0;
  if (!v13)
  {
    if (!v18)
    {
      BOOL v19 = 0;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  swift_unknownObjectRelease();
  if (v18)
  {
LABEL_10:
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  BOOL v19 = 1;
LABEL_11:
  *a2 = v19;
}

uint64_t storeEnumTagSinglePayload for PlatformItemList.Item(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B48570);
}

uint64_t closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = a1 + direct field offset for ToolbarBridge.navigationProperties;
  swift_beginAccess();
  outlined init with copy of ToolbarStorage.NavigationProperties?(v11, (uint64_t)v10, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v4);
  uint64_t v12 = a1 + direct field offset for ToolbarBridge.platformVended;
  id v13 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                              + direct field offset for ToolbarBridge.platformVended
                                                              + 8), sel_titleMenuProvider));
  if (v13)
  {
    *(void *)(swift_allocObject() + 16) = v13;
    uint64_t v14 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?);
  }
  else
  {
    uint64_t v14 = 0;
  }
  outlined init with copy of ToolbarStorage.NavigationProperties?((uint64_t)v10, (uint64_t)v7, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
  uint64_t v15 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v7, 1, v15) == 1)
  {
    outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v7, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
LABEL_7:
    objc_msgSend(*(id *)(v12 + 8), sel_setTitleMenuProvider_, 0);
    goto LABEL_12;
  }
  int v16 = v7[16];
  uint64_t v29 = *((void *)v7 + 1);
  outlined copy of ToolbarStorage.NavigationProperties.Actions?(v29, v16);
  outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v7, type metadata accessor for ToolbarStorage.NavigationProperties);
  if (v16 == 254) {
    goto LABEL_7;
  }
  uint64_t v27 = v14;
  uint64_t v28 = a2;
  uint64_t v17 = a1 + direct field offset for ToolbarBridge.lastEnvironment;
  swift_beginAccess();
  if (*(void *)(v17 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v18 = aBlock[6];
  swift_endAccess();
  BOOL v19 = *(void **)(v12 + 8);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v29;
  *(unsigned char *)(v20 + 24) = v16;
  *(void *)(v20 + 32) = v18;
  aBlock[4] = partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider();
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  uint64_t aBlock[3] = &block_descriptor_18_0;
  id v21 = _Block_copy(aBlock);
  id v22 = v19;
  swift_release();
  objc_msgSend(v22, sel_setTitleMenuProvider_, v21);
  _Block_release(v21);

  uint64_t v14 = v27;
  a2 = v28;
LABEL_12:
  id v23 = objc_msgSend(*(id *)(v12 + 8), sel_titleMenuProvider);
  uint64_t result = outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v10, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
  if (v23)
  {
    _Block_release(v23);
  }
  else if (!v13)
  {
    char v25 = 0;
    goto LABEL_16;
  }
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v14);
  char v25 = 1;
LABEL_16:
  *a2 = v25;
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DD0C50);
}

id ToolbarBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = &v0[direct field offset for ToolbarBridge.updateContext];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  uint64_t v3 = &v0[direct field offset for ToolbarBridge.platformVended];
  id v4 = objc_allocWithZone(MEMORY[0x1E4FB19F0]);
  uint64_t v5 = v0;
  id v6 = objc_msgSend(v4, sel_init);
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = v6;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *((void *)v3 + 2) = MEMORY[0x1E4FBC860];
  *((void *)v3 + 3) = v7;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  uint64_t v8 = &v5[direct field offset for ToolbarBridge.toolbarStorage];
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uint64_t v9 = &v5[direct field offset for ToolbarBridge.searchItem];
  uint64_t v10 = type metadata accessor for ToolbarStorage.SearchItem(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(void *)&v5[direct field offset for ToolbarBridge.navigationAdaptor] = v7;
  uint64_t v11 = &v5[direct field offset for ToolbarBridge.navigationProperties];
  uint64_t v12 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  id v13 = &v5[direct field offset for ToolbarBridge.lastBarContext];
  v13[6] = 0;
  *((_WORD *)v13 + 2) = 0;
  *(_DWORD *)id v13 = 2;
  EnvironmentValues.init()();
  uint64_t v14 = direct field offset for ToolbarBridge.allowedLocations;
  uint64_t v15 = specialized static Toolbar.BarLocation.allCases.getter();
  uint64_t v16 = specialized Set.init<A>(_:)((uint64_t)v15);
  swift_bridgeObjectRelease();
  *(void *)&v5[v14] = v16;
  *(void *)&v5[direct field offset for ToolbarBridge.accessoryBarLocations] = v7;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.toolbarTracker] = -1;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.searchTracker] = -1;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.titleTracker] = -1;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.adaptorTracker] = -1;
  *(_DWORD *)&v5[direct field offset for ToolbarBridge.lastNavigationSeed] = -1;
  uint64_t v17 = direct field offset for ToolbarBridge.storageByLocation;
  *(void *)&v5[v17] = specialized Dictionary.init(dictionaryLiteral:)(v7);

  v19.receiver = v5;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.SearchItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DD1F50);
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DD0D3C);
}

uint64_t type metadata accessor for ToolbarStorage.NavigationProperties(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.NavigationProperties);
}

uint64_t closure #1 in UIKitToolbarStrategy.updateHeaderProperties()@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v135 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for PlatformItemList.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  long long v125 = (id *)((char *)&v119 - v5);
  type metadata accessor for PlatformItemList.Item?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], v3);
  MEMORY[0x1F4188790](v6 - 8);
  char v127 = (char *)&v119 - v7;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v128 = *(void *)(v8 - 8);
  uint64_t v129 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v126 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  long long v131 = (char *)&v119 - v11;
  type metadata accessor for PlatformItemList.Item?(0, (unint64_t *)&lazy cache variable for type metadata for TitleDocumentContent?, (uint64_t (*)(uint64_t))type metadata accessor for TitleDocumentContent, v3);
  MEMORY[0x1F4188790](v12 - 8);
  __int16 v134 = (void (*)(char *, uint64_t, uint64_t))((char *)&v119 - v13);
  uint64_t v14 = (void *)type metadata accessor for TitleDocumentContent();
  char v132 = (void (**)(void *, uint64_t, uint64_t, id))*(v14 - 1);
  id v133 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v130 = (uint64_t)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v119 - v17;
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v3);
  MEMORY[0x1F4188790](v19 - 8);
  id v21 = (char *)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  int v24 = (uint64_t *)((char *)&v119 - v23);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v119 - v26;
  uint64_t v28 = a1 + direct field offset for ToolbarBridge.navigationProperties;
  swift_beginAccess();
  outlined init with copy of ToolbarStorage.NavigationProperties?(v28, (uint64_t)v27, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v3);
  uint64_t v136 = a1;
  uint64_t v29 = (uint64_t *)(a1 + direct field offset for ToolbarBridge.lastEnvironment);
  swift_beginAccess();
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  outlined init with copy of ToolbarStorage.NavigationProperties?((uint64_t)v27, (uint64_t)v24, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v3);
  uint64_t v32 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  uint64_t v33 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48);
  if (v33(v24, 1, v32) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v24, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
LABEL_9:
    unint64_t v36 = v134;
    ((void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t, id))v132)[7](v134, 1, 1, v133);
    goto LABEL_10;
  }
  __int16 v122 = v21;
  uint64_t v123 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v33;
  __n128 v124 = v18;
  uint64_t v34 = *v24;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v35 = outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v24, type metadata accessor for ToolbarStorage.NavigationProperties);
  if (!v34) {
    goto LABEL_9;
  }
  unint64_t v36 = v134;
  (*(void (**)(uint64_t))(*(void *)v34 + 80))(v35);
  swift_release();
  if (((unsigned int (*)(void, uint64_t, id))v132[6])(v36, 1, v133) != 1)
  {
    uint64_t v37 = (uint64_t)v124;
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v36, (uint64_t)v124, (uint64_t (*)(void))type metadata accessor for TitleDocumentContent);
    uint64_t v38 = v37;
    uint64_t v39 = v130;
    outlined init with copy of ToolbarStorage.Entry.Kind(v38, v130, (uint64_t (*)(void))type metadata accessor for TitleDocumentContent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v120 = v31;
    char v121 = v27;
    uint64_t v119 = v30;
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v57 = v128;
      uint64_t v56 = v129;
      unint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 32);
      uint64_t v59 = v131;
      v58(v131, v39, v129);
      id v60 = objc_allocWithZone((Class)type metadata accessor for UIKitDocumentProperties());
      URL._bridgeToObjectiveC()(v61);
      unint64_t v63 = v62;
      char v132 = (void (**)(void *, uint64_t, uint64_t, id))objc_msgSend(v60, sel_initWithURL_, v62);

      uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
      uint64_t v65 = v127;
      v64(v127, v59, v56);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v65, 0, 1, v56);
      int v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48))(v65, 1, v56);
      __int16 v134 = v58;
      if (v66 == 1)
      {
        unint64_t v68 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v67);
        unint64_t v68 = v69;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v65, v56);
      }
      uint64_t v70 = v126;
      id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28D78]), sel_initWithContentsOfURL_, v68);

      uint64_t v72 = v131;
      v64(v70, v131, v56);
      _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v73 = (void *)swift_allocObject();
      *((_OWORD *)v73 + 1) = xmmword_18834BB80;
      v73[7] = v56;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v73 + 4);
      v134((char *)boxed_opaque_existential_1, (uint64_t)v70, v56);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v72, v56);
      char v75 = 0;
      if (!v71)
      {
        id v133 = 0;
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        uint64_t v79 = v132;
        uint64_t v80 = (void *)&unk_18834C000;
LABEL_42:
        uint64_t v114 = swift_allocObject();
        *(void *)(v114 + 16) = v73;
        *(void *)(v114 + 24) = v76;
        __int16 v134 = (void (*)(char *, uint64_t, uint64_t))v73;
        uint64_t v115 = (uint64_t)v76;
        *(void *)(v114 + 32) = v77;
        *(void *)(v114 + 40) = 0;
        *(unsigned char *)(v114 + 48) = v75;
        *(_DWORD *)(v114 + 49) = v143;
        *(_DWORD *)(v114 + 52) = *(_DWORD *)((char *)&v143 + 3);
        *(_OWORD *)(v114 + 56) = 0u;
        *(_OWORD *)(v114 + 72) = 0u;
        *(_OWORD *)(v114 + 88) = 0u;
        *(_OWORD *)(v114 + 104) = 0u;
        uint64_t v116 = v119;
        *(void *)(v114 + 120) = v120;
        *(void *)(v114 + 128) = v116;
        *(void *)&long long v151 = partial apply for closure #3 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties();
        *((void *)&v151 + 1) = v114;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = v80[362];
        *(void *)&long long v150 = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
        *((void *)&v150 + 1) = &block_descriptor_12;
        char v117 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        id v118 = v79;
        outlined copy of AnyShareConfiguration.Storage((uint64_t)v73, v115, v77, 0, v75);
        outlined copy of Text?(0, 0, 0, 0);
        outlined copy of Text?(0, 0, 0, 0);
        swift_release();
        objc_msgSend(v118, sel_setActivityViewControllerProvider_, v117);
        _Block_release(v117);

        objc_msgSend(*(id *)(v136 + direct field offset for ToolbarBridge.platformVended + 8), sel_setDocumentProperties_, v118);
        swift_release();
        swift_release();
        outlined consume of AnyShareConfiguration.Storage((uint64_t)v134, v115, v77, 0, v75);
        outlined consume of Text?(0, 0, 0, 0);
        outlined consume of Text?(0, 0, 0, 0);

        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v124, (uint64_t (*)(void))type metadata accessor for TitleDocumentContent);
        uint64_t v54 = v135;
        uint64_t v27 = v121;
        goto LABEL_11;
      }
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      id v78 = v132;
LABEL_41:
      uint64_t v80 = &unk_18834C000;
      id v108 = v71;
      uint64_t v109 = swift_allocObject();
      *(void *)(v109 + 16) = v108;
      *(void *)&long long v151 = partial apply for closure #2 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties();
      *((void *)&v151 + 1) = v109;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v150 = thunk for @escaping @callee_guaranteed (@guaranteed UIDragSession) -> (@owned [UIDragItem]);
      *((void *)&v150 + 1) = &block_descriptor_32;
      uint64_t v110 = _Block_copy(&aBlock);
      id v111 = v78;
      id v112 = v108;
      swift_release();
      objc_msgSend(v111, sel_setDragItemsProvider_, v110);
      long long v113 = v110;
      uint64_t v79 = v111;
      _Block_release(v113);
      id v133 = v112;

      goto LABEL_42;
    }
    long long v41 = *(_OWORD *)(v39 + 80);
    long long v153 = *(_OWORD *)(v39 + 64);
    long long v154 = v41;
    uint64_t v155 = *(void *)(v39 + 96);
    long long v42 = *(_OWORD *)(v39 + 16);
    long long aBlock = *(_OWORD *)v39;
    long long v150 = v42;
    long long v43 = *(_OWORD *)(v39 + 48);
    long long v151 = *(_OWORD *)(v39 + 32);
    long long v152 = v43;
    outlined init with copy of PushTarget?((uint64_t)&aBlock + 8, (uint64_t)&v143, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
    if (v147)
    {
      uint64_t v44 = (uint64_t)v143;
      uint64_t v45 = v144;
      char v47 = v145;
      uint64_t v46 = v146;
      outlined copy of Text?((uint64_t)v143, v144, v145, v146);
      outlined destroy of AnySharePreview((uint64_t)&v143);
      if (v46)
      {
        char v48 = v47 & 1;
        uint64_t v141 = v120;
        uint64_t v142 = v119;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        uint64_t v138 = 0;
        char v137 = v47 & 1;
        uint64_t v49 = Text.resolveString(in:with:idiom:)();
        uint64_t v51 = v50;
        uint64_t v52 = v45;
        uint64_t v53 = v49;
        outlined consume of Text.Storage(v44, v52, v48);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v51 = 0;
      }
    }
    else
    {
      outlined destroy of PushTarget?((uint64_t)&v143, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
      uint64_t v53 = 0;
      uint64_t v51 = 0;
    }
    uint64_t v81 = (uint64_t)v122;
    outlined init with copy of ToolbarStorage.NavigationProperties?((uint64_t)v121, (uint64_t)v122, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
    if (v123(v81, 1, v32) == 1)
    {
      uint64_t v82 = &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?;
      unsigned __int8 v83 = type metadata accessor for ToolbarStorage.NavigationProperties;
      id v84 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      uint64_t v85 = v81;
    }
    else
    {
      uint64_t v86 = v81 + *(int *)(v32 + 24);
      uint64_t v87 = v125;
      outlined init with copy of ToolbarStorage.NavigationProperties?(v86, (uint64_t)v125, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      outlined destroy of ToolbarStorage.NavigationProperties(v81, type metadata accessor for ToolbarStorage.NavigationProperties);
      uint64_t v88 = type metadata accessor for PlatformItemList.Item();
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v88 - 8) + 48))(v87, 1, v88) != 1)
      {
        id v92 = *v87;
        id v93 = *v87;
        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (v92)
        {
          id v89 = objc_msgSend(v93, sel_string);

          goto LABEL_29;
        }
LABEL_25:
        id v89 = objc_msgSend(*(id *)(v136 + direct field offset for ToolbarBridge.platformVended + 8), sel_title, v119, v120);
        if (!v89)
        {
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          goto LABEL_30;
        }
LABEL_29:
        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v91 = v94;

LABEL_30:
        if (!v51)
        {
          swift_bridgeObjectRetain();
          uint64_t v53 = v90;
          uint64_t v51 = v91;
        }
        outlined init with copy of PushTarget?((uint64_t)&aBlock + 8, (uint64_t)&v143, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
        if (v147)
        {
          uint64_t v95 = v148;
          swift_retain();
          uint64_t v96 = outlined destroy of AnySharePreview((uint64_t)&v143);
          uint64_t v97 = (void *)v95(v96);
          swift_release();
        }
        else
        {
          outlined destroy of PushTarget?((uint64_t)&v143, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
          uint64_t v97 = 0;
        }
        outlined init with copy of PushTarget?((uint64_t)&aBlock + 8, (uint64_t)&v143, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
        uint64_t v98 = v147;
        if (v147)
        {
          swift_retain();
          uint64_t v99 = outlined destroy of AnySharePreview((uint64_t)&v143);
          unsigned __int8 v100 = (void *)v98(v99);
          swift_release();
          if (v51)
          {
LABEL_37:
            uint64_t v101 = (void *)MEMORY[0x18C115780](v53, v51);
            swift_bridgeObjectRelease();
LABEL_40:
            id v78 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitDocumentProperties()), sel_initWithTitle_iconProvider_imageProvider_, v101, v97, v100);

            uint64_t v102 = (void *)aBlock;
            _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
            uint64_t v103 = swift_allocObject();
            *(_OWORD *)(v103 + 16) = xmmword_188351940;
            *(void *)(v103 + 32) = v102;
            long long v143 = (void *)v103;
            specialized Array._endMutation()();
            uint64_t v73 = v143;
            uint64_t v77 = swift_allocObject();
            long long v104 = v154;
            *(_OWORD *)(v77 + 80) = v153;
            *(_OWORD *)(v77 + 96) = v104;
            uint64_t v105 = v155;
            long long v106 = v150;
            *(_OWORD *)(v77 + 16) = aBlock;
            *(_OWORD *)(v77 + 32) = v106;
            long long v107 = v152;
            *(_OWORD *)(v77 + 48) = v151;
            *(_OWORD *)(v77 + 64) = v107;
            *(void *)(v77 + 112) = v105;
            *(void *)(v77 + 120) = v90;
            *(void *)(v77 + 128) = v91;
            id v71 = v102;
            char v75 = 2;
            uint64_t v76 = partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties();
            goto LABEL_41;
          }
        }
        else
        {
          outlined destroy of PushTarget?((uint64_t)&v143, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
          unsigned __int8 v100 = 0;
          if (v51) {
            goto LABEL_37;
          }
        }
        uint64_t v101 = 0;
        goto LABEL_40;
      }
      uint64_t v82 = (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?;
      unsigned __int8 v83 = (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item;
      id v84 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      uint64_t v85 = (uint64_t)v87;
    }
    outlined destroy of ToolbarStorage.NavigationProperties?(v85, v82, v83, v84);
    goto LABEL_25;
  }
LABEL_10:
  outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for TitleDocumentContent?, (uint64_t (*)(uint64_t))type metadata accessor for TitleDocumentContent, MEMORY[0x1E4FBB718]);
  objc_msgSend(*(id *)(v136 + direct field offset for ToolbarBridge.platformVended + 8), sel_setDocumentProperties_, 0);
  swift_release();
  swift_release();
  uint64_t v54 = v135;
LABEL_11:
  uint64_t result = outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v27, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
  *uint64_t v54 = 1;
  return result;
}

uint64_t specialized EnvironmentValues.uiInputAccessoryGenerator.setter()
{
  swift_weakInit();
  swift_weakAssign();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41720];
  outlined init with take of String?((uint64_t)&v3, (uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, (uint64_t)type metadata accessor for InputAccessoryGenerator, MEMORY[0x1E4F41720], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemList.Item?);
  outlined init with copy of ToolbarStorage.NavigationProperties?((uint64_t)v4, (uint64_t)&v3, &lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, (uint64_t (*)(uint64_t))type metadata accessor for InputAccessoryGenerator, v1);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v4, &lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, (uint64_t (*)(uint64_t))type metadata accessor for InputAccessoryGenerator, MEMORY[0x1E4F41720]);
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationPropertiesKey@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(v6, a3, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
}

uint64_t outlined init with copy of ToolbarStorage.NavigationProperties?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  type metadata accessor for PlatformItemList.Item?(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ToolbarStorage.NavigationProperties?(uint64_t a1)
{
}

uint64_t outlined destroy of ToolbarStorage.NavigationProperties?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for PlatformItemList.Item?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for PlatformItemList.Item?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI16PlatformItemListV0D0VSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for TitleDocumentContent()
{
  uint64_t result = type metadata singleton initialization cache for TitleDocumentContent;
  if (!type metadata singleton initialization cache for TitleDocumentContent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t closure #1 in UIKitToolbarStrategy.updateKeyboardBar()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v14 = MEMORY[0x1E4FBC860];
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v11);
  uint64_t v6 = (void *)MEMORY[0x18C119DF0](&v13);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v11);
  memset(v11, 0, sizeof(v11));
  long long v12 = xmmword_18838AA30;
  id v7 = v6;
  specialized ToolbarBridge.adjustEntries(in:_:)((uint64_t)v11, a1, v6, 2 * (v6 != 0), &v14);

  outlined destroy of Toolbar.BarLocation((uint64_t)v11);
  uint64_t v8 = a1 + direct field offset for ToolbarBridge.platformVended;
  uint64_t v9 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 40);
  if (v9
    || (type metadata accessor for InputAccessoryGenerator(),
        uint64_t v9 = (void *)swift_allocObject(),
        void v9[3] = 0,
        v9[4] = 0,
        v9[2] = v5,
        (*(void *)(v8 + 40) = v9) != 0))
  {
    v9[2] = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    InputAccessoryGenerator.updateHostIfNeeded()();
    swift_release();
  }
  else
  {
  }
  *a3 = 1;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for InputAccessoryGenerator()
{
  return self;
}

void InputAccessoryGenerator.updateHostIfNeeded()()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (!v1) {
    return;
  }
  uint64_t v2 = v0;
  unint64_t v3 = *(void *)(v0 + 16);
  id v18 = v1;
  if (v3 >> 62)
  {
    id v16 = v1;
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void **)(v2 + 32);
    if (v17) {
      goto LABEL_4;
    }
LABEL_10:
    *(void *)(v2 + 32) = 0;

    InputAccessoryGenerator.RootUIView.host.setter(0);

    return;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v5 = v1;
  uint64_t v6 = *(void **)(v2 + 32);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v7 = *(void *)(v2 + 16);
  if (!v6)
  {
    type metadata accessor for InputAccessoryHost<InputAccessoryBar>(0, &lazy cache variable for type metadata for InputAccessoryHost<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for InputAccessoryHost);
    id v9 = objc_allocWithZone(v8);
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = (void *)specialized _UIHostingView.init(rootView:)(v10);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    specialized InputAccessoryHost.setupSizeObserver()();
    id v12 = v11;
    InputAccessoryGenerator.RootUIView.host.setter(v11);
    uint64_t v13 = *(void **)(v2 + 32);
    *(void *)(v2 + 32) = v11;

    uint64_t v6 = *(void **)(v2 + 32);
    if (!v6)
    {
      __break(1u);
      return;
    }
    uint64_t v7 = *(void *)(v2 + 16);
  }
  uint64_t v14 = (void *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x60));
  swift_beginAccess();
  *uint64_t v14 = v7;
  swift_bridgeObjectRetain_n();
  uint64_t v15 = v6;
  swift_bridgeObjectRelease();
  type metadata accessor for InputAccessoryHost<InputAccessoryBar>(0, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  swift_bridgeObjectRelease();
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5)
{
  int v70 = a4;
  id v73 = a3;
  uint64_t v76 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v76);
  char v75 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v72 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v71 = (uint64_t)&v67 - v12;
  type metadata accessor for ToolbarStorage.Entry?(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v80 = v16;
  uint64_t v81 = v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v83 = (uint64_t)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v86);
  uint64_t v19 = (uint64_t *)(a2 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  uint64_t v20 = *v19;
  if (*(void *)(*v19 + 16) && (uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v86), (v22 & 1) != 0))
  {
    uint64_t v23 = (uint64_t *)(*(void *)(v20 + 56) + 24 * v21);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    uint64_t v26 = (void *)v23[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v24 = MEMORY[0x1E4FBC860];
    unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v26 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v24);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)v86);
  uint64_t v27 = *(void *)(v24 + 16);
  uint64_t v28 = v24;
  uint64_t v29 = (uint64_t)v75;
  if (!v27)
  {
    uint64_t v64 = v28;
LABEL_47:
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v86);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v85 = *v19;
    *uint64_t v19 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v25, (uint64_t)v26, (uint64_t)v86, isUniquelyReferenced_nonNull_native);
    *uint64_t v19 = v85;
    swift_bridgeObjectRelease();
    outlined destroy of Toolbar.BarLocation((uint64_t)v86);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v68 = v19;
  uint64_t v74 = a5;
  uint64_t v69 = a1;
  uint64_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56);
  uint64_t v82 = (unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
  uint64_t v67 = swift_bridgeObjectRetain();
  uint64_t v31 = (uint64_t *)(v67 + 40);
  uint64_t v32 = v80;
  id v78 = v15;
  unint64_t v79 = v25;
  uint64_t v77 = v30;
  while (!*(void *)(v25 + 16))
  {
    (*v30)(v15, 1, 1, v32);
LABEL_8:
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.Entry?);
LABEL_9:
    v31 += 2;
    if (!--v27)
    {
      uint64_t v64 = v67;
      swift_bridgeObjectRelease();
      a1 = v69;
      uint64_t v19 = v68;
      goto LABEL_47;
    }
  }
  uint64_t v33 = *(v31 - 1);
  uint64_t v34 = *v31;
  swift_bridgeObjectRetain_n();
  uint64_t v84 = v33;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
  if (v36)
  {
    _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(*(void *)(v25 + 56) + *(void *)(v81 + 72) * v35, (uint64_t)v15, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 1;
  }
  (*v30)(v15, v37, 1, v32);
  swift_bridgeObjectRelease();
  if ((*v82)(v15, 1, v32) == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v15, v83, type metadata accessor for ToolbarStorage.Entry);
  swift_bridgeObjectRetain();
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  v86[0] = v26;
  swift_bridgeObjectRetain();
  unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v34);
  uint64_t v41 = v26[2];
  BOOL v42 = (v39 & 1) == 0;
  uint64_t v43 = v41 + v42;
  if (!__OFADD__(v41, v42))
  {
    char v44 = v39;
    if (v26[3] >= v43)
    {
      if (v38)
      {
        if ((v39 & 1) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v44 & 1) == 0) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v38);
      unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v34);
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_50;
      }
      unint64_t v40 = v45;
      if ((v44 & 1) == 0)
      {
LABEL_20:
        id v47 = 0;
        int v48 = 255;
        goto LABEL_25;
      }
    }
    uint64_t v49 = *(void *)(v86[0] + 56) + 16 * v40;
    id v47 = *(id *)v49;
    int v48 = *(unsigned __int8 *)(v49 + 8);
    if (v48 == 1)
    {
      id v50 = v47;
      goto LABEL_31;
    }
LABEL_25:
    _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(v83, v29, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v29, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (v48 != 255) {
        goto LABEL_27;
      }
LABEL_38:
      if (v44)
      {
        uint64_t v26 = (void *)v86[0];
        swift_arrayDestroy();
        specialized _NativeDictionary._delete(at:)(v40, (uint64_t)v26);
LABEL_40:
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = (void *)v86[0];
      }
LABEL_41:
      unint64_t v25 = v79;
      uint64_t v32 = v80;
      uint64_t v30 = v77;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v83, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v15 = v78;
      goto LABEL_9;
    }
    uint64_t v52 = v72;
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v29, v72, type metadata accessor for ToolbarStorage.Item);
    uint64_t v53 = v71;
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v52, v71, type metadata accessor for ToolbarStorage.Item);
    if (v73)
    {
      id v54 = v73;
      outlined consume of Toolbar.VendedItem?(v47, v48);
      id v47 = specialized static UIKitBarButtonItem.makeVended(item:context:)(v53, v54, v70);
      LOBYTE(v48) = v55;
      id v50 = v56;

      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v53, type metadata accessor for ToolbarStorage.Item);
      if (v50)
      {
LABEL_31:
        id v57 = v50;
        unint64_t v58 = v74;
        MEMORY[0x18C115B40]();
        if (*(void *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      uint64_t v29 = (uint64_t)v75;
      uint64_t v26 = (void *)v86[0];
      if ((v44 & 1) == 0)
      {
LABEL_35:
        v26[(v40 >> 6) + 8] |= 1 << v40;
        uint64_t v59 = (void *)(v26[6] + 16 * v40);
        void *v59 = v84;
        v59[1] = v34;
        uint64_t v60 = v26[7] + 16 * v40;
        *(void *)uint64_t v60 = v47;
        *(unsigned char *)(v60 + 8) = v48;
        uint64_t v61 = v26[2];
        BOOL v62 = __OFADD__(v61, 1);
        uint64_t v63 = v61 + 1;
        if (v62) {
          goto LABEL_49;
        }
        void v26[2] = v63;
        goto LABEL_41;
      }
    }
    else
    {
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v53, type metadata accessor for ToolbarStorage.Item);
      uint64_t v29 = (uint64_t)v75;
      if (v48 == 255) {
        goto LABEL_38;
      }
LABEL_27:
      uint64_t v26 = (void *)v86[0];
      if ((v44 & 1) == 0) {
        goto LABEL_35;
      }
    }
    uint64_t v51 = v26[7] + 16 * v40;
    *(void *)uint64_t v51 = v47;
    *(unsigned char *)(v51 + 8) = v48;
    goto LABEL_40;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall LazySubviewPrefetcher.updateValue()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *v1;
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t Value = AGGraphGetValue();
  uint64_t v7 = *(void *)Value;
  if (v5 != *(void *)Value)
  {
    uint64_t v8 = *(void *)(Value + 8);
    char v9 = *(unsigned char *)(Value + 16);
    *((void *)v1 + 4) = v7;
    type metadata accessor for LazyLayoutViewCache();
    if ((*(unsigned char *)(*(void *)AGGraphGetValue() + 216) & v9) != 0)
    {
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0) {
        goto LABEL_9;
      }
      if (one-time initialization token for log != -1) {
        goto LABEL_18;
      }
      while (1)
      {
        uint64_t v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Log.LazyLayoutPrefetch.log);
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = swift_slowAlloc();
          uint64_t v33 = swift_slowAlloc();
          uint64_t v36 = v33;
          *(_DWORD *)uint64_t v13 = 136446466;
          unsigned int v34 = v4;
          uint64_t v14 = *(void *)(v3 + 16);
          uint64_t v15 = _typeName(_:qualified:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v13 + 12) = 2082;
          uint64_t v17 = MEMORY[0x18C10AA50](v34, v14);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v4 = v34;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v11, v12, "%{public}s %{public}s start prefetch", (uint8_t *)v13, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v33, -1, -1);
          MEMORY[0x18C119C60](v13, -1, -1);
        }

LABEL_9:
        if (AGGraphGetCurrentAttribute() != *MEMORY[0x1E4F4E7A0]) {
          break;
        }
        __break(1u);
LABEL_18:
        swift_once();
      }
      id v19 = (id)AGGraphGetAttributeGraph();
      AGGraphGetDeadline();
      AGGraphSetDeadline();
      uint64_t v20 = *(void *)(v3 + 16);
      closure #1 in LazySubviewPrefetcher.updateValue()((long long *)v2, v7, v8, v9);
      AGGraphSetDeadline();

      uint64_t v21 = *((void *)v2 + 6);
      char v22 = *((unsigned char *)v2 + 56);
      if (static UserDefaultKeyedFeature.isEnabled.getter())
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)static Log.LazyLayoutPrefetch.log);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          uint64_t v35 = swift_slowAlloc();
          uint64_t v36 = v35;
          *(_DWORD *)uint64_t v26 = 136446722;
          uint64_t v27 = _typeName(_:qualified:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v26 + 12) = 2082;
          uint64_t v29 = MEMORY[0x18C10AA50](v4, v20);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v26 + 22) = 2082;
          uint64_t v31 = LazySubviewPrefetcher.Phase.description.getter(v21, v22);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v24, v25, "%{public}s %{public}s end prefetch, phase=%{public}s", (uint8_t *)v26, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v35, -1, -1);
          MEMORY[0x18C119C60](v26, -1, -1);
        }
      }
    }
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ButtonStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for ButtonStyleWriter<A>);
}

uint64_t getEnumTagSinglePayload for HandGestureShortcutInteractiveControl.BorderShape.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for AnyIdentifiableShareConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t ShareConfigurationBridge.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance InferredToolbarUserDefaultFeature()
{
  return static InferredToolbarUserDefaultFeature.cachedValue;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SafeAreaTransitionStateKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value((uint64_t)&static EnvironmentValues.SafeAreaTransitionStateKey.defaultValue, a1);
}

uint64_t key path getter for EnvironmentValues._defaultMinListRowHeight : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues._defaultMinListRowHeight.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path getter for EnvironmentValues.defaultMinListHeaderHeight : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultMinListHeaderHeight.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t EnvironmentValues._defaultMinListRowHeight.getter(unint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    a4();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    a4();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v7;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.defaultMinListHeaderHeight.getter()
{
  return EnvironmentValues._defaultMinListRowHeight.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>, (uint64_t)&type metadata for DefaultMinListHeaderHeightKey, (uint64_t)&protocol witness table for DefaultMinListHeaderHeightKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues._defaultMinListRowHeight.getter()
{
  return EnvironmentValues._defaultMinListRowHeight.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>, (uint64_t)&type metadata for DefaultMinListRowHeightKey, (uint64_t)&protocol witness table for DefaultMinListRowHeightKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>);
}

void key path getter for EnvironmentValues.defaultMinListRowHeight : EnvironmentValues(double *a1@<X8>)
{
  *a1 = EnvironmentValues.defaultMinListRowHeight.getter();
}

double EnvironmentValues.defaultMinListRowHeight.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = v2;
  if (v3) {
    return 44.0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for PortalGroupRendererEffect()
{
  return &type metadata for PortalGroupRendererEffect;
}

uint64_t partial apply for closure #1 in ScrollTargetVisibilityChangeModifier.body(content:)()
{
  return closure #1 in ScrollTargetVisibilityChangeModifier.body(content:)(v0 + 32);
}

uint64_t closure #1 in ScrollTargetVisibilityChangeModifier.body(content:)(uint64_t result)
{
  long long v1 = *(_OWORD *)(result + 24);
  if (*((void *)&v1 + 1))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined release of AnyDynamicChild<A, B>((uint64_t)&v1);
  }
  return result;
}

uint64_t View.onScrollTargetVisibilityChange<A>(idType:threshold:_:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1 < 0.0) {
    a1 = 0.0;
  }
  v14[0] = 0;
  uint64_t v15 = 0;
  if (a1 > 1.0) {
    a1 = 1.0;
  }
  *(double *)uint64_t v11 = a1;
  v11[1] = a3;
  v11[2] = a4;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v9 = type metadata accessor for ScrollTargetVisibilityChangeModifier();
  swift_retain();
  MEMORY[0x18C113660](v11, a5, v9, a7);
  swift_release();
  return outlined release of AnyDynamicChild<A, B>((uint64_t)v14);
}

uint64_t partial apply for closure #1 in OnScrollVisibilityChangeModifier.body(content:)()
{
  return closure #1 in OnScrollVisibilityChangeModifier.body(content:)(v0 + 16);
}

uint64_t closure #1 in OnScrollVisibilityChangeModifier.body(content:)(uint64_t result)
{
  long long v1 = *(_OWORD *)(result + 24);
  if (*((void *)&v1 + 1))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined release of AnyDynamicChild<A, B>((uint64_t)&v1);
  }
  return result;
}

uint64_t outlined release of AnyDynamicChild<A, B>(uint64_t a1)
{
  return a1;
}

uint64_t assignWithCopy for ContainerRelativeFrameModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v3 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    _OWORD *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HelpView(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)(((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        unint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MatchedTransitionSourceSourceMarkingEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 136) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 137) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 137) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t objectdestroy_57Tm()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for PlatformListViewBase.BaseContent : ListCellContent in ListCollectionViewCellBase<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 176);
}

uint64_t partial apply for closure #1 in SizeFittingLayoutComputer.Engine.spacing()()
{
  return closure #1 in SizeFittingLayoutComputer.Engine.spacing()();
}

void partial apply for closure #1 in UIHostingViewBase.sceneActivationStateDidChange(with:)()
{
  closure #1 in UIHostingViewBase.sceneActivationStateDidChange(with:)(v0);
}

ValueMetadata *type metadata accessor for InjectKeyModifier()
{
  return &type metadata for InjectKeyModifier;
}

id partial apply for implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller()
{
  return implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller();
}

uint64_t CommandGroup.init(replacing:addition:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return CommandGroup.init(after:addition:)(a1, a2, a3, a4, 2, a5);
}

uint64_t partial apply for closure #1 in static LazyHStack._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static LazyHStack._makeView(view:inputs:)(a1);
}

id @objc UIHostingContentView._containerBackgroundView.getter(void *a1)
{
  id v1 = a1;
  id v2 = (id)specialized UIHostingContentView._containerBackgroundView.getter();

  return v2;
}

uint64_t specialized UIHostingContentView._containerBackgroundView.getter()
{
  UIHostingContentView.updateBackgroundHostIfNeeded(_:)(0, 0);
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x678));
}

uint64_t type metadata completion function for ShareConfigurationBridge()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MatchedTransitionSourceSourceMarkingEffect()
{
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

void closure #1 in UIHostingContentView.setupSizeInvalidationHandler(_:)(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t a1), void *a7)
{
  uint64_t aBlock = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v10 = type metadata accessor for UIHostingConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v32 - v12;
  double v14 = *a1;
  double v15 = a1[1];
  double v17 = *a2;
  double v16 = a2[1];
  swift_beginAccess();
  uint64_t v18 = MEMORY[0x18C119DF0](a3 + 16);
  if (v18)
  {
    uint64_t isEscapingClosureAtFileLocation = v18;
    double v20 = UIHostingContentView.roundSize(_:)(v17, v16);
    double v22 = v21;
    if (UIHostingContentView.roundSize(_:)(v14, v15) != v20 || v23 != v22)
    {
      uint64_t v25 = isEscapingClosureAtFileLocation
          + *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)isEscapingClosureAtFileLocation) + 0x6A8);
      *(double *)uint64_t v25 = v20;
      *(double *)(v25 + 8) = v22;
      *(unsigned char *)(v25 + 16) = 0;
      UIHostingContentView._configuration.getter((uint64_t)v13);
      int v26 = v13[*(int *)(v10 + 56) + 98];
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if (v26 == 1)
      {
        uint64_t v27 = self;
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = isEscapingClosureAtFileLocation;
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = partial apply for closure #1 in closure #1 in UIHostingContentView.setupSizeInvalidationHandler(_:);
        *(void *)(v29 + 24) = v28;
        uint64_t v37 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
        uint64_t v38 = v29;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v34 = 1107296256;
        uint64_t v35 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v36 = &block_descriptor_34;
        unint64_t v30 = _Block_copy(&aBlock);
        id v31 = (id)isEscapingClosureAtFileLocation;
        swift_retain();
        swift_release();
        objc_msgSend(v27, sel_performWithoutAnimation_, v30);

        _Block_release(v30);
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) == 0) {
          return;
        }
        __break(1u);
      }
      objc_msgSend((id)isEscapingClosureAtFileLocation, sel_invalidateIntrinsicContentSize);
    }
  }
}

uint64_t UIHostingContentView.configuration.getter@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for UIHostingConfiguration();
  a1[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return UIHostingContentView._configuration.getter((uint64_t)boxed_opaque_existential_1);
}

uint64_t UIHostingConfiguration.margins(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
  OptionalEdgeInsets.init(_:edges:)();
  uint64_t result = OptionalEdgeInsets.adding(_:)();
  uint64_t v6 = a2 + *(int *)(a1 + 56);
  *(void *)(v6 + 8) = v7;
  *(unsigned char *)(v6 + 16) = v8;
  *(void *)(v6 + 24) = v9;
  *(unsigned char *)(v6 + 32) = v10;
  *(void *)(v6 + 40) = v11;
  *(unsigned char *)(v6 + 48) = v12;
  *(void *)(v6 + 56) = v13;
  *(unsigned char *)(v6 + 64) = v14;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
  OptionalEdgeInsets.init(_:edges:)();
  uint64_t result = OptionalEdgeInsets.adding(_:)();
  uint64_t v6 = a2 + *(int *)(a1 + 56);
  *(void *)(v6 + 8) = v7;
  *(unsigned char *)(v6 + 16) = v8;
  *(void *)(v6 + 24) = v9;
  *(unsigned char *)(v6 + 32) = v10;
  *(void *)(v6 + 40) = v11;
  *(unsigned char *)(v6 + 48) = v12;
  *(void *)(v6 + 56) = v13;
  *(unsigned char *)(v6 + 64) = v14;
  return result;
}

uint64_t specialized UIHostingContentView.supports(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  uint64_t v6 = type metadata accessor for UIHostingConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13[-1] - v8;
  outlined init with copy of TableColumnList(a1, (uint64_t)v13);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for UIContentConfiguration);
  uint64_t v10 = swift_dynamicCast();
  if (v10) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v10;
}

void @objc NavigationStackHostingController.viewDidLoad()(void *a1)
{
  id v1 = a1;
  NavigationStackHostingController.viewDidLoad()();
}

Swift::Void __swiftcall NavigationStackHostingController.viewDidLoad()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_viewDidLoad);
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.delegate.setter((uint64_t)v0, (uint64_t)&protocol witness table for NavigationStackHostingController<A>);
}

uint64_t UIHostingConfiguration.init(rootView:backgroundView:storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v15 = type metadata accessor for UIHostingConfigurationStorage(0);
  double v16 = (int *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v19 = type metadata accessor for UIHostingConfiguration();
  uint64_t v20 = a8 + *(int *)(v19 + 56);
  *uint64_t v18 = 1;
  OptionalEdgeInsets.init()();
  *((void *)v18 + 9) = 0;
  v18[80] = 1;
  *((void *)v18 + 11) = 0;
  v18[96] = 1;
  *(_WORD *)(v18 + 97) = 1;
  double v21 = &v18[v16[11]];
  uint64_t v22 = type metadata accessor for UICellConfigurationState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v18[v16[12]] = 0;
  *(void *)&v18[v16[13] + 8] = 0;
  swift_unknownObjectWeakInit();
  _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_0((uint64_t)v18, v20, type metadata accessor for UIHostingConfigurationStorage);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a8, a1, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a8 + *(int *)(v19 + 52), a2, a5);
  return outlined assign with take of WeakBox<UIButton>?(v25, v20, type metadata accessor for UIHostingConfigurationStorage);
}

uint64_t UIHostingContentView.hostingView<A>(_:didChangePreferences:)(void *a1, uint64_t *a2)
{
  char v3 = v2;
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v7 = *a1 & *MEMORY[0x1E4FBC8C8];
  long long v8 = *(_OWORD *)(v6 + 1616);
  v28[0] = *(_OWORD *)(v6 + 1600);
  v28[1] = v8;
  uint64_t v9 = type metadata accessor for UIHostingConfiguration();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v12 = (char *)&v24 - v11;
  uint64_t v13 = *a2;
  char v14 = *(void (**)(uint64_t))((char *)v3 + *(void *)(v6 + 1672));
  if (v14)
  {
    uint64_t v25 = v7;
    uint64_t v15 = (_DWORD *)((char *)v3 + *(void *)(v6 + 1688));
    swift_beginAccess();
    v29[0] = v13;
    outlined copy of AppIntentExecutor?((uint64_t)v14);
    PreferenceValues.subscript.getter();
    if (*v15 == -1 || v27 == -1 || *v15 != v27)
    {
      *uint64_t v15 = v27;
      outlined init with copy of UIHostingConfigurationStorage((uint64_t)v26, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
      uint64_t v18 = UIHostingContentView.popUpButton.setter((uint64_t)v29);
      v14(v18);
    }
    outlined destroy of PreferenceValues.Value<WeakBox<UIButton>?>((uint64_t)v26);
    swift_endAccess();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v14);
    uint64_t v7 = v25;
  }
  UIHostingContentView._configuration.getter((uint64_t)v12);
  uint64_t v19 = UIHostingConfiguration.delegate.getter(v9);
  uint64_t v21 = v20;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v19)
  {
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&v28[0] = v13;
    (*(void (**)(void *, _OWORD *, void, void, uint64_t, uint64_t))(v21 + 32))(a1, v28, *(void *)(v7 + 80), *(void *)(v7 + 88), ObjectType, v21);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(void *)(v0 + 16));
}

uint64_t _sIeyB_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t UIHostingContentView.popUpButton.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x690);
  swift_beginAccess();
  outlined assign with take of WeakBox<UIButton>?(a1, v3, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
  return swift_endAccess();
}

uint64_t UIHostingConfiguration.updated(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  type metadata accessor for UICellConfigurationState?(0);
  double v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))(a3, v4, a2, v9);
  outlined init with copy of TableColumnList(a1, (uint64_t)v18);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for UIConfigurationState);
  uint64_t v12 = type metadata accessor for UICellConfigurationState();
  int v13 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, v13 ^ 1u, 1, v12);
  uint64_t v14 = a3 + *(int *)(a2 + 56);
  uint64_t v15 = type metadata accessor for UIHostingConfigurationStorage(0);
  return outlined assign with take of WeakBox<UIButton>?((uint64_t)v11, v14 + *(int *)(v15 + 36), (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
}

uint64_t outlined assign with take of WeakBox<UIButton>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of PreferenceValues.Value<WeakBox<UIButton>?>(uint64_t a1)
{
  _s5UIKit24UICellConfigurationStateVSgMaTm_0(0, &lazy cache variable for type metadata for PreferenceValues.Value<WeakBox<UIButton>?>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<UIButton>?, MEMORY[0x1E4F3FD10]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *UIHostingConfiguration.makeContentView()(uint64_t a1)
{
  if (*(unsigned char *)(v1 + *(int *)(a1 + 56) + 97) == 1)
  {
    type metadata accessor for UIHostingContentView();
    uint64_t v2 = specialized UIHostingContentView.__allocating_init(configuration:)(v1);
  }
  else
  {
    id v3 = objc_allocWithZone((Class)type metadata accessor for UIHostingContentViewWithoutInteractions());
    uint64_t v2 = specialized UIHostingContentView.init(configuration:)(v1);
  }
  uint64_t v4 = v2;
  swift_getWitnessTable();
  return v4;
}

void *specialized UIHostingContentView.__allocating_init(configuration:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for UIHostingContentView());
  return specialized UIHostingContentView.init(configuration:)(a1);
}

void *specialized UIHostingContentView.init(configuration:)(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v6 = type metadata accessor for HostingContentViewRootModifier(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = *(void *)(v5 + 1600);
  uint64_t v9 = v65;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v10 - 8);
  uint64_t v68 = v10;
  MEMORY[0x1F4188790](v10);
  int v66 = (objc_class *)((char *)&v55 - v11);
  *((unsigned char *)v2 + *(void *)(v5 + 1632)) = 0;
  uint64_t v12 = (void *)((char *)v2 + *(void *)((*v4 & *v2) + 0x670));
  *uint64_t v12 = 0;
  v12[1] = 0;
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0x678)) = 0;
  int v13 = (void *)((char *)v2 + *(void *)((*v4 & *v2) + 0x680));
  *int v13 = 0;
  v13[1] = 0;
  uint64_t v14 = (void *)((char *)v2 + *(void *)((*v4 & *v2) + 0x688));
  *uint64_t v14 = 0;
  v14[1] = 0;
  uint64_t v15 = (char *)v2 + *(void *)((*v4 & *v2) + 0x690);
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  *(_DWORD *)((char *)v2 + *(void *)((*v4 & *v2) + 0x698)) = -1;
  double v16 = (char *)v2 + *(void *)((*v4 & *v2) + 0x6A0);
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)double v16 = 0;
  *((_WORD *)v16 + 12) = 256;
  uint64_t v17 = (char *)v2 + *(void *)((*v4 & *v2) + 0x6A8);
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  v17[16] = 1;
  *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0x6B0)) = 0;
  uint64_t v18 = (void *)((char *)v2 + *(void *)((*v4 & *v2) + 0x6B8));
  *uint64_t v18 = 0;
  v18[1] = 0;
  uint64_t v19 = (char *)v2 + *(void *)((*v4 & *v2) + 0x668);
  uint64_t v20 = *(void *)(v5 + 1608);
  uint64_t v69 = v9;
  uint64_t v70 = v20;
  long long v64 = *(_OWORD *)(v5 + 1616);
  long long v71 = v64;
  uint64_t v21 = type metadata accessor for UIHostingConfiguration();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
  uint64_t v63 = a1;
  v22(v19, a1, v21);
  static EdgeInsets.zero.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = a1 + *(int *)(v21 + 56);
  uint64_t v32 = *(void *)(v31 + 8);
  int v33 = *(unsigned __int8 *)(v31 + 16);
  uint64_t v34 = *(void *)(v31 + 24);
  int v61 = *(unsigned __int8 *)(v31 + 32);
  int v62 = v33;
  uint64_t v35 = *(void *)(v31 + 40);
  char v36 = *(unsigned char *)(v31 + 48);
  uint64_t v59 = *(void *)(v31 + 56);
  uint64_t v60 = v35;
  int v58 = *(unsigned __int8 *)(v31 + 64);
  uint64_t v57 = *(void *)(v31 + 72);
  LOBYTE(a1) = *(unsigned char *)(v31 + 80);
  uint64_t v56 = *(void *)(v31 + 88);
  LOBYTE(v31) = *(unsigned char *)(v31 + 96);
  LOBYTE(v69) = a1;
  char v72 = v31;
  LOBYTE(v9) = v31;
  uint64_t v37 = &v8[*(int *)(v6 + 32)];
  uint64_t v38 = type metadata accessor for UICellConfigurationState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  *(void *)uint64_t v8 = v24;
  *((void *)v8 + 1) = v26;
  *((void *)v8 + 2) = v28;
  *((void *)v8 + 3) = v30;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 4) = 0;
  v8[56] = 0;
  *((void *)v8 + 8) = 0x4024000000000000;
  *((void *)v8 + 9) = 1;
  v8[80] = 0;
  *((void *)v8 + 11) = v32;
  v8[96] = v62;
  *((void *)v8 + 13) = v34;
  v8[112] = v61;
  *((void *)v8 + 15) = v60;
  v8[128] = v36;
  *((void *)v8 + 17) = v59;
  v8[144] = v58;
  *((void *)v8 + 19) = v57;
  v8[160] = a1;
  *((void *)v8 + 21) = v56;
  v8[176] = v9 & 1;
  uint64_t v39 = v64;
  v8[177] = 0;
  unint64_t v40 = v66;
  uint64_t v41 = v6;
  uint64_t v42 = v63;
  MEMORY[0x18C113660](v8, v65, v41, v39);
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v8, type metadata accessor for HostingContentViewRootModifier);
  uint64_t v43 = specialized _UIHostingView.init(rootView:)(v40);
  (*(void (**)(objc_class *, uint64_t))(v67 + 8))(v40, v68);
  uint64_t v44 = v42 + *(int *)(v21 + 56);
  if (*(unsigned char *)(v44 + *(int *)(type metadata accessor for UIHostingConfigurationStorage(0) + 40)) == 1)
  {
    uint64_t v45 = specialized _UIHostingView.viewGraph.getter();
    swift_beginAccess();
    int v46 = *(unsigned __int8 *)(v45 + 361);
    *(unsigned char *)(v45 + 361) = v46 | 2;
    id v47 = v43;
    if ((v46 | 2) != v46)
    {
      swift_retain();
      GraphHost.uninstantiate(immediately:)(0);
      swift_release();
    }
  }
  else
  {
    int v48 = v43;
  }
  uint64_t v49 = UIHostingContentView.updateHostedViews()();
  MEMORY[0x1F4188790](v49);
  *(&v55 - 2) = (uint64_t)v43;
  static Update.ensure<A>(_:)();
  specialized _UIHostingView.delegate.setter((uint64_t)v43, (uint64_t)&protocol witness table for UIHostingContentView<A, B>);
  objc_msgSend(v43, sel_setPreservesSuperviewLayoutMargins_, 1);
  _s5UIKit24UICellConfigurationStateVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>, (uint64_t (*)(uint64_t))type metadata accessor for UITraitDefinition.Type, MEMORY[0x1E4FBBE00]);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_18834BB80;
  uint64_t v51 = type metadata accessor for UITraitUserInterfaceStyle();
  uint64_t v52 = MEMORY[0x1E4FB0F40];
  *(void *)(v50 + 32) = v51;
  *(void *)(v50 + 40) = v52;
  uint64_t v53 = v43;
  MEMORY[0x18C116DC0](v50, sel_setNeedsLayout);

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v53;
}

void type metadata accessor for UICellConfigurationState?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s5UIKit24UICellConfigurationStateVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized _UIHostingView.delegate.setter(uint64_t a1, uint64_t a2)
{
  *(void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x198) + 8) = a2;
  return swift_unknownObjectWeakAssign();
}

uint64_t assignWithTake for UIHostingConfigurationStorage(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  uint64_t v6 = a3[9];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UICellConfigurationState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(swift_unknownObjectWeakTakeAssign() + 8) = *(void *)(a2 + v15 + 8);
  return a1;
}

unint64_t type metadata accessor for UITraitDefinition.Type()
{
  unint64_t result = lazy cache variable for type metadata for UITraitDefinition.Type;
  if (!lazy cache variable for type metadata for UITraitDefinition.Type)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for UITraitDefinition);
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITraitDefinition.Type);
  }
  return result;
}

uint64_t UIHostingConfiguration<>.init(content:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UIHostingConfigurationStorage(0);
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = a2;
  v18[1] = MEMORY[0x1E4F417F8];
  v18[2] = a3;
  v18[3] = MEMORY[0x1E4F417F0];
  uint64_t v12 = type metadata accessor for UIHostingConfiguration();
  uint64_t v13 = a4 + *(int *)(v12 + 56);
  *uint64_t v11 = 1;
  OptionalEdgeInsets.init()();
  *((void *)v11 + 9) = 0;
  v11[80] = 1;
  *((void *)v11 + 11) = 0;
  v11[96] = 1;
  *(_WORD *)(v11 + 97) = 1;
  uint64_t v14 = &v11[v9[11]];
  uint64_t v15 = type metadata accessor for UICellConfigurationState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v11[v9[12]] = 0;
  *(void *)&v11[v9[13] + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_0((uint64_t)v11, v13, type metadata accessor for UIHostingConfigurationStorage);
  uint64_t result = a1(v16);
  *(unsigned char *)(a4 + *(int *)(v12 + 56)) = 0;
  return result;
}

uint64_t UIHostingContentView.configuration.setter(uint64_t a1)
{
  long long v3 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x650);
  v22[0] = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x640);
  v22[1] = v3;
  uint64_t v4 = type metadata accessor for UIHostingConfiguration();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v21 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v21 - v14;
  outlined init with copy of TableColumnList(a1, (uint64_t)v22);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for UIContentConfiguration);
  int v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v16)
  {
    v17(v8, 0, 1, v4);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v8, v4);
    specialized UIHostingContentView._configuration.setter((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v4);
  }
  else
  {
    v17(v8, 1, 1, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined init with copy of TableColumnList(a1, (uint64_t)v22);
    v21[0] = 0;
    v21[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(256);
    v19._countAndFlagsBits = 0xD0000000000000DELL;
    v19._object = (void *)0x8000000188335490;
    String.append(_:)(v19);
    _print_unlocked<A, B>(_:_:)();
    v20._object = (void *)0x8000000188335570;
    v20._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v20);
    UIHostingContentView._configuration.getter((uint64_t)v12);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v4);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t initializeWithTake for UIHostingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = type metadata accessor for UICellConfigurationState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 | 7) + v13;
  uint64_t v18 = (v17 + v11) & ~(v16 | 7);
  uint64_t v19 = (v17 + v12) & ~(v16 | 7);
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  long long v20 = *(_OWORD *)(v19 + 0x31);
  long long v21 = *(_OWORD *)(v19 + 0x28);
  long long v22 = *(_OWORD *)(v19 + 0x18);
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
  *(_OWORD *)(v18 + 24) = v22;
  *(_OWORD *)(v18 + 40) = v21;
  *(_OWORD *)(v18 + 49) = v20;
  long long v23 = *(_OWORD *)(v19 + 0x48);
  *(_OWORD *)(v18 + 81) = *(_OWORD *)(v19 + 0x51);
  *(_OWORD *)(v18 + 72) = v23;
  *(unsigned char *)(v18 + 97) = *(unsigned char *)(v19 + 0x61);
  *(unsigned char *)(v18 + 98) = *(unsigned char *)(v19 + 0x62);
  uint64_t v24 = (char *)((v16 + 99 + v18) & ~v16);
  uint64_t v25 = (char *)((v16 + 99 + v19) & ~v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v25, 1, v14))
  {
    int v26 = *(_DWORD *)(v15 + 84);
    size_t v27 = *(void *)(v15 + 64);
    if (v26) {
      size_t v28 = v27;
    }
    else {
      size_t v28 = v27 + 1;
    }
    memcpy(v24, v25, v28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v24, v25, v14);
    uint64_t v30 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
    uint64_t v29 = v15 + 56;
    v30(v24, 0, 1, v14);
    int v26 = *(_DWORD *)(v29 + 28);
    size_t v27 = *(void *)(v29 + 8);
  }
  if (v26) {
    size_t v31 = v27;
  }
  else {
    size_t v31 = v27 + 1;
  }
  unint64_t v32 = (unint64_t)&v24[v31];
  unint64_t v33 = (unint64_t)&v25[v31];
  *(unsigned char *)unint64_t v32 = *(unsigned char *)v33;
  unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectWeakTakeInit();
  *(void *)(v34 + 16) = *(void *)(v35 + 16);
  return a1;
}

void storeEnumTagSinglePayload for UIHostingConfiguration(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v51 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(v51 - 8);
  uint64_t v49 = *(void *)(a4 + 24);
  uint64_t v50 = v6;
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v49 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  int v11 = 0;
  uint64_t v12 = *(void *)(type metadata accessor for UICellConfigurationState() - 8);
  int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(void *)(v6 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  size_t v18 = *(void *)(v12 + 64);
  if (v13) {
    unsigned int v19 = v13 - 1;
  }
  else {
    unsigned int v19 = 0;
  }
  if (v19 <= 0x7FFFFFFF) {
    unsigned int v20 = 0x7FFFFFFF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (v20 <= v10) {
    unsigned int v21 = v10;
  }
  else {
    unsigned int v21 = v20;
  }
  uint64_t v22 = v14 + v15;
  uint64_t v23 = v17 | 7;
  uint64_t v24 = ((v17 | 7) + v16 + ((v14 + v15) & ~v15)) & ~(v17 | 7);
  uint64_t v25 = v17 + 99;
  if (!v13) {
    ++v18;
  }
  size_t v26 = ((v17 + 99) & ~v17) + v18;
  size_t v27 = v24 + (v26 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v21 < a3)
  {
    if (v24 + (v26 & 0xFFFFFFF8) == -24) {
      unsigned int v28 = a3 - v21 + 1;
    }
    else {
      unsigned int v28 = 2;
    }
    if (v28 >= 0x10000) {
      int v29 = 4;
    }
    else {
      int v29 = 2;
    }
    if (v28 < 0x100) {
      int v29 = 1;
    }
    if (v28 >= 2) {
      int v11 = v29;
    }
    else {
      int v11 = 0;
    }
  }
  unsigned int v30 = a2;
  if (a2 > v21)
  {
    if (v27) {
      int v31 = 1;
    }
    else {
      int v31 = a2 - v21;
    }
    if (v27)
    {
      int v32 = ~v21 + a2;
      bzero(a1, v27);
      *a1 = v32;
    }
    switch(v11)
    {
      case 1:
        *((unsigned char *)a1 + v27) = v31;
        break;
      case 2:
        *(_WORD *)((char *)a1 + v27) = v31;
        break;
      case 3:
        goto LABEL_75;
      case 4:
        *(_DWORD *)((char *)a1 + v27) = v31;
        break;
      default:
        return;
    }
    return;
  }
  uint64_t v33 = ~v15;
  uint64_t v34 = ~v23;
  uint64_t v35 = ~v17;
  char v36 = a1;
  switch(v11)
  {
    case 1:
      *((unsigned char *)a1 + v27) = 0;
      if (a2) {
        goto LABEL_42;
      }
      return;
    case 2:
      *(_WORD *)((char *)a1 + v27) = 0;
      if (a2) {
        goto LABEL_42;
      }
      return;
    case 3:
LABEL_75:
      __break(1u);
      return;
    case 4:
      *(_DWORD *)((char *)a1 + v27) = 0;
      goto LABEL_41;
    default:
LABEL_41:
      if (!a2) {
        return;
      }
LABEL_42:
      if (v7 == v21)
      {
        uint64_t v37 = v51;
        uint64_t v38 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v50 + 56);
        uint64_t v39 = a2;
        uint64_t v40 = v7;
LABEL_46:
        v38(v36, v39, v40, v37);
        return;
      }
      char v36 = (_DWORD *)(((unint64_t)a1 + v22) & v33);
      if (v9 == v21)
      {
        uint64_t v38 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        uint64_t v39 = a2;
        uint64_t v40 = v9;
        uint64_t v37 = v49;
        goto LABEL_46;
      }
      uint64_t v41 = (_DWORD *)(((unint64_t)v36 + v16 + v23) & v34);
      if (v20 >= v30)
      {
        uint64_t v43 = (unsigned char *)(((unint64_t)v41 + v25) & v35);
        if (v19 < 0x7FFFFFFF)
        {
          unint64_t v47 = (unint64_t)&v43[v18] & 0xFFFFFFFFFFFFFFF8;
          if ((v30 & 0x80000000) != 0)
          {
            *(void *)(v47 + 8) = v30 ^ 0x80000000;
            *(void *)(v47 + 16) = 0;
          }
          else
          {
            *(void *)(v47 + 8) = v30 - 1;
            *(void *)(v47 + 16) = 1;
          }
        }
        else if (v19 >= v30)
        {
          int v48 = *(void (**)(unsigned char *, void))(v12 + 56);
          v48(v43, v30 + 1);
        }
        else
        {
          if (v18 <= 3) {
            int v44 = ~(-1 << (8 * v18));
          }
          else {
            int v44 = -1;
          }
          if (v18)
          {
            int v45 = v44 & (~v19 + v30);
            if (v18 <= 3) {
              int v46 = v18;
            }
            else {
              int v46 = 4;
            }
            bzero(v43, v18);
            switch(v46)
            {
              case 2:
                *(_WORD *)uint64_t v43 = v45;
                break;
              case 3:
                *(_WORD *)uint64_t v43 = v45;
                v43[2] = BYTE2(v45);
                break;
              case 4:
                *(_DWORD *)uint64_t v43 = v45;
                break;
              default:
                *uint64_t v43 = v45;
                break;
            }
          }
        }
      }
      else if ((v26 & 0xFFFFFFF8) != 0xFFFFFFE8)
      {
        int v42 = ~v20 + v30;
        bzero((void *)(((unint64_t)v36 + v16 + v23) & v34), (v26 & 0xFFFFFFF8) + 24);
        *uint64_t v41 = v42;
      }
      return;
  }
}

uint64_t specialized UIHostingContentView._configuration.setter(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  long long v4 = *(_OWORD *)(v3 + 0x650);
  v11[2] = *(_OWORD *)(v3 + 0x640);
  void v11[3] = v4;
  uint64_t v5 = type metadata accessor for UIHostingConfiguration();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v11 - v7;
  uint64_t v9 = (char *)v1 + *(void *)(v3 + 1640);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v9, v5);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v9, a1, v5);
  swift_endAccess();
  UIHostingContentView._configuration.didset((uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void UIHostingContentView.updateBackgroundHostIfNeeded(_:)(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v25 = a2;
  size_t v26 = a1;
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x648);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v27 = *(void *)(v8 + 1600);
  uint64_t v28 = v4;
  long long v29 = *(_OWORD *)(v9 + 1616);
  uint64_t v10 = type metadata accessor for UIHostingConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v25 - v12;
  UIHostingContentView._configuration.getter((uint64_t)&v25 - v12);
  int v14 = v13[*(int *)(v10 + 56)];
  uint64_t v15 = *(void (**)(char *, uint64_t))(v11 + 8);
  v15(v13, v10);
  uint64_t v16 = *(void *)((*v3 & *v2) + 0x678);
  uint64_t v17 = *(void **)((char *)v2 + v16);
  if (v14 == 1)
  {
    if (v17)
    {
      UIHostingContentView._configuration.getter((uint64_t)v13);
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v13[*(int *)(v10 + 52)], v4);
      id v18 = v17;
      v15(v13, v10);
      specialized _UIHostingView.rootView.setter((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      unsigned int v21 = UIHostingContentView.makeBackgroundHost()();
      uint64_t v22 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x678);
      uint64_t v23 = *(void **)((char *)v2 + v22);
      *(void *)((char *)v2 + v22) = v21;

      if (v26) {
        v26(v24);
      }
    }
  }
  else
  {
    unsigned int v19 = v26;
    if (v17)
    {
      *(void *)((char *)v2 + v16) = 0;

      if (v19) {
        v19(v20);
      }
    }
  }
}

uint64_t UIHostingContentView.makeRootView()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v68 = a1;
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v1;
  type metadata accessor for UICellConfigurationState?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v66 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for HostingContentViewRootModifier(0);
  MEMORY[0x1F4188790](v67);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(void *)(v2 + 1600);
  uint64_t v64 = *(void *)(v45 - 8);
  uint64_t v7 = v64;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v45 - v9;
  uint64_t v63 = (char *)&v45 - v9;
  uint64_t v11 = *(void *)(v2 + 1608);
  *(void *)&long long v73 = v12;
  *((void *)&v73 + 1) = v11;
  long long v65 = *(_OWORD *)(v2 + 1616);
  long long v74 = v65;
  uint64_t v13 = type metadata accessor for UIHostingConfiguration();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unsigned int v19 = (char *)&v45 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (uint64_t)&v45 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v45 - v24;
  UIHostingContentView._configuration.getter((uint64_t)&v45 - v24);
  size_t v26 = v10;
  uint64_t v27 = v45;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v26, v25, v45);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v25, v13);
  UIHostingContentView.defaultStyling()((uint64_t)&v73);
  long long v62 = v73;
  long long v61 = v74;
  uint64_t v29 = v75;
  uint64_t v60 = v76;
  uint64_t v59 = v77;
  int v58 = v78;
  uint64_t v30 = v79;
  uint64_t v57 = v80;
  int v56 = v81;
  UIHostingContentView._configuration.getter(v22);
  uint64_t v31 = v22 + *(int *)(v13 + 56);
  uint64_t v55 = *(void *)(v31 + 8);
  unsigned __int8 v32 = *(unsigned char *)(v31 + 16);
  uint64_t v54 = *(void *)(v31 + 24);
  unsigned __int8 v33 = *(unsigned char *)(v31 + 32);
  uint64_t v53 = *(void *)(v31 + 40);
  unsigned __int8 v34 = *(unsigned char *)(v31 + 48);
  uint64_t v52 = *(void *)(v31 + 56);
  LOBYTE(v31) = *(unsigned char *)(v31 + 64);
  unsigned __int8 v72 = v32;
  unsigned __int8 v71 = v33;
  unsigned __int8 v70 = v34;
  unsigned __int8 v69 = v31;
  v28((char *)v22, v13);
  int v48 = v72;
  int v49 = v71;
  int v50 = v70;
  int v51 = v69;
  UIHostingContentView._configuration.getter((uint64_t)v19);
  uint64_t v35 = &v19[*(int *)(v13 + 56)];
  uint64_t v47 = *((void *)v35 + 9);
  LOBYTE(v25) = v35[80];
  uint64_t v46 = *((void *)v35 + 11);
  char v82 = v35[96];
  LOBYTE(v22) = v82;
  v28(v19, v13);
  LOBYTE(v19) = *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x660));
  UIHostingContentView._configuration.getter((uint64_t)v16);
  uint64_t v36 = *(int *)(v13 + 56);
  uint64_t v37 = (uint64_t)&v16[v36 + *(int *)(type metadata accessor for UIHostingConfigurationStorage(0) + 36)];
  uint64_t v38 = v66;
  outlined init with copy of UIHostingConfigurationStorage(v37, v66, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  v28(v16, v13);
  *((void *)v6 + 4) = v29;
  uint64_t v39 = v59;
  *((void *)v6 + 5) = v60;
  *((void *)v6 + 6) = v39;
  v6[56] = v58;
  *((void *)v6 + 8) = v30;
  *((void *)v6 + 9) = v57;
  v6[80] = v56;
  *((void *)v6 + 11) = v55;
  v6[96] = v48;
  *((void *)v6 + 13) = v54;
  v6[112] = v49;
  *((void *)v6 + 15) = v53;
  v6[128] = v50;
  *((void *)v6 + 17) = v52;
  v6[144] = v51;
  *((void *)v6 + 19) = v47;
  v6[160] = (char)v25;
  *((void *)v6 + 21) = v46;
  v6[176] = v22 & 1;
  v6[177] = (char)v19;
  uint64_t v40 = v67;
  uint64_t v41 = (uint64_t)&v6[*(int *)(v67 + 32)];
  long long v42 = v61;
  *(_OWORD *)uint64_t v6 = v62;
  *((_OWORD *)v6 + 1) = v42;
  _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_0(v38, v41, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  uint64_t v43 = v63;
  MEMORY[0x18C113660](v6, v27, v40, v65);
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v6, type metadata accessor for HostingContentViewRootModifier);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v43, v27);
}

uint64_t destroy for UIHostingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v7);
  uint64_t v8 = *(void *)(v6 + 56);
  uint64_t v9 = type metadata accessor for UICellConfigurationState();
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = (*(unsigned __int8 *)(v10 + 80)
       + ((v7 + v8 + (*(unsigned __int8 *)(v10 + 80) | 7)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80) & 0xFFFFFFFFFFFFFFF8)
       + 99) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9)) {
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v11, v9);
  }

  return swift_unknownObjectWeakDestroy();
}

uint64_t UIHostingContentView._configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x668);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UIHostingConfiguration();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UIHostingConfiguration()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for UIHostingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = type metadata accessor for UICellConfigurationState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 | 7) + v13;
  uint64_t v18 = (v17 + v11) & ~(v16 | 7);
  uint64_t v19 = (v17 + v12) & ~(v16 | 7);
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  long long v20 = *(_OWORD *)(v19 + 0x31);
  long long v21 = *(_OWORD *)(v19 + 0x28);
  long long v22 = *(_OWORD *)(v19 + 0x18);
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
  *(_OWORD *)(v18 + 24) = v22;
  *(_OWORD *)(v18 + 40) = v21;
  *(_OWORD *)(v18 + 49) = v20;
  long long v23 = *(_OWORD *)(v19 + 0x48);
  *(_OWORD *)(v18 + 81) = *(_OWORD *)(v19 + 0x51);
  *(_OWORD *)(v18 + 72) = v23;
  *(unsigned char *)(v18 + 97) = *(unsigned char *)(v19 + 0x61);
  *(unsigned char *)(v18 + 98) = *(unsigned char *)(v19 + 0x62);
  uint64_t v24 = (char *)((v16 + 99 + v18) & ~v16);
  uint64_t v25 = (char *)((v16 + 99 + v19) & ~v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v25, 1, v14))
  {
    int v26 = *(_DWORD *)(v15 + 84);
    size_t v27 = *(void *)(v15 + 64);
    if (v26) {
      size_t v28 = v27;
    }
    else {
      size_t v28 = v27 + 1;
    }
    memcpy(v24, v25, v28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    uint64_t v30 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
    uint64_t v29 = v15 + 56;
    v30(v24, 0, 1, v14);
    int v26 = *(_DWORD *)(v29 + 28);
    size_t v27 = *(void *)(v29 + 8);
  }
  if (v26) {
    size_t v31 = v27;
  }
  else {
    size_t v31 = v27 + 1;
  }
  unint64_t v32 = (unint64_t)&v24[v31];
  unint64_t v33 = (unint64_t)&v25[v31];
  *(unsigned char *)unint64_t v32 = *(unsigned char *)v33;
  unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectWeakCopyInit();
  *(void *)(v34 + 16) = *(void *)(v35 + 16);
  return a1;
}

uint64_t outlined init with take of UIHostingConfigurationStorage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>(255);
    type metadata accessor for LabelStyleWritingModifier<SidebarLabelStyle>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsInHostingConfiguration>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration, (uint64_t)&type metadata for IsInHostingConfiguration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>);
    }
  }
}

void UIHostingContentView.defaultStyling()(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  objc_msgSend(v1, sel_directionalLayoutMargins);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && objc_msgSend(v1, sel_insetsLayoutMarginsFromSafeArea))
  {
    objc_msgSend(v1, sel_safeAreaInsets);
    id v12 = objc_msgSend(v1, sel_traitCollection);
    objc_msgSend(v12, sel_layoutDirection);

    EdgeInsets.negatedInsets.getter();
    EdgeInsets.adding(_:)();
    uint64_t v5 = v13;
    uint64_t v7 = v14;
    uint64_t v9 = v15;
    uint64_t v11 = v16;
  }
  uint64_t v17 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x680));
  uint64_t v18 = (uint64_t (*)(uint64_t))*v17;
  uint64_t v19 = 0;
  double v20 = 10.0;
  if (!*v17)
  {
    char v37 = 0;
    BOOL v31 = 0;
    uint64_t v25 = 0;
LABEL_11:
    uint64_t v36 = 1;
    goto LABEL_12;
  }
  uint64_t v21 = outlined copy of AppIntentExecutor?(*v17);
  long long v22 = (void *)v18(v21);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v18);
  if (!v22)
  {
    char v37 = 0;
    BOOL v31 = 0;
    uint64_t v18 = 0;
    uint64_t v25 = 0;
    goto LABEL_11;
  }
  id v23 = objc_msgSend(v22, sel_textProperties);
  id v24 = objc_msgSend(v23, sel_font);

  uint64_t v25 = Font.init(_:)();
  id v26 = objc_msgSend(v22, sel_textProperties);
  objc_msgSend(v26, sel_resolvedColor);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  uint64_t v18 = (uint64_t (*)(uint64_t))Color.init<A>(provider:)();
  id v27 = objc_msgSend(v2, sel_traitCollection);
  objc_msgSend(v22, sel__minimumHeightForTraitCollection_, v27);
  uint64_t v19 = v28;

  id v29 = objc_msgSend(v22, sel_textProperties);
  id v30 = objc_msgSend(v29, sel_transform);

  BOOL v31 = v30 == (id)1;
  objc_msgSend(v22, sel_imageToTextPadding);
  double v20 = v32;
  id v33 = objc_msgSend(v22, sel_imageProperties);
  id v34 = objc_msgSend(v33, sel_tintColor);

  if (!v34)
  {

    char v37 = 0;
    goto LABEL_11;
  }
  id v35 = v34;
  uint64_t v36 = Color.init<A>(provider:)();

  char v37 = 1;
LABEL_12:
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = v25;
  *(void *)(a1 + 48) = v18;
  *(unsigned char *)(a1 + 56) = v31;
  *(double *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v36;
  *(unsigned char *)(a1 + 80) = v37;
}

uint64_t initializeWithTake for UIHostingConfigurationStorage(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 81);
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  uint64_t v7 = a3[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 81) = v6;
  uint64_t v10 = type metadata accessor for UICellConfigurationState();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(swift_unknownObjectWeakTakeInit() + 8) = *(void *)(a2 + v13 + 8);
  return a1;
}

uint64_t assignWithCopy for UIHostingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = type metadata accessor for UICellConfigurationState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 | 7) + v13;
  uint64_t v18 = (v17 + v11) & ~(v16 | 7);
  uint64_t v19 = (v17 + v12) & ~(v16 | 7);
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  LOBYTE(v17) = *(unsigned char *)(v19 + 0x10);
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  *(unsigned char *)(v18 + 16) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 32);
  *(void *)(v18 + 24) = *(void *)(v19 + 24);
  *(unsigned char *)(v18 + 32) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 48);
  *(void *)(v18 + 40) = *(void *)(v19 + 40);
  *(unsigned char *)(v18 + 48) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 64);
  *(void *)(v18 + 56) = *(void *)(v19 + 56);
  *(unsigned char *)(v18 + 64) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 80);
  *(void *)(v18 + 72) = *(void *)(v19 + 72);
  *(unsigned char *)(v18 + 80) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 96);
  *(void *)(v18 + 88) = *(void *)(v19 + 88);
  *(unsigned char *)(v18 + 96) = v17;
  *(unsigned char *)(v18 + 97) = *(unsigned char *)(v19 + 97);
  *(unsigned char *)(v18 + 98) = *(unsigned char *)(v19 + 98);
  double v20 = (char *)((v16 + 99 + v18) & ~v16);
  uint64_t v21 = (char *)((v16 + 99 + v19) & ~v16);
  long long v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v13) = v22(v20, 1, v14);
  int v23 = v22(v21, 1, v14);
  if (v13)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
      goto LABEL_12;
    }
    int v24 = *(_DWORD *)(v15 + 84);
    size_t v25 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v20, v21, v14);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    int v24 = *(_DWORD *)(v15 + 84);
    size_t v25 = *(void *)(v15 + 64);
  }
  if (v24) {
    size_t v26 = v25;
  }
  else {
    size_t v26 = v25 + 1;
  }
  memcpy(v20, v21, v26);
LABEL_12:
  if (*(_DWORD *)(v15 + 84)) {
    uint64_t v27 = *(void *)(v15 + 64);
  }
  else {
    uint64_t v27 = *(void *)(v15 + 64) + 1;
  }
  unint64_t v28 = (unint64_t)&v20[v27];
  unint64_t v29 = (unint64_t)&v21[v27];
  *(unsigned char *)unint64_t v28 = *(unsigned char *)v29;
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectWeakCopyAssign();
  *(void *)(v30 + 16) = *(void *)(v31 + 16);
  return a1;
}

void *UIHostingContentView.makeBackgroundHost()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  uint64_t v2 = *(void *)(v1 + 0x658);
  uint64_t v18 = *(void *)(v1 + 0x640);
  long long v17 = *(_OWORD *)(v1 + 1608);
  long long v19 = v17;
  uint64_t v20 = v2;
  uint64_t v3 = type metadata accessor for UIHostingConfiguration();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = v17;
  uint64_t v8 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (objc_class *)((char *)&v17 - v10);
  UIHostingContentView._configuration.getter((uint64_t)v6);
  (*(void (**)(objc_class *, char *, uint64_t))(v8 + 16))(v11, &v6[*(int *)(v3 + 52)], v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v12 = objc_allocWithZone((Class)type metadata accessor for UIHostingBackgroundView());
  uint64_t v13 = specialized _UIHostingView.init(rootView:)(v11);
  LODWORD(v3) = _UIHostingView.isHiddenForReuse.getter() & 1;
  if (v3 != (_UIHostingView.isHiddenForReuse.getter() & 1))
  {
    char v14 = _UIHostingView.isHiddenForReuse.getter();
    uint64_t v15 = v13;
    _UIHostingView.isHiddenForReuse.setter(v14 & 1);
  }
  (*(void (**)(objc_class *, uint64_t))(v8 + 8))(v11, v7);
  return v13;
}

uint64_t type metadata accessor for UIHostingBackgroundView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UIKitSensoryFeedbackCache.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t UIKitStatusBarBridge.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationDestinationModifier.MakeSeededResolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #2 in _TaskModifier.InnerModifier.body(content:)()
{
  return partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:)(closure #2 in _TaskModifier.InnerModifier.body(content:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t instantiation function for generic protocol witness table for WrappedButtonStyleBody<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, void (*a3)(void *__return_ptr, void))
{
  v4[2] = *MEMORY[0x1E4F143B8];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  void v4[5];

  v4[4] = *MEMORY[0x1E4F143B8];
  a3(v4, *a1);
  return AGGraphSetOutputValue();
}

{
  void v4[2];

  v4[1] = *MEMORY[0x1E4F143B8];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  void v4[22];

  v4[21] = *MEMORY[0x1E4F143B8];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  return outlined destroy of _IdentifiedViewTree((uint64_t)v4);
}

uint64_t FlipForRTLEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v6 = *Value;
  if (*(unsigned char *)AGGraphGetValue() == 2)
  {
    swift_retain();
    uint64_t result = swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t result = EnvironmentValues.layoutDirection.setter();
    uint64_t v3 = v6;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t assignWithCopy for OnScrollVisibilityGeometryAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

Swift::Void __swiftcall PortalGroupID.updateValue()()
{
  int v1 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 != *(_DWORD *)(v0 + 8) || !*(_DWORD *)(v0 + 4))
  {
    int v2 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v3 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v3 = 1;
    }
    static ViewIdentity.nextSeed = v3;
    *(_DWORD *)(v0 + 4) = v2;
    *(_DWORD *)(v0 + 8) = v1;
  }
  AGGraphSetOutputValue();
}

uint64_t getEnumTagSinglePayload for ProgressViewStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance InferredToolbarUserDefaultFeature()
{
  lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

unint64_t lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

void *assignWithCopy for OnTestViewModifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for BorderedButtonStyle()
{
  return &type metadata for BorderedButtonStyle;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SafeAreaTransitionStateKey.Value()
{
  return &type metadata for EnvironmentValues.SafeAreaTransitionStateKey.Value;
}

uint64_t key path getter for EnvironmentValues.isFocused : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isFocused.getter();
  *a1 = result & 1;
  return result;
}

uint64_t EnvironmentValues.isFocused.getter()
{
  return EnvironmentValues.isFocused.getter((unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>, (uint64_t)&type metadata for EnvironmentValues.IsFocusedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusedKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>);
}

Swift::Void __swiftcall UIKitHostedFocusItemLifecycle.updateValue()()
{
  uint64_t v2 = v0;
  outlined init with copy of UIKitHostedFocusItemLifecycle(v0, (uint64_t)&v61);
  int v3 = *MEMORY[0x1E4F4E7A0];
  if (v63 == *MEMORY[0x1E4F4E7A0])
  {
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
    return;
  }
  char v4 = *(unsigned char *)AGGraphGetValue();
  outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
  if (v4)
  {
    outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
    int v5 = v62;
    if (v62 == v3)
    {
      uint64_t v58 = 0;
    }
    else
    {
      _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t)&lazy cache variable for type metadata for UIView, 0x1E4FB1EB0, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of WeakBox<UIView>(Value, (uint64_t)&v58);
    }
    LOBYTE(v59) = v5 == v3;
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
    if (v59)
    {
      outlined destroy of WeakBox<UIView>?((uint64_t)&v58);
      unsigned int v7 = 0;
    }
    else
    {
      unsigned int v7 = (void *)MEMORY[0x18C119DF0](&v58);
      _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGWOhTm_0((uint64_t)&v58, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t)&lazy cache variable for type metadata for UIView, 0x1E4FB1EB0, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
    }
    swift_unknownObjectWeakAssign();

    int v8 = *(_DWORD *)(v2 + 40);
    outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
    unsigned int v9 = *(_DWORD *)AGGraphGetValue();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
    if (v8 != v9 >> 1)
    {
      outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
      unsigned int v10 = *(_DWORD *)AGGraphGetValue();
      outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
      *(_DWORD *)(v2 + 40) = v10 >> 1;
      UIKitHostedFocusItemLifecycle.remove()();
      swift_unknownObjectRelease();
      *(_OWORD *)(v2 + 48) = 0u;
      *(_OWORD *)(v2 + 64) = 0u;
      *(void *)(v2 + 88) = 0;
      *(void *)(v2 + 96) = 0;
      *(unsigned char *)(v2 + 80) = 1;
      *(unsigned char *)(v2 + 44) = 2;
    }
    outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
    type metadata accessor for UIKitHostContainer?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
    unint64_t v11 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      id v12 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_14;
      }
    }
    else
    {
      id v12 = *(void **)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v12)
      {
LABEL_14:
        if ((v11 & 0xC000000000000001) != 0)
        {
          uint64_t v13 = MEMORY[0x18C117680](0, v11);
        }
        else
        {
          if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_59;
          }
          uint64_t v13 = *(void *)(v11 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        uint64_t v14 = *(void *)(v2 + 104);
        if (v14 && v13 == v14)
        {
          swift_release();
          uint64_t v15 = *(uint64_t **)(v2 + 104);
          if (!v15) {
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v16 = swift_conformsToProtocol2();
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          if (v16) {
            uint64_t v18 = v13;
          }
          else {
            uint64_t v18 = 0;
          }
          swift_release();
          if (!v18)
          {
            swift_release();
            uint64_t v17 = 0;
          }
          *(void *)(v2 + 104) = v18;
          *(void *)(v2 + 112) = v17;
          uint64_t v15 = *(uint64_t **)(v2 + 104);
          if (!v15) {
            goto LABEL_51;
          }
        }
LABEL_33:
        uint64_t v19 = *(void *)(v2 + 112);
        uint64_t v20 = *v15;
        uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 16);
        swift_retain();
        id v12 = (void *)v21(v20, v19);
        uint64_t v1 = v22;
        swift_release();
        if (v12)
        {
          outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
          uint64_t v23 = AGGraphGetValue();
          uint64_t v58 = *(void *)v23;
          long long v24 = *(_OWORD *)(v23 + 24);
          long long v59 = *(_OWORD *)(v23 + 8);
          long long v60 = v24;
          swift_retain();
          outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
          outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
          AGGraphGetValue();
          uint64_t v25 = outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
          *(double *)&unint64_t v26 = MEMORY[0x18C10C240](v25);
          ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v27, v26));
          outlined init with copy of UIKitHostedFocusItemLifecycle(v2, (uint64_t)&v61);
          AGGraphGetValue();
          uint64_t v28 = outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v61);
          v57.origin = 0uLL;
          v57.size.width = MEMORY[0x18C114450](v28);
          v57.size.height = v29;
          if (one-time initialization token for UIKitHostContainerCoordinateSpace == -1)
          {
LABEL_35:
            uint64_t v61 = UIKitHostContainerCoordinateSpace;
            char v64 = 1;
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v61);
            unsigned int v30 = objc_msgSend(v12, sel_canBecomeFocused);
            unsigned int v31 = v30;
            if (*(void *)(v2 + 88))
            {
              long long v55 = *(_OWORD *)(v2 + 88);
              if ((*(unsigned char *)(v2 + 80) & 1) != 0 || !CGRectEqualToRect(*(CGRect *)(v2 + 48), v57))
              {
                *(CGPoint *)(v2 + 48) = v57.origin;
                *(CGSize *)(v2 + 64) = v57.size;
                *(unsigned char *)(v2 + 80) = 0;
                double v32 = (_OWORD *)swift_allocObject();
                v32[1] = v55;
                v32[2] = v57.origin;
                v32[3] = v57.size;
                id v33 = *(char **)(v2 + 120);
                swift_unknownObjectRetain_n();
                swift_retain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  id v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, v33);
                }
                unint64_t v34 = *((void *)v33 + 2);
                unint64_t v35 = *((void *)v33 + 3);
                unint64_t v36 = v34 + 1;
                if (v34 >= v35 >> 1)
                {
                  unint64_t v56 = v34 + 1;
                  int v49 = v33;
                  unint64_t v50 = *((void *)v33 + 2);
                  int v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v34 + 1, 1, v49);
                  unint64_t v34 = v50;
                  unint64_t v36 = v56;
                  id v33 = v51;
                }
                *((void *)v33 + 2) = v36;
                char v37 = &v33[24 * v34];
                v37[32] = 0;
                *((void *)v37 + 5) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.invalidateFrame();
                *((void *)v37 + 6) = v32;
                swift_unknownObjectRelease();
                swift_release();
                *(void *)(v2 + 120) = v33;
              }
              int v38 = *(unsigned __int8 *)(v2 + 44);
              if ((v38 == 2 || v31 != (v38 & 1)) && (*(unsigned char *)(v2 + 44) = v31, (uint64_t v39 = *(void *)(v2 + 88)) != 0))
              {
                uint64_t v40 = *(void *)(v2 + 96);
                uint64_t v41 = swift_allocObject();
                *(void *)(v41 + 16) = v39;
                *(void *)(v41 + 24) = v40;
                long long v42 = *(char **)(v2 + 120);
                swift_unknownObjectRetain_n();
                swift_retain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  long long v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v42 + 2) + 1, 1, v42);
                }
                unint64_t v43 = *((void *)v42 + 2);
                unint64_t v44 = *((void *)v42 + 3);
                unint64_t v45 = v43 + 1;
                if (v43 >= v44 >> 1)
                {
                  uint64_t v52 = v42;
                  unint64_t v53 = *((void *)v42 + 2);
                  uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v43 + 1, 1, v52);
                  unint64_t v43 = v53;
                  long long v42 = v54;
                }
                *((void *)v42 + 2) = v45;
                uint64_t v46 = &v42[24 * v43];
                v46[32] = 0;
                *((void *)v46 + 5) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.invalidateFocusIfNeeded();
                *((void *)v46 + 6) = v41;
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_release();
                *(void *)(v2 + 120) = v42;
              }
              else
              {
                swift_unknownObjectRelease();
              }
            }
            else
            {
              *(void *)(v2 + 88) = v12;
              *(void *)(v2 + 96) = v1;
              *(CGPoint *)(v2 + 48) = v57.origin;
              *(CGSize *)(v2 + 64) = v57.size;
              *(unsigned char *)(v2 + 80) = 0;
              *(unsigned char *)(v2 + 44) = v30;
              UIKitHostedFocusItemLifecycle.insert()();
            }
            swift_release();
            uint64_t v48 = *(void *)(v2 + 120);
            *(void *)(v2 + 120) = MEMORY[0x1E4FBC860];
            *(void *)(swift_allocObject() + 16) = v48;
            goto LABEL_55;
          }
LABEL_59:
          swift_once();
          goto LABEL_35;
        }
LABEL_51:
        uint64_t v47 = *(void *)(v2 + 120);
        *(void *)(v2 + 120) = MEMORY[0x1E4FBC860];
        *(void *)(swift_allocObject() + 16) = v47;
LABEL_55:
        static Update.enqueueAction(_:)();
        swift_release();
        return;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = *(uint64_t **)(v2 + 104);
    if (!v15) {
      goto LABEL_51;
    }
    goto LABEL_33;
  }
}

uint64_t outlined init with copy of UIKitHostedFocusItemLifecycle(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for UIKitHostedFocusItemLifecycle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_unknownObjectWeakCopyInit();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t implicit closure #1 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider();
  swift_retain();
  uint64_t v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

unint64_t lazy protocol witness table accessor for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider;
  if (!lazy protocol witness table cache variable for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider);
  }
  return result;
}

uint64_t static _FocusableModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(void *__return_ptr, uint64_t, uint64_t *)@<X2>, void *a3@<X8>)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v20 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 28);
  int v21 = *(_DWORD *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 32);
  int v22 = *(_DWORD *)(a1 + 36);
  int v23 = *(_DWORD *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 64);
  int v27 = *(_DWORD *)(a1 + 56);
  int v28 = *(_DWORD *)(a1 + 60);
  int v24 = *(_DWORD *)(a1 + 72);
  int v6 = *(_DWORD *)(a1 + 80);
  int v25 = *(_DWORD *)(a1 + 76);
  int v26 = *(_DWORD *)(a1 + 68);
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_FocusableModifier>, (uint64_t)&type metadata for _FocusableModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedOptions and conformance ResolvedOptions();
  int v12 = Attribute.init<A>(body:value:flags:update:)();
  int v7 = _GraphValue.value.getter();
  uint64_t v61 = v20;
  int v62 = v23;
  uint64_t v63 = v19;
  int v64 = v21;
  int v65 = v3;
  int v66 = v4;
  int v67 = v22;
  uint64_t v68 = v17;
  uint64_t v69 = v18;
  int v70 = v27;
  int v71 = v28;
  int v72 = v5;
  int v73 = v26;
  int v74 = v24;
  int v75 = v25;
  int v76 = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UpdateViewFocusItem.init(modifier:options:inputs:)(v7, v12, (uint64_t)&v46);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateViewFocusItem and conformance UpdateViewFocusItem();
  int v13 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of UpdateViewFocusItem((uint64_t)&v46);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  uint64_t v61 = v20;
  int v62 = v23;
  uint64_t v63 = v19;
  int v64 = v21;
  int v65 = v3;
  int v66 = v4;
  int v67 = v22;
  uint64_t v68 = v17;
  uint64_t v69 = v18;
  int v70 = v27;
  int v71 = v28;
  int v72 = v5;
  int v73 = v26;
  int v74 = v24;
  int v75 = v25;
  int v76 = v6;
  type metadata accessor for FocusableViewResponder();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = FocusableViewResponder.init(inputs:)();
  uint64_t v61 = v20;
  int v62 = v23;
  uint64_t v63 = v19;
  int v64 = v21;
  int v65 = v3;
  int v66 = v4;
  int v67 = v22;
  uint64_t v68 = v17;
  uint64_t v69 = v18;
  int v70 = v27;
  int v71 = v28;
  int v72 = v5;
  int v73 = v26;
  int v74 = v24;
  int v75 = v25;
  int v76 = v6;
  LOBYTE(v46) = 1;
  lazy protocol witness table accessor for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  LOBYTE(v46) = 0;
  int v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, v8);
  int v9 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v46 = v20;
  DWORD2(v46) = v23;
  uint64_t v47 = v19;
  int v48 = v21;
  int v49 = v3;
  int v50 = v4;
  int v51 = v22;
  uint64_t v52 = v17;
  uint64_t v53 = v18;
  int v54 = v27;
  int v55 = v28;
  int v56 = v5;
  int v57 = v26;
  int v58 = v24;
  int v59 = v25;
  int v60 = v6;
  *(void *)&long long v46 = __PAIR64__(_ViewInputs.environment.getter(), v13);
  DWORD2(v46) = v9;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  PreferenceKeys.add(_:)();
  *(void *)&long long v46 = v61;
  DWORD2(v46) = v62;
  uint64_t v47 = v63;
  int v48 = v64;
  int v49 = v65;
  int v50 = v66;
  int v51 = v67;
  uint64_t v52 = v68;
  uint64_t v53 = v69;
  int v54 = v70;
  int v55 = v71;
  int v56 = v72;
  int v57 = v73;
  int v58 = v74;
  int v59 = v75;
  int v60 = v76;
  uint64_t v30 = v61;
  LODWORD(v31) = v62;
  uint64_t v32 = v63;
  int v33 = v64;
  int v34 = v65;
  int v35 = v66;
  int v36 = v67;
  uint64_t v37 = v68;
  uint64_t v38 = v69;
  int v39 = v70;
  int v40 = v71;
  int v41 = v72;
  int v42 = v73;
  int v43 = v74;
  int v44 = v75;
  int v45 = v76;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a2(v29, v10, &v30);
  uint64_t v30 = v29[0];
  uint64_t v31 = v29[1];
  makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)(&v46, &v30, v14, v13, a3);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

double static FocusEventProxyModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a2 + 8);
  int v9 = *((_DWORD *)a2 + 9);
  uint64_t v12 = a2[5];
  uint64_t v11 = a2[6];
  int v14 = *((_DWORD *)a2 + 14);
  int v13 = *((_DWORD *)a2 + 15);
  int v15 = *((_DWORD *)a2 + 16);
  int v16 = *((_DWORD *)a2 + 17);
  int v17 = *((_DWORD *)a2 + 18);
  int v18 = *((_DWORD *)a2 + 19);
  int v19 = *((_DWORD *)a2 + 20);
  uint64_t v33 = *a2;
  uint64_t v4 = v33;
  LODWORD(v34) = v5;
  uint64_t v35 = v6;
  int v36 = v7;
  int v37 = v8;
  int v38 = v10;
  int v39 = v9;
  uint64_t v40 = v12;
  uint64_t v41 = v11;
  uint64_t v29 = v11;
  int v42 = v14;
  int v43 = v13;
  int v27 = v15;
  int v28 = v13;
  int v44 = v15;
  int v45 = v16;
  int v25 = v17;
  int v26 = v16;
  int v46 = v17;
  int v47 = v18;
  int v23 = v19;
  int v24 = v18;
  int v48 = v19;
  a3(&v31, a1, &v33);
  uint64_t v33 = v4;
  LODWORD(v34) = v5;
  uint64_t v35 = v6;
  int v36 = v7;
  int v37 = v8;
  int v38 = v10;
  int v39 = v9;
  uint64_t v40 = v12;
  if (specialized static IOSFocusEnabledFlag.evaluate(inputs:)())
  {
    uint64_t v33 = v29;
    LODWORD(v34) = v14;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      uint64_t v33 = v31;
      double v34 = v32;
      int v22 = _ViewOutputs.viewResponders()();
      type metadata accessor for FocusEventProxyResponder();
      swift_allocObject();
      uint64_t v33 = v4;
      LODWORD(v34) = v5;
      uint64_t v35 = v6;
      int v36 = v7;
      int v37 = v8;
      int v38 = v10;
      int v39 = v9;
      uint64_t v40 = v12;
      uint64_t v41 = v29;
      int v42 = v14;
      int v43 = v28;
      int v44 = v27;
      int v45 = v26;
      int v46 = v25;
      int v47 = v24;
      int v48 = v23;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = DefaultLayoutViewResponder.init(inputs:)();
      LODWORD(v33) = v22;
      double v34 = *(double *)&v20;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      lazy protocol witness table accessor for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter();
      Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      LOBYTE(v33) = 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *(void *)a4 = v31;
  double result = v32;
  a4[1] = v32;
  return result;
}

uint64_t specialized static IOSFocusEnabledFlag.evaluate(inputs:)()
{
  lazy protocol witness table accessor for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v2 == 1)
  {
    _GraphInputs.interfaceIdiom.getter();
    if (AnyInterfaceIdiom.accepts<A>(_:)())
    {
      char v0 = 1;
    }
    else
    {
      _GraphInputs.interfaceIdiom.getter();
      char v0 = AnyInterfaceIdiom.accepts<A>(_:)();
    }
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

double makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)@<D0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, void *a5@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  long long v8 = a1[3];
  long long v47 = a1[2];
  long long v48 = v8;
  long long v49 = a1[4];
  int v50 = *((_DWORD *)a1 + 20);
  long long v9 = a1[1];
  long long v45 = *a1;
  long long v46 = v9;
  uint64_t v10 = *a2;
  int v25 = DWORD2(v48);
  unint64_t v24 = v48;
  unsigned int v11 = *((_DWORD *)a2 + 2);
  unsigned int v12 = *((_DWORD *)a2 + 3);
  unint64_t v37 = v48;
  int v38 = DWORD2(v48);
  swift_bridgeObjectRetain();
  uint64_t v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v13)
  {
    int v23 = a5;
    *(void *)(a3 + 408) = AGCreateWeakAttribute();
    *(unsigned char *)(a3 + 416) = 0;
    unsigned int v14 = _ViewInputs.transform.getter();
    int v15 = a4;
    unsigned int v16 = _ViewInputs.animatedPosition()();
    uint64_t v41 = v47;
    *(void *)&void v44[8] = *((void *)&v49 + 1);
    *(_DWORD *)&v44[16] = v50;
    int v39 = HIDWORD(v45);
    int v17 = _ViewInputs.animatedSize()();
    uint64_t v18 = MEMORY[0x1E4F40CE0];
    ContentResponderHelper.init()();
    long long v19 = *(_OWORD *)&v44[8];
    long long v20 = *(_OWORD *)&v44[24];
    unint64_t v37 = __PAIR64__(v16, v14);
    int v38 = v17;
    long long v40 = v45;
    LOBYTE(v41) = v46;
    uint64_t v42 = *((void *)&v46 + 1);
    long long v43 = v47;
    *(_OWORD *)int v44 = v48;
    *(void *)&v44[16] = v49;
    *(_OWORD *)&v44[24] = v19;
    *(_OWORD *)&v44[40] = v20;
    *(void *)&v44[56] = a3;
    long long v34 = *(_OWORD *)&v44[16];
    long long v35 = *(_OWORD *)&v44[32];
    long long v36 = *(_OWORD *)&v44[48];
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], v18, MEMORY[0x1E4F40908]);
    lazy protocol witness table accessor for type UpdateViewGeometry and conformance UpdateViewGeometry();
    swift_retain();
    LODWORD(v18) = Attribute.init<A>(body:value:flags:update:)();
    outlined release of UpdateViewGeometry((uint64_t)&v37);
    long long v31 = v47;
    long long v32 = v48;
    long long v33 = v49;
    LODWORD(v34) = v50;
    long long v29 = v45;
    long long v30 = v46;
    *(void *)&v27[0] = v10;
    *((void *)&v27[0] + 1) = __PAIR64__(v12, v11);
    swift_bridgeObjectRetain();
    swift_retain();
    outlined retain of _ViewInputs((uint64_t)&v45);
    specialized UpdateFocusableViewResponder.init(inputs:outputs:item:geometry:responder:)(v15, v18, a3, (uint64_t)v26);
    long long v29 = v26[0];
    long long v30 = v26[1];
    long long v31 = v26[2];
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    _sSay7SwiftUI8KeyPressV7HandlerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder();
    LODWORD(v18) = Attribute.init<A>(body:value:flags:update:)();
    outlined release of UpdateFocusableViewResponder((uint64_t)v26);
    v27[2] = v47;
    v27[3] = v48;
    v27[4] = v49;
    int v28 = v50;
    v27[0] = v45;
    v27[1] = v46;
    outlined retain of _ViewInputs((uint64_t)&v45);
    UIKitHostedFocusItemLifecycle.init(inputs:responder:)((uint64_t *)v27, v18, (uint64_t)&v29);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle();
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v29);
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    LOBYTE(v29) = 0;
    uint64_t v21 = _ViewOutputs.subscript.setter();
    *(void *)&long long v29 = v24;
    DWORD2(v29) = v25;
    MEMORY[0x1F4188790](v21);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v13 = swift_bridgeObjectRelease();
    a5 = v23;
  }
  unint64_t v37 = v24;
  int v38 = v25;
  MEMORY[0x1F4188790](v13);
  outlined retain of [Text.Modifier]((uint64_t)&v24);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *a5 = v10;
  double result = COERCE_DOUBLE(__PAIR64__(v12, v11));
  a5[1] = __PAIR64__(v12, v11);
  return result;
}

void type metadata accessor for [KeyPress.Handler](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI8KeyPressV7HandlerVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of UIKitHostedFocusItemLifecycle(uint64_t a1)
{
  return a1;
}

uint64_t destroy for UIKitHostedFocusItemLifecycle()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.isFocused.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, a1, a2, a3, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, a1, a2, a3, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v10;
}

double IsFocusedEnvironmentChild.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *(void *)&long long v5 = *Value;
  *((void *)&v5 + 1) = v3;
  if ((*(unsigned char *)(AGGraphGetValue() + 8) & 8) != 0)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    AGGraphGetValue();
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>, (uint64_t)&type metadata for EnvironmentValues.IsFocusedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusedKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>, (uint64_t)&type metadata for EnvironmentValues.IsFocusedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusedKey);
    swift_retain_n();
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

uint64_t FocusInteractions.resolve(in:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *v2;
  if (!*v2)
  {
    unint64_t v6 = 32;
    goto LABEL_26;
  }
  if (v5)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1ED421E78, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1ED421E78, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey);
    swift_retain_n();
    if (v4)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (v15 == 1)
    {
      uint64_t v7 = unk_1ED422568;
      if ((unk_1ED422568 & ~qword_1ED422560) == 0) {
        uint64_t v7 = 0;
      }
      unint64_t v6 = v7 | qword_1ED422560;
      if ((v5 & 2) == 0) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
  }
  unint64_t v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_13:
    uint64_t v8 = unk_1ED422500;
    if ((unk_1ED422500 & ~qword_1ED4224F8) == 0) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = qword_1ED422508;
    if ((qword_1ED422508 & ~(v8 | qword_1ED4224F8)) == 0) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v8 | qword_1ED4224F8;
    if ((v10 & ~v6) == 0) {
      uint64_t v10 = 0;
    }
    v6 |= v10;
  }
LABEL_20:
  if ((v5 & 4) != 0)
  {
    uint64_t v11 = unk_1ED422538;
    if ((unk_1ED422538 & ~qword_1ED422530) == 0) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 | qword_1ED422530;
    if ((v12 & ~v6) == 0) {
      uint64_t v12 = 0;
    }
    v6 |= v12;
  }
LABEL_26:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
  swift_retain_n();
  if (v4)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  if ((v6 >> 2) & 1 | v16 & 1) {
    uint64_t v14 = v6;
  }
  else {
    uint64_t v14 = v6 | 4;
  }
  *a2 = v14;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle;
  if (!lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle);
  }
  return result;
}

uint64_t outlined release of UpdateFocusableViewResponder(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder;
  if (!lazy protocol witness table cache variable for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder);
  }
  return result;
}

uint64_t specialized UpdateFocusableViewResponder.init(inputs:outputs:item:geometry:responder:)@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  int v15 = _ViewOutputs.viewResponders()();
  swift_getKeyPath();
  int v13 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v10 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  uint64_t v4 = _ViewOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  int v5 = *MEMORY[0x1E4F4E7A0];
  if ((v4 & 0x100000000) == 0) {
    int v5 = v4;
  }
  int v11 = v5;
  swift_getKeyPath();
  swift_retain();
  int v6 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = a2;
  *(_DWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 12) = v13;
  *(_DWORD *)(a4 + 16) = v12;
  *(_DWORD *)(a4 + 20) = v10;
  *(_DWORD *)(a4 + 24) = v8;
  *(_DWORD *)(a4 + 28) = v11;
  *(_DWORD *)(a4 + 32) = v6;
  *(void *)(a4 + 40) = a3;
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdateViewGeometry and conformance UpdateViewGeometry()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateViewGeometry and conformance UpdateViewGeometry;
  if (!lazy protocol witness table cache variable for type UpdateViewGeometry and conformance UpdateViewGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateViewGeometry and conformance UpdateViewGeometry);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(255, a2, MEMORY[0x1E4FBB390], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild()
{
  unint64_t result = lazy protocol witness table cache variable for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild;
  if (!lazy protocol witness table cache variable for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild);
  }
  return result;
}

uint64_t type metadata accessor for FocusableViewResponder()
{
  uint64_t result = type metadata singleton initialization cache for FocusableViewResponder;
  if (!type metadata singleton initialization cache for FocusableViewResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t FocusableViewResponder.init(inputs:)()
{
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 224) = MEMORY[0x1E4FBC860];
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_WORD *)(v0 + 296) = 257;
  swift_retain();
  ContentResponderHelper.init()();
  *(void *)(v0 + 408) = 0;
  *(_WORD *)(v0 + 416) = 1;
  *(void *)(v0 + 424) = 0;
  *(_WORD *)(v0 + 432) = 256;
  *(void *)(v0 + 440) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t outlined destroy of UpdateViewFocusItem(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type UpdateViewFocusItem and conformance UpdateViewFocusItem()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateViewFocusItem and conformance UpdateViewFocusItem;
  if (!lazy protocol witness table cache variable for type UpdateViewFocusItem and conformance UpdateViewFocusItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateViewFocusItem and conformance UpdateViewFocusItem);
  }
  return result;
}

uint64_t UpdateViewFocusItem.init(modifier:options:inputs:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0]();
  swift_weakInit();
  swift_release();
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)a3 = a1;
  *(_DWORD *)(a3 + 4) = a2;
  *(_DWORD *)(a3 + 8) = _ViewInputs.viewPhase.getter();
  swift_getKeyPath();
  int v4 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(a3 + 12) = v4;
  swift_getKeyPath();
  int v5 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedOptions and conformance ResolvedOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedOptions and conformance ResolvedOptions;
  if (!lazy protocol witness table cache variable for type ResolvedOptions and conformance ResolvedOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedOptions and conformance ResolvedOptions);
  }
  return result;
}

uint64_t type metadata accessor for KeyPress.Handler(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for KeyPress.Handler);
}

uint64_t type metadata accessor for UIApplicationDelegateAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MergePlatformItemsView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t View.labelStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  int v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LabelStyleWritingModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

void UIHostingController.safeAreaRegions.setter(uint64_t a1)
{
  id v2 = (id)specialized UIHostingController.host.getter();
  _UIHostingView.safeAreaRegions.setter(a1);
}

uint64_t _UIHostingView.safeAreaRegions.setter(uint64_t a1)
{
  uint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8));
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return _UIHostingView.safeAreaRegionsDidChange(from:)(v4);
}

uint64_t _UIHostingView.safeAreaRegionsDidChange(from:)(uint64_t a1)
{
  uint64_t result = _UIHostingView.safeAreaRegions.getter();
  if (result != a1)
  {
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

void closure #1 in _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(double *a1, double *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v11 = a1[1];
  double v13 = *a2;
  double v12 = a2[1];
  swift_beginAccess();
  uint64_t v14 = (void *)MEMORY[0x18C119DF0](a3 + 16);
  if (v14)
  {
    int v15 = v14;
    id v16 = objc_msgSend(v14, sel_traitCollection);
    objc_msgSend(v16, sel_displayScale);
    double v18 = v17;

    if (v18 < 1.0) {
      double v19 = 1.0;
    }
    else {
      double v19 = 1.0 / v18;
    }
    uint64_t v20 = *MEMORY[0x1E4FBBEA0];
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
    v21(v9, v20, v6);
    double v28 = v11;
    double v29 = v10;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v19);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v19);
    double v22 = v28;
    double v23 = v29;
    unint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v9, v6);
    v21(v9, v20, v6);
    double v28 = v12;
    double v29 = v13;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v19);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v19);
    double v25 = v28;
    double v26 = v29;
    v24(v9, v6);
    if (v23 != v26 || v22 != v25) {
      objc_msgSend(v15, sel_invalidateIntrinsicContentSize);
    }
  }
}

double @objc _UIHostingView.sizeThatFits(_:)(void *a1, double a2, double a3)
{
  id v5 = a1;
  *(void *)&double v6 = *(_OWORD *)&_UIHostingView.sizeThatFits(_:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));

  return v6;
}

CGSize __swiftcall _UIHostingView.sizeThatFits(_:)(CGSize a1)
{
  _UIHostingView.base.getter();
  double v1 = specialized UIHostingViewBase._layoutSizeThatFits(_:fixedAxes:)();
  double v3 = v2;
  swift_release();
  double v4 = v1;
  double v5 = v3;
  result.height = v5;
  result.width = v4;
  return result;
}

void @objc _UIHostingView.safeAreaInsetsDidChange()(void *a1)
{
  id v1 = a1;
  _UIHostingView.safeAreaInsetsDidChange()();
}

Swift::Void __swiftcall _UIHostingView._safeAreaInsetsDidChange()()
{
  if (_UIHostingView.safeAreaRegions.getter() || (static Semantics.v7.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0)) {
    _UIHostingView.viewController.getter();
  }
}

void UIHostingController.updateWindowSceneSizeRestrictions()()
{
  specialized UIHostingController.host.getter();
  uint64_t v1 = _UIHostingView.sceneBridge.getter();
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v0, sel_viewIfLoaded);
  if (v3
    && (double v4 = v3, v5 = objc_msgSend(v3, sel_window), v4, v5)
    && (id v21 = objc_msgSend(v5, sel_windowScene), v5, v21))
  {
    id v6 = objc_msgSend(v21, sel_sizeRestrictions);
    if (v6)
    {
      uint64_t v7 = *(void *)(v2 + 144);
      uint64_t v8 = *(void *)(v2 + 136);
      uint64_t v9 = *(void *)(v2 + 152);
      uint64_t v20 = v6;
      if ((*(unsigned char *)(v2 + 161) & 1) == 0)
      {
        MEMORY[0x1F4188790](v6);
        type metadata accessor for CGSize(0);
        static Update.ensure<A>(_:)();
        objc_msgSend((id)specialized UIHostingController.host.getter(), sel_safeAreaInsets);
        v30.value.height = v27;
        v30.value.width = v27 + v19;
        v30.is_nil = v26;
        v31.is_nil = LOBYTE(v30.value.width);
        SceneBridge.updateWindowSizeRestrictions(min:max:)(v30, v31);

        *(void *)(v2 + 136) = 1;
        *(void *)(v2 + 144) = 0;
        *(void *)(v2 + 152) = 0;
        *(unsigned char *)(v2 + 160) = 0;
        *(unsigned char *)(v2 + 161) = 1;
        swift_release();
        return;
      }
      if (!(v9 | v7 | v8) && !*(unsigned char *)(v2 + 160) || *(unsigned char *)(v2 + 160) || v8 != 1 || v9 | v7)
      {
        BOOL v26 = 0;
        double v27 = 0.0;
        char v10 = 1;
        char v28 = 1;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        char v25 = 1;
        UIHostingController.sizingOptions.getter(&v22);
        uint64_t v11 = v22 & 4;
        uint64_t v12 = UIHostingController.sizingOptions.getter(&v22);
        if (v11 | v22 & 8)
        {
          MEMORY[0x1F4188790](v12);
          static Update.ensure<A>(_:)();
          double v13 = (void *)v26;
          uint64_t v14 = *(void *)&v27;
          char v15 = v28;
          uint64_t v16 = v23;
          uint64_t v17 = v24;
          char v10 = v25;
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v16 = 0;
          uint64_t v14 = 0;
          double v13 = 0;
          char v15 = 1;
        }
        specialized static SceneBridge.applySizes(min:max:toRestrictions:)(v13, v14, v15, v16, v17, v10, v20);
        swift_release();

        return;
      }
      swift_release();

      double v18 = v20;
    }
    else
    {
      swift_release();
      double v18 = v21;
    }
  }
  else
  {
    swift_release();
  }
}

uint64_t _UIHostingView.sceneBridge.getter()
{
  return swift_weakLoadStrong();
}

Swift::Void __swiftcall UIHostingController._viewSafeAreaDidChange()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)specialized UIHostingController.toolbarBridge.getter();
  if (v2)
  {
    id v3 = v2;
    ToolbarBridge.safeAreaDidChange<A>(hostingController:)(v1);
  }

  UIHostingController.updateWindowSceneSizeRestrictions()();
}

void ToolbarBridge.safeAreaDidChange<A>(hostingController:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_transitionCoordinator);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_viewControllerForKey_, *MEMORY[0x1E4FB30B8]);
    if (v3)
    {
      double v4 = v3;
      self;
      uint64_t v5 = swift_dynamicCastObjCClass();
      if (!v5) {
    }
      }
    else
    {
      uint64_t v5 = 0;
    }
    id v6 = objc_msgSend(v2, sel_viewControllerForKey_, *MEMORY[0x1E4FB30C8]);
    if (v6)
    {
      uint64_t v7 = v6;
      self;
      uint64_t v8 = swift_dynamicCastObjCClass();
      if (!v8) {

      }
      if (v8 | v5) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (v5)
      {
LABEL_10:
        uint64_t v9 = Toolbar.PlatformVended.uiSafeAreaTransitionState.getter();
        uint64_t v10 = *(void *)(v9 + 16);
        BOOL v11 = __OFADD__(v10, 1);
        uint64_t v12 = v10 + 1;
        if (v11)
        {
          __break(1u);
        }
        else
        {
          *(void *)(v9 + 16) = v12;
          v14[4] = partial apply for closure #1 in ToolbarBridge.safeAreaDidChange<A>(hostingController:);
          v14[5] = v9;
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 1107296256;
          void v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
          v14[3] = &block_descriptor_113;
          double v13 = _Block_copy(v14);
          swift_retain();
          swift_release();
          objc_msgSend(v2, sel_animateAlongsideTransition_completion_, 0, v13);
          _Block_release(v13);
          swift_unknownObjectRelease();
          swift_release();
        }
        return;
      }
    }
    swift_unknownObjectRelease();
  }
}

double @objc _UIHostingView._baselineOffsets(at:)(void *a1, double a2, double a3)
{
  id v5 = a1;
  double v6 = _UIHostingView._baselineOffsets(at:)(UIHostingViewBase._baselineOffsets(at:), a2, a3);

  return v6;
}

double @objc _UIHostingView._layoutSizeThatFits(_:fixedAxes:)(void *a1, double a2, double a3)
{
  id v5 = a1;
  double v6 = _UIHostingView._baselineOffsets(at:)((double (*)(double, double))specialized UIHostingViewBase._layoutSizeThatFits(_:fixedAxes:), a2, a3);

  return v6;
}

double _UIHostingView._baselineOffsets(at:)(double (*a1)(double, double), double a2, double a3)
{
  _UIHostingView.base.getter();
  double v6 = a1(a2, a3);
  swift_release();
  return v6;
}

double UIHostingViewBase._baselineOffsets(at:)(double a1, double a2)
{
  if (!MEMORY[0x18C119DF0](v2 + 24)) {
    return 2.22507386e-308;
  }
  if (a1 == 0.0 && a2 == 0.0)
  {
    swift_getObjectType();
    static _ProposedSize.unspecified.getter();
    ViewRendererHost.sizeThatFits(_:)();
  }
  swift_getObjectType();
  static VerticalAlignment.firstTextBaseline.getter();
  double v5 = COERCE_DOUBLE(ViewRendererHost.explicitAlignment(of:at:)());
  char v7 = v6;
  static VerticalAlignment.lastTextBaseline.getter();
  ViewRendererHost.explicitAlignment(of:at:)();
  if (v7) {
    double v8 = 2.22507386e-308;
  }
  else {
    double v8 = v5;
  }
  swift_unknownObjectRelease();
  return v8;
}

double ScrollViewDisplayListFrame.value.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)&v34);
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    char v9 = v34;
    if (v34)
    {
      static Edge.Set.horizontal.getter();
      if ((v9 & 2) == 0) {
        goto LABEL_8;
      }
    }
    else if ((v34 & 2) == 0)
    {
      goto LABEL_8;
    }
    static Edge.Set.vertical.getter();
    goto LABEL_8;
  }
  static Edge.Set.all.getter();
LABEL_8:
  unint64_t v32 = HIDWORD(a3);
  outlined destroy of ScrollViewConfiguration((uint64_t)&v34);
  EdgeInsets.in(_:)();
  AGGraphGetValue();
  EdgeInsets.adding(_:)();
  uint64_t v10 = (long long *)AGGraphGetValue();
  long long v11 = v10[1];
  long long v34 = *v10;
  long long v35 = v11;
  MEMORY[0x18C114450]();
  CGSize.outset(by:)();
  uint64_t v13 = v12;
  double v15 = v14;
  double v16 = *(double *)AGGraphGetValue();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBBEA0], v4);
  *(void *)&long long v34 = v13;
  double v33 = v15;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v16);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v16);
  double v17 = *(double *)&v34;
  double v18 = v33;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for CGSize(0);
  double v19 = (double *)AGGraphGetValue();
  double v20 = v17 + *v19;
  double v21 = v18 + v19[1];
  long long v34 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  long long v34 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  EdgeInsets.negatedInsets.getter();
  CGPoint.offset(by:)();
  double v23 = v22;
  double v25 = v24;
  BOOL v26 = (double *)AGGraphGetValue();
  double v27 = v23 + *v26;
  double v28 = v25 + v26[1];
  double v29 = (double *)AGGraphGetValue();
  double v30 = v28 - v29[1];
  *(double *)&long long v34 = v27 - *v29;
  *((double *)&v34 + 1) = v30;
  *(double *)&long long v35 = v20;
  *((double *)&v35 + 1) = v21;
  AGGraphGetValue();
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)();
  return *(double *)&v34;
}

double @objc UIHostingContentView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(void *a1, double a2, double a3, float a4, float a5)
{
  id v9 = a1;
  UIHostingContentView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(a2, a3, a4, a5);
  double v11 = v10;

  return v11;
}

void UIHostingContentView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(double a1, double a2, float a3, float a4)
{
  char v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = *MEMORY[0x1E4FBC8C8] & *v4;
  _ProposedSize.init(width:height:)();
  if (a3 == 1000.0) {
    _ProposedSize.width.setter();
  }
  if (a4 == 1000.0) {
    _ProposedSize.height.setter();
  }
  uint64_t v9 = v25;
  char v10 = v26;
  uint64_t v11 = v27;
  char v12 = v28;
  *(void *)&long long v19 = v25;
  BYTE8(v19) = v26;
  *(void *)&long long v20 = v27;
  BYTE8(v20) = v28;
  UIHostingContentView.setupSizeInvalidationHandler(_:)((uint64_t *)&v19);
  uint64_t v21 = v9;
  char v22 = v10;
  uint64_t v23 = v11;
  char v24 = v12;
  long long v13 = *(_OWORD *)(v8 + 1616);
  long long v19 = *(_OWORD *)(v8 + 1600);
  long long v20 = v13;
  type metadata accessor for UIHostingContentView();
  swift_getWitnessTable();
  ViewRendererHost.sizeThatFits(_:)();
  double v16 = UIHostingContentView.roundSize(_:)(v14, v15);
  double v17 = (char *)v4 + *(void *)((*v7 & *v4) + 0x6A8);
  *(double *)double v17 = v16;
  *((void *)v17 + 1) = v18;
  v17[16] = 0;
}

uint64_t UIHostingContentView.setupSizeInvalidationHandler(_:)(uint64_t *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = v3;
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  uint64_t v7 = a1[2];
  char v8 = *((unsigned char *)a1 + 24);
  uint64_t v9 = (char *)v1 + *(void *)(v3 + 0x6A0);
  if ((v9[25] & 1) == 0)
  {
    char v10 = v9[24];
    uint64_t v11 = *((void *)v9 + 2);
    long long v20 = *(_OWORD *)v9;
    uint64_t v21 = v11;
    char v22 = v10;
    char v23 = 0;
    uint64_t v16 = v5;
    char v17 = v6;
    uint64_t v18 = v7;
    char v19 = v8;
    uint64_t result = MEMORY[0x18C10E0D0](&v20, &v16);
    if (result) {
      return result;
    }
    uint64_t v3 = *v2 & *v1;
  }
  long long v13 = (char *)v1 + *(void *)(v3 + 1696);
  *(void *)long long v13 = v5;
  *((void *)v13 + 1) = v6;
  *((void *)v13 + 2) = v7;
  unsigned char v13[24] = v8;
  v13[25] = 0;
  specialized _UIHostingView.viewGraph.getter();
  *(void *)&long long v20 = v5;
  BYTE8(v20) = v6;
  uint64_t v21 = v7;
  char v22 = v8;
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = *(void *)(v4 + 1600);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v4 + 1608);
  *(void *)(v15 + 40) = *(void *)(v4 + 1624);
  *(void *)(v15 + 48) = v14;
  swift_beginAccess();
  type metadata accessor for LabelStyleWritingModifier<SidebarLabelStyle>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E4F40688], MEMORY[0x1E4F40F80]);
  swift_retain();
  ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
  swift_endAccess();
  swift_release();
  return swift_release();
}

void type metadata accessor for LabelStyleWritingModifier<SidebarLabelStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for LabelStyleWritingModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for LabelStyleWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarLabelStyle and conformance SidebarLabelStyle;
  if (!lazy protocol witness table cache variable for type SidebarLabelStyle and conformance SidebarLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarLabelStyle and conformance SidebarLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle;
  if (!lazy protocol witness table cache variable for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle;
  if (!lazy protocol witness table cache variable for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InsetListLabelStyle and conformance InsetListLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type InsetListLabelStyle and conformance InsetListLabelStyle;
  if (!lazy protocol witness table cache variable for type InsetListLabelStyle and conformance InsetListLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetListLabelStyle and conformance InsetListLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WrappingLabelStyle and conformance WrappingLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type WrappingLabelStyle and conformance WrappingLabelStyle;
  if (!lazy protocol witness table cache variable for type WrappingLabelStyle and conformance WrappingLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WrappingLabelStyle and conformance WrappingLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FallbackLabelStyle and conformance FallbackLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type FallbackLabelStyle and conformance FallbackLabelStyle;
  if (!lazy protocol witness table cache variable for type FallbackLabelStyle and conformance FallbackLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FallbackLabelStyle and conformance FallbackLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ListLabelStyle and conformance ListLabelStyle;
  if (!lazy protocol witness table cache variable for type ListLabelStyle and conformance ListLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabelStyle and conformance ListLabelStyle);
  }
  return result;
}

void partial apply for closure #1 in HostingScrollView.bounds.didset()
{
  closure #1 in HostingScrollView.bounds.didset(*(char **)(v0 + 16), *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

void closure #1 in HostingScrollView.bounds.didset(char *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  v23.receiver = a1;
  v23.super_class = (Class)type metadata accessor for HostingScrollView();
  objc_msgSendSuper2(&v23, sel_bounds);
  double v11 = v10;
  double v13 = v12;
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  v26.origin.x = v11;
  v26.origin.y = v13;
  v26.size.width = v15;
  v26.size.height = v17;
  if (!CGRectEqualToRect(v24, v26))
  {
    uint64_t v18 = (uint64_t *)&a1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
    uint64_t v19 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
    if (v19)
    {
      uint64_t v20 = v18[1];
      *uint64_t v18 = 0;
      v18[1] = 0;
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
      HostingScrollView.updateAnimationTarget(_:)(v19);
      if (objc_msgSend(a1, sel_isScrollAnimating))
      {
        uint64_t v21 = *v18;
        *uint64_t v18 = v19;
        v18[1] = v20;
      }
      else
      {
        uint64_t v21 = v19;
      }
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
    }
  }
  if (v11 != a2 || v13 != a3) {
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  }
  v25.origin.x = a2;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  v27.origin.x = v11;
  v27.origin.y = v13;
  v27.size.width = v15;
  v27.size.height = v17;
  ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)(v25, v27);
}

void @objc HostingScrollView.PlatformContainer.frame.setter(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, const char **a7, SEL *a8)
{
  v16.receiver = a1;
  v16.super_class = (Class)swift_getObjectType();
  double v14 = *a7;
  id v15 = v16.receiver;
  objc_msgSendSuper2(&v16, v14, a2, a3, a4, a5);
  HostingScrollView.PlatformContainer.frame.didset(a8);
}

void HostingScrollView.PlatformContainer.frame.didset(SEL *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v4 = *(void **)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView];
  uint64_t v5 = (objc_class *)type metadata accessor for HostingScrollView();
  v43.receiver = v4;
  v43.super_class = v5;
  [(SEL *)&v43 frame];
  double v7 = v6;
  double v9 = v8;
  v42.receiver = v1;
  v42.super_class = ObjectType;
  objc_msgSendSuper2(&v42, *a1);
  if (v7 != v11 || v9 != v10)
  {
    v41.receiver = v1;
    v41.super_class = ObjectType;
    objc_msgSendSuper2(&v41, *a1);
    double v14 = v13;
    double v16 = v15;
    v40.receiver = v4;
    v40.super_class = v5;
    [(SEL *)&v40 frame];
    double v18 = v17;
    double v20 = v19;
    v39.receiver = v4;
    v39.super_class = v5;
    [(SEL *)&v39 frame];
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    v38.receiver = v4;
    v38.super_class = v5;
    -[SEL setFrame:](&v38, sel_setFrame_, v18, v20, v14, v16);
    v37.receiver = v4;
    v37.super_class = v5;
    [(SEL *)&v37 bounds];
    CGFloat v26 = v25;
    CGFloat v28 = v27;
    v36.receiver = v4;
    v36.super_class = v5;
    [(SEL *)&v36 bounds];
    CGFloat v30 = v29;
    CGFloat v32 = v31;
    v35.receiver = v4;
    v35.super_class = v5;
    [(SEL *)&v35 frame];
    v45.size.width = v33;
    v45.size.height = v34;
    v44.origin.x = v26;
    v44.origin.y = v28;
    v44.size.width = v22;
    v44.size.height = v24;
    v45.origin.x = v30;
    v45.origin.y = v32;
    ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)(v44, v45);
  }
}

Swift::Void __swiftcall ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)(__C::CGRect oldBounds, __C::CGRect newBounds)
{
  uint64_t v3 = v2;
  CGFloat height = newBounds.size.height;
  CGFloat width = newBounds.size.width;
  double y = newBounds.origin.y;
  double x = newBounds.origin.x;
  CGFloat v8 = oldBounds.size.height;
  CGFloat v9 = oldBounds.size.width;
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  double v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  LODWORD(v13) = *(_DWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  BOOL v16 = __OFADD__(v13, 1);
  int v17 = v13 + 1;
  if (v16)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  *(_DWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v17;
  double v18 = (void *)MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView, v12);
  if (!v18)
  {
LABEL_5:
    int v20 = *(_DWORD *)(v3 + v15);
    BOOL v16 = __OFSUB__(v20, 1);
    int v21 = v20 - 1;
    if (!v16)
    {
      *(_DWORD *)(v3 + v15) = v21;
      if (!v21 && *(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
      {
        ScrollViewHelper.updateGraphState(isPreferred:)(0);
      }
      return;
    }
    goto LABEL_48;
  }
  double v19 = v18;
  if (objc_msgSend(v18, sel_isTracking))
  {

    goto LABEL_5;
  }
  long long v48 = v19;
  v51[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastEnvironment);
  EnvironmentValues.pixelLength.getter();
  double v23 = v22;
  uint64_t v24 = *MEMORY[0x1E4FBBEA0];
  double v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v25(v14, v24, v10);
  *(CGFloat *)uint64_t v51 = v9;
  v49[0] = v8;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, v23);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, v23);
  double v26 = *(double *)v51;
  double v27 = v49[0];
  CGFloat v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  v28(v14, v10);
  v25(v14, v24, v10);
  *(CGFloat *)uint64_t v51 = width;
  v49[0] = height;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, v23);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, v23);
  double v29 = *(double *)v51;
  double v30 = v49[0];
  v28(v14, v10);
  BOOL v31 = v27 == v30 && v26 == v29;
  if (!v31) {
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  }
  if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options) & 1) == 0
    || !*(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes))
  {
    uint64_t v54 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    memset(v51, 0, sizeof(v51));
    CGFloat v34 = v48;
    goto LABEL_26;
  }
  int v32 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase);
  uint64_t v33 = v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
  swift_beginAccess();
  outlined init with copy of ResolvedScrollBehavior?(v33 + 8, (uint64_t)v51);
  CGFloat v34 = v48;
  if (!*((void *)&v51[1] + 1))
  {
LABEL_26:
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v51);
    goto LABEL_27;
  }
  outlined destroy of ResolvedScrollBehavior?((uint64_t)v51);
  if (v32 == 3 || *(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_hasScrollPosition) != 1)
  {
    if (v26 == 0.0)
    {
      if (!v31 && v27 != 0.0) {
        goto LABEL_33;
      }
    }
    else if (!v31)
    {
LABEL_33:
      uint64_t v37 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags);
      if ((v37 & 1) == 0) {
        *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags) = v37 | 1;
      }
      memset(v49, 0, sizeof(v49));
      __int16 v50 = 2;
      if (v32 == 3
        && (uint64_t v38 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState,
            objc_super v39 = (_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState),
            *(_WORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState + 32) != 2))
      {
        uint64_t v41 = *((void *)v39 + 3);
        long long v40 = *(_OWORD *)((char *)v39 + 8);
        __int16 v42 = *(_WORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState + 32) & 1;
        int v43 = HIBYTE(*(unsigned __int16 *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState + 32)) & 1;
      }
      else
      {
        objc_super v39 = v51;
        specialized getter of defaultTargetOffsetState #1 in ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)((uint64_t)v49, v32 == 3, (uint64_t)v51, x, y);
        long long v40 = *(_OWORD *)((char *)v51 + 8);
        uint64_t v41 = *((void *)&v51[1] + 1);
        __int16 v42 = v52;
        int v43 = BYTE1(v52);
        uint64_t v38 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState;
      }
      if (v43) {
        __int16 v44 = 256;
      }
      else {
        __int16 v44 = 0;
      }
      uint64_t v45 = v3 + v38;
      *(void *)uint64_t v45 = *(void *)v39;
      *(_OWORD *)(v45 + 8) = v40;
      *(void *)(v45 + 24) = v41;
      *(_WORD *)(v45 + 32) = v44 | v42;
      *(unsigned char *)(v45 + 33) = 1;
      LODWORD(v45) = *(_DWORD *)(v3 + v15);
      BOOL v16 = __OFSUB__(v45, 1);
      int v46 = v45 - 1;
      if (v16) {
        goto LABEL_50;
      }
      *(_DWORD *)(v3 + v15) = v46;
      if (!v46 && *(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2) {
        ScrollViewHelper.updateGraphState(isPreferred:)(0);
      }
      objc_msgSend(v34, sel_setNeedsLayout);

      return;
    }
  }
LABEL_27:

  int v35 = *(_DWORD *)(v3 + v15);
  BOOL v16 = __OFSUB__(v35, 1);
  int v36 = v35 - 1;
  if (v16)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return;
  }
  *(_DWORD *)(v3 + v15) = v36;
  if (!v36 && *(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2) {
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  }
}

Swift::Void __swiftcall _UIHostingView.updateSafeArea()()
{
  id v1 = v0;
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x558);
  uint64_t v3 = swift_retain();
  v4._rawuint64_t Value = (void *)v2(v3);
  Swift::Bool v5 = ViewGraph.setSafeAreaInsets(_:)(v4);
  swift_release();
  swift_bridgeObjectRelease();
  if (v5)
  {
    objc_msgSend(v1, sel_invalidateIntrinsicContentSize);
  }
}

uint64_t CellHostingView.hostSafeAreaElements.getter()
{
  static Semantics.v4.getter();
  char v0 = isLinkedOnOrAfter(_:)();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  if ((v0 & 1) == 0)
  {
    uint64_t v2 = _UIHostingView.hostSafeAreaElements.getter();
    int64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
      uint64_t v4 = 0;
      unint64_t v5 = *(void *)(v1 + 16);
      uint64_t v6 = 40 * v5;
      do
      {
        uint64_t v7 = *(void *)(v2 + v4 + 32);
        uint64_t v8 = *(void *)(v2 + v4 + 48);
        uint64_t v9 = *(void *)(v2 + v4 + 64);
        unint64_t v10 = *(void *)(v1 + 24);
        unint64_t v11 = v5 + 1;
        if (v5 >= v10 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v5 + 1, 1);
        }
        *(void *)(v1 + 16) = v11;
        double v12 = (void *)(v1 + v6 + v4);
        v12[4] = v7;
        v12[5] = 0;
        v12[6] = v8;
        v12[7] = 0;
        v12[8] = v9;
        v4 += 40;
        unint64_t v5 = v11;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

double specialized UIHostingViewBase._layoutSizeThatFits(_:fixedAxes:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x1F4188790](v1);
  unint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!MEMORY[0x18C119DF0](v0 + 24, v3)) {
    return 0.0;
  }
  _ProposedSize.init(width:height:)();
  double v6 = v21;
  char v7 = v22;
  uint64_t v8 = v23;
  char v9 = v24;
  swift_getObjectType();
  double v21 = v6;
  LOBYTE(v22) = v7;
  uint64_t v23 = v8;
  char v24 = v9;
  ViewRendererHost.sizeThatFits(_:)();
  double v11 = v10;
  uint64_t v13 = v12;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E4FBBEA8], v1);
  GraphHost.environment.getter();
  double v19 = v21;
  uint64_t v20 = v22;
  EnvironmentValues.pixelLength.getter();
  double v15 = v14;
  swift_release();
  swift_release();
  v18[1] = v13;
  double v19 = v11;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v15);
  swift_unknownObjectRelease();
  double v16 = v19;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v16;
}

double PlatformListViewBase<>.hostSizeThatFits(width:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 56))(a1, a2, v6);
  if (!v9) {
    return *MEMORY[0x1E4F1DB30];
  }
  double v10 = (void *)v9;
  _ProposedSize.init(width:height:)();
  double v22 = v26;
  LOBYTE(v23) = v27;
  uint64_t v24 = v28;
  char v25 = v29;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  void v21[2] = v11;
  v21[3] = AssociatedConformanceWitness;
  swift_getWitnessTable();
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  ViewRendererHost.sizeThatFits(_:)();
  double v14 = v13;
  uint64_t v16 = v15;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FBBEA8], v4);
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  double v22 = v26;
  uint64_t v23 = v27;
  EnvironmentValues.pixelLength.getter();
  double v18 = v17;
  swift_release();
  swift_release();
  double v22 = v14;
  v21[1] = v16;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, v18);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, v18);

  double v19 = v22;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v19;
}

void *protocol witness for PlatformListViewBase.host.getter in conformance ListCollectionViewCellBase<A>()
{
  uint64_t v0 = (void *)specialized ListCollectionViewCellBase.host.getter();
  id v1 = v0;
  return v0;
}

uint64_t specialized ListCollectionViewCellBase.host.getter()
{
  return *(void *)(v0 + direct field offset for ListCollectionViewCellBase.host);
}

double UIHostingContentView.roundSize(_:)(double a1, double a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v5 + 104))(v8, *MEMORY[0x1E4FBBEA8], v4, v6);
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  double v14 = v16;
  uint64_t v15 = v17;
  EnvironmentValues.pixelLength.getter();
  double v10 = v9;
  swift_release();
  swift_release();
  *(double *)&v13[1] = a2;
  double v14 = a1;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, v10);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, v10);
  double v11 = v14;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v11;
}

char *_UIHostingView._hostSafeAreaElements.getter()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  uint64_t v76 = v82;
  EnvironmentValues.pixelLength.getter();
  double v7 = v6;
  objc_msgSend(v0, sel_safeAreaInsets);
  uint64_t v80 = v9;
  uint64_t v81 = v8;
  uint64_t v78 = v11;
  double v79 = v10;
  uint64_t v12 = *MEMORY[0x1E4FBBEA0];
  double v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v13(v5, v12, v2);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v7);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v7);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v7);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v7);
  double v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  static EdgeInsets.zero.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  double v20 = v19;
  uint64_t v22 = v21;
  if (_UIHostingView.safeAreaRegions.getter())
  {
    uint64_t v18 = v80;
    uint64_t v16 = v81;
    uint64_t v22 = v78;
    double v74 = v79;
  }
  else
  {
    double v74 = v20;
  }
  char v23 = _UIHostingView.safeAreaRegions.getter();
  double v24 = 0.0;
  uint64_t v75 = v22;
  if ((v23 & 2) != 0)
  {
    char v25 = (double *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98));
    if (((_BYTE)v25[4] & 1) == 0)
    {
      double v26 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8));
      if (v26)
      {
        uint64_t v27 = v18;
        uint64_t v28 = v16;
        double v30 = v25[2];
        double v29 = v25[3];
        double v31 = *v25;
        double v32 = v25[1];
        id v33 = v26;
        id v34 = objc_msgSend(v1, sel_window);
        if (v34)
        {
          id v73 = v34;
          if (v30 <= 0.0 || v29 <= 0.0)
          {
          }
          else
          {
            id v72 = v33;
            lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
            if (static UserDefaultKeyedFeature.isEnabled.getter()) {
              id v35 = v73;
            }
            else {
              id v35 = objc_msgSend(v72, sel_coordinateSpace);
            }
            objc_msgSend(v1, sel_convertRect_fromCoordinateSpace_, v35, v31, v32, v30, v29);
            CGFloat v37 = v36;
            CGFloat v39 = v38;
            CGFloat v41 = v40;
            CGFloat v43 = v42;
            objc_msgSend(v1, sel_bounds);
            double MaxY = CGRectGetMaxY(v83);
            v84.origin.double x = v37;
            v84.origin.double y = v39;
            v84.size.CGFloat width = v41;
            v84.size.CGFloat height = v43;
            double MinY = CGRectGetMinY(v84);
            swift_unknownObjectRelease();

            double v24 = MaxY - MinY;
          }
        }
        else
        {
        }
        uint64_t v16 = v28;
        uint64_t v18 = v27;
      }
    }
  }
  static EdgeInsets.zero.getter();
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  double v51 = v50;
  uint64_t v53 = v52;
  if ((_UIHostingView.safeAreaRegions.getter() & 2) != 0)
  {
    double v54 = v24 - v79;
    v13(v5, v12, v2);
    double v77 = v54;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v7);
    v14(v5, v2);
    EdgeInsets.init(_:edges:)();
    uint64_t v47 = v55;
    uint64_t v49 = v56;
    double v51 = v57;
    uint64_t v53 = v58;
  }
  if (v51 >= 0.0)
  {
    uint64_t v59 = 2;
    uint64_t v60 = 1;
    uint64_t v61 = v16;
    uint64_t v62 = v18;
    double v24 = v74;
    uint64_t v63 = v75;
  }
  else
  {
    uint64_t v59 = 1;
    double v51 = -v51;
    uint64_t v60 = 3;
    uint64_t v61 = v47;
    uint64_t v47 = v16;
    uint64_t v62 = v49;
    uint64_t v49 = v18;
    uint64_t v63 = v53;
    uint64_t v53 = v75;
  }
  if (EdgeInsets.isEmpty.getter())
  {
    int v64 = (char *)MEMORY[0x1E4FBC860];
  }
  else
  {
    int v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v66 = *((void *)v64 + 2);
    unint64_t v65 = *((void *)v64 + 3);
    if (v66 >= v65 >> 1) {
      int v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v64);
    }
    *((void *)v64 + 2) = v66 + 1;
    int v67 = &v64[40 * v66];
    *((void *)v67 + 4) = v60;
    *((void *)v67 + 5) = v61;
    *((void *)v67 + 6) = v62;
    *((double *)v67 + 7) = v24;
    *((void *)v67 + 8) = v63;
  }
  if ((EdgeInsets.isEmpty.getter() & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v64 + 2) + 1, 1, v64);
    }
    unint64_t v69 = *((void *)v64 + 2);
    unint64_t v68 = *((void *)v64 + 3);
    if (v69 >= v68 >> 1) {
      int v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v64);
    }
    *((void *)v64 + 2) = v69 + 1;
    int v70 = &v64[40 * v69];
    *((void *)v70 + 4) = v59;
    *((void *)v70 + 5) = v47;
    *((void *)v70 + 6) = v49;
    *((double *)v70 + 7) = v51;
    *((void *)v70 + 8) = v53;
  }
  swift_release();
  swift_release();
  return v64;
}

uint64_t specialized FloatingPoint.round(_:toMultipleOf:)(uint64_t a1, double a2)
{
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  if (a2 != 1.0)
  {
    double v14 = *v2 / a2;
    *uint64_t v2 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - v10, a1, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v11, v5);
    if (result == *MEMORY[0x1E4FBBEA0])
    {
      double v15 = round(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE98])
    {
      double v15 = rint(v14);
    }
    else if (result == *MEMORY[0x1E4FBBEA8])
    {
      double v15 = ceil(v14);
    }
    else if (result == *MEMORY[0x1E4FBBEB0])
    {
      double v15 = floor(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE88])
    {
      double v15 = trunc(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE90])
    {
      double v15 = ceil(v14);
      double v17 = floor(v14);
      if (v14 < 0.0) {
        double v15 = v17;
      }
    }
    else
    {
      Double._roundSlowPath(_:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      double v15 = *v2;
    }
    double v13 = v15 * a2;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v13 = round(*v2);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v13 = rint(*v2);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBEA8])
    {
      double v16 = *v2;
    }
    else
    {
      if (result == *MEMORY[0x1E4FBBEB0])
      {
        double v13 = floor(*v2);
        goto LABEL_33;
      }
      if (result == *MEMORY[0x1E4FBBE88])
      {
        double v13 = trunc(*v2);
        goto LABEL_33;
      }
      if (result != *MEMORY[0x1E4FBBE90])
      {
        Double._roundSlowPath(_:)();
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
      double v16 = *v2;
      if ((*(void *)v2 & 0x8000000000000000) != 0)
      {
        double v13 = floor(v16);
        goto LABEL_33;
      }
    }
    double v13 = ceil(v16);
  }
LABEL_33:
  *uint64_t v2 = v13;
  return result;
}

{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;

  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  if (a2 != 1.0)
  {
    double v14 = *v2 / a2;
    *uint64_t v2 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
    if (result == *MEMORY[0x1E4FBBEA0])
    {
      double v15 = round(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE98])
    {
      double v15 = rint(v14);
    }
    else if (result == *MEMORY[0x1E4FBBEA8])
    {
      double v15 = ceil(v14);
    }
    else if (result == *MEMORY[0x1E4FBBEB0])
    {
      double v15 = floor(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE88])
    {
      double v15 = trunc(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE90])
    {
      double v15 = ceil(v14);
      double v17 = floor(v14);
      if (v14 < 0.0) {
        double v15 = v17;
      }
    }
    else
    {
      Double._roundSlowPath(_:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      double v15 = *v2;
    }
    double v13 = v15 * a2;
    goto LABEL_34;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - v10, a1, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v11, v5);
  if (result != *MEMORY[0x1E4FBBEA0])
  {
    if (result == *MEMORY[0x1E4FBBE98])
    {
      double v13 = rint(*v2);
      goto LABEL_34;
    }
    if (result == *MEMORY[0x1E4FBBEA8])
    {
      double v16 = *v2;
LABEL_12:
      double v13 = ceil(v16);
      goto LABEL_34;
    }
    if (result == *MEMORY[0x1E4FBBEB0])
    {
      double v16 = *v2;
    }
    else
    {
      if (result == *MEMORY[0x1E4FBBE88])
      {
        double v13 = trunc(*v2);
        goto LABEL_34;
      }
      if (result != *MEMORY[0x1E4FBBE90])
      {
        Double._roundSlowPath(_:)();
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      }
      double v16 = *v2;
      if ((*(void *)v2 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
    }
    double v13 = floor(v16);
    goto LABEL_34;
  }
  double v13 = round(*v2);
LABEL_34:
  *uint64_t v2 = v13;
  return result;
}

{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;

  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  if (a2 != 1.0)
  {
    double v14 = *v2 / a2;
    *uint64_t v2 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - v10, a1, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v11, v5);
    if (result == *MEMORY[0x1E4FBBEA0])
    {
      double v15 = round(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE98])
    {
      double v15 = rint(v14);
    }
    else if (result == *MEMORY[0x1E4FBBEA8])
    {
      double v15 = ceil(v14);
    }
    else if (result == *MEMORY[0x1E4FBBEB0])
    {
      double v15 = floor(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE88])
    {
      double v15 = trunc(v14);
    }
    else if (result == *MEMORY[0x1E4FBBE90])
    {
      double v15 = ceil(v14);
      double v17 = floor(v14);
      if (v14 < 0.0) {
        double v15 = v17;
      }
    }
    else
    {
      Double._roundSlowPath(_:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      double v15 = *v2;
    }
    double v13 = v15 * a2;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v13 = round(*v2);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v13 = rint(*v2);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBEA8])
    {
      double v16 = *v2;
    }
    else
    {
      if (result == *MEMORY[0x1E4FBBEB0])
      {
        double v13 = floor(*v2);
        goto LABEL_33;
      }
      if (result == *MEMORY[0x1E4FBBE88])
      {
        double v13 = trunc(*v2);
        goto LABEL_33;
      }
      if (result != *MEMORY[0x1E4FBBE90])
      {
        Double._roundSlowPath(_:)();
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
      double v16 = *v2;
      if ((*(void *)v2 & 0x8000000000000000) != 0)
      {
        double v13 = floor(v16);
        goto LABEL_33;
      }
    }
    double v13 = ceil(v16);
  }
LABEL_33:
  *uint64_t v2 = v13;
  return result;
}

uint64_t _UIHostingView.safeAreaRegions.getter()
{
  id v1 = (char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8);
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance PlatformItemNavigationSelectionStyleModifier@<X0>(void (**a1)(uint64_t a1)@<X8>)
{
  char v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in PlatformItemNavigationSelectionStyleModifier.body(content:);
  *(void *)(result + 24) = v4;
  *a1 = partial apply for closure #1 in View.transformPlatformItemSelectionBehavior(_:);
  a1[1] = (void (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

void @objc _UIHostingView._geometryChanged(_:forAncestor:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = a1;
  specialized _UIHostingView._geometryChanged(_:forAncestor:)();
}

uint64_t specialized _UIHostingView._geometryChanged(_:forAncestor:)()
{
  uint64_t v0 = _UIHostingView.base.getter();
  if (MEMORY[0x18C119DF0](v0 + 3))
  {
    if (*((unsigned char *)v0 + 241))
    {
      swift_getObjectType();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    else if ((v0[7] & 0x20) == 0)
    {
      static Log.internalError(_:)();
    }
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    return swift_release();
  }
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, void, void, void))
{
  v4[6] = *MEMORY[0x1E4F143B8];
  a3(v4, *(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  return AGGraphSetOutputValue();
}

{
  void v4[3];

  v4[2] = *MEMORY[0x1E4F143B8];
  a3(v4, *(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

double ScrollViewContentFrame.value.getter@<D0>(int a1@<W2>, _OWORD *a2@<X8>)
{
  AGGraphGetValue();
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v5 = Value[1];
  long long v13 = *Value;
  long long v14 = v5;
  MEMORY[0x18C114450]();
  CGSize.inset(by:)();
  if (*MEMORY[0x1E4F4E7A0] == a1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = (uint64_t *)AGGraphGetValue();
    uint64_t v6 = *v8;
    uint64_t v7 = v8[1];
    swift_retain();
  }
  v12[0] = v6;
  v12[1] = v7;
  uint64_t v9 = (char *)AGGraphGetValue();
  static ScrollViewUtilities.contentFrame(in:contentComputer:axes:)(v12, *v9, (uint64_t)&v13);
  swift_release();
  AGGraphGetValue();
  ViewFrame.round(toMultipleOf:)();
  long long v10 = v14;
  *a2 = v13;
  a2[1] = v10;
  double result = *(double *)&v15;
  a2[2] = v15;
  return result;
}

double static ScrollViewUtilities.contentFrame(in:contentComputer:axes:)@<D0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v9 = a1[1];
  _ProposedSize.init(_:)();
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    *(void *)&long long v10 = v14;
    BYTE8(v10) = v15;
    *(void *)&long long v11 = v16;
    BYTE8(v11) = v17;
    _ProposedSize.width.getter();
  }
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    *(void *)&long long v10 = v14;
    BYTE8(v10) = v15;
    *(void *)&long long v11 = v16;
    BYTE8(v11) = v17;
    _ProposedSize.height.getter();
  }
  _ProposedSize.init(width:height:)();
  if (a2)
  {
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = v9;
    }
    else
    {
      static LayoutComputer.defaultValue.getter();
      uint64_t v6 = v14;
      uint64_t v7 = v15;
    }
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    swift_retain();
    LayoutComputer.sizeThatFits(_:)();
    swift_release();
    Axis.Set.contains(_:)();
    Axis.Set.contains(_:)();
  }
  if ((Axis.Set.contains(_:)() & 1) == 0 || (Axis.Set.contains(_:)() & 1) == 0)
  {
    Axis.Set.contains(_:)();
    Axis.Set.contains(_:)();
  }
  ViewOrigin.init(_:)();
  ViewSize.init(_:proposal:)();
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v13;
  double result = *(double *)&v10;
  *(_OWORD *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 32) = v11;
  return result;
}

unsigned char *FlipForRTLFrame.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v5 = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  uint64_t v9 = v5[3];
  uint64_t v14 = *v5;
  double result = (unsigned char *)AGGraphGetValue();
  int v11 = *result;
  if (v11 != 2)
  {
    double result = (unsigned char *)AGGraphGetValue();
    if (((v11 & 1) == 0) != *result)
    {
      AGGraphGetValue();
      ViewFrame.round(toMultipleOf:)();
      double result = (unsigned char *)ViewOrigin.init()();
      uint64_t v3 = v12;
      uint64_t v4 = v13;
      uint64_t v6 = v14;
    }
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  return result;
}

uint64_t type metadata completion function for AccessibilityChildBehaviorBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RootEnvironmentModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance RefreshScopeModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *a1 = result;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

uint64_t (*specialized closure #1 in closure #1 in closure #1 in Attribute.init(value:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DialogSuppressionConfiguration.Key@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

ValueMetadata *type metadata accessor for SearchOverlayView()
{
  return &type metadata for SearchOverlayView;
}

uint64_t *assignWithTake for BorderlessButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  char v10 = *((unsigned char *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItemListFlagsSet()
{
  return &type metadata for PlatformItemListFlagsSet;
}

uint64_t partial apply for closure #2 in ContextMenuPreviewModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in ContextMenuPreviewModifier.body(content:)(*(void *)(v1 + 48), *(int **)(v1 + 56), *(double *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t partial apply for closure #1 in ContextMenuPreviewModifier.body(content:)()
{
  return closure #1 in ContextMenuPreviewModifier.body(content:)(v0[6], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t outlined consume of TabCustomizationID.Base()
{
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PositionedNavigationDestinationProcessor<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, _DWORD *, unsigned char *)@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PositionedNavigationDestination.Key@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static PositionedNavigationDestination.Key.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ToolbarForegroundStyleKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static EnvironmentValues.ToolbarForegroundStyleKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PlatformViewHost<A>.UnarySubtreeSequence()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeWithCopy for UpdateViewGeometry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  int v4 = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void closure #1 in _UIHostingView.HostViewGraph.modifyViewInputs(inputs:graph:)(void *a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_traitCollection);
  id v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

  UIUserInterfaceIdiom.idiom.getter((uint64_t)v4, (uint64_t)&v10);
  uint64_t v5 = v10;
  if (v10)
  {
    uint64_t v6 = &v11;
  }
  else
  {
    uint64_t v6 = &v13;
    id v7 = objc_msgSend(self, sel_currentDevice);
    id v8 = objc_msgSend(v7, sel_userInterfaceIdiom);

    UIUserInterfaceIdiom.idiom.getter((uint64_t)v8, (uint64_t)&v12);
    uint64_t v5 = v12;
  }
  uint64_t v9 = *v6;
  *a1 = v5;
  a1[1] = v9;
}

double UIUserInterfaceIdiom.idiom.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      AnyInterfaceIdiom.init<A>(_:)();
      double result = *(double *)&v4;
      *(_OWORD *)a2 = v4;
      break;
    default:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      break;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityTraitsModifier<A>.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t *outlined release of AnyShareConfiguration?(uint64_t *a1)
{
  return a1;
}

void specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, _DWORD *a2, void (*a3)(uint64_t *))
{
  v21[0] = a1;
  PreferenceValues.subscript.getter();
  if (*a2 != -1 && v20 != -1 && *a2 == v20)
  {
    outlined copy of AnyShareConfiguration?(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, (void (*)(void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  }
  else
  {
    *a2 = v20;
    outlined init with take of AnyShareConfiguration?((uint64_t)&v7, (uint64_t)v21);
    outlined copy of AnyShareConfiguration?(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, (void (*)(void))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    a3(v21);
    outlined release of AnyShareConfiguration?(v21);
    outlined release of AnyShareConfiguration?(v21);
  }
}

void outlined copy of AnyShareConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void), void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a9 != 1)
  {
    a14();
    a15(a6, a7, a8, a9);
    a15(a10, a11, a12, a13);
  }
}

uint64_t ShareConfigurationBridge.shareConfigurationDidChange(_:)(uint64_t a1)
{
  outlined init with take of AnyShareConfiguration?(a1, (uint64_t)&v4);
  outlined init with take of AnyShareConfiguration?(a1, (uint64_t)v5);
  if ((void)v6 == 1)
  {
    uint64_t result = MEMORY[0x18C119DF0](v3 + 16);
    if (result) {
      _UIHostingView.viewController.getter();
    }
  }
  else
  {
    long long v13 = v6;
    long long v14 = v7;
    uint64_t v15 = v8;
    long long v9 = v5[0];
    long long v10 = v5[1];
    long long v11 = v5[2];
    long long v12 = v5[3];
    uint64_t result = MEMORY[0x18C119DF0](v3 + 16);
    if (result) {
      _UIHostingView.viewController.getter();
    }
  }
  return result;
}

uint64_t outlined init with take of AnyShareConfiguration?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyShareConfiguration?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyShareConfiguration?()
{
  if (!lazy cache variable for type metadata for AnyShareConfiguration?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyShareConfiguration?);
    }
  }
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence);
    }
  }
}

uint64_t outlined init with copy of TextField<_TextFieldStyleLabel>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence);
    }
  }
}

void *partial apply for specialized closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(void *a1@<X8>)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(_OWORD **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  char v15 = *(unsigned char *)(v5 + 32);
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[3];

  uint64_t v5 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  _OWORD v14[2] = v5[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[3];

  uint64_t v5 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  _OWORD v14[2] = v5[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[3];

  uint64_t v5 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  _OWORD v14[2] = v5[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[3];

  uint64_t v5 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  _OWORD v14[2] = v5[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[3];

  uint64_t v5 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(uint64_t **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  _OWORD v14[2] = v5[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[2];
  char v15;

  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  char v15 = *(unsigned char *)(v5 + 32);
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[3];

  uint64_t v5 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void ***)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  _OWORD v14[2] = v5[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[2];
  char v15;

  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void ***)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  char v15 = *(unsigned char *)(v5 + 32);
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[2];
  char v15;

  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(long long **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  char v15 = *(unsigned char *)(v5 + 32);
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[2];
  char v15;

  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  char v15 = *(unsigned char *)(v5 + 32);
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[3];

  uint64_t v5 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  _OWORD v14[2] = v5[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[3];

  uint64_t v5 = *(_OWORD **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = v5[1];
  v14[0] = *v5;
  v14[1] = v12;
  _OWORD v14[2] = v5[2];
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  void *result;
  _OWORD v14[2];
  char v15;

  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  int v10 = *(_DWORD *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  long long v12 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v12;
  char v15 = *(unsigned char *)(v5 + 32);
  uint64_t result = specialized closure #4 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v14, v4, v6, v7, v8, v9, v10, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = (_OWORD *)v0[3];
  id v3 = (void **)v0[4];
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  char v7 = *(unsigned char *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  void *v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t *v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = v0[3];
  id v3 = (uint64_t *)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  void *v0;
  uint64_t v1;
  _OWORD *v2;
  void **v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = v0[3];
  id v3 = (void **)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  void *v0;
  uint64_t v1;
  _OWORD *v2;
  void **v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = v0[3];
  id v3 = (void **)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v6, v1, *v3);
}

{
  void *v0;
  uint64_t *v1;
  _OWORD *v2;
  void **v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = (uint64_t *)v0[3];
  id v3 = (void **)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  void *v0;
  uint64_t *v1;
  _OWORD *v2;
  void **v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = (uint64_t *)v0[3];
  id v3 = (void **)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v6, v1, *v3);
}

{
  void *v0;
  long long *v1;
  _OWORD *v2;
  void **v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = (long long *)v0[3];
  id v3 = (void **)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t *)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  long long v4;
  _OWORD v6[2];
  char v7;

  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  id v3 = (uint64_t *)v0[4];
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  char v7 = *(unsigned char *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  long long v4;
  _OWORD v6[2];
  char v7;

  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  id v3 = (void **)v0[4];
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  char v7 = *(unsigned char *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  void *v0;
  void **v1;
  _OWORD *v2;
  void **v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = (void **)v0[3];
  id v3 = (void **)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  long long v3;
  _OWORD v5[2];
  char v6;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void ***)(v0 + 24);
  id v3 = *(_OWORD *)(v2 + 16);
  v5[0] = *(_OWORD *)v2;
  v5[1] = v3;
  uint64_t v6 = *(unsigned char *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v5, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  long long v4;
  _OWORD v6[2];
  char v7;

  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  id v3 = (void **)v0[4];
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  char v7 = *(unsigned char *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  long long v4;
  _OWORD v6[2];
  char v7;

  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  id v3 = (void **)v0[4];
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  char v7 = *(unsigned char *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  void *v0;
  double *v1;
  uint64_t v2;
  void **v3;
  long long v4;
  _OWORD v6[2];
  char v7;

  uint64_t v2 = v0[2];
  uint64_t v1 = (double *)v0[3];
  id v3 = (void **)v0[4];
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  char v7 = *(unsigned char *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  void *v0;
  uint64_t v1;
  _OWORD *v2;
  char **v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = v0[3];
  id v3 = (char **)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  void *v0;
  uint64_t *v1;
  _OWORD *v2;
  void **v3;
  long long v4;
  _OWORD v6[3];

  uint64_t v2 = (_OWORD *)v0[2];
  uint64_t v1 = (uint64_t *)v0[3];
  id v3 = (void **)v0[4];
  long long v4 = v2[1];
  v6[0] = *v2;
  v6[1] = v4;
  _OWORD v6[2] = v2[2];
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  long long v4;
  _OWORD v6[2];
  char v7;

  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  id v3 = (void **)v0[4];
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  char v7 = *(unsigned char *)(v2 + 32);
  return specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t)v6, v1, *v3);
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()((uint64_t (*)(_OWORD *, uint64_t, void))specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

void *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  AGGraphClearUpdate();
  char v11 = *(unsigned char *)(a1 + 32);
  long long v12 = static RepresentableContextValues.current;
  uint64_t v13 = qword_1EB2E8DA0;
  uint64_t v14 = qword_1EB2E8DA8;
  long long v15 = *(_OWORD *)(a1 + 16);
  static RepresentableContextValues.current = *(_OWORD *)a1;
  *(_OWORD *)&qword_1EB2E8DA0 = v15;
  char v16 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, v14, v16);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, v14, v16);
  uint64_t v17 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  long long v18 = static RepresentableContextValues.current;
  uint64_t v19 = qword_1EB2E8DA0;
  uint64_t v20 = qword_1EB2E8DA8;
  static RepresentableContextValues.current = v12;
  qword_1EB2E8DA0 = v13;
  qword_1EB2E8DA8 = v14;
  char v21 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v16;
  outlined consume of RepresentableContextValues?(v18, *((uint64_t *)&v18 + 1), v19, v20, v21);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  AGGraphSetUpdate();
  return v17;
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = *(void *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 32);
  char v26 = v5;
  long long v6 = static RepresentableContextValues.current;
  uint64_t v8 = qword_1EB2E8DA0;
  uint64_t v7 = qword_1EB2E8DA8;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  uint64_t v30 = static RepresentableContextValues.current;
  *((void *)&static RepresentableContextValues.current + 1) = v29;
  qword_1EB2E8DA0 = v28;
  qword_1EB2E8DA8 = v27;
  char v9 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v5;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v8, v7, v9);
  outlined consume of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v8, v7, v9);
  long long v10 = a2[8];
  long long v11 = a2[6];
  long long v51 = a2[7];
  long long v52 = v10;
  long long v12 = a2[8];
  v53[0] = a2[9];
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)a2 + 153);
  long long v13 = a2[3];
  long long v14 = a2[5];
  long long v48 = a2[4];
  long long v49 = v14;
  long long v15 = a2[5];
  long long v50 = a2[6];
  long long v16 = a2[1];
  v45[0] = *a2;
  v45[1] = v16;
  long long v17 = a2[3];
  long long v19 = *a2;
  long long v18 = a2[1];
  long long v46 = a2[2];
  long long v47 = v17;
  long long v20 = a2[9];
  long long v43 = v12;
  v44[0] = v20;
  *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)a2 + 153);
  long long v39 = v48;
  long long v40 = v15;
  long long v41 = v11;
  long long v42 = v51;
  long long v35 = v19;
  long long v36 = v18;
  long long v37 = v46;
  long long v38 = v13;
  v33[0] = v30;
  v33[1] = v29;
  v33[2] = v28;
  v33[3] = v27;
  char v34 = v26;
  outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v45);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v28, v27, v26);
  CircularUIKitProgressView.updateUIView(_:context:)(a3, (uint64_t)v33);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v45);
  long long v21 = static RepresentableContextValues.current;
  uint64_t v22 = qword_1EB2E8DA0;
  uint64_t v23 = qword_1EB2E8DA8;
  static RepresentableContextValues.current = v6;
  qword_1EB2E8DA0 = v8;
  qword_1EB2E8DA8 = v7;
  char v24 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v9;
  outlined consume of RepresentableContextValues?(v21, *((uint64_t *)&v21 + 1), v22, v23, v24);
  return outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
}

uint64_t outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  return a1;
}

uint64_t outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
  return a1;
}

uint64_t closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  uint64_t v10 = qword_1EB2E8DA0;
  uint64_t v18 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v19 = static RepresentableContextValues.current;
  uint64_t v17 = qword_1EB2E8DA8;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v6;
  qword_1EB2E8DA0 = v7;
  qword_1EB2E8DA8 = v8;
  char v11 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v9;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  outlined copy of RepresentableContextValues?(v19, v18, v10, v17, v11);
  outlined consume of RepresentableContextValues?(v19, v18, v10, v17, v11);
  closure #1 in closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(a2, a3, a1, a4, a5);
  long long v12 = static RepresentableContextValues.current;
  uint64_t v13 = qword_1EB2E8DA0;
  uint64_t v14 = qword_1EB2E8DA8;
  *(void *)&static RepresentableContextValues.current = v19;
  *((void *)&static RepresentableContextValues.current + 1) = v18;
  qword_1EB2E8DA0 = v10;
  qword_1EB2E8DA8 = v17;
  char v15 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v11;
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  swift_release();
  swift_release();

  return outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
}

uint64_t outlined consume of RepresentableContextValues?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (result != 1)
  {
    swift_release();
    swift_release();
    return outlined consume of RepresentableContextValues.EnvironmentStorage(a3, a4, a5 & 1);
  }
  return result;
}

uint64_t outlined copy of RepresentableContextValues?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (result != 1)
  {
    swift_retain();
    swift_retain();
    return outlined copy of RepresentableContextValues.EnvironmentStorage(a3, a4, a5 & 1);
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 48))(a2, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a4);
}

void specialized closure #1 in PlatformViewChild.updateValue()(long long *a1)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  char v4 = v3;
  long long v6 = Value[1];
  long long v5 = Value[2];
  v144[0] = *Value;
  v144[1] = v6;
  v144[2] = v5;
  long long v7 = Value[6];
  long long v9 = Value[3];
  long long v8 = Value[4];
  v144[5] = Value[5];
  v144[6] = v7;
  v144[3] = v9;
  v144[4] = v8;
  long long v11 = Value[8];
  long long v10 = Value[9];
  long long v12 = *(_OWORD *)((char *)Value + 153);
  v144[7] = Value[7];
  *(_OWORD *)((char *)v145 + 9) = v12;
  v144[8] = v11;
  v145[0] = v10;
  memmove(&v134, Value, 0xA9uLL);
  uint64_t v13 = (unsigned int *)AGGraphGetValue();
  uint64_t v93 = v14;
  unsigned int v15 = *v13;
  long long v16 = (uint64_t *)AGGraphGetValue();
  id v91 = v17;
  uint64_t v18 = *v16;
  uint64_t v19 = v16[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v20 = AGGraphGetValue(),
        char v22 = v21,
        uint64_t v23 = *(void *)v20,
        int v24 = *(unsigned __int8 *)(v20 + 8),
        int v25 = *(_DWORD *)(v20 + 12),
        swift_retain(),
        v23 == 1))
  {
    LODWORD(v87) = 0;
    int v84 = 0;
    int v24 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    int v84 = v25;
    LODWORD(v87) = v22 & 1;
  }
  if (v15 >> 1 == *((_DWORD *)a1 + 22))
  {
    outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v144);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v106 = *(long long *)((char *)a1 + 56);
    outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v144);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((unsigned char *)a1 + 72) & 1) == 0)
    {
      char v26 = (void *)*((void *)a1 + 10);
      if (v26)
      {

        *((unsigned char *)a1 + 72) = 1;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v15 >> 1;
  }
  long long v106 = *(long long *)((char *)a1 + 56);
  LODWORD(v94) = v15;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    int v27 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    int v27 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v93 & 1) == 0) {
      int v27 = AGGraphCurrentAttributeWasModified();
    }
  }
  int v83 = v24;
  AGGraphClearUpdate();
  if (*((unsigned char *)a1 + 72) == 1) {
    *((unsigned char *)a1 + 72) = 0;
  }
  uint64_t v28 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v128 = v18;
  uint64_t v129 = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v29 = (void *)*((void *)a1 + 10);
  uint64_t v92 = v28;
  uint64_t v88 = v23;
  uint64_t v90 = v19;
  LODWORD(v89) = v15;
  if (v29)
  {
    LODWORD(v86) = v27;
    unsigned __int8 v30 = v91;
    if (v91)
    {
      swift_retain();
      double v31 = v29;
      swift_retain();
      char v32 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v32)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v86) = 1;
      }
    }
    else
    {
      long long v39 = v29;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence))
    {
      *(void *)&long long v106 = 0;
      WORD4(v106) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v129)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      unsigned __int8 v30 = v91;
    }
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    id v91 = (id)*((void *)&v106 + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if ((v93 | v30))
    {
      uint64_t v40 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v40, 0, v89);
      swift_release();
    }
    uint64_t v93 = v106;
    if (v87)
    {
      long long v41 = (char *)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x90);
      *(void *)long long v41 = v23;
      v41[8] = v83;
      *((_DWORD *)v41 + 3) = v84;
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    if (*((unsigned char *)a1 + 72))
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    uint64_t v130 = *((void *)a1 + 5);
    uint64_t v131 = v92;
    *(void *)&long long v132 = v93;
    *((void *)&v132 + 1) = v91;
    char v133 = 0;
    if (!v86)
    {
      swift_retain();
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v93, (uint64_t)v91, 0);
      swift_release();
      swift_release();
      long long v113 = v141;
      long long v114 = v142;
      v115[0] = v143[0];
      *(_OWORD *)((char *)v115 + 9) = *(_OWORD *)((char *)v143 + 9);
      long long v110 = v138;
      long long v111 = v139;
      long long v112 = v140;
      long long v106 = v134;
      long long v107 = v135;
      long long v108 = v136;
      long long v109 = v137;
      long long v42 = &v106;
LABEL_54:
      outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v42);
      return;
    }
    uint64_t v85 = v18;
    swift_retain();
    swift_retain();
    uint64_t v89 = 0;
LABEL_45:
    type metadata accessor for ViewGraph();
    uint64_t v57 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v58 = MEMORY[0x18C119DF0](v57);
    uint64_t v59 = swift_release();
    if (v58)
    {
      swift_getObjectType();
      uint64_t v59 = swift_conformsToProtocol2();
      if (v59) {
        uint64_t v60 = v58;
      }
      else {
        uint64_t v60 = 0;
      }
      if (!v60) {
        uint64_t v59 = swift_unknownObjectRelease();
      }
    }
    uint64_t v87 = v79;
    uint64_t v62 = *((void *)a1 + 5);
    uint64_t v61 = *((void *)a1 + 6);
    uint64_t v63 = *((void *)a1 + 7);
    char v64 = *((unsigned char *)a1 + 72);
    unint64_t v65 = (void *)*((void *)a1 + 10);
    int v66 = *((_DWORD *)a1 + 22);
    int v119 = *((_DWORD *)a1 + 8);
    uint64_t v67 = *((void *)a1 + 12);
    long long v68 = a1[1];
    v118[2] = *a1;
    v118[3] = v68;
    uint64_t v120 = v62;
    uint64_t v121 = v61;
    uint64_t v122 = v63;
    uint64_t v123 = *((void *)a1 + 8);
    char v124 = v64;
    long long v125 = v65;
    int v126 = v66;
    uint64_t v127 = v67;
    MEMORY[0x1F4188790](v59);
    uint64_t v86 = v69;
    v79[-6] = v69;
    v79[-5] = v70;
    v79[-4] = a1;
    v79[-3] = &v130;
    v79[-2] = &v134;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    swift_retain();
    swift_retain();
    id v71 = v65;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    id v72 = v125;
    swift_release();
    swift_release();
    swift_release();

    id v73 = (void *)*((void *)a1 + 10);
    if (v73)
    {
      char v74 = *((unsigned char *)a1 + 72);
      v117[7] = v141;
      v117[8] = v142;
      v118[0] = v143[0];
      *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)((char *)v143 + 9);
      v117[4] = v138;
      v117[5] = v139;
      v117[6] = v140;
      v117[0] = v134;
      v117[1] = v135;
      v117[2] = v136;
      v117[3] = v137;
      if ((v74 & 1) == 0)
      {
        long long v114 = v142;
        v115[0] = v143[0];
        *(_OWORD *)((char *)v115 + 9) = *(_OWORD *)((char *)v143 + 9);
        long long v110 = v138;
        long long v111 = v139;
        long long v112 = v140;
        long long v113 = v141;
        long long v106 = v134;
        long long v107 = v135;
        long long v108 = v136;
        long long v109 = v137;
        uint64_t v116 = v73;
        long long v102 = v142;
        long long v103 = v115[0];
        long long v104 = v115[1];
        uint64_t v105 = v73;
        long long v98 = v138;
        long long v99 = v139;
        long long v100 = v140;
        long long v101 = v141;
        long long v94 = v134;
        long long v95 = v135;
        long long v96 = v136;
        long long v97 = v137;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
        id v75 = v73;
        swift_retain();
        swift_retain();
        id v76 = v75;
        swift_retain();
        outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v117);
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined release of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v106);
        long long v77 = v132;
        char v78 = v133;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v77, *((uint64_t *)&v77 + 1), v78);
        swift_release();
        swift_release();
        long long v42 = v117;
        goto LABEL_54;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((unsigned char *)a1 + 72) & 1) == 0)
  {
    uint64_t v130 = *((void *)a1 + 5);
    uint64_t v131 = v28;
    long long v132 = v106;
    char v133 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    uint64_t v93 = v106;
    swift_retain_n();
    uint64_t v33 = swift_retain();
    uint64_t v34 = MEMORY[0x18C114EE0](v33) + 200;
    swift_beginAccess();
    uint64_t v35 = MEMORY[0x18C119DF0](v34);
    uint64_t v36 = swift_release();
    uint64_t v85 = v18;
    if (v35)
    {
      swift_getObjectType();
      uint64_t v36 = swift_conformsToProtocol2();
      if (v36) {
        uint64_t v37 = v35;
      }
      else {
        uint64_t v37 = 0;
      }
      long long v38 = (void *)*((void *)&v106 + 1);
      if (!v37)
      {
        uint64_t v36 = swift_unknownObjectRelease();
        uint64_t v37 = 0;
      }
    }
    else
    {
      long long v38 = (void *)*((void *)&v106 + 1);
      uint64_t v37 = 0;
    }
    uint64_t v86 = v37;
    uint64_t v87 = &v82;
    int v43 = *((_DWORD *)a1 + 8);
    uint64_t v45 = *((void *)a1 + 5);
    uint64_t v44 = *((void *)a1 + 6);
    uint64_t v46 = *((void *)a1 + 7);
    char v47 = *((unsigned char *)a1 + 72);
    id v91 = (id)*((void *)a1 + 10);
    int v48 = *((_DWORD *)a1 + 22);
    LODWORD(v108) = v43;
    uint64_t v49 = *((void *)a1 + 12);
    long long v50 = a1[1];
    long long v106 = *a1;
    long long v107 = v50;
    *((void *)&v108 + 1) = v45;
    *(void *)&long long v109 = v44;
    *((void *)&v109 + 1) = v46;
    *(void *)&long long v110 = *((void *)a1 + 8);
    BYTE8(v110) = v47;
    *(void *)&long long v111 = v91;
    DWORD2(v111) = v48;
    *(void *)&long long v112 = v49;
    MEMORY[0x1F4188790](v36);
    v79[2] = &v130;
    v79[3] = &v134;
    v79[4] = v52;
    v79[5] = v51;
    v79[6] = v93;
    v79[7] = v38;
    int v80 = v89;
    uint64_t v81 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    uint64_t v89 = v53;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    swift_retain();
    swift_retain();
    id v54 = v91;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v89 = 0;
    id v91 = v38;
    swift_release();
    swift_release();
    uint64_t v55 = (void *)v111;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v56 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v94;

    goto LABEL_45;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t *v11;
  char v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  void *v22;
  char v23;
  int v24;
  uint64_t OutputValue;
  uint64_t v26;
  char v27;
  objc_class *v28;
  char *v29;
  char *v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  char v36;
  void *v37;
  long long v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  uint64_t v60;
  long long v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  int v80;
  uint64_t v81;
  long long v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  id v91;
  id v92;
  id v93;
  id v94;
  long long v95;
  char v96;
  void *v97;
  void v98[8];
  int v99;
  long long *v100;
  void v101[2];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  objc_super v112;
  void *v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  long long v121;
  long long v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  id v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  long long v136;
  char v137;
  id v138;
  void *v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  char v145 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  long long v106 = v3;
  char v4 = *(void *)(Value + 8);
  long long v5 = *(unsigned char *)(Value + 16);
  long long v7 = *(void *)(Value + 24);
  long long v6 = *(void *)(Value + 32);
  long long v8 = *(void *)(Value + 40);
  long long v139 = *(void **)Value;
  long long v140 = v4;
  long long v141 = v5;
  long long v142 = v7;
  long long v143 = v6;
  uint64_t v144 = v8;
  long long v9 = (_DWORD *)AGGraphGetValue();
  long long v107 = v10;
  LODWORD(v110) = *v9;
  long long v11 = (uint64_t *)AGGraphGetValue();
  uint64_t v13 = v12;
  uint64_t v14 = *v11;
  long long v111 = v11[1];
  LODWORD(v11) = *((_DWORD *)a1 + 7);
  unsigned int v15 = *MEMORY[0x1E4F4E7A0];
  long long v108 = v14;
  if (v11 == v15)
  {
    LODWORD(v104) = 0;
    LODWORD(v103) = 0;
    LODWORD(v102) = 0;
    long long v109 = 0;
  }
  else
  {
    long long v16 = AGGraphGetValue();
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v16;
    LODWORD(v102) = *(unsigned __int8 *)(v16 + 8);
    LODWORD(v103) = *(_DWORD *)(v16 + 12);
    swift_retain();
    long long v109 = v19;
    if (v19 == 1)
    {
      LODWORD(v104) = 0;
      LODWORD(v103) = 0;
      LODWORD(v102) = 0;
      long long v109 = 0;
    }
    else
    {
      LODWORD(v104) = v18 & 1;
    }
    uint64_t v14 = v108;
  }
  uint64_t v20 = v110 >> 1;
  if (v110 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v121 = *(long long *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    char v21 = (void *)*((void *)a1 + 9);
    if (v21)
    {
      char v22 = (void *)*((void *)a1 + 10);
      if (v22)
      {

        *((void *)a1 + 9) = 0;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v20;
  }
  uint64_t v121 = *(long long *)((char *)a1 + 56);
  LODWORD(v113) = v110;
  uint64_t v23 = v13;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    int v24 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>();
    Outputuint64_t Value = AGGraphGetOutputValue();
    int v24 = 1;
    if (OutputValue && (v106 & 1) == 0 && (v107 & 1) == 0) {
      int v24 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v105) = v24;
  AGGraphClearUpdate();
  if (!*((void *)a1 + 9))
  {
    char v26 = v140;
    int v27 = v141;
    uint64_t v28 = (objc_class *)type metadata accessor for PlatformSwitchCoordinator();
    uint64_t v29 = (char *)objc_allocWithZone(v28);
    unsigned __int8 v30 = &v29[OBJC_IVAR____TtC7SwiftUIP33_1246D37251EA3A918B392E2B95F8B7EF25PlatformSwitchCoordinator__isOn];
    *(void *)unsigned __int8 v30 = v139;
    *((void *)v30 + 1) = v26;
    v30[16] = v27;
    v112.receiver = v29;
    v112.super_class = v28;
    swift_retain();
    swift_retain();
    double v31 = objc_msgSendSuper2(&v112, sel_init);
    char v32 = (void *)*((void *)a1 + 9);
    *((void *)a1 + 9) = v31;
  }
  uint64_t v33 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v132 = v14;
  char v133 = v111;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v34 = (void *)*((void *)a1 + 10);
  long long v106 = v33;
  if (v34)
  {
    if (v23)
    {
      swift_retain();
      uint64_t v35 = v34;
      swift_retain();
      uint64_t v36 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v36)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v105) = 1;
      }
    }
    else
    {
      uint64_t v45 = v34;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v121 = 0;
      WORD4(v121) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v133)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      uint64_t v33 = v106;
    }
    uint64_t v46 = v107 | v23;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    long long v107 = (id)*((void *)&v121 + 1);
    char v47 = v121;
    swift_retain();
    int v48 = v47;
    swift_retain();
    AGGraphClearUpdate();
    if (v46)
    {
      uint64_t v49 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v49, 0, v110);
      swift_release();
    }
    if (v104)
    {
      long long v50 = (char *)v34 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v34) + 0x90);
      *(void *)long long v50 = v109;
      v50[8] = v102;
      *((_DWORD *)v50 + 3) = v103;
      swift_retain();
      swift_release();
      objc_msgSend(v34, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v51 = (void *)*((void *)a1 + 9);
    if (!v51)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    uint64_t v52 = v51;

    long long v134 = *((void *)a1 + 5);
    long long v135 = v33;
    uint64_t v53 = v48;
    *(void *)&long long v136 = v48;
    *((void *)&v136 + 1) = v107;
    long long v137 = 0;
    long long v138 = v52;
    swift_retain();
    if (!v105)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v48, (uint64_t)v107, 0);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
LABEL_57:
      swift_release();
      return;
    }
    swift_retain();
    long long v110 = 0;
LABEL_48:
    type metadata accessor for ViewGraph();
    id v71 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    id v72 = MEMORY[0x18C119DF0](v71);
    id v73 = swift_release();
    long long v104 = v53;
    if (v72)
    {
      swift_getObjectType();
      id v73 = swift_conformsToProtocol2();
      if (v73) {
        char v74 = v72;
      }
      else {
        char v74 = 0;
      }
      if (!v74) {
        id v73 = swift_unknownObjectRelease();
      }
    }
    uint64_t v105 = v98;
    id v76 = *((void *)a1 + 5);
    id v75 = *((void *)a1 + 6);
    long long v77 = *((void *)a1 + 7);
    char v78 = (void *)*((void *)a1 + 9);
    double v79 = (void *)*((void *)a1 + 10);
    int v80 = *((_DWORD *)a1 + 22);
    uint64_t v123 = *((_DWORD *)a1 + 8);
    uint64_t v81 = *((void *)a1 + 12);
    uint64_t v82 = a1[1];
    uint64_t v121 = *a1;
    uint64_t v122 = v82;
    char v124 = v76;
    long long v125 = v75;
    int v126 = v77;
    uint64_t v127 = *((void *)a1 + 8);
    uint64_t v128 = v78;
    uint64_t v129 = v79;
    uint64_t v130 = v80;
    uint64_t v131 = v81;
    MEMORY[0x1F4188790](v73);
    long long v103 = v83;
    v98[-6] = v83;
    v98[-5] = v84;
    v98[-4] = a1;
    v98[-3] = &v134;
    v98[-2] = &v139;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>);
    swift_retain();
    swift_retain();
    uint64_t v85 = v78;
    uint64_t v86 = v79;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v87 = v128;
    uint64_t v88 = v129;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v89 = (void *)*((void *)a1 + 10);
    if (v89)
    {
      uint64_t v90 = (void *)*((void *)a1 + 9);
      if (v90)
      {
        long long v110 = v143;
        v101[0] = v140;
        v101[1] = v142;
        long long v102 = *((void *)a1 + 5);
        long long v113 = v139;
        long long v114 = v140;
        uint64_t v105 = v139;
        uint64_t v115 = v141;
        uint64_t v116 = v142;
        char v117 = v143;
        id v118 = v144;
        int v119 = v89;
        uint64_t v120 = v90;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>();
        swift_retain();
        swift_retain();
        id v91 = v90;
        uint64_t v92 = v89;
        swift_retain();
        swift_retain();
        uint64_t v93 = v91;
        long long v94 = v92;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        long long v95 = v136;
        long long v96 = v137;
        long long v97 = v138;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v95, *((uint64_t *)&v95 + 1), v96);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_57;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_60;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v37 = (void *)*((void *)a1 + 9);
  if (v37)
  {
    long long v38 = v121;
    long long v134 = *((void *)a1 + 5);
    long long v135 = v33;
    long long v136 = v121;
    long long v137 = 0;
    long long v138 = v37;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    long long v39 = MEMORY[0x18C114EE0](v37) + 200;
    swift_beginAccess();
    uint64_t v40 = MEMORY[0x18C119DF0](v39);
    long long v41 = swift_release();
    if (v40)
    {
      swift_getObjectType();
      long long v41 = swift_conformsToProtocol2();
      long long v42 = (void *)*((void *)&v38 + 1);
      int v43 = v38;
      if (v41) {
        uint64_t v44 = v40;
      }
      else {
        uint64_t v44 = 0;
      }
      if (v44) {
        goto LABEL_47;
      }
      long long v41 = swift_unknownObjectRelease();
    }
    else
    {
      long long v42 = (void *)*((void *)&v38 + 1);
      int v43 = v38;
    }
    uint64_t v44 = 0;
LABEL_47:
    long long v104 = v44;
    uint64_t v105 = v101;
    id v54 = *((_DWORD *)a1 + 8);
    uint64_t v56 = *((void *)a1 + 5);
    uint64_t v55 = *((void *)a1 + 6);
    uint64_t v57 = *((void *)a1 + 7);
    uint64_t v58 = (void *)*((void *)a1 + 9);
    long long v107 = (id)*((void *)a1 + 10);
    uint64_t v59 = *((_DWORD *)a1 + 22);
    uint64_t v123 = v54;
    uint64_t v60 = *((void *)a1 + 12);
    uint64_t v61 = a1[1];
    uint64_t v121 = *a1;
    uint64_t v122 = v61;
    char v124 = v56;
    long long v125 = v55;
    int v126 = v57;
    uint64_t v127 = *((void *)a1 + 8);
    uint64_t v128 = v58;
    uint64_t v129 = v107;
    uint64_t v130 = v59;
    uint64_t v131 = v60;
    MEMORY[0x1F4188790](v41);
    v98[2] = &v134;
    v98[3] = &v139;
    v98[4] = v63;
    v98[5] = v62;
    v98[6] = v43;
    v98[7] = v42;
    long long v99 = v110;
    long long v100 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>();
    long long v110 = v64;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>, MEMORY[0x1E4FBB718]);
    long long v103 = v65;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>);
    uint64_t v53 = v43;
    swift_retain();
    swift_retain();
    int v66 = v58;
    uint64_t v67 = v107;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    long long v110 = 0;
    long long v107 = v42;
    swift_release();
    swift_release();
    long long v68 = v128;
    uint64_t v69 = v129;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v70 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v113;

    goto LABEL_48;
  }
LABEL_61:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t Value;
  char v12;
  char v13;
  _DWORD *v14;
  unsigned char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  void *v27;
  void *v28;
  int v29;
  uint64_t OutputValue;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  uint64_t v60;
  long long v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  int v81;
  uint64_t v82;
  long long v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  unsigned char *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  id v98;
  long long v99;
  char v100;
  void *v101;
  unsigned char v102[4];
  int v103;
  uint64_t v104;
  unsigned char *v105;
  unsigned char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned char *v111;
  unsigned char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  long long v118;
  long long v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  long long v133;
  char v134;
  id v135;
  uint64_t v136;

  long long v136 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  long long v5 = &v102[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  long long v106 = &v102[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  long long v10 = &v102[-v9];
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(Value, (uint64_t)v10);
  uint64_t v14 = (_DWORD *)AGGraphGetValue();
  long long v112 = v15;
  LODWORD(v116) = *v14;
  long long v16 = (uint64_t *)AGGraphGetValue();
  long long v113 = v17;
  uint64_t v19 = *v16;
  uint64_t v18 = v16[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v20 = AGGraphGetValue(),
        char v22 = v21,
        uint64_t v23 = *(void *)v20,
        long long v103 = *(unsigned __int8 *)(v20 + 8),
        int v24 = *(_DWORD *)(v20 + 12),
        swift_retain(),
        v23 == 1))
  {
    LODWORD(v104) = 0;
    int v24 = 0;
    long long v103 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    LODWORD(v104) = v22 & 1;
  }
  int v25 = v116 >> 1;
  char v26 = v116 >> 1 == *((_DWORD *)a1 + 22);
  long long v114 = v18;
  uint64_t v105 = v5;
  if (v26)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    id v118 = *(long long *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    int v27 = (void *)*((void *)a1 + 9);
    if (v27)
    {
      uint64_t v28 = (void *)*((void *)a1 + 10);
      if (v28)
      {

        *((void *)a1 + 9) = 0;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v25;
    uint64_t v18 = v114;
  }
  id v118 = *(long long *)((char *)a1 + 56);
  LODWORD(v131) = v116;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v29 = 1;
  }
  else
  {
    Outputuint64_t Value = AGGraphGetOutputValue();
    uint64_t v29 = 1;
    if (OutputValue && (v13 & 1) == 0 && (v112 & 1) == 0) {
      uint64_t v29 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v109) = v29;
  AGGraphClearUpdate();
  if (!*((void *)a1 + 9))
  {
    double v31 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitSearchBarCoordinator(0)), sel_init);
    char v32 = (void *)*((void *)a1 + 9);
    *((void *)a1 + 9) = v31;
  }
  uint64_t v115 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v129 = v19;
  uint64_t v130 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v33 = (void *)*((void *)a1 + 10);
  long long v111 = v10;
  long long v107 = v3;
  long long v110 = v19;
  if (v33)
  {
    if (v113)
    {
      swift_retain();
      uint64_t v34 = v33;
      swift_retain();
      uint64_t v35 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v35)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v109) = 1;
      }
    }
    else
    {
      uint64_t v45 = v33;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.UnarySubtreeSequence))
    {
      *(void *)&id v118 = 0;
      WORD4(v118) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v130)
      {
        long long v108 = v23;
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        uint64_t v23 = v108;
        swift_release();
      }
      swift_release();
    }
    uint64_t v46 = v23;
    char v47 = v112 | v113;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    int v48 = *((void *)&v118 + 1);
    long long v39 = v118;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      uint64_t v49 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v49, 0, (int)v116);
      swift_release();
    }
    if (v104)
    {
      long long v50 = (char *)v33 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v33) + 0x90);
      *(void *)long long v50 = v46;
      v50[8] = v103;
      *((_DWORD *)v50 + 3) = v24;
      swift_retain();
      swift_release();
      objc_msgSend(v33, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v51 = (void *)*((void *)a1 + 9);
    if (!v51)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    uint64_t v52 = v51;

    uint64_t v131 = *((void *)a1 + 5);
    long long v132 = v115;
    *(void *)&char v133 = v39;
    *((void *)&v133 + 1) = v48;
    long long v134 = 0;
    long long v135 = v52;
    swift_retain();
    if (!v109)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v39, v48, 0);

      uint64_t v53 = (uint64_t)v111;
LABEL_56:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v53);
      return;
    }
    long long v113 = v48;
    long long v108 = v46;
    swift_retain();
    uint64_t v116 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    id v71 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    id v72 = MEMORY[0x18C119DF0](v71);
    id v73 = swift_release();
    long long v109 = v39;
    if (v72)
    {
      swift_getObjectType();
      id v73 = swift_conformsToProtocol2();
      if (v73) {
        char v74 = v72;
      }
      else {
        char v74 = 0;
      }
      id v75 = (uint64_t)v111;
      if (!v74) {
        id v73 = swift_unknownObjectRelease();
      }
    }
    else
    {
      id v75 = (uint64_t)v111;
    }
    long long v112 = v102;
    long long v77 = *((void *)a1 + 5);
    id v76 = *((void *)a1 + 6);
    char v78 = *((void *)a1 + 7);
    int v80 = (void *)*((void *)a1 + 9);
    double v79 = (void *)*((void *)a1 + 10);
    uint64_t v81 = *((_DWORD *)a1 + 22);
    uint64_t v120 = *((_DWORD *)a1 + 8);
    uint64_t v82 = *((void *)a1 + 12);
    int v83 = a1[1];
    id v118 = *a1;
    int v119 = v83;
    uint64_t v121 = v77;
    uint64_t v122 = v76;
    uint64_t v123 = v78;
    char v124 = *((void *)a1 + 8);
    long long v125 = v80;
    int v126 = v79;
    uint64_t v127 = v81;
    uint64_t v128 = v82;
    MEMORY[0x1F4188790](v73);
    long long v104 = v84;
    *(void *)&v102[-48] = v84;
    *(void *)&v102[-40] = v85;
    *(void *)&v102[-32] = a1;
    *(void *)&v102[-24] = &v131;
    *(void *)&v102[-16] = v75;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    swift_retain();
    swift_retain();
    uint64_t v86 = v80;
    uint64_t v87 = v79;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v88 = v125;
    uint64_t v89 = v126;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v90 = (void *)*((void *)a1 + 10);
    if (v90)
    {
      id v91 = (void *)*((void *)a1 + 9);
      uint64_t v53 = v75;
      uint64_t v92 = v106;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(v75, (uint64_t)v106);
      uint64_t v93 = v107;
      if (v91)
      {
        long long v94 = (uint64_t)v105;
        *(void *)&v105[*(int *)(v107 + 40)] = v91;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>((uint64_t)v92, v94);
        *(void *)(v94 + *(int *)(v93 + 36)) = v90;
        long long v95 = v90;
        swift_retain();
        swift_retain();
        long long v96 = v91;
        long long v97 = v95;
        swift_retain();
        long long v98 = v96;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v94, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
        long long v99 = v133;
        long long v100 = v134;
        long long v101 = v135;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v99, *((uint64_t *)&v99 + 1), v100);

        goto LABEL_56;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_59;
  }
  long long v108 = v23;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v36 = (void *)*((void *)a1 + 9);
  if (v36)
  {
    uint64_t v37 = *((void *)&v118 + 1);
    long long v38 = v118;
    uint64_t v131 = *((void *)a1 + 5);
    long long v132 = v115;
    char v133 = v118;
    long long v134 = 0;
    long long v135 = v36;
    type metadata accessor for ViewGraph();
    long long v113 = v37;
    long long v39 = v38;
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v40 = MEMORY[0x18C114EE0](v36) + 200;
    swift_beginAccess();
    long long v41 = MEMORY[0x18C119DF0](v40);
    long long v42 = swift_release();
    if (v41)
    {
      swift_getObjectType();
      long long v42 = swift_conformsToProtocol2();
      if (v42) {
        int v43 = v41;
      }
      else {
        int v43 = 0;
      }
      uint64_t v44 = (int)v116;
      if (!v43)
      {
        long long v42 = swift_unknownObjectRelease();
        int v43 = 0;
      }
    }
    else
    {
      int v43 = 0;
      uint64_t v44 = (int)v116;
    }
    long long v109 = v43;
    long long v112 = v102;
    id v54 = *((_DWORD *)a1 + 8);
    uint64_t v55 = *((void *)a1 + 5);
    uint64_t v56 = *((void *)a1 + 6);
    uint64_t v57 = *((void *)a1 + 7);
    uint64_t v58 = (void *)*((void *)a1 + 9);
    uint64_t v116 = (id)*((void *)a1 + 10);
    uint64_t v59 = *((_DWORD *)a1 + 22);
    uint64_t v120 = v54;
    uint64_t v60 = *((void *)a1 + 12);
    uint64_t v61 = a1[1];
    id v118 = *a1;
    int v119 = v61;
    uint64_t v121 = v55;
    uint64_t v122 = v56;
    uint64_t v123 = v57;
    char v124 = *((void *)a1 + 8);
    long long v125 = v58;
    int v126 = v116;
    uint64_t v127 = v59;
    uint64_t v128 = v60;
    MEMORY[0x1F4188790](v42);
    *(void *)&v102[-64] = &v131;
    *(void *)&v102[-56] = v10;
    *(void *)&v102[-48] = v63;
    *(void *)&v102[-40] = v62;
    char v64 = v113;
    *(void *)&v102[-32] = v39;
    *(void *)&v102[-24] = v64;
    *(_DWORD *)&v102[-16] = v44;
    *(void *)&v102[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
    long long v104 = v65;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    swift_retain();
    swift_retain();
    int v66 = v58;
    uint64_t v67 = v116;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v116 = 0;
    swift_release();
    swift_release();
    long long v68 = v125;
    uint64_t v69 = v126;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v70 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v117;

    goto LABEL_46;
  }
LABEL_60:
  __break(1u);
}

{
  id *Value;
  uint64_t v3;
  uint64_t v4;
  id v5;
  unsigned int *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  unsigned __int8 v25;
  int v26;
  uint64_t OutputValue;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  long long v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  int v68;
  uint64_t v69;
  long long v70;
  uint64_t *v71;
  uint64_t v72;
  id v73;
  void *v74;
  void *v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  id v80;
  long long v81;
  char v82;
  void v83[8];
  int v84;
  long long *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  uint64_t v100;
  id v101[4];
  long long v102;
  long long v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  long long v117;
  char v118;
  uint64_t v119;
  uint64_t v120;

  uint64_t v120 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  uint64_t Value = (id *)AGGraphGetValue();
  char v4 = v3;
  long long v5 = *Value;
  v101[0] = *Value;
  long long v6 = (unsigned int *)AGGraphGetValue();
  long long v8 = v7;
  long long v9 = *v6;
  long long v10 = (uint64_t *)AGGraphGetValue();
  long long v97 = v11;
  long long v12 = *v10;
  uint64_t v13 = v10[1];
  LODWORD(v10) = *((_DWORD *)a1 + 7);
  uint64_t v14 = *MEMORY[0x1E4F4E7A0];
  long long v96 = v4;
  if (v10 == v14
    || (unsigned int v15 = AGGraphGetValue(),
        uint64_t v17 = v16,
        uint64_t v18 = *(void *)v15,
        uint64_t v19 = *(_DWORD *)(v15 + 12),
        uint64_t v87 = *(unsigned __int8 *)(v15 + 8),
        LODWORD(v88) = v19,
        swift_retain(),
        v18 == 1))
  {
    uint64_t v20 = v8;
    LODWORD(v89) = 0;
    uint64_t v87 = 0;
    LODWORD(v88) = 0;
    char v21 = 0;
  }
  else
  {
    char v21 = v18;
    uint64_t v20 = v8;
    LODWORD(v89) = v17 & 1;
  }
  if (v9 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    char v22 = v5;
    swift_retain();
  }
  else
  {
    long long v102 = *(long long *)((char *)a1 + 56);
    swift_retain();
    uint64_t v23 = v5;
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if (*((void *)a1 + 9))
    {
      int v24 = (void *)*((void *)a1 + 10);
      if (v24)
      {

        swift_release();
        *((void *)a1 + 9) = 0;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v9 >> 1;
  }
  long long v102 = *(long long *)((char *)a1 + 56);
  LODWORD(v115) = v9;
  int v25 = v20;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    char v26 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
    Outputuint64_t Value = AGGraphGetOutputValue();
    char v26 = 1;
    if (OutputValue && (v96 & 1) == 0 && (v20 & 1) == 0) {
      char v26 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v92) = v26;
  LODWORD(v91) = v9;
  AGGraphClearUpdate();
  if (!*((void *)a1 + 9))
  {
    type metadata accessor for TabItemGroup.Coordinator();
    *((void *)a1 + 9) = swift_allocObject();
  }
  uint64_t v28 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v113 = v12;
  long long v114 = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v29 = (void *)*((void *)a1 + 10);
  uint64_t v93 = v13;
  long long v94 = v12;
  long long v96 = v28;
  uint64_t v90 = v21;
  if (v29)
  {
    unsigned __int8 v30 = v97;
    if (v97)
    {
      swift_retain();
      double v31 = v29;
      swift_retain();
      char v32 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v32)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v92) = 1;
      }
    }
    else
    {
      uint64_t v40 = v29;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.UnarySubtreeSequence))
    {
      *(void *)&long long v102 = 0;
      WORD4(v102) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v114)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      unsigned __int8 v30 = v97;
    }
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    long long v95 = (id)*((void *)&v102 + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    long long v97 = v102;
    if ((v25 | v30))
    {
      long long v41 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v41, 0, (int)v91, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478C48, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if (v89)
    {
      long long v42 = (char *)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x90);
      *(void *)long long v42 = v21;
      v42[8] = v87;
      *((_DWORD *)v42 + 3) = v88;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    int v43 = *((void *)a1 + 9);
    if (!v43)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    swift_retain();

    uint64_t v115 = *((void *)a1 + 5);
    uint64_t v116 = v96;
    *(void *)&char v117 = v97;
    *((void *)&v117 + 1) = v95;
    id v118 = 0;
    int v119 = v43;
    swift_retain();
    if (!v92)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v97, (uint64_t)v95, 0);
      swift_release();
      swift_release();
      swift_release();

      return;
    }
    swift_retain();
    uint64_t v92 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    uint64_t v59 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v60 = MEMORY[0x18C119DF0](v59);
    uint64_t v61 = swift_release();
    if (v60)
    {
      swift_getObjectType();
      uint64_t v61 = swift_conformsToProtocol2();
      if (v61) {
        uint64_t v62 = v60;
      }
      else {
        uint64_t v62 = 0;
      }
      if (!v62) {
        uint64_t v61 = swift_unknownObjectRelease();
      }
    }
    id v91 = v83;
    char v64 = *((void *)a1 + 5);
    uint64_t v63 = *((void *)a1 + 6);
    unint64_t v65 = *((void *)a1 + 7);
    int v66 = *((void *)a1 + 9);
    uint64_t v67 = (void *)*((void *)a1 + 10);
    long long v68 = *((_DWORD *)a1 + 22);
    long long v104 = *((_DWORD *)a1 + 8);
    uint64_t v69 = *((void *)a1 + 12);
    uint64_t v70 = a1[1];
    long long v102 = *a1;
    long long v103 = v70;
    uint64_t v105 = v64;
    long long v106 = v63;
    long long v107 = v65;
    long long v108 = *((void *)a1 + 8);
    long long v109 = v66;
    long long v110 = v67;
    long long v111 = v68;
    long long v112 = v69;
    MEMORY[0x1F4188790](v61);
    uint64_t v89 = v71;
    v83[-6] = v71;
    v83[-5] = v72;
    v83[-4] = a1;
    v83[-3] = &v115;
    v83[-2] = v101;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    swift_retain();
    swift_retain();
    swift_retain();
    id v73 = v67;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    char v74 = v110;
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    id v75 = (void *)*((void *)a1 + 10);
    if (v75)
    {
      id v76 = *((void *)a1 + 9);
      if (v76)
      {
        long long v77 = v101[0];
        long long v98 = v101[0];
        long long v99 = v75;
        long long v100 = v76;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
        char v78 = v75;
        swift_retain();
        swift_retain();
        swift_retain_n();
        double v79 = v78;
        swift_retain();
        int v80 = v77;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        swift_release();

        uint64_t v81 = v117;
        uint64_t v82 = v118;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v81, *((uint64_t *)&v81 + 1), v82);
        swift_release();

        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v33 = *((void *)a1 + 9);
  if (v33)
  {
    uint64_t v115 = *((void *)a1 + 5);
    uint64_t v116 = v28;
    char v117 = v102;
    id v118 = 0;
    int v119 = v33;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    long long v97 = v102;
    swift_retain_n();
    swift_retain();
    uint64_t v34 = swift_retain();
    uint64_t v35 = MEMORY[0x18C114EE0](v34) + 200;
    swift_beginAccess();
    uint64_t v36 = MEMORY[0x18C119DF0](v35);
    uint64_t v37 = swift_release();
    if (v36)
    {
      swift_getObjectType();
      uint64_t v37 = swift_conformsToProtocol2();
      long long v38 = (void *)*((void *)&v102 + 1);
      if (v37) {
        long long v39 = v36;
      }
      else {
        long long v39 = 0;
      }
      if (v39) {
        goto LABEL_45;
      }
      uint64_t v37 = swift_unknownObjectRelease();
    }
    else
    {
      long long v38 = (void *)*((void *)&v102 + 1);
    }
    long long v39 = 0;
LABEL_45:
    uint64_t v88 = v39;
    uint64_t v89 = &v86;
    uint64_t v44 = *((_DWORD *)a1 + 8);
    uint64_t v45 = *((void *)a1 + 5);
    uint64_t v46 = *((void *)a1 + 6);
    char v47 = *((void *)a1 + 7);
    int v48 = *((void *)a1 + 9);
    long long v95 = (id)*((void *)a1 + 10);
    uint64_t v49 = *((_DWORD *)a1 + 22);
    long long v104 = v44;
    long long v50 = *((void *)a1 + 12);
    uint64_t v51 = a1[1];
    long long v102 = *a1;
    long long v103 = v51;
    uint64_t v105 = v45;
    long long v106 = v46;
    long long v107 = v47;
    long long v108 = *((void *)a1 + 8);
    long long v109 = v48;
    long long v110 = v95;
    long long v111 = v49;
    long long v112 = v50;
    MEMORY[0x1F4188790](v37);
    v83[2] = &v115;
    v83[3] = v101;
    v83[4] = v53;
    v83[5] = v52;
    v83[6] = v97;
    v83[7] = v38;
    int v84 = (int)v91;
    uint64_t v85 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
    uint64_t v92 = v54;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, MEMORY[0x1E4FBB718]);
    id v91 = v55;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v56 = v95;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v92 = 0;
    long long v95 = v38;
    swift_release();
    swift_release();
    uint64_t v57 = v110;
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v58 = (void *)*((void *)a1 + 10);
    *((id *)a1 + 10) = v101[1];

    goto LABEL_46;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t OutputValue;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  objc_class *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  char v41;
  void *v42;
  long long v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  long long v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  long long v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  long long v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void v105[2];
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  objc_super v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  void *v128;
  long long v129;
  long long v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  long long v144;
  char v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;

  long long v154 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  long long v112 = v3;
  char v4 = Value[1];
  long long v6 = Value[2];
  long long v5 = Value[3];
  long long v8 = Value[4];
  long long v7 = Value[5];
  long long v9 = (void *)Value[6];
  char v147 = *Value;
  char v148 = v4;
  __int16 v149 = v6;
  long long v150 = v5;
  long long v151 = v8;
  long long v152 = v7;
  long long v153 = v9;
  long long v10 = (_DWORD *)AGGraphGetValue();
  long long v113 = v11;
  LODWORD(v117) = *v10;
  long long v12 = (uint64_t *)AGGraphGetValue();
  long long v114 = v13;
  uint64_t v14 = *v12;
  id v118 = v12[1];
  LODWORD(v12) = *((_DWORD *)a1 + 7);
  unsigned int v15 = *MEMORY[0x1E4F4E7A0];
  uint64_t v116 = v14;
  if (v12 == v15)
  {
    LODWORD(v110) = 0;
    LODWORD(v109) = 0;
    LODWORD(v108) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    long long v16 = AGGraphGetValue();
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v16;
    LODWORD(v108) = *(unsigned __int8 *)(v16 + 8);
    LODWORD(v109) = *(_DWORD *)(v16 + 12);
    swift_retain();
    uint64_t v115 = v19;
    if (v19 == 1)
    {
      LODWORD(v110) = 0;
      LODWORD(v109) = 0;
      LODWORD(v108) = 0;
      uint64_t v115 = 0;
    }
    else
    {
      LODWORD(v110) = v18 & 1;
    }
    uint64_t v14 = v116;
  }
  uint64_t v20 = v117 >> 1;
  if (v117 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    outlined copy of AppIntentExecutor?(v4);
    outlined copy of AppIntentExecutor?(v5);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v129 = *(long long *)((char *)a1 + 56);
    swift_retain();
    outlined copy of AppIntentExecutor?(v4);
    outlined copy of AppIntentExecutor?(v5);
    swift_retain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    char v21 = (void *)*((void *)a1 + 9);
    if (v21)
    {
      char v22 = (void *)*((void *)a1 + 10);
      if (v22)
      {

        *((void *)a1 + 9) = 0;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v20;
  }
  uint64_t v129 = *(long long *)((char *)a1 + 56);
  LODWORD(v120) = v117;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v23 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    Outputuint64_t Value = AGGraphGetOutputValue();
    uint64_t v23 = 1;
    if (OutputValue && (v112 & 1) == 0 && (v113 & 1) == 0) {
      uint64_t v23 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v112) = v23;
  int v25 = AGGraphClearUpdate();
  if (!*((void *)a1 + 9))
  {
    char v26 = v148;
    int v27 = v149;
    uint64_t v28 = v150;
    uint64_t v29 = v151;
    long long v111 = v25;
    unsigned __int8 v30 = v153;
    long long v106 = v153;
    long long v107 = v152;
    double v31 = (objc_class *)type metadata accessor for Coordinator();
    char v32 = (char *)objc_allocWithZone(v31);
    uint64_t v33 = &v32[OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration];
    *(void *)uint64_t v33 = v147;
    *((void *)v33 + 1) = v26;
    *((void *)v33 + 2) = v27;
    *((void *)v33 + 3) = v28;
    uint64_t v34 = v107;
    *((void *)v33 + 4) = v29;
    *((void *)v33 + 5) = v34;
    *((void *)v33 + 6) = v30;
    swift_retain();
    uint64_t v35 = v26;
    uint64_t v14 = v116;
    outlined copy of AppIntentExecutor?(v35);
    outlined copy of AppIntentExecutor?(v28);
    v119.receiver = v32;
    v119.super_class = v31;
    swift_retain();
    uint64_t v36 = objc_msgSendSuper2(&v119, sel_init);
    uint64_t v37 = (void *)*((void *)a1 + 9);
    *((void *)a1 + 9) = v36;
  }
  long long v38 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v140 = v14;
  long long v141 = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  long long v39 = (void *)*((void *)a1 + 10);
  long long v111 = v38;
  if (v39)
  {
    if (v114)
    {
      swift_retain();
      uint64_t v40 = v39;
      swift_retain();
      long long v41 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v41)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v112) = 1;
      }
    }
    else
    {
      char v64 = v39;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v129 = 0;
      WORD4(v129) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v141)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    unint64_t v65 = *((void *)&v129 + 1);
    uint64_t v60 = v129;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if ((v113 | v114))
    {
      int v66 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v66, 0, v117);
      swift_release();
    }
    if (v110)
    {
      uint64_t v67 = (char *)v39 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v39) + 0x90);
      *(void *)uint64_t v67 = v115;
      v67[8] = v108;
      *((_DWORD *)v67 + 3) = v109;
      swift_retain();
      swift_release();
      objc_msgSend(v39, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    long long v68 = (void *)*((void *)a1 + 9);
    if (!v68)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    uint64_t v69 = v68;

    long long v142 = *((void *)a1 + 5);
    long long v143 = v38;
    *(void *)&uint64_t v144 = v60;
    *((void *)&v144 + 1) = v65;
    char v145 = 0;
    uint64_t v146 = v69;
    swift_retain();
    if (!v112)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v60, v65, 0);

      swift_release();
      swift_release();
      long long v103 = v148;
      long long v104 = v150;
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v103);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v104);
      goto LABEL_56;
    }
    long long v112 = v65;
    swift_retain();
    char v117 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    uint64_t v70 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    id v71 = MEMORY[0x18C119DF0](v70);
    id v72 = swift_release();
    long long v114 = v60;
    if (v71)
    {
      swift_getObjectType();
      id v72 = swift_conformsToProtocol2();
      if (v72) {
        id v73 = v71;
      }
      else {
        id v73 = 0;
      }
      if (!v73) {
        id v72 = swift_unknownObjectRelease();
      }
    }
    long long v113 = v105;
    char v74 = *a1;
    uint64_t v130 = a1[1];
    id v75 = *((_DWORD *)a1 + 8);
    id v76 = *((void *)a1 + 5);
    long long v77 = *((void *)a1 + 6);
    char v78 = *((void *)a1 + 7);
    double v79 = (void *)*((void *)a1 + 9);
    int v80 = (void *)*((void *)a1 + 10);
    uint64_t v81 = *((_DWORD *)a1 + 22);
    uint64_t v82 = *((void *)a1 + 12);
    uint64_t v129 = v74;
    uint64_t v131 = v75;
    long long v132 = v76;
    char v133 = v77;
    long long v134 = v78;
    long long v135 = *((void *)a1 + 8);
    long long v136 = v79;
    long long v137 = v80;
    long long v138 = v81;
    long long v139 = v82;
    MEMORY[0x1F4188790](v72);
    long long v110 = v83;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    swift_retain();
    swift_retain();
    int v84 = v79;
    uint64_t v85 = v80;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v86 = v136;
    uint64_t v87 = v137;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v88 = (void *)*((void *)a1 + 10);
    if (v88)
    {
      uint64_t v89 = (void *)*((void *)a1 + 9);
      if (v89)
      {
        long long v113 = v153;
        uint64_t v90 = v150;
        id v91 = v151;
        uint64_t v92 = v148;
        v105[0] = *((void *)a1 + 12);
        long long v94 = (uint64_t)a1 + 40;
        uint64_t v93 = *((void *)a1 + 5);
        long long v107 = *(void *)(v94 + 8);
        long long v108 = v93;
        uint64_t v120 = v147;
        uint64_t v121 = v148;
        char v117 = v147;
        uint64_t v122 = v149;
        uint64_t v123 = v150;
        long long v109 = v150;
        char v124 = v151;
        long long v125 = v152;
        int v126 = v153;
        uint64_t v127 = v88;
        uint64_t v128 = v89;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
        long long v106 = v95;
        swift_retain();
        long long v96 = v88;
        swift_retain();
        swift_retain();
        long long v97 = v89;
        long long v98 = v96;
        swift_retain();
        outlined copy of AppIntentExecutor?(v92);
        v105[1] = v91;
        outlined copy of AppIntentExecutor?(v90);
        swift_retain();
        long long v99 = v97;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v92);
        long long v100 = v109;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v109);

        swift_release();
        long long v101 = v144;
        LOBYTE(v90) = v145;
        long long v102 = v146;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v101, *((uint64_t *)&v101 + 1), v90);

        swift_release();
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v92);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v100);
LABEL_56:
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_59;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  long long v42 = (void *)*((void *)a1 + 9);
  if (v42)
  {
    int v43 = v129;
    long long v142 = *((void *)a1 + 5);
    long long v143 = v38;
    uint64_t v144 = v129;
    char v145 = 0;
    uint64_t v146 = v42;
    type metadata accessor for ViewGraph();
    long long v112 = *((void *)&v43 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v44 = MEMORY[0x18C114EE0](v42) + 200;
    swift_beginAccess();
    uint64_t v45 = MEMORY[0x18C119DF0](v44);
    uint64_t v46 = swift_release();
    if (v45)
    {
      swift_getObjectType();
      uint64_t v46 = swift_conformsToProtocol2();
      if (v46) {
        char v47 = v45;
      }
      else {
        char v47 = 0;
      }
      if (v47) {
        goto LABEL_33;
      }
      uint64_t v46 = swift_unknownObjectRelease();
    }
    char v47 = 0;
LABEL_33:
    long long v110 = v47;
    long long v113 = v105;
    int v48 = a1[1];
    uint64_t v129 = *a1;
    long long v50 = *((void *)a1 + 5);
    uint64_t v49 = *((void *)a1 + 6);
    uint64_t v51 = *((void *)a1 + 7);
    uint64_t v52 = (void *)*((void *)a1 + 9);
    uint64_t v53 = (void *)*((void *)a1 + 10);
    id v54 = *((_DWORD *)a1 + 22);
    uint64_t v131 = *((_DWORD *)a1 + 8);
    uint64_t v55 = *((void *)a1 + 12);
    uint64_t v130 = v48;
    long long v132 = v50;
    char v133 = v49;
    long long v134 = v51;
    long long v135 = *((void *)a1 + 8);
    long long v136 = v52;
    long long v137 = v53;
    long long v138 = v54;
    long long v139 = v55;
    MEMORY[0x1F4188790](v46);
    long long v114 = v43;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    char v117 = v56;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitStepper>>, MEMORY[0x1E4FBB718]);
    long long v109 = v57;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    swift_retain();
    swift_retain();
    uint64_t v58 = v52;
    uint64_t v59 = v53;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    char v117 = 0;
    uint64_t v60 = v114;
    swift_release();
    swift_release();
    uint64_t v61 = v136;
    uint64_t v62 = v137;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v63 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v120;

    goto LABEL_46;
  }
LABEL_60:
  __break(1u);
}

{
  void *Value;
  char v3;
  char v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  int v41;
  uint64_t v42;
  long long v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  int v59;
  uint64_t v60;
  long long v61;
  uint64_t *v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  long long v69;
  void v70[8];
  unsigned int v71;
  long long *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void v84[4];
  long long v85;
  long long v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  long long v100;
  char v101;
  uint64_t v102;

  long long v102 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = (void *)AGGraphGetValue();
  char v4 = v3;
  v84[0] = *Value;
  long long v5 = (unsigned int *)AGGraphGetValue();
  char v78 = v6;
  long long v7 = *v5;
  long long v8 = (uint64_t *)AGGraphGetValue();
  double v79 = v9;
  long long v11 = *v8;
  long long v10 = v8[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (long long v12 = AGGraphGetValue(),
        uint64_t v14 = v13,
        unsigned int v15 = *(void *)v12,
        long long v16 = *(unsigned __int8 *)(v12 + 8),
        uint64_t v17 = *(_DWORD *)(v12 + 12),
        swift_retain(),
        v15 == 1))
  {
    LODWORD(v75) = 0;
    uint64_t v17 = 0;
    long long v16 = 0;
    unsigned int v15 = 0;
  }
  else
  {
    LODWORD(v75) = v14 & 1;
  }
  if (v7 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    uint64_t v85 = *(long long *)((char *)a1 + 56);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((unsigned char *)a1 + 72) & 1) == 0)
    {
      uint64_t v18 = (void *)*((void *)a1 + 10);
      if (v18)
      {

        *((unsigned char *)a1 + 72) = 1;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v7 >> 1;
  }
  LODWORD(v74) = v16;
  uint64_t v85 = *(long long *)((char *)a1 + 56);
  LODWORD(v98) = v7;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v19 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    uint64_t v19 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v78 & 1) == 0) {
      uint64_t v19 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  if (*((unsigned char *)a1 + 72) == 1) {
    *((unsigned char *)a1 + 72) = 0;
  }
  uint64_t v20 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v96 = v11;
  long long v97 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v21 = (void *)*((void *)a1 + 10);
  long long v77 = v11;
  uint64_t v81 = v10;
  int v80 = v20;
  id v76 = v15;
  if (v21)
  {
    if (v79)
    {
      swift_retain();
      char v22 = v21;
      swift_retain();
      uint64_t v23 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v23)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        uint64_t v19 = 1;
      }
    }
    else
    {
      double v31 = v21;
    }
    HIDWORD(v73) = v17;
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v85 = 0;
      WORD4(v85) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v97)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    char v32 = v78 | v79;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    double v79 = *((void *)&v85 + 1);
    uint64_t v33 = v85;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if (v32)
    {
      uint64_t v34 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v34, 0, v7);
      swift_release();
    }
    if (v75)
    {
      uint64_t v35 = (char *)v21 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v21) + 0x90);
      *(void *)uint64_t v35 = v15;
      v35[8] = v74;
      *((_DWORD *)v35 + 3) = HIDWORD(v73);
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    if (*((unsigned char *)a1 + 72))
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    long long v98 = *((void *)a1 + 5);
    long long v99 = v80;
    *(void *)&long long v100 = v33;
    *((void *)&v100 + 1) = v79;
    long long v101 = 0;
    swift_retain();
    if (!v19)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v33, v79, 0);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    char v78 = v33;
    swift_retain();
LABEL_46:
    type metadata accessor for ViewGraph();
    long long v50 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v51 = MEMORY[0x18C119DF0](v50);
    uint64_t v52 = swift_release();
    if (v51)
    {
      swift_getObjectType();
      uint64_t v52 = swift_conformsToProtocol2();
      if (v52) {
        uint64_t v53 = v51;
      }
      else {
        uint64_t v53 = 0;
      }
      if (!v53) {
        uint64_t v52 = swift_unknownObjectRelease();
      }
    }
    uint64_t v55 = *((void *)a1 + 5);
    id v54 = *((void *)a1 + 6);
    uint64_t v56 = *((void *)a1 + 7);
    uint64_t v57 = *((unsigned char *)a1 + 72);
    uint64_t v58 = (void *)*((void *)a1 + 10);
    uint64_t v59 = *((_DWORD *)a1 + 22);
    uint64_t v87 = *((_DWORD *)a1 + 8);
    uint64_t v60 = *((void *)a1 + 12);
    uint64_t v61 = a1[1];
    uint64_t v85 = *a1;
    uint64_t v86 = v61;
    uint64_t v88 = v55;
    uint64_t v89 = v54;
    uint64_t v90 = v56;
    id v91 = *((void *)a1 + 8);
    uint64_t v92 = v57;
    uint64_t v93 = v58;
    long long v94 = v59;
    long long v95 = v60;
    MEMORY[0x1F4188790](v52);
    id v75 = v62;
    v70[-6] = v62;
    v70[-5] = v63;
    v70[-4] = a1;
    v70[-3] = &v98;
    v70[-2] = v84;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    swift_retain();
    swift_retain();
    char v64 = v58;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    unint64_t v65 = v93;
    swift_release();
    swift_release();
    swift_release();

    int v66 = (void *)*((void *)a1 + 10);
    if (v66)
    {
      if ((*((unsigned char *)a1 + 72) & 1) == 0)
      {
        uint64_t v82 = v84[0];
        int v83 = v66;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
        uint64_t v67 = v66;
        swift_retain();
        swift_retain();
        long long v68 = v67;
        swift_retain();
        swift_bridgeObjectRetain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        uint64_t v69 = v100;
        LOBYTE(v68) = v101;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v69, *((uint64_t *)&v69 + 1), (char)v68);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((unsigned char *)a1 + 72) & 1) == 0)
  {
    long long v98 = *((void *)a1 + 5);
    long long v99 = v20;
    long long v100 = v85;
    long long v101 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    char v78 = v85;
    swift_retain_n();
    int v24 = swift_retain();
    int v25 = MEMORY[0x18C114EE0](v24) + 200;
    swift_beginAccess();
    char v26 = MEMORY[0x18C119DF0](v25);
    int v27 = swift_release();
    if (v26)
    {
      swift_getObjectType();
      int v27 = swift_conformsToProtocol2();
      uint64_t v28 = v7;
      uint64_t v29 = *((void *)&v85 + 1);
      if (v27) {
        unsigned __int8 v30 = v26;
      }
      else {
        unsigned __int8 v30 = 0;
      }
      if (v30) {
        goto LABEL_45;
      }
      int v27 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v28 = v7;
      uint64_t v29 = *((void *)&v85 + 1);
    }
    unsigned __int8 v30 = 0;
LABEL_45:
    char v74 = v30;
    id v75 = &v73;
    uint64_t v37 = *((void *)a1 + 5);
    uint64_t v36 = *((void *)a1 + 6);
    long long v38 = *((void *)a1 + 7);
    long long v39 = *((unsigned char *)a1 + 72);
    uint64_t v40 = (void *)*((void *)a1 + 10);
    long long v41 = *((_DWORD *)a1 + 22);
    uint64_t v87 = *((_DWORD *)a1 + 8);
    long long v42 = *((void *)a1 + 12);
    int v43 = a1[1];
    uint64_t v85 = *a1;
    uint64_t v86 = v43;
    uint64_t v88 = v37;
    uint64_t v89 = v36;
    uint64_t v90 = v38;
    id v91 = *((void *)a1 + 8);
    uint64_t v92 = v39;
    uint64_t v93 = v40;
    long long v94 = v41;
    long long v95 = v42;
    MEMORY[0x1F4188790](v27);
    v70[2] = &v98;
    v70[3] = v84;
    v70[4] = v45;
    v70[5] = v44;
    v70[6] = v78;
    v70[7] = v29;
    id v71 = v28;
    id v72 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    double v79 = v46;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    swift_retain();
    swift_retain();
    char v47 = v40;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    double v79 = v29;
    swift_release();
    swift_release();
    int v48 = v93;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v49 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v84[1];

    goto LABEL_46;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  long long v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void *v59;
  int v60;
  uint64_t v61;
  long long v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  void *v67;
  char v68;
  id v69;
  id v70;
  long long v71;
  char v72;
  void v73[8];
  unsigned int v74;
  long long *v75;
  void v76[2];
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  _OWORD v85[4];
  char v86;
  _OWORD v87[4];
  char v88;
  void *v89;
  long long v90;
  long long v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  id v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  long long v105;
  char v106;
  unsigned char v107[72];
  uint64_t v108;

  long long v108 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(Value, (uint64_t)v107);
  long long v5 = (unsigned int *)AGGraphGetValue();
  int v84 = v6;
  long long v7 = *v5;
  long long v8 = (uint64_t *)AGGraphGetValue();
  long long v10 = v9;
  long long v11 = *v8;
  long long v12 = v8[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v13 = AGGraphGetValue(),
        unsigned int v15 = v14,
        long long v16 = *(void *)v13,
        LODWORD(v78) = *(unsigned __int8 *)(v13 + 8),
        uint64_t v17 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        int v83 = v16,
        v16 == 1))
  {
    LODWORD(v79) = 0;
    uint64_t v17 = 0;
    LODWORD(v78) = 0;
    int v83 = 0;
  }
  else
  {
    LODWORD(v79) = v15 & 1;
  }
  if (v7 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v90 = *(long long *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((unsigned char *)a1 + 72) & 1) == 0)
    {
      uint64_t v18 = (void *)*((void *)a1 + 10);
      if (v18)
      {

        *((unsigned char *)a1 + 72) = 1;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v7 >> 1;
  }
  uint64_t v90 = *(long long *)((char *)a1 + 56);
  LODWORD(v87[0]) = v7;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v19 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
    uint64_t v19 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v84 & 1) == 0) {
      uint64_t v19 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v77) = v17;
  AGGraphClearUpdate();
  if (*((unsigned char *)a1 + 72) == 1) {
    *((unsigned char *)a1 + 72) = 0;
  }
  uint64_t v20 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v101 = v11;
  long long v102 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v21 = (void *)*((void *)a1 + 10);
  uint64_t v81 = v12;
  uint64_t v82 = v20;
  int v80 = v11;
  if (v21)
  {
    if (v10)
    {
      swift_retain();
      char v22 = v21;
      swift_retain();
      uint64_t v23 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v23)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        uint64_t v19 = 1;
      }
    }
    else
    {
      double v31 = v21;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v90 = 0;
      WORD4(v90) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v102)
      {
        v76[1] = v10;
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    char v32 = v7;
    uint64_t v33 = v19;
    uint64_t v34 = v84 | v10;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    int v24 = *((void *)&v90 + 1);
    swift_retain();
    int v84 = (id)v90;
    swift_retain();
    AGGraphClearUpdate();
    if (v34)
    {
      uint64_t v35 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v35, 0, v32, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478D38, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if (v79)
    {
      uint64_t v36 = (char *)v21 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v21) + 0x90);
      *(void *)uint64_t v36 = v83;
      v36[8] = v78;
      *((_DWORD *)v36 + 3) = v77;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    if (*((unsigned char *)a1 + 72))
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }

    long long v103 = *((void *)a1 + 5);
    long long v104 = v82;
    *(void *)&uint64_t v105 = v84;
    *((void *)&v105 + 1) = v24;
    long long v106 = 0;
    swift_retain();
    if (!v33)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v84, v24, 0);
LABEL_55:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>((uint64_t)v107);
      return;
    }
    swift_retain();
LABEL_46:
    type metadata accessor for ViewGraph();
    uint64_t v51 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v52 = MEMORY[0x18C119DF0](v51);
    uint64_t v53 = swift_release();
    char v78 = v24;
    if (v52)
    {
      swift_getObjectType();
      uint64_t v53 = swift_conformsToProtocol2();
      if (v53) {
        id v54 = v52;
      }
      else {
        id v54 = 0;
      }
      if (!v54) {
        uint64_t v53 = swift_unknownObjectRelease();
      }
    }
    double v79 = v73;
    uint64_t v56 = *((void *)a1 + 5);
    uint64_t v55 = *((void *)a1 + 6);
    uint64_t v57 = *((void *)a1 + 7);
    uint64_t v58 = *((unsigned char *)a1 + 72);
    uint64_t v59 = (void *)*((void *)a1 + 10);
    uint64_t v60 = *((_DWORD *)a1 + 22);
    uint64_t v92 = *((_DWORD *)a1 + 8);
    uint64_t v61 = *((void *)a1 + 12);
    uint64_t v62 = a1[1];
    uint64_t v90 = *a1;
    id v91 = v62;
    uint64_t v93 = v56;
    long long v94 = v55;
    long long v95 = v57;
    long long v96 = *((void *)a1 + 8);
    long long v97 = v58;
    long long v98 = v59;
    long long v99 = v60;
    long long v100 = v61;
    MEMORY[0x1F4188790](v53);
    long long v77 = v63;
    v73[-6] = v63;
    v73[-5] = v64;
    v73[-4] = a1;
    v73[-3] = &v103;
    v73[-2] = v107;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    swift_retain();
    swift_retain();
    unint64_t v65 = v59;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    int v66 = v98;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v67 = (void *)*((void *)a1 + 10);
    if (v67)
    {
      long long v68 = *((unsigned char *)a1 + 72);
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>((uint64_t)v107, (uint64_t)v85);
      if ((v68 & 1) == 0)
      {
        v87[2] = v85[2];
        v87[3] = v85[3];
        uint64_t v88 = v86;
        v87[0] = v85[0];
        v87[1] = v85[1];
        uint64_t v89 = v67;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
        uint64_t v69 = v67;
        swift_retain();
        swift_retain();
        uint64_t v70 = v69;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
        id v71 = v105;
        id v72 = v106;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v71, *((uint64_t *)&v71 + 1), v72);
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((unsigned char *)a1 + 72) & 1) == 0)
  {
    int v24 = *((void *)&v90 + 1);
    long long v103 = *((void *)a1 + 5);
    long long v104 = v20;
    uint64_t v105 = v90;
    long long v106 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    int v25 = swift_retain();
    char v26 = MEMORY[0x18C114EE0](v25) + 200;
    swift_beginAccess();
    int v27 = MEMORY[0x18C119DF0](v26);
    uint64_t v28 = swift_release();
    if (v27)
    {
      swift_getObjectType();
      uint64_t v28 = swift_conformsToProtocol2();
      uint64_t v29 = (void *)v90;
      if (v28) {
        unsigned __int8 v30 = v27;
      }
      else {
        unsigned __int8 v30 = 0;
      }
      if (v30) {
        goto LABEL_45;
      }
      uint64_t v28 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v29 = (void *)v90;
    }
    unsigned __int8 v30 = 0;
LABEL_45:
    char v78 = v30;
    double v79 = v76;
    uint64_t v37 = *((_DWORD *)a1 + 8);
    long long v39 = *((void *)a1 + 5);
    long long v38 = *((void *)a1 + 6);
    uint64_t v40 = *((void *)a1 + 7);
    long long v41 = *((unsigned char *)a1 + 72);
    int v84 = (id)*((void *)a1 + 10);
    long long v42 = *((_DWORD *)a1 + 22);
    uint64_t v92 = v37;
    int v43 = *((void *)a1 + 12);
    uint64_t v44 = a1[1];
    uint64_t v90 = *a1;
    id v91 = v44;
    uint64_t v93 = v39;
    long long v94 = v38;
    long long v95 = v40;
    long long v96 = *((void *)a1 + 8);
    long long v97 = v41;
    long long v98 = v84;
    long long v99 = v42;
    long long v100 = v43;
    MEMORY[0x1F4188790](v28);
    v73[2] = &v103;
    v73[3] = v107;
    v73[4] = v46;
    v73[5] = v45;
    v73[6] = v29;
    v73[7] = v24;
    char v74 = v7;
    id v75 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
    long long v77 = v47;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    swift_retain();
    swift_retain();
    int v48 = v84;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    int v84 = v29;
    swift_release();
    uint64_t v49 = v98;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    long long v50 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = *(void *)&v87[0];

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  unsigned int *v7;
  void *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  long long v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t *v65;
  uint64_t v66;
  id v67;
  void *v68;
  void *v69;
  char v70;
  uint64_t v71;
  id v72;
  id v73;
  long long v74;
  void v75[8];
  int v76;
  long long *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  char v90;
  void *v91;
  uint64_t v92;
  long long v93;
  long long v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  id v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  long long v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;

  long long v112 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  long long v5 = *(void *)Value;
  long long v6 = *(unsigned char *)(Value + 8);
  long long v110 = *(void *)Value;
  long long v111 = v6;
  long long v7 = (unsigned int *)AGGraphGetValue();
  uint64_t v88 = v8;
  long long v9 = *v7;
  long long v10 = (uint64_t *)AGGraphGetValue();
  uint64_t v86 = v11;
  long long v12 = *v10;
  uint64_t v13 = v10[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v14 = AGGraphGetValue(),
        long long v16 = v15,
        uint64_t v17 = *(void *)v14,
        uint64_t v18 = *(_DWORD *)(v14 + 12),
        double v79 = *(unsigned __int8 *)(v14 + 8),
        LODWORD(v80) = v18,
        swift_retain(),
        v17 == 1))
  {
    LODWORD(v81) = 0;
    double v79 = 0;
    LODWORD(v80) = 0;
    uint64_t v17 = 0;
  }
  else
  {
    LODWORD(v81) = v16 & 1;
  }
  if (v9 >> 1 == *((_DWORD *)a1 + 22))
  {
    outlined copy of Environment<Bool>.Content(v5, v6);
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v93 = *(long long *)((char *)a1 + 56);
    outlined copy of Environment<Bool>.Content(v5, v6);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((unsigned char *)a1 + 72) & 1) == 0)
    {
      uint64_t v19 = (void *)*((void *)a1 + 10);
      if (v19)
      {

        *((unsigned char *)a1 + 72) = 1;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v9 >> 1;
  }
  uint64_t v93 = *(long long *)((char *)a1 + 56);
  LODWORD(v106) = v9;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v20 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    uint64_t v20 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v88 & 1) == 0) {
      uint64_t v20 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v83) = v9;
  AGGraphClearUpdate();
  if (*((unsigned char *)a1 + 72) == 1) {
    *((unsigned char *)a1 + 72) = 0;
  }
  char v21 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v104 = v12;
  uint64_t v105 = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v22 = (void *)*((void *)a1 + 10);
  int v84 = v13;
  uint64_t v85 = v12;
  uint64_t v87 = v21;
  uint64_t v82 = v17;
  if (v22)
  {
    uint64_t v23 = v86;
    if (v86)
    {
      swift_retain();
      int v24 = v22;
      swift_retain();
      int v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v25)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        uint64_t v20 = 1;
      }
    }
    else
    {
      uint64_t v33 = v22;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v93 = 0;
      WORD4(v93) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v105)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      uint64_t v23 = v86;
    }
    uint64_t v34 = v88 | v23;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v86 = *((void *)&v93 + 1);
    swift_retain();
    uint64_t v88 = (id)v93;
    swift_retain();
    AGGraphClearUpdate();
    if (v34)
    {
      uint64_t v35 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v35, 0, (int)v83);
      swift_release();
    }
    if (v81)
    {
      uint64_t v36 = (char *)v22 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v22) + 0x90);
      *(void *)uint64_t v36 = v17;
      v36[8] = v79;
      *((_DWORD *)v36 + 3) = v80;
      swift_retain();
      swift_release();
      objc_msgSend(v22, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    if (*((unsigned char *)a1 + 72))
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }

    long long v106 = *((void *)a1 + 5);
    long long v107 = v87;
    *(void *)&long long v108 = v88;
    *((void *)&v108 + 1) = v86;
    long long v109 = 0;
    swift_retain();
    if (!v20)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v88, v86, 0);
      swift_release();
      swift_release();
      uint64_t v37 = v110;
      long long v38 = v111;
LABEL_55:
      outlined consume of Environment<Bool>.Content(v37, v38);
      return;
    }
    swift_retain();
LABEL_46:
    type metadata accessor for ViewGraph();
    uint64_t v53 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    id v54 = MEMORY[0x18C119DF0](v53);
    uint64_t v55 = swift_release();
    if (v54)
    {
      swift_getObjectType();
      uint64_t v55 = swift_conformsToProtocol2();
      if (v55) {
        uint64_t v56 = v54;
      }
      else {
        uint64_t v56 = 0;
      }
      if (!v56) {
        uint64_t v55 = swift_unknownObjectRelease();
      }
    }
    int v83 = v75;
    uint64_t v58 = *((void *)a1 + 5);
    uint64_t v57 = *((void *)a1 + 6);
    uint64_t v59 = *((void *)a1 + 7);
    uint64_t v60 = *((unsigned char *)a1 + 72);
    uint64_t v61 = (void *)*((void *)a1 + 10);
    uint64_t v62 = *((_DWORD *)a1 + 22);
    long long v95 = *((_DWORD *)a1 + 8);
    uint64_t v63 = *((void *)a1 + 12);
    char v64 = a1[1];
    uint64_t v93 = *a1;
    long long v94 = v64;
    long long v96 = v58;
    long long v97 = v57;
    long long v98 = v59;
    long long v99 = *((void *)a1 + 8);
    long long v100 = v60;
    long long v101 = v61;
    long long v102 = v62;
    long long v103 = v63;
    MEMORY[0x1F4188790](v55);
    uint64_t v81 = v65;
    v75[-6] = v65;
    v75[-5] = v66;
    v75[-4] = a1;
    v75[-3] = &v106;
    v75[-2] = &v110;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    swift_retain();
    swift_retain();
    uint64_t v67 = v61;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    long long v68 = v101;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v69 = (void *)*((void *)a1 + 10);
    if (v69)
    {
      if ((*((unsigned char *)a1 + 72) & 1) == 0)
      {
        uint64_t v70 = v111;
        id v71 = v110;
        uint64_t v89 = v110;
        uint64_t v90 = v111;
        id v91 = v69;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
        id v72 = v69;
        swift_retain();
        swift_retain();
        id v73 = v72;
        swift_retain();
        outlined copy of Environment<Bool>.Content(v71, v70);
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined consume of Environment<Bool>.Content(v71, v70);

        char v74 = v108;
        LOBYTE(v73) = v109;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v74, *((uint64_t *)&v74 + 1), (char)v73);
        swift_release();
        swift_release();
        uint64_t v37 = v71;
        long long v38 = v70;
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((unsigned char *)a1 + 72) & 1) == 0)
  {
    long long v106 = *((void *)a1 + 5);
    long long v107 = v21;
    long long v108 = v93;
    long long v109 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    char v26 = swift_retain();
    int v27 = MEMORY[0x18C114EE0](v26) + 200;
    swift_beginAccess();
    uint64_t v28 = MEMORY[0x18C119DF0](v27);
    uint64_t v29 = swift_release();
    if (v28)
    {
      swift_getObjectType();
      uint64_t v29 = swift_conformsToProtocol2();
      unsigned __int8 v30 = *((void *)&v93 + 1);
      double v31 = (void *)v93;
      if (v29) {
        char v32 = v28;
      }
      else {
        char v32 = 0;
      }
      if (v32) {
        goto LABEL_45;
      }
      uint64_t v29 = swift_unknownObjectRelease();
    }
    else
    {
      unsigned __int8 v30 = *((void *)&v93 + 1);
      double v31 = (void *)v93;
    }
    char v32 = 0;
LABEL_45:
    int v80 = v32;
    uint64_t v81 = &v78;
    long long v39 = *((_DWORD *)a1 + 8);
    long long v41 = *((void *)a1 + 5);
    uint64_t v40 = *((void *)a1 + 6);
    long long v42 = *((void *)a1 + 7);
    int v43 = *((unsigned char *)a1 + 72);
    uint64_t v88 = (id)*((void *)a1 + 10);
    uint64_t v44 = *((_DWORD *)a1 + 22);
    long long v95 = v39;
    uint64_t v45 = *((void *)a1 + 12);
    uint64_t v46 = a1[1];
    uint64_t v93 = *a1;
    long long v94 = v46;
    long long v96 = v41;
    long long v97 = v40;
    long long v98 = v42;
    long long v99 = *((void *)a1 + 8);
    long long v100 = v43;
    long long v101 = v88;
    long long v102 = v44;
    long long v103 = v45;
    MEMORY[0x1F4188790](v29);
    v75[2] = &v106;
    v75[3] = &v110;
    v75[4] = v48;
    v75[5] = v47;
    v75[6] = v31;
    v75[7] = v30;
    id v76 = (int)v83;
    long long v77 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    uint64_t v86 = v49;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    swift_retain();
    swift_retain();
    long long v50 = v88;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v86 = v30;
    swift_release();
    uint64_t v88 = v31;
    swift_release();
    uint64_t v51 = v101;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v52 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v92;

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t *Value;
  char v3;
  char v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  void *v18;
  int v19;
  uint64_t OutputValue;
  uint64_t v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  long long v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void *v59;
  int v60;
  uint64_t v61;
  long long v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  long long v69;
  char v70;
  int v71;
  int v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  long long v85;
  long long v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  id v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  long long v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  long long v104 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v4 = v3;
  long long v5 = Value[1];
  long long v102 = *Value;
  long long v103 = v5;
  long long v6 = (unsigned int *)AGGraphGetValue();
  char v78 = v7;
  long long v8 = *v6;
  long long v9 = (uint64_t *)AGGraphGetValue();
  id v76 = v10;
  long long v11 = *v9;
  long long v12 = v9[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v13 = AGGraphGetValue(),
        unsigned int v15 = v14,
        long long v16 = *(void *)v13,
        id v72 = *(unsigned __int8 *)(v13 + 8),
        uint64_t v17 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        v16 == 1))
  {
    id v72 = 0;
    LODWORD(v73) = 0;
    uint64_t v17 = 0;
    long long v16 = 0;
  }
  else
  {
    LODWORD(v73) = v15 & 1;
  }
  if (v8 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v85 = *(long long *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((unsigned char *)a1 + 72) & 1) == 0)
    {
      uint64_t v18 = (void *)*((void *)a1 + 10);
      if (v18)
      {

        *((unsigned char *)a1 + 72) = 1;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v8 >> 1;
  }
  uint64_t v85 = *(long long *)((char *)a1 + 56);
  LODWORD(v98) = v8;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v19 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    Outputuint64_t Value = AGGraphGetOutputValue();
    uint64_t v19 = 1;
    if (OutputValue && (v4 & 1) == 0 && (v78 & 1) == 0) {
      uint64_t v19 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v75) = v19;
  id v71 = v17;
  AGGraphClearUpdate();
  if (*((unsigned char *)a1 + 72) == 1) {
    *((unsigned char *)a1 + 72) = 0;
  }
  char v21 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v96 = v11;
  long long v97 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v22 = (void *)*((void *)a1 + 10);
  double v79 = v21;
  int v80 = v12;
  char v74 = v16;
  long long v77 = v11;
  if (v22)
  {
    uint64_t v23 = (char)v76;
    if (v76)
    {
      swift_retain();
      int v24 = v22;
      swift_retain();
      int v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v25)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v75) = 1;
      }
    }
    else
    {
      uint64_t v45 = v22;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v85 = 0;
      WORD4(v85) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v97)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      uint64_t v23 = (char)v76;
    }
    uint64_t v46 = v8;
    char v47 = v78 | v23;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    char v78 = *((void *)&v85 + 1);
    swift_retain();
    int v48 = v85;
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      uint64_t v49 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v49, 0, v46);
      swift_release();
    }
    if (v73)
    {
      long long v50 = (char *)v22 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v22) + 0x90);
      *(void *)long long v50 = v16;
      v50[8] = v72;
      *((_DWORD *)v50 + 3) = v71;
      swift_retain();
      swift_release();
      objc_msgSend(v22, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    long long v42 = v48;
    if (*((unsigned char *)a1 + 72))
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    long long v98 = *((void *)a1 + 5);
    long long v99 = v79;
    *(void *)&long long v100 = v48;
    *((void *)&v100 + 1) = v78;
    long long v101 = 0;
    swift_retain();
    if (!v75)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v48, v78, 0);
      swift_release();
      swift_release();
      goto LABEL_54;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v51 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v52 = MEMORY[0x18C119DF0](v51);
    uint64_t v53 = swift_release();
    id v75 = v42;
    if (v52)
    {
      swift_getObjectType();
      uint64_t v53 = swift_conformsToProtocol2();
      if (v53) {
        id v54 = v52;
      }
      else {
        id v54 = 0;
      }
      if (!v54) {
        uint64_t v53 = swift_unknownObjectRelease();
      }
    }
    id v76 = &v71;
    uint64_t v56 = *((void *)a1 + 5);
    uint64_t v55 = *((void *)a1 + 6);
    uint64_t v57 = *((void *)a1 + 7);
    uint64_t v58 = *((unsigned char *)a1 + 72);
    uint64_t v59 = (void *)*((void *)a1 + 10);
    uint64_t v60 = *((_DWORD *)a1 + 22);
    uint64_t v87 = *((_DWORD *)a1 + 8);
    uint64_t v61 = *((void *)a1 + 12);
    uint64_t v62 = a1[1];
    uint64_t v85 = *a1;
    uint64_t v86 = v62;
    uint64_t v88 = v56;
    uint64_t v89 = v55;
    uint64_t v90 = v57;
    id v91 = *((void *)a1 + 8);
    uint64_t v92 = v58;
    uint64_t v93 = v59;
    long long v94 = v60;
    long long v95 = v61;
    MEMORY[0x1F4188790](v53);
    id v73 = v63;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    swift_retain();
    swift_retain();
    char v64 = v59;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    unint64_t v65 = v93;
    swift_release();
    swift_release();
    swift_release();

    int v66 = (void *)*((void *)a1 + 10);
    if (v66)
    {
      if ((*((unsigned char *)a1 + 72) & 1) == 0)
      {
        uint64_t v81 = v102;
        uint64_t v82 = v103;
        int v83 = v66;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
        swift_retain();
        uint64_t v67 = v66;
        swift_retain();
        swift_retain();
        long long v68 = v67;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_release();
        uint64_t v69 = v100;
        uint64_t v70 = v101;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v69, *((uint64_t *)&v69 + 1), v70);
        swift_release();
        swift_release();
LABEL_54:
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  LODWORD(v78) = v8;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((unsigned char *)a1 + 72) & 1) == 0)
  {
    char v26 = v85;
    long long v98 = *((void *)a1 + 5);
    long long v99 = v21;
    long long v100 = v85;
    long long v101 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    int v27 = swift_retain();
    uint64_t v28 = MEMORY[0x18C114EE0](v27) + 200;
    swift_beginAccess();
    uint64_t v29 = MEMORY[0x18C119DF0](v28);
    unsigned __int8 v30 = swift_release();
    if (v29)
    {
      swift_getObjectType();
      unsigned __int8 v30 = swift_conformsToProtocol2();
      if (v30) {
        double v31 = v29;
      }
      else {
        double v31 = 0;
      }
      if (v31) {
        goto LABEL_31;
      }
      unsigned __int8 v30 = swift_unknownObjectRelease();
    }
    double v31 = 0;
LABEL_31:
    id v75 = v31;
    id v76 = &v71;
    char v32 = *((_DWORD *)a1 + 8);
    uint64_t v34 = *((void *)a1 + 5);
    uint64_t v33 = *((void *)a1 + 6);
    uint64_t v35 = *((void *)a1 + 7);
    uint64_t v36 = *((unsigned char *)a1 + 72);
    id v73 = (id)*((void *)a1 + 10);
    uint64_t v37 = *((_DWORD *)a1 + 22);
    uint64_t v87 = v32;
    long long v38 = *((void *)a1 + 12);
    long long v39 = a1[1];
    uint64_t v85 = *a1;
    uint64_t v86 = v39;
    uint64_t v88 = v34;
    uint64_t v89 = v33;
    uint64_t v90 = v35;
    id v91 = *((void *)a1 + 8);
    uint64_t v92 = v36;
    uint64_t v93 = v73;
    long long v94 = v37;
    long long v95 = v38;
    MEMORY[0x1F4188790](v30);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    char v78 = v40;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    swift_retain();
    swift_retain();
    long long v41 = v73;
    swift_retain();
    long long v42 = v26;
    StatefulRule.withObservation<A>(do:)();
    char v78 = *((void *)&v26 + 1);
    swift_release();
    swift_release();
    int v43 = v93;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v44 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v84;

    goto LABEL_44;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t OutputValue;
  uint64_t v23;
  char v24;
  objc_class *v25;
  char *v26;
  char *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  long long v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  id v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  int v75;
  uint64_t v76;
  long long v77;
  uint64_t *v78;
  uint64_t v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  id v88;
  id v89;
  long long v90;
  void *v91;
  void v92[8];
  int v93;
  long long *v94;
  uint64_t v95;
  uint64_t *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  objc_super v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  void *v110;
  void *v111;
  long long v112;
  long long v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  id v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  long long v127;
  char v128;
  id v129;
  uint64_t v130;

  uint64_t v130 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  long long v5 = *(unsigned char *)(Value + 8);
  long long v106 = *(void *)Value;
  long long v107 = v5;
  long long v6 = (unsigned int *)AGGraphGetValue();
  long long v104 = v7;
  long long v8 = *v6;
  long long v9 = (uint64_t *)AGGraphGetValue();
  long long v102 = v10;
  long long v12 = *v9;
  long long v11 = v9[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v13 = AGGraphGetValue(),
        unsigned int v15 = v14,
        long long v16 = *(void *)v13,
        LODWORD(v95) = *(unsigned __int8 *)(v13 + 8),
        uint64_t v17 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        v16 == 1))
  {
    LODWORD(v96) = 0;
    uint64_t v17 = 0;
    LODWORD(v95) = 0;
    long long v16 = 0;
  }
  else
  {
    LODWORD(v96) = v15 & 1;
  }
  uint64_t v18 = *((_DWORD *)a1 + 22);
  long long v101 = v16;
  if (v8 >> 1 == v18)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v103 = v4;
    LODWORD(v4) = v17;
    long long v112 = *(long long *)((char *)a1 + 56);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v19 = (void *)*((void *)a1 + 9);
    if (v19)
    {
      uint64_t v20 = (void *)*((void *)a1 + 10);
      if (v20)
      {

        *((void *)a1 + 9) = 0;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v8 >> 1;
    uint64_t v17 = v4;
    LOBYTE(v4) = v103;
    long long v16 = v101;
  }
  long long v112 = *(long long *)((char *)a1 + 56);
  LODWORD(v125) = v8;
  LODWORD(v97) = v8;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    char v21 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    Outputuint64_t Value = AGGraphGetOutputValue();
    char v21 = 1;
    if (OutputValue && (v4 & 1) == 0 && (v104 & 1) == 0) {
      char v21 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v98) = v21;
  AGGraphClearUpdate();
  if (!*((void *)a1 + 9))
  {
    uint64_t v23 = v11;
    int v24 = v107;
    int v25 = (objc_class *)type metadata accessor for UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator();
    char v26 = (char *)objc_allocWithZone(v25);
    int v27 = &v26[OBJC_IVAR____TtCV7SwiftUIP33_62A8DBD3A37E684D521D6BC97A6F345A28UIKitSegmentedControlAdaptor32UIKitSegmentedControlCoordinator_representable];
    *(void *)int v27 = v106;
    v27[8] = v24;
    long long v11 = v23;
    v105.receiver = v26;
    v105.super_class = v25;
    swift_bridgeObjectRetain();
    uint64_t v28 = objc_msgSendSuper2(&v105, sel_init);
    uint64_t v29 = (void *)*((void *)a1 + 9);
    *((void *)a1 + 9) = v28;
  }
  unsigned __int8 v30 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v123 = v12;
  char v124 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  double v31 = (void *)*((void *)a1 + 10);
  long long v99 = v12;
  long long v100 = v11;
  long long v103 = v30;
  if (v31)
  {
    char v32 = (char)v102;
    if (v102)
    {
      swift_retain();
      uint64_t v33 = v31;
      swift_retain();
      uint64_t v34 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v34)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v98) = 1;
      }
    }
    else
    {
      long long v42 = v31;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.UnarySubtreeSequence))
    {
      *(void *)&long long v112 = 0;
      WORD4(v112) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v124)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      char v32 = (char)v102;
    }
    int v43 = v104 | v32;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    long long v102 = (id)*((void *)&v112 + 1);
    uint64_t v44 = v112;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    long long v104 = v44;
    if (v43)
    {
      uint64_t v45 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v45, 0, (int)v97);
      swift_release();
    }
    if (v96)
    {
      uint64_t v46 = (char *)v31 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v31) + 0x90);
      *(void *)uint64_t v46 = v16;
      v46[8] = v95;
      *((_DWORD *)v46 + 3) = v17;
      swift_retain();
      swift_release();
      objc_msgSend(v31, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    char v47 = (void *)*((void *)a1 + 9);
    if (!v47)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    int v48 = v47;

    long long v125 = *((void *)a1 + 5);
    int v126 = v103;
    *(void *)&uint64_t v127 = v104;
    *((void *)&v127 + 1) = v102;
    uint64_t v128 = 0;
    uint64_t v129 = v48;
    swift_retain();
    if (!v98)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v104, (uint64_t)v102, 0);

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_retain();
    long long v98 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    int v66 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v67 = MEMORY[0x18C119DF0](v66);
    long long v68 = swift_release();
    if (v67)
    {
      swift_getObjectType();
      long long v68 = swift_conformsToProtocol2();
      if (v68) {
        uint64_t v69 = v67;
      }
      else {
        uint64_t v69 = 0;
      }
      if (!v69) {
        long long v68 = swift_unknownObjectRelease();
      }
    }
    long long v97 = v92;
    id v71 = *((void *)a1 + 5);
    uint64_t v70 = *((void *)a1 + 6);
    id v72 = *((void *)a1 + 7);
    char v74 = (void *)*((void *)a1 + 9);
    id v73 = (void *)*((void *)a1 + 10);
    id v75 = *((_DWORD *)a1 + 22);
    long long v114 = *((_DWORD *)a1 + 8);
    id v76 = *((void *)a1 + 12);
    long long v77 = a1[1];
    long long v112 = *a1;
    long long v113 = v77;
    uint64_t v115 = v71;
    uint64_t v116 = v70;
    char v117 = v72;
    id v118 = *((void *)a1 + 8);
    int v119 = v74;
    uint64_t v120 = v73;
    uint64_t v121 = v75;
    uint64_t v122 = v76;
    MEMORY[0x1F4188790](v68);
    long long v96 = v78;
    v92[-6] = v78;
    v92[-5] = v79;
    v92[-4] = a1;
    v92[-3] = &v125;
    v92[-2] = &v106;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    swift_retain();
    swift_retain();
    int v80 = v74;
    uint64_t v81 = v73;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v82 = v119;
    int v83 = v120;
    swift_release();
    swift_release();
    swift_release();

    int v84 = (void *)*((void *)a1 + 10);
    if (v84)
    {
      uint64_t v85 = (void *)*((void *)a1 + 9);
      if (v85)
      {
        long long v108 = v106;
        long long v109 = v107;
        long long v110 = v84;
        long long v111 = v85;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
        uint64_t v86 = v84;
        swift_retain();
        swift_retain();
        uint64_t v87 = v85;
        uint64_t v88 = v86;
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v89 = v87;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        uint64_t v90 = v127;
        LOBYTE(v88) = v128;
        id v91 = v129;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v90, *((uint64_t *)&v90 + 1), (char)v88);

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v35 = (void *)*((void *)a1 + 9);
  if (v35)
  {
    uint64_t v36 = v112;
    long long v125 = *((void *)a1 + 5);
    int v126 = v30;
    uint64_t v127 = v112;
    uint64_t v128 = 0;
    uint64_t v129 = v35;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    long long v104 = v36;
    swift_retain_n();
    swift_retain();
    uint64_t v37 = MEMORY[0x18C114EE0](v35) + 200;
    swift_beginAccess();
    long long v38 = MEMORY[0x18C119DF0](v37);
    long long v39 = swift_release();
    if (v38)
    {
      swift_getObjectType();
      long long v39 = swift_conformsToProtocol2();
      uint64_t v40 = (void *)*((void *)&v36 + 1);
      if (v39) {
        long long v41 = v38;
      }
      else {
        long long v41 = 0;
      }
      if (v41) {
        goto LABEL_45;
      }
      long long v39 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v40 = (void *)*((void *)&v36 + 1);
    }
    long long v41 = 0;
LABEL_45:
    long long v95 = v41;
    long long v96 = &v95;
    uint64_t v49 = *((_DWORD *)a1 + 8);
    long long v50 = *((void *)a1 + 5);
    uint64_t v51 = *((void *)a1 + 6);
    uint64_t v52 = *((void *)a1 + 7);
    uint64_t v53 = (void *)*((void *)a1 + 9);
    long long v102 = (id)*((void *)a1 + 10);
    id v54 = *((_DWORD *)a1 + 22);
    long long v114 = v49;
    uint64_t v55 = *((void *)a1 + 12);
    uint64_t v56 = a1[1];
    long long v112 = *a1;
    long long v113 = v56;
    uint64_t v115 = v50;
    uint64_t v116 = v51;
    char v117 = v52;
    id v118 = *((void *)a1 + 8);
    int v119 = v53;
    uint64_t v120 = v102;
    uint64_t v121 = v54;
    uint64_t v122 = v55;
    MEMORY[0x1F4188790](v39);
    v92[2] = &v125;
    v92[3] = &v106;
    v92[4] = v58;
    v92[5] = v57;
    v92[6] = v104;
    v92[7] = v40;
    uint64_t v93 = (int)v97;
    long long v94 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    long long v98 = v59;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, MEMORY[0x1E4FBB718]);
    long long v97 = v60;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    swift_retain();
    swift_retain();
    uint64_t v61 = v53;
    uint64_t v62 = v102;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    long long v98 = 0;
    long long v102 = v40;
    swift_release();
    swift_release();
    uint64_t v63 = v119;
    char v64 = v120;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    unint64_t v65 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v108;

    goto LABEL_46;
  }
LABEL_58:
  __break(1u);
}

{
  id *Value;
  char v3;
  char v4;
  id v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  id v19;
  id v20;
  void *v21;
  int v22;
  uint64_t v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  int v44;
  uint64_t v45;
  long long v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t *v65;
  uint64_t v66;
  id v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  id v73;
  long long v74;
  void v75[8];
  unsigned int v76;
  long long *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  id v89[4];
  long long v90;
  long long v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  void *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  long long v105;
  char v106;
  uint64_t v107;

  long long v107 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  uint64_t Value = (id *)AGGraphGetValue();
  char v4 = v3;
  long long v5 = *Value;
  v89[0] = *Value;
  long long v6 = (unsigned int *)AGGraphGetValue();
  uint64_t v86 = v7;
  long long v8 = *v6;
  long long v9 = (uint64_t *)AGGraphGetValue();
  int v83 = v10;
  long long v11 = *v9;
  long long v12 = v9[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v13 = AGGraphGetValue(),
        unsigned int v15 = v14,
        long long v16 = *(void *)v13,
        uint64_t v17 = *(unsigned __int8 *)(v13 + 8),
        uint64_t v18 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        v16 == 1))
  {
    LODWORD(v80) = 0;
    LODWORD(v79) = 0;
    uint64_t v17 = 0;
    long long v16 = 0;
  }
  else
  {
    LODWORD(v79) = v18;
    LODWORD(v80) = v15 & 1;
  }
  if (v8 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    uint64_t v19 = v5;
    swift_retain();
  }
  else
  {
    uint64_t v90 = *(long long *)((char *)a1 + 56);
    swift_retain();
    uint64_t v20 = v5;
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((unsigned char *)a1 + 72) & 1) == 0)
    {
      char v21 = (void *)*((void *)a1 + 10);
      if (v21)
      {

        *((unsigned char *)a1 + 72) = 1;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v8 >> 1;
  }
  HIDWORD(v78) = v17;
  uint64_t v90 = *(long long *)((char *)a1 + 56);
  LODWORD(v103) = v8;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    char v22 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
    char v22 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v86 & 1) == 0) {
      char v22 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  if (*((unsigned char *)a1 + 72) == 1) {
    *((unsigned char *)a1 + 72) = 0;
  }
  uint64_t v23 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v101 = v11;
  long long v102 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  int v24 = (void *)*((void *)a1 + 10);
  uint64_t v82 = v11;
  uint64_t v85 = v12;
  int v84 = v23;
  uint64_t v81 = v16;
  if (v24)
  {
    int v25 = v83;
    if (v83)
    {
      swift_retain();
      char v26 = v24;
      swift_retain();
      int v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v27)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        char v22 = 1;
      }
    }
    else
    {
      uint64_t v35 = v24;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v90 = 0;
      WORD4(v90) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v102)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      int v25 = v83;
    }
    uint64_t v36 = v86 | v25;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    int v83 = *((void *)&v90 + 1);
    swift_retain();
    uint64_t v86 = v90;
    swift_retain();
    AGGraphClearUpdate();
    if (v36)
    {
      uint64_t v37 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v37, 0, v8, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478C98, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if (v80)
    {
      long long v38 = (char *)v24 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v24) + 0x90);
      *(void *)long long v38 = v16;
      v38[8] = BYTE4(v78);
      *((_DWORD *)v38 + 3) = v79;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    if (*((unsigned char *)a1 + 72))
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    long long v103 = *((void *)a1 + 5);
    long long v104 = v84;
    *(void *)&uint64_t v105 = v86;
    *((void *)&v105 + 1) = v83;
    long long v106 = 0;
    swift_retain();
    if (!v22)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v86, v83, 0);
      swift_release();
      swift_release();

      return;
    }
    swift_retain();
LABEL_46:
    type metadata accessor for ViewGraph();
    uint64_t v53 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    id v54 = MEMORY[0x18C119DF0](v53);
    uint64_t v55 = swift_release();
    if (v54)
    {
      swift_getObjectType();
      uint64_t v55 = swift_conformsToProtocol2();
      if (v55) {
        uint64_t v56 = v54;
      }
      else {
        uint64_t v56 = 0;
      }
      if (!v56) {
        uint64_t v55 = swift_unknownObjectRelease();
      }
    }
    uint64_t v58 = *((void *)a1 + 5);
    uint64_t v57 = *((void *)a1 + 6);
    uint64_t v59 = *((void *)a1 + 7);
    uint64_t v60 = *((unsigned char *)a1 + 72);
    uint64_t v61 = (void *)*((void *)a1 + 10);
    uint64_t v62 = *((_DWORD *)a1 + 22);
    uint64_t v92 = *((_DWORD *)a1 + 8);
    uint64_t v63 = *((void *)a1 + 12);
    char v64 = a1[1];
    uint64_t v90 = *a1;
    id v91 = v64;
    uint64_t v93 = v58;
    long long v94 = v57;
    long long v95 = v59;
    long long v96 = *((void *)a1 + 8);
    long long v97 = v60;
    long long v98 = v61;
    long long v99 = v62;
    long long v100 = v63;
    MEMORY[0x1F4188790](v55);
    int v80 = v65;
    v75[-6] = v65;
    v75[-5] = v66;
    v75[-4] = a1;
    v75[-3] = &v103;
    v75[-2] = v89;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    swift_retain();
    swift_retain();
    uint64_t v67 = v61;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    long long v68 = v98;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v69 = (void *)*((void *)a1 + 10);
    if (v69)
    {
      if ((*((unsigned char *)a1 + 72) & 1) == 0)
      {
        uint64_t v70 = v89[0];
        uint64_t v87 = v89[0];
        uint64_t v88 = v69;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
        id v71 = v69;
        swift_retain();
        swift_retain();
        id v72 = v71;
        swift_retain();
        id v73 = v70;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        char v74 = v105;
        LOBYTE(v72) = v106;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v74, *((uint64_t *)&v74 + 1), (char)v72);

        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((unsigned char *)a1 + 72) & 1) == 0)
  {
    long long v103 = *((void *)a1 + 5);
    long long v104 = v23;
    uint64_t v105 = v90;
    long long v106 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    uint64_t v86 = v90;
    swift_retain_n();
    uint64_t v28 = swift_retain();
    uint64_t v29 = MEMORY[0x18C114EE0](v28) + 200;
    swift_beginAccess();
    unsigned __int8 v30 = MEMORY[0x18C119DF0](v29);
    double v31 = swift_release();
    if (v30)
    {
      swift_getObjectType();
      double v31 = swift_conformsToProtocol2();
      char v32 = v8;
      uint64_t v33 = *((void *)&v90 + 1);
      if (v31) {
        uint64_t v34 = v30;
      }
      else {
        uint64_t v34 = 0;
      }
      if (v34) {
        goto LABEL_45;
      }
      double v31 = swift_unknownObjectRelease();
    }
    else
    {
      char v32 = v8;
      uint64_t v33 = *((void *)&v90 + 1);
    }
    uint64_t v34 = 0;
LABEL_45:
    double v79 = v34;
    int v80 = &v78;
    uint64_t v40 = *((void *)a1 + 5);
    long long v39 = *((void *)a1 + 6);
    long long v41 = *((void *)a1 + 7);
    long long v42 = *((unsigned char *)a1 + 72);
    int v43 = (void *)*((void *)a1 + 10);
    uint64_t v44 = *((_DWORD *)a1 + 22);
    uint64_t v92 = *((_DWORD *)a1 + 8);
    uint64_t v45 = *((void *)a1 + 12);
    uint64_t v46 = a1[1];
    uint64_t v90 = *a1;
    id v91 = v46;
    uint64_t v93 = v40;
    long long v94 = v39;
    long long v95 = v41;
    long long v96 = *((void *)a1 + 8);
    long long v97 = v42;
    long long v98 = v43;
    long long v99 = v44;
    long long v100 = v45;
    MEMORY[0x1F4188790](v31);
    v75[2] = &v103;
    v75[3] = v89;
    v75[4] = v48;
    v75[5] = v47;
    v75[6] = v86;
    v75[7] = v33;
    id v76 = v32;
    long long v77 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
    int v83 = v49;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    swift_retain();
    swift_retain();
    long long v50 = v43;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    int v83 = v33;
    swift_release();
    swift_release();
    uint64_t v51 = v98;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v52 = (void *)*((void *)a1 + 10);
    *((id *)a1 + 10) = v89[1];

    goto LABEL_46;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  long long v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  int v61;
  long long v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  void *v68;
  char v69;
  id v70;
  id v71;
  long long v72;
  char v73;
  void v74[8];
  unsigned int v75;
  long long *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  void v86[30];
  _OWORD v87[2];
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  id v94;
  int v95;
  uint64_t v96;
  void *v97;
  long long v98;
  long long v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  void *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  long long v113;
  char v114;
  void v115[33];

  v115[30] = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(Value, (uint64_t)v115);
  long long v5 = (unsigned int *)AGGraphGetValue();
  uint64_t v85 = v6;
  long long v7 = *v5;
  long long v8 = (uint64_t *)AGGraphGetValue();
  long long v10 = v9;
  long long v11 = *v8;
  long long v12 = v8[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v13 = AGGraphGetValue(),
        unsigned int v15 = v14,
        long long v16 = *(void *)v13,
        LODWORD(v79) = *(unsigned __int8 *)(v13 + 8),
        uint64_t v17 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        int v84 = v16,
        v16 == 1))
  {
    LODWORD(v80) = 0;
    uint64_t v17 = 0;
    LODWORD(v79) = 0;
    int v84 = 0;
  }
  else
  {
    LODWORD(v80) = v15 & 1;
  }
  if (v7 >> 1 == *((_DWORD *)a1 + 22))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v87[0] = *(long long *)((char *)a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((unsigned char *)a1 + 72) & 1) == 0)
    {
      uint64_t v18 = (void *)*((void *)a1 + 10);
      if (v18)
      {

        *((unsigned char *)a1 + 72) = 1;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v7 >> 1;
  }
  v87[0] = *(long long *)((char *)a1 + 56);
  LODWORD(v86[0]) = v7;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v19 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
    uint64_t v19 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v85 & 1) == 0) {
      uint64_t v19 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v78) = v17;
  AGGraphClearUpdate();
  if (*((unsigned char *)a1 + 72) == 1) {
    *((unsigned char *)a1 + 72) = 0;
  }
  uint64_t v20 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  long long v109 = v11;
  long long v110 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v21 = (void *)*((void *)a1 + 10);
  uint64_t v82 = v12;
  int v83 = v20;
  uint64_t v81 = v11;
  if (v21)
  {
    if (v10)
    {
      swift_retain();
      char v22 = v21;
      swift_retain();
      uint64_t v23 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v23)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        uint64_t v19 = 1;
      }
    }
    else
    {
      double v31 = v21;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.UnarySubtreeSequence))
    {
      *(void *)&v87[0] = 0;
      WORD4(v87[0]) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v110)
      {
        long long v77 = v10;
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    char v32 = v7;
    uint64_t v33 = v19;
    uint64_t v34 = v85 | v10;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    int v24 = *((void *)&v87[0] + 1);
    swift_retain();
    uint64_t v85 = *(id *)&v87[0];
    swift_retain();
    AGGraphClearUpdate();
    if (v34)
    {
      uint64_t v35 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v35, 0, v32, (uint64_t)partial apply for closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:), (uint64_t)&unk_1ED478BD0, (uint64_t)partial apply for closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:), (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if (v80)
    {
      uint64_t v36 = (char *)v21 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v21) + 0x90);
      *(void *)uint64_t v36 = v84;
      v36[8] = v79;
      *((_DWORD *)v36 + 3) = v78;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    if (*((unsigned char *)a1 + 72))
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }

    long long v111 = *((void *)a1 + 5);
    long long v112 = v83;
    *(void *)&long long v113 = v85;
    *((void *)&v113 + 1) = v24;
    long long v114 = 0;
    swift_retain();
    if (!v33)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v85, v24, 0);
LABEL_55:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v115);
      return;
    }
    swift_retain();
LABEL_46:
    type metadata accessor for ViewGraph();
    uint64_t v51 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v52 = MEMORY[0x18C119DF0](v51);
    uint64_t v53 = swift_release();
    double v79 = v24;
    if (v52)
    {
      swift_getObjectType();
      uint64_t v53 = swift_conformsToProtocol2();
      if (v53) {
        id v54 = v52;
      }
      else {
        id v54 = 0;
      }
      if (!v54) {
        uint64_t v53 = swift_unknownObjectRelease();
      }
    }
    int v80 = v74;
    uint64_t v55 = *((_DWORD *)a1 + 8);
    uint64_t v57 = *((void *)a1 + 5);
    uint64_t v56 = *((void *)a1 + 6);
    uint64_t v58 = *((void *)a1 + 7);
    uint64_t v59 = *((unsigned char *)a1 + 72);
    uint64_t v60 = (void *)*((void *)a1 + 10);
    uint64_t v61 = *((_DWORD *)a1 + 22);
    uint64_t v62 = a1[1];
    long long v98 = *a1;
    long long v99 = v62;
    uint64_t v63 = *((void *)a1 + 12);
    long long v100 = v55;
    long long v101 = v57;
    long long v102 = v56;
    long long v103 = v58;
    long long v104 = *((void *)a1 + 8);
    uint64_t v105 = v59;
    long long v106 = v60;
    long long v107 = v61;
    long long v108 = v63;
    MEMORY[0x1F4188790](v53);
    char v78 = v64;
    v74[-6] = v64;
    v74[-5] = v65;
    v74[-4] = a1;
    v74[-3] = &v111;
    v74[-2] = v115;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    swift_retain();
    swift_retain();
    int v66 = v60;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v67 = v106;
    swift_release();
    swift_release();
    swift_release();

    long long v68 = (void *)*((void *)a1 + 10);
    if (v68)
    {
      uint64_t v69 = *((unsigned char *)a1 + 72);
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v115, (uint64_t)v86);
      if ((v69 & 1) == 0)
      {
        outlined init with take of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v86, (uint64_t)v87);
        long long v97 = v68;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
        uint64_t v70 = v68;
        swift_retain();
        swift_retain();
        id v71 = v70;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
        id v72 = v113;
        id v73 = v114;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v72, *((uint64_t *)&v72 + 1), v73);
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((unsigned char *)a1 + 72) & 1) == 0)
  {
    int v24 = *((void *)&v87[0] + 1);
    long long v111 = *((void *)a1 + 5);
    long long v112 = v20;
    long long v113 = v87[0];
    long long v114 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    int v25 = swift_retain();
    char v26 = MEMORY[0x18C114EE0](v25) + 200;
    swift_beginAccess();
    int v27 = MEMORY[0x18C119DF0](v26);
    uint64_t v28 = swift_release();
    if (v27)
    {
      swift_getObjectType();
      uint64_t v28 = swift_conformsToProtocol2();
      uint64_t v29 = *(void **)&v87[0];
      if (v28) {
        unsigned __int8 v30 = v27;
      }
      else {
        unsigned __int8 v30 = 0;
      }
      if (v30) {
        goto LABEL_45;
      }
      uint64_t v28 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void **)&v87[0];
    }
    unsigned __int8 v30 = 0;
LABEL_45:
    double v79 = v30;
    int v80 = &v77;
    uint64_t v37 = *((_DWORD *)a1 + 8);
    long long v39 = *((void *)a1 + 5);
    long long v38 = *((void *)a1 + 6);
    uint64_t v40 = *((void *)a1 + 7);
    long long v41 = *((unsigned char *)a1 + 72);
    uint64_t v85 = (id)*((void *)a1 + 10);
    long long v42 = *((_DWORD *)a1 + 22);
    uint64_t v88 = v37;
    int v43 = *((void *)a1 + 12);
    uint64_t v44 = a1[1];
    v87[0] = *a1;
    v87[1] = v44;
    uint64_t v89 = v39;
    uint64_t v90 = v38;
    id v91 = v40;
    uint64_t v92 = *((void *)a1 + 8);
    uint64_t v93 = v41;
    long long v94 = v85;
    long long v95 = v42;
    long long v96 = v43;
    MEMORY[0x1F4188790](v28);
    v74[2] = &v111;
    v74[3] = v115;
    v74[4] = v46;
    v74[5] = v45;
    v74[6] = v29;
    v74[7] = v24;
    id v75 = v7;
    id v76 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
    char v78 = v47;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    swift_retain();
    swift_retain();
    int v48 = v85;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    uint64_t v85 = v29;
    swift_release();
    uint64_t v49 = v94;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    long long v50 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v86[0];

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  _OWORD *Value;
  char v3;
  char v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  void *v26;
  char v27;
  int v28;
  uint64_t OutputValue;
  uint64_t v30;
  void *v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  long long *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *v70;
  int v71;
  uint64_t v72;
  long long v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  void *v78;
  char v79;
  id v80;
  id v81;
  long long v82;
  char v83;
  void v84[8];
  int v85;
  long long *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  long long v109;
  long long v110;
  long long v111;
  long long v112;
  long long v113;
  long long v114;
  long long v115;
  long long v116;
  long long v117;
  long long v118;
  long long v119;
  _OWORD v120[10];
  char v121;
  long long v122;
  long long v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  void *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  long long v137;
  char v138;
  long long v139;
  long long v140;
  long long v141;
  long long v142;
  long long v143;
  long long v144;
  long long v145;
  long long v146;
  long long v147;
  long long v148;
  char v149;
  _OWORD v150[10];
  char v151;
  uint64_t v152;

  long long v152 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  char v4 = v3;
  long long v6 = Value[1];
  long long v5 = Value[2];
  v150[0] = *Value;
  v150[1] = v6;
  v150[2] = v5;
  long long v7 = Value[6];
  long long v9 = Value[3];
  long long v8 = Value[4];
  v150[5] = Value[5];
  v150[6] = v7;
  v150[3] = v9;
  v150[4] = v8;
  long long v11 = Value[8];
  long long v10 = Value[9];
  long long v12 = *((unsigned char *)Value + 160);
  v150[7] = Value[7];
  long long v151 = v12;
  v150[9] = v10;
  v150[8] = v11;
  memmove(&v139, Value, 0xA1uLL);
  uint64_t v13 = (_DWORD *)AGGraphGetValue();
  uint64_t v93 = v14;
  LODWORD(v97) = *v13;
  unsigned int v15 = (uint64_t *)AGGraphGetValue();
  uint64_t v17 = v16;
  uint64_t v18 = *v15;
  uint64_t v19 = v15[1];
  if (*((_DWORD *)a1 + 7) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v20 = AGGraphGetValue(),
        char v22 = v21,
        uint64_t v23 = *(void *)v20,
        LODWORD(v89) = *(unsigned __int8 *)(v20 + 8),
        int v24 = *(_DWORD *)(v20 + 12),
        swift_retain(),
        long long v96 = v23,
        v23 == 1))
  {
    LODWORD(v90) = 0;
    int v24 = 0;
    LODWORD(v89) = 0;
    long long v96 = 0;
  }
  else
  {
    LODWORD(v90) = v22 & 1;
  }
  int v25 = v97 >> 1;
  if (v97 >> 1 == *((_DWORD *)a1 + 22))
  {
    outlined retain of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v150);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v109 = *(long long *)((char *)a1 + 56);
    outlined retain of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v150);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if ((*((unsigned char *)a1 + 72) & 1) == 0)
    {
      char v26 = (void *)*((void *)a1 + 10);
      if (v26)
      {

        *((unsigned char *)a1 + 72) = 1;
        *((void *)a1 + 10) = 0;
      }
    }
    *((_DWORD *)a1 + 22) = v25;
  }
  long long v109 = *(long long *)((char *)a1 + 56);
  LODWORD(v98) = v97;
  int v27 = v17;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v28 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
    Outputuint64_t Value = AGGraphGetOutputValue();
    uint64_t v28 = 1;
    if (OutputValue && (v4 & 1) == 0 && (v93 & 1) == 0) {
      uint64_t v28 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v91) = v28;
  uint64_t v88 = v24;
  AGGraphClearUpdate();
  if (*((unsigned char *)a1 + 72) == 1) {
    *((unsigned char *)a1 + 72) = 0;
  }
  unsigned __int8 v30 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  char v133 = v18;
  long long v134 = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  double v31 = (void *)*((void *)a1 + 10);
  long long v94 = v30;
  long long v95 = v19;
  uint64_t v92 = v18;
  if (v31)
  {
    if (v27)
    {
      swift_retain();
      char v32 = v31;
      swift_retain();
      uint64_t v33 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v33)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v91) = 1;
      }
    }
    else
    {
      long long v42 = v31;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.UnarySubtreeSequence))
    {
      *(void *)&long long v109 = 0;
      WORD4(v109) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v134)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    int v43 = v93 | v27;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v93 = *((void *)&v109 + 1);
    uint64_t v44 = v109;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if (v43)
    {
      uint64_t v45 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v45, 0, (int)v97, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478CE8, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if (v90)
    {
      uint64_t v46 = (char *)v31 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v31) + 0x90);
      *(void *)uint64_t v46 = v96;
      v46[8] = v89;
      *((_DWORD *)v46 + 3) = v88;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    if (*((unsigned char *)a1 + 72))
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v34 = v44;

    long long v135 = *((void *)a1 + 5);
    long long v136 = v94;
    *(void *)&long long v137 = v44;
    *((void *)&v137 + 1) = v93;
    long long v138 = 0;
    if (!v91)
    {
      swift_retain();
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v44, v93, 0);
      swift_release();
      swift_release();
      char v117 = v147;
      id v118 = v148;
      LOBYTE(v119) = v149;
      long long v113 = v143;
      long long v114 = v144;
      uint64_t v115 = v145;
      uint64_t v116 = v146;
      long long v109 = v139;
      long long v110 = v140;
      long long v111 = v141;
      long long v112 = v142;
      char v47 = &v109;
LABEL_54:
      outlined release of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v47);
      return;
    }
    swift_retain();
    swift_retain();
    long long v97 = 0;
LABEL_45:
    type metadata accessor for ViewGraph();
    uint64_t v62 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v63 = MEMORY[0x18C119DF0](v62);
    char v64 = swift_release();
    uint64_t v90 = v34;
    if (v63)
    {
      swift_getObjectType();
      char v64 = swift_conformsToProtocol2();
      if (v64) {
        unint64_t v65 = v63;
      }
      else {
        unint64_t v65 = 0;
      }
      if (!v65) {
        char v64 = swift_unknownObjectRelease();
      }
    }
    id v91 = v84;
    uint64_t v67 = *((void *)a1 + 5);
    int v66 = *((void *)a1 + 6);
    long long v68 = *((void *)a1 + 7);
    uint64_t v69 = *((unsigned char *)a1 + 72);
    uint64_t v70 = (void *)*((void *)a1 + 10);
    id v71 = *((_DWORD *)a1 + 22);
    char v124 = *((_DWORD *)a1 + 8);
    id v72 = *((void *)a1 + 12);
    id v73 = a1[1];
    uint64_t v122 = *a1;
    uint64_t v123 = v73;
    long long v125 = v67;
    int v126 = v66;
    uint64_t v127 = v68;
    uint64_t v128 = *((void *)a1 + 8);
    uint64_t v129 = v69;
    uint64_t v130 = v70;
    uint64_t v131 = v71;
    long long v132 = v72;
    MEMORY[0x1F4188790](v64);
    uint64_t v89 = v74;
    v84[-6] = v74;
    v84[-5] = v75;
    v84[-4] = a1;
    v84[-3] = &v135;
    v84[-2] = &v139;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    swift_retain();
    swift_retain();
    id v76 = v70;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    long long v77 = v130;
    swift_release();
    swift_release();
    swift_release();

    char v78 = (void *)*((void *)a1 + 10);
    if (v78)
    {
      double v79 = *((unsigned char *)a1 + 72);
      v120[8] = v147;
      v120[9] = v148;
      uint64_t v121 = v149;
      v120[4] = v143;
      v120[5] = v144;
      v120[6] = v145;
      v120[7] = v146;
      v120[0] = v139;
      v120[1] = v140;
      v120[2] = v141;
      v120[3] = v142;
      if ((v79 & 1) == 0)
      {
        uint64_t v116 = v146;
        char v117 = v147;
        id v118 = v148;
        long long v112 = v142;
        long long v113 = v143;
        LOBYTE(v119) = v149;
        long long v114 = v144;
        uint64_t v115 = v145;
        long long v110 = v140;
        long long v111 = v141;
        *((void *)&v119 + 1) = v78;
        long long v106 = v147;
        long long v107 = v148;
        long long v108 = v119;
        long long v109 = v139;
        long long v102 = v143;
        long long v103 = v144;
        long long v104 = v145;
        uint64_t v105 = v146;
        long long v98 = v139;
        long long v99 = v140;
        long long v100 = v141;
        long long v101 = v142;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
        int v80 = v78;
        swift_retain();
        swift_retain();
        uint64_t v81 = v80;
        swift_retain();
        outlined retain of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v120);
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined release of ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v109);
        uint64_t v82 = v137;
        int v83 = v138;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v82, *((uint64_t *)&v82 + 1), v83);
        swift_release();
        swift_release();
        char v47 = v120;
        goto LABEL_54;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_57;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  if ((*((unsigned char *)a1 + 72) & 1) == 0)
  {
    long long v135 = *((void *)a1 + 5);
    long long v136 = v30;
    long long v137 = v109;
    long long v138 = 0;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    uint64_t v34 = v109;
    swift_retain();
    swift_retain_n();
    uint64_t v35 = swift_retain();
    uint64_t v36 = MEMORY[0x18C114EE0](v35) + 200;
    swift_beginAccess();
    uint64_t v37 = MEMORY[0x18C119DF0](v36);
    long long v38 = swift_release();
    if (v37)
    {
      swift_getObjectType();
      long long v38 = swift_conformsToProtocol2();
      if (v38) {
        long long v39 = v37;
      }
      else {
        long long v39 = 0;
      }
      uint64_t v40 = (int)v97;
      long long v41 = *((void *)&v109 + 1);
      if (!v39)
      {
        long long v38 = swift_unknownObjectRelease();
        long long v39 = 0;
      }
    }
    else
    {
      long long v41 = *((void *)&v109 + 1);
      long long v39 = 0;
      uint64_t v40 = (int)v97;
    }
    uint64_t v90 = v39;
    id v91 = &v87;
    int v48 = *((_DWORD *)a1 + 8);
    long long v50 = *((void *)a1 + 5);
    uint64_t v49 = *((void *)a1 + 6);
    uint64_t v51 = *((void *)a1 + 7);
    uint64_t v52 = *((unsigned char *)a1 + 72);
    long long v97 = (id)*((void *)a1 + 10);
    uint64_t v53 = *((_DWORD *)a1 + 22);
    LODWORD(v111) = v48;
    id v54 = *((void *)a1 + 12);
    uint64_t v55 = a1[1];
    long long v109 = *a1;
    long long v110 = v55;
    *((void *)&v111 + 1) = v50;
    *(void *)&long long v112 = v49;
    *((void *)&v112 + 1) = v51;
    *(void *)&long long v113 = *((void *)a1 + 8);
    BYTE8(v113) = v52;
    *(void *)&long long v114 = v97;
    DWORD2(v114) = v53;
    *(void *)&uint64_t v115 = v54;
    MEMORY[0x1F4188790](v38);
    v84[2] = &v135;
    v84[3] = &v139;
    v84[4] = v57;
    v84[5] = v56;
    v84[6] = v34;
    v84[7] = v41;
    uint64_t v85 = v40;
    uint64_t v86 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
    uint64_t v93 = v58;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    swift_retain();
    swift_retain();
    uint64_t v59 = v97;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    long long v97 = 0;
    uint64_t v93 = v41;
    swift_release();
    swift_release();
    uint64_t v60 = (void *)v114;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v61 = (void *)*((void *)a1 + 10);
    *((void *)a1 + 10) = v98;

    goto LABEL_45;
  }
LABEL_58:
  __break(1u);
}

void type metadata accessor for ContentResponderHelper<TrivialContentResponder>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 112);
  char v12 = *(unsigned char *)(a1 + 120);
  char v13 = *(unsigned char *)(a1 + 136);
  uint64_t v14 = *(void *)(a1 + 128);
  outlined copy of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  outlined copy of Environment<Bool>.Content(v8, v9);
  outlined copy of Environment<Bool>.Content(v10, v12);
  outlined copy of Environment<Bool>.Content(v14, v13);
  swift_retain();
  return a1;
}

uint64_t outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 112);
  char v12 = *(unsigned char *)(a1 + 120);
  char v13 = *(unsigned char *)(a1 + 136);
  uint64_t v14 = *(void *)(a1 + 128);
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined consume of Environment<Bool>.Content(v8, v9);
  outlined consume of Environment<Bool>.Content(v10, v12);
  outlined consume of Environment<Bool>.Content(v14, v13);
  swift_release();
  return a1;
}

void type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

void specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(uint64_t a1, uint64_t a2, int a3)
{
  char v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x68);
  swift_beginAccess();
  long long v10 = *(_OWORD *)v8;
  EnvironmentValues.colorScheme.getter();
  swift_endAccess();
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  EnvironmentValues.colorScheme.getter();
  swift_beginAccess();
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  *(_DWORD *)((char *)v3 + *(void *)((*v7 & *v3) + 0x70)) = a3;
  objc_msgSend(v3, sel__noteTraitsDidChangeRecursively, v10);
  *(void *)&long long v10 = a1;
  *((void *)&v10 + 1) = a2;
  id v9 = *(id *)((char *)v3 + *(void *)((*v7 & *v3) + 0x78));
  UIView.adoptEnvironment(_:hostedSubview:)((uint64_t)&v10, v9);
}

uint64_t CircularUIKitProgressView.updateUIView(_:context:)(id a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  char v7 = (void *)*((void *)v2 + 20);
  if (*((unsigned char *)v2 + 168))
  {
    long long v20 = v2[6];
    long long v21 = v2[7];
    long long v22 = v2[8];
    long long v23 = v2[9];
    long long v16 = v2[2];
    long long v17 = v2[3];
    long long v18 = v2[4];
    long long v19 = v2[5];
    long long v14 = *v2;
    long long v15 = v2[1];
    uint64_t v24 = *((void *)v2 + 20);
    LOBYTE(v25) = *((unsigned char *)v2 + 168);
    a1 = objc_msgSend(a1, sel__setCustomWidth_, CircularUIKitProgressView.resolvedWidth.getter());
    if (!v7)
    {
      static Color.secondary.getter();
      a1 = (id)swift_retain();
      if (v6) {
        goto LABEL_6;
      }
      goto LABEL_8;
    }
LABEL_5:
    if (v6)
    {
LABEL_6:
      MEMORY[0x1F4188790](a1);
      swift_retain();
      swift_retain_n();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v4, 1);
      static Update.ensure<A>(_:)();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v4, 1);
LABEL_9:
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
      swift_release();
      swift_release();
      Color.Resolved.kitColor.getter();
      self;
      char v7 = (void *)swift_dynamicCastObjCClassUnconditional();
      goto LABEL_10;
    }
LABEL_8:
    *(void *)&long long v14 = v5;
    *((void *)&v14 + 1) = v4;
    swift_retain_n();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v4, 0);
    goto LABEL_9;
  }
  if (v7) {
    goto LABEL_5;
  }
LABEL_10:
  id v8 = objc_msgSend(v3, sel_color, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
  if (v8)
  {
    id v9 = v8;
    if (v7)
    {
      type metadata accessor for UIColor();
      id v10 = v7;
      id v11 = v9;
      char v12 = static NSObject.== infix(_:_:)();

      if (v12) {
        goto LABEL_18;
      }
    }
    else
    {
    }
  }
  else if (!v7)
  {
    return swift_release();
  }
  objc_msgSend(v3, sel_setColor_, v7);
  id v10 = v7;
LABEL_18:

  return swift_release();
}

double CircularUIKitProgressView.resolvedWidth.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v0, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v5);
  outlined consume of Environment<Bool>.Content(v1, v2);
  _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3F620]);
  ScaledMetric.wrappedValue.getter();
  return v4;
}

void type metadata accessor for ScaledMetric<CGFloat>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined release of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 112);
  char v12 = *(unsigned char *)(a1 + 120);
  char v13 = *(unsigned char *)(a1 + 136);
  uint64_t v14 = *(void *)(a1 + 128);
  long long v15 = *(void **)(a1 + 176);
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined consume of Environment<Bool>.Content(v8, v9);
  outlined consume of Environment<Bool>.Content(v10, v12);
  outlined consume of Environment<Bool>.Content(v14, v13);

  swift_release();
  return a1;
}

uint64_t protocol witness for PlatformViewRepresentable.updateViewProvider(_:context:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(*a1, a2, a3);
}

uint64_t PlatformViewRepresentableAdaptor.updateViewProvider(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a1;
  uint64_t v17 = a2;
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v16 - v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = type metadata accessor for UIViewRepresentableContext();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v17, v4, v12);
  UIViewRepresentableContext.init<A>(_:)((uint64_t)v7, (uint64_t)v14);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v9 + 40))(v18, v14, v8, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t protocol witness for PlatformViewRepresentable.updateViewProvider(_:context:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PlatformViewControllerRepresentableAdaptor.updateViewProvider(_:context:)(*a1, a2, a3);
}

uint64_t PlatformViewControllerRepresentableAdaptor.updateViewProvider(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a1;
  uint64_t v18 = a2;
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v17 - v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = type metadata accessor for UIViewControllerRepresentableContext();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v18, v4, v12);
  double v15 = UIViewControllerRepresentableContext.init<A>(_:)((uint64_t)v7, (uint64_t)v14);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(v9 + 40))(v19, v14, v8, v9, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t PlatformViewControllerRepresentableAdaptor.sizeThatFits(_:provider:context:)(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a5;
  uint64_t v22 = a6;
  int v23 = a2;
  int v24 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a3;
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void *)(a7 + 24);
  uint64_t v13 = type metadata accessor for UIViewControllerRepresentableContext();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v22 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v22, v8, v15);
  double v18 = UIViewControllerRepresentableContext.init<A>(_:)((uint64_t)v11, (uint64_t)v17);
  uint64_t v19 = *(uint64_t (**)(uint64_t, double))(v12 + 72);
  char v29 = v23 & 1;
  char v28 = v24 & 1;
  uint64_t v20 = v19(v25, v18);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return v20;
}

double UIViewControllerRepresentableContext.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for UIViewControllerRepresentableContext();
  uint64_t v5 = v4[11];
  uint64_t v6 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v7 = a1 + *(int *)(v6 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, v7, AssociatedTypeWitness);
  *(void *)(a2 + v5) = protocol witness for ArchivedViewHostStates.count.getter in conformance _ArchivedViewHost<A, B>.LegacyStates();
  *(void *)(a2 + v4[9]) = specialized ReferenceFileDocumentConfiguration.document.getter();
  swift_retain();
  swift_retain();
  PlatformViewRepresentableContext.environment.getter(v6, (uint64_t *)&v10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  double result = *(double *)&v10;
  *(_OWORD *)(a2 + v4[10]) = v10;
  return result;
}

uint64_t type metadata accessor for UIViewControllerRepresentableContext()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PlatformViewRepresentableContext.environment.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  if (*(unsigned char *)(v2 + 32) == 1)
  {
    MEMORY[0x1F4188790](a1);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v3, v4, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    return outlined consume of RepresentableContextValues.EnvironmentStorage(v3, v4, 1);
  }
  else
  {
    *a2 = v3;
    a2[1] = v4;
    swift_retain();
    return swift_retain();
  }
}

uint64_t destroy for UIViewControllerRepresentableContext(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  long long v14 = a1[8];
  long long v15 = a1[9];
  long long v16 = a1[6];
  v42[7] = a1[7];
  v42[8] = v14;
  *(_OWORD *)int v43 = v15;
  *(_OWORD *)&v43[9] = *(_OWORD *)((char *)a1 + 153);
  long long v17 = a1[4];
  long long v18 = a1[5];
  long long v19 = a1[2];
  v42[3] = a1[3];
  v42[4] = v17;
  v42[5] = v18;
  v42[6] = v16;
  long long v20 = a1[1];
  v42[0] = *a1;
  v42[1] = v20;
  v42[2] = v19;
  long long v21 = *(_OWORD *)(a2 + 16);
  long long v36 = *(_OWORD *)a2;
  long long v37 = v21;
  char v38 = *(unsigned char *)(a2 + 32);
  outlined init with take of CGSize?((uint64_t)&v36, (uint64_t)v41, &lazy cache variable for type metadata for PreferenceBridge?, MEMORY[0x1E4F3FD08]);
  uint64_t v40 = *((void *)&v36 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)&v37, (uint64_t)v39);
  type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView();
  id v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v42);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v41);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v40);
  outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)v39);
  id v23 = objc_msgSend(v22, sel_init);
  int v24 = v23;
  if (v43[24] == 1)
  {
    id v25 = v23;
    uint64_t v26 = 16;
  }
  else
  {
    uint64_t v27 = *(void *)&v42[0];
    char v28 = BYTE8(v42[0]);
    id v29 = v23;
    outlined copy of Environment<Bool>.Content(v27, v28);
    specialized Environment.wrappedValue.getter(v27, v28, &v35);
    outlined consume of Environment<Bool>.Content(v27, v28);
    uint64_t v30 = 101;
    if (v35 - 3 >= 2) {
      uint64_t v30 = 100;
    }
    if (v35 >= 2u) {
      uint64_t v26 = v30;
    }
    else {
      uint64_t v26 = 3;
    }
  }
  objc_msgSend(v24, sel_setActivityIndicatorViewStyle_, v26);
  objc_msgSend(v24, sel_startAnimating);

  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a2);
  outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v42);
  uint64_t v31 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
  objc_allocWithZone(v32);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v33 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v24, a3, a4, a5, 0, a7, v31);
  swift_release();
  return v33;
}

uint64_t type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView()
{
  return self;
}

uint64_t outlined init with take of RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t outlined retain of RepresentableContextValues.EnvironmentStorage(uint64_t a1)
{
  return a1;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

void *specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  long long v14 = (void *)MEMORY[0x1E4FBC8C8];
  long long v15 = (char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x80);
  *((void *)v15 + 1) = 0;
  swift_unknownObjectWeakInit();
  *((unsigned char *)v7 + *(void *)((*v14 & *v7) + 0x88)) = 2;
  swift_weakInit();
  uint64_t v16 = *(void *)((*v14 & *v7) + 0xA0);
  type metadata accessor for UIView.SafeAreaHelper();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(unsigned char *)(v17 + 48) = 1;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(unsigned char *)(v17 + 88) = 1;
  *(void *)((char *)v8 + v16) = v17;
  int64x2_t v18 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  long long v19 = (int64x2_t *)((char *)v8 + *(void *)((*v14 & *v8) + 0xA8));
  *long long v19 = v18;
  v19[1] = v18;
  *((unsigned char *)v8 + *(void *)((*v14 & *v8) + 0xB0)) = 0;
  *((unsigned char *)v8 + *(void *)((*v14 & *v8) + 0xB8)) = 2;
  long long v20 = (char *)v8 + *(void *)((*v14 & *v8) + 0xC0);
  *(void *)long long v20 = 0;
  *((void *)v20 + 1) = 0;
  v20[16] = 1;
  *((unsigned char *)v8 + *(void *)((*v14 & *v8) + 0xC8)) = 0;
  long long v21 = (char *)v8 + *(void *)((*v14 & *v8) + 0xD0);
  *(_OWORD *)long long v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  v21[48] = 1;
  id v22 = (void *)((char *)v8 + *(void *)((*v14 & *v8) + 0x68));
  *id v22 = a4;
  v22[1] = a5;
  int v31 = a6;
  *(_DWORD *)((char *)v8 + *(void *)((*v14 & *v8) + 0x70)) = a6;
  *(void *)((char *)v8 + *(void *)((*v14 & *v8) + 0x78)) = a1;
  *((void *)v15 + 1) = a3;
  swift_unknownObjectWeakAssign();
  id v23 = (char *)v8 + *(void *)((*v14 & *v8) + 0x90);
  *(void *)id v23 = 0;
  v23[8] = 0;
  *((_DWORD *)v23 + 3) = 0;
  *(void *)((char *)v8 + *(void *)((*v14 & *v8) + 0x60)) = a7;
  v33.receiver = v8;
  v33.super_class = ObjectType;
  swift_retain();
  swift_retain();
  swift_retain();
  int v24 = objc_msgSendSuper2(&v33, sel_initWithHostedView_, 0);
  static Semantics.v6.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    id v25 = objc_msgSend(v24, sel_layer);
    objc_msgSend(v25, sel_setAllowsGroupOpacity_, 0);

    id v26 = objc_msgSend(v24, sel_layer);
    objc_msgSend(v26, sel_setAllowsGroupBlending_, 0);
  }
  uint64_t v27 = *(void *)((char *)v24 + *(void *)((*v14 & *v24) + 0x78));
  v32.receiver = v24;
  v32.super_class = ObjectType;
  objc_msgSendSuper2(&v32, sel_setHostedView_, v27);
  *((unsigned char *)v24 + *(void *)((*v14 & *v24) + 0xB8)) = 2;
  specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(a4, a5, v31);

  swift_unknownObjectRelease();
  swift_release();
  return v24;
}

id @objc LinearUIKitProgressView.Base.SwiftUIProgressView.init(frame:)(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t (*a7)(void))
{
  v12.receiver = a1;
  v12.super_class = (Class)a7(0);
  return objc_msgSendSuper2(&v12, sel_initWithFrame_, a2, a3, a4, a5);
}

unint64_t lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>);
  }
  return result;
}

void protocol witness for PlatformViewRepresentable.updateViewProvider(_:context:) in conformance ListRepresentable<A, B>(char **a1, uint64_t a2, void *a3)
{
}

void ListRepresentable.updateViewProvider(_:context:)(char *a1, uint64_t a2, void *a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v48 = *(_OWORD *)a2;
  long long v49 = v5;
  char v50 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *v3;
  uint64_t v7 = OBJC_IVAR____TtC7SwiftUI39UICollectionViewListCoordinatorBaseBase_backgroundColor;
  uint64_t v8 = *(void **)((char *)*v3 + OBJC_IVAR____TtC7SwiftUI39UICollectionViewListCoordinatorBaseBase_backgroundColor);
  uint64_t v9 = a3[2];
  uint64_t v10 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v12 = a3[5];
  id v13 = v8;
  id v14 = closure #1 in ListRepresentable.updateViewProvider(_:context:)(&v48, v9, v10, v11, v12);
  long long v15 = *(void **)((char *)v6 + v7);
  *(void *)((char *)v6 + v7) = v14;

  uint64_t v16 = *(void **)((char *)v6 + v7);
  if (v8)
  {
    if (v16)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      id v17 = v13;
      id v18 = v16;
      char v19 = static NSObject.== infix(_:_:)();

      if (v19) {
        goto LABEL_7;
      }
    }
  }
  else if (!v16)
  {
    goto LABEL_7;
  }
  id v20 = objc_msgSend(a1, sel_collectionViewLayout);
  objc_msgSend(v20, sel_invalidateLayout);

  objc_msgSend(a1, sel_setBackgroundColor_, *(void *)((char *)v6 + v7));
LABEL_7:
  long long v32 = v48;
  long long v33 = v49;
  LOBYTE(v34) = v50;
  uint64_t v21 = type metadata accessor for PlatformViewRepresentableContext();
  PlatformViewRepresentableContext.environment.getter(v21, v47);
  if (v47[1])
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v22 = MEMORY[0x18C119DF0](&v32);
  uint64_t v23 = *((void *)&v32 + 1);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)&v32);
  swift_release();
  swift_release();
  if (v22)
  {
    int v24 = (uint64_t *)&a1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_safeAreaTransitionState];
    *int v24 = v22;
    v24[1] = v23;
    swift_unknownObjectRelease();
  }
  uint64_t v25 = *(void *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x90));
  long long v32 = v48;
  long long v33 = v49;
  LOBYTE(v34) = v50;
  PlatformViewRepresentableContext.environment.getter(v21, (uint64_t *)v28);
  long long v31 = v28[0];
  ScrollEnvironmentProperties.init(environment:)((uint64_t)&v31, (uint64_t)&v32);
  uint64_t v26 = v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v26, (uint64_t)v28);
  swift_beginAccess();
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)&v32, v26);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)v28);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v32);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v28);
  long long v32 = v48;
  long long v33 = v49;
  LOBYTE(v34) = v50;
  PlatformViewRepresentableContext.environment.getter(v21, (uint64_t *)&v30);
  v28[0] = v30;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v32);
  swift_release();
  swift_release();
  uint64_t v27 = (long long *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
  v28[12] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
  v28[13] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
  v29[0] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
  *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
  v28[8] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
  v28[9] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
  v28[10] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
  v28[11] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
  v28[4] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
  v28[5] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
  v28[6] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
  v28[7] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
  v28[0] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
  v28[1] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
  _OWORD v28[2] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
  v28[3] = *(_OWORD *)(v25 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
  v27[12] = v44;
  v27[13] = v45;
  v27[14] = v46[0];
  *(long long *)((char *)v27 + 233) = *(_OWORD *)((char *)v46 + 9);
  v27[8] = v40;
  v27[9] = v41;
  v27[10] = v42;
  v27[11] = v43;
  v27[4] = v36;
  _OWORD v27[5] = v37;
  v27[6] = v38;
  v27[7] = v39;
  *uint64_t v27 = v32;
  v27[1] = v33;
  v27[2] = v34;
  v27[3] = v35;
  ScrollViewHelper.didChangeMargins(from:)(v28);
}

uint64_t ScrollEnvironmentProperties.init(environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 257;
  *(_DWORD *)(a2 + 84) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 67) = 0u;
  *(_WORD *)(a2 + 88) = 1;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_WORD *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(_WORD *)(a2 + 136) = 0;
  static EdgeInsets.zero.getter();
  *(void *)(a2 + 144) = v4;
  *(void *)(a2 + 152) = v5;
  *(void *)(a2 + 160) = v6;
  *(void *)(a2 + 168) = v7;
  static EdgeInsets.zero.getter();
  *(void *)(a2 + 176) = v8;
  *(void *)(a2 + 184) = v9;
  *(void *)(a2 + 192) = v10;
  *(void *)(a2 + 200) = v11;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined destroy of ScrollEnvironmentProperties(a2);
  *(_OWORD *)(a2 + 160) = v24;
  *(_OWORD *)(a2 + 176) = v25;
  *(_OWORD *)(a2 + 192) = v26;
  *(_OWORD *)(a2 + 96) = v20;
  *(_OWORD *)(a2 + 112) = v21;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v23;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v17;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = v19;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v15;
  EnvironmentValues.layoutDirection.getter();
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)(a2 + 81) = v13;
  if ((*(unsigned char *)a2 & 1) == 0)
  {
    *(unsigned char *)(a2 + 96) = 3;
    *(unsigned char *)(a2 + 120) = 3;
  }
  return result;
}

id closure #1 in ListRepresentable.updateViewProvider(_:context:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v6 = a1[1];
  long long v16 = *a1;
  long long v17 = v6;
  char v18 = *((unsigned char *)a1 + 32);
  *(void *)&long long v13 = a2;
  *((void *)&v13 + 1) = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  type metadata accessor for ListRepresentable();
  uint64_t v7 = type metadata accessor for PlatformViewRepresentableContext();
  PlatformViewRepresentableContext.environment.getter(v7, (uint64_t *)&v19);
  long long v16 = v19;
  uint64_t v8 = EnvironmentValues.scrollContentBackgroundColor.getter();
  swift_release();
  swift_release();
  if (!v8) {
    return 0;
  }
  long long v9 = a1[1];
  long long v16 = *a1;
  long long v17 = v9;
  char v18 = *((unsigned char *)a1 + 32);
  PlatformViewRepresentableContext.environment.getter(v7, (uint64_t *)&v13);
  long long v16 = v13;
  dispatch thunk of AnyColorBox.resolve(in:)();
  swift_release();
  swift_release();
  uint64_t v10 = (void *)Color.Resolved.cgColor.getter();
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v10);
  swift_release();

  return v11;
}

uint64_t type metadata accessor for ListRepresentable()
{
  return swift_getGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

uint64_t EnvironmentValues.scrollContentBackgroundColor.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v4 == 2)
  {
    static Color.clear.getter();
    AnyShapeStyle.init<A>(_:)();
    swift_release();
  }
  else if (!v3)
  {
    return 0;
  }
  uint64_t v1 = ShapeStyle.fallbackColor(in:level:)();
  swift_release();
  return v1;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ActionDispatcherSubscriber.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ActionDispatcherSubscriber.respond(to:)(a1, a2);

  return MEMORY[0x1F40D6900](v2);
}

uint64_t ActionDispatcherSubscriber.respond(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  long long v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!pthread_main_np())
  {
    static os_log_type_t.fault.getter();
    uint64_t v22 = v5;
    uint64_t v15 = static Log.runtimeIssuesLog.getter();
    uint64_t v21 = v3;
    long long v16 = (void *)v15;
    uint64_t v5 = v22;
    os_log(_:dso:log:_:_:)();

    uint64_t v3 = v21;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v6);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v18 = (v12 + v17 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v6;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v17, v14, a2);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v19 + v18, v9, v6);
  onMainThread(do:)();
  return swift_release();
}

void *initializeWithCopy for ActionDispatcherSubscriber(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for CombineIdentifier();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_retain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t View.accessibilitySortPriority(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = a3;
  char v5 = 0;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AC8], (uint64_t)&v4, 1, a1, MEMORY[0x1E4F40AC8], a2);
}

uint64_t View.accessibilityAction(named:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a3 & 1;
  unint64_t v23 = a4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a5;
  *(void *)(v17 + 24) = a6;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  unint64_t v18 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  swift_bridgeObjectRetain();
  swift_retain();
  View.accessibilityAction<A>(_:label:image:_:)((uint64_t)&v20, 0, 0, 0, 0, 0, (uint64_t)partial apply for closure #3 in Menu.init<A>(_:content:primaryAction:), v17, a9, a7, (uint64_t)&type metadata for AccessibilityVoidAction, a8, v18);
  swift_release();
  return outlined consume of AccessibilityActionKind.ActionKind(v20, v21, v22, v23);
}

unint64_t lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>)
  {
    type metadata accessor for MenuStyleModifier<DefaultMenuStyle>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityVoidAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction, (uint64_t)&type metadata for AccessibilityVoidAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>);
  }
  return result;
}

void type metadata accessor for MenuStyleModifier<DefaultMenuStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t View.accessibilityHint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  View.accessibilityHint(_:)(v9, v10, v12 & 1, v14, a2, a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityHint(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  *(unsigned char *)(v12 + 48) = a3 & 1;
  *(void *)(v12 + 56) = a4;
  uint64_t v14 = v12;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B78], (uint64_t)&v14, 1, a5, MEMORY[0x1E4F40B78], a6);
  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityRepresentationModifier.ProxyModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, a2);
  return AccessibilityProxyModifier.init(_:)((uint64_t)v7, a2, a3);
}

uint64_t AccessibilityProxyModifier.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = swift_getKeyPath();
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v6 = a3 + *(int *)(type metadata accessor for AccessibilityProxyModifier() + 36);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(v6, a1, a2);
}

uint64_t View.accessibilityAddTraits(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(long long *__return_ptr, long long *))
{
  *(void *)&long long v8 = *a1;
  a4(&v7, &v8);
  long long v8 = v7;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40BA8], (uint64_t)&v8, 1, a2, MEMORY[0x1E4F40BA8], a3);
}

uint64_t destroy for AccessibilityActionStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = *(void *)(v4 + 24);
  LODWORD(v6) = -1;
  if (v5 < 0xFFFFFFFF) {
    uint64_t v6 = *(void *)(v4 + 24);
  }
  if ((int)v6 - 2 < 0 && v5 >= 2)
  {
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  unint64_t v7 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_release();
}

uint64_t View.accessibilityRespondsToUserInteraction(_:)(char a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    unsigned __int8 v4 = 21;
    return View.accessibilityAddTraits(_:)(&v4, a2, a3);
  }
  else
  {
    unsigned __int8 v5 = 21;
    return View.accessibilityRemoveTraits(_:)(&v5, a2, a3);
  }
}

uint64_t View.accessibilityAddTraits(_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *a1;
  if (v3 >= 0x40) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 1 << v3;
  }
  v6[0] = v4;
  v6[1] = v4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40BA8], (uint64_t)v6, 1, a2, MEMORY[0x1E4F40BA8], a3);
}

uint64_t View.accessibilityRemoveTraits(_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *a1;
  if (v3 >= 0x40) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 1 << v3;
  }
  v6[0] = 0;
  v6[1] = v4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40BA8], (uint64_t)v6, 1, a2, MEMORY[0x1E4F40BA8], a3);
}

uint64_t AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v23[0] = a1;
  v23[1] = a3;
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  type metadata accessor for AccessibilityNavigationLinkButtonModifier.Representable();
  v23[21] = v6;
  v23[22] = type metadata accessor for ModifiedContent();
  v23[23] = type metadata accessor for ModifiedContent();
  v23[24] = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  uint64_t v9 = type metadata accessor for StaticIf();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v23 - v14;
  uint64_t v16 = *v3;
  uint64_t v17 = v3[1];
  v23[10] = v7;
  v23[11] = v8;
  v23[12] = v16;
  v23[13] = v17;
  v23[4] = v7;
  v23[5] = v8;
  v23[6] = v16;
  v23[7] = v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  v23[19] = v8;
  v23[20] = WitnessTable;
  uint64_t v19 = swift_getWitnessTable();
  v23[17] = v8;
  v23[18] = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v22 = swift_getWitnessTable();
  View.staticIf<A, B, C>(context:trueModifier:falseModifier:)();
  v23[15] = v19;
  v23[16] = v22;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v20)(v15, v9);
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for Binding<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>(255, a3, a4);
    a5();
    unint64_t v7 = type metadata accessor for _BackgroundModifier();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>(255, &lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityNavigationLinkButtonModifier.Attachment()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityDefaultActionRepresentableConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AccessibilityDefaultActionRepresentableConfiguration.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v24[2] = a1;
  v24[3] = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  v24[0] = type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>(255, &lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v24[1] = type metadata accessor for ModifiedContent();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v24 - v11;
  long long v13 = v3[1];
  v25[0] = *v3;
  v25[1] = v13;
  long long v14 = v3[3];
  void v25[2] = v3[2];
  v25[3] = v14;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = *(void *)(a2 + 24);
  *(void *)(v15 + 16) = v5;
  *(void *)(v15 + 24) = v16;
  long long v17 = v3[1];
  *(_OWORD *)(v15 + 32) = *v3;
  *(_OWORD *)(v15 + 48) = v17;
  long long v18 = v3[3];
  *(_OWORD *)(v15 + 64) = v3[2];
  *(_OWORD *)(v15 + 80) = v18;
  uint64_t v19 = outlined retain of AccessibilityButtonModifier<A>(v25);
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in AccessibilityDefaultActionRepresentableConfiguration.body(content:), v15, v5, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, v16, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t)v9);
  swift_release();
  v24[12] = v16;
  v24[13] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v21 = lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>();
  v24[10] = WitnessTable;
  v24[11] = v21;
  v24[8] = swift_getWitnessTable();
  v24[9] = &protocol witness table for AccessibilityAttachmentModifier;
  v24[6] = swift_getWitnessTable();
  v24[7] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v24[4] = swift_getWitnessTable();
  v24[5] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v22)(v12, v6);
}

uint64_t outlined init with take of AppIntentAction?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for AppIntentAction?, (uint64_t)&type metadata for AppIntentAction, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void AccessibilityCustomPropertyModifier.PropertyChild.value.getter()
{
  uint64_t v0 = type metadata accessor for ZStack();
  MEMORY[0x1F4188790](v0);
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  swift_getWitnessTable();
  View.accessibilityRepresentationStyle()();
}

uint64_t sub_18740D22C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void closure #1 in View.accessibilityAttachment<A>(content:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  v16[10] = a1;
  v16[11] = a2;
  v16[12] = a4;
  uint64_t v5 = type metadata accessor for ModifiedContent();
  v16[5] = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  v16[6] = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  v16[7] = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  _OWORD v16[2] = (char *)v16 - v8;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  v16[9] = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  v16[3] = (char *)v16 - v10;
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  v16[8] = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  v16[1] = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  void v16[4] = (char *)v16 - v15;
  MEMORY[0x18C113660](v14);
  v16[21] = a3;
  v16[22] = &protocol witness table for DetachedGeometryModifier;
  swift_getWitnessTable();
  View.accessibilityRepresentationStyle()();
}

void sub_18740D5BC()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 232) + 8))(v0, v4);
  unint64_t v6 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  *(void *)(v5 - 120) = v1;
  *(void *)(v5 - 112) = v6;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](WitnessTable, v2, &type metadata for EnableDeferredAccessibilityAttachmentModifier, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 224) + 8))(v3, v2);
  *(void *)(v5 - 136) = WitnessTable;
  *(void *)(v5 - 128) = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  swift_getWitnessTable();
  View.hidden()();
}

uint64_t sub_18740D668()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 216) + 8))(v5, v4);
  *(void *)(v6 - 152) = v0;
  *(void *)(v6 - 144) = &protocol witness table for _HiddenModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = *(void *)(v6 - 264);
  View.transformPreference<A>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 200) + 8))(v1, v3);
  unint64_t v9 = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
  *(void *)(v6 - 168) = WitnessTable;
  *(void *)(v6 - 160) = v9;
  swift_getWitnessTable();
  uint64_t v10 = *(void *)(v6 - 240);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 208) + 8);
  v11(v8, v2);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v10, v2);
}

void View.accessibilityRepresentationStyle()()
{
}

void View.hidden()()
{
}

uint64_t View.accessibilityAttachment<A>(content:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v45 = a7;
  uint64_t v47 = a6;
  uint64_t v46 = a5;
  uint64_t v50 = a3;
  uint64_t v49 = a2;
  uint64_t v48 = a1;
  uint64_t v52 = a8;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v51 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v36 - v11;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v76 = a7;
  long long v77 = &protocol witness table for DetachedGeometryModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v15 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  uint64_t v74 = WitnessTable;
  unint64_t v75 = v15;
  uint64_t v72 = swift_getWitnessTable();
  id v73 = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  uint64_t v70 = swift_getWitnessTable();
  id v71 = &protocol witness table for _HiddenModifier;
  uint64_t v16 = swift_getWitnessTable();
  unint64_t v17 = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
  uint64_t v68 = v16;
  unint64_t v69 = v17;
  uint64_t v39 = v13;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v40 = type metadata accessor for _BackgroundModifier();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v43 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v36 - v22;
  uint64_t v41 = type metadata accessor for ModifiedContent();
  uint64_t v44 = *(void *)(v41 - 8);
  double v24 = MEMORY[0x1F4188790](v41);
  long long v37 = (char *)&v36 - v25;
  long long v26 = v12;
  uint64_t v27 = v47;
  MEMORY[0x18C113660](v24);
  uint64_t v53 = a4;
  uint64_t v54 = v46;
  uint64_t v55 = v27;
  uint64_t v56 = v45;
  uint64_t v57 = v48;
  uint64_t v58 = v49;
  uint64_t v59 = v50;
  static Alignment.center.getter();
  uint64_t v66 = v27;
  uint64_t v67 = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  uint64_t v28 = swift_getWitnessTable();
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v26, v10);
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v64 = v28;
  uint64_t v65 = v29;
  uint64_t v30 = swift_getWitnessTable();
  View.accessibility()(v18, v30);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v18);
  uint64_t v62 = v30;
  uint64_t v63 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v31 = swift_getWitnessTable();
  long long v32 = v37;
  MEMORY[0x18C113660](v31, v21, &type metadata for DetachDeferredAccessibilityAttachmentModifier, v31);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v23, v21);
  uint64_t v60 = v31;
  uint64_t v61 = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  uint64_t v33 = v41;
  uint64_t v34 = swift_getWitnessTable();
  MEMORY[0x18C113660](v34, v33, &type metadata for EnableDeferredAccessibilityAttachmentModifier, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v32, v33);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>()
{
  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>);
    }
  }
}

uint64_t View.accessibility()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  uint64_t v4 = v8;
  type metadata accessor for _GraphValue<AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v7;
  *(void *)(v5 + 24) = v4;
  uint64_t v7 = v5;
  uint64_t v8 = 0;
  MEMORY[0x18C113660](&v7, a1, &type metadata for AccessibilityAttachmentModifier, a2);
  return swift_release();
}

uint64_t *outlined retain of NavigationTitleStorage(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  outlined copy of Text?(*a1, a1[1], a1[2], a1[3]);
  outlined copy of Transaction?(v2);
  swift_retain();
  return a1;
}

uint64_t View.accessibilityAction(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *, void, void, void, void, void, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  unint64_t v15 = a1[3];
  uint64_t v21 = *a1;
  uint64_t v12 = v21;
  uint64_t v22 = v13;
  uint64_t v23 = v14;
  unint64_t v24 = v15;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  outlined copy of AccessibilityActionKind.ActionKind(v12, v13, v14, v15);
  unint64_t v17 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  swift_retain();
  a8(&v21, 0, 0, 0, 0, 0, a7, v16, a4, &type metadata for AccessibilityVoidAction, a5, v17);
  swift_release();
  return outlined consume of AccessibilityActionKind.ActionKind(v21, v22, v23, v24);
}

unint64_t lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction;
  if (!lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction;
  if (!lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction);
  }
  return result;
}

uint64_t View.accessibilityAction<A>(_:label:image:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = a10;
  v18[3] = a11;
  void v18[4] = a12;
  v18[5] = a13;
  v18[6] = a7;
  v18[7] = a8;
  swift_retain();
  View.accessibilityAction<A>(_:label:image:_:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in View.accessibilityAction<A>(_:label:image:_:), (uint64_t)v18, a9, a10, a11, a12, a13);

  return swift_release();
}

{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v27 = a8;
  uint64_t v28 = a7;
  uint64_t v25 = a1;
  uint64_t v30 = a9;
  uint64_t v31 = a10;
  uint64_t v18 = *(void *)(a11 - 8);
  uint64_t v29 = a12;
  long long v26 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyAccessibilityAction?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, MEMORY[0x1E4FBBE00]);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v25, a11);
  outlined copy of Text?(a2, a3, a4, a5);
  swift_retain();
  uint64_t v22 = v27;
  swift_retain();
  AnyAccessibilityAction.init<A>(action:label:image:handler:bridged:)((uint64_t)v20, a2, a3, a4, a5, a6, v28, v22, v21 + 32, 0, a11);
  long long v32 = v21;
  lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v32, 1, v31, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v29);
  return swift_bridgeObjectRelease();
}

uint64_t AnyAccessibilityAction.init<A>(action:label:image:handler:bridged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v23 = a8;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v28 = a9;
  uint64_t v15 = *(void *)(a11 - 8);
  int v27 = a10;
  MEMORY[0x1F4188790](a1);
  unint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AccessibilityActionStorage();
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, a1, a11, v19);
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  uint64_t v31 = 2;
  AccessibilityActionStorage.init(action:category:label:image:handler:)((uint64_t)v17, &v29, a2, a3, a4, v24, v25, v26, (uint64_t)v21, v23, a11);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, a11);
  swift_getWitnessTable();
  return AnyAccessibilityAction.init<A>(_:bridged:)((uint64_t)v21, v27, v18, v28);
}

uint64_t destroy for AccessibilityActionKind(uint64_t result)
{
  if (*(void *)(result + 24) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityActionStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityActionKind(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 >= 5)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t View.accessibilityLabel<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  View.accessibilityLabel(_:)(v9, v10, v12 & 1, v14, a2, a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityHidden(_:)(char a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v3 = 0x400000004;
  }
  else {
    uint64_t v3 = 0x400000000;
  }
  uint64_t v5 = v3;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AA8], (uint64_t)&v5, 1, a2, MEMORY[0x1E4F40AA8], a3);
}

uint64_t View.accessibilityLabel(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  *(unsigned char *)(v12 + 48) = a3 & 1;
  *(void *)(v12 + 56) = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  uint64_t v14 = v12;
  char v15 = 2;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B88], (uint64_t)&v14, 1, a5, MEMORY[0x1E4F40B88], a6);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityIdentifier(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = a1;
  v5[1] = a2;
  char v6 = 0;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40A98], (uint64_t)v5, 1, a3, MEMORY[0x1E4F40A98], a4);
}

uint64_t View.accessibility<A>(_:_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  if (a3)
  {
    (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)v19 - v11, a2, v13);
    AccessibilityProperties.init<A>(_:_:)();
    uint64_t v14 = v20;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v14 = Dictionary.init(minimumCapacity:)();
  }
  v19[1] = v14;
  AccessibilityAttachment.init(properties:)();
  uint64_t v15 = v20;
  uint64_t v16 = v21;
  type metadata accessor for _GraphValue<AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  *(void *)(v17 + 24) = v16;
  uint64_t v20 = v17;
  uint64_t v21 = 0;
  MEMORY[0x18C113660](&v20, a4, &type metadata for AccessibilityAttachmentModifier, a6);
  return swift_release();
}

void type metadata accessor for _GraphValue<AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t AccessibilityActionStorage.init(action:category:label:image:handler:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  long long v25 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  uint64_t v17 = *((void *)a2 + 3);
  uint64_t v26 = *(void *)(a11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(a9, a1, a11);
  uint64_t v18 = (int *)type metadata accessor for AccessibilityActionStorage();
  uint64_t v19 = a9 + v18[9];
  *(_OWORD *)uint64_t v19 = v25;
  *(void *)(v19 + 16) = v16;
  *(void *)(v19 + 24) = v17;
  uint64_t v20 = (void *)(a9 + v18[10]);
  *uint64_t v20 = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  *(void *)(a9 + v18[11]) = a7;
  uint64_t v21 = (void *)(a9 + v18[12]);
  *uint64_t v21 = a8;
  v21[1] = a10;
  Swift::UInt32 v22 = AccessibilityActionHandlerSeed;
  *(_DWORD *)(a9 + v18[13]) = AccessibilityActionHandlerSeed;
  AccessibilityActionHandlerSeed = v22 + 1;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);

  return v23(a1, a11);
}

uint64_t AnyAccessibilityAction.init<A>(_:bridged:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = type metadata accessor for AnyAccessibilityAction.ConcreteBase();
  *(void *)(a4 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  *(unsigned char *)(a4 + 40) = a2;
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityAction.ConcreteBase()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AnyAccessibilityAction?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for AnyAccessibilityAction);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined consume of AccessibilityActionKind.ActionKind(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 >= 5)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of AccessibilityActionKind.ActionKind(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 >= 5)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t closure #2 in AccessibilityProxyModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v7 = type metadata accessor for VStack();
  v31[3] = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v36 = v8;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  v31[4] = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v34 = v10;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  v31[1] = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  void v31[2] = (char *)v31 - v15;
  uint64_t v33 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v32 = (uint64_t)v31 - v20;
  type metadata accessor for AccessibilityProxyModifier();
  uint64_t v21 = AccessibilityProxyModifier.accessibilityEnabled.getter();
  if (v21)
  {
    v31[0] = v31;
    MEMORY[0x1F4188790](v21);
    v31[-4] = a2;
    v31[-3] = a3;
    v31[-2] = a1;
    static HorizontalAlignment.center.getter();
    VStack.init(alignment:spacing:content:)();
    swift_getWitnessTable();
    View.hiddenAllowingAccessibility()();
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v18, 1, 1, v11);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v45 = &protocol witness table for HiddenModifierAllowingAccessibility;
  uint64_t v22 = swift_getWitnessTable();
  unint64_t v23 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  uint64_t v42 = v22;
  unint64_t v43 = v23;
  swift_getWitnessTable();
  uint64_t v24 = v32;
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v18, v32);
  long long v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v26 = v18;
  uint64_t v27 = v33;
  v25(v26, v33);
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = &protocol witness table for HiddenModifierAllowingAccessibility;
  uint64_t v28 = swift_getWitnessTable();
  unint64_t v29 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  uint64_t v38 = v28;
  unint64_t v39 = v29;
  uint64_t v37 = swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(uint64_t, uint64_t))v25)(v24, v27);
}

unint64_t lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityProxyModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static ToolbarContentBuilder.buildIf<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t AccessibilityProxyModifier.accessibilityEnabled.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(v1, v2);
  char v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<Bool>.Content(v1, v2);
  return v3 & 1;
}

uint64_t type metadata accessor for AnyAlwaysOnBridge()
{
  return self;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonStyleContainerModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for BorderedButtonColorSpec.LabelStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AVKitPressableCaptureButton()
{
  return &type metadata for AVKitPressableCaptureButton;
}

ValueMetadata *type metadata accessor for AVKitPressableCaptureButton.Phase()
{
  return &type metadata for AVKitPressableCaptureButton.Phase;
}

ValueMetadata *type metadata accessor for ContentMarginPlacement.Role()
{
  return &type metadata for ContentMarginPlacement.Role;
}

uint64_t protocol witness for Rule.value.getter in conformance _TaskValueModifier<A>.Child@<X0>(uint64_t a1@<X8>)
{
  return _TaskValueModifier.Child.value.getter(a1);
}

ValueMetadata *type metadata accessor for PlatterButtonStyle()
{
  return &type metadata for PlatterButtonStyle;
}

ValueMetadata *type metadata accessor for FocusableOptions()
{
  return &type metadata for FocusableOptions;
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of SheetPreference.Value((uint64_t)&static SheetPreference.defaultValue, a2);
}

uint64_t base witness table accessor for _AttributeBody in MakeBody<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in LabelStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in LabelStyleModifier<A>()
{
  return swift_getWitnessTable();
}

void type metadata completion function for UIKitDialogBridge()
{
  type metadata accessor for DialogActionContext?(319, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t UIKitDialogBridge.__deallocating_deinit()
{
  UIKitDialogBridge.deinit();

  return swift_deallocClassInstance();
}

uint64_t UIKitDialogBridge.deinit()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _s7SwiftUI32CustomRecursiveStringConvertible_pSgWOhTm_0(v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t outlined destroy of CustomRecursiveStringConvertible?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI32CustomRecursiveStringConvertible_pSgWOhTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for DialogActionContext?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for DialogActionContext?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t UIHostingViewBase.__deallocating_deinit()
{
  UIHostingViewBase.deinit();

  return swift_deallocClassInstance();
}

uint64_t @objc PlatformViewHost.__ivar_destroyer(void *a1)
{
  char v2 = (void *)MEMORY[0x1E4FBC8C8];
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = (char *)a1 + *(void *)((*v2 & *a1) + 0x78);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v3, AssociatedTypeWitness);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)a1 + *(void *)((*v2 & *a1) + 0x80));
  swift_release();
  swift_weakDestroy();
  swift_release();
  uint64_t v5 = (uint64_t)a1 + *(void *)((*v2 & *a1) + 0xC0);

  return outlined destroy of PlatformViewLayoutInvalidator?(v5);
}

uint64_t UIViewResponder.__deallocating_deinit()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(v0 + 160);
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(uint64_t a1)
{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?, (uint64_t)&type metadata for PlatformViewResponderBase.PlatformHitTestResult, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ContainerBackgroundBridge.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);
  swift_release();
  outlined destroy of weak FallbackResponderProvider?(v0 + 64);
  outlined consume of ContainerBackgroundValue?(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104));

  return swift_deallocClassInstance();
}

uint64_t UIHostingViewBase.deinit()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);
  outlined destroy of weak FallbackResponderProvider?(v0 + 40);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of EnvironmentValues?(*(void *)(v0 + 120));
  outlined consume of EnvironmentValues?(*(void *)(v0 + 136));
  outlined consume of EnvironmentValues?(*(void *)(v0 + 152));

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t specialized EnvironmentValues.safeAreaTransitionState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  swift_unknownObjectWeakInit();
  outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value((uint64_t)v5, (uint64_t)&v4);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of weak FallbackResponderProvider?((uint64_t)v5);
}

uint64_t EnvironmentValues.safeAreaTransitionState.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v1 = MEMORY[0x18C119DF0](&v3);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)&v3);
  return v1;
}

uint64_t outlined destroy of weak FallbackResponderProvider?(uint64_t a1)
{
  return a1;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

double ContainerBackgroundRendererModifier.ChildEnvironment.value.getter@<D0>(int a1@<W1>, _OWORD *a2@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *Value;
  uint64_t v5 = Value[1];
  *(void *)&long long v18 = v6;
  *((void *)&v18 + 1) = v5;
  swift_retain();
  swift_retain();
  ContainerBackgroundRendererModifier.ChildEnvironment.background.getter(a1, &v14);
  uint64_t v7 = v17;
  outlined consume of ContainerBackgroundValue?(v14, v15, v16, v17);
  char v8 = 0;
  if (v7 != 1)
  {
    ContainerBackgroundRendererModifier.ChildEnvironment.background.getter(a1, &v14);
    uint64_t v9 = v17;
    if (v17 != 1)
    {
      unint64_t v10 = v15;
      uint64_t v11 = v16;
      if (!(v15 >> 62))
      {
        outlined consume of ContainerBackgroundValue?(v14, v15, v16, v17);
        char v8 = 1;
        goto LABEL_9;
      }
      if (v15 >> 62 == 1)
      {
        uint64_t v12 = swift_retain();
        outlined consume of ContainerBackgroundValue?(v12, v10, v11, v9);
        swift_release();
        char v8 = 1;
        goto LABEL_9;
      }
      outlined consume of ContainerBackgroundValue?(v14, v15, v16, v17);
    }
    char v8 = 0;
  }
LABEL_9:
  type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E4F40140], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBBC08]);
  AGGraphGetValue();
  LOBYTE(v14) = v8;
  swift_retain();
  swift_setAtWritableKeyPath();
  swift_release();
  double result = *(double *)&v18;
  *a2 = v18;
  return result;
}

uint64_t outlined consume of ContainerBackgroundValue?(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    outlined consume of ContainerBackgroundValue.Content(result, a2);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void ContainerBackgroundRendererModifier.ChildEnvironment.background.getter(int a1@<W1>, void *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 1;
    a2[4] = 0;
    a2[5] = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v5 = *(void *)Value;
    unint64_t v4 = *(void *)(Value + 8);
    char v6 = *(unsigned char *)(Value + 16);
    uint64_t v7 = *(void *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 32);
    uint64_t v9 = *(void *)(Value + 40);
    *a2 = *(void *)Value;
    a2[1] = v4;
    *((unsigned char *)a2 + 16) = v6;
    a2[3] = v7;
    a2[4] = v8;
    a2[5] = v9;
    outlined copy of ContainerBackgroundValue.Content(v5, v4);
    swift_retain();
    swift_retain();
    swift_retain();
  }
}

void UITabBarController.identifiedViewTree.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_selectedViewController);
  if (v3)
  {
    unint64_t v4 = v3;
    type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    uint64_t v5 = swift_dynamicCastClass();
    if (v5)
    {
      char v6 = *(void **)(v5 + direct field offset for UIHostingController.host);
      type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(0, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
      id v7 = v6;
      ViewRendererHost.preferenceValue<A>(_:)();

      outlined init with copy of _IdentifiedViewTree((uint64_t)v15, (uint64_t)v13);
      if (v14 != 2
        || (int8x16_t v8 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v13[2], v13[6]), vorrq_s8(v13[4], v13[8])), vorrq_s8(vorrq_s8(v13[3], v13[7]), vorrq_s8(v13[5], v13[9]))), vorrq_s8(v13[0], v13[1])), *(void *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))))
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v13);
        outlined init with copy of _IdentifiedViewTree((uint64_t)v15, (uint64_t)v13);
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
        unint64_t v11 = *((void *)v9 + 2);
        unint64_t v10 = *((void *)v9 + 3);
        if (v11 >= v10 >> 1) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v11 + 1;
        outlined init with take of _IdentifiedViewTree((uint64_t)v13, (uint64_t)&v9[168 * v11 + 32]);

        outlined destroy of _IdentifiedViewTree((uint64_t)v15);
        if (!*((void *)v9 + 2)) {
          goto LABEL_8;
        }
LABEL_12:
        char v12 = 1;
        goto LABEL_13;
      }
      outlined destroy of _IdentifiedViewTree((uint64_t)v15);

      outlined destroy of _IdentifiedViewTree((uint64_t)v13);
    }
    else
    {
    }
  }
  uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_12;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  uint64_t v9 = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  char v12 = 2;
  *(_OWORD *)(a1 + 8) = 0u;
LABEL_13:
  *(void *)a1 = v9;
  *(unsigned char *)(a1 + 160) = v12;
}

uint64_t outlined destroy of _IdentifiedViewTree(uint64_t a1)
{
  return a1;
}

uint64_t static SubscriptionView._makeView(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  int v23 = *(_DWORD *)(a2 + 8);
  int v24 = *(_DWORD *)(a2 + 80);
  int v25 = *a1;
  int v11 = v25;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  type metadata accessor for SubscriptionView();
  type metadata accessor for _GraphValue();
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  long long v21 = *(_OWORD *)(a2 + 56);
  long long v22 = *(_OWORD *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 72);
  int v17 = _GraphValue.value.getter();
  type metadata accessor for SubscriptionLifetime();
  int v25 = v17;
  uint64_t v26 = SubscriptionLifetime.__allocating_init()();
  uint64_t v27 = default argument 2 of SubscriptionView.Subscriber.init(view:subscriptionLifetime:actionBox:)(a3, a4, a5, a6);
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v33 = type metadata accessor for SubscriptionView.Subscriber();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v25, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v32, v33, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
  swift_release();
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  LODWORD(v35) = v11;
  _GraphValue.subscript.getter();
  uint64_t v35 = v12;
  LODWORD(v36) = v23;
  uint64_t v37 = v13;
  uint64_t v38 = v14;
  uint64_t v39 = v15;
  long long v40 = v22;
  long long v41 = v21;
  uint64_t v42 = v16;
  int v43 = v24;
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t static SubscriptionView._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = *(void *)a2;
  int v12 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  long long v25 = *(_OWORD *)(a2 + 40);
  uint64_t v24 = *(void *)(a2 + 56);
  int v23 = *(_DWORD *)(a2 + 64);
  uint64_t v22 = *(void *)(a2 + 72);
  char v21 = *(unsigned char *)(a2 + 80);
  int v26 = *a1;
  int v11 = v26;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  type metadata accessor for SubscriptionView();
  type metadata accessor for _GraphValue();
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  int v16 = _GraphValue.value.getter();
  type metadata accessor for SubscriptionLifetime();
  int v26 = v16;
  uint64_t v27 = SubscriptionLifetime.__allocating_init()();
  uint64_t v28 = default argument 2 of SubscriptionView.Subscriber.init(view:subscriptionLifetime:actionBox:)(a3, a4, a5, a6);
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v34 = type metadata accessor for SubscriptionView.Subscriber();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v33, v34, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  swift_release();
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  LODWORD(v36) = v11;
  _GraphValue.subscript.getter();
  uint64_t v36 = v20;
  LODWORD(v37) = v12;
  uint64_t v38 = v13;
  uint64_t v39 = v14;
  uint64_t v40 = v15;
  long long v41 = v25;
  uint64_t v42 = v24;
  int v43 = v23;
  uint64_t v44 = v22;
  char v45 = v21;
  return static View.makeDebuggableViewList(view:inputs:)();
}

uint64_t type metadata accessor for SubscriptionView.Subscriber()
{
  return swift_getGenericMetadata();
}

uint64_t default argument 2 of SubscriptionView.Subscriber.init(view:subscriptionLifetime:actionBox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for MutableBox();
  int8x16_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v10[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v10[1] = v8;
  return MEMORY[0x18C10C050](v10);
}

uint64_t View.onGeometryChange<A>(of:do:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a3;
  void v11[3] = a4;
  uint64_t v9 = type metadata accessor for _GeometryActionModifier();
  swift_retain();
  swift_retain();
  MEMORY[0x18C113660](v11, a5, v9, a7);
  swift_release();
  return swift_release();
}

uint64_t static _GeometryActionModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _GeometryActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))type metadata accessor for _GeometryActionModifier, a7, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7);
}

uint64_t static NavigationTransition<>.zoom<A>(sourceID:in:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = _convertToAnyHashable<A>(_:)();
  *a2 = a1;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
    }
  }
}

void *DragAndDropBridge.hitTestedResponder(session:)(void *a1)
{
  uint64_t v3 = v1 + direct field offset for DragAndDropBridge.host;
  uint64_t result = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    uint64_t v5 = result;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    uint64_t v6 = ViewRendererHost.responderNode.getter();

    if (!v6) {
      return 0;
    }
    type metadata accessor for ViewResponder();
    if (!swift_dynamicCastClass())
    {
LABEL_7:
      swift_release();
      return 0;
    }
    uint64_t result = (void *)MEMORY[0x18C119DF0](v3);
    if (result)
    {
      id v7 = result;
      id v8 = objc_msgSend(result, sel_window);

      if (v8)
      {
        MEMORY[0x18C113CA0](objc_msgSend(a1, sel_locationInView_, v8));
        uint64_t v9 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
        static Update.end()();
        swift_release();

        return (void *)v9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static _GeometryActionModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, double)@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v61 = a4;
  uint64_t v62 = a3;
  uint64_t v60 = a8;
  uint64_t v59 = a9;
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v57 = (char *)&v45 - v15;
  uint64_t v16 = type metadata accessor for ValueCycleDetector();
  double v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v54 = (char *)&v45 - v18;
  uint64_t v19 = a7(255, a5, a6, v17);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v49 = v19;
  uint64_t v56 = type metadata accessor for GeometryActionBinder();
  uint64_t v58 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v55 = (int *)((char *)&v45 - v20);
  LODWORD(v20) = *a1;
  uint64_t v21 = *(void *)a2;
  int v73 = *(_DWORD *)(a2 + 8);
  LODWORD(a5) = v73;
  uint64_t v76 = *(void *)(a2 + 16);
  uint64_t v22 = v76;
  int v77 = *(_DWORD *)(a2 + 24);
  int v23 = *(_DWORD *)(a2 + 32);
  int v75 = *(_DWORD *)(a2 + 28);
  int v24 = *(_DWORD *)(a2 + 36);
  uint64_t v25 = *(void *)(a2 + 48);
  uint64_t v74 = *(void *)(a2 + 40);
  int v65 = *(_DWORD *)(a2 + 56);
  LODWORD(a1) = v65;
  int v26 = *(_DWORD *)(a2 + 64);
  int v67 = *(_DWORD *)(a2 + 60);
  int v71 = v26;
  int v69 = *(_DWORD *)(a2 + 68);
  int v68 = *(_DWORD *)(a2 + 72);
  int v66 = *(_DWORD *)(a2 + 76);
  int v70 = *(_DWORD *)(a2 + 80);
  LODWORD(v84) = v20;
  type metadata accessor for _GraphValue();
  int v53 = _GraphValue.value.getter();
  uint64_t v84 = v21;
  int v85 = a5;
  uint64_t v87 = v22;
  LODWORD(a5) = v77;
  LODWORD(v19) = v75;
  int v88 = v77;
  int v89 = v75;
  int v90 = v23;
  int v91 = v24;
  LODWORD(v22) = v24;
  uint64_t v27 = v74;
  uint64_t v92 = v74;
  uint64_t v93 = v25;
  uint64_t v72 = v25;
  int v94 = (int)a1;
  LODWORD(a1) = v67;
  int v95 = v67;
  int v96 = v26;
  int v97 = v69;
  int v98 = v68;
  int v28 = v66;
  int v99 = v66;
  int v100 = v70;
  int v51 = _ViewInputs.position.getter();
  uint64_t v84 = v21;
  int v85 = v73;
  uint64_t v87 = v76;
  int v88 = a5;
  int v89 = v19;
  int v90 = v23;
  int v91 = v22;
  uint64_t v92 = v27;
  uint64_t v93 = v25;
  LODWORD(v25) = v65;
  int v94 = v65;
  int v95 = (int)a1;
  LODWORD(v27) = v71;
  LODWORD(a1) = v69;
  int v96 = v71;
  int v97 = v69;
  LODWORD(a5) = v68;
  int v98 = v68;
  int v99 = v28;
  LODWORD(v19) = v70;
  int v100 = v70;
  int v50 = _ViewInputs.size.getter();
  uint64_t v84 = v21;
  int v29 = v73;
  int v85 = v73;
  uint64_t v87 = v76;
  int v88 = v77;
  int v89 = v75;
  int v90 = v23;
  int v91 = v22;
  int v63 = v22;
  uint64_t v92 = v74;
  uint64_t v93 = v72;
  int v94 = v25;
  int v95 = v67;
  int v96 = v27;
  int v97 = (int)a1;
  LODWORD(v27) = a5;
  LODWORD(a1) = v66;
  int v98 = a5;
  int v99 = v66;
  int v100 = v19;
  int v47 = _ViewInputs.transform.getter();
  uint64_t v84 = v21;
  uint64_t v30 = v21;
  uint64_t v64 = v21;
  int v85 = v29;
  uint64_t v87 = v76;
  LODWORD(a5) = v77;
  int v88 = v77;
  int v89 = v75;
  int v90 = v23;
  int v91 = v22;
  uint64_t v92 = v74;
  uint64_t v93 = v72;
  LODWORD(v21) = v67;
  int v94 = v25;
  int v95 = v67;
  int v96 = v71;
  int v97 = v69;
  int v98 = v27;
  int v99 = (int)a1;
  LODWORD(v27) = v70;
  int v100 = v70;
  int v46 = _ViewInputs.environment.getter();
  uint64_t v84 = v30;
  int v85 = v29;
  uint64_t v31 = v76;
  uint64_t v87 = v76;
  LODWORD(v22) = v75;
  int v88 = a5;
  int v89 = v75;
  int v48 = v23;
  int v32 = v63;
  int v90 = v23;
  int v91 = v63;
  uint64_t v33 = v74;
  uint64_t v34 = v72;
  uint64_t v92 = v74;
  uint64_t v93 = v72;
  int v94 = v25;
  int v95 = v21;
  LODWORD(v25) = v71;
  LODWORD(v21) = v69;
  int v96 = v71;
  int v97 = v69;
  int v98 = v68;
  int v99 = v66;
  int v100 = v27;
  int v45 = _ViewInputs.safeAreaInsets.getter();
  uint64_t v84 = v64;
  int v85 = v73;
  uint64_t v87 = v31;
  int v88 = v77;
  int v89 = v22;
  int v90 = v23;
  int v91 = v32;
  uint64_t v92 = v33;
  uint64_t v93 = v34;
  int v35 = v67;
  int v94 = v65;
  int v95 = v67;
  int v96 = v25;
  int v97 = v21;
  LODWORD(v34) = v68;
  LODWORD(v25) = v66;
  int v98 = v68;
  int v99 = v66;
  int v100 = v27;
  LODWORD(a2) = _ViewInputs.viewPhase.getter();
  uint64_t v36 = (uint64_t)v54;
  default argument 7 of GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)();
  default argument 8 of GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)((uint64_t)&v84);
  uint64_t v81 = v84;
  char v83 = v86;
  int v82 = v85;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = (uint64_t)v57;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v57, 1, 1, AssociatedTypeWitness);
  uint64_t v39 = v55;
  GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)(v53, v51, v50, v47, v46, v45, a2, v36, v55, &v81, 0, 0, v38);
  uint64_t v40 = v56;
  uint64_t v79 = v56;
  uint64_t v80 = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v39, v59, (uint64_t)v78, v40, MEMORY[0x1E4FBC248], v41, MEMORY[0x1E4FBC278], v42);
  (*(void (**)(_DWORD *, uint64_t))(v58 + 8))(v39, v40);
  static AGAttributeFlags.transactional.getter();
  uint64_t v43 = AGGraphSetFlags();
  uint64_t v84 = v64;
  int v85 = v73;
  uint64_t v87 = v76;
  int v88 = v77;
  int v89 = v75;
  int v90 = v48;
  int v91 = v63;
  uint64_t v92 = v74;
  uint64_t v93 = v72;
  int v94 = v65;
  int v95 = v35;
  int v96 = v71;
  int v97 = v21;
  int v98 = v34;
  int v99 = v25;
  int v100 = v70;
  return v62(v43, &v84);
}

uint64_t type metadata accessor for _GeometryActionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GeometryActionBinder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithTake for UIKitPageIndexView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 24 + a1) & ~v6;
  uint64_t v8 = (v6 + 24 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  int v11 = (void *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  return a1;
}

void type metadata accessor for Attribute<()>()
{
  if (!lazy cache variable for type metadata for Attribute<()>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>);
    }
  }
}

uint64_t default argument 8 of GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)@<X0>(uint64_t a1@<X8>)
{
  static Semantics.v6.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0x200000000;
  }
  else
  {
    uint64_t result = UpdateCycleDetector.init()();
    uint64_t v3 = v6;
    uint64_t v5 = 0x100000000;
    if (!v8) {
      uint64_t v5 = 0;
    }
    uint64_t v4 = v5 | v7;
  }
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 12) = BYTE4(v4);
  return result;
}

uint64_t default argument 7 of GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();

  return MEMORY[0x1F40FF7B8](AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, _DWORD *a9@<X8>, uint64_t *a10, int a11, int a12, uint64_t a13)
{
  uint64_t v14 = *a10;
  int v15 = *((_DWORD *)a10 + 2);
  char v16 = *((unsigned char *)a10 + 12);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  double v17 = (int *)type metadata accessor for GeometryActionBinder();
  uint64_t v18 = (char *)a9 + v17[15];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for ValueCycleDetector();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a8, v19);
  uint64_t v20 = (char *)a9 + v17[16];
  *(void *)uint64_t v20 = v14;
  v20[12] = v16;
  *((_DWORD *)v20 + 2) = v15;
  *(_DWORD *)((char *)a9 + v17[17]) = a11;
  *(_DWORD *)((char *)a9 + v17[18]) = a12;
  uint64_t v21 = (char *)a9 + v17[19];
  uint64_t v22 = type metadata accessor for Optional();
  int v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32);

  return v23(v21, a13, v22);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ShadowRowCollection<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for [FocusableBounds]?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for _ContiguousArrayStorage<FocusableBounds>(255, a3, a4, MEMORY[0x1E4FBB320]);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

Swift::Int Sections.firstIndexPath(of:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = a1[1];
  __swift_project_boxed_opaque_existential_1((void *)v3, *(void *)(v3 + 24));
  v29[6] = *a1;
  v29[7] = v6;
  v29[5] = 2;
  uint64_t v7 = ViewList.firstOffset(of:style:)();
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v3 + 56);
    if (*(unsigned char *)(v3 + 64) == 1)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = *(void *)(v10 + 16);
    swift_release();
    uint64_t v15 = swift_bridgeObjectRelease();
    MEMORY[0x1F4188790](v15);
    _OWORD v29[2] = v3;
    void v29[3] = v9;
    Swift::Int v16 = specialized RandomAccessCollection.lowerBound(_:)((uint64_t)partial apply for closure #1 in Sections.firstIndexPath(of:), (uint64_t)v29, 0, v14);
    Swift::Int result = Sections.startOffset(forSectionAt:)(v16);
    uint64_t v17 = v9 - result;
    if (__OFSUB__(v9, result))
    {
      __break(1u);
    }
    else
    {
      Swift::Int v18 = v16 + 1;
      if (!__OFADD__(v16, 1))
      {
        uint64_t v19 = *(void *)(v3 + 56);
        if (v18 >= *(void *)(v19 + 16))
        {
          uint64_t v20 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
        }
        else
        {
          if (v18 < 0)
          {
LABEL_33:
            __break(1u);
            return result;
          }
          uint64_t v20 = *(void *)(v19 + 16 * v18 + 32);
        }
        Swift::Int result = Sections.startOffset(forSectionAt:)(v16);
        BOOL v21 = __OFSUB__(v20, result);
        uint64_t v22 = v20 - result;
        if (!v21)
        {
          uint64_t v23 = v17 & ~(v17 >> 63);
          if (v23 < v22)
          {
            Swift::Int v18 = v16;
LABEL_17:
            uint64_t v24 = v23;
            Swift::Int v25 = v18;
LABEL_21:
            MEMORY[0x18C10A880](v24, v25);
            uint64_t v26 = type metadata accessor for IndexPath();
            return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a2, 0, 1, v26);
          }
          if (v17 <= 0 && !v22)
          {
            uint64_t v24 = NSNotFound.getter();
            Swift::Int v25 = v16;
            goto LABEL_21;
          }
          if (*(unsigned char *)(v3 + 64) == 1) {
            swift_retain();
          }
          uint64_t v27 = *(void *)(v19 + 16);
          swift_release();
          if (v16 < v27 - 1)
          {
            BOOL v21 = __OFSUB__(v23, v22);
            v23 -= v22;
            if (!v21) {
              goto LABEL_17;
            }
            __break(1u);
          }
          uint64_t v28 = type metadata accessor for IndexPath();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a2, 1, 1, v28);
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v11 = type metadata accessor for IndexPath();
  unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(a2, 1, 1, v11);
}

Swift::Int __swiftcall Sections.startOffset(forSectionAt:)(Swift::Int forSectionAt)
{
  if (forSectionAt < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v2 = forSectionAt;
  uint64_t v3 = *(void *)(v1 + 56);
  if (*(void *)(v3 + 16) <= (unint64_t)forSectionAt)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(v3 + 16 * forSectionAt + 32);
  int v5 = *(unsigned __int8 *)(v1 + 64);
  outlined init with copy of Sections(v1, (uint64_t)v10);
  if (v5 != 1)
  {
    outlined destroy of Sections((uint64_t)v10);
    outlined init with copy of Sections(v1, (uint64_t)v8);
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(v11 + 16);
  outlined destroy of Sections((uint64_t)v10);
  forSectionAt = outlined init with copy of Sections(v1, (uint64_t)v8);
  if (v6 <= v2)
  {
LABEL_8:
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  if (*(void *)(v9 + 16) <= v2)
  {
LABEL_14:
    __break(1u);
    return forSectionAt;
  }
  uint64_t v7 = ~*(unsigned __int8 *)(v9 + 16 * v2 + 40) & 1;
LABEL_9:
  outlined destroy of Sections((uint64_t)v8);
  forSectionAt = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return forSectionAt;
}

uint64_t outlined init with copy of Sections(uint64_t a1, uint64_t a2)
{
  return a2;
}

double static _AlignmentWritingModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 80);
  unint64_t v16 = *(void *)a2;
  LODWORD(v17) = v6;
  uint64_t v18 = v7;
  long long v19 = *(_OWORD *)(a2 + 24);
  char v13 = BYTE12(v19);
  long long v20 = *(_OWORD *)(a2 + 40);
  long long v21 = *(_OWORD *)(a2 + 56);
  uint64_t v22 = *(void *)(a2 + 72);
  int v23 = v8;
  a3(&v14);
  if ((v13 & 2) != 0)
  {
    LODWORD(v16) = v5;
    type metadata accessor for _GraphValue<_AlignmentWritingModifier>();
    unsigned int v9 = _GraphValue.value.getter();
    unint64_t v16 = v14;
    double v17 = v15;
    uint64_t v10 = _ViewOutputs.layoutComputer.getter();
    unsigned int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) == 0) {
      unsigned int v11 = v10;
    }
    unint64_t v16 = __PAIR64__(v11, v9);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v16) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  *(void *)a4 = v14;
  double result = v15;
  a4[1] = v15;
  return result;
}

void type metadata accessor for _GraphValue<_AlignmentWritingModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<_AlignmentWritingModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_AlignmentWritingModifier>);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in WrappedButtonStyleBody<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in WrappedButtonStyleBody<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in WrappedButtonStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ButtonBehavior<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t NavigationSplitView.init(columnVisibility:preferredCompactColumn:sidebar:content:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, void (*a6)(uint64_t)@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  uint64_t v44 = a7;
  int v45 = a6;
  uint64_t v39 = a5;
  uint64_t v40 = a4;
  uint64_t v36 = a3;
  uint64_t v37 = a2;
  uint64_t v46 = a8;
  long long v42 = a12;
  uint64_t v41 = a13;
  uint64_t v43 = a11;
  uint64_t v35 = a9;
  uint64_t v38 = a10;
  MEMORY[0x1F4188790](a1);
  unint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  double v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  long long v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)v19;
  uint64_t v25 = *(void *)v23;
  uint64_t v24 = *(void *)(v23 + 8);
  char v26 = *(unsigned char *)(v23 + 16);
  if (*(unsigned char *)(v19 + 17)) {
    __int16 v27 = 256;
  }
  else {
    __int16 v27 = 0;
  }
  __int16 v28 = v27 | *(unsigned __int8 *)(v19 + 16) | 0x8000;
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns();
  uint64_t v29 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v30 = swift_release();
  v51[0] = v22;
  v51[1] = v29;
  __int16 v52 = v28;
  char v53 = 1;
  __int16 v50 = 512;
  v47[0] = v25;
  v47[1] = v24;
  char v48 = v26;
  char v49 = 1;
  uint64_t v31 = v37(v30);
  uint64_t v32 = v40(v31);
  v45(v32);
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)(v51, &v50, v47, (uint64_t)v21, (uint64_t)v17, (uint64_t)v14, v35, v38, v46, v43);
}

unint64_t lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ListStackBehavior(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  double v4 = *(double *)a2;
  unint64_t v5 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 9) == 1)
  {
    if (*(void *)&v2 | v3)
    {
      if (*(void *)&v2 ^ 1 | *(unsigned __int8 *)(a1 + 8))
      {
        if (*(unsigned char *)(a2 + 9) && __PAIR128__(v5, *(unint64_t *)&v4) >= 2) {
          return 1;
        }
      }
      else if (*(unsigned char *)(a2 + 9) && !(*(void *)&v4 ^ 1 | v5))
      {
        return 1;
      }
    }
    else
    {
      uint64_t v6 = *(void *)&v4 | v5;
      if (*(unsigned char *)(a2 + 9)) {
        BOOL v7 = v6 == 0;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7) {
        return 1;
      }
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 9)) {
    return 0;
  }
  if ((v3 & 1) == 0) {
    return (v5 & 1) == 0 && v2 == v4;
  }
  return (v5 & 1) != 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DividerStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t initializeWithTake for RootModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t initializeWithCopy for BaseModifier.SelectionObserver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisclosureIndicatorDifferentiatesWithoutColor()
{
  lazy protocol witness table accessor for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor()
{
  unint64_t result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HideNavigationLinkDisclosureIndicator()
{
  lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator();
  PropertyList.subscript.getter();
  return v1;
}

double static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  void (*v23)(uint64_t *__return_ptr, _DWORD *, uint64_t *, double (*)@<D0>(uint64_t *@<X0>, double *@<X8>), uint64_t, uint64_t, uint64_t);
  double result;
  long long v25;
  long long v26;
  long long v27;
  int v28;
  _DWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  unsigned char v35[16];
  uint64_t RootContext;
  uint64_t WitnessTable;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  long long v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  long long v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  long long v56;
  uint64_t v57;

  uint64_t v57 = *MEMORY[0x1E4F143B8];
  __int16 v28 = *a1;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  int v13 = *((_DWORD *)a2 + 20);
  uint64_t v40 = *a2;
  LODWORD(v41) = v9;
  uint64_t v43 = *(_OWORD *)(a2 + 3);
  long long v42 = v10;
  uint64_t v44 = v11;
  int v45 = v12;
  uint64_t v46 = *(_OWORD *)(a2 + 7);
  int v47 = a2[9];
  char v48 = v13;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  LODWORD(v49) = v28;
  type metadata accessor for CustomHoverEffectPrimitiveViewModifier();
  type metadata accessor for _GraphValue();
  type metadata accessor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  int v14 = _GraphValue.value.getter();
  _DisplayList_Identity.init()();
  HIDWORD(v49) = v14;
  v32[0] = v28;
  v32[1] = v14;
  RootContext = type metadata accessor for CustomHoverEffectPrimitiveViewModifier.MakeRootContext();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<HoverEffectContext>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v32, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)v35, RootContext, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
  _CustomHoverEffectInputs.init(base:context:)();
  uint64_t v17 = v49;
  int v18 = v50;
  uint64_t v19 = v51;
  uint64_t v21 = v53;
  uint64_t v20 = v54;
  __int16 v27 = v55;
  uint64_t v25 = v52;
  char v26 = v56;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  LODWORD(v49) = v28;
  _GraphValue.subscript.getter();
  char v49 = v17;
  __int16 v50 = v18;
  __int16 v52 = v25;
  int v51 = v19;
  char v53 = v21;
  uint64_t v54 = v20;
  uint64_t v55 = v27;
  uint64_t v56 = v26;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a3;
  *(void *)(v22 + 24) = a4;
  uint64_t v23 = *(void (**)(uint64_t *__return_ptr, _DWORD *, uint64_t *, double (*)@<D0>(uint64_t *@<X0>, double *@<X8>), uint64_t, uint64_t, uint64_t))(a6 + 32);
  swift_retain();
  v23(&v40, v32, &v49, partial apply for closure #3 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:), v22, a5, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  *(void *)a7 = v40;
  unint64_t result = v41;
  a7[1] = v41;
  return result;
}

uint64_t type metadata accessor for CustomHoverEffectPrimitiveViewModifier.MakeRootContext()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustomHoverEffectPrimitiveViewModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  v7[2] = v2;
  uint64_t v8 = type metadata accessor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions();
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v8, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v9;
}

uint64_t CustomHoverEffectPrimitiveViewModifier.MakeRootContext.value.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v4 = v1[1];
  unsigned int v15 = *v1;
  uint64_t v3 = v15;
  unsigned int v16 = v4;
  CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter((uint64_t)v18);
  uint64_t v5 = v18[0];
  v13[0] = v3;
  v13[1] = v4;
  CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter((uint64_t)&v15);
  char v6 = v17;
  v11[0] = v3;
  v11[1] = v4;
  CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter((uint64_t)v13);
  char v7 = v14;
  CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter((uint64_t)v11);
  char v8 = v12;
  unsigned int v15 = v3;
  unsigned int v16 = v4;
  uint64_t result = CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter((uint64_t)v18);
  char v10 = v8 | ~v19;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v7;
  *(unsigned char *)(a1 + 26) = v10 & 1;
  return result;
}

uint64_t CustomHoverEffectPrimitiveViewModifier.MakeRootContext.options.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions();
  uint64_t result = AGGraphGetValue();
  char v3 = *(unsigned char *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  char v5 = *(unsigned char *)(result + 24);
  uint64_t v6 = *(void *)(result + 32);
  char v7 = *(unsigned char *)(result + 40);
  char v8 = *(unsigned char *)(result + 41);
  char v9 = *(unsigned char *)(result + 42);
  char v10 = *(unsigned char *)(result + 43);
  *(void *)a1 = *(void *)result;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 41) = v8;
  *(unsigned char *)(a1 + 42) = v9;
  *(unsigned char *)(a1 + 43) = v10;
  return result;
}

uint64_t type metadata accessor for CustomHoverEffectPrimitiveViewModifier.RootContextOptions()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<HoverEffectContext>()
{
  if (!lazy cache variable for type metadata for Attribute<HoverEffectContext>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<HoverEffectContext>);
    }
  }
}

uint64_t static HoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *((_DWORD *)a2 + 2);
  unint64_t v7 = a2[2];
  unsigned int v8 = *((_DWORD *)a2 + 6);
  unsigned int v9 = *((_DWORD *)a2 + 7);
  unsigned int v10 = *((_DWORD *)a2 + 8);
  unsigned int v11 = *((_DWORD *)a2 + 9);
  unint64_t v13 = a2[5];
  unint64_t v12 = a2[6];
  unsigned int v14 = *((_DWORD *)a2 + 14);
  unsigned int v15 = *((_DWORD *)a2 + 15);
  unsigned int v16 = *((_DWORD *)a2 + 16);
  unsigned int v17 = *((_DWORD *)a2 + 17);
  unsigned int v19 = *((_DWORD *)a2 + 18);
  unsigned int v18 = *((_DWORD *)a2 + 19);
  uint64_t v20 = a2[10];
  uint64_t v21 = *a2;
  uint64_t v42 = *a2;
  unint64_t v33 = v7;
  unint64_t v44 = v7;
  int v22 = v6;
  LODWORD(v43) = v6;
  unint64_t v45 = __PAIR64__(v9, v8);
  unsigned int v46 = v10;
  unsigned int v47 = v11;
  unint64_t v35 = v13;
  unint64_t v36 = v12;
  unint64_t v48 = v13;
  unint64_t v49 = v12;
  unsigned int v31 = v15;
  unsigned int v32 = v14;
  unint64_t v50 = __PAIR64__(v15, v14);
  unsigned int v29 = v17;
  unsigned int v30 = v16;
  unsigned int v51 = v16;
  unsigned int v52 = v17;
  unsigned int v27 = v18;
  unsigned int v28 = v19;
  unsigned int v53 = v19;
  unsigned int v54 = v18;
  uint64_t v26 = v20;
  unsigned int v55 = v20;
  _ViewInputs.makeIndirectOutputs()();
  LODWORD(v42) = v5;
  type metadata accessor for _GraphValue<HoverEffect>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<HoverEffect>, (uint64_t)&type metadata for HoverEffect, MEMORY[0x1E4F3F590]);
  int v23 = _GraphValue.value.getter();
  id v24 = (id)AGSubgraphGetCurrent();
  if (!v24) {
    __break(1u);
  }
  uint64_t v43 = v21;
  LODWORD(v42) = v23;
  LODWORD(v44) = v22;
  unint64_t v45 = v33;
  unsigned int v46 = v8;
  unsigned int v47 = v9;
  unint64_t v48 = __PAIR64__(v11, v10);
  unint64_t v49 = v35;
  unint64_t v50 = v36;
  unsigned int v51 = v32;
  unsigned int v52 = v31;
  unsigned int v53 = v30;
  unsigned int v54 = v29;
  unsigned int v55 = v28;
  unsigned int v56 = v27;
  uint64_t v57 = v26;
  uint64_t v58 = v39;
  int v59 = v40;
  int v60 = v41;
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  id v63 = v24;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of AnyHoverEffectContainer((uint64_t)&v42);
  uint64_t result = _ViewOutputs.setIndirectDependency(_:)();
  *(void *)a5 = v39;
  *(_DWORD *)(a5 + 8) = v40;
  *(_DWORD *)(a5 + 12) = v41;
  return result;
}

void type metadata accessor for _GraphValue<HoverEffect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer;
  if (!lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer;
  if (!lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer);
  }
  return result;
}

uint64_t outlined release of AnyHoverEffectContainer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  char v3 = *(void **)(a1 + 144);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of AnyHoverEffectContainer.ChildEffect?(v2, v3);
  return a1;
}

void AnyHoverEffectContainer.updateValue()()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)v0[17];
  char v3 = (void *)v0[18];
  if (v2)
  {
    uint64_t Value = (void *)AGGraphGetValue();
    if ((*(uint64_t (**)(void))(*(void *)v2 + 80))(*Value))
    {
      uint64_t v5 = *(void *)AGGraphGetValue();
      outlined copy of AnyHoverEffectContainer.ChildEffect?(v2, v3);
      swift_retain();
      swift_release();
      uint64_t v6 = v3;
      goto LABEL_7;
    }
    uint64_t v15 = v0[12];
    unsigned int v16 = (void *)v0[13];
    swift_retain();
    v3;
    _ViewOutputs.detachIndirectOutputs()();
    AGSubgraphRef.willInvalidate(isInserted:)(1);
    AGSubgraphInvalidate();
    outlined consume of AnyHoverEffectContainer.ChildEffect?((uint64_t)v2, v3);
  }
  uint64_t v7 = *(void *)AGGraphGetValue();
  uint64_t v9 = v0[14];
  uint64_t v8 = v0[15];
  id v10 = (id)AGSubgraphGetGraph();
  swift_retain();
  swift_retain();
  unsigned int v11 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  unsigned int CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x1E4F4E7A0]) {
    __break(1u);
  }
  unsigned int v13 = CurrentAttribute;
  AGGraphClearUpdate();
  id v14 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in AnyHoverEffectContainer.makeChild(_:body:)(v1, v7, v13, v9, v8, v11, &v15);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_release();
  swift_release();

  uint64_t v5 = v15;
  uint64_t v6 = v16;
LABEL_7:
  uint64_t v15 = v5;
  AGGraphSetOutputValue();
  outlined consume of AnyHoverEffectContainer.ChildEffect?((uint64_t)v2, v3);
  *(void *)(v1 + 136) = v5;
  *(void *)(v1 + 144) = v6;
}

void outlined consume of AnyHoverEffectContainer.ChildEffect?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();
  }
}

id closure #1 in AnyHoverEffectContainer.makeChild(_:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  void (*v22)(uint64_t *__return_ptr, void, uint64_t *, uint64_t, uint64_t);
  long long v24;
  long long v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  int v29;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  long long v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t vars8;

  unsigned int v29 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 8);
  unsigned int v27 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  unsigned int v28 = *(_OWORD *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  swift_beginAccess();
  int v14 = *(_DWORD *)(v8 + 16);
  uint64_t v15 = *(void *)(v8 + 24);
  id v24 = *(_OWORD *)(v8 + 48);
  uint64_t v25 = *(_OWORD *)(v8 + 32);
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v16 = *(void *)(v8 + 72);
  char v18 = *(unsigned char *)(v8 + 80);
  char v19 = *(unsigned char *)(v8 + 81);
  uint64_t v20 = *(void *)(v8 + 88);
  type metadata accessor for _GraphValue<HoverEffect>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v14;
  *(void *)(v21 + 24) = v15;
  *(_OWORD *)(v21 + 32) = v25;
  *(_OWORD *)(v21 + 48) = v24;
  *(void *)(v21 + 64) = v17;
  *(void *)(v21 + 72) = v16;
  *(unsigned char *)(v21 + 80) = v18;
  *(unsigned char *)(v21 + 81) = v19;
  *(void *)(v21 + 88) = v20;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v36 = v26;
  LODWORD(v37) = v29;
  uint64_t v38 = v21;
  uint64_t v39 = v10;
  int v40 = v11;
  int v41 = v27;
  uint64_t v42 = v9;
  uint64_t v43 = v28;
  unint64_t v44 = v12;
  unint64_t v45 = v13;
  int v22 = *(void (**)(uint64_t *__return_ptr, void, uint64_t *, uint64_t, uint64_t))(*(void *)a2 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(&v46, a3, &v36, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v36 = *(void *)(a1 + 96);
  uint64_t v37 = *(void *)(a1 + 104);
  swift_bridgeObjectRetain();
  _ViewOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a7 = a2;
  a7[1] = a6;
  swift_retain();

  return a6;
}

uint64_t _AnyHoverEffectBox.makeChild(container:inputs:body:)(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *v4;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v33 = *a2;
  int v34 = v7;
  long long v36 = *(_OWORD *)(a2 + 3);
  uint64_t v35 = v8;
  uint64_t v37 = v9;
  uint64_t v38 = v10;
  long long v11 = *(_OWORD *)(a2 + 9);
  long long v39 = *(_OWORD *)(a2 + 7);
  long long v40 = v11;
  uint64_t v12 = *(void *)(v6 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStableType(_:)();
  uint64_t v13 = *(void *)(v6 + 120);
  LODWORD(v25) = a1;
  uint64_t v22 = v12;
  uint64_t v23 = type metadata accessor for AnyHoverEffectChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v25, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v21, v23, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v15);
  _GraphValue.init(_:)();
  long long v28 = v36;
  long long v31 = v39;
  uint64_t v25 = v33;
  int v26 = v34;
  uint64_t v27 = v35;
  uint64_t v29 = v37;
  uint64_t v30 = v38;
  long long v32 = v40;
  uint64_t v16 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v20, &v25, a3, a4, v12, v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance AutomaticHoverEffect()
{
  return MEMORY[0x1F40FED48]();
}

uint64_t type metadata accessor for AnyHoverEffectChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t objectdestroy_9Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_9Tm_0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
  }
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  if (*(void *)(v0 + 72)) {
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_9Tm_1()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_9Tm_2()
{
  long long v5 = *(_OWORD *)(v0 + 304);
  long long v3 = *(_OWORD *)(v0 + 272);
  long long v4 = *(_OWORD *)(v0 + 288);
  long long v2 = *(_OWORD *)(v0 + 240);
  outlined consume of NavigationState.Base(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    *(void *)(v0 + 224),
    *(void *)(v0 + 232),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 256),
    *(void *)(v0 + 264),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(void *)(v0 + 320));
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroy_9Tm_3()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 64)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PopoverPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FFCC0](a1, a2, a3, a4, a5, WitnessTable);
}

void SwiftUIGlue.defaultImplicitRootType.getter(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4F3F8D8];
  *a1 = MEMORY[0x1E4F3F8E8];
  a1[1] = v1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ToolbarModifier<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, void *, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  return static ToolbarModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a6);
}

uint64_t partial apply for implicit closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 40), *(_DWORD *)(v0 + 48));
}

void @objc PencilEventsBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  long long v2 = *(void **)(a1 + direct field offset for PencilEventsBridge.pencilInteraction);
}

uint64_t getEnumTagSinglePayload for DropDestination(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

void @objc TooltipBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  int v2 = *(void **)(a1 + direct field offset for TooltipBridge.tooltipInteraction);
}

uint64_t initializeWithCopy for HoverResponderChild(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = (_OWORD *)(a1 + 8);
  long long v5 = (_OWORD *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 49);
  swift_retain();
  if (v6)
  {
    long long v7 = v5[1];
    *long long v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 34) = *(_OWORD *)((char *)v5 + 26);
  }
  else if (*(unsigned char *)(a2 + 48))
  {
    long long v8 = v5[1];
    *long long v4 = *v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)v5 + 25);
    *(unsigned char *)(a1 + 49) = 0;
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 8, v5);
    *(_WORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  *(void *)(a1 + 68) = *(void *)(a2 + 68);
  return a1;
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableKeyboardTrackingElement()
{
  return 0xD00000000000002FLL;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in EditModeScopeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void NavigationPath.init()(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v1;
  *(void *)(a1 + 40) = 0;
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t specialized static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a1[1];
  uint64_t v33 = *a1;
  uint64_t v28 = a1[4];
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[6];
  uint64_t v31 = a1[2];
  uint64_t v26 = a1[7];
  uint64_t v27 = a1[5];
  uint64_t v35 = a1[10];
  uint64_t v36 = a1[9];
  uint64_t v34 = a1[11];
  uint64_t v9 = *a2;
  unint64_t v24 = a1[12];
  uint64_t v25 = a1[8];
  if ((v24 & 0xF000000000000004) == 0xF000000000000004
    || AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v10 = 0;
  }
  else
  {
    id v11 = (id)AGGraphGetAttributeGraph();
    uint64_t v12 = AGGraphRef.viewGraph()();

    uint64_t v10 = v12;
  }
  if (v9 == 5 || AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v13 = 0;
    if (a6) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v14 = v10;
    id v15 = (id)AGGraphGetAttributeGraph();
    uint64_t v13 = AGGraphRef.viewGraph()();

    uint64_t v10 = v14;
    if (a6) {
      goto LABEL_11;
    }
  }
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v18 = v10;
    id v19 = (id)AGGraphGetAttributeGraph();
    uint64_t v20 = AGGraphRef.viewGraph()();

    uint64_t v10 = v18;
    uint64_t result = v20;
    if (v18) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
LABEL_11:
  uint64_t result = 0;
  if (v10)
  {
LABEL_12:
    uint64_t v17 = v10;
    goto LABEL_18;
  }
LABEL_14:
  if (v13)
  {
    swift_retain();
    uint64_t v17 = v13;
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v17 = swift_retain();
  }
LABEL_18:
  swift_retain();
  outlined copy of Transaction?(a8);
  Transaction.fromScrollView.setter();
  outlined copy of SystemScrollLayoutState?(v33, v32, v31, v29, v28, v27, v30, v26, v25, v36, v35, v34, v24);
  lazy protocol witness table accessor for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
  GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
  swift_release();
  if ((v24 & 0xF000000000000004) == 0xF000000000000004)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (v24 == 0x8000000000000000)
    {
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(0x8000000000000000);
      static Semantics.v6.getter();
      char v21 = isLinkedOnOrAfter(_:)();
    }
    else
    {
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(v24);
      char v21 = 0;
    }
    uint64_t v22 = swift_allocObject();
    *(unsigned char *)(v22 + 16) = v21 & 1;
    *(void *)(v22 + 24) = v17;
    swift_retain();
    static Update.enqueueAction(_:)();
    outlined consume of SystemScrollLayoutState?(v33, v32, v31, v29, v28, v27, v30, v26, v25, v36, v35, v34, v24);
    swift_release();
    swift_release();
    outlined consume of SystemScrollLayoutState?(v33, v32, v31, v29, v28, v27, v30, v26, v25, v36, v35, v34, v24);
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

double ScrollViewChildTransform.value.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v32 = *(void *)(v1 + 40);
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v4 = Value[1];
  long long v33 = *Value;
  long long v34 = v4;
  MEMORY[0x18C114450]();
  AGGraphGetValue();
  AGGraphGetValue();
  EdgeInsets.adding(_:)();
  AGGraphGetValue();
  EdgeInsets.adding(_:)();
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  static Semantics.v6.getter();
  if (isLinkedOnOrAfter(_:)()) {
    AGGraphGetValue();
  }
  uint64_t v5 = AGGraphGetValue();
  long long v6 = *(_OWORD *)(v5 + 32);
  long long v33 = *(_OWORD *)(v5 + 16);
  long long v34 = v6;
  MEMORY[0x18C114450]();
  static ScrollGeometry.viewTransform(contentInsets:contentSize:containerSize:)();
  *(_OWORD *)long long v40 = v33;
  *(_OWORD *)&v40[16] = v34;
  *(_OWORD *)&v40[32] = v35;
  long long v41 = v36;
  long long v42 = v37;
  long long v43 = v38;
  long long v44 = v39;
  ViewTransform.UnsafeBuffer.appendScrollGeometry(_:isClipped:)();
  static ScrollCoordinateSpace.all.getter();
  ViewTransform.UnsafeBuffer.appendSizedSpace(id:size:)();
  AGGraphGetValue();
  if (Axis.Set.contains(_:)())
  {
    static ScrollCoordinateSpace.horizontal.getter();
    ViewTransform.UnsafeBuffer.appendSizedSpace(id:size:)();
  }
  AGGraphGetValue();
  if (Axis.Set.contains(_:)())
  {
    static ScrollCoordinateSpace.vertical.getter();
    ViewTransform.UnsafeBuffer.appendSizedSpace(id:size:)();
  }
  long long v7 = (double *)AGGraphGetValue();
  ViewTransform.UnsafeBuffer.appendTranslation(_:)((CGSize)__PAIR128__(v7[1] + v7[11], *v7 + v7[10]));
  static ScrollCoordinateSpace.content.getter();
  uint64_t v8 = AGGraphGetValue();
  long long v9 = *(_OWORD *)(v8 + 32);
  long long v33 = *(_OWORD *)(v8 + 16);
  long long v34 = v9;
  MEMORY[0x18C114450]();
  ViewTransform.UnsafeBuffer.appendSizedSpace(id:size:)();
  AGGraphGetValue();
  CGSize.outset(by:)();
  if (static SemanticFeature.isEnabled.getter())
  {
    EdgeInsets.originOffset.getter();
    ViewTransform.UnsafeBuffer.appendTranslation(_:)((CGSize)__PAIR128__(v11, v10));
    static ScrollCoordinateSpace.safeArea.getter();
    ViewTransform.UnsafeBuffer.appendSizedSpace(id:size:)();
    EdgeInsets.originOffset.getter();
    ViewTransform.UnsafeBuffer.appendTranslation(_:)((CGSize)__PAIR128__(-v13, -v12));
  }
  if (one-time initialization token for UIKitHostContainerCoordinateSpace != -1) {
    swift_once();
  }
  *(void *)&long long v33 = UIKitHostContainerCoordinateSpace;
  ViewTransform.UnsafeBuffer.appendCoordinateSpace(id:)();
  uint64_t v14 = AGGraphGetValue();
  *(void *)long long v40 = *(void *)v14;
  *(_OWORD *)&v40[8] = *(_OWORD *)(v14 + 8);
  *(_OWORD *)&v40[24] = *(_OWORD *)(v14 + 24);
  uint64_t v15 = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(v15, (uint64_t)&v33);
  swift_retain();
  static Edge.Set.all.getter();
  char v16 = v33;
  if (v33)
  {
    static Edge.Set.horizontal.getter();
    if ((v16 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if ((v33 & 2) != 0) {
LABEL_15:
  }
    static Edge.Set.vertical.getter();
LABEL_16:
  outlined destroy of ScrollViewConfiguration((uint64_t)&v33);
  EdgeInsets.in(_:)();
  long long v33 = *(_OWORD *)AGGraphGetValue();
  double v17 = MEMORY[0x18C10C240]();
  double v19 = v18;
  type metadata accessor for CGSize(0);
  uint64_t v20 = (double *)AGGraphGetValue();
  double v21 = v17 + *v20;
  double v22 = v19 + v20[1];
  EdgeInsets.originOffset.getter();
  double v24 = v21 - v23;
  double v26 = v22 - v25;
  long long v33 = *(_OWORD *)AGGraphGetValue();
  double v27 = MEMORY[0x18C10C240]();
  ViewTransform.resetPosition(_:)((CGPoint)__PAIR128__(v26 + v28, v24 + v27));
  if (static SemanticFeature.isEnabled.getter())
  {
    *(void *)&long long v33 = v32;
    ViewTransform.appendSizedSpace(id:size:)();
    EdgeInsets.originOffset.getter();
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v30, v29));
  }
  ViewTransform.append(movingContentsOf:)();
  *(void *)a1 = *(void *)v40;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v40[8];
  double result = *(double *)&v40[24];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v40[24];
  return result;
}

uint64_t UpdatedHostingScrollView.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  int v96 = v3;
  uint64_t v91 = *(void *)(Value + 8);
  uint64_t v92 = *(void *)Value;
  unint64_t v4 = *(void *)(Value + 96);
  int v5 = *(_DWORD *)(Value + 104);
  uint64_t v6 = AGGraphGetValue();
  int v98 = v7;
  outlined init with copy of ScrollViewConfiguration(v6, (uint64_t)v133);
  uint64_t v8 = AGGraphGetValue();
  int v100 = v9;
  outlined init with copy of ScrollEnvironmentProperties(v8, (uint64_t)v132);
  unint64_t v10 = (uint64_t *)AGGraphGetValue();
  int v99 = v11;
  uint64_t v12 = *v10;
  uint64_t v13 = v10[1];
  uint64_t v14 = v10[3];
  uint64_t v89 = v10[4];
  uint64_t v90 = v10[2];
  uint64_t v88 = v10[5];
  AGGraphGetValue();
  char v101 = v15;
  type metadata accessor for CGSize(0);
  char v16 = (double *)AGGraphGetValue();
  int v95 = v17;
  double v18 = *v16;
  int v97 = v132[81];
  int v94 = *(unsigned __int8 *)(v0 + 153);
  double v19 = (uint64_t *)AGGraphGetValue();
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  unint64_t v22 = v4;
  char v87 = v23;
  if (v23)
  {
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v4);
    swift_retain();
    swift_retain();
    swift_retain_n();
    char v24 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
    swift_release();
    if (v24)
    {
      swift_retain();
      PropertyList.Tracker.reset()();
      swift_release();
      swift_retain();
      swift_retain();
      EnvironmentValues.init(_:tracker:)();
      swift_release();
      swift_release();
      uint64_t v21 = *((void *)&v102 + 1);
      uint64_t v20 = v102;
    }
  }
  else
  {
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v4);
    swift_retain();
    swift_retain();
  }
  if (*(_DWORD *)v0 != *MEMORY[0x1E4F4E7A0])
  {
    type metadata accessor for External<SystemScrollLayoutState>(0, (unint64_t *)&lazy cache variable for type metadata for Axis.Set?, MEMORY[0x1E4F41330], MEMORY[0x1E4FBB718]);
    double v25 = (unsigned char *)AGGraphGetValue();
    if ((v25[1] & 1) == 0) {
      *(unsigned char *)(*(void *)(v0 + 8) + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_descendantScrollableAxes) = *v25;
    }
  }
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v134);
  long long v114 = v146;
  long long v115 = v147;
  v116[0] = v148[0];
  *(_OWORD *)((char *)v116 + 9) = *(_OWORD *)((char *)v148 + 9);
  long long v110 = v142;
  long long v111 = v143;
  long long v112 = v144;
  long long v113 = v145;
  long long v106 = v138;
  long long v107 = v139;
  long long v108 = v140;
  long long v109 = v141;
  long long v102 = v134;
  long long v103 = v135;
  long long v104 = v136;
  long long v105 = v137;
  long long v26 = *(_OWORD *)(v0 + 488);
  long long v129 = *(_OWORD *)(v0 + 472);
  long long v130 = v26;
  v131[0] = *(_OWORD *)(v0 + 504);
  *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)(v0 + 513);
  long long v27 = *(_OWORD *)(v0 + 424);
  long long v125 = *(_OWORD *)(v0 + 408);
  long long v126 = v27;
  long long v28 = *(_OWORD *)(v0 + 456);
  long long v127 = *(_OWORD *)(v0 + 440);
  long long v128 = v28;
  long long v29 = *(_OWORD *)(v0 + 360);
  long long v121 = *(_OWORD *)(v0 + 344);
  long long v122 = v29;
  long long v30 = *(_OWORD *)(v0 + 392);
  long long v123 = *(_OWORD *)(v0 + 376);
  long long v124 = v30;
  long long v31 = *(_OWORD *)(v0 + 296);
  long long v117 = *(_OWORD *)(v0 + 280);
  long long v118 = v31;
  long long v32 = *(_OWORD *)(v0 + 328);
  long long v119 = *(_OWORD *)(v0 + 312);
  long long v120 = v32;
  int v33 = specialized static ContentMarginProxy.== infix(_:_:)((uint64_t *)&v102, (uint64_t *)&v117);
  int v34 = *(_DWORD *)(v0 + 56);
  unint64_t v35 = v22;
  int v93 = v34;
  if (v22 >> 62)
  {
    unint64_t v36 = v22;
    if (v22 >> 62 != 1) {
      goto LABEL_16;
    }
    swift_retain();
    int v34 = v93;
  }
  if (v5 == -1 || v34 == -1 || v5 != v34)
  {
    *(_DWORD *)(v0 + 56) = v5;
    unint64_t v36 = v22;
  }
  else
  {
    outlined consume of SystemScrollLayoutState.ContentOffsetMode(v22);
    unint64_t v36 = 0x8000000000000000;
  }
LABEL_16:
  if (v98)
  {
    long long v38 = *(char **)(v0 + 8);
    *(unsigned char *)(*(void *)&v38[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper]
             + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes) = v133[0];
    outlined init with copy of ScrollViewConfiguration((uint64_t)v133, (uint64_t)&v102);
    uint64_t v39 = (uint64_t)&v38[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_configuration];
    swift_beginAccess();
    outlined init with copy of ScrollViewConfiguration(v39, (uint64_t)&v117);
    swift_beginAccess();
    long long v40 = v38;
    outlined assign with copy of ScrollViewConfiguration((uint64_t)&v102, v39);
    swift_endAccess();
    HostingScrollView.updateForConfiguration(oldValue:)();
    outlined destroy of ScrollViewConfiguration((uint64_t)&v102);
    outlined destroy of ScrollViewConfiguration((uint64_t)&v117);

    if ((v100 & 1) == 0)
    {
LABEL_18:
      int v37 = v33 ^ 1;
      if ((v33 ^ 1)) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else if ((v100 & 1) == 0)
  {
    goto LABEL_18;
  }
  AGGraphClearUpdate();
  long long v41 = *(void **)(*(void *)(v1 + 8) + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper);
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v132, (uint64_t)&v102);
  uint64_t v42 = (uint64_t)v41 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v42, (uint64_t)&v117);
  swift_beginAccess();
  id v43 = v41;
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)&v102, v42);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)&v117);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v102);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v117);

  unint64_t v35 = v22;
  AGGraphSetUpdate();
  int v37 = v33 ^ 1;
  if ((v33 ^ 1))
  {
LABEL_23:
    AGGraphClearUpdate();
    closure #3 in UpdatedHostingScrollView.updateValue()(v1, &v134, (uint64_t)v132);
    AGGraphSetUpdate();
    goto LABEL_24;
  }
LABEL_22:
  if (v101) {
    goto LABEL_23;
  }
LABEL_24:
  static Semantics.v5.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    type metadata accessor for HostingScrollView();
    Outputuint64_t Value = AGGraphGetOutputValue();
    if ((v87 & 1) != 0 || !OutputValue)
    {
      AGGraphClearUpdate();
      *(void *)&long long v102 = v20;
      *((void *)&v102 + 1) = v21;
      uint64_t v46 = *(void **)(v1 + 8);
      uint64_t v45 = *(void **)(v1 + 16);
      swift_retain();
      unsigned int v47 = v46;
      id v48 = v45;
      swift_retain();
      UIView.adoptEnvironment(_:hostedSubview:)((uint64_t)&v102, v47);
      swift_release();
      swift_release();

      unint64_t v49 = *(void **)&v47[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
      *(void *)&long long v102 = v20;
      *((void *)&v102 + 1) = v21;
      swift_retain();
      swift_retain();
      id v50 = v49;
      ScrollViewHelper.adoptEnvironment(_:)((uint64_t *)&v102);
      swift_release();
      swift_release();

      AGGraphSetUpdate();
    }
  }
  if (v95) {
    *(double *)(*(void *)(v1 + 8) + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_rtlAdjustment) = v18;
  }
  if ((v101 & 1) != 0 || ((v99 | v98 | v95) & 1) != 0 || v97 != v94)
  {
    char v51 = v133[0];
    if (v133[0])
    {
      static Edge.Set.horizontal.getter();
      if ((v51 & 2) == 0)
      {
LABEL_38:
        EdgeInsets.in(_:)();
        uint64_t v54 = v53;
        double v56 = v55;
        uint64_t v58 = v57;
        double v59 = -0.0;
        if (v18 != 0.0) {
          double v59 = v18;
        }
        double v60 = v59 + v52;
        AGGraphClearUpdate();
        uint64_t v61 = *(void **)(v1 + 16);
        if (v97) {
          double v62 = v56;
        }
        else {
          double v62 = v60;
        }
        if (v97) {
          double v63 = v60;
        }
        else {
          double v63 = v56;
        }
        *(void *)&long long v117 = v54;
        *((double *)&v117 + 1) = v63;
        *(void *)&long long v118 = v58;
        *((double *)&v118 + 1) = v62;
        LOBYTE(v119) = 0;
        uint64_t v64 = v61;
        specialized UIView.SafeAreaHelper.updateSafeAreaInsets<A>(_:delegate:)((uint64_t)&v117, v64);

        AGGraphSetUpdate();
        goto LABEL_47;
      }
    }
    else if ((v133[0] & 2) == 0)
    {
      goto LABEL_38;
    }
    static Edge.Set.vertical.getter();
    goto LABEL_38;
  }
LABEL_47:
  if ((v96 | v37 | v99 | v100) & 1) != 0 || (v101)
  {
    AGGraphClearUpdate();
    *(void *)&long long v102 = v12;
    *((void *)&v102 + 1) = v13;
    *(void *)&long long v103 = v90;
    *((void *)&v103 + 1) = v14;
    *(void *)&long long v104 = v89;
    *((void *)&v104 + 1) = v88;
    CGRect.init(_:)();
    uint64_t v66 = v65;
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    outlined init with copy of UpdatedHostingScrollView(v1, (uint64_t)&v102);
    int v73 = (uint64_t *)AGGraphGetValue();
    uint64_t v74 = *v73;
    uint64_t v75 = v73[1];
    outlined destroy of UpdatedHostingScrollView((uint64_t)&v102);
    uint64_t v76 = *(void **)(v1 + 8);
    *(void *)&long long v102 = v92;
    *((void *)&v102 + 1) = v91;
    *(void *)&long long v103 = v66;
    *((void *)&v103 + 1) = v68;
    *(void *)&long long v104 = v70;
    *((void *)&v104 + 1) = v72;
    *(void *)&long long v105 = v74;
    *((void *)&v105 + 1) = v75;
    *(void *)&long long v106 = v36;
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v36);
    id v77 = v76;
    unsigned __int8 v78 = HostingScrollView.updateContext(_:)((double *)&v102);

    outlined consume of SystemScrollLayoutState.ContentOffsetMode(v36);
    AGGraphSetUpdate();
    if ((v78 & 1) == 0) {
      *(_DWORD *)(v1 + 56) = v93;
    }
  }
  *(void *)&long long v102 = *(void *)(v1 + 8);
  type metadata accessor for HostingScrollView();
  AGGraphSetOutputValue();
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v36);
  swift_release();
  swift_release();
  long long v79 = v147;
  *(_OWORD *)(v1 + 472) = v146;
  *(_OWORD *)(v1 + 488) = v79;
  *(_OWORD *)(v1 + 504) = v148[0];
  *(_OWORD *)(v1 + 513) = *(_OWORD *)((char *)v148 + 9);
  long long v80 = v143;
  *(_OWORD *)(v1 + 408) = v142;
  *(_OWORD *)(v1 + 424) = v80;
  long long v81 = v145;
  *(_OWORD *)(v1 + 440) = v144;
  *(_OWORD *)(v1 + 456) = v81;
  long long v82 = v139;
  *(_OWORD *)(v1 + 344) = v138;
  *(_OWORD *)(v1 + 360) = v82;
  long long v83 = v141;
  *(_OWORD *)(v1 + 376) = v140;
  *(_OWORD *)(v1 + 392) = v83;
  long long v84 = v135;
  *(_OWORD *)(v1 + 280) = v134;
  *(_OWORD *)(v1 + 296) = v84;
  long long v85 = v137;
  *(_OWORD *)(v1 + 312) = v136;
  *(_OWORD *)(v1 + 328) = v85;
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)v132, v1 + 72);
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v35);
  outlined destroy of ScrollViewConfiguration((uint64_t)v133);
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v132);
}

unint64_t outlined consume of SystemScrollLayoutState.ContentOffsetMode(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  swift_unknownObjectWeakCopyInit();
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 88);
    uint64_t v8 = *(void *)(a2 + 96);
    *(void *)(a1 + 80) = v6;
    *(void *)(a1 + 88) = v7;
    *(void *)(a1 + 96) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
  }
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t outlined copy of SystemScrollLayoutState.ContentOffsetMode(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined destroy of ScrollViewConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ScrollViewConfiguration(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(void *)(a1 + 80)) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for HostingScrollView()
{
  return self;
}

uint64_t EnvironmentValues.contentMarginProxy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v4 = v16;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    uint64_t v4 = v16;
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a1 = v30;
  *(unsigned char *)(a1 + 8) = v31;
  *(void *)(a1 + 16) = v32;
  *(unsigned char *)(a1 + 24) = v33;
  *(void *)(a1 + 32) = v34;
  *(unsigned char *)(a1 + 40) = v35;
  *(void *)(a1 + 48) = v36;
  *(unsigned char *)(a1 + 56) = v37;
  *(void *)(a1 + 64) = v22;
  *(unsigned char *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v24;
  *(unsigned char *)(a1 + 88) = v25;
  *(void *)(a1 + 96) = v26;
  *(unsigned char *)(a1 + 104) = v27;
  *(void *)(a1 + 112) = v28;
  *(unsigned char *)(a1 + 120) = v29;
  *(void *)(a1 + 128) = v14;
  *(unsigned char *)(a1 + 136) = v15;
  *(void *)(a1 + 144) = v4;
  *(unsigned char *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v18;
  *(unsigned char *)(a1 + 168) = v19;
  *(void *)(a1 + 176) = v20;
  *(unsigned char *)(a1 + 184) = v21;
  *(void *)(a1 + 192) = v6;
  *(unsigned char *)(a1 + 200) = v7;
  *(void *)(a1 + 208) = v8;
  *(unsigned char *)(a1 + 216) = v9;
  *(void *)(a1 + 224) = v10;
  *(unsigned char *)(a1 + 232) = v11;
  *(void *)(a1 + 240) = v12;
  *(unsigned char *)(a1 + 248) = v13;
  return result;
}

uint64_t outlined assign with copy of ScrollEnvironmentProperties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithCopy for ScrollEnvironmentProperties(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  uint64_t v6 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    }
    else
    {
      outlined destroy of AccessibilityRelationshipScope.Key(a1 + 8);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      long long v8 = *(_OWORD *)(v5 + 32);
      long long v7 = *(_OWORD *)(v5 + 48);
      long long v9 = *(_OWORD *)(v5 + 16);
      *(void *)(v4 + 64) = *(void *)(v5 + 64);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)(v4 + 16) = v9;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    long long v10 = *(_OWORD *)(a2 + 24);
    long long v11 = *(_OWORD *)(a2 + 40);
    long long v12 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 40) = v11;
    *(_OWORD *)(a1 + 56) = v12;
    *(_OWORD *)(a1 + 24) = v10;
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  return a1;
}

uint64_t specialized static ContentMarginProxy.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = a1[2];
  char v4 = *((unsigned char *)a1 + 24);
  uint64_t v5 = a1[4];
  char v6 = *((unsigned char *)a1 + 40);
  uint64_t v7 = a1[6];
  char v8 = *((unsigned char *)a1 + 56);
  uint64_t v66 = a1[8];
  char v65 = *((unsigned char *)a1 + 72);
  uint64_t v64 = a1[10];
  char v63 = *((unsigned char *)a1 + 88);
  uint64_t v62 = a1[12];
  char v61 = *((unsigned char *)a1 + 104);
  uint64_t v60 = a1[14];
  char v59 = *((unsigned char *)a1 + 120);
  uint64_t v50 = a1[16];
  char v49 = *((unsigned char *)a1 + 136);
  uint64_t v48 = a1[18];
  char v47 = *((unsigned char *)a1 + 152);
  uint64_t v46 = a1[20];
  char v45 = *((unsigned char *)a1 + 168);
  uint64_t v44 = a1[22];
  char v43 = *((unsigned char *)a1 + 184);
  uint64_t v36 = a1[24];
  char v35 = *((unsigned char *)a1 + 200);
  uint64_t v34 = a1[26];
  char v33 = *((unsigned char *)a1 + 216);
  uint64_t v32 = a1[28];
  uint64_t v75 = *a1;
  char v29 = *((unsigned char *)a1 + 232);
  char v76 = v2;
  uint64_t v30 = a1[30];
  char v31 = *((unsigned char *)a1 + 248);
  uint64_t v77 = v3;
  uint64_t v9 = *a2;
  char v78 = v4;
  char v10 = *((unsigned char *)a2 + 8);
  uint64_t v79 = v5;
  uint64_t v11 = a2[2];
  char v80 = v6;
  char v12 = *((unsigned char *)a2 + 24);
  uint64_t v81 = v7;
  uint64_t v13 = a2[4];
  char v82 = v8;
  char v14 = *((unsigned char *)a2 + 40);
  uint64_t v67 = v9;
  uint64_t v15 = a2[6];
  char v68 = v10;
  char v16 = *((unsigned char *)a2 + 56);
  uint64_t v69 = v11;
  uint64_t v57 = a2[8];
  char v70 = v12;
  char v58 = *((unsigned char *)a2 + 72);
  uint64_t v71 = v13;
  uint64_t v56 = a2[10];
  char v72 = v14;
  char v53 = *((unsigned char *)a2 + 88);
  uint64_t v73 = v15;
  uint64_t v54 = a2[12];
  char v74 = v16;
  char v55 = *((unsigned char *)a2 + 104);
  uint64_t v52 = a2[14];
  char v51 = *((unsigned char *)a2 + 120);
  uint64_t v37 = a2[16];
  char v38 = *((unsigned char *)a2 + 136);
  uint64_t v39 = a2[18];
  char v40 = *((unsigned char *)a2 + 152);
  uint64_t v41 = a2[20];
  char v42 = *((unsigned char *)a2 + 168);
  uint64_t v17 = a2[22];
  char v18 = *((unsigned char *)a2 + 184);
  uint64_t v19 = a2[24];
  char v20 = *((unsigned char *)a2 + 200);
  uint64_t v21 = a2[26];
  char v22 = *((unsigned char *)a2 + 216);
  uint64_t v23 = a2[28];
  char v24 = *((unsigned char *)a2 + 232);
  uint64_t v25 = a2[30];
  char v26 = *((unsigned char *)a2 + 248);
  if ((MEMORY[0x18C110940](&v75, &v67) & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v75 = v66;
  char v76 = v65;
  uint64_t v77 = v64;
  char v78 = v63;
  uint64_t v79 = v62;
  char v80 = v61;
  uint64_t v81 = v60;
  char v82 = v59;
  uint64_t v67 = v57;
  char v68 = v58;
  uint64_t v69 = v56;
  char v70 = v53;
  uint64_t v71 = v54;
  char v72 = v55;
  uint64_t v73 = v52;
  char v74 = v51;
  if ((MEMORY[0x18C110940](&v75, &v67) & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v75 = v50;
  char v76 = v49;
  uint64_t v77 = v48;
  char v78 = v47;
  uint64_t v79 = v46;
  char v80 = v45;
  uint64_t v81 = v44;
  char v82 = v43;
  uint64_t v67 = v37;
  char v68 = v38;
  uint64_t v69 = v39;
  char v70 = v40;
  uint64_t v71 = v41;
  char v72 = v42;
  uint64_t v73 = v17;
  char v74 = v18;
  if (MEMORY[0x18C110940](&v75, &v67))
  {
    uint64_t v75 = v36;
    char v76 = v35;
    uint64_t v77 = v34;
    char v78 = v33;
    uint64_t v79 = v32;
    char v80 = v29;
    uint64_t v81 = v30;
    char v82 = v31;
    uint64_t v67 = v19;
    char v68 = v20;
    uint64_t v69 = v21;
    char v70 = v22;
    uint64_t v71 = v23;
    char v72 = v24;
    uint64_t v73 = v25;
    char v74 = v26;
    char v27 = MEMORY[0x18C110940](&v75, &v67);
  }
  else
  {
LABEL_5:
    char v27 = 0;
  }
  return v27 & 1;
}

uint64_t outlined destroy of UpdatedHostingScrollView(uint64_t a1)
{
  return a1;
}

uint64_t destroy for UpdatedHostingScrollView(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 104))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  }
  return result;
}

void ScrollViewHelper.adoptEnvironment(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView;
  uint64_t v6 = MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    char v8 = (void *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastEnvironment);
    void *v8 = v3;
    v8[1] = v4;
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    if (v4)
    {
      swift_retain_n();
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      swift_retain();
      swift_retain();
      PropertyList.subscript.getter();
      swift_release();
    }
    swift_release_n();
    uint64_t v9 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollContentBackground;
    *(void *)uint64_t v9 = v11;
    *(unsigned char *)(v9 + 8) = v12;
    *(unsigned char *)(v9 + 9) = v13;
    swift_retain();
    char v10 = (void *)MEMORY[0x18C119DF0](v5);
    swift_release();
    swift_release();
    if (v10) {

    }
    EnvironmentValues.allScrollableAxes.getter();
  }
}

void type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
    }
  }
}

uint64_t outlined init with copy of UpdatedHostingScrollView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for UpdatedHostingScrollView(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v6 = a1 + 80;
  uint64_t v7 = a2 + 80;
  uint64_t v8 = *(void *)(a2 + 104);
  id v9 = v4;
  id v10 = v5;
  swift_retain();
  if (v8)
  {
    uint64_t v11 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v8;
    *(void *)(a1 + 112) = v11;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(v6, v7, v8);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
  }
  else
  {
    long long v12 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(v6 + 48) = v12;
    *(void *)(v6 + 64) = *(void *)(v7 + 64);
    long long v13 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v13;
  }
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  long long v14 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v14;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 513) = *(_OWORD *)(a2 + 513);
  long long v15 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v15;
  long long v16 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v16;
  long long v17 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v17;
  long long v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v18;
  long long v19 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v19;
  long long v20 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v20;
  return a1;
}

id HostingScrollView.updateContext(_:)(double *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](v8);
  unint64_t v170 = (char *)&v158 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = *a1;
  double v12 = a1[1];
  double v15 = a1[2];
  double v14 = a1[3];
  double v17 = a1[4];
  double v16 = a1[5];
  double v19 = a1[6];
  double v18 = a1[7];
  uint64_t v20 = *((void *)a1 + 8);
  id v21 = objc_msgSend(v2, sel_window, v10);
  id v22 = v21;
  if (!v21)
  {
    char v63 = (double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
    uint64_t v64 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
    uint64_t v65 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 8];
    v176 = (void *)v64;
    uint64_t v66 = *((void *)v63 + 2);
    uint64_t v67 = *((void *)v63 + 3);
    unint64_t v68 = v20;
    uint64_t v69 = *((void *)v63 + 4);
    uint64_t v70 = *((void *)v63 + 5);
    uint64_t v72 = *((void *)v63 + 6);
    uint64_t v71 = *((void *)v63 + 7);
    unint64_t v73 = *((void *)v63 + 8);
    double *v63 = v13;
    v63[1] = v12;
    v63[2] = v15;
    v63[3] = v14;
    v63[4] = v17;
    v63[5] = v16;
    v63[6] = v19;
    v63[7] = v18;
    *((void *)v63 + 8) = v68;
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v68);
    unint64_t v157 = v73;
    id v22 = 0;
    outlined consume of HostingScrollViewUpdateContext?((uint64_t)v176, v65, v66, v67, v69, v70, v72, v71, v157);
    return (id)(v22 != 0);
  }
  CGFloat v173 = v15;
  CGFloat v174 = v14;
  uint64_t v163 = v9;

  LODWORD(v172) = objc_msgSend(v2, sel__skipsContentOffsetAdjustmentsIfScrolling);
  id result = objc_msgSend(v2, sel__setSkipsContentOffsetAdjustmentsIfScrolling_, 1);
  uint64_t v24 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  int v25 = *(_DWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  BOOL v26 = __OFADD__(v25, 1);
  int v27 = v25 + 1;
  if (!v26)
  {
    uint64_t v159 = v4;
    uint64_t v160 = v7;
    CGFloat v167 = v13;
    CGFloat v168 = v12;
    uint64_t v161 = v8;
    uint64_t v162 = v5;
    v176 = (void *)v20;
    *(_DWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v27;
    objc_msgSend(v2, sel_adjustedContentInset);
    double v29 = v28;
    double v31 = v30;
    double v33 = v32;
    double v35 = v34;
    uint64_t v36 = (const void *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
    long long v193 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
    long long v194 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
    v195[0] = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
    *(_OWORD *)((char *)v195 + 9) = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
    long long v189 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
    long long v190 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
    long long v191 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
    long long v192 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
    long long v185 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
    long long v186 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
    long long v187 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
    long long v188 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
    CGPoint v181 = *(CGPoint *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
    long long v182 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
    long long v183 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
    long long v184 = *(_OWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
    uint64_t v37 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins];
    long long v38 = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 208];
    v179[12] = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 192];
    v179[13] = v38;
    v180[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 224];
    *(_OWORD *)((char *)v180 + 9) = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 233];
    long long v39 = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 144];
    v179[8] = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 128];
    v179[9] = v39;
    long long v40 = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 176];
    v179[10] = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 160];
    v179[11] = v40;
    long long v41 = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 80];
    v179[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 64];
    v179[5] = v41;
    long long v42 = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 112];
    v179[6] = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 96];
    v179[7] = v42;
    long long v43 = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 16];
    v179[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins];
    v179[1] = v43;
    long long v44 = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 48];
    v179[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins + 32];
    v179[3] = v44;
    uint64_t v175 = v24;
    uint64_t v45 = v24 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
    swift_beginAccess();
    outlined init with copy of ScrollEnvironmentProperties(v45, (uint64_t)v178);
    memset(v196, 0, 32);
    v196[32] = 1;
    specialized UIScrollView.updateContentInsets(margins:oldMargins:axes:properties:safeArea:)((uint64_t *)&v181, (uint64_t *)v179, (uint64_t)v178, (uint64_t)v196);
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v178);
    memmove(v37, v36, 0xF9uLL);
    unsigned int v46 = objc_msgSend(v2, sel_isPagingEnabled);
    double v164 = v19;
    double v165 = v18;
    if (v46)
    {
      objc_msgSend(v2, sel_adjustedContentInset);
      double v171 = v35;
      double v50 = v47;
      double v166 = v29;
      double v52 = v51;
      double v53 = v31;
      double v54 = v16;
      if (*(unsigned char *)(v45 + 81)) {
        double v55 = v48;
      }
      else {
        double v55 = v49;
      }
      double v56 = v33;
      double v57 = v17;
      if (*(unsigned char *)(v45 + 81)) {
        double v58 = v49;
      }
      else {
        double v58 = v48;
      }
      objc_msgSend(v2, sel__setPagingOrigin_, -v58, -v47);
      double v59 = v55 * 0.5;
      double v16 = v54;
      double v31 = v53;
      double v60 = v58 + v59;
      double v17 = v57;
      double v33 = v56;
      double v61 = v52 * 0.5;
      double v29 = v166;
      double v62 = v50 + v61;
      double v35 = v171;
      objc_msgSend(v2, sel__setInterpageSpacing_, -v60, -v62);
    }
    else
    {
      objc_msgSend(v2, sel__setPagingOrigin_, 0.0, 0.0);
      objc_msgSend(v2, sel__setInterpageSpacing_, 0.0, 0.0);
    }
    unint64_t v74 = (unint64_t)v176;
    uint64_t v75 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host];
    objc_msgSend(v75, sel_frame);
    v206.origin.double x = v76;
    v206.origin.double y = v77;
    v206.size.CGFloat width = v78;
    v206.size.CGFloat height = v79;
    double v81 = v173;
    double v80 = v174;
    v201.origin.double x = v173;
    v201.origin.double y = v174;
    v201.size.CGFloat width = v17;
    v201.size.CGFloat height = v16;
    if (!CGRectEqualToRect(v201, v206)) {
      objc_msgSend(v75, sel_setFrame_, v81, v80, v17, v16);
    }
    v178[0] = 0;
    if (v74 >> 62)
    {
      if (v74 >> 62 == 1)
      {
        uint64_t v82 = *(void *)((v74 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        double v83 = *(double *)((v74 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        LODWORD(v176) = *(unsigned __int8 *)((v74 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        int v84 = *(unsigned __int8 *)((v74 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
        int v85 = *(unsigned __int8 *)((v74 & 0x3FFFFFFFFFFFFFFFLL) + 0x22);
        outlined copy of SystemScrollLayoutState.ContentOffsetMode(v74);
        swift_retain();
        objc_msgSend(v2, sel_adjustedContentInset);
        double v90 = v86;
        double v91 = v87;
        if (v164 - (v87 + v89) < 0.0) {
          double v92 = 0.0;
        }
        else {
          double v92 = v164 - (v87 + v89);
        }
        if (v165 - (v86 + v88) < 0.0) {
          double v93 = 0.0;
        }
        else {
          double v93 = v165 - (v86 + v88);
        }
        LOBYTE(v181.x) = *(unsigned char *)(v45 + 81);
        *(double *)&uint64_t v94 = COERCE_DOUBLE(specialized static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(v82, v167, v168, v92, v93, v17, v16));
        if (v96)
        {
          long long v127 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
          uint64_t v128 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
          *(void *)long long v127 = 0;
          *((void *)v127 + 1) = 0;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v128);
        }
        else
        {
          double v171 = v35;
          CGFloat v174 = v33;
          double v97 = v31;
          double v98 = v16;
          double v99 = *(double *)&v94;
          double v100 = v95;
          objc_msgSend(v2, sel_contentOffset);
          CGFloat v167 = v102;
          CGFloat v168 = v101;
          if ((v85 & 1) == 0) {
            objc_msgSend(v2, sel_stopScrollingAndZooming);
          }
          LODWORD(v166) = v84;
          uint64_t v103 = v82;
          objc_msgSend(v2, sel_contentSize);
          v202.size.CGFloat width = v104;
          v202.size.CGFloat height = v105;
          v202.origin.double x = 0.0;
          v202.origin.double y = 0.0;
          v197.double x = v99;
          v197.double y = v100;
          if (CGRectContainsPoint(v202, v197)
            || (v203.origin.double x = 0.0,
                v203.origin.double y = 0.0,
                v203.size.CGFloat width = v17,
                v203.size.CGFloat height = v98,
                v198.double x = v99,
                v198.double y = v100,
                CGRectContainsPoint(v203, v198)))
          {
            objc_msgSend(v2, sel_setContentSize_, v17, v98);
            swift_beginAccess();
            v178[0] = 1;
          }
          double v106 = v99 - v91;
          double v107 = v100 - v90;
          int v108 = (int)v176;
          double v16 = v98;
          double v31 = v97;
          double v33 = v174;
          double v35 = v171;
          if ((v176 | v85 ^ 1))
          {
            v177.receiver = v2;
            v177.super_class = ObjectType;
            objc_msgSendSuper2(&v177, sel_setContentOffset_animated_, v176, v106, v107);
            if (v108)
            {
              *(unsigned char *)(v175 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 4;
              ScrollViewHelper.updateGraphState(isPreferred:)(0);
              int v108 = (int)v176;
            }
            long long v109 = (double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
            *long long v109 = v106;
            v109[1] = v107;
          }
          CGFloat v173 = v83;
          char v110 = v108 ^ 1;
          int v111 = v108;
          uint64_t v112 = v175;
          ScrollViewHelper.updateGraphState(isPreferred:)(v110);
          if (*(unsigned char *)(v112 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase)) {
            int v113 = v111;
          }
          else {
            int v113 = 1;
          }
          if (((v113 | v85) & 1) == 0)
          {
            *(unsigned char *)(v112 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 0;
            ScrollViewHelper.updateGraphState(isPreferred:)(0);
            uint64_t v112 = v175;
          }
          *(unsigned char *)(v112 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 0;
          uint64_t v114 = OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig;
          long long v115 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig];
          _OWORD v115[2] = 0;
          *(_WORD *)long long v115 = 2;
          uint64_t v116 = (CGFloat *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
          uint64_t v117 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
          *uint64_t v116 = 0.0;
          v116[1] = 0.0;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v117);
          if (!v176 || v106 - v168 == 0.0 && v107 - v167 == 0.0)
          {
            type metadata accessor for OS_dispatch_queue();
            v176 = (void *)static OS_dispatch_queue.main.getter();
            uint64_t v118 = swift_allocObject();
            swift_unknownObjectWeakInit();
            long long v119 = (CGFloat *)swift_allocObject();
            *((void *)v119 + 2) = v118;
            *((void *)v119 + 3) = v103;
            v119[4] = v173;
            *(void *)&long long v183 = partial apply for closure #1 in HostingScrollView.updateContext(_:);
            *((void *)&v183 + 1) = v119;
            *(void *)&v181.double x = MEMORY[0x1E4F143A8];
            *(void *)&v181.double y = 1107296256;
            *(void *)&long long v182 = thunk for @escaping @callee_guaranteed () -> ();
            *((void *)&v182 + 1) = &block_descriptor_76;
            uint64_t ObjectType = (objc_class *)_Block_copy(&v181);
            swift_retain();
            swift_release();
            long long v120 = v170;
            static DispatchQoS.unspecified.getter();
            *(void *)&v181.double x = MEMORY[0x1E4FBC860];
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
            type metadata accessor for [DispatchWorkItemFlags]();
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
            uint64_t v121 = v159;
            long long v122 = v160;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            long long v123 = ObjectType;
            long long v124 = v176;
            MEMORY[0x18C116870](0, v120, v122, ObjectType);
            _Block_release(v123);

            (*(void (**)(char *, uint64_t))(v162 + 8))(v122, v121);
            (*(void (**)(char *, uint64_t))(v163 + 8))(v120, v161);
          }
          else
          {
            v176 = (void *)v45;
            CGFloat v153 = *v116;
            *(void *)uint64_t v116 = v103;
            v116[1] = v173;
            swift_retain();
            uint64_t v154 = *(void *)&v153;
            uint64_t v45 = (uint64_t)v176;
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v154);
            if (LODWORD(v166)) {
              __int16 v155 = 257;
            }
            else {
              __int16 v155 = 1;
            }
            v156 = &v2[v114];
            v156[2] = v85 != 0;
            *(_WORD *)v156 = v155;
          }
        }
        swift_release();
        outlined consume of SystemScrollLayoutState.ContentOffsetMode(v74);
      }
      else
      {
        HostingScrollView.checkAnimationCompletion()();
      }
      uint64_t v129 = LODWORD(v172);
      goto LABEL_61;
    }
    uint64_t v125 = v45;
    if ((objc_msgSend(v2, sel_isTracking) & 1) != 0
      || (objc_msgSend(v2, sel_isDecelerating) & 1) != 0)
    {
      id v126 = v22;
      LODWORD(v174) = 0;
    }
    else
    {
      id v126 = v22;
      LODWORD(v174) = objc_msgSend(v2, sel_isScrollAnimating) ^ 1;
    }
    uint64_t v130 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState + 8];
    uint64_t v131 = swift_getObjectType();
    long long v132 = *(uint64_t (**)(uint64_t, uint64_t))(v130 + 8);
    swift_unknownObjectRetain();
    char v133 = v132(v131, v130);
    swift_unknownObjectRelease();
    char v134 = (char)v176;
    id v22 = v126;
    if (v176 >= 2u)
    {
      uint64_t v129 = LODWORD(v172);
      uint64_t v45 = v125;
      if (v176 == 2 && !LODWORD(v174)) {
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v129 = LODWORD(v172);
      uint64_t v45 = v125;
      if (v133)
      {
LABEL_61:
        swift_beginAccess();
        if (v178[0] != 1) {
          objc_msgSend(v2, sel_setContentSize_, v17, v16);
        }
        int v152 = *(unsigned __int8 *)(v45 + 81);
        if (v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection] != v152)
        {
          v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection] = v152;
          ScrollViewHelper.updateGraphState(isPreferred:)(0);
        }
        $defer #2 () in HostingScrollView.updateContext(_:)((uint64_t)v2, v29, v31, v33, v35);
        objc_msgSend(v2, sel__setSkipsContentOffsetAdjustmentsIfScrolling_, v129);
        return (id)(v22 != 0);
      }
    }
    double v171 = v35;
    CGFloat v173 = v31;
    CGFloat v174 = v33;
    double v166 = v29;
    *(unsigned char *)(v175 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 0;
    objc_msgSend(v2, sel_contentOffset);
    double v172 = v135;
    unint64_t v170 = v136;
    double v138 = *(double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets];
    double v137 = *(double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets + 8];
    objc_msgSend(v2, sel_adjustedContentInset);
    double v140 = v139;
    objc_msgSend(v2, sel_adjustedContentInset);
    CGFloat v142 = v167;
    CGFloat v141 = v168;
    double x = v167 - v140;
    double y = v168 - v144;
    v181.double x = x;
    v181.double y = v168 - v144;
    objc_msgSend(v2, sel_contentSize);
    v204.size.CGFloat width = v146;
    v204.size.CGFloat height = v147;
    v204.origin.double x = 0.0;
    v204.origin.double y = 0.0;
    v199.double x = v142;
    v199.double y = v141;
    if (CGRectContainsPoint(v204, v199)
      || (v205.origin.double x = 0.0,
          v205.origin.double y = 0.0,
          v205.size.CGFloat width = v17,
          v205.size.CGFloat height = v16,
          v200.double x = v142,
          v200.double y = v141,
          CGRectContainsPoint(v205, v200)))
    {
      objc_msgSend(v2, sel_setContentSize_, v17, v16);
      swift_beginAccess();
      v178[0] = 1;
    }
    double v148 = v172 + v137;
    double v149 = *(double *)&v170 + v138;
    objc_msgSend(v2, sel_setContentOffset_, x, y);
    if (v134 == 1)
    {
      ScrollViewHelper.updateTargetContentOffset(_:velocity:)(&v181, (CGPoint)0);
      double x = v181.x;
      double y = v181.y;
      objc_msgSend(v2, sel_setContentOffset_, v181.x, v181.y);
    }
    long long v150 = (double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
    double v151 = y - v149 + *(double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset + 8];
    *long long v150 = x - v148 + *(double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
    v150[1] = v151;
    double v29 = v166;
    double v31 = v173;
    double v33 = v174;
    double v35 = v171;
    goto LABEL_61;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ScrollViewHelper.updateGraphState(isPreferred:)(Swift::Bool isPreferred)
{
  if (*(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates))
  {
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) & 1) == 0) {
      *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) = isPreferred;
    }
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v40 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags))
    {
      LOBYTE(v55) = 2;
      Transaction.scrollContentOffsetAdjustmentBehavior.setter();
    }
    unint64_t v2 = 0xF000000000000004;
    uint64_t v39 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate;
    char v37 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate);
    uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate;
    if (MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate))
    {
      uint64_t v4 = *(void *)(v3 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8))(&v55, ObjectType, v4);
      swift_unknownObjectRelease();
      uint64_t v45 = v56;
      uint64_t v46 = v55;
      uint64_t v43 = v58;
      uint64_t v44 = v57;
      uint64_t v50 = v61;
      uint64_t v51 = v59;
      uint64_t v6 = v63;
      uint64_t v49 = v64;
      uint64_t v47 = v62;
      uint64_t v48 = v65;
      unint64_t v7 = v67;
      uint64_t v52 = v66;
      uint64_t v53 = v60;
      unsigned int v8 = v68;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v6 = 0;
      uint64_t v49 = 0;
      unsigned int v8 = 0;
      unint64_t v7 = 0xF000000000000004;
    }
    ScrollPhaseState.init(phase:velocity:)();
    uint64_t v9 = v55;
    uint64_t v10 = v56;
    uint64_t v11 = v57;
    if (MEMORY[0x18C119DF0](v3))
    {
      uint64_t v12 = *(void *)(v3 + 8);
      uint64_t v13 = swift_getObjectType();
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v13, v12);
      uint64_t v41 = v15;
      uint64_t v42 = v14;
      uint64_t v16 = v6;
      char v18 = v17;
      swift_unknownObjectRelease();
      char v19 = v18 & 1;
      uint64_t v6 = v16;
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      char v19 = 1;
    }
    if ((~v7 & 0xF000000000000004) != 0)
    {
      int v33 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__layoutState + 4);
      unint64_t v32 = v8 | ((unint64_t)*(unsigned int *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__layoutState) << 32);
      uint64_t v21 = v45;
      uint64_t v20 = v46;
      uint64_t v23 = v43;
      uint64_t v22 = v44;
      uint64_t v26 = v50;
      uint64_t v24 = v51;
      uint64_t v31 = v52;
      uint64_t v25 = v53;
      uint64_t v27 = v47;
      uint64_t v30 = v48;
      uint64_t v28 = v6;
      uint64_t v29 = v49;
      unint64_t v2 = v7;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      int v33 = 0;
    }
    uint64_t v55 = v20;
    uint64_t v56 = v21;
    uint64_t v57 = v22;
    uint64_t v58 = v23;
    uint64_t v59 = v24;
    uint64_t v60 = v25;
    uint64_t v61 = v26;
    uint64_t v62 = v27;
    uint64_t v63 = v28;
    uint64_t v64 = v29;
    uint64_t v65 = v30;
    uint64_t v66 = v31;
    unint64_t v67 = v2;
    unint64_t v68 = v32;
    int v69 = v33;
    uint64_t v34 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__phaseState);
    v54[0] = v9;
    v54[1] = v10;
    v54[2] = v11;
    v54[3] = v34;
    char v38 = v19;
    if (v19)
    {
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v36 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__containerSize);
    }
    uint64_t v35 = v70;
    outlined copy of SystemScrollLayoutState?(v46, v45, v44, v43, v51, v53, v50, v47, v6, v49, v48, v52, v7);
    swift_retain();
    specialized static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(&v55, v54, v42, v41, v36, v38, v37 & 1, v35);
    swift_release();
    outlined consume of SystemScrollLayoutState?(v46, v45, v44, v43, v51, v53, v50, v47, v6, v49, v48, v52, v7);
    outlined consume of SystemScrollLayoutState?(v46, v45, v44, v43, v51, v53, v50, v47, v6, v49, v48, v52, v7);
    swift_release();
    *(unsigned char *)(v1 + v39) = 2;
    *(void *)(v1 + v40) = 0;
  }
}

unint64_t outlined consume of SystemScrollLayoutState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t result = a13;
  if ((~a13 & 0xF000000000000004) != 0) {
    return outlined consume of SystemScrollLayoutState.ContentOffsetMode(a13);
  }
  return result;
}

unint64_t outlined copy of SystemScrollLayoutState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t result = a13;
  if ((~a13 & 0xF000000000000004) != 0) {
    return outlined copy of SystemScrollLayoutState.ContentOffsetMode(a13);
  }
  return result;
}

void ScrollViewHelper.didChangeProperties(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView;
  uint64_t v5 = MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    unint64_t v7 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties);
    swift_beginAccess();
    objc_msgSend(v6, sel_setScrollEnabled_, *v7);
    objc_msgSend(v6, sel_setClipsToBounds_, v7[1]);
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options) & 1) != 0
      && *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes))
    {
      unsigned __int8 v8 = v7[80];
    }
    else
    {
      unsigned __int8 v8 = 4;
    }
    unsigned __int8 v13 = v8;
    UIScrollView.updateDeceleration(_:)((SwiftUI::ScrollDecelerationRate)&v13);
    ScrollViewHelper.updateAxesConfiguration()();
    int v9 = *(_DWORD *)(a1 + 84);
    uint64_t v10 = (void *)MEMORY[0x18C119DF0](v4);
    if (v10)
    {
      uint64_t v11 = v10;
      if (v9 != *((_DWORD *)v7 + 21)) {
        objc_msgSend(v10, sel_flashScrollIndicators);
      }
    }
    unsigned __int8 v13 = v7[3];
    char v12 = *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode);
    objc_msgSend(v6, sel_setKeyboardDismissMode_, specialized UIScrollViewKeyboardDismissMode.init(_:defaultValue:)(&v13, &v12));
  }
}

uint64_t specialized UIScrollViewKeyboardDismissMode.init(_:defaultValue:)(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  uint64_t result = 0;
  switch(v2)
  {
    case 1:
LABEL_3:
      uint64_t result = 3;
      break;
    case 2:
LABEL_4:
      uint64_t result = 4;
      break;
    case 3:
      return result;
    default:
      uint64_t result = 0;
      switch(*a2)
      {
        case 1:
          goto LABEL_3;
        case 2:
          goto LABEL_4;
        case 3:
          return result;
        default:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          break;
      }
      break;
  }
  return result;
}

Swift::Void __swiftcall UIScrollView.updateDeceleration(_:)(SwiftUI::ScrollDecelerationRate a1)
{
  uint64_t v2 = (double *)MEMORY[0x1E4FB2EF0];
  uint64_t v3 = 0;
  switch(*(unsigned char *)a1.role)
  {
    case 2:
      uint64_t v3 = 0;
      goto LABEL_4;
    case 3:
      uint64_t v3 = 1;
LABEL_4:
      uint64_t v2 = (double *)MEMORY[0x1E4FB2EE8];
      break;
    default:
      break;
  }
  objc_msgSend(v1, sel_setDecelerationRate_, *v2);

  objc_msgSend(v1, sel_setPagingEnabled_, v3);
}

void ScrollViewHelper.updateAxesConfiguration()()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    UIScrollView.updateAxesConfiguration(axes:)(*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes));
    if (Axis.Set.contains(_:)())
    {
      uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
      swift_beginAccess();
      unsigned int v5 = *(unsigned __int8 *)(v4 + 96);
      LODWORD(v4) = *(unsigned __int8 *)(v4 + 113);
      objc_msgSend(v3, sel_setShowsVerticalScrollIndicator_, v5 < 2);
      objc_msgSend(v3, sel_setAlwaysBounceVertical_, v4 != 2);
    }
    else
    {
      objc_msgSend(v3, sel_setShowsVerticalScrollIndicator_, 0);
      objc_msgSend(v3, sel_setAlwaysBounceVertical_, 0);
    }
    if (Axis.Set.contains(_:)())
    {
      uint64_t v6 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
      swift_beginAccess();
      unsigned int v7 = *(unsigned __int8 *)(v6 + 120);
      LODWORD(v6) = *(unsigned __int8 *)(v6 + 137);
      objc_msgSend(v3, sel_setShowsHorizontalScrollIndicator_, v7 < 2);
      BOOL v8 = v6 != 2;
    }
    else
    {
      objc_msgSend(v3, sel_setShowsHorizontalScrollIndicator_, 0);
      BOOL v8 = 0;
    }
    objc_msgSend(v3, sel_setAlwaysBounceHorizontal_, v8);
  }
}

id UIScrollView.updateAxesConfiguration(axes:)(char a1)
{
  if ((a1 != 0) != objc_msgSend(v1, sel__adjustsContentInsetWhenScrollDisabled)) {
    objc_msgSend(v1, sel__setAdjustsContentInsetWhenScrollDisabled_, a1 != 0);
  }
  uint64_t v3 = Axis.Set.contains(_:)() & 1;
  if (v3 != objc_msgSend(v1, sel__contentScrollsAlongYAxis)) {
    objc_msgSend(v1, sel__setContentScrollsAlongYAxis_, v3);
  }
  uint64_t v4 = Axis.Set.contains(_:)() & 1;
  id result = objc_msgSend(v1, sel__contentScrollsAlongXAxis);
  if (v4 != result)
  {
    return objc_msgSend(v1, sel__setContentScrollsAlongXAxis_, v4);
  }
  return result;
}

void HostingScrollView.checkAnimationCompletion()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  uint64_t v12 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending;
  if (*(unsigned char *)(v11 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) == 1
    && (objc_msgSend(v1, sel_isTracking, v8) & 1) == 0)
  {
    *(unsigned char *)(v11 + v12) = 0;
    type metadata accessor for OS_dispatch_queue();
    unsigned __int8 v13 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in HostingScrollView.checkAnimationCompletion();
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t aBlock[3] = &block_descriptor_17_5;
    uint64_t v15 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18C116870](0, v10, v5, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void $defer #2 () in HostingScrollView.updateContext(_:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper);
  int v6 = *(_DWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  BOOL v7 = __OFSUB__(v6, 1);
  int v8 = v6 - 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v8;
    if (!v8 && *(unsigned char *)(v5 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2) {
      ScrollViewHelper.updateGraphState(isPreferred:)(0);
    }
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection)) {
      double v14 = a3;
    }
    else {
      double v14 = a5;
    }
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection)) {
      double v15 = a5;
    }
    else {
      double v15 = a3;
    }
    uint64_t v16 = (double *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets);
    *uint64_t v16 = a2;
    v16[1] = v15;
    _OWORD v16[2] = a4;
    v16[3] = v14;
  }
}

uint64_t specialized UIScrollView.updateContentInsets(margins:oldMargins:axes:properties:safeArea:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  outlined init with take of EdgeInsets?(a4, (uint64_t)&v114);
  uint64_t v73 = *a1;
  char v79 = *((unsigned char *)a1 + 8);
  uint64_t v81 = a1[2];
  char v80 = *((unsigned char *)a1 + 24);
  uint64_t v78 = a1[4];
  char v76 = *((unsigned char *)a1 + 40);
  uint64_t v75 = a1[6];
  char v77 = *((unsigned char *)a1 + 56);
  uint64_t v8 = a1[8];
  char v9 = *((unsigned char *)a1 + 72);
  uint64_t v10 = a1[10];
  char v11 = *((unsigned char *)a1 + 88);
  uint64_t v12 = a1[12];
  char v13 = *((unsigned char *)a1 + 104);
  uint64_t v14 = a1[14];
  char v15 = *((unsigned char *)a1 + 120);
  uint64_t v62 = *a2;
  char v61 = *((unsigned char *)a2 + 8);
  uint64_t v60 = a2[2];
  char v59 = *((unsigned char *)a2 + 24);
  uint64_t v58 = a2[4];
  char v57 = *((unsigned char *)a2 + 40);
  uint64_t v56 = a2[6];
  char v55 = *((unsigned char *)a2 + 56);
  uint64_t v74 = a2[8];
  uint64_t v68 = a2[10];
  char v71 = *((unsigned char *)a2 + 72);
  char v72 = *((unsigned char *)a2 + 88);
  uint64_t v70 = a2[12];
  char v69 = *((unsigned char *)a2 + 104);
  uint64_t v65 = v5;
  uint64_t v66 = a2[14];
  char v67 = *((unsigned char *)a2 + 120);
  id v16 = objc_msgSend(v5, sel_traitCollection);
  objc_msgSend(v16, sel_displayScale);

  static Edge.Set.all.getter();
  OptionalEdgeInsets.init()();
  uint64_t v98 = v8;
  char v99 = v9;
  uint64_t v100 = v10;
  char v101 = v11;
  uint64_t v102 = v12;
  char v103 = v13;
  uint64_t v104 = v14;
  char v105 = v15;
  static OptionalEdgeInsets.none.getter();
  uint64_t v82 = v90;
  char v83 = v91;
  uint64_t v84 = v92;
  char v85 = v93;
  uint64_t v86 = v94;
  char v87 = v95;
  uint64_t v88 = v96;
  char v89 = v97;
  char v17 = MEMORY[0x18C110940](&v98, &v82);
  uint64_t v18 = v73;
  if ((v17 & 1) == 0) {
    uint64_t v18 = v8;
  }
  uint64_t v19 = v68;
  uint64_t v106 = v18;
  char v20 = v79;
  if ((v17 & 1) == 0) {
    char v20 = v9;
  }
  uint64_t v21 = v66;
  char v107 = v20 & 1;
  uint64_t v22 = v81;
  if ((v17 & 1) == 0) {
    uint64_t v22 = v10;
  }
  char v23 = v80;
  if ((v17 & 1) == 0) {
    char v23 = v11;
  }
  char v24 = v69;
  uint64_t v25 = v78;
  if ((v17 & 1) == 0) {
    uint64_t v25 = v12;
  }
  char v26 = v67;
  char v27 = v76;
  if ((v17 & 1) == 0) {
    char v27 = v13;
  }
  char v28 = v71;
  uint64_t v29 = v75;
  if ((v17 & 1) == 0) {
    uint64_t v29 = v14;
  }
  uint64_t v108 = v22;
  char v109 = v23 & 1;
  char v30 = v77;
  if ((v17 & 1) == 0) {
    char v30 = v15;
  }
  uint64_t v31 = v70;
  uint64_t v110 = v25;
  char v111 = v27 & 1;
  uint64_t v112 = v29;
  char v113 = v30 & 1;
  OptionalEdgeInsets.in(edges:)();
  uint64_t v32 = v74;
  EdgeInsets.rounded(toMultipleOf:)();
  static Edge.Set.all.getter();
  OptionalEdgeInsets.init()();
  uint64_t v98 = v74;
  char v99 = v71;
  uint64_t v100 = v68;
  char v33 = v72;
  char v101 = v72;
  uint64_t v102 = v70;
  char v103 = v69;
  uint64_t v104 = v66;
  char v105 = v67;
  static OptionalEdgeInsets.none.getter();
  uint64_t v82 = v90;
  char v83 = v91;
  uint64_t v84 = v92;
  char v85 = v93;
  uint64_t v86 = v94;
  char v87 = v95;
  uint64_t v88 = v96;
  char v89 = v97;
  if (MEMORY[0x18C110940](&v98, &v82))
  {
    uint64_t v32 = v62;
    char v28 = v61;
    uint64_t v19 = v60;
    char v33 = v59;
    uint64_t v31 = v58;
    char v24 = v57;
    uint64_t v21 = v56;
    char v26 = v55;
  }
  uint64_t v106 = v32;
  char v107 = v28;
  uint64_t v108 = v19;
  char v109 = v33;
  uint64_t v110 = v31;
  char v111 = v24;
  uint64_t v112 = v21;
  char v113 = v26;
  OptionalEdgeInsets.in(edges:)();
  EdgeInsets.rounded(toMultipleOf:)();
  static EdgeInsets.zero.getter();
  EdgeInsets.rounded(toMultipleOf:)();
  outlined init with take of EdgeInsets?(a4, (uint64_t)&v106);
  EdgeInsets.adding(_:)();
  double v37 = v36;
  double v39 = v38;
  if (*(unsigned char *)(a3 + 81)) {
    double v40 = v34;
  }
  else {
    double v40 = v35;
  }
  if (*(unsigned char *)(a3 + 81)) {
    double v41 = v35;
  }
  else {
    double v41 = v34;
  }
  objc_msgSend(v65, sel_adjustedContentInset);
  if (v45 != v37 || v42 != v41 || v43 != v39 || v44 != v40) {
    objc_msgSend(v65, sel_setContentInset_, v37, v41, v39, v40);
  }
  uint64_t result = static EdgeInsets.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    EdgeInsets.originOffset.getter();
    double v48 = v47;
    double v50 = v49;
    uint64_t result = (uint64_t)objc_msgSend(v65, sel_window);
    if (result)
    {

      uint64_t result = (uint64_t)objc_msgSend(v65, sel_contentOffset);
      if (v52 == -v48 && v51 == -v50)
      {
        EdgeInsets.originOffset.getter();
        return (uint64_t)objc_msgSend(v65, sel_setContentOffset_animated_, 0, -v53, -v54);
      }
    }
  }
  return result;
}

uint64_t HostingScrollView.updateForConfiguration(oldValue:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  uint64_t v3 = &v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_configuration];
  swift_beginAccess();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes) = *v3;
  uint64_t v4 = *((void *)v3 + 6);
  uint64_t v5 = *((void *)v3 + 7);
  int v6 = (uint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture];
  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture];
  *int v6 = v4;
  v6[1] = v5;
  outlined copy of AppIntentExecutor?(v4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  uint64_t v8 = *((void *)v3 + 14);
  if (v8)
  {
    uint64_t v9 = *((void *)v3 + 13);
    swift_bridgeObjectRetain();
    uint64_t v10 = (void *)MEMORY[0x18C115780](v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  objc_msgSend(v1, sel_setInteractionActivityTrackingBaseName_, v10);

  uint64_t v11 = MEMORY[0x18C119DF0](v3 + 64);
  if (v11)
  {
    uint64_t v12 = *((void *)v3 + 9);
    char v13 = (uint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState];
    *char v13 = v11;
    v13[1] = v12;
    swift_unknownObjectRelease();
  }
  uint64_t result = static SemanticFeature.isEnabled.getter();
  if (result)
  {
    uint64_t v15 = *((void *)v3 + 10);
    uint64_t v16 = *((void *)v3 + 11);
    uint64_t v17 = *((void *)v3 + 12);
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = v18;
    v19[3] = v15;
    v19[4] = v16;
    v19[5] = v17;
    outlined copy of AppIntentExecutor?(v15);
    outlined copy of AppIntentExecutor?(v15);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation;
  if (!lazy protocol witness table cache variable for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation);
  }
  return result;
}

double protocol witness for ScrollViewHelperDelegate.makeContainerSize() in conformance HostingScrollView()
{
  *(void *)&double result = (unint64_t)HostingScrollView.makeContainerSize()();
  return result;
}

CGSize_optional __swiftcall HostingScrollView.makeContainerSize()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(v0, sel_adjustedContentInset);
  v5.receiver = v0;
  v5.super_class = ObjectType;
  objc_msgSendSuper2(&v5, sel_bounds);
  CGSize.inset(by:)();
  Swift::Bool v4 = LOBYTE(v2);
  result.value.CGFloat height = v3;
  result.value.CGFloat width = v2;
  result.is_nil = v4;
  return result;
}

uint64_t outlined init with copy of IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for SwiftUIGlue2(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SwiftUIGlue2);
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?))
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?(255, &lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>, MEMORY[0x1E4FBB718]);
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?(255, &lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>, v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?));
    }
  }
}

void type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], MEMORY[0x1E4F40210]);
    type metadata accessor for ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>);
    }
  }
}

void type metadata accessor for ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>()
{
  if (!lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>)
  {
    type metadata accessor for TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>();
    unint64_t v0 = type metadata accessor for ToolbarModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationCommonModifier>(255, &lazy cache variable for type metadata for SearchFieldStyleModifier<ToolbarSearchFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle, (uint64_t)&type metadata for ToolbarSearchFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SearchFieldStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<RefreshScopeModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<RefreshScopeModifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<RefreshAction?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<RefreshAction?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

double key path getter for EnvironmentValues.refresh : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>>)
  {
    type metadata accessor for _ViewModifier_Content<RefreshScopeModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<RefreshAction?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<RefreshAction?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RefreshAction?>)
  {
    type metadata accessor for _GraphValue<OnTestViewModifier>(255, &lazy cache variable for type metadata for RefreshAction?, (uint64_t)&type metadata for RefreshAction, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RefreshAction?>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<RefreshScopeModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<RefreshScopeModifier>)
  {
    lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<RefreshScopeModifier>);
    }
  }
}

uint64_t List.init(selection:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v32 = a3;
  char v33 = a2;
  uint64_t v31 = a1;
  uint64_t v34 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v30 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SelectionManagerBox();
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v29 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)(v14 - 8) + 56))(a8, 1, 1, v14, v17);
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v43 = a7;
  char v20 = (int *)type metadata accessor for List();
  *(void *)(a8 + v20[14]) = 0;
  uint64_t v21 = a8 + v20[15];
  *(void *)uint64_t v21 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v21 + 8) = 0;
  *(unsigned char *)(v21 + 16) = 0;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v23 = v14;
  uint64_t v24 = v31;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in List.init(selection:content:), (uint64_t)v35, MEMORY[0x1E4FBC248], v23, v25, (uint64_t)v19);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(a8, v19, v15);
  char v27 = v30;
  v33(v26);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v24, v22);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(a8 + v20[13], v27, a5);
}

uint64_t closure #5 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemScrollView();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  v9[2] = v4;
  void v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t closure #1 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1)
{
  void v5[2] = type metadata accessor for SystemScrollView();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, (uint64_t)&type metadata for ScrollViewConfiguration, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

void type metadata accessor for TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>()
{
  if (!lazy cache variable for type metadata for TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>(255, (unint64_t *)&lazy cache variable for type metadata for SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (uint64_t)&protocol witness table for SearchFieldConfiguration.Scopes, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SearchScopeToolbarContent);
    unint64_t v0 = type metadata accessor for TupleToolbarContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>);
    }
  }
}

uint64_t specialized static TabView.TransformEnvironment.makeEnvironment(modifier:environment:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey);
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement.Role>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 40) = 0;
  *(void *)(inited + 48) = 0;
  *(void *)(inited + 32) = 0;
  *(_OWORD *)(inited + 56) = xmmword_18835ED10;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextWriter<ContainerStyleContext>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static NavigationCommonTransformEnvironment.makeEnvironment(environment:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement.Role>();
  uint64_t inited = (_OWORD *)swift_initStackObject();
  inited[1] = xmmword_18834BB70;
  inited[3] = 0u;
  inited[4] = 0u;
  inited[2] = 0u;
  inited[5] = 0u;
  inited[6] = xmmword_188382680;
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement.Role>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t closure #1 in List.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v45 = a4;
  uint64_t v47 = a1;
  uint64_t v48 = a6;
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>);
  uint64_t v8 = a3;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v41 = (char *)&v34 - v10;
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier>);
  uint64_t v40 = v11;
  uint64_t v36 = v9;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v34 - v13;
  unint64_t refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v57 = a5;
  unint64_t v58 = refreshed;
  uint64_t v43 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v34 = WitnessTable;
  unint64_t v17 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v55 = WitnessTable;
  unint64_t v56 = v17;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v51 = v12;
  uint64_t v52 = v35;
  uint64_t v37 = MEMORY[0x1E4F41468];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v38 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  char v20 = (char *)&v34 - v19;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v39 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v34 - v25;
  uint64_t v51 = v44;
  uint64_t v52 = v8;
  uint64_t v27 = v8;
  uint64_t v53 = v45;
  uint64_t v54 = a5;
  type metadata accessor for List();
  char v28 = v41;
  View.refreshScope<A>(if:)(MEMORY[0x1E4F408A0], v27, MEMORY[0x1E4F408A0], a5);
  LOBYTE(v51) = 2;
  uint64_t v29 = v36;
  MEMORY[0x18C113660](&v51, v36, v40, v34);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v29);
  uint64_t v30 = v35;
  View.resetScrollInputs()();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v12);
  uint64_t v51 = v12;
  uint64_t v52 = v30;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  View.resetContentMargin(placements:)((uint64_t)&outlined read-only object #0 of List.placementsToReset.getter, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v20, OpaqueTypeMetadata2);
  uint64_t v49 = OpaqueTypeConformance2;
  double v50 = &protocol witness table for ResetContentMarginModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v23);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v39 + 8);
  v32(v23, v21);
  static ViewBuilder.buildExpression<A>(_:)(v26);
  return ((uint64_t (*)(char *, uint64_t))v32)(v26, v21);
}

uint64_t type metadata accessor for List()
{
  return swift_getGenericMetadata();
}

uint64_t SystemScrollViewContainer.adjustedContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = a2;
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E4F409C0], MEMORY[0x1E4F409B8], MEMORY[0x1E4F40318]);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v77 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v71 = (char *)&v50 - v5;
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
  uint64_t v53 = v4;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v68 = (char *)&v50 - v7;
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
  uint64_t v74 = v8;
  uint64_t v56 = v6;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v72 = (char *)&v50 - v10;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v87 = v12;
  *(void *)&long long v88 = MEMORY[0x1E4F3FA80];
  *((void *)&v88 + 1) = MEMORY[0x1E4F3F740];
  *(void *)&long long v89 = WitnessTable;
  uint64_t v14 = type metadata accessor for StaticIf();
  uint64_t v64 = v9;
  uint64_t v60 = v14;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v70 = (char *)&v50 - v16;
  unint64_t v17 = lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v99 = v11;
  unint64_t v100 = v17;
  uint64_t v18 = MEMORY[0x1E4F3FBC0];
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v52 = v19;
  unint64_t refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v97 = v19;
  unint64_t v98 = refreshed;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v54 = v21;
  unint64_t v22 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v95 = v21;
  unint64_t v96 = v22;
  uint64_t v69 = v18;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v59 = v23;
  uint64_t v93 = MEMORY[0x1E4F3FA78];
  uint64_t v94 = MEMORY[0x1E4F3F738];
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v91 = v23;
  uint64_t v92 = v24;
  uint64_t v62 = v15;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v87 = v15;
  *(void *)&long long v88 = v61;
  uint64_t v63 = MEMORY[0x1E4F41468];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v65 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v26 = (char *)&v50 - v25;
  uint64_t v27 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v51 = (char *)&v50 - v28;
  uint64_t v57 = type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier();
  uint64_t v29 = type metadata accessor for ModifiedContent();
  uint64_t v66 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v50 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v55 = (char *)&v50 - v33;
  uint64_t v34 = v71;
  View.styleContext<A>(_:)();
  uint64_t v35 = v68;
  uint64_t v36 = v53;
  View.refreshScope<A>(if:)(MEMORY[0x1E4F405E0], v53, MEMORY[0x1E4F405E0], v52);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v34, v36);
  LOBYTE(v87) = *v2;
  uint64_t v37 = v72;
  uint64_t v38 = v56;
  MEMORY[0x18C113660](&v87, v56, v74, v54);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v35, v38);
  SystemScrollViewContainer.inertPaddingModifier.getter();
  v83[0] = v87;
  long long v84 = v88;
  long long v85 = v89;
  char v86 = v90;
  uint64_t v39 = v70;
  uint64_t v40 = v64;
  MEMORY[0x18C113660](v83, v64, v60, v59);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v40);
  uint64_t v41 = v62;
  uint64_t v42 = v61;
  View.resetScrollInputs()();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v39, v41);
  uint64_t v87 = v41;
  *(void *)&long long v88 = v42;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v44 = v51;
  uint64_t v45 = OpaqueTypeMetadata2;
  View.resetContentMargin(placements:)((uint64_t)&outlined read-only object #0 of SystemScrollViewContainer.placementsToReset.getter, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v26, v45);
  LOBYTE(v87) = *v2;
  uint64_t v81 = OpaqueTypeConformance2;
  uint64_t v82 = &protocol witness table for ResetContentMarginModifier;
  uint64_t v46 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v87, v27, v57, v46);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v27);
  uint64_t v79 = v46;
  char v80 = &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
  swift_getWitnessTable();
  uint64_t v47 = v55;
  static ViewBuilder.buildExpression<A>(_:)(v31);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v66 + 8);
  v48(v31, v29);
  static ViewBuilder.buildExpression<A>(_:)(v47);
  return ((uint64_t (*)(char *, uint64_t))v48)(v47, v29);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
    lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<ContainerStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E4F409C0], MEMORY[0x1E4F409B8], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t View.resetContentMargin(placements:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v14;
    uint64_t v8 = (char *)(a1 + 32);
    unint64_t v9 = *(void *)(v14 + 16);
    do
    {
      char v11 = *v8++;
      char v10 = v11;
      uint64_t v14 = v6;
      unint64_t v12 = *(void *)(v6 + 24);
      if (v9 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v9 + 1, 1);
        uint64_t v6 = v14;
      }
      *(void *)(v6 + 16) = v9 + 1;
      *(unsigned char *)(v6 + v9++ + 32) = v10;
      --v5;
    }
    while (v5);
  }
  uint64_t v14 = v6;
  MEMORY[0x18C113660](&v14, a2, &type metadata for ResetContentMarginModifier, a3);
  return swift_bridgeObjectRelease();
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentMarginPlacement.Role>, (uint64_t)&type metadata for ContentMarginPlacement.Role);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityTechnology>, (uint64_t)&type metadata for AccessibilityTechnology);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Attribute<TableRowList>>);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E4FBB550]);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Attribute<AccessibilityRotorEntryList>>);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect>, MEMORY[0x1E4F3F8A8]);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>, MEMORY[0x1E4FBB058]);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<Int, Int>>, (uint64_t)type metadata accessor for ListUpdate<Int, Int>, MEMORY[0x1E4FBBE00], (void (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabSidebarCustomization>?);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>, MEMORY[0x1E4FBB960]);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SymbolEffect>, (uint64_t)&type metadata for SymbolEffect);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowList>, (uint64_t)&type metadata for TableRowList);
  char *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableBounds>, (uint64_t)&type metadata for FocusableBounds, MEMORY[0x1E4FBBE00], (void (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [TabCustomizationID]);
  char *v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  int64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    int64_t v11 = *((void *)a4 + 2);
  }
  else {
    int64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for [TabCustomizationID](0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    size_t v13 = _swift_stdlib_malloc_size_2(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[v10]) {
      memmove(v14, v15, v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v10);
  }
  swift_release();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  int64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    int64_t v11 = *((void *)a4 + 2);
  }
  else {
    int64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for [TabCustomizationID](0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    size_t v13 = _swift_stdlib_malloc_size_2(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 48);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[48 * v10]) {
      memmove(v14, v15, 48 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  int64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    int64_t v11 = *((void *)a4 + 2);
  }
  else {
    int64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for [TabCustomizationID](0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    size_t v13 = _swift_stdlib_malloc_size_2(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 25;
    }
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = v12 + 32;
  uint64_t v16 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v15 >= &v16[8 * v10]) {
      memmove(v15, v16, 8 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, 8 * v10);
  }
  swift_release();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  int64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    int64_t v11 = *((void *)a4 + 2);
  }
  else {
    int64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for [TabCustomizationID](0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    size_t v13 = _swift_stdlib_malloc_size_2(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[40 * v10]) {
      memmove(v14, v15, 40 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v12;
}

void type metadata accessor for [TabCustomizationID](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t View.refreshScope<A>(if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier();
  StaticIf<>.init<>(_:then:)();
  uint64_t v6 = type metadata accessor for StaticIf();
  return MEMORY[0x18C113660](v6, a2, v6, a4);
}

unint64_t lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type RefreshScopeModifier and conformance RefreshScopeModifier;
  if (!lazy protocol witness table cache variable for type RefreshScopeModifier and conformance RefreshScopeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RefreshScopeModifier and conformance RefreshScopeModifier);
  }
  return result;
}

uint64_t closure #1 in SystemScrollViewContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v52 = a4;
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E4F409C0], MEMORY[0x1E4F409B8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  uint64_t v50 = a2;
  type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v55 = MEMORY[0x1E4F3F740];
  uint64_t v56 = WitnessTable;
  type metadata accessor for StaticIf();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v73 = a3;
  unint64_t v74 = lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v71 = swift_getWitnessTable();
  unint64_t refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v69 = swift_getWitnessTable();
  unint64_t v70 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v8 = swift_getWitnessTable();
  uint64_t v67 = MEMORY[0x1E4F3FA78];
  uint64_t v68 = MEMORY[0x1E4F3F738];
  uint64_t v65 = v8;
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v9 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier();
  uint64_t v48 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v48);
  int64_t v11 = (char *)&v37 - v10;
  uint64_t v53 = v7;
  uint64_t v54 = v9;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v64 = &protocol witness table for ResetContentMarginModifier;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v62 = &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v44 = type metadata accessor for SystemScrollView();
  uint64_t v49 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  size_t v13 = (char *)&v37 - v12;
  type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v40 = v14;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v45 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v42 = (char *)&v37 - v18;
  unint64_t v19 = lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v59 = &protocol witness table for SystemScrollView<A>;
  unint64_t v60 = v19;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v57 = v38;
  unint64_t v58 = &protocol witness table for ResolvedScrollBehaviorModifier;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v53 = v17;
  uint64_t v54 = v39;
  uint64_t v41 = MEMORY[0x1E4F41490];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v43 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  unint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v37 - v24;
  uint64_t v26 = v51;
  outlined init with copy of ScrollViewConfiguration(v51, (uint64_t)&v53);
  uint64_t v27 = type metadata accessor for SystemScrollViewContainer();
  uint64_t v28 = (unsigned char *)v26;
  SystemScrollViewContainer.adjustedContent.getter(v27, (uint64_t)v11);
  uint64_t v29 = v13;
  SystemScrollView.init(configuration:content:)((uint64_t)&v53, (uint64_t)v11, v48, (uint64_t)v13);
  uint64_t v30 = v16;
  uint64_t v31 = v44;
  View.inferredToolbarScope()();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v31);
  LOBYTE(v53) = *v28;
  uint64_t v32 = v42;
  uint64_t v33 = v40;
  MEMORY[0x18C113660](&v53, v40, &unk_1ED459C38, v38);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v30, v33);
  uint64_t v34 = v39;
  View.configuresScrollPhaseState()();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v17);
  uint64_t v53 = v17;
  uint64_t v54 = v34;
  swift_getOpaqueTypeConformance2();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v43 + 8);
  v35(v22, OpaqueTypeMetadata2);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v35)(v25, OpaqueTypeMetadata2);
}

void type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for StaticIf();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>)
  {
    type metadata accessor for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>();
    lazy protocol witness table accessor for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>);
    }
  }
}

uint64_t type metadata accessor for SystemScrollViewContainer()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t static SystemScrollViewContainer.EnvironmentAxesModifier.makeEnvironment(modifier:environment:)()
{
  closure #1 in static SystemScrollViewContainer.EnvironmentAxesModifier.makeEnvironment(modifier:environment:)(1);
  AGGraphCreateOffsetAttribute2();
  char v0 = *(unsigned char *)AGGraphGetValue();
  EnvironmentValues.nearestScrollableAxes.setter();
  uint64_t v1 = (uint64_t (*)(uint64_t *, void))EnvironmentValues.allScrollableAxes.modify();
  *v2 |= v0;
  return v1(&v4, 0);
}

uint64_t closure #1 in static SystemScrollViewContainer.EnvironmentAxesModifier.makeEnvironment(modifier:environment:)(uint64_t a1)
{
  void v6[2] = type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier();
  uint64_t v2 = MEMORY[0x1E4F41330];
  uint64_t v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_12, (uint64_t)v6, v2, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  return v6[5];
}

uint64_t type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SystemScrollViewContainer.body.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E4F409C0], MEMORY[0x1E4F409B8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(a1 + 24);
  type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v42 = MEMORY[0x1E4F3F740];
  uint64_t v43 = WitnessTable;
  type metadata accessor for StaticIf();
  type metadata accessor for ModifiedContent();
  uint64_t v38 = v4;
  unint64_t v39 = lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v36 = swift_getWitnessTable();
  unint64_t refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v34 = swift_getWitnessTable();
  unint64_t v35 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v32 = MEMORY[0x1E4F3FA78];
  uint64_t v33 = MEMORY[0x1E4F3F738];
  uint64_t v30 = v6;
  uint64_t v31 = swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier();
  type metadata accessor for ModifiedContent();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v29 = &protocol witness table for ResetContentMarginModifier;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
  swift_getWitnessTable();
  type metadata accessor for SystemScrollView();
  type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v24 = &protocol witness table for SystemScrollView<A>;
  unint64_t v25 = lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = &protocol witness table for ResolvedScrollBehaviorModifier;
  uint64_t v8 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  uint64_t v40 = v7;
  uint64_t v41 = v8;
  swift_getOpaqueTypeConformance2();
  uint64_t v9 = type metadata accessor for _UnaryViewAdaptor();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = &v18[-v14];
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  uint64_t v21 = v1;
  _UnaryViewAdaptor.init(content:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
  v16(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(unsigned char *, uint64_t))v16)(v15, v9);
}

void type metadata accessor for StyleContextWriter<ContainerStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for SystemScrollView()
{
  return __swift_instantiateGenericMetadata();
}

void View.inferredToolbarScope()()
{
  type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();

  JUMPOUT(0x18C113660);
}

uint64_t SystemScrollViewContainer.inertPaddingModifier.getter()
{
  return StaticIf<>.init<>(_:then:)();
}

uint64_t SystemScrollView.init(configuration:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of ScrollViewConfiguration(a1, a4);
  uint64_t v7 = a4 + *(int *)(type metadata accessor for SystemScrollView() + 36);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v8(v7, a2, a3);
}

uint64_t outlined init with take of ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a2 = *(_WORD *)a1;
  long long v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  swift_unknownObjectWeakTakeInit();
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = v5;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  return a2;
}

uint64_t ScrollView.body.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for SystemScrollViewContainer();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v15[-v10 - 8];
  outlined init with copy of ScrollViewConfiguration(v2 + *(int *)(a1 + 36), (uint64_t)v15);
  outlined init with take of ScrollViewConfiguration((uint64_t)v15, (uint64_t)v8);
  closure #1 in ScrollView.body.getter(v2, v4);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v12 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(unsigned char *, uint64_t))v12)(v11, v5);
}

uint64_t destroy for SystemScrollViewContainer(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48)) {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(void *)(a1 + 80)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  swift_unknownObjectWeakCopyInit();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 88);
    uint64_t v10 = *(void *)(a2 + 96);
    *(void *)(a1 + 80) = v8;
    *(void *)(a1 + 88) = v9;
    *(void *)(a1 + 96) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
  }
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 120 + a1) & ~v15;
  uint64_t v17 = (v15 + 120 + a2) & ~v15;
  swift_bridgeObjectRetain();
  v14(v16, v17, v12);
  return a1;
}

uint64_t closure #1 in ScrollView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v4);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, a2);
}

unint64_t lazy protocol witness table accessor for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>;
  if (!lazy protocol witness table cache variable for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>)
  {
    type metadata accessor for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>);
  }
  return result;
}

void type metadata accessor for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>()
{
  if (!lazy cache variable for type metadata for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>)
  {
    lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
    unint64_t v0 = type metadata accessor for BothFeatures();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>);
    }
  }
}

uint64_t type metadata accessor for SearchScopeToolbarContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OutsetByRowInsetsIfNecessary.OutsetLayout.sizeThatFits(in:context:child:)()
{
  char v1 = *(unsigned char *)v0;
  if (*(unsigned char *)v0)
  {
    EdgeInsets.negatedInsets.getter();
    static Edge.Set.vertical.getter();
    EdgeInsets.in(_:)();
    _ProposedSize.inset(by:)();
  }
  uint64_t result = LayoutProxy.size(in:)();
  if (v1)
  {
    double v4 = v3 - v0[1];
    if (v4 > 0.0)
    {
      uint64_t result = EdgeInsets.vertical.getter();
      if (v5 >= v4)
      {
        static Edge.Set.vertical.getter();
        EdgeInsets.in(_:)();
        return CGSize.inset(by:)();
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for NavigationLinkModifier()
{
  uint64_t result = type metadata accessor for NavigationLinkModifier.Payload();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InjectKeyModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResolvedScrollBehaviorModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t *, long long *))
{
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = v8;
  int v24 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v22 = v9;
  *(_OWORD *)&v22[16] = v7;
  LODWORD(v12) = a1;
  outlined retain of _ViewInputs(a2);
  a5(&v12, &v21);
  uint64_t v12 = v21;
  int v13 = DWORD2(v21);
  uint64_t v14 = *(void *)v22;
  long long v15 = *(_OWORD *)&v22[8];
  uint64_t v16 = *(void *)&v22[24];
  uint64_t v17 = *(void *)v23;
  long long v18 = *(_OWORD *)&v23[8];
  uint64_t v19 = *(void *)&v23[24];
  int v20 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, long long *))specialized static ResolvedScrollBehaviorModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, long long *))specialized static InjectKeyModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, long long *))specialized static RefreshableModifier._makeInputs(modifier:inputs:));
}

uint64_t NavigationStackStyledCore.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v14 = a3;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  long long v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Value = AGGraphGetValue();
  uint64_t v8 = *(void *)Value;
  uint64_t v9 = *(void *)(Value + 16);
  char v10 = *(unsigned char *)(Value + 8);
  NavigationStackStyledCore.Child.ensuredAuthority.getter((uint64_t)v15);
  uint64_t v11 = AGGraphGetValue();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v11, a2);
  type metadata accessor for UInt32?(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBB718]);
  uint64_t v12 = (unsigned int *)AGGraphGetValue();
  return NavigationStackStyledCore.NavigationStackRepresentableRoot.init(context:authority:root:structureSeed:)(v8, v10, v9, (uint64_t)v15, (uint64_t)v6, *v12 | ((unint64_t)*((unsigned __int8 *)v12 + 4) << 32), a2, v14);
}

uint64_t NavigationStackStyledCore.Child.ensuredAuthority.getter@<X0>(uint64_t a1@<X8>)
{
  NavigationStackStyledCore.Child.authority.getter((uint64_t)v7);
  outlined init with copy of NavigationAuthority??((uint64_t)v7, (uint64_t)&v5);
  if (v6 == 2)
  {
    long long v10 = xmmword_18834BB90;
    uint64_t v11 = 0;
  }
  else
  {
    outlined init with take of NavigationAuthority?((uint64_t)&v5, (uint64_t)&v10);
  }
  outlined destroy of NavigationAuthority??((uint64_t)v7);
  if (*((void *)&v10 + 1) != 1) {
    return outlined init with take of NavigationAuthority((uint64_t)&v10, a1);
  }
  type metadata accessor for NavigationStateHost();
  swift_allocObject();
  NavigationStateHost.init()();
  EnvironmentValues.init()();
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  swift_weakInit();
  swift_weakAssign();
  swift_release();
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  outlined init with take of NavigationAuthority((uint64_t)v7, a1);
  return outlined destroy of NavigationAuthority?((uint64_t)&v10);
}

double NavigationStackStyledCore.Child.authority.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for UInt32?(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

void type metadata accessor for UInt32?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t NavigationStackStyledCore.NavigationStackRepresentableRoot.init(context:authority:root:structureSeed:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = a1;
  *(unsigned char *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  outlined init with take of NavigationAuthority(a4, a8 + 24);
  uint64_t v12 = type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8 + *(int *)(v12 + 40), a5, a7);
  uint64_t v14 = a8 + *(int *)(v12 + 44);
  *(_DWORD *)uint64_t v14 = a6;
  *(unsigned char *)(v14 + 4) = BYTE4(a6) & 1;
  return result;
}

uint64_t closure #1 in NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 40));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InjectKeyModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t *, long long *))
{
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v23 = *(_OWORD *)(a2 + 48);
  long long v24 = v8;
  char v25 = *(unsigned char *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v22 = v9;
  *(_OWORD *)&v22[16] = v7;
  LODWORD(v12) = a1;
  outlined retain of _ViewListInputs(a2);
  a5(&v12, &v21);
  uint64_t v12 = v21;
  int v13 = DWORD2(v21);
  uint64_t v14 = *(void *)v22;
  long long v15 = *(_OWORD *)&v22[8];
  uint64_t v16 = *(void *)&v22[24];
  long long v17 = v23;
  int v18 = v24;
  uint64_t v19 = *((void *)&v24 + 1);
  char v20 = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static InjectKeyModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Attribute<Int> and conformance Attribute<A>;
  if (!lazy protocol witness table cache variable for type Attribute<Int> and conformance Attribute<A>)
  {
    type metadata accessor for Binding<AnyNavigationSplitVisibility>(255, &lazy cache variable for type metadata for Attribute<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F4E740]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Attribute<Int> and conformance Attribute<A>);
  }
  return result;
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, long long *))specialized static InjectKeyModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, long long *))specialized static RefreshableModifier._makeInputs(modifier:inputs:));
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, long long *))specialized static ResolvedScrollBehaviorModifier._makeInputs(modifier:inputs:));
}

uint64_t partial apply for closure #1 in static NavigationLinkModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static NavigationLinkModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in static NavigationLinkModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[2] = type metadata accessor for NavigationLinkModifier();
  uint64_t v10 = type metadata accessor for NavigationLinkModifier.Payload();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a4, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t InternalModifier.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NavigationLinkModifier.Payload();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v19 - v5;
  InternalModifier.payload.getter((uint64_t)&v19 - v5);
  InternalModifier.navigationListKey.getter(&v19);
  long long v7 = v19;
  uint64_t v8 = v20;
  uint64_t v9 = v21;
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  outlined init with take of NavigationState.ListKey??((uint64_t)&v19, (uint64_t)v24);
  if (v25 == 2) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v7;
  }
  if (v25 == 2) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)&v7 + 1);
  }
  if (v25 == 2) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v8;
  }
  if (v25 == 2) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v9;
  }
  v26[0] = v12;
  v26[1] = v13;
  if (v25 == 2) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v10;
  }
  if (v25 == 2) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v11;
  }
  void v26[2] = v14;
  _OWORD v26[3] = v15;
  v26[4] = v16;
  v26[5] = v17;
  return InternalNavigationLinkModifier.init(payload:navigationListKey:)((uint64_t)v6, (uint64_t)v26, a1, a2);
}

uint64_t initializeWithCopy for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 17);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)a2 + 2;
  }
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
  }
  swift_retain();
  *(unsigned char *)(a1 + 17) = v8;
  unint64_t v9 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v10 + 8) < 0xFFFFFFFFuLL)
  {
    long long v11 = *(_OWORD *)v10;
    *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
    *(_OWORD *)unint64_t v9 = v11;
  }
  else
  {
    *(void *)unint64_t v9 = *(void *)v10;
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
    *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
    swift_retain();
    swift_retain();
  }
  *(unsigned char *)(v9 + 20) = *(unsigned char *)(v10 + 20);
  *(unsigned char *)(v9 + 21) = *(unsigned char *)(v10 + 21);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 16;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v9 + v14 + 22) & ~v14;
  uint64_t v16 = (v10 + v14 + 22) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 48) + 7;
  unint64_t v18 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(unsigned char *)(v18 + 9) = *(unsigned char *)(v19 + 9);
  swift_retain();
  return a1;
}

uint64_t InternalModifier.payload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NavigationLinkModifier.Payload();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

long long *InternalModifier.navigationListKey.getter@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
  unint64_t result = (long long *)AGGraphGetWeakValue();
  if (result)
  {
    long long v3 = *result;
    long long v4 = result[1];
    long long v5 = result[2];
  }
  else
  {
    long long v5 = xmmword_18834C6B0;
    long long v3 = 0uLL;
    long long v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t BaseModifier.Child.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v5 = type metadata accessor for BaseModifier();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v25 - v7;
  uint64_t Value = AGGraphGetValue();
  unint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v31 = v8;
  v10(v8, Value, v5);
  uint64_t v28 = BaseModifier.Child.stackKey.getter();
  uint64_t v27 = v11;
  uint64_t v26 = v12;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  BaseModifier.Child.listKey.getter(&v38);
  uint64_t v13 = *((void *)&v38 + 1);
  uint64_t v14 = v38;
  uint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v17 = v41;
  uint64_t v18 = v42;
  outlined init with take of NavigationState.ListKey??((uint64_t)&v38, (uint64_t)v43);
  if (v44 == 2)
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 1;
  }
  v45[0] = v14;
  v45[1] = v13;
  _OWORD v45[2] = v15;
  v45[3] = v16;
  v45[4] = v17;
  v45[5] = v18;
  BaseModifier.Child.authority.getter((uint64_t)v35);
  outlined init with copy of NavigationAuthority??((uint64_t)v35, (uint64_t)v33);
  if (v34 == 2)
  {
    long long v36 = xmmword_18834BB90;
    uint64_t v37 = 0;
  }
  else
  {
    _s7SwiftUI19NavigationAuthorityVSgWObTm_2((uint64_t)v33, (uint64_t)&v36, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  if (v27 == 7) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v26;
  }
  if (v27 == 7) {
    uint64_t v20 = 6;
  }
  else {
    uint64_t v20 = v27;
  }
  if (v27 == 7) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v28;
  }
  outlined destroy of NavigationAuthority??((uint64_t)v35);
  char v22 = *(unsigned char *)AGGraphGetValue();
  uint64_t KeyPath = swift_getKeyPath();
  return BaseModifier.Transform.init(modifier:stackKey:listKey:navigationAuthority:isExtracting:selectionPopsSubsequentColumn:)((uint64_t)v31, v21, v20, v19, (uint64_t)v45, (uint64_t)&v36, v22, KeyPath, v32, 0);
}

uint64_t initializeWithCopy for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = v6 + a1;
  char v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v11 = *(unsigned __int8 *)(v10 + 17);
  swift_retain();
  if (v11 >= 2) {
    unsigned int v11 = *(_DWORD *)v10 + 2;
  }
  if (v11 == 1)
  {
    *(void *)unint64_t v9 = *(void *)v10;
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
    *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
    swift_retain();
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    *(unsigned char *)unint64_t v9 = *(unsigned char *)v10;
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
  }
  swift_retain();
  *(unsigned char *)(v9 + 17) = v12;
  unint64_t v13 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(unsigned char *)(v13 + 9) = *(unsigned char *)(v14 + 9);
  return a1;
}

uint64_t outlined destroy of NavigationAuthority??(uint64_t a1)
{
  type metadata accessor for NavigationState.ListKey??(0, (unint64_t *)&lazy cache variable for type metadata for NavigationAuthority??, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of NavigationState.ListKey??(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NavigationState.ListKey??(0, &lazy cache variable for type metadata for NavigationState.ListKey??, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for NavigationState.ListKey??(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for _GraphValue<Namespace.ID>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI15NavigationStateV7ListKeyVSgSgMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for NavigationState.ListKey?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t outlined init with copy of NavigationAuthority??(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI15NavigationStateV7ListKeyVSgSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NavigationAuthority??, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double BaseModifier.Child.authority.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

{
  uint64_t WeakValue;
  double result;

  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_3(WeakValue, a1, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

{
  uint64_t WeakValue;
  double result;

  _s7SwiftUI7BindingVySbGMaTm_11(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_4(WeakValue, a1, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI7BindingVySbGMaTm_11);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t BaseModifier.Child.stackKey.getter()
{
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return *(void *)result;
  }
  return result;
}

{
  uint64_t result;

  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return *(void *)result;
  }
  return result;
}

{
  uint64_t result;

  _s7SwiftUI7BindingVySbGMaTm_11(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return *(void *)result;
  }
  return result;
}

long long *BaseModifier.Child.listKey.getter@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
  uint64_t result = (long long *)AGGraphGetWeakValue();
  if (result)
  {
    long long v3 = *result;
    long long v4 = result[1];
    long long v5 = result[2];
  }
  else
  {
    long long v5 = xmmword_18834C6B0;
    long long v3 = 0uLL;
    long long v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

{
  long long *result;
  long long v3;
  long long v4;
  long long v5;

  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
  uint64_t result = (long long *)AGGraphGetWeakValue();
  if (result)
  {
    long long v3 = *result;
    long long v4 = result[1];
    long long v5 = result[2];
  }
  else
  {
    long long v5 = xmmword_18834C6B0;
    long long v3 = 0uLL;
    long long v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

{
  long long *result;
  long long v3;
  long long v4;
  long long v5;

  _s7SwiftUI7BindingVySbGMaTm_11(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
  uint64_t result = (long long *)AGGraphGetWeakValue();
  if (result)
  {
    long long v3 = *result;
    long long v4 = result[1];
    long long v5 = result[2];
  }
  else
  {
    long long v5 = xmmword_18834C6B0;
    long long v3 = 0uLL;
    long long v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t static NavigationLinkModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t InternalNavigationLinkModifier.init(payload:navigationListKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 45) = 0;
  *(void *)(a4 + 56) = swift_getKeyPath();
  *(unsigned char *)(a4 + 64) = 0;
  unint64_t v7 = (int *)type metadata accessor for InternalNavigationLinkModifier();
  uint64_t v8 = v7;
  *(unsigned char *)(a4 + v7[18]) = 1;
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 17);
  char v20 = v11;
  *(void *)(a4 + 8) = *(void *)a1;
  *(void *)(a4 + 16) = v10;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a4 + 24) = v12;
  *(unsigned char *)(a4 + 25) = v11;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v21 = *(void *)(a1 + 32);
  if (v21) {
    uint64_t v14 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v22 = v14;
  if (v21) {
    int v15 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v15 = 0;
  }
  int v23 = v15;
  uint64_t v19 = v7[14];
  *(unsigned char *)(a4 + 65) = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(a4 + v7[15]) = *(unsigned char *)(a1 + 45);
  uint64_t v16 = (int *)type metadata accessor for NavigationLinkModifier.Payload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4 + v8[13], a1 + v16[12], a3);
  *(void *)(a4 + v19) = *(void *)(a1 + v16[13]);
  LOBYTE(v19) = *(unsigned char *)(a1 + v16[14]);
  outlined copy of StateOrBinding<Bool>(v9, v10, v12, v20);
  outlined copy of Binding<NavigationSplitViewColumn>?(v13, v21);
  uint64_t v17 = *(void (**)(uint64_t, int *))(*((void *)v16 - 1) + 8);
  swift_retain();
  v17(a1, v16);
  *(unsigned char *)(a4 + v8[16]) = v19;
  _s7SwiftUI19NavigationAuthorityVSgWObTm_2(a2, a4 + v8[17], &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  uint64_t result = outlined consume of StateOrBinding<Bool>(*(void *)(a4 + 32), *(void *)(a4 + 40), *(unsigned int *)(a4 + 48), *(unsigned char *)(a4 + 52));
  *(void *)(a4 + 32) = v22;
  *(void *)(a4 + 40) = v21;
  *(_DWORD *)(a4 + 48) = v23;
  *(unsigned char *)(a4 + 52) = v21 != 0;
  return result;
}

uint64_t type metadata accessor for InternalNavigationLinkModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t NavigationLink.body.getter@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v82 = a2;
  uint64_t v84 = *((void *)a1 + 3);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v78 = (char *)&v62 - v7;
  uint64_t v8 = *((void *)a1 + 5);
  uint64_t v94 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v80 = v5;
  uint64_t v74 = WitnessTable;
  uint64_t v10 = type metadata accessor for NavigationLinkModifier();
  uint64_t v79 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v77 = (uint64_t)&v62 - v11;
  uint64_t v12 = *((void *)a1 + 2);
  char v83 = a1;
  uint64_t v13 = *((void *)a1 + 4);
  uint64_t v14 = type metadata accessor for Button();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (_WORD *)((char *)&v62 - v16);
  type metadata accessor for ViewInputFlagModifier<NavigationButtonInput>();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v69 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  char v20 = (char *)&v62 - v19;
  uint64_t v71 = v21;
  uint64_t v81 = v10;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v70 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v68 = (char *)&v62 - v23;
  uint64_t v72 = v24;
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v25 - 8);
  uint64_t v76 = v25;
  MEMORY[0x1F4188790](v25);
  uint64_t v73 = (char *)&v62 - v27;
  BOOL v67 = (*(unsigned char *)(v3 + 17) & 1) == 0 && *(void *)(v3 + v83[16]) == 0;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = v84;
  *(&v62 - 6) = v12;
  *(&v62 - 5) = v28;
  uint64_t v59 = v13;
  uint64_t v60 = v8;
  uint64_t v61 = v3;
  Button.init(action:label:)((uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, (void (*)(uint64_t))partial apply for closure #2 in NavigationLink.body.getter, v17);
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v64 = v29;
  unint64_t v30 = lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
  uint64_t v66 = v20;
  View.input<A>(_:)((uint64_t)&type metadata for NavigationButtonInput, v14, (uint64_t)&type metadata for NavigationButtonInput, v29, v30);
  (*(void (**)(_WORD *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v31 = *(void *)(v3 + 8);
  char v32 = *(unsigned char *)(v3 + 17);
  uint64_t v33 = *(unsigned __int8 *)(v3 + 16);
  *(void *)&long long v91 = *(void *)v3;
  *((void *)&v91 + 1) = v31;
  char v92 = v33;
  char v93 = v32;
  outlined copy of StateOrBinding<Bool>(v91, v31, v33, v32);
  uint64_t v34 = v83;
  uint64_t updated = NavigationLink.$triggerUpdateSeed.getter();
  uint64_t v62 = v35;
  int v37 = v36;
  char v38 = *(unsigned char *)(v3 + v34[15]);
  char v39 = *(unsigned char *)(v3 + v34[17]);
  uint64_t v40 = (uint64_t)v78;
  uint64_t v41 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v78, v3 + v34[14], v80);
  uint64_t v65 = v34[16];
  uint64_t v42 = *(void *)(v3 + v65);
  swift_retain();
  char v43 = NavigationLink.wasTriggeredBySelection.getter();
  uint64_t v61 = v74;
  uint64_t v44 = v77;
  NavigationLinkModifier.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:needsButtonStyle:)(&v91, updated, v62, v37, v38, v39, v40, v42, v77, v67, v43 & 1, v41);
  uint64_t v89 = v64;
  char v90 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v45 = v71;
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v47 = v68;
  uint64_t v48 = v81;
  uint64_t v49 = v66;
  MEMORY[0x18C113660](v44, v45, v81, v46);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v44, v48);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v49, v45);
  uint64_t v87 = v46;
  long long v88 = &protocol witness table for NavigationLinkModifier<A>;
  uint64_t v50 = v72;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v52 = v73;
  MEMORY[0x18C113660](v51, v50, MEMORY[0x1E4F3F740], v51);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v50);
  char v53 = NavigationLink.deprecated_isActive.getter();
  LOBYTE(v91) = NavigationSelectionModifier.init(isActive:presentedValue:)(v53 & 1) & 1;
  *((void *)&v91 + 1) = v54;
  uint64_t v55 = type metadata accessor for NavigationSelectionModifier();
  uint64_t v85 = v51;
  uint64_t v86 = MEMORY[0x1E4F3F738];
  swift_retain();
  uint64_t v56 = v76;
  uint64_t v57 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v91, v56, v55, v57);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v52, v56);
}

uint64_t Button.init(action:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, _WORD *a4@<X8>)
{
  *a4 = 256;
  uint64_t v7 = (void *)((char *)a4 + *(int *)(type metadata accessor for Button() + 36));
  *uint64_t v7 = a1;
  v7[1] = a2;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = swift_retain();
  a3(v8);

  return swift_release();
}

uint64_t destroy for NavigationLinkModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 17);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1) {
    swift_release();
  }
  swift_release();
  unint64_t v5 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v5 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((v5
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 22) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

uint64_t type metadata accessor for NavigationLinkModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined copy of StateOrBinding<Bool>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_retain();
  }

  return swift_retain();
}

uint64_t type metadata accessor for NavigationSelectionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.input<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ViewInputFlagModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(uint64_t, uint64_t, double))(a5 + 56))(a3, a5, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, a3);
  MEMORY[0x18C113660](v16, a2, v12, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t static ViewInputFlagModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v9 = *a1;
  type metadata accessor for ViewInputFlagModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a4 + 16) + 8))(v8, a2, a3);
}

uint64_t type metadata accessor for ViewInputFlagModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsSharingPickerHost()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsSharingPickerHost()
{
  lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost();
  PropertyList.subscript.getter();
  return v1;
}

void type metadata accessor for ViewInputFlagModifier<NavigationButtonInput>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<NavigationButtonInput>)
  {
    lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<NavigationButtonInput>);
    }
  }
}

uint64_t NavigationSelectionModifier.init(isActive:presentedValue:)(char a1)
{
  return a1 & 1;
}

uint64_t NavigationLinkModifier.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:needsButtonStyle:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12)
{
  char v12 = *((unsigned char *)a1 + 16);
  char v13 = *((unsigned char *)a1 + 17);
  long long v15 = *a1;
  char v16 = v12;
  char v17 = v13;
  return NavigationLinkModifier.Payload.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:)((uint64_t)&v15, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t NavigationLinkModifier.Payload.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12)
{
  char v15 = *(unsigned char *)(a1 + 16);
  char v16 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(unsigned char *)(a9 + 16) = v15;
  *(unsigned char *)(a9 + 17) = v16;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = a3;
  *(_DWORD *)(a9 + 40) = a4;
  *(unsigned char *)(a9 + 44) = a5;
  *(unsigned char *)(a9 + 45) = a6;
  char v17 = (int *)type metadata accessor for NavigationLinkModifier.Payload();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(a9 + v17[12], a7, a12);
  *(void *)(a9 + v17[13]) = a8;
  *(unsigned char *)(a9 + v17[14]) = a10;
  *(unsigned char *)(a9 + v17[15]) = a11;
  return result;
}

uint64_t type metadata accessor for NavigationLinkModifier.Payload()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in NavigationLink.body.getter()
{
  return closure #2 in NavigationLink.body.getter(*(void *)(v0 + 48), *(void *)(v0 + 16));
}

uint64_t closure #2 in NavigationLink.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = v7;
  v13[1] = v8;
  void v13[2] = v9;
  v13[3] = v10;
  uint64_t v11 = type metadata accessor for NavigationLink();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v11 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t NavigationLink.wasTriggeredBySelection.getter()
{
  _s7SwiftUI7BindingVySbGMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  return v1;
}

uint64_t NavigationLink.deprecated_isActive.getter()
{
  if (*(unsigned char *)(v0 + 17))
  {
    _s7SwiftUI7BindingVySbGMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v2);
  }
  else
  {
    _s7SwiftUI7BindingVySbGMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
  }
  return v2;
}

uint64_t NavigationLink.$triggerUpdateSeed.getter()
{
  _s7SwiftUI7BindingVySbGMaTm_7(0, &lazy cache variable for type metadata for State<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  return v1;
}

void type metadata accessor for Binding<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_5(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_6(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_7(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_9(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Binding();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for Binding<AnyListSelection>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_10(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVySbGMaTm_11(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigationButtonInput()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance NavigationButtonInput()
{
  lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t type metadata accessor for InternalModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static BaseModifier._makeViewList(modifier:inputs:body:)()
{
  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for BaseModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  _ViewInputs.init(withoutGeometry:)();
  _ViewInputs.withoutGeometryDependencies.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
  type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
  _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, v0);
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for BaseModifier.Transform();
  type metadata accessor for BaseModifier.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  return static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations()
{
  unint64_t result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations;
  if (!lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
  }
  return result;
}

uint64_t type metadata accessor for BaseModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInHostingConfiguration()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance MultiViewLabel()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance MultiViewLabel()
{
  lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel;
  if (!lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiViewLabel and conformance MultiViewLabel);
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ProvidesContextMenuInteraction()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ButtonContainerIsBorderedInput()
{
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ProvidesEditMenuInteraction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction()
{
  unint64_t result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ProvidesEditMenuInteraction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ProvidesEditMenuInteraction(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasKeyboardShortcut()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListLabeledContentPrefersHorizontalLayout()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ListLabeledContentPrefersHorizontalLayout()
{
  lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout;
  if (!lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout);
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AccessibilityCombinedLabeledContent()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInSecureDrawingHierarchy()
{
  lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInSecureDrawingHierarchy()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance SecureDrawingViewGraphFeature()
{
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy()
{
  unint64_t result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInLazyContainer()
{
  return PropertyList.subscript.setter();
}

ProtocolDescriptor *_commandsProtocolDescriptor()
{
  return &protocol descriptor for Commands;
}

_UNKNOWN **base witness table accessor for View in LazyHGrid<A>()
{
  return &protocol witness table for LazyHGrid<A>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextFieldLabelDisplayModeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for TextFieldLabelDisplayModeModifier<A>);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TextFieldLabelDisplayModeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static TextFieldLabelDisplayModeModifier._makeInputs(modifier:inputs:)(a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityScrollableModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

_UNKNOWN **base witness table accessor for View in MergePlatformItemsView<A>()
{
  return &protocol witness table for MergePlatformItemsView<A>;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableLazyStackLogging()
{
  return &protocol witness table for EnableLazyStackLogging;
}

void static ContentMarginPlacement.scrollIndicators.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigableListModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for NavigableListModifier<A>);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigableListModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static NavigableListModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void partial apply for closure #2 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)()
{
  closure #2 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(*(unsigned char *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in FocusStoreLocation.findEntry(with:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in FocusStoreLocation.findEntry(with:)(a1, a2, *(void *)(v2 + 32), *(char **)(v2 + 40));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ListStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for ListStyleWriter<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedList<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ResolvedList._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t partial apply for implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)()
{
  return implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)();
}

uint64_t storeEnumTagSinglePayload for SheetPreference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t closure #2 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for CustomHoverEffectPrimitiveViewModifier();
  void v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CustomHoverEffectModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

void partial apply for specialized closure #1 in closure #1 in UIHostingController.performRender()()
{
  specialized closure #1 in closure #1 in UIHostingController.performRender()(*(void *)(v0 + 16));
}

void specialized closure #1 in closure #1 in UIHostingController.performRender()(uint64_t a1)
{
  unsigned __int8 v1 = *(void **)(a1 + direct field offset for UIHostingController.host);
  _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v2 = v1;
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
}

void DeprecatedAlertBridge.presenter.getter()
{
  if (MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))) {
    _UIHostingView.presenterViewController.getter();
  }
  __break(1u);
}

uint64_t SheetBridge.presenter.getter()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for SheetBridge.presenterOverride);
  if (!result)
  {
    uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for SheetBridge.host);
    if (result) {
      _UIHostingView.presenterViewController.getter();
    }
    __break(1u);
  }
  return result;
}

void SharingActivityPickerBridge.preferencesDidChange(_:)(void *a1)
{
  uint64_t v2 = v1;
  v42[0] = *a1;
  PreferenceValues.subscript.getter();
  uint64_t v3 = *(void *)&v43[0];
  if (*(void *)(*(void *)&v43[0] + 16) > 1uLL) {
    goto LABEL_7;
  }
  uint64_t v4 = (void *)SharingActivityPickerBridge.presenter.getter();
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v5 = v4;
  if (DWORD2(v43[0]) != -1)
  {
    int v6 = *(_DWORD *)(v1 + 216);
    if (v6 != -1 && DWORD2(v43[0]) == v6)
    {

LABEL_7:
      swift_bridgeObjectRelease();
      return;
    }
  }
  *(_DWORD *)(v1 + 216) = DWORD2(v43[0]);
  if (*(void *)(v3 + 16))
  {
    long long v7 = *(_OWORD *)(v3 + 144);
    v43[6] = *(_OWORD *)(v3 + 128);
    v43[7] = v7;
    long long v44 = *(_OWORD *)(v3 + 160);
    int v45 = *(_DWORD *)(v3 + 176);
    long long v8 = *(_OWORD *)(v3 + 80);
    v43[2] = *(_OWORD *)(v3 + 64);
    v43[3] = v8;
    long long v9 = *(_OWORD *)(v3 + 112);
    v43[4] = *(_OWORD *)(v3 + 96);
    v43[5] = v9;
    long long v10 = *(_OWORD *)(v3 + 48);
    v43[0] = *(_OWORD *)(v3 + 32);
    v43[1] = v10;
    outlined retain of SharingActivityPickerPresentation((uint64_t *)v43);
    swift_bridgeObjectRelease();
    outlined init with take of SharingActivityPickerPresentation?(v1 + 56, (uint64_t)v41);
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)v41, (uint64_t)v42);
    if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v42) == 1)
    {
      SharingActivityPickerBridge.present(_:presenter:)((uint64_t)v43, v5);

LABEL_27:
      outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>((uint64_t *)v43);
      return;
    }
    outlined init with take of SharingPickerSource((uint64_t)v43, (uint64_t)v46);
    outlined init with take of SharingPickerSource((uint64_t)v46, (uint64_t)v47);
    if (_s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v47) == 1)
    {
      uint64_t v11 = *(void *)(_s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v47) + 24);
      outlined init with take of SharingActivityPickerPresentation?((uint64_t)v41, (uint64_t)v40);
      outlined retain of SharingActivityPickerPresentation((uint64_t *)v40);
    }
    else
    {
      char v12 = (long long *)_s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v47);
      long long v13 = v12[5];
      long long v52 = v12[4];
      long long v53 = v13;
      long long v14 = v12[7];
      long long v54 = v12[6];
      long long v55 = v14;
      long long v15 = v12[1];
      long long v48 = *v12;
      long long v49 = v15;
      long long v16 = v12[3];
      long long v50 = v12[2];
      long long v51 = v16;
      long long v30 = v52;
      long long v31 = v53;
      long long v32 = v54;
      long long v33 = v55;
      long long v26 = v48;
      long long v27 = v49;
      long long v28 = v50;
      long long v29 = v16;
      outlined init with take of SharingActivityPickerPresentation?((uint64_t)v41, (uint64_t)v40);
      outlined retain of SharingActivityPickerPresentation((uint64_t *)v40);
      type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>();
      MEMORY[0x18C113DA0](v34);
      if (v35 == 1)
      {
LABEL_26:

        outlined release of SharingActivityPickerPresentation?((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);
        goto LABEL_27;
      }
      uint64_t v11 = v34[0];
      outlined copy of AnyIdentifiableShareConfiguration?(v34[0], v34[1], v34[2], v34[3], v34[4], v34[5], v34[6], v34[7], v34[8], v35, v36, v37, v38, v39, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    }
    outlined init with take of SharingPickerSource((uint64_t)v42, (uint64_t)v34);
    int v17 = _s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v34);
    uint64_t v18 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v34);
    if (v17 == 1)
    {
      if (v11 != *(void *)(v18 + 24)) {
        goto LABEL_26;
      }
    }
    else
    {
      long long v19 = *(_OWORD *)v18;
      long long v20 = *(_OWORD *)(v18 + 16);
      long long v21 = *(_OWORD *)(v18 + 48);
      _DWORD v40[2] = *(_OWORD *)(v18 + 32);
      v40[3] = v21;
      v40[0] = v19;
      v40[1] = v20;
      long long v22 = *(_OWORD *)(v18 + 64);
      long long v23 = *(_OWORD *)(v18 + 80);
      long long v24 = *(_OWORD *)(v18 + 112);
      v40[6] = *(_OWORD *)(v18 + 96);
      v40[7] = v24;
      v40[4] = v22;
      v40[5] = v23;
      type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>();
      MEMORY[0x18C113DA0](&v26);
      if (*((void *)&v30 + 1) == 1) {
        goto LABEL_26;
      }
      uint64_t v25 = v26;
      outlined copy of AnyIdentifiableShareConfiguration?(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
      if (v11 != v25) {
        goto LABEL_26;
      }
    }
    outlined init with take of SharingActivityPickerPresentation?(v2 + 56, (uint64_t)&v26);
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)&v26, (uint64_t)v40);
    if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v40) == 1)
    {
      __break(1u);
      return;
    }
    *(void *)(v2 + 192) = *((void *)&v44 + 1);
    swift_retain();
    swift_release();
    SharingActivityPickerBridge.updateAnchor(deferred:)(0);
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  outlined init with take of SharingActivityPickerPresentation?(v1 + 56, (uint64_t)v42);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v42, (uint64_t)v43);
  if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v43) != 1) {
    SharingActivityPickerBridge.reset()();
  }
}

uint64_t SharingActivityPickerBridge.presenter.getter()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + 40);
  if (!result)
  {
    uint64_t result = MEMORY[0x18C119DF0](v0 + 16);
    if (result) {
      _UIHostingView.presenterViewController.getter();
    }
    __break(1u);
  }
  return result;
}

uint64_t SharingActivityPickerBridge.__deallocating_deinit()
{
  SharingActivityPickerBridge.deinit();

  return swift_deallocClassInstance();
}

uint64_t SharingActivityPickerBridge.deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  outlined init with take of SharingActivityPickerPresentation?(v0 + 56, (uint64_t)v2);
  outlined release of SharingActivityPickerPresentation?((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);

  return v0;
}

uint64_t outlined release of SharingActivityPickerPresentation?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  return a1;
}

uint64_t outlined consume of SharingActivityPickerPresentation?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    outlined consume of SharingPickerSource(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.updateTransform()()
{
  uint64_t v0 = _UIHostingView.base.getter();
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + 2);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    if (ViewGraph.invalidateTransform()() || (*((unsigned char *)v0 + 241) & 1) == 0)
    {
      swift_release();

LABEL_7:
      uint64_t v3 = (void *)specialized _UIHostingView.inspectorBridge.getter();
      if (v3)
      {
        id v4 = v3;
        UIKitInspectorV3Bridge.updateAnchor()();
      }
      id v5 = (id)specialized _UIHostingView.editMenuBridge.getter();
      EditMenuBridge.transformDidChange()();

      _UIHostingView.viewController.getter();
    }
    objc_msgSend(v2, sel__unregisterForGeometryChanges);

    *((unsigned char *)v0 + 241) = 0;
  }
  swift_release();
  goto LABEL_7;
}

uint64_t sub_1874233C4(void *a1)
{
  if (a1)
  {
    swift_retain();

    UIKitDialogBridge.transformDidChange()();
    swift_release();
  }
  uint64_t result = specialized _UIHostingView.sharingActivityPickerBridge.getter();
  if (result)
  {
    swift_retain();
    SharingActivityPickerBridge.transformDidChange()();
    uint64_t result = swift_release();
  }
  if ((*((unsigned char *)v1 + *(void *)((*v2 & *v1) + 0x98) + 32) & 1) == 0)
  {
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

uint64_t specialized _UIHostingView.sharingActivityPickerBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120));
}

Swift::Void __swiftcall EditMenuBridge.transformDidChange()()
{
  if (*(void *)(v0 + direct field offset for EditMenuBridge.presentedMenu + 40) != 1)
  {
    uint64_t v1 = *(void **)(v0 + direct field offset for EditMenuBridge.interaction);
    if (v1) {
      objc_msgSend(v1, sel_updateVisibleMenuPositionAnimated_, 1);
    }
  }
}

Swift::Void __swiftcall SharingActivityPickerBridge.transformDidChange()()
{
}

void SharingActivityPickerBridge.updateAnchor(deferred:)(char a1)
{
  if ((v1[29] & 1) == 0)
  {
    uint64_t v3 = *v1;
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)(v1 + 7), (uint64_t)v17);
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)v17, (uint64_t)v18);
    if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v18) != 1)
    {
      long long v26 = v18[6];
      long long v27 = v18[7];
      long long v28 = v18[8];
      int v29 = v19;
      long long v22 = v18[2];
      long long v23 = v18[3];
      long long v24 = v18[4];
      long long v25 = v18[5];
      long long v20 = v18[0];
      long long v21 = v18[1];
      id v4 = (void *)v1[26];
      if (v4)
      {
        outlined init with take of SharingActivityPickerPresentation?((uint64_t)v17, (uint64_t)v16);
        outlined retain of SharingActivityPickerPresentation(v16);
        id v5 = objc_msgSend(v4, sel_popoverPresentationController);
        if (v5)
        {
          int v6 = v5;
          if (a1)
          {
            *((unsigned char *)v1 + 232) = 1;
            uint64_t v7 = swift_allocObject();
            swift_weakInit();
            uint64_t v8 = swift_allocObject();
            *(void *)(v8 + 16) = *(void *)(v3 + 80);
            uint64_t v9 = *(void *)(v3 + 88);
            long long v10 = v27;
            *(_OWORD *)(v8 + 136) = v26;
            *(_OWORD *)(v8 + 152) = v10;
            *(_OWORD *)(v8 + 168) = v28;
            long long v11 = v23;
            *(_OWORD *)(v8 + 72) = v22;
            *(_OWORD *)(v8 + 88) = v11;
            long long v12 = v25;
            *(_OWORD *)(v8 + 104) = v24;
            *(_OWORD *)(v8 + 120) = v12;
            long long v13 = v21;
            *(_OWORD *)(v8 + 40) = v20;
            *(void *)(v8 + 24) = v9;
            *(void *)(v8 + 32) = v7;
            *(_DWORD *)(v8 + 184) = v29;
            *(_OWORD *)(v8 + 56) = v13;
            *(void *)(v8 + 192) = v6;
            outlined release of SharingActivityPickerPresentation?((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of SharingActivityPickerPresentation?);
            swift_retain();
            id v14 = v6;
            onNextMainRunLoop(do:)();

            outlined release of SharingActivityPickerPresentation?((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);
            swift_release();
            swift_release();
          }
          else
          {
            id v15 = SharingActivityPickerBridge.popoverPresentationDelegate.getter();
            specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v6);

            outlined release of SharingActivityPickerPresentation?((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);
          }
        }
        else
        {
          outlined release of SharingActivityPickerPresentation?((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);
        }
      }
    }
  }
}

uint64_t outlined init with take of SharingActivityPickerPresentation?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _GraphValue<SharingActivityPickerModifier>(0, &lazy cache variable for type metadata for SharingActivityPickerPresentation?, (uint64_t)&type metadata for SharingActivityPickerPresentation, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _GraphValue<SharingActivityPickerModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t _s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 136);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

Swift::Void __swiftcall UIKitDialogBridge.transformDidChange()()
{
  if (*(unsigned char *)(v0 + 44) != 1) {
    return;
  }
  uint64_t v1 = v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 40);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 64);
  if (!v3)
  {
    swift_endAccess();
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    char v20 = 0;
LABEL_13:
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
    return;
  }
  if (*(void *)(v3 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of ConfirmationDialog(*(void *)(v3 + 56) + 184 * v4, (uint64_t)&v9);
  }
  else
  {
    char v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
  }
  swift_endAccess();
  if (!(void)v10) {
    goto LABEL_13;
  }
  outlined init with take of ConfirmationDialog((uint64_t)&v9, (uint64_t)v21);
  uint64_t v6 = *(void **)(v1 + 48);
  if (v6)
  {
    id v7 = objc_msgSend(v6, sel_popoverPresentationController);
    if (v7)
    {
      uint64_t v8 = v7;
      UIKitDialogBridge.updateAnchor(dialog:presentationController:)((uint64_t)v21, v7);
    }
  }
  outlined destroy of ConfirmationDialog((uint64_t)v21);
}

uint64_t @objc UIKitInspectorV3Bridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  uint64_t v3 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined destroy of PopoverPresentation?(a1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
}

Swift::Void __swiftcall UIKitInspectorV3Bridge.updateAnchor()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v0;
  _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v37 - v4;
  uint64_t v6 = (char *)v1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 80);
  uint64_t v8 = *(void *)(v2 + 88);
  uint64_t v9 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(_OWORD *, char *, uint64_t))(v10 + 16))(v50, v6, v9);
  switch(BYTE8(v51))
  {
    case 1:
      goto LABEL_3;
    case 2:
      long long v22 = *(void **)((char *)v1 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
      if (!v22) {
        return;
      }
      id v23 = objc_msgSend(v22, sel_presentationController);
      if (!v23) {
        return;
      }
      long long v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      long long v26 = (void *)swift_allocObject();
      void v26[2] = v7;
      _OWORD v26[3] = v8;
      v26[4] = v25;
      v26[5] = v24;
      swift_retain();
      id v27 = v24;
      onNextMainRunLoop(do:)();

      swift_release();
      goto LABEL_11;
    case 3:
      return;
    default:
      (*(void (**)(_OWORD *, uint64_t))(v10 + 8))(v50, v9);
LABEL_3:
      uint64_t v11 = (uint64_t)v1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
      swift_beginAccess();
      outlined init with copy of PopoverPresentation?(v11, (uint64_t)&v43, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      if (!(void)v43)
      {
        outlined destroy of PopoverPresentation?((uint64_t)&v43, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
        return;
      }
      long long v53 = v47;
      long long v54 = v48;
      v55[0] = v49[0];
      *(void *)((char *)v55 + 14) = *(void *)((char *)v49 + 14);
      v50[0] = v43;
      v50[1] = v44;
      long long v51 = v45;
      long long v52 = v46;
      long long v12 = *(void **)((char *)v1 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
      if (!v12) {
        goto LABEL_21;
      }
      id v13 = v12;
      id v14 = objc_msgSend(v13, sel_presentationController);
      if (v14)
      {
        long long v15 = v14;
        if (specialized UIKitInspectorV3Bridge.popoverCanPresent(popover:)((uint64_t)v50, v7, v8))
        {
          uint64_t v16 = swift_allocObject();
          swift_unknownObjectWeakInit();
          outlined init with copy of PopoverPresentation((uint64_t)v50, (uint64_t)&v43);
          uint64_t v17 = swift_allocObject();
          long long v18 = v48;
          *(_OWORD *)(v17 + 104) = v47;
          *(_OWORD *)(v17 + 120) = v18;
          *(_OWORD *)(v17 + 136) = v49[0];
          long long v19 = v44;
          *(_OWORD *)(v17 + 40) = v43;
          *(_OWORD *)(v17 + 56) = v19;
          long long v20 = v46;
          *(_OWORD *)(v17 + 72) = v45;
          *(void *)(v17 + 16) = v7;
          *(void *)(v17 + 24) = v8;
          *(void *)(v17 + 32) = v16;
          *(void *)(v17 + 150) = *(void *)((char *)v49 + 14);
          *(_OWORD *)(v17 + 88) = v20;
          *(void *)(v17 + 160) = v15;
          swift_retain();
          id v21 = v15;
          static Update.enqueueAction(_:)();

          swift_release();
          outlined destroy of PopoverPresentation((uint64_t)v50);
LABEL_11:
          swift_release();
        }
        else
        {
          static Log.presentation.getter();
          uint64_t v28 = type metadata accessor for Logger();
          uint64_t v29 = *(void *)(v28 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v5, 1, v28) == 1)
          {
            outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
          }
          else
          {
            id v30 = v13;
            long long v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.default.getter();
            int v41 = v32;
            if (os_log_type_enabled(v31, v32))
            {
              uint64_t v40 = v29;
              long long v33 = (uint8_t *)swift_slowAlloc();
              uint64_t v42 = (void *)swift_slowAlloc();
              *(void *)&long long v43 = v30;
              uint64_t v38 = v33;
              uint64_t v39 = v31;
              *(_DWORD *)long long v33 = 138412290;
              uint64_t v37 = v33 + 4;
              id v34 = v30;
              long long v31 = v39;
              uint64_t v29 = v40;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v42 = v12;

              uint64_t v35 = v38;
              _os_log_impl(&dword_1872C6000, v31, (os_log_type_t)v41, "Dismissing popover for pc %@ due to scrolling out of bounds", v38, 0xCu);
              type metadata accessor for NSObject?();
              uint64_t v36 = v42;
              swift_arrayDestroy();
              MEMORY[0x18C119C60](v36, -1, -1);
              MEMORY[0x18C119C60](v35, -1, -1);
            }
            else
            {
            }
            (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v28);
          }
          UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v13);

LABEL_21:
          outlined destroy of PopoverPresentation((uint64_t)v50);
        }
      }
      else
      {
        outlined destroy of PopoverPresentation((uint64_t)v50);
      }
      return;
  }
}

uint64_t UIKitInspectorV3Bridge.preferencesDidChange(_:)(uint64_t *a1)
{
  v5[0] = *a1;
  uint64_t v1 = v5[0];
  UIKitInspectorV3Bridge.updateInspectorIfNeeded(_:)(v5);
  v5[0] = v1;
  PreferenceValues.subscript.getter();
  uint64_t v6 = v8;
  int v7 = v9;
  uint64_t v4 = v1;
  PreferenceValues.subscript.getter();
  v3[0] = v1;
  PreferenceValues.subscript.getter();
  LOBYTE(v3[0]) = v1;
  v3[1] = HIDWORD(v1);
  UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(&v6, v5, (unsigned __int8 *)v3);
  outlined destroy of PopoverPresentation?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4F3FD10]);
  return swift_bridgeObjectRelease();
}

uint64_t UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = v3;
  long long v53 = a2;
  _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  MEMORY[0x1F4188790](v7 - 8);
  int v9 = (char *)v48 - v8;
  uint64_t v10 = *a1;
  int v54 = *((_DWORD *)a1 + 2);
  uint64_t v52 = *a3;
  uint64_t v51 = *((unsigned int *)a3 + 1);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    outlined init with copy of PopoverPresentation(v10 + 120 * v11 - 88, (uint64_t)v71);
    if (v11 != 1)
    {
LABEL_11:
      static Log.presentation.getter();
      uint64_t v20 = type metadata accessor for Logger();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v9, 1, v20) == 1)
      {
        outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      }
      else
      {
        long long v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          long long v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v24 = 0;
          _os_log_impl(&dword_1872C6000, v22, v23, "Can't present popover, only going to try to dismiss", v24, 2u);
          MEMORY[0x18C119C60](v24, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v20);
      }
      uint64_t v25 = v4 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
      swift_beginAccess();
      uint64_t v26 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
      uint64_t v27 = *(void *)(v26 - 8);
      (*(void (**)(long long *, uint64_t, uint64_t))(v27 + 16))(&v66, v25, v26);
      char v28 = UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v26);
      (*(void (**)(long long *, uint64_t))(v27 + 8))(&v66, v26);
      if (!*(void *)&v71[0] && (v28 & 1) == 0)
      {
        uint64_t v29 = *(void **)(v4 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
        if (v29)
        {
          id v30 = v29;
          UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v30);
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    memset(v71, 0, 118);
  }
  uint64_t v12 = v4 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v13 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v14 = *(void *)(v13 - 8);
  long long v15 = *(void (**)(void, void, void))(v14 + 16);
  v15(&v66, v12, v13);
  char v16 = UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v13);
  (*(void (**)(long long *, uint64_t))(v14 + 8))(&v66, v13);
  if (v16) {
    goto LABEL_11;
  }
  uint64_t v17 = UIKitInspectorV3Bridge.presenter.getter();
  if (!v17) {
    goto LABEL_11;
  }
  long long v18 = (UIViewController *)v17;
  int v19 = *(_DWORD *)(v4 + direct field offset for UIKitInspectorV3Bridge.popoverSeed);
  if (v19 != -1 && v54 != -1 && v19 == v54) {
    UIKitInspectorV3Bridge.isParentPresentationFromLikeKindBridge.getter();
  }
  uint64_t v50 = direct field offset for UIKitInspectorV3Bridge.popoverSeed;
  id v34 = (void *)(v4 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation);
  swift_beginAccess();
  if (*v34)
  {
    uint64_t v35 = v34[2];
    swift_retain();
  }
  else
  {
    uint64_t v35 = 0;
  }
  outlined init with copy of PopoverPresentation?((uint64_t)v71, (uint64_t)&v66, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  if (!(void)v66)
  {
    outlined destroy of PopoverPresentation?((uint64_t)&v66, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
    if (!v35) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v36 = v67;
  swift_retain();
  outlined destroy of PopoverPresentation((uint64_t)&v66);
  if (v35)
  {
    if (v36)
    {
      _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, type metadata accessor for CGRect);
      uint64_t v49 = v37;
      v48[1] = lazy protocol witness table accessor for type CGRect? and conformance <A> A?();
      swift_retain();
      LODWORD(v49) = static Anchor<A>.== infix(_:_:)();
      swift_release_n();
      swift_release();
      LOBYTE(v35) = v49 ^ 1;
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v36)
  {
LABEL_32:
    swift_release();
    LOBYTE(v35) = 1;
    goto LABEL_33;
  }
  LOBYTE(v35) = 0;
LABEL_33:
  *(_DWORD *)(v4 + v50) = v54;
  swift_beginAccess();
  outlined assign with copy of PopoverPresentation?((uint64_t)v71, (uint64_t)v34);
  swift_endAccess();
  uint64_t v38 = *(void **)(v4 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
  if (!v38)
  {
    outlined init with copy of PopoverPresentation?((uint64_t)v71, (uint64_t)&v59, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
    if (!(void)v59)
    {

      long long v44 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      outlined destroy of PopoverPresentation?((uint64_t)v71, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
      os_log_type_t v32 = &v59;
      long long v31 = v44;
      return outlined destroy of PopoverPresentation?((uint64_t)v32, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, v31);
    }
    v69[1] = v63;
    v69[2] = v64;
    v70[0] = *(_OWORD *)v65;
    *(void *)((char *)v70 + 14) = *(void *)&v65[14];
    long long v66 = v59;
    long long v67 = v60;
    long long v68 = v61;
    v69[0] = v62;
    UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)((uint64_t)&v66, v18, v53, v52);

    outlined destroy of PopoverPresentation((uint64_t)&v66);
LABEL_20:
    long long v31 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    os_log_type_t v32 = v71;
    return outlined destroy of PopoverPresentation?((uint64_t)v32, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, v31);
  }
  v15(&v59, v12, v13);
  if (!BYTE8(v61))
  {
    v57[0] = v59;
    v57[1] = v60;
    uint64_t v58 = v61;
    outlined init with copy of PopoverPresentation?((uint64_t)v71, (uint64_t)&v66, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
    uint64_t v39 = MEMORY[0x1E4FBB960];
    if ((void)v66)
    {
      outlined init with copy of PopoverPresentation?((uint64_t)v69, (uint64_t)v55, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
      id v40 = v38;
      outlined destroy of PopoverPresentation((uint64_t)&v66);
    }
    else
    {
      id v45 = v38;
      outlined destroy of PopoverPresentation?((uint64_t)&v66, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
      memset(v55, 0, sizeof(v55));
      uint64_t v56 = 0;
    }
    compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)((uint64_t)v57, (uint64_t)v55, (char *)v38, v4, (uint64_t)v71, v35 & 1, v18, (uint64_t)v53, v52, v39);

    long long v46 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of PopoverPresentation?((uint64_t)v55, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v39, MEMORY[0x1E4FBB718]);
    outlined destroy of AnyHashable((uint64_t)v57);
    os_log_type_t v32 = v71;
    long long v31 = v46;
    return outlined destroy of PopoverPresentation?((uint64_t)v32, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, v31);
  }
  if (BYTE8(v61) == 1)
  {
    LODWORD(v57[0]) = v59;
    outlined init with copy of PopoverPresentation?((uint64_t)v71, (uint64_t)&v66, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
    uint64_t v41 = v66;
    if ((void)v66)
    {
      int v42 = HIDWORD(v68);
      id v43 = v38;
      outlined destroy of PopoverPresentation((uint64_t)&v66);
    }
    else
    {
      id v47 = v38;
      outlined destroy of PopoverPresentation?((uint64_t)&v66, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
      int v42 = 0;
    }
    LODWORD(v66) = v42;
    BYTE4(v66) = v41 == 0;
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)((uint64_t)v57, (uint64_t)&v66, (char *)v38, v4, (uint64_t)v71, v35 & 1, v18, (uint64_t)v53, v52, (uint64_t)&type metadata for ViewIdentity);

    goto LABEL_20;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of PopoverPresentation?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for PopoverPresentation?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for PopoverPresentation?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for UIKitInspectorV3Bridge.PresentationKind()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for CGRect?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _sSo6CGRectVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _sSo6CGRectVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSo6CGRectVSgMaTm_2(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t UIKitInspectorV3Bridge.presenter.getter()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for UIKitInspectorV3Bridge.presenterOverride);
  if (!result)
  {
    if (MEMORY[0x18C119DF0](v0 + direct field offset for UIKitInspectorV3Bridge.host)) {
      _UIHostingView.viewController.getter();
    }
    __break(1u);
    JUMPOUT(0x187424F9CLL);
  }
  return result;
}

uint64_t UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  uint64_t result = 1;
  switch(v6[40])
  {
    case 1:
    case 3:
      goto LABEL_3;
    case 2:
      return result;
    default:
      (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, a1);
LABEL_3:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t initializeWithCopy for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t UIKitInspectorV3Bridge.updateInspectorIfNeeded(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v39 = *a1;
  PreferenceValues.subscript.getter();
  uint64_t v4 = v30;
  int v5 = v31;
  uint64_t v6 = direct field offset for UIKitInspectorV3Bridge.anchorSeed;
  int v7 = *(_DWORD *)(v1 + direct field offset for UIKitInspectorV3Bridge.anchorSeed);
  if (v7 != -1 && v31 != -1 && v7 == v31)
  {
    int v11 = 0;
  }
  else
  {
    uint64_t v10 = (void *)(v1 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
    int v11 = 1;
    swift_beginAccess();
    *uint64_t v10 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v2 + v6) = v5;
  }
  uint64_t v39 = v3;
  PreferenceValues.subscript.getter();
  uint64_t v12 = v30;
  int v13 = v31;
  uint64_t v14 = direct field offset for UIKitInspectorV3Bridge.inspectorSeed;
  int v15 = *(_DWORD *)(v2 + direct field offset for UIKitInspectorV3Bridge.inspectorSeed);
  BOOL v17 = v15 != -1 && v31 != -1 && v15 == v31;
  long long v18 = &async function pointer to specialized AsyncSequence.reduce<A>(_:_:);
  if (v17)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v11) {
      return result;
    }
  }
  else
  {
    int v19 = (void *)(v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
    swift_beginAccess();
    *int v19 = v30;
    swift_bridgeObjectRetain();
    long long v18 = &async function pointer to specialized AsyncSequence.reduce<A>(_:_:);
    swift_bridgeObjectRelease();
    *(_DWORD *)(v2 + v14) = v13;
    if (*(void *)(v2 + direct field offset for UIKitInspectorV3Bridge.presentedVC))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Sequence.first(where:)(v12, (uint64_t)&v30);
      swift_bridgeObjectRelease();
      if (*((void *)&v31 + 1) == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t result = outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage)?, (void (*)(uint64_t))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
        if (!v11) {
          return result;
        }
      }
      else
      {
        int v21 = v30;
        LODWORD(v39) = v30;
        v40[4] = v35;
        v40[5] = v36;
        v40[6] = v37;
        uint64_t v41 = v38;
        v40[0] = v31;
        v40[1] = v32;
        _DWORD v40[2] = v33;
        v40[3] = v34;
        v29[1] = v3;
        PreferenceValues.subscript.getter();
        v29[0] = v3;
        PreferenceValues.subscript.getter();
        LOBYTE(v29[0]) = v3;
        long long v18 = &async function pointer to specialized AsyncSequence.reduce<A>(_:_:);
        UIKitInspectorV3Bridge.presentNewInspector(_:id:anchors:presentationOptionsPreference:backgroundPreference:)(v40, v21, v4, &v30, (char *)v29);
        swift_bridgeObjectRelease();
        outlined destroy of PopoverPresentation?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4F3FD10]);
        uint64_t result = _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_1((uint64_t)&v39, (uint64_t (*)(void))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
        if (!v11) {
          return result;
        }
      }
    }
  }
  uint64_t v22 = v2 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v23 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v24 + 16))(&v30, v22, v23);
  LOBYTE(v22) = UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v23);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 8))(&v30, v23);
  if (v22)
  {
    uint64_t v25 = *(void **)(v2 + *((void *)v18 + 86));
    if (v25)
    {
      uint64_t v26 = (uint64_t *)(v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
      swift_beginAccess();
      uint64_t v27 = *v26;
      char v28 = v25;
      swift_bridgeObjectRetain();
      UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(v28, v27);

      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void UIKitInspectorV3Bridge.isParentPresentationFromLikeKindBridge.getter()
{
  swift_getObjectType();
  if (MEMORY[0x18C119DF0](v0 + direct field offset for UIKitInspectorV3Bridge.host)) {
    _UIHostingView.viewController.getter();
  }
  __break(1u);
}

void UIKitInspectorV3Bridge.update(environment:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, MEMORY[0x1E4F40930]);
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGACyxGAA0dE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, MEMORY[0x1E4F40930]);
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGACyxGAA0dE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v2)
  {
    if (*(unsigned char *)(v1 + direct field offset for UIKitInspectorV3Bridge.wasBackgrounded) == 1)
    {
      *(unsigned char *)(v1 + direct field offset for UIKitInspectorV3Bridge.wasBackgrounded) = 0;
      UIKitInspectorV3Bridge.updateAnchor()();
    }
  }
  else
  {
    *(unsigned char *)(v1 + direct field offset for UIKitInspectorV3Bridge.wasBackgrounded) = 1;
  }
}

void type metadata accessor for _UIHostingView<AnyView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

BOOL PresentationHostingController.presentingBridge<A>(matches:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  int v5 = *(unsigned __int8 *)(v3 + direct field offset for PresentationHostingController.presentingBridgeKind);
  return ((v5 ^ v4) & 1) == 0 && v5 != 2;
}

uint64_t outlined init with copy of PopoverPresentation?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for PopoverPresentation?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined assign with copy of PopoverPresentation?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t key path getter for EnvironmentValues.listDeleteControlVisibility : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, a2);
}

ValueMetadata *type metadata accessor for KeyboardShortcutPickerOptionTraitKey()
{
  return &type metadata for KeyboardShortcutPickerOptionTraitKey;
}

uint64_t _CALayerView.content()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = swift_getWitnessTable();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  *a2 = v7 | 0x7000000000000000;

  return swift_retain();
}

unsigned char *storeEnumTagSinglePayload for SearchFieldPlacement.Role(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF9) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v7 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationItemAdaptorModifier()
{
  return &type metadata for NavigationItemAdaptorModifier;
}

ValueMetadata *type metadata accessor for PhysicalButtonPressGesture()
{
  return &type metadata for PhysicalButtonPressGesture;
}

ValueMetadata *type metadata accessor for FocusEventProxyModifier()
{
  return &type metadata for FocusEventProxyModifier;
}

_DWORD *assignWithCopy for PopoverPresentationModifier.PopoverModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  LOBYTE(v5) = *(unsigned char *)(v11 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v11, v13, v5);
  uint64_t v14 = *(void *)v10;
  uint64_t v15 = *(void *)(v10 + 8);
  char v16 = *(unsigned char *)(v10 + 16);
  *(void *)unint64_t v10 = v12;
  *(void *)(v10 + 8) = v13;
  *(unsigned char *)(v10 + 16) = v5;
  outlined consume of Environment<CGFloat?>.Content(v14, v15, v16);
  *(_WORD *)(v10 + 17) = *(_WORD *)(v11 + 17);
  *(unsigned char *)(v10 + 19) = *(unsigned char *)(v11 + 19);
  *(unsigned char *)(v10 + 20) = *(unsigned char *)(v11 + 20);
  unint64_t v17 = (v10 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v11 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  swift_retain();
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  return a1;
}

uint64_t assignWithCopy for PopoverPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v8, v10, v11);
  uint64_t v12 = *(void *)v7;
  uint64_t v13 = *(void *)(v7 + 8);
  char v14 = *(unsigned char *)(v7 + 16);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(unsigned char *)(v7 + 16) = v11;
  outlined consume of Environment<CGFloat?>.Content(v12, v13, v14);
  *(_WORD *)(v7 + 17) = *(_WORD *)(v8 + 17);
  *(unsigned char *)(v7 + 19) = *(unsigned char *)(v8 + 19);
  *(unsigned char *)(v7 + 20) = *(unsigned char *)(v8 + 20);
  *(unsigned char *)(v7 + 21) = *(unsigned char *)(v8 + 21);
  return a1;
}

uint64_t assignWithCopy for PopoverConditionalStateProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = (_OWORD *)(a1 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v7)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 40);
      uint64_t v8 = *(void *)(a2 + 72);
      long long v9 = *(_OWORD *)(a2 + 56);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 56) = v9;
      *(void *)(a1 + 72) = v8;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 64) = v7;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  }
  else
  {
    long long v10 = *v6;
    long long v11 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *uint64_t v5 = v10;
    *(_OWORD *)(a1 + 56) = v11;
  }
  return a1;
}

void *assignWithCopy for PopoverItemStateProvider(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  uint64_t v13 = (void *)((v11 + 8 + v8) & ~v11);
  char v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  int v15 = v14(v13, 1, v9);
  if (v8)
  {
    if (v15)
    {
      int v16 = *(_DWORD *)(v10 + 84);
      size_t v17 = *(void *)(v10 + 64);
LABEL_6:
      if (v16) {
        size_t v18 = v17;
      }
      else {
        size_t v18 = v17 + 1;
      }
      memcpy(v12, v13, v18);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  else
  {
    if (v15)
    {
      (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
      int v16 = *(_DWORD *)(v10 + 84);
      size_t v17 = *(void *)(v10 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
  }
LABEL_12:
  uint64_t v19 = *(void *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84)) {
    ++v19;
  }
  uint64_t v20 = (void *)(((unint64_t)a1 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v21 = (void *)(((unint64_t)a2 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  return a1;
}

void type metadata accessor for AGWeakAttribute(uint64_t a1)
{
}

id @objc SwiftUIGlue.init()(void *a1)
{
  v2.receiver = a1;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> Section<A, B, C>(int *a1, uint64_t a2)
{
  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2);
}

uint64_t static PubliclyPrimitiveView._makeViewList(view:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  int v6 = *(_DWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  char v8 = *(unsigned char *)(a2 + 80);
  int v19 = *a1;
  uint64_t v10 = v2;
  int v11 = v3;
  uint64_t v12 = v4;
  long long v13 = *(_OWORD *)(a2 + 24);
  uint64_t v14 = v5;
  long long v15 = *(_OWORD *)(a2 + 48);
  int v16 = v6;
  uint64_t v17 = v7;
  char v18 = v8;
  return static PubliclyPrimitiveView.defaultMakeViewList(view:inputs:)(&v19, &v10);
}

uint64_t static PubliclyPrimitiveView.defaultMakeViewList(view:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  long long v15 = *(_OWORD *)(a2 + 5);
  uint64_t v14 = a2[7];
  int v6 = *((_DWORD *)a2 + 16);
  uint64_t v7 = a2[9];
  char v8 = *((unsigned char *)a2 + 80);
  LODWORD(v16) = *a1;
  type metadata accessor for _GraphValue();
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  _GraphValue.value.getter();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for MakeBody();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v16 = v3;
  int v17 = v4;
  uint64_t v18 = v5;
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  long long v21 = v15;
  uint64_t v22 = v14;
  int v23 = v6;
  uint64_t v24 = v7;
  char v25 = v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v26, &v16, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t type metadata accessor for MakeBody()
{
  return __swift_instantiateGenericMetadata();
}

void *partial apply for closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a1, *(unsigned char *)(v2 + 16), v2 + 24, *(unsigned char *)(v2 + 137), (uint64_t *)(v2 + 144), v2 + 216, a2);
}

uint64_t getEnumTagSinglePayload for AGWeakAttribute.__Unnamed_struct__details(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DraggingPreviewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

double partial apply for closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)()
{
  return 0.0;
}

void partial apply for closure #1 in LeafDisplayList.updateValue()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  MEMORY[0x18C114450](a1, a2, a3, a4);
  *(double *)(a5 + 8) = (*(double (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a5, v7, v8);
  *(void *)(a5 + 16) = v9;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v11;
}

double ResolvedShadowView.content(size:)(uint64_t *a1, uint64_t a2, double a3, double a4)
{
  (*(void (**)(_OWORD *__return_ptr, void, double, double, double, double))(*(void *)(a2 + 24) + 24))(v13, *(void *)(a2 + 16), 0.0, 0.0, a3, a4);
  uint64_t v7 = swift_allocObject();
  long long v8 = v13[1];
  *(_OWORD *)(v7 + 16) = v13[0];
  *(_OWORD *)(v7 + 32) = v8;
  *(unsigned char *)(v7 + 48) = v14;
  uint64_t v9 = v4 + *(int *)(a2 + 36);
  uint64_t v10 = *(void *)(v9 + 32);
  long long v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)v9;
  LODWORD(v8) = *(_DWORD *)(v9 + 40);
  LOBYTE(v9) = *(unsigned char *)(v9 + 44);
  *(_OWORD *)(v7 + 72) = v11;
  *(void *)(v7 + 88) = v10;
  *(_DWORD *)(v7 + 96) = v8;
  *(unsigned char *)(v7 + 100) = v9;
  *a1 = v7 | 0x5000000000000000;
  return 0.0;
}

uint64_t initializeWithCopy for _DraggingModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  uint64_t v10 = *(void *)(a2 + 56);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  uint64_t v12 = (_OWORD *)(a1 + 72);
  long long v13 = (_OWORD *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 96);
  if (v14)
  {
    *(void *)(a1 + 96) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 88);
    *uint64_t v12 = *v13;
    *(_OWORD *)(a1 + 88) = v15;
  }
  uint64_t v16 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v16;
  swift_retain();
  return a1;
}

uint64_t implicit closure #1 in transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1;
  int v7 = a2;
  uint64_t v9 = type metadata accessor for ContainerBackgroundModifier.PreferenceValue();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v6, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_24, (uint64_t)v8, v9, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5;
}

uint64_t assignWithCopy for ContainerBackgroundModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t type metadata accessor for ContainerBackgroundModifier.PreferenceValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in _VariadicView_Children.tagIndex<A>(_:)(uint64_t a1, char *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  int v54 = a4;
  long long v46 = a3;
  uint64_t v57 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  id v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v50 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v52 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x1F4188790](v21);
  int v23 = (char *)&v45 - v22;
  uint64_t v53 = a1;
  uint64_t v58 = *(void *)(a1 + 72);
  uint64_t v48 = a6;
  ViewTraitCollection.tag<A>(for:)();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v20, v57, a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, a5);
  uint64_t v51 = TupleTypeMetadata2;
  uint64_t v24 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v56 = v15;
  char v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v25(v14, v23, v11);
  long long v55 = v24;
  uint64_t v26 = v24;
  uint64_t v27 = v11;
  v25(v26, v20, v11);
  uint64_t v49 = v9;
  char v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v57 = v14;
  if (v28(v14, 1, a5) == 1)
  {
    uint64_t v29 = v57;
    uint64_t v30 = *(void (**)(char *, uint64_t))(v56 + 8);
    v30(v20, v11);
    v30(v23, v11);
    if (v28(v55, 1, a5) == 1)
    {
      v30(v29, v11);
      uint64_t v32 = v53;
      long long v31 = v54;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v33 = v56;
  uint64_t v34 = v27;
  v25(v52, v57, v27);
  long long v35 = v55;
  if (v28(v55, 1, a5) == 1)
  {
    uint64_t v29 = v57;
    long long v36 = *(void (**)(char *, uint64_t))(v33 + 8);
    v36(v20, v34);
    v36(v23, v34);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, a5);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v51);
    uint64_t v32 = v53;
    long long v31 = v54;
LABEL_9:
    *v31 += *(void *)(v32 + 8);
    return 1;
  }
  uint64_t v37 = v49;
  uint64_t v38 = v47;
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v47, v35, a5);
  uint64_t v39 = v52;
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
  v41(v38, a5);
  int v42 = *(void (**)(char *, uint64_t))(v33 + 8);
  v42(v20, v34);
  v42(v23, v34);
  v41(v39, a5);
  v42(v57, v34);
  uint64_t v32 = v53;
  long long v31 = v54;
  if ((v40 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v58 = *(void *)(v32 + 72);
  if (ViewTraitCollection.isAuxiliaryContent.getter()) {
    goto LABEL_9;
  }
  uint64_t result = 0;
  long long v44 = v46;
  void *v46 = *v31;
  *((unsigned char *)v44 + 8) = 0;
  return result;
}

uint64_t partial apply for implicit closure #1 in transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t storeEnumTagSinglePayload for ContainerBackgroundValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance NascentViewDestinationsExtractor.Key(uint64_t a1, void (*a2)(unint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t initializeWithCopy for LayoutScrollableTransform(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata accessor for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>)
  {
    type metadata accessor for UIMenuIdentifier(255);
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, type metadata accessor for UIMenuIdentifier);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>);
    }
  }
}

uint64_t assignWithCopy for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  char v9 = *(unsigned char *)(v8 + 24);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(unsigned char *)(v7 + 24) = v9;
  char v10 = *(unsigned char *)(v8 + 40);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(unsigned char *)(v7 + 40) = v10;
  *(unsigned char *)(v7 + 41) = *(unsigned char *)(v8 + 41);
  *(unsigned char *)(v7 + 42) = *(unsigned char *)(v8 + 42);
  *(unsigned char *)(v7 + 43) = *(unsigned char *)(v8 + 43);
  return a1;
}

uint64_t assignWithCopy for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  LOBYTE(v5) = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v11, v5);
  uint64_t v12 = *(void *)(v9 + 8);
  char v13 = *(unsigned char *)(v9 + 16);
  *(void *)(v9 + 8) = v11;
  *(unsigned char *)(v9 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = *(void *)(v10 + 24);
  LOBYTE(v5) = *(unsigned char *)(v10 + 32);
  outlined copy of Environment<Bool>.Content(v14, v5);
  uint64_t v15 = *(void *)(v9 + 24);
  char v16 = *(unsigned char *)(v9 + 32);
  *(void *)(v9 + 24) = v14;
  *(unsigned char *)(v9 + 32) = v5;
  outlined consume of Environment<Bool>.Content(v15, v16);
  *(unsigned char *)(v9 + 33) = *(unsigned char *)(v10 + 33);
  unint64_t v17 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = v19;
  unint64_t v20 = (v9 + 57) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v10 + 57) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = v22;
  *(unsigned char *)(v20 + 9) = *(unsigned char *)(v21 + 9);
  *(void *)((v20 + 17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v21 + 17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *assignWithCopy for AutomaticHoverEffect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  outlined consume of Environment<Color?>.Content(v5, v6);
  return a1;
}

uint64_t destroy for AccessibilityViewGraph(uint64_t a1)
{
  swift_release();
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ProgressViewStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t assignWithTake for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t WidgetHost.readPreference<A>(_:)()
{
  return static Update.ensure<A>(_:)();
}

{
  return WidgetHost.readPreference<A>(_:)();
}

uint64_t TabContent.sectionActions<A>(content:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TabSectionActionsModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  char v16 = (char *)&v18 - v15;
  a1(v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, a3);
  TabContent.modifier<A>(_:)((uint64_t)v16, a2, v12, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t type metadata completion function for _LazyStack_Cache()
{
  type metadata accessor for MinorProperties();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for NavigationSplitViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void static _DocumentIntroAccessoryBuilder.buildOptional<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v23 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v23 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    type metadata accessor for MergedDocumentIntroAccessory<EmptyDocumentIntroAccessory, EmptyDocumentIntroAccessory>();
    a4[3] = v20;
    a4[4] = (uint64_t)&protocol witness table for MergedDocumentIntroAccessory<A, B>;
  }
  else
  {
    unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v21(v19, v11, a2);
    v21(v15, v19, a2);
    v23[0] = a2;
    v23[1] = &type metadata for EmptyDocumentIntroAccessory;
    v23[2] = a3;
    v23[3] = &protocol witness table for EmptyDocumentIntroAccessory;
    a4[3] = type metadata accessor for MergedDocumentIntroAccessory();
    a4[4] = (uint64_t)&protocol witness table for MergedDocumentIntroAccessory<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
    v21((char *)boxed_opaque_existential_1, v15, a2);
  }
}

uint64_t (*EnvironmentValues.disableAutocorrection.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.disableAutocorrection.modify;
}

uint64_t type metadata completion function for PlacementProperties()
{
  uint64_t result = type metadata accessor for MinorProperties();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for MinorProperties()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for MakeSubviewTransition(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  int v5 = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance NavigationSplitStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t EnvironmentValues._disableAutocorrection.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier.value.getter@<X0>(uint64_t *a1@<X8>)
{
  if (AGGraphGetWeakValue())
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    Dictionary.init(minimumCapacity:)();
  }
  AccessibilityAttachment.init(properties:)();
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v4;
  *a1 = result;
  a1[1] = 0;
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityCustomAttributes?, MEMORY[0x1E4F41128], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>);
    }
  }
}

uint64_t outlined init with take of ScrollableCollection?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t EnvironmentValues._disableAutocorrection.setter()
{
  type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for _LazyStack_Cache(void *a1, unsigned __int16 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  int v8 = *(_DWORD *)(v5 + 84);
  uint64_t v9 = v7;
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v5 + 64);
  if (v8) {
    size_t v11 = ((v7 + 16) & ~(unint64_t)v7) + *(void *)(v5 + 64);
  }
  else {
    size_t v11 = v10 + 1;
  }
  BOOL v12 = v7 <= 7u && (v7 & 0x100000) == 0;
  if (v12
    && ((((((((((((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16 <= 0x18)
  {
    uint64_t v13 = AssociatedTypeWitness;
    unint64_t v14 = ~(unint64_t)v7;
    if (v8)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v5 + 48))(((((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v14, *(unsigned int *)(v5 + 84), AssociatedTypeWitness))
      {
LABEL_29:
        *a1 = *(void *)a2;
        uint64_t v19 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v20 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v19 = *v20;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v19 + v9 + 8) & v14, ((unint64_t)v20 + v9 + 8) & v14, v13);
        if (!v8) {
          *((unsigned char *)a1 + v10) = 0;
        }
        goto LABEL_31;
      }
    }
    else
    {
      if (!*((unsigned char *)a2 + v10)) {
        goto LABEL_29;
      }
      int v16 = (*((unsigned __int8 *)a2 + v10) - 1) << (8 * v10);
      if (v10 > 3) {
        int v16 = 0;
      }
      if (v10)
      {
        int v17 = v10 <= 3 ? v10 : 4;
        switch(v17)
        {
          case 2:
            int v18 = *a2;
            break;
          case 3:
            int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            int v18 = *(_DWORD *)a2;
            break;
          default:
            int v18 = *(unsigned __int8 *)a2;
            break;
        }
      }
      else
      {
        int v18 = 0;
      }
      if ((v18 | v16) == 0xFFFFFFFF) {
        goto LABEL_29;
      }
    }
    memcpy(a1, a2, v11);
LABEL_31:
    unint64_t v21 = ((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = ((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)v22;
    *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
    *(void *)unint64_t v21 = v23;
    uint64_t v24 = (_OWORD *)(((unint64_t)a1 + v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    char v25 = (_OWORD *)(((unint64_t)a2 + v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v25;
    uint64_t v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v27;
    char v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (_OWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
    _OWORD *v28 = *v29;
    uint64_t v30 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v31 = (void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v30 = *v31;
    uint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v32 = *v33;
    uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v34 = *v35;
    v34[1] = v35[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  uint64_t v15 = *(void *)a2;
  *a1 = *(void *)a2;
  a1 = (void *)(v15 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16)));
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #1 in closure #4 in LazyLayoutViewCache.item(data:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, unint64_t *)@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return closure #1 in closure #4 in LazyLayoutViewCache.item(data:)(a1, a2, a3, *(int **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), a4, *(void *)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 72), *(void **)(v4 + 80));
}

uint64_t closure #1 in closure #4 in LazyLayoutViewCache.item(data:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, unint64_t *)@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  unint64_t v15 = *(void *)a1;
  unint64_t v94 = *(void *)a1;
  int v16 = *(_DWORD *)(a1 + 8);
  unint64_t v84 = *(void *)(a1 + 16);
  unsigned int v18 = *(_DWORD *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)(a1 + 28);
  unsigned int v85 = *(_DWORD *)(a1 + 32);
  int v86 = v16;
  unsigned int v88 = *(_DWORD *)(a1 + 36);
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v87 = v19;
  uint64_t v62 = *(void *)(a1 + 48);
  unsigned int v20 = *(_DWORD *)(a1 + 64);
  unsigned int v82 = *(_DWORD *)(a1 + 60);
  unsigned int v83 = *(_DWORD *)(a1 + 56);
  unsigned int v92 = *(_DWORD *)(a1 + 68);
  unsigned int v100 = *(_DWORD *)(a1 + 72);
  unsigned int v98 = *(_DWORD *)(a1 + 76);
  int v96 = *(_DWORD *)(a1 + 80);
  LODWORD(v119) = 0;
  WORD2(v119) = 0;
  BYTE6(v119) = 1;
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, &lazy cache variable for type metadata for External<LazyLayoutCacheItem.State>, (uint64_t)&type metadata for LazyLayoutCacheItem.State, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<LazyLayoutCacheItem.State> and conformance External<A>();
  uint64_t v73 = a4;
  *a4 = Attribute.init<A>(body:value:flags:update:)();
  *((unsigned char *)a4 + 4) = 0;
  unint64_t v71 = *(void *)(a7 + 32);
  int v70 = *(_DWORD *)(a7 + 40);
  unint64_t v69 = *(void *)(a7 + 48);
  unsigned int v67 = *(_DWORD *)(a7 + 60);
  unsigned int v68 = *(_DWORD *)(a7 + 56);
  unsigned int v65 = *(_DWORD *)(a7 + 68);
  unsigned int v66 = *(_DWORD *)(a7 + 64);
  uint64_t v64 = *(void *)(a7 + 72);
  uint64_t v81 = *(void *)(a7 + 80);
  unsigned int v79 = *(_DWORD *)(a7 + 92);
  unsigned int v80 = *(_DWORD *)(a7 + 88);
  unsigned int v77 = *(_DWORD *)(a7 + 100);
  unsigned int v78 = *(_DWORD *)(a7 + 96);
  unsigned int v75 = *(_DWORD *)(a7 + 108);
  unsigned int v76 = *(_DWORD *)(a7 + 104);
  int v74 = *(_DWORD *)(a7 + 112);
  _ViewInputs.size.getter();
  unint64_t v119 = v15;
  LODWORD(v120) = v16;
  unint64_t v121 = v84;
  unint64_t v122 = __PAIR64__(v17, v18);
  *(void *)&long long v123 = __PAIR64__(v88, v85);
  *((void *)&v123 + 1) = v19;
  *(void *)&long long v124 = v62;
  *((void *)&v124 + 1) = __PAIR64__(v82, v83);
  *(void *)&long long v125 = __PAIR64__(v92, v20);
  *((void *)&v125 + 1) = __PAIR64__(v98, v100);
  LODWORD(v126) = v96;
  _ViewInputs.position.getter();
  HIDWORD(v120) = *(_DWORD *)(a7 + 140);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyViewGeometry and conformance LazyViewGeometry();
  swift_retain();
  int v21 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  *(_DWORD *)a5 = v21;
  *(unsigned char *)(a5 + 4) = 0;
  unsigned int v61 = v20;
  unsigned int v22 = _ViewInputs.viewPhase.getter();
  unint64_t v119 = v71;
  LODWORD(v120) = v70;
  unint64_t v121 = v69;
  unint64_t v122 = __PAIR64__(v67, v68);
  *(void *)&long long v123 = __PAIR64__(v65, v66);
  *((void *)&v123 + 1) = v64;
  *(void *)&long long v124 = v81;
  *((void *)&v124 + 1) = __PAIR64__(v79, v80);
  *(void *)&long long v125 = __PAIR64__(v77, v78);
  *((void *)&v125 + 1) = __PAIR64__(v75, v76);
  LODWORD(v126) = v74;
  unsigned int v23 = _ViewInputs.viewPhase.getter();
  if (a4[1])
  {
    __break(1u);
    goto LABEL_12;
  }
  int v24 = *a4;
  unint64_t v119 = __PAIR64__(v23, v22);
  LODWORD(v120) = v24;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyViewPhase and conformance LazyViewPhase();
  *(_DWORD *)a6 = Attribute.init<A>(body:value:flags:update:)();
  *(unsigned char *)(a6 + 4) = 0;
  unint64_t v136 = v94;
  int v137 = v16;
  unint64_t v139 = __PAIR64__(v17, v18);
  *(void *)&long long v140 = __PAIR64__(v88, v85);
  *((void *)&v140 + 1) = v19;
  *(void *)&long long v141 = v62;
  *((void *)&v141 + 1) = __PAIR64__(v82, v83);
  *(void *)&long long v142 = __PAIR64__(v92, v20);
  *((void *)&v142 + 1) = __PAIR64__(v98, v100);
  int v143 = v96;
  swift_beginAccess();
  int v25 = *(_DWORD *)(v84 + 16);
  uint64_t v26 = *(void *)(v84 + 24);
  long long v59 = *(_OWORD *)(v84 + 48);
  long long v60 = *(_OWORD *)(v84 + 32);
  uint64_t v27 = *(void *)(v84 + 64);
  uint64_t v28 = *(void *)(v84 + 72);
  char v29 = *(unsigned char *)(v84 + 80);
  char v30 = *(unsigned char *)(v84 + 81);
  uint64_t v31 = *(void *)(v84 + 88);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = v25;
  *(void *)(v32 + 24) = v26;
  *(_OWORD *)(v32 + 32) = v60;
  *(_OWORD *)(v32 + 48) = v59;
  *(void *)(v32 + 64) = v27;
  *(void *)(v32 + 72) = v28;
  *(unsigned char *)(v32 + 80) = v29;
  *(unsigned char *)(v32 + 81) = v30;
  *(void *)(v32 + 88) = v31;
  swift_retain();
  uint64_t v138 = v32;
  LOBYTE(v32) = *(unsigned char *)(a5 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v32)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  Attribute<A>.origin()();
  _ViewInputs.position.setter();
  unint64_t v119 = v71;
  LODWORD(v120) = v70;
  unint64_t v121 = v69;
  unint64_t v122 = __PAIR64__(v67, v68);
  *(void *)&long long v123 = __PAIR64__(v65, v66);
  *((void *)&v123 + 1) = v64;
  *(void *)&long long v124 = v81;
  *((void *)&v124 + 1) = __PAIR64__(v79, v80);
  *(void *)&long long v125 = __PAIR64__(v77, v78);
  *((void *)&v125 + 1) = __PAIR64__(v75, v76);
  LODWORD(v126) = v74;
  _ViewInputs.transform.getter();
  _ViewInputs.transform.setter();
  if (*(unsigned char *)(a5 + 4))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  Attribute<A>.size()();
  _ViewInputs.size.setter();
  unint64_t v119 = v71;
  LODWORD(v120) = v70;
  unint64_t v121 = v69;
  unint64_t v122 = __PAIR64__(v67, v68);
  *(void *)&long long v123 = __PAIR64__(v65, v66);
  *((void *)&v123 + 1) = v64;
  _GraphInputs.merge(_:ignoringPhase:)();
  if (*(unsigned char *)(a6 + 4))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  _ViewInputs.viewPhase.setter();
  unint64_t v119 = v71;
  LODWORD(v120) = v70;
  unint64_t v121 = v69;
  unint64_t v122 = __PAIR64__(v67, v68);
  *(void *)&long long v123 = __PAIR64__(v65, v66);
  *((void *)&v123 + 1) = v64;
  *(void *)&long long v124 = v81;
  *((void *)&v124 + 1) = __PAIR64__(v79, v80);
  *(void *)&long long v125 = __PAIR64__(v77, v78);
  *((void *)&v125 + 1) = __PAIR64__(v75, v76);
  LODWORD(v126) = v74;
  uint64_t v33 = _ViewInputs.viewPhase.getter();
  uint64_t v34 = (void (*)(unint64_t *, void))_GraphInputs.mergedInputs.modify();
  specialized Set._Variant.insert(_:)(&v102, v33);
  v34(&v119, 0);
  unint64_t v119 = v94;
  LODWORD(v120) = v86;
  unint64_t v121 = v84;
  unint64_t v122 = __PAIR64__(v17, v18);
  *(void *)&long long v123 = __PAIR64__(v88, v85);
  *((void *)&v123 + 1) = v87;
  *(void *)&long long v124 = v62;
  *((void *)&v124 + 1) = __PAIR64__(v82, v83);
  *(void *)&long long v125 = __PAIR64__(v92, v61);
  *((void *)&v125 + 1) = __PAIR64__(v98, v100);
  LODWORD(v126) = v96;
  unsigned int v35 = _ViewInputs.transaction.getter();
  if (v73[1]) {
    goto LABEL_15;
  }
  unint64_t v119 = __PAIR64__(*v73, v35);
  unint64_t v120 = 0;
  LOWORD(v121) = 515;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyTransaction and conformance LazyTransaction();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transaction.setter();
  unint64_t v119 = v94;
  LODWORD(v120) = v86;
  unint64_t v121 = v84;
  unint64_t v122 = __PAIR64__(v17, v18);
  *(void *)&long long v123 = __PAIR64__(v88, v85);
  *((void *)&v123 + 1) = v87;
  *(void *)&long long v124 = v62;
  *((void *)&v124 + 1) = __PAIR64__(v82, v83);
  *(void *)&long long v125 = __PAIR64__(v92, v61);
  *((void *)&v125 + 1) = __PAIR64__(v98, v100);
  LODWORD(v126) = v96;
  uint64_t v36 = _ViewInputs.transaction.getter();
  uint64_t v37 = (void (*)(unint64_t *, void))_GraphInputs.mergedInputs.modify();
  specialized Set._Variant.insert(_:)(&v102, v36);
  v37(&v119, 0);
  unint64_t v119 = 0;
  LOBYTE(v120) = 1;
  lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput();
  PropertyList.subscript.setter();
  unsigned int v38 = DWORD1(v140);
  unsigned int v39 = DWORD2(v141);
  unsigned int v40 = HIDWORD(v141);
  unsigned int v41 = v142;
  unsigned int v42 = DWORD1(v142);
  unsigned int v43 = DWORD2(v142);
  uint64_t v44 = HIDWORD(v142);
  int v45 = v143;
  unint64_t v99 = v138;
  unint64_t v101 = v136;
  unint64_t v119 = v136;
  unsigned int v91 = v139;
  int v93 = v137;
  LODWORD(v120) = v137;
  unint64_t v121 = v138;
  unint64_t v122 = v139;
  unsigned int v89 = v140;
  unsigned int v90 = HIDWORD(v139);
  long long v123 = v140;
  uint64_t v95 = v141;
  uint64_t v97 = *((void *)&v140 + 1);
  long long v124 = v141;
  long long v125 = v142;
  LODWORD(v126) = v143;
  *(_DWORD *)a8 = _ViewInputs.transaction.getter();
  *(unsigned char *)(a8 + 4) = 0;
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (!a10)
  {
    unint64_t v119 = v101;
    LODWORD(v120) = v93;
    unint64_t v121 = v99;
    unint64_t v122 = __PAIR64__(v90, v91);
    *(void *)&long long v123 = __PAIR64__(v38, v89);
    *((void *)&v123 + 1) = v97;
    *(void *)&long long v124 = v95;
    *((void *)&v124 + 1) = __PAIR64__(v40, v39);
    *(void *)&long long v125 = __PAIR64__(v42, v41);
    *((void *)&v125 + 1) = __PAIR64__(v44, v43);
    LODWORD(v126) = v45;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(&v102, &v119);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v54 = v103;
    *a9 = v102;
    a9[1] = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  uint64_t result = v44;
  if ((v73[1] & 1) == 0)
  {
    uint64_t v47 = *(void *)(a11 + 48);
    LODWORD(v119) = *v73;
    unint64_t v120 = v101;
    LODWORD(v121) = v93;
    unint64_t v122 = v99;
    *(void *)&long long v123 = __PAIR64__(v90, v91);
    *((void *)&v123 + 1) = __PAIR64__(v38, v89);
    *(void *)&long long v124 = v97;
    *((void *)&v124 + 1) = v95;
    *(void *)&long long v125 = __PAIR64__(v40, v39);
    *((void *)&v125 + 1) = __PAIR64__(v42, v41);
    unint64_t v126 = __PAIR64__(v44, v43);
    int v127 = v45;
    uint64_t v128 = *(void *)(a11 + 40);
    *(void *)&long long v129 = v47;
    *((void *)&v129 + 1) = a2;
    int v133 = 0;
    uint64_t v130 = a3;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    char v134 = 1;
    uint64_t v135 = 0;
    lazy protocol witness table accessor for type MakeSubviewTransition and conformance MakeSubviewTransition();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    AnyTransition.visitBase<A>(applying:)();
    swift_release();
    int v48 = v133;
    char v49 = v134;
    *(_DWORD *)a12 = v133;
    *(unsigned char *)(a12 + 4) = v49;
    uint64_t v50 = v135;
    *a13 = v135;
    uint64_t v51 = v132;
    uint64_t v52 = v131;
    uint64_t v53 = v130;
    *a9 = v131;
    a9[1] = v51;
    LODWORD(v102) = v119;
    unint64_t v103 = v120;
    int v104 = v121;
    unint64_t v105 = v122;
    long long v106 = v123;
    long long v107 = v124;
    long long v108 = v125;
    unint64_t v109 = v126;
    int v110 = v127;
    uint64_t v111 = v128;
    long long v112 = v129;
    uint64_t v113 = v53;
    uint64_t v114 = v52;
    uint64_t v115 = v51;
    int v116 = v48;
    char v117 = v49;
    uint64_t v118 = v50;
    swift_bridgeObjectRetain();
    outlined release of MakeSubviewTransition((uint64_t)&v102);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for GeometryActionBinder(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = v9 | 3;
  if (a2 > v8)
  {
    uint64_t v13 = ((v9
          + ((((v11 + ((v9 + 9) & ~v9) + ((v9 + 28) & ~v12) + ((v11 + v9 + ((v11 + v9) & ~v9)) & ~v9) + 19) & 0xFFFFFFFFFFFFFFFCLL)
            + 7) & 0xFFFFFFFFFFFFFFFCLL)
          + 4) & ~v9)
        + v11;
    char v14 = 8 * v13;
    if (v13 > 3) {
      goto LABEL_13;
    }
    unsigned int v16 = ((a2 - v8 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v16 >= 2)
    {
LABEL_13:
      int v15 = *((unsigned __int8 *)a1 + v13);
      if (!*((unsigned char *)a1 + v13)) {
        goto LABEL_30;
      }
LABEL_20:
      int v17 = (v15 - 1) << v14;
      if (v13 > 3) {
        int v17 = 0;
      }
      if (v13)
      {
        if (v13 <= 3) {
          int v18 = v13;
        }
        else {
          int v18 = 4;
        }
        switch(v18)
        {
          case 2:
            int v19 = *a1;
            break;
          case 3:
            int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v19 = *(_DWORD *)a1;
            break;
          default:
            int v19 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v19 = 0;
      }
      int v24 = v8 + (v19 | v17);
      return (v24 + 1);
    }
  }
LABEL_30:
  unint64_t v20 = ((((((((((((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
               + 7) & 0xFFFFFFFFFFFFFFFCLL)
             + 7) & 0xFFFFFFFFFFFFFFFCLL)
           + 7) & 0xFFFFFFFFFFFFFFFCLL)
         + v12
         + 4) & ~v12)
       + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v7 <= 0xFE)
  {
    unsigned int v21 = *(unsigned __int8 *)(v20 + 4);
    if (v21 < 2) {
      return 0;
    }
    int v24 = (v21 + 2147483646) & 0x7FFFFFFF;
    return (v24 + 1);
  }
  unsigned int v23 = (*(uint64_t (**)(unint64_t))(v5 + 48))((v9 + v20 + 5) & ~v9);
  if (v23 >= 2) {
    return v23 - 1;
  }
  else {
    return 0;
  }
}

_DWORD *initializeWithTake for GeometryActionBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  unsigned __int8 v2 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned __int8 v2 = *v3;
  uint64_t v4 = (_DWORD *)(((unint64_t)v2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v6 = *v7;
  unsigned int v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v8 = *v9;
  uint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v10 = *v11;
  uint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v12 = *v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  unint64_t v17 = *(_DWORD *)(v15 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v48 = v16 + 4;
  int v45 = (_DWORD *)(((unint64_t)v13 + v16 + 4) & v17);
  long long v46 = (_DWORD *)(((unint64_t)v12 + v16 + 4) & v17);
  _DWORD *v46 = *v45;
  unint64_t v18 = ((unint64_t)v46 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = ((unint64_t)v45 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  unint64_t v20 = v16 + 5 + v18;
  uint64_t v21 = ~v16;
  unint64_t v22 = v16 + 5 + v19;
  uint64_t v47 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
  uint64_t v49 = v15;
  if (v47(v22 & ~v16, 1, AssociatedTypeWitness))
  {
    int v23 = *(_DWORD *)(v15 + 84);
    size_t v24 = *(void *)(v15 + 64);
    if (v23) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v24 + 1;
    }
    memcpy((void *)(v20 & ~v16), (const void *)(v22 & ~v16), v25);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))(v20 & ~v16, v22 & ~v16, AssociatedTypeWitness);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v15 + 56))(v20 & ~v16, 0, 1, AssociatedTypeWitness);
    int v23 = *(_DWORD *)(v15 + 84);
    size_t v24 = *(void *)(v15 + 64);
  }
  if (v23) {
    size_t v26 = v24;
  }
  else {
    size_t v26 = v24 + 1;
  }
  uint64_t v27 = (void *)(((v20 | v16) + v26) & v21);
  uint64_t v28 = (const void *)(((v22 | v16) + v26) & v21);
  if (v47((unint64_t)v28, 1, AssociatedTypeWitness))
  {
    memcpy(v27, v28, v26);
    uint64_t v29 = v49;
  }
  else
  {
    uint64_t v29 = v49;
    (*(void (**)(void *, const void *, uint64_t))(v49 + 32))(v27, v28, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v27, 0, 1, AssociatedTypeWitness);
  }
  char v30 = (void *)(((unint64_t)v27 + v26 + v16) & v21);
  uint64_t v31 = (const void *)(((unint64_t)v28 + v26 + v16) & v21);
  if (v47((unint64_t)v31, 1, AssociatedTypeWitness))
  {
    memcpy(v30, v31, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v30, v31, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, AssociatedTypeWitness);
  }
  uint64_t v32 = v26 + ((v16 + 9) & v21) + ((v26 + v16 + ((v26 + v16) & v21)) & v21);
  uint64_t v33 = (char *)v46 + v32;
  uint64_t v34 = (char *)v45 + v32;
  unsigned int v35 = (void *)((unint64_t)(v33 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v36 = (uint64_t *)((unint64_t)(v34 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v37 = *v36;
  *(void *)((char *)v35 + 5) = *(uint64_t *)((char *)v36 + 5);
  *unsigned int v35 = v37;
  unsigned int v38 = (_DWORD *)((unint64_t)(v33 + 19) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v39 = (_DWORD *)((unint64_t)(v34 + 19) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v38 = *v39;
  unsigned int v40 = (_DWORD *)(((unint64_t)v38 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v41 = (_DWORD *)(((unint64_t)v39 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v40 = *v41;
  unsigned int v42 = (void *)(((unint64_t)v40 + v48) & v21);
  unsigned int v43 = (const void *)(((unint64_t)v41 + v48) & v21);
  if (v47((unint64_t)v43, 1, AssociatedTypeWitness))
  {
    memcpy(v42, v43, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v42, v43, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v42, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

ValueMetadata *type metadata accessor for DefaultWindowStyle()
{
  return &type metadata for DefaultWindowStyle;
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = MEMORY[0x18C118330](*(void *)(v6 + 40), a2, 4);
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v10 + 4 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = MEMORY[0x18C118330](*(void *)(v6 + 40), a2, 4);
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v11 + 4 * v9) == a2) {
    goto LABEL_7;
  }
  uint64_t v12 = ~v8;
  unint64_t v9 = (v9 + 1) & v12;
  if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_9;
  }
  while (*(_DWORD *)(v11 + 4 * v9) != a2)
  {
    unint64_t v9 = (v9 + 1) & v12;
    if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      goto LABEL_8;
    }
  }
LABEL_7:
  uint64_t result = 0;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = MEMORY[0x18C118330](*(void *)(*v3 + 40), v5, 4);
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for AGAttribute(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  uint64_t v4 = result;
  if (*(void *)(*v3 + 24) <= *(void *)(*v3 + 16))
  {
    if (a3) {
      specialized _NativeSet.resize(capacity:)();
    }
    else {
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    unint64_t v6 = *v3;
    uint64_t result = static Hasher._hash(seed:_:)();
    unint64_t v7 = -1 << *(unsigned char *)(v6 + 32);
    a2 = result & ~v7;
    if ((*(void *)(v6 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v8 = *(void *)(v6 + 48);
      if (*(void *)(v8 + 8 * a2) == v4)
      {
LABEL_12:
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      else
      {
        uint64_t v9 = ~v7;
        while (1)
        {
          a2 = (a2 + 1) & v9;
          if (((*(void *)(v6 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
            break;
          }
          if (*(void *)(v8 + 8 * a2) == v4) {
            goto LABEL_12;
          }
        }
      }
    }
  }
  else if ((a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeSet.copy()();
  }
  uint64_t v10 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v10 + 48) + 8 * a2) = v4;
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    *(void *)(v10 + 16) = v13;
  }
  return result;
}

{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  uint64_t v4 = result;
  if (*(void *)(*v3 + 24) <= *(void *)(*v3 + 16))
  {
    if (a3) {
      specialized _NativeSet.resize(capacity:)();
    }
    else {
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    unint64_t v6 = *v3;
    uint64_t result = MEMORY[0x18C118330](*(void *)(*v3 + 40), v4, 4);
    unint64_t v7 = -1 << *(unsigned char *)(v6 + 32);
    a2 = result & ~v7;
    if ((*(void *)(v6 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v8 = *(void *)(v6 + 48);
      if (*(_DWORD *)(v8 + 4 * a2) == v4)
      {
LABEL_12:
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      else
      {
        uint64_t v9 = ~v7;
        while (1)
        {
          a2 = (a2 + 1) & v9;
          if (((*(void *)(v6 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v8 + 4 * a2) == v4) {
            goto LABEL_12;
          }
        }
      }
    }
  }
  else if ((a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeSet.copy()();
  }
  uint64_t v10 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v10 + 48) + 4 * a2) = v4;
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    *(void *)(v10 + 16) = v13;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput;
  if (!lazy protocol witness table cache variable for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyViewGeometry and conformance LazyViewGeometry()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyViewGeometry and conformance LazyViewGeometry;
  if (!lazy protocol witness table cache variable for type LazyViewGeometry and conformance LazyViewGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyViewGeometry and conformance LazyViewGeometry);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyViewGeometry and conformance LazyViewGeometry;
  if (!lazy protocol witness table cache variable for type LazyViewGeometry and conformance LazyViewGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyViewGeometry and conformance LazyViewGeometry);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyTransaction and conformance LazyTransaction()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyTransaction and conformance LazyTransaction;
  if (!lazy protocol witness table cache variable for type LazyTransaction and conformance LazyTransaction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyTransaction and conformance LazyTransaction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyTransaction and conformance LazyTransaction;
  if (!lazy protocol witness table cache variable for type LazyTransaction and conformance LazyTransaction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyTransaction and conformance LazyTransaction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyViewPhase and conformance LazyViewPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyViewPhase and conformance LazyViewPhase;
  if (!lazy protocol witness table cache variable for type LazyViewPhase and conformance LazyViewPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyViewPhase and conformance LazyViewPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyViewPhase and conformance LazyViewPhase;
  if (!lazy protocol witness table cache variable for type LazyViewPhase and conformance LazyViewPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyViewPhase and conformance LazyViewPhase);
  }
  return result;
}

void type metadata accessor for _SetStorage<AGAttribute>()
{
  if (!lazy cache variable for type metadata for _SetStorage<AGAttribute>)
  {
    type metadata accessor for AGAttribute(255);
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<AGAttribute>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MakeSubviewTransition and conformance MakeSubviewTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type MakeSubviewTransition and conformance MakeSubviewTransition;
  if (!lazy protocol witness table cache variable for type MakeSubviewTransition and conformance MakeSubviewTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeSubviewTransition and conformance MakeSubviewTransition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<LazyLayoutCacheItem.State> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<LazyLayoutCacheItem.State> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<LazyLayoutCacheItem.State> and conformance External<A>)
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(255, &lazy cache variable for type metadata for External<LazyLayoutCacheItem.State>, (uint64_t)&type metadata for LazyLayoutCacheItem.State, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<LazyLayoutCacheItem.State> and conformance External<A>);
  }
  return result;
}

uint64_t outlined release of MakeSubviewTransition(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in WidgetHost.readPreference<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v29 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v27 = type metadata accessor for PreferenceValues.Value();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v4 = (char *)&v25 - v3;
  uint64_t v5 = *(void *)(a1 + 16);
  swift_beginAccess();
  unint64_t v7 = *(void **)(v5 + 24);
  uint64_t v8 = *(void **)(v5 + 32);
  char v9 = *(unsigned char *)(v5 + 40);
  char v10 = *(unsigned char *)(v5 + 41);
  int v11 = *(_DWORD *)(v5 + 68);
  uint64_t v12 = *(void *)(v5 + 72);
  int v13 = *(_DWORD *)(v5 + 80);
  uint64_t v14 = *(void *)(v5 + 88);
  uint64_t v15 = *(void *)(v5 + 112);
  uint64_t v31 = *(void **)(v5 + 16);
  unint64_t v6 = v31;
  uint64_t v32 = v7;
  uint64_t v33 = v8;
  char v34 = v9;
  char v35 = v10;
  long long v36 = *(_OWORD *)(v5 + 44);
  uint64_t v37 = *(void *)(v5 + 60);
  int v38 = v11;
  uint64_t v39 = v12;
  int v40 = v13;
  uint64_t v41 = v14;
  long long v42 = *(_OWORD *)(v5 + 96);
  uint64_t v43 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  unint64_t v19 = (void (*)(void **, void))GraphHost.Data.hostPreferenceKeys.modify();
  PreferenceKeys.add(_:)();
  v19(&v30, 0);
  unint64_t v20 = v31;
  uint64_t v21 = v32;
  unint64_t v22 = v33;
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  GraphHost.preferenceValues()();
  char v30 = v31;
  PreferenceValues.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v23 = v27;
  PreferenceValues.Value.value.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v23);
  return $defer #1 <A><A1>() in closure #1 in WidgetHost.readPreference<A>(_:)(v26);
}

void type metadata accessor for AGAttribute(uint64_t a1)
{
}

_DWORD *assignWithTake for GeometryActionBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  unsigned __int8 v2 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned __int8 v2 = *v3;
  uint64_t v4 = (_DWORD *)(((unint64_t)v2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  unint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v6 = *v7;
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  char v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v8 = *v9;
  char v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *char v10 = *v11;
  uint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v12 = *v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  unint64_t v17 = *(_DWORD *)(v15 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v54 = (_DWORD *)(((unint64_t)v12 + v16 + 4) & v17);
  uint64_t v55 = v16 + 4;
  uint64_t v53 = (_DWORD *)(((unint64_t)v13 + v16 + 4) & v17);
  *unint64_t v54 = *v53;
  unint64_t v18 = ((unint64_t)v54 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = ((unint64_t)v53 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  unint64_t v20 = v16 + 5 + v18;
  uint64_t v21 = ~v16;
  unint64_t v57 = v16 + 5 + v19;
  unint64_t v22 = (const void *)(v57 & ~v16);
  uint64_t v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
  int v24 = v23(v20 & ~v16, 1, AssociatedTypeWitness);
  int v25 = v23((unint64_t)v22, 1, AssociatedTypeWitness);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v15 + 32))(v20 & ~v16, v22, AssociatedTypeWitness);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v15 + 56))(v20 & ~v16, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v26 = *(_DWORD *)(v15 + 84);
    size_t v27 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v25)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v15 + 40))(v20 & ~v16, v22, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v20 & ~v16, AssociatedTypeWitness);
    int v26 = *(_DWORD *)(v15 + 84);
    size_t v27 = *(void *)(v15 + 64);
  }
  if (v26) {
    size_t v28 = v27;
  }
  else {
    size_t v28 = v27 + 1;
  }
  memcpy((void *)(v20 & ~v16), v22, v28);
LABEL_12:
  if (*(_DWORD *)(v15 + 84)) {
    size_t v29 = *(void *)(v15 + 64);
  }
  else {
    size_t v29 = *(void *)(v15 + 64) + 1;
  }
  char v30 = (void *)(((v20 | v16) + v29) & v21);
  uint64_t v31 = (const void *)(((v57 | v16) + v29) & v21);
  int v32 = v23((unint64_t)v30, 1, AssociatedTypeWitness);
  int v33 = v23((unint64_t)v31, 1, AssociatedTypeWitness);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v30, v31, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v30, 0, 1, AssociatedTypeWitness);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v30, AssociatedTypeWitness);
LABEL_20:
    memcpy(v30, v31, v29);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v30, v31, AssociatedTypeWitness);
LABEL_21:
  char v34 = (void *)(((unint64_t)v30 + v29 + v16) & v21);
  char v35 = (const void *)(((unint64_t)v31 + v29 + v16) & v21);
  int v36 = v23((unint64_t)v34, 1, AssociatedTypeWitness);
  int v37 = v23((unint64_t)v35, 1, AssociatedTypeWitness);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v34, v35, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v34, 0, 1, AssociatedTypeWitness);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v34, AssociatedTypeWitness);
LABEL_26:
    memcpy(v34, v35, v29);
    goto LABEL_27;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v34, v35, AssociatedTypeWitness);
LABEL_27:
  uint64_t v38 = v29 + ((v16 + 9) & v21) + ((v29 + v16 + ((v29 + v16) & v21)) & v21);
  uint64_t v39 = (char *)v54 + v38;
  int v40 = (char *)v53 + v38;
  uint64_t v41 = (void *)((unint64_t)(v39 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  long long v42 = (uint64_t *)((unint64_t)(v40 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v43 = *v42;
  *(void *)((char *)v41 + 5) = *(uint64_t *)((char *)v42 + 5);
  *uint64_t v41 = v43;
  uint64_t v44 = (_DWORD *)((unint64_t)(v39 + 19) & 0xFFFFFFFFFFFFFFFCLL);
  int v45 = (_DWORD *)((unint64_t)(v40 + 19) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v44 = *v45;
  long long v46 = (_DWORD *)(((unint64_t)v44 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v47 = (_DWORD *)(((unint64_t)v45 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v46 = *v47;
  uint64_t v48 = (void *)(((unint64_t)v46 + v55) & v21);
  uint64_t v49 = (const void *)(((unint64_t)v47 + v55) & v21);
  int v50 = v23((unint64_t)v48, 1, AssociatedTypeWitness);
  int v51 = v23((unint64_t)v49, 1, AssociatedTypeWitness);
  if (!v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v48, v49, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v48, AssociatedTypeWitness);
    goto LABEL_32;
  }
  if (v51)
  {
LABEL_32:
    memcpy(v48, v49, v29);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v48, v49, AssociatedTypeWitness);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, AssociatedTypeWitness);
  return a1;
}

unsigned __int16 *assignWithCopy for _LazyStack_Cache(unsigned __int16 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = ((v7 + 16) & ~v7) + *(void *)(v5 + 64);
  uint64_t v47 = ~v7;
  if (!v6)
  {
    char v13 = 8 * v9;
    if (*((unsigned char *)a1 + v9))
    {
      int v14 = (*((unsigned __int8 *)a1 + v9) - 1) << v13;
      if (v9 > 3) {
        int v14 = 0;
      }
      if (v9)
      {
        int v15 = v9 <= 3 ? ((v7 + 16) & ~v7) + *(_DWORD *)(v5 + 64) : 4;
        switch(v15)
        {
          case 2:
            int v16 = *a1;
            break;
          case 3:
            int v16 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v16 = *(_DWORD *)a1;
            break;
          default:
            int v16 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v16 = 0;
      }
      if ((v16 | v14) != 0xFFFFFFFF)
      {
        if (!a2[v9]) {
          goto LABEL_54;
        }
        int v17 = (a2[v9] - 1) << v13;
        if (v9 > 3) {
          int v17 = 0;
        }
        if (v9)
        {
          int v18 = v9 <= 3 ? ((v7 + 16) & ~v7) + *(_DWORD *)(v5 + 64) : 4;
          switch(v18)
          {
            case 2:
              int v19 = *(unsigned __int16 *)a2;
              break;
            case 3:
              int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              break;
            case 4:
              int v19 = *(_DWORD *)a2;
              break;
            default:
              int v19 = *a2;
              break;
          }
        }
        else
        {
          int v19 = 0;
        }
        if ((v19 | v17) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
LABEL_45:
        if (v6) {
          size_t v23 = v9;
        }
        else {
          size_t v23 = v9 + 1;
        }
        memcpy(a1, a2, v23);
        goto LABEL_56;
      }
    }
    if (!a2[v9])
    {
LABEL_49:
      *(void *)a1 = *(void *)a2;
      int v24 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      int v25 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *int v24 = *v25;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)v24 + v7 + 8) & v8, ((unint64_t)v25 + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_56;
    }
    int v20 = (a2[v9] - 1) << v13;
    if (v9 > 3) {
      int v20 = 0;
    }
    if (v9)
    {
      if (v9 <= 3) {
        int v21 = ((v7 + 16) & ~v7) + *(_DWORD *)(v5 + 64);
      }
      else {
        int v21 = 4;
      }
      switch(v21)
      {
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          break;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
          int v22 = *(_DWORD *)a2;
          break;
        default:
          int v22 = *a2;
          break;
      }
    }
    else
    {
      int v22 = 0;
    }
    int v12 = (v22 | v20) + 1;
LABEL_43:
    uint64_t v8 = ~v7;
    if (v12)
    {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v47, AssociatedTypeWitness);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  char v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
  int v11 = v10(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, v6, AssociatedTypeWitness);
  int v12 = v10((((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v6, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_43;
  }
  if (v12) {
    goto LABEL_45;
  }
LABEL_54:
  *(void *)a1 = *(void *)a2;
  int v26 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v27 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v26 = *v27;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v26 + v7 + 8) & v47, ((unint64_t)v27 + v7 + 8) & v47, AssociatedTypeWitness);
  if (!v6) {
    *((unsigned char *)a1 + v9) = 0;
  }
LABEL_56:
  if (v6) {
    uint64_t v28 = v9;
  }
  else {
    uint64_t v28 = v9 + 1;
  }
  size_t v29 = (char *)a1 + v28;
  char v30 = &a2[v28];
  unint64_t v31 = (unint64_t)(v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (unint64_t)(v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(void *)unint64_t v31 = v33;
  char v34 = (void *)((unint64_t)(v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v35 = (void *)((unint64_t)(v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v34 = *v35;
  v34[1] = v35[1];
  int v36 = (void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v37 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  *int v36 = *v37;
  v36[1] = v37[1];
  uint64_t v38 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  int v40 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  *int v40 = *v41;
  long long v42 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v43 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v42 = *v43;
  uint64_t v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v45 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v44 = *v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeWithTake for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

void storeEnumTagSinglePayload for StackPlacement(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v27 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v9 <= v11) {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v14 = v9;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = ((v13 + 16) & ~v13) + *(void *)(v10 + 64) + 7;
  unint64_t v16 = ((((((((((((((((((((v15 + ((v12 + (v13 | 7) + 1) & ~(v13 | 7))) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 43) & 0xFFFFFFFFFFFFFFF8)
                    + 31) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 102) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 47) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v14 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          *((unsigned char *)a1 + v16) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)((char *)a1 + v16) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v16) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v9 == v14)
            {
              size_t v23 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v27 + 56);
              v23(a1, a2, v9, v7);
            }
            else
            {
              uint64_t v24 = ((unint64_t)a1 + v12 + (v13 | 7) + 1) & ~(v13 | 7);
              if (v11 == v14)
              {
                int v25 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
                v25((v13 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v13, a2);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v26 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v26 = (a2 - 1);
                }
                *(void *)((((((((v15 + v24) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 27) & 0xFFFFFFFFFFFFFFF8)
                           + 47) & 0xFFFFFFFFFFFFFFF8) = v26;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((((((((((((((((v15 + ((v12 + (v13 | 7) + 1) & ~(v13 | 7))) & 0xFFFFFFF8)
                         + 19) & 0xFFFFFFF8)
                       + 43) & 0xFFFFFFF8)
                     + 31) & 0xFFFFFFF8)
                   + 15) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 102) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v17 = a3 - v14 + 1;
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_19;
    }
  }
  if (((((((((((((((((((((v15 + ((v12 + (v13 | 7) + 1) & ~(v13 | 7))) & 0xFFFFFFF8)
                       + 19) & 0xFFFFFFF8)
                     + 43) & 0xFFFFFFF8)
                   + 31) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 102) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 47) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v21 = v20;
  else {
    int v21 = 1;
  }
  if (((((((((((((((((((((v15 + ((v12 + (v13 | 7) + 1) & ~(v13 | 7))) & 0xFFFFFFF8)
                       + 19) & 0xFFFFFFF8)
                     + 43) & 0xFFFFFFF8)
                   + 31) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 102) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 47) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v22 = ~v14 + a2;
    bzero(a1, ((((((((((((((((((((v15 + ((v12 + (v13 | 7) + 1) & ~(v13 | 7))) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)+ 43) & 0xFFFFFFFFFFFFFFF8)+ 31) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 102) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 47) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v22;
  }
  switch(v19)
  {
    case 1:
      *((unsigned char *)a1 + v16) = v21;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v16) = v21;
      break;
    case 3:
LABEL_49:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)((char *)a1 + v16) = v21;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for LazyHGrid()
{
  return type metadata completion function for LazyHGrid();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ResolvedMatchedTransitionSourceConfiguration()
{
  return &type metadata for _ResolvedMatchedTransitionSourceConfiguration;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in InferredToolbarUserDefaultFeature()
{
  return &protocol witness table for InferredToolbarUserDefaultFeature;
}

ValueMetadata *type metadata accessor for AnyIdentifiableShareConfiguration()
{
  return &type metadata for AnyIdentifiableShareConfiguration;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetScrollEnvironmentModifier()
{
  return &protocol witness table for ResetScrollEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetContentMarginModifier()
{
  return &protocol witness table for ResetContentMarginModifier;
}

ValueMetadata *type metadata accessor for SharingPickerHostModifier.Model()
{
  return &type metadata for SharingPickerHostModifier.Model;
}

uint64_t base witness table accessor for PrimitiveViewModifier in ButtonActionModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in ButtonActionModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ShowsNavigationIndicatorDisclosureIndicatorModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  int v8 = *((_DWORD *)a2 + 20);
  uint64_t v20 = *a2;
  int v21 = v4;
  uint64_t v22 = v5;
  long long v23 = *(_OWORD *)(a2 + 3);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 7);
  uint64_t v27 = a2[9];
  int v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ShowsNavigationIndicatorDisclosureIndicatorModifier._makeInputs(modifier:inputs:)();
  uint64_t v11 = v20;
  int v12 = v21;
  uint64_t v13 = v5;
  long long v14 = v23;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  long long v17 = v26;
  uint64_t v18 = v27;
  int v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ShowsNavigationIndicatorDisclosureIndicatorModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  int v7 = *((_DWORD *)a2 + 16);
  uint64_t v8 = a2[9];
  char v9 = *((unsigned char *)a2 + 80);
  uint64_t v21 = *a2;
  int v22 = v4;
  uint64_t v23 = v5;
  long long v24 = *(_OWORD *)(a2 + 3);
  uint64_t v25 = v6;
  long long v26 = *((_OWORD *)a2 + 3);
  int v27 = v7;
  uint64_t v28 = v8;
  char v29 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static ShowsNavigationIndicatorDisclosureIndicatorModifier._makeInputs(modifier:inputs:)();
  uint64_t v12 = v21;
  int v13 = v22;
  uint64_t v14 = v5;
  long long v15 = v24;
  uint64_t v16 = v6;
  long long v17 = v26;
  int v18 = v27;
  uint64_t v19 = v28;
  char v20 = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ShowsNavigationIndicatorDisclosureIndicatorModifier._makeInputs(modifier:inputs:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (static StyleContextAcceptsPredicate.evaluate(inputs:)())
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_4:
    _GraphInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator();
    goto LABEL_9;
  }
  char v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0) {
    goto LABEL_4;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (static StyleContextAcceptsPredicate.evaluate(inputs:)())
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    char v1 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    if ((v1 & 1) == 0) {
      return result;
    }
  }
  _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator();
LABEL_9:
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

unint64_t lazy protocol witness table accessor for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator()
{
  unint64_t result = lazy protocol witness table cache variable for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator;
  if (!lazy protocol witness table cache variable for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator()
{
  unint64_t result = lazy protocol witness table cache variable for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator;
  if (!lazy protocol witness table cache variable for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator);
  }
  return result;
}

uint64_t UIHostingContentView.appendViewGraphFeatures()()
{
  specialized _UIHostingView.viewGraph.getter();
  lazy protocol witness table accessor for type HostingContentViewGraph and conformance HostingContentViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type HostingContentViewGraph and conformance HostingContentViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type HostingContentViewGraph and conformance HostingContentViewGraph;
  if (!lazy protocol witness table cache variable for type HostingContentViewGraph and conformance HostingContentViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingContentViewGraph and conformance HostingContentViewGraph);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PopoverPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FFCA8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t initializeWithCopy for _NavigationTransitionStyleOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v3;
    *(void *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  return a1;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance LabeledContentUsesLegacyLayout()
{
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

void @objc _UIHostingView.backgroundColor.setter(void *a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v5 = a1;
  specialized _UIHostingView.backgroundColor.setter((uint64_t)a3);
}

id specialized _UIHostingView.backgroundColor.setter(uint64_t a1)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78)) = 1;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for _UIHostingView();
  return objc_msgSendSuper2(&v4, sel_setBackgroundColor_, a1);
}

uint64_t assignWithCopy for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  uint64_t v13 = (v9 | 7) + 2;
  uint64_t v14 = (unsigned __int8 *)(((unint64_t)v11 + v13) & ~(v9 | 7));
  long long v15 = (unsigned __int8 *)(((unint64_t)v12 + v13) & ~(v9 | 7));
  if (v14 != v15)
  {
    uint64_t v16 = v7;
    uint64_t v17 = v8;
    uint64_t v18 = *(void *)(v8 + 64);
    uint64_t v19 = ((v9 + 75) & ~v9) + v18;
    if ((unint64_t)(v19 + 1) > 0x30) {
      uint64_t v20 = v19 + 1;
    }
    else {
      uint64_t v20 = 48;
    }
    unsigned int v21 = v14[v20];
    unsigned int v22 = v21 - 3;
    if (v21 >= 3)
    {
      if (v20 <= 3) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *v14;
          goto LABEL_14;
        case 2:
          int v24 = *(unsigned __int16 *)v14;
          goto LABEL_14;
        case 3:
          int v24 = *(unsigned __int16 *)(((unint64_t)v11 + v13) & ~(v9 | 7)) | (*(unsigned __int8 *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v24 = *(_DWORD *)v14;
LABEL_14:
          int v25 = (v24 | (v22 << (8 * v20))) + 3;
          unsigned int v21 = v24 + 3;
          if (v20 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v26 = ~v9;
    if (v21 == 2)
    {
      outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(((unint64_t)v11 + v13) & ~(v9 | 7)), *(void *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 8), *(unsigned char *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x10));
    }
    else if (v21 == 1)
    {
      outlined consume of Environment<OpenURLAction>.Content(*(void *)v14, *((void *)v14 + 1), *((void *)v14 + 2), *((void *)v14 + 3), *((_WORD *)v14 + 16), v14[34]);
      unint64_t v27 = (unint64_t)(v14 + 42) & 0xFFFFFFFFFFFFFFF8;
      outlined consume of Environment<OpenURLAction>.Content(*(void *)v27, *(void *)(v27 + 8), *(void *)(v27 + 16), *(void *)(v27 + 24), *(_WORD *)(v27 + 32), *(unsigned char *)(v27 + 34));
      (*(void (**)(unint64_t, uint64_t))(v17 + 8))((v9 + v27 + 35) & v26, v16);
      goto LABEL_21;
    }
    swift_release();
LABEL_21:
    unsigned int v28 = v15[v20];
    unsigned int v29 = v28 - 3;
    if (v28 >= 3)
    {
      if (v20 <= 3) {
        uint64_t v30 = v20;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *v15;
          goto LABEL_30;
        case 2:
          int v31 = *(unsigned __int16 *)v15;
          goto LABEL_30;
        case 3:
          int v31 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_30;
        case 4:
          int v31 = *(_DWORD *)v15;
LABEL_30:
          int v32 = (v31 | (v29 << (8 * v20))) + 3;
          unsigned int v28 = v31 + 3;
          if (v20 < 4) {
            unsigned int v28 = v32;
          }
          break;
        default:
          break;
      }
    }
    if (v28 == 2)
    {
      uint64_t v47 = *(void *)v15;
      uint64_t v48 = *((void *)v15 + 1);
      char v49 = v15[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v15, v48, v49);
      *(void *)uint64_t v14 = v47;
      *((void *)v14 + 1) = v48;
      v14[16] = v49;
      int v50 = (void *)*((void *)v15 + 3);
      *((void *)v14 + 3) = v50;
      uint64_t v51 = *((void *)v15 + 5);
      *((void *)v14 + 4) = *((void *)v15 + 4);
      *((void *)v14 + 5) = v51;
      v14[v20] = 2;
      id v52 = v50;
    }
    else
    {
      if (v28 == 1)
      {
        uint64_t v57 = v9;
        uint64_t v58 = v17;
        uint64_t v33 = *(void *)v15;
        uint64_t v34 = *((void *)v15 + 1);
        uint64_t v59 = v18;
        uint64_t v60 = a1;
        uint64_t v35 = *((void *)v15 + 2);
        uint64_t v36 = *((void *)v15 + 3);
        char v37 = v15[34];
        uint64_t v56 = v26;
        __int16 v38 = *((_WORD *)v15 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v15, v34, v35, v36, v38, v37);
        *(void *)uint64_t v14 = v33;
        *((void *)v14 + 1) = v34;
        *((void *)v14 + 2) = v35;
        *((void *)v14 + 3) = v36;
        *((_WORD *)v14 + 16) = v38;
        v14[34] = v37;
        uint64_t v55 = v16;
        unint64_t v39 = (unint64_t)(v14 + 42) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v40 = (unint64_t)(v15 + 42) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v41 = *(void *)v40;
        uint64_t v42 = *(void *)(v40 + 8);
        uint64_t v43 = *(void *)(v40 + 16);
        uint64_t v44 = *(void *)(v40 + 24);
        char v45 = *(unsigned char *)(v40 + 34);
        __int16 v46 = *(_WORD *)(v40 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v40, v42, v43, v44, v46, v45);
        *(void *)unint64_t v39 = v41;
        *(void *)(v39 + 8) = v42;
        *(void *)(v39 + 16) = v43;
        *(void *)(v39 + 24) = v44;
        a1 = v60;
        *(_WORD *)(v39 + 32) = v46;
        *(unsigned char *)(v39 + 34) = v45;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v58 + 16))((v57 + 35 + v39) & v56, (v57 + 35 + v40) & v56, v55);
        *(unsigned char *)(v59 + ((v57 + 35 + v39) & v56)) = *(unsigned char *)(v59 + ((v57 + 35 + v40) & v56));
        v14[v20] = 1;
        return a1;
      }
      uint64_t v53 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = v53;
      v14[v20] = 0;
    }
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(_WORD *)uint64_t v7 = *(_WORD *)v8;
  *(unsigned char *)(v7 + 2) = *(unsigned char *)(v8 + 2);
  return a1;
}

uint64_t assignWithCopy for BorderlessButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 25);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 24);
  outlined copy of Environment<KeyboardShortcut?>.Content(*(void *)a2, v5, v6, v8, v7);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 25);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v7;
  outlined consume of Environment<KeyboardShortcut?>.Content(v9, v10, v11, v13, v12);
  uint64_t v14 = *(void *)(v2 + 32);
  LOBYTE(v5) = *(unsigned char *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v14, v5);
  uint64_t v15 = *(void *)(a1 + 32);
  char v16 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v14;
  *(unsigned char *)(a1 + 40) = v5;
  outlined consume of Environment<Bool>.Content(v15, v16);
  uint64_t v17 = *(void *)(v2 + 48);
  LOBYTE(v2) = *(unsigned char *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v17, v2);
  uint64_t v18 = *(void *)(a1 + 48);
  char v19 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v17;
  *(unsigned char *)(a1 + 56) = v2;
  outlined consume of Environment<Bool>.Content(v18, v19);
  return a1;
}

uint64_t assignWithCopy for PlainButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(v2 + 16);
  LOBYTE(v2) = *(unsigned char *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v2);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *char v5 = v2;
  v5[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t outlined init with copy of SearchFocusContext?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SearchFocusContext?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for SearchFocusContext?()
{
  if (!lazy cache variable for type metadata for SearchFocusContext?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?);
    }
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  void v6[2] = *(_OWORD *)(a2 + 32);
  void v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Sidebar(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  void v6[2] = *(_OWORD *)(a2 + 32);
  void v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Detail(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  void v6[2] = *(_OWORD *)(a2 + 32);
  void v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t NavigationSplitView.InternalBody.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v52 = a1;
  uint64_t v75 = a2;
  uint64_t v2 = (ValueMetadata *)a1[2];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[5];
  uint64_t v88 = a1[6];
  uint64_t v89 = v4;
  uint64_t v7 = v88;
  uint64_t v8 = v4;
  uint64_t v72 = type metadata accessor for NavigationSplitView.SidebarContent();
  unint64_t v71 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v84 = &type metadata for NavigationSplitViewStyleConfiguration.Sidebar;
  uint64_t v85 = v72;
  unint64_t v86 = v71;
  uint64_t v87 = WitnessTable;
  type metadata accessor for StaticSourceWriter();
  uint64_t v60 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v79 = v8;
  unsigned int v80 = (char *)&v51 - v9;
  unint64_t v84 = v2;
  uint64_t v85 = v5;
  unint64_t v76 = v3;
  uint64_t v77 = v5;
  unint64_t v10 = v3;
  unint64_t v86 = v3;
  uint64_t v87 = v6;
  uint64_t v51 = v88;
  uint64_t v89 = v8;
  uint64_t v11 = type metadata accessor for NavigationSplitView.ContentListContent();
  uint64_t v69 = v11;
  unint64_t v12 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content();
  unint64_t v70 = v12;
  uint64_t v65 = swift_getWitnessTable();
  unint64_t v84 = &type metadata for NavigationSplitViewStyleConfiguration.Content;
  uint64_t v85 = v11;
  unint64_t v86 = v12;
  uint64_t v87 = v65;
  type metadata accessor for StaticSourceWriter();
  uint64_t v55 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v57 = (char *)&v51 - v13;
  unint64_t v84 = v2;
  uint64_t v85 = v5;
  uint64_t v14 = v2;
  unint64_t v86 = v10;
  uint64_t v87 = v6;
  uint64_t v78 = v6;
  uint64_t v88 = v7;
  uint64_t v89 = v8;
  uint64_t v15 = type metadata accessor for NavigationSplitView.DetailContent();
  uint64_t v62 = v15;
  unint64_t v16 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail();
  unint64_t v63 = v16;
  uint64_t v58 = swift_getWitnessTable();
  unint64_t v84 = &type metadata for NavigationSplitViewStyleConfiguration.Detail;
  uint64_t v85 = v15;
  unint64_t v86 = v16;
  uint64_t v87 = v58;
  type metadata accessor for StaticSourceWriter();
  uint64_t v56 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v53 = (char *)&v51 - v17;
  uint64_t v61 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  unint64_t v54 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v59 = (char *)&v51 - v20;
  uint64_t v21 = v64;
  uint64_t v22 = v64 + *((int *)v52 + 19);
  uint64_t v23 = *(ValueMetadata **)v22;
  uint64_t v24 = *(void *)(v22 + 8);
  int v25 = *(_DWORD *)(v22 + 16);
  uint64_t v26 = *(void *)(v22 + 24);
  uint64_t v27 = *(void *)(v22 + 32);
  uint64_t v28 = *(void *)(v22 + 40);
  LOBYTE(v22) = *(unsigned char *)(v22 + 48);
  unint64_t v84 = v23;
  uint64_t v85 = v24;
  LODWORD(v86) = v25;
  uint64_t v87 = v26;
  uint64_t v88 = v27;
  uint64_t v89 = v28;
  char v90 = v22;
  uint64_t v29 = v77;
  v83[2] = v14;
  v83[3] = v77;
  v83[4] = v76;
  v83[5] = v6;
  uint64_t v30 = v51;
  v83[6] = v51;
  v83[7] = v79;
  char v83[8] = v64;
  unint64_t v31 = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (void (*)(double))partial apply for closure #1 in NavigationSplitView.InternalBody.body.getter, (uint64_t)v83, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, v72, v31);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  int v32 = v14;
  v82[2] = v14;
  v82[3] = v29;
  unint64_t v33 = v76;
  v82[4] = v76;
  v82[5] = v78;
  uint64_t v34 = v30;
  v82[6] = v30;
  uint64_t v35 = v79;
  v82[7] = v79;
  v82[8] = v21;
  v83[16] = v31;
  v83[17] = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v72 = MEMORY[0x1E4F3FBC0];
  uint64_t v36 = v60;
  uint64_t v37 = swift_getWitnessTable();
  __int16 v38 = v57;
  unint64_t v39 = v80;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (void (*)(double))partial apply for closure #2 in NavigationSplitView.InternalBody.body.getter, (uint64_t)v82, v36, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, v69, v37);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v39, v36);
  v81[2] = v32;
  v81[3] = v77;
  v81[4] = v33;
  v81[5] = v78;
  v81[6] = v34;
  v81[7] = v35;
  v81[8] = v21;
  v83[14] = v37;
  v83[15] = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v40 = v55;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v42 = v53;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (void (*)(double))partial apply for closure #3 in NavigationSplitView.InternalBody.body.getter, (uint64_t)v81, v40, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, v62, v41);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v40);
  v83[12] = v41;
  v83[13] = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v43 = v56;
  uint64_t v44 = swift_getWitnessTable();
  char v45 = v54;
  MEMORY[0x18C113660](v44, v43, &type metadata for NavigationCommonModifier, v44);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v42, v43);
  unint64_t v46 = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  v83[10] = v44;
  v83[11] = v46;
  uint64_t v47 = v61;
  swift_getWitnessTable();
  uint64_t v48 = v59;
  static ViewBuilder.buildExpression<A>(_:)(v45);
  char v49 = *(void (**)(char *, uint64_t))(v68 + 8);
  v49(v45, v47);
  static ViewBuilder.buildExpression<A>(_:)(v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v48, v47);
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail);
  }
  return result;
}

uint64_t type metadata accessor for NavigationSplitView.DetailContent()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationCommonModifier and conformance NavigationCommonModifier;
  if (!lazy protocol witness table cache variable for type NavigationCommonModifier and conformance NavigationCommonModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationCommonModifier and conformance NavigationCommonModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle);
  }
  return result;
}

uint64_t closure #3 in NavigationSplitView.InternalBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v33 = a1;
  uint64_t v34 = a8;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v15;
  uint64_t v36 = v16;
  uint64_t v37 = v17;
  uint64_t v38 = v18;
  uint64_t v39 = v19;
  uint64_t v40 = v20;
  uint64_t v21 = type metadata accessor for NavigationSplitView.DetailContent();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v31 - v26;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = v31;
  uint64_t v40 = v32;
  uint64_t v28 = type metadata accessor for NavigationSplitView.InternalBody();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v33 + *(int *)(v28 + 72), a4);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v24, v14, a4);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v24);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v22 + 8);
  v29(v24, v21);
  static ViewBuilder.buildExpression<A>(_:)(v27);
  return ((uint64_t (*)(char *, uint64_t))v29)(v27, v21);
}

uint64_t destroy for TupleTableColumnContent(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 32) - 8) + 8))();
}

uint64_t closure #2 in NavigationSplitView.InternalBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v37 = a6;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = v13;
  uint64_t v39 = v14;
  uint64_t v40 = v15;
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  uint64_t v43 = v18;
  uint64_t v19 = v17;
  uint64_t v32 = v17;
  uint64_t v33 = v18;
  uint64_t v20 = v18;
  uint64_t v21 = type metadata accessor for NavigationSplitView.ContentListContent();
  uint64_t v36 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v34 = (char *)&v32 - v25;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = v19;
  uint64_t v43 = v20;
  uint64_t v26 = type metadata accessor for NavigationSplitView.InternalBody();
  uint64_t v27 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v35 + *(int *)(v26 + 68), a3);
  uint64_t v28 = *(void *)(v27 + *(int *)(v26 + 76) + 24);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v12, a3);
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = v32;
  uint64_t v43 = v33;
  *(void *)&v23[*(int *)(type metadata accessor for NavigationSplitView.ContentListContent() + 68)] = v28;
  swift_getWitnessTable();
  uint64_t v29 = v34;
  static ViewBuilder.buildExpression<A>(_:)(v23);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v36 + 8);
  v30(v23, v21);
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(char *, uint64_t))v30)(v29, v21);
}

uint64_t type metadata accessor for NavigationSplitView.ContentListContent()
{
  return swift_getGenericMetadata();
}

void NavigationSplitView.init(columnVisibility:topColumn:sidebar:content:detail:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  NavigationSplitView.init(columnVisibility:topColumn:sidebar:content:detail:)();
}

uint64_t getEnumTagSinglePayload for NavigationSplitView.InternalBody(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a3[4] - 8);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64);
  if (v11 <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = v11;
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v12;
  uint64_t v18 = v15 + 7;
  if (v16 >= a2)
  {
LABEL_32:
    if (v6 == v16)
    {
      uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      uint64_t v27 = *(unsigned int *)(v5 + 84);
      uint64_t v28 = a3[2];
    }
    else
    {
      uint64_t v29 = (v17 + result) & ~v12;
      if (v8 == v16)
      {
        uint64_t v30 = *(uint64_t (**)(uint64_t))(v7 + 48);
        return v30(v29);
      }
      unint64_t result = (v29 + v13 + v14) & ~v14;
      if (v11 != v16)
      {
        unint64_t v31 = *(void *)(((v18 + result) & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v31 >= 0xFFFFFFFF) {
          LODWORD(v31) = -1;
        }
        return (v31 + 1);
      }
      uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3[4] - 8) + 48);
      uint64_t v27 = v11;
      uint64_t v28 = a3[4];
    }
    return v26(result, v27, v28);
  }
  unint64_t v19 = ((v18 + ((v13 + v14 + (v17 & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 49;
  unsigned int v20 = (a2 - v16 + 255) >> (8 * v19);
  if (v19 < 4) {
    unsigned int v21 = v20 + 1;
  }
  else {
    unsigned int v21 = 2;
  }
  if (v21 >= 0x10000) {
    LODWORD(v22) = 4;
  }
  else {
    LODWORD(v22) = 2;
  }
  if (v21 < 0x100) {
    LODWORD(v22) = 1;
  }
  if (v21 >= 2) {
    uint64_t v22 = v22;
  }
  else {
    uint64_t v22 = 0;
  }
  switch(v22)
  {
    case 1:
      int v23 = *(unsigned __int8 *)(result + v19);
      if (!*(unsigned char *)(result + v19)) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 2:
      int v23 = *(unsigned __int16 *)(result + v19);
      if (!*(_WORD *)(result + v19)) {
        goto LABEL_32;
      }
      goto LABEL_27;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v23 = *(_DWORD *)(result + v19);
      if (!v23) {
        goto LABEL_32;
      }
LABEL_27:
      int v24 = (v23 - 1) << (8 * v19);
      if (v19 >= 4) {
        int v24 = 0;
      }
      if (((v18 + ((v13 + v14 + (v17 & ~v12)) & ~v14)) & 0xFFFFFFF8) == 0xFFFFFFD0) {
        int v25 = *(unsigned __int8 *)result;
      }
      else {
        int v25 = *(_DWORD *)result;
      }
      unint64_t result = v16 + (v25 | v24) + 1;
      break;
    default:
      goto LABEL_32;
  }
  return result;
}

uint64_t NavigationSplitView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v38 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v37 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v32 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v13;
  uint64_t v15 = v14[5];
  uint64_t v34 = v14[6];
  uint64_t v35 = v15;
  uint64_t v33 = v14[7];
  uint64_t v45 = v10;
  uint64_t v46 = v6;
  uint64_t v47 = v16;
  *(void *)&long long v48 = v15;
  *((void *)&v48 + 1) = v34;
  uint64_t v49 = v33;
  uint64_t v17 = type metadata accessor for NavigationSplitView.InternalBody();
  uint64_t v36 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x1F4188790](v20);
  int v23 = (char *)&v29 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v2, v10, v21);
  uint64_t v24 = (uint64_t)v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v32, v2 + *(int *)(a1 + 68), v6);
  uint64_t v25 = (uint64_t)v37;
  uint64_t v26 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v2 + *(int *)(a1 + 72), v31);
  NavigationSplitView.configuration.getter(a1, (uint64_t)&v45);
  v40[0] = v45;
  v40[1] = v46;
  int v41 = v47;
  long long v42 = v48;
  uint64_t v43 = v49;
  char v44 = v50;
  NavigationSplitView.InternalBody.init(sidebar:content:detail:configuration:)((uint64_t)v30, v24, v25, v40, v10, v6, v26, (uint64_t)v19);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v36 + 8);
  v27(v19, v17);
  static ViewBuilder.buildExpression<A>(_:)(v23);
  return ((uint64_t (*)(char *, uint64_t))v27)(v23, v17);
}

uint64_t destroy for NavigationSplitView.InternalBody(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  (*(void (**)(unint64_t))(*(void *)(a2[4] - 8) + 8))((v8
                                                                             + *(void *)(v7 + 56)
                                                                             + *(unsigned __int8 *)(*(void *)(a2[4] - 8)
                                                                                                  + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2[4] - 8) + 80));
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for NavigationSplitView.InternalBody(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  *(_WORD *)(v21 + 16) = *(_WORD *)(v22 + 16);
  *(_WORD *)(v21 + 18) = *(_WORD *)(v22 + 18);
  *(void *)(v21 + 24) = *(void *)(v22 + 24);
  *(void *)(v21 + 32) = *(void *)(v22 + 32);
  *(void *)(v21 + 40) = *(void *)(v22 + 40);
  *(unsigned char *)(v21 + 48) = *(unsigned char *)(v22 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t NavigationSplitView.configuration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NavigationSplitView.$visibility.getter(a1, (uint64_t)&v16);
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  __int16 v7 = v18;
  __int16 v8 = *(_WORD *)(v2 + *(int *)(a1 + 84));
  NavigationSplitView.visibility.getter(a1);
  unsigned int v9 = v15 >> 14;
  if (v9 < 2 || v9 == 3 && v15 == 49152) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 3;
  }
  uint64_t result = NavigationSplitView.$preferredCompactColumn.getter(a1, (uint64_t)&v16);
  uint64_t v12 = v16;
  uint64_t v13 = v17;
  char v14 = v18;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 18) = v8;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v12;
  *(void *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 48) = v14;
  return result;
}

uint64_t NavigationSplitView.$preferredCompactColumn.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(a1 + 80));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*((unsigned char *)v4 + 17))
  {
    char v7 = *((unsigned char *)v4 + 16);
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 16) = v7;
    swift_retain();
    return swift_retain();
  }
  else
  {
    type metadata accessor for State<NavigationSplitViewColumn>(0, &lazy cache variable for type metadata for State<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F41580]);
    return State.projectedValue.getter();
  }
}

__n128 NavigationSplitView.InternalBody.init(sidebar:content:detail:configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v20 = a4[1];
  uint64_t v21 = *a4;
  int v13 = *((_DWORD *)a4 + 4);
  __n128 v19 = *(__n128 *)(a4 + 3);
  uint64_t v18 = a4[5];
  char v17 = *((unsigned char *)a4 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a8, a1, a5);
  char v14 = (int *)type metadata accessor for NavigationSplitView.InternalBody();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a8 + v14[17], a2, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8 + v14[18], a3, a7);
  uint64_t v15 = a8 + v14[19];
  *(void *)uint64_t v15 = v21;
  *(void *)(v15 + 8) = v20;
  *(_DWORD *)(v15 + 16) = v13;
  __n128 result = v19;
  *(__n128 *)(v15 + 24) = v19;
  *(void *)(v15 + 40) = v18;
  *(unsigned char *)(v15 + 48) = v17;
  return result;
}

uint64_t closure #1 in NavigationSplitView.InternalBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v34 = a6;
  uint64_t v36 = a7;
  uint64_t v37 = a4;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = v13;
  uint64_t v39 = v14;
  uint64_t v40 = v15;
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  uint64_t v43 = v18;
  uint64_t v19 = v17;
  uint64_t v32 = v17;
  uint64_t v20 = type metadata accessor for NavigationSplitView.SidebarContent();
  uint64_t v35 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v32 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a2, v24);
  uint64_t v27 = v33;
  uint64_t v38 = a2;
  uint64_t v39 = v33;
  uint64_t v40 = v37;
  uint64_t v41 = a5;
  uint64_t v42 = v19;
  uint64_t v28 = v34;
  uint64_t v43 = v34;
  uint64_t v29 = *(void *)(a1 + *(int *)(type metadata accessor for NavigationSplitView.InternalBody() + 76) + 24);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v22, v12, a2);
  uint64_t v38 = a2;
  uint64_t v39 = v27;
  uint64_t v40 = v37;
  uint64_t v41 = a5;
  uint64_t v42 = v32;
  uint64_t v43 = v28;
  *(void *)&v22[*(int *)(type metadata accessor for NavigationSplitView.SidebarContent() + 68)] = v29;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v35 + 8);
  v30(v22, v20);
  static ViewBuilder.buildExpression<A>(_:)(v26);
  return ((uint64_t (*)(char *, uint64_t))v30)(v26, v20);
}

uint64_t type metadata accessor for NavigationSplitView.InternalBody()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for NavigationSplitView.SidebarContent()
{
  return swift_getGenericMetadata();
}

uint64_t NavigationSplitView.$visibility.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(a1 + 76));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*((unsigned char *)v4 + 18))
  {
    __int16 v7 = *((_WORD *)v4 + 8);
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(_WORD *)(a2 + 16) = v7;
    swift_retain();
    return swift_retain();
  }
  else
  {
    type metadata accessor for State<NavigationSplitViewColumn>(0, &lazy cache variable for type metadata for State<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41580]);
    return State.projectedValue.getter();
  }
}

uint64_t NavigationSplitView.visibility.getter(uint64_t a1)
{
  if (*(unsigned char *)(v1 + *(int *)(a1 + 76) + 18))
  {
    type metadata accessor for State<NavigationSplitViewColumn>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
    return MEMORY[0x18C113DA0]();
  }
  else
  {
    type metadata accessor for State<NavigationSplitViewColumn>(0, &lazy cache variable for type metadata for State<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41580]);
    return State.wrappedValue.getter();
  }
}

void type metadata accessor for State<NavigationSplitViewColumn>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t NavigationSplitStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  __int16 v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18[-1] - v10;
  uint64_t v12 = *(void *)(a1 + 8);
  int v13 = *(_DWORD *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 40);
  LOBYTE(v10) = *(unsigned char *)(a1 + 48);
  v18[0] = *(void *)a1;
  v18[1] = v12;
  int v19 = v13;
  long long v20 = *(_OWORD *)(a1 + 24);
  uint64_t v21 = v14;
  char v22 = v10;
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 24))(v18, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v15)(v11, AssociatedTypeWitness);
}

uint64_t destroy for NavigationSplitReader()
{
  outlined consume of HoverCallback();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t assignWithCopy for NavigationSplitView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  if (v21 != v22)
  {
    unsigned int v23 = *(unsigned __int8 *)(v21 + 18);
    if (v23 >= 2) {
      unsigned int v23 = *(_DWORD *)v21 + 2;
    }
    if (v23 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v24 = *(unsigned __int8 *)(v22 + 18);
    if (v24 >= 2) {
      unsigned int v24 = *(_DWORD *)v22 + 2;
    }
    if (v24 == 1)
    {
      *(void *)unint64_t v21 = *(void *)v22;
      *(void *)(v21 + 8) = *(void *)(v22 + 8);
      *(_WORD *)(v21 + 16) = *(_WORD *)(v22 + 16);
      *(unsigned char *)(v21 + 18) = 1;
      swift_retain();
    }
    else
    {
      *(_WORD *)unint64_t v21 = *(_WORD *)v22;
      *(void *)(v21 + 8) = *(void *)(v22 + 8);
      *(unsigned char *)(v21 + 18) = 0;
    }
    swift_retain();
  }
  unint64_t v25 = (v21 + 26) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v22 + 26) & 0xFFFFFFFFFFFFFFF8;
  if (v25 != v26)
  {
    unsigned int v27 = *(unsigned __int8 *)(v25 + 17);
    if (v27 >= 2) {
      unsigned int v27 = *(_DWORD *)v25 + 2;
    }
    if (v27 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v28 = *(unsigned __int8 *)(v26 + 17);
    if (v28 >= 2) {
      unsigned int v28 = *(_DWORD *)v26 + 2;
    }
    if (v28 == 1)
    {
      *(void *)unint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = *(void *)(v26 + 8);
      *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
      *(unsigned char *)(v25 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v25 = *(unsigned char *)v26;
      *(void *)(v25 + 8) = *(void *)(v26 + 8);
      *(unsigned char *)(v25 + 17) = 0;
    }
    swift_retain();
  }
  *(_WORD *)(v25 + 18) = *(_WORD *)(v26 + 18);
  return a1;
}

uint64_t NavigationSplitViewVisibility.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<NavigationSplitViewVisibility.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<NavigationSplitViewVisibility.CodingKeys>, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v15 = 0;
    lazy protocol witness table accessor for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v10 = v16;
    char v14 = 1;
    char v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v10;
    a2[1] = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t destroy for NavigationSplitView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v12);
  unint64_t v13 = (*(void *)(v11 + 56) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v14 = *(unsigned __int8 *)(v13 + 18);
  if (v14 >= 2) {
    unsigned int v14 = *(_DWORD *)v13 + 2;
  }
  if (v14 == 1) {
    swift_release();
  }
  swift_release();
  unint64_t v15 = (v13 + 26) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v16 = *(unsigned __int8 *)(v15 + 17);
  if (v16 >= 2) {
    unsigned int v16 = *(_DWORD *)v15 + 2;
  }
  if (v16 == 1) {
    swift_release();
  }

  return swift_release();
}

uint64_t destroy for NavigationStack(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v5 = *(unsigned __int8 *)(v4 + 24);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)v4 + 2;
  }
  swift_release();
  if (v5 == 1) {
    swift_release();
  }
  swift_release();

  return outlined consume of HoverCallback();
}

uint64_t destroy for PrimitiveButtonGesture(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) != 255) {
    outlined consume of HoverCallback();
  }

  return swift_release();
}

uint64_t outlined consume of HoverCallback()
{
  return swift_release();
}

uint64_t destroy for ToolbarModifier(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v4 + 8))(v6);
  if (*(void *)(((*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t destroy for ToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  unint64_t v5 = (a1 + *(void *)(v4 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(v5 + 40) == 1) {
    __swift_destroy_boxed_opaque_existential_1(v5);
  }
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

void type metadata accessor for KeyedEncodingContainer<NavigationSplitViewVisibility.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();
    unint64_t v7 = a3(a1, &unk_1ED4562B8, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys);
  }
  return result;
}

uint64_t NavigationSplitView.init(preferredCompactColumn:sidebar:content:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, void (*a3)(uint64_t)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, long long a9)
{
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v30 = a6;
  long long v27 = a9;
  MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  char v22 = *(unsigned char *)(v19 + 16);
  long long v35 = xmmword_1883CF100;
  __int16 v36 = 0;
  char v37 = 0;
  __int16 v34 = 512;
  v31[0] = v20;
  v31[1] = v21;
  char v32 = v22;
  char v33 = 1;
  uint64_t v24 = v23();
  uint64_t v25 = a2(v24);
  v29(v25);
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)((uint64_t *)&v35, &v34, v31, (uint64_t)v18, (uint64_t)v15, (uint64_t)v12, a5, a7, v30, a8);
}

uint64_t protocol witness for NavigationSplitViewStyle.makeBody(configuration:) in conformance AutomaticNavigationSplitViewStyle_Phone@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[5];
  char v8 = *((unsigned char *)a1 + 48);
  *(void *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v7;
  *(unsigned char *)(a2 + 80) = v8;
  *(unsigned char *)(a2 + 81) = 2;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for NavigationSplitViewStyle.makeBody(configuration:) in conformance AutomaticNavigationSplitViewStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  __int16 v3 = *(_WORD *)(a1 + 16);
  __int16 v4 = *(_WORD *)(a1 + 18);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(_WORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 18) = 1;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 40) = v7;
  *(unsigned char *)(a2 + 41) = 1;
  *(_WORD *)(a2 + 42) = v4;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for NavigationSplitViewStyle.makeBody(configuration:) in conformance BalancedNavigationSplitViewStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[5];
  unsigned __int8 v8 = *((unsigned char *)a1 + 48);
  *(void *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v7;
  *(_WORD *)(a2 + 80) = v8;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t NavigationSplitView.ContentListContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  type metadata accessor for StyleContextWriter<SidebarStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<ContentListStyleContext>);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v24 - v4;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v24 = (char *)&v24 - v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v25 = (char *)&v24 - v12;
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = v26;
  View.styleContext<A>(_:)();
  LOBYTE(v14) = *(void *)(v14 + *(int *)(a1 + 68)) == 3;
  uint64_t v15 = lazy protocol witness table accessor for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<ContentListStyleContext> and conformance StyleContextWriter<A>, &lazy cache variable for type metadata for StyleContextWriter<ContentListStyleContext>);
  uint64_t v36 = v13;
  uint64_t v37 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = v24;
  View.navigationColumn(isSearchEnabled:)(v14, v3, WitnessTable);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v3);
  swift_getKeyPath();
  char v35 = 0;
  unint64_t v18 = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  uint64_t v33 = WitnessTable;
  unint64_t v34 = v18;
  uint64_t v19 = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v6);
  unint64_t v20 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v31 = v19;
  unint64_t v32 = v20;
  swift_getWitnessTable();
  uint64_t v21 = v25;
  static ViewBuilder.buildExpression<A>(_:)(v10);
  char v22 = *(void (**)(char *, uint64_t))(v29 + 8);
  v22(v10, v8);
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, v8);
}

uint64_t View.focusable(_:)(char a1, uint64_t a2, uint64_t a3)
{
  v10[0] = a1;
  uint64_t v8 = &type metadata for FocusInteractions;
  uint64_t v9 = &protocol witness table for FocusInteractions;
  uint64_t v5 = unk_1ED466260;
  if ((unk_1ED466260 & ~qword_1ED466258) == 0) {
    uint64_t v5 = 0;
  }
  *(void *)&long long v7 = v5 | qword_1ED466258;
  outlined init with take of OptionalBinaryInteger(&v7, (uint64_t)v11);
  v11[5] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v11[6] = 0;
  MEMORY[0x18C113660](v10, a2, &type metadata for _FocusableModifier, a3);
  return outlined destroy of _FocusableModifier((uint64_t)v10);
}

uint64_t UpdateViewFocusItem.updateValue()()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  outlined init with copy of _FocusableModifier(Value, (uint64_t)v26);
  uint64_t v4 = v3 & 1;
  v26[64] = v3 & 1;
  uint64_t v5 = (uint64_t *)AGGraphGetValue();
  char v7 = v6;
  uint64_t v8 = *v5;
  uint64_t v9 = (char *)AGGraphGetValue();
  char v11 = v10;
  char v12 = *v9;
  int v13 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v13 != *(_DWORD *)(v0 + 36) || (int v14 = *(_DWORD *)(v0 + 32)) == 0)
  {
    int v14 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v15 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v15 = 1;
    }
    static ViewIdentity.nextSeed = v15;
    *(_DWORD *)(v0 + 32) = v14;
    *(_DWORD *)(v0 + 36) = v13;
    outlined init with copy of _FocusableModifier((uint64_t)v26, (uint64_t)v24);
    char v25 = v4;
    outlined destroy of (value: _FocusableModifier, changed: Bool)((uint64_t)v24);
    goto LABEL_12;
  }
  outlined init with copy of _FocusableModifier((uint64_t)v26, (uint64_t)v24);
  char v25 = v4;
  long long v19 = v24[0];
  long long v20 = v24[1];
  long long v21 = v24[2];
  long long v22 = v24[3];
  char v23 = v4;
  outlined destroy of _FocusableModifier((uint64_t)&v19);
  if (v4 || (v7 & 1) != 0 || (v11 & 1) != 0 || !AGGraphGetOutputValue())
  {
LABEL_12:
    outlined init with copy of _FocusableModifier((uint64_t)v26, (uint64_t)&v19);
    char v23 = v4;
    char v16 = v19;
    outlined destroy of _FocusableModifier((uint64_t)&v19);
    outlined init with copy of _FocusableModifier((uint64_t)v26, (uint64_t)&v19);
    char v23 = v4;
    long long v17 = v22;
    swift_retain();
    outlined destroy of _FocusableModifier((uint64_t)&v19);
    LODWORD(v19) = v14;
    BYTE4(v19) = v16 & v12;
    *((void *)&v19 + 1) = v8;
    long long v20 = v17;
    AGGraphSetOutputValue();
    swift_release();
  }
  return outlined destroy of (value: _FocusableModifier, changed: Bool)((uint64_t)v26);
}

uint64_t outlined init with copy of _FocusableModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _FocusableModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_retain();
  return a1;
}

uint64_t outlined destroy of _FocusableModifier(uint64_t a1)
{
  return a1;
}

uint64_t destroy for OnCommandModifier(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);

  return swift_release();
}

uint64_t outlined destroy of (value: _FocusableModifier, changed: Bool)(uint64_t a1)
{
  type metadata accessor for (value: _FocusableModifier, changed: Bool)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (value: _FocusableModifier, changed: Bool)()
{
  if (!lazy cache variable for type metadata for (value: _FocusableModifier, changed: Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: _FocusableModifier, changed: Bool));
    }
  }
}

uint64_t initializeWithCopy for FocusItem.ViewItem(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FocusStore(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for SwiftUIGlue(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SwiftUIGlue);
}

uint64_t UIKitEventBindingBridge.__deallocating_deinit()
{
  uint64_t v0 = (id *)EventBindingBridge.deinit();

  return swift_deallocClassInstance();
}

uint64_t storeEnumTagSinglePayload for ListPadding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t base witness table accessor for PrimitiveViewModifier in ProgressViewStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in ProgressViewStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _NavigationSplitReader.PreparedColumn<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for ResolvedSearchFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188282FDC);
}

uint64_t BorderlessButtonStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t type metadata accessor for PresentationHostingControllerBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>.SidebarContent()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>.DetailContent()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>.InternalBody()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>.ContentListContent()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ShouldRenderAsTemplate@<X0>(BOOL *a1@<X8>)
{
  static Semantics.v2.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  *a1 = (result & 1) == 0;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance GeometryActionBinder<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t @objc SheetBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(a1 + direct field offset for SheetBridge.interactiveDismissHandler));
  outlined destroy of PresentationState(a1 + direct field offset for SheetBridge.presentationState);
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.managedObjectContext : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.managedObjectContext.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.managedObjectContext.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

Swift::Void __swiftcall CellHostingView.appendViewGraphFeatures()()
{
  UIItemHostingView.appendViewGraphFeatures()();
  specialized _UIHostingView.viewGraph.getter();
  lazy protocol witness table accessor for type CellViewGraph and conformance CellViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();

  swift_release();
}

Swift::Void __swiftcall UIItemHostingView.appendViewGraphFeatures()()
{
  specialized _UIHostingView.viewGraph.getter();
  lazy protocol witness table accessor for type ItemHostingViewGraph and conformance ItemHostingViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();

  swift_release();
}

unint64_t lazy protocol witness table accessor for type ItemHostingViewGraph and conformance ItemHostingViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type ItemHostingViewGraph and conformance ItemHostingViewGraph;
  if (!lazy protocol witness table cache variable for type ItemHostingViewGraph and conformance ItemHostingViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ItemHostingViewGraph and conformance ItemHostingViewGraph);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CellViewGraph and conformance CellViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type CellViewGraph and conformance CellViewGraph;
  if (!lazy protocol witness table cache variable for type CellViewGraph and conformance CellViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CellViewGraph and conformance CellViewGraph);
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectionPlatformItemListFlags()
{
  return &type metadata for SelectionPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for AnyNavigationLinkPresentedView()
{
  return &type metadata for AnyNavigationLinkPresentedView;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationDestinationModifier<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>)
{
  return static NavigationDestinationModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

uint64_t partial apply for implicit closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)(v0[6], v0[2], v0[3], v0[4], v0[5]);
}

ValueMetadata *type metadata accessor for WindowToolbarConfiguration()
{
  return &type metadata for WindowToolbarConfiguration;
}

ValueMetadata *type metadata accessor for BorderedButtonStyle_CarMac()
{
  return &type metadata for BorderedButtonStyle_CarMac;
}

ValueMetadata *type metadata accessor for FocusGroupIdentifier.ID()
{
  return &type metadata for FocusGroupIdentifier.ID;
}

ValueMetadata *type metadata accessor for ToolbarPlacement()
{
  return &type metadata for ToolbarPlacement;
}

ValueMetadata *type metadata accessor for MultiViewLabel()
{
  return &type metadata for MultiViewLabel;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContentConfigurationBasedRootEnvironment(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ContentConfigurationBasedRootEnvironment()
{
  lazy protocol witness table accessor for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment((unint64_t *)&lazy protocol witness table cache variable for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment, (void (*)(uint64_t))type metadata accessor for ContentConfigurationBasedRootEnvironment);

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t closure #1 in NavigationLink<>.init<A>(value:label:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  long long v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v5, v3);
  uint64_t result = AnyNavigationLinkPresentedValue.init<A>(_:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  double v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  double v3 = MEMORY[0x1F4188790](a1);
  long long v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v5, v3);
  uint64_t result = AnyNavigationLinkPresentedValue.init<A>(_:)((uint64_t)v5);
  *a2 = result;
  return result;
}

uint64_t AnyNavigationLinkPresentedValue.init<A>(_:)(uint64_t a1)
{
  return AnyNavigationLinkPresentedValueStorage.__allocating_init(_:)(a1);
}

{
  type metadata accessor for AnyNavigationLinkCodablePresentedValueStorage();
  return AnyNavigationLinkCodablePresentedValueStorage.__allocating_init(_:)(a1);
}

uint64_t AnyNavigationLinkPresentedValueStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 208) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 224), a1);
  return v2;
}

uint64_t type metadata accessor for AnyNavigationLinkPresentedValueStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OutsetByRowInsetsIfNecessary.OutsetLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  int v23 = *a1;
  uint64_t v15 = v8;
  int v16 = v9;
  uint64_t v17 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v12;
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v11;
  unint64_t v13 = lazy protocol witness table accessor for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 80))(&v23, &v15, a3, a4, a5, v13);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance SymmetricallyScaledTextLayout()
{
  return MEMORY[0x1F40FD638]();
}

unint64_t lazy protocol witness table accessor for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout;
  if (!lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutsetByRowInsetsIfNecessary.OutsetLayout and conformance OutsetByRowInsetsIfNecessary.OutsetLayout);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ToolbarItemGroup<A>.MakeView()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ProgressViewStyleConfiguration.CurrentValueLabel()
{
  return &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
}

uint64_t type metadata completion function for SharingActivityPickerBridge()
{
  return swift_initClassMetadata2();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v14[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v11 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    long long v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    uint64_t v11 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v12, v8, a1, a2);
    swift_release();
    MEMORY[0x18C119C60](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void v16[2];

  uint64_t v3 = v2;
  v16[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    long long v12 = v11;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    unint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v9);
    swift_retain();
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v13, v8, a1, a2);
    long long v12 = v14;
    swift_release();
    MEMORY[0x18C119C60](v13, -1, -1);
    swift_release_n();
  }
  return v12;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = (unint64_t *)result;
  int64_t v7 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    uint64_t v16 = *(void *)(a3 + 56);
    uint64_t v17 = (void *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    v25[0] = *v17;
    v25[1] = v18;
    uint64_t v26 = *(void *)(v16 + 8 * v12);
    swift_retain();
    swift_retain();
    char v19 = closure #1 in LazyLayoutViewCache.collect()((uint64_t)v25, &v26, a4);
    swift_release();
    unint64_t result = swift_release();
    if (v4) {
      return result;
    }
    if (v19)
    {
      *(unint64_t *)((char *)v21 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v22++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  BOOL v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v24) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
  }
  unint64_t v14 = *(void *)(v23 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v24) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
  }
  unint64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v24) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
  }
  unint64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v24) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
  }
  unint64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v24) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
    }
    unint64_t v14 = *(void *)(v23 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t closure #1 in LazyLayoutViewCache.collect()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  int v5 = *(unsigned __int8 *)(*a2 + 208);
  swift_retain();
  int v6 = *(unsigned __int8 *)(v4 + 298);
  BOOL v8 = (v6 & 1) == 0 && v6 != 2;
  if (v5 == 1)
  {
    if (v8)
    {
      (*(void (**)(double (*)@<D0>(uint64_t@<X8>), uint64_t))(*(void *)a3 + 312))(partial apply for implicit closure #2 in LazyLayoutViewCache.ensureRemoved(item:), v4);
      static ReuseTrace.traceReuseItemUnplaced(_:)();
      AGSubgraphRef.willRemove()();
      AGSubgraphRemoveChild();
      char v9 = 1;
LABEL_14:
      *(unsigned char *)(v4 + 298) = v9;
    }
  }
  else if (!v8)
  {
    AGSubgraphAddChild();
    if (*(unsigned char *)(v4 + 298)) {
      AGSubgraphRef.didReinsert()();
    }
    char v9 = 0;
    goto LABEL_14;
  }
  swift_beginAccess();
  if (*(void *)(a3 + 176) >= (uint64_t)(*(_DWORD *)(a3 + 168) - *(_DWORD *)(v4 + 184))
    || *(_DWORD *)(v4 + 192) == *(_DWORD *)(a3 + 208)
    || *(_DWORD *)(v4 + 180)
    || *(_DWORD *)(v4 + 196) == *(_DWORD *)(a3 + 212))
  {
    uint64_t v10 = 1;
  }
  else
  {
    (*(void (**)(double (*)@<D0>(uint64_t@<X8>), uint64_t))(*(void *)a3 + 312))(partial apply for implicit closure #4 in closure #1 in LazyLayoutViewCache.collect(), v4);
    id v12 = *(id *)(v4 + 24);
    AGSubgraphRef.willInvalidate(isInserted:)(0);

    AGSubgraphInvalidate();
    uint64_t v10 = 0;
  }
  swift_release();
  return v10;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, LazyLayoutCacheItem>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v13);
    Hasher.init(_seed:)();
    swift_retain();
    swift_retain();
    _ViewList_ID.Canonical.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = (void *)(*(void *)(v8 + 48) + 16 * v24);
    void *v29 = v18;
    v29[1] = v19;
    *(void *)(*(void *)(v8 + 56) + 8 * v24) = v20;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  uint64_t v42 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v43 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v40) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v40) {
          return v8;
        }
        unint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v40) {
            return v8;
          }
          unint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v40) {
              return v8;
            }
            unint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v40) {
                  return v8;
                }
                unint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      uint64_t v43 = v16;
      unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v4 + 56) + 48 * v13;
    unint64_t v22 = *(void **)v21;
    unint64_t v23 = *(void *)(v21 + 8);
    unint64_t v24 = *(void *)(v21 + 16);
    char v25 = *(void *)(v21 + 24);
    unint64_t v26 = *(void *)(v21 + 32);
    BOOL v27 = *(unsigned char *)(v21 + 40);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v28 = v22;
    _ViewList_ID.Canonical.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v32 = __clz(__rbit64((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        char v35 = v31 == v34;
        if (v31 == v34) {
          uint64_t v31 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v11 + 8 * v31);
      }
      while (v36 == -1);
      unint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(void *)(v11 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    uint64_t v37 = (void *)(*(void *)(v8 + 48) + 16 * v32);
    *uint64_t v37 = v19;
    v37[1] = v20;
    uint64_t v38 = *(void *)(v8 + 56) + 48 * v32;
    *(void *)uint64_t v38 = v28;
    *(void *)(v38 + 8) = v23;
    *(void *)(v38 + 16) = v24;
    *(void *)(v38 + 24) = v25;
    *(void *)(v38 + 32) = v26;
    *(unsigned char *)(v38 + 40) = v27;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v42;
    uint64_t v10 = v43;
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt32 v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  uint64_t v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  uint64_t v70;

  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<ViewIdentity, AlertStorage>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v9 = result;
  unint64_t v54 = a2;
  if (a2 < 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  unint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      unint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v54) {
        return v9;
      }
      uint64_t v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v54) {
          return v9;
        }
        uint64_t v16 = a1[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v54) {
            return v9;
          }
          uint64_t v16 = a1[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v54) {
              return v9;
            }
            uint64_t v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v54) {
                  return v9;
                }
                uint64_t v16 = a1[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      uint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = *(_DWORD *)(*(void *)(v4 + 48) + 4 * v14);
    uint64_t v19 = *(void *)(v4 + 56) + 248 * v14;
    uint64_t v21 = *(_OWORD *)v19;
    uint64_t v20 = *(_OWORD *)(v19 + 16);
    unint64_t v22 = *(_OWORD *)(v19 + 48);
    uint64_t v57 = *(_OWORD *)(v19 + 32);
    uint64_t v58 = v22;
    unint64_t v23 = *(_OWORD *)(v19 + 112);
    char v25 = *(_OWORD *)(v19 + 64);
    unint64_t v24 = *(_OWORD *)(v19 + 80);
    uint64_t v61 = *(_OWORD *)(v19 + 96);
    uint64_t v62 = v23;
    uint64_t v59 = v25;
    uint64_t v60 = v24;
    unint64_t v26 = *(_OWORD *)(v19 + 176);
    uint64_t v28 = *(_OWORD *)(v19 + 128);
    BOOL v27 = *(_OWORD *)(v19 + 144);
    uint64_t v65 = *(_OWORD *)(v19 + 160);
    unsigned int v66 = v26;
    unint64_t v63 = v28;
    uint64_t v64 = v27;
    uint64_t v30 = *(_OWORD *)(v19 + 208);
    uint64_t v29 = *(_OWORD *)(v19 + 224);
    uint64_t v31 = *(_OWORD *)(v19 + 192);
    unint64_t v70 = *(void *)(v19 + 240);
    uint64_t v68 = v30;
    uint64_t v69 = v29;
    uint64_t v67 = v31;
    uint64_t v55 = v21;
    uint64_t v56 = v20;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    unint64_t v32 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      char v35 = __clz(__rbit64((-1 << v33) & ~*(void *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v38 = v34 == v37;
        if (v34 == v37) {
          unint64_t v34 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v12 + 8 * v34);
      }
      while (v39 == -1);
      char v35 = __clz(__rbit64(~v39)) + (v34 << 6);
    }
    *(void *)(v12 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    *(_DWORD *)(*(void *)(v9 + 48) + 4 * v35) = v18;
    uint64_t v40 = *(void *)(v9 + 56) + 248 * v35;
    uint64_t v41 = v55;
    uint64_t v42 = v56;
    uint64_t v43 = v58;
    *(_OWORD *)(v40 + 32) = v57;
    *(_OWORD *)(v40 + 48) = v43;
    *(_OWORD *)uint64_t v40 = v41;
    *(_OWORD *)(v40 + 16) = v42;
    char v44 = v59;
    uint64_t v45 = v60;
    uint64_t v46 = v62;
    *(_OWORD *)(v40 + 96) = v61;
    *(_OWORD *)(v40 + 112) = v46;
    *(_OWORD *)(v40 + 64) = v44;
    *(_OWORD *)(v40 + 80) = v45;
    uint64_t v47 = v63;
    long long v48 = v64;
    uint64_t v49 = v66;
    *(_OWORD *)(v40 + 160) = v65;
    *(_OWORD *)(v40 + 176) = v49;
    *(_OWORD *)(v40 + 128) = v47;
    *(_OWORD *)(v40 + 144) = v48;
    char v50 = v67;
    uint64_t v51 = v68;
    id v52 = v69;
    *(void *)(v40 + 240) = v70;
    *(_OWORD *)(v40 + 208) = v51;
    *(_OWORD *)(v40 + 224) = v52;
    *(_OWORD *)(v40 + 192) = v50;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t result = (uint64_t)outlined retain of AlertStorage(&v55);
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::UInt32 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  unsigned char v29[184];
  unsigned char v30[192];

  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<ViewIdentity, ConfirmationDialog>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  BOOL v27 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v27) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v27) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v27) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v27) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v27) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = *(_DWORD *)(*(void *)(v4 + 48) + 4 * v13);
    outlined init with copy of ConfirmationDialog(*(void *)(v4 + 56) + 184 * v13, (uint64_t)v30);
    outlined init with take of ConfirmationDialog((uint64_t)v30, (uint64_t)v29);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      uint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        unint64_t v24 = v20 == v23;
        if (v20 == v23) {
          uint64_t v20 = 0;
        }
        v22 |= v24;
        char v25 = *(void *)(v11 + 8 * v20);
      }
      while (v25 == -1);
      uint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_DWORD *)(*(void *)(v8 + 48) + 4 * v21) = v17;
    uint64_t result = outlined init with take of ConfirmationDialog((uint64_t)v29, *(void *)(v8 + 56) + 184 * v21);
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  unsigned char v29[96];
  unsigned char v30[104];

  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  BOOL v27 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v27) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v27) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v27) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v27) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v27) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = *(void *)(*(void *)(v4 + 48) + 8 * v13);
    outlined init with copy of NavigationDestinationPresentation(*(void *)(v4 + 56) + 96 * v13, (uint64_t)v30);
    outlined init with take of NavigationDestinationPresentation((uint64_t)v30, (uint64_t)v29);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      uint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        unint64_t v24 = v20 == v23;
        if (v20 == v23) {
          uint64_t v20 = 0;
        }
        v22 |= v24;
        char v25 = *(void *)(v11 + 8 * v20);
      }
      while (v25 == -1);
      uint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v8 + 48) + 8 * v21) = v17;
    uint64_t result = outlined init with take of NavigationDestinationPresentation((uint64_t)v29, *(void *)(v8 + 56) + 96 * v21);
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  long long v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v32;
  long long v33;
  uint64_t v34;
  uint64_t v35;

  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v9 = result;
  if (a2 < 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  unint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      unint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      uint64_t v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        uint64_t v16 = a1[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          uint64_t v16 = a1[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            uint64_t v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                uint64_t v16 = a1[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      uint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = 16 * v14;
    uint64_t v19 = (uint64_t *)(*(void *)(v4 + 48) + v18);
    unint64_t v34 = *v19;
    char v35 = v19[1];
    uint64_t v33 = *(_OWORD *)(*(void *)(v4 + 56) + v18);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v34);
    Hasher._combine(_:)(HIDWORD(v34));
    Hasher._combine(_:)(v35);
    Hasher._combine(_:)(HIDWORD(v35));
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v24 = v33;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v20) >> 6;
      unint64_t v24 = v33;
      do
      {
        if (++v22 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v22 == v26;
        if (v22 == v26) {
          unint64_t v22 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v22);
      }
      while (v28 == -1);
      unint64_t v23 = __clz(__rbit64(~v28)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v29 = 16 * v23;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + v29);
    *uint64_t v30 = v34;
    v30[1] = v35;
    *(_OWORD *)(*(void *)(v9 + 56) + v29) = v24;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    unint64_t v32 = (id)v24;
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  char *v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unsigned char *v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v36 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  uint64_t v38 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v39 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v36) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v36) {
          return v8;
        }
        unint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v36) {
            return v8;
          }
          unint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v36) {
              return v8;
            }
            unint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v36) {
                  return v8;
                }
                unint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      uint64_t v39 = v16;
      unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    uint64_t v18 = *(void *)(v4 + 48) + 24 * v13;
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *(void *)(v18 + 8);
    uint64_t v21 = *(unsigned __int8 *)(v18 + 16);
    unint64_t v22 = (char *)(*(void *)(v4 + 56) + 2 * v13);
    unint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v21);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    BOOL v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      uint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v31 = v27 == v30;
        if (v27 == v30) {
          BOOL v27 = 0;
        }
        v29 |= v31;
        unint64_t v32 = *(void *)(v11 + 8 * v27);
      }
      while (v32 == -1);
      uint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(void *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t v33 = *(void *)(v8 + 48) + 24 * v28;
    *(void *)uint64_t v33 = v20;
    *(void *)(v33 + 8) = v19;
    *(unsigned char *)(v33 + 16) = v21;
    unint64_t v34 = (unsigned char *)(*(void *)(v8 + 56) + 2 * v28);
    *unint64_t v34 = v23;
    v34[1] = v24;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v38;
    uint64_t v10 = v39;
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  char v29[8];
  char v30[8];

  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v9 = result;
  uint64_t v28 = a1;
  if (a2 < 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  unint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      unint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      uint64_t v16 = v28[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        uint64_t v16 = v28[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          uint64_t v16 = v28[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            uint64_t v16 = v28[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                uint64_t v16 = v28[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      uint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v14);
    outlined init with copy of AccessibilityFocus.Target(*(void *)(v4 + 56) + 8 * v14, (uint64_t)v30);
    outlined init with take of AccessibilityFocus.Target((uint64_t)v30, (uint64_t)v29);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        char v25 = v21 == v24;
        if (v21 == v24) {
          uint64_t v21 = 0;
        }
        v23 |= v25;
        unint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(unsigned char *)(*(void *)(v9 + 48) + v22) = v18;
    uint64_t result = outlined init with take of AccessibilityFocus.Target((uint64_t)v29, *(void *)(v9 + 56) + 8 * v22);
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}