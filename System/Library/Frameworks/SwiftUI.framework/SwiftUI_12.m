uint64_t assignWithTake for SharingPickerHostModifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  long long v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  long long v30;

  if (*(void *)(a1 + 72) == 1) {
    goto LABEL_4;
  }
  v4 = *(void *)(a2 + 72);
  if (v4 == 1)
  {
    outlined destroy of AnyIdentifiableShareConfiguration(a1);
LABEL_4:
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_5;
  }
  v11 = *(void *)(a2 + 32);
  v12 = *(unsigned char *)(a2 + 40);
  v13 = *(void *)(a1 + 8);
  v14 = *(void *)(a1 + 16);
  v15 = *(void *)(a1 + 24);
  v16 = *(void *)(a1 + 32);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  *(void *)(a1 + 32) = v11;
  v18 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v12;
  outlined consume of AnyShareConfiguration.Storage(v13, v14, v15, v16, v18);
  if (*(void *)(a1 + 72))
  {
    if (v4)
    {
      v19 = *(unsigned char *)(a2 + 64);
      v20 = *(void *)(a1 + 48);
      v21 = *(void *)(a1 + 56);
      v22 = *(unsigned char *)(a1 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(unsigned char *)(a1 + 64) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(void *)(a1 + 72) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    outlined destroy of Text(a1 + 48);
  }
  v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v24;
LABEL_18:
  if (*(void *)(a1 + 104))
  {
    v25 = *(void *)(a2 + 104);
    if (v25)
    {
      v26 = *(unsigned char *)(a2 + 96);
      v27 = *(void *)(a1 + 80);
      v28 = *(void *)(a1 + 88);
      v29 = *(unsigned char *)(a1 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(unsigned char *)(a1 + 96) = v26;
      outlined consume of Text.Storage(v27, v28, v29);
      *(void *)(a1 + 104) = v25;
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    outlined destroy of Text(a1 + 80);
  }
  v30 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v30;
LABEL_5:
  v8 = *(void *)(a2 + 112);
  if (!*(void *)(a1 + 112))
  {
    if (v8)
    {
      v10 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v8;
      *(void *)(a1 + 120) = v10;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_14;
  }
  v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = v9;
  swift_release();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SharingPickerHostModifier(uint64_t a1, uint64_t a2)
{
  long long v4 = (void *)(a1 + 112);
  if (*(void *)(a1 + 112) == 1) {
    goto LABEL_4;
  }
  v5 = (_OWORD *)(a2 + 112);
  uint64_t v6 = *(void *)(a2 + 112);
  if (v6 != 1)
  {
    if (*(void *)(a1 + 72) == 1)
    {
LABEL_9:
      long long v13 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v13;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      long long v15 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v15;
      goto LABEL_10;
    }
    uint64_t v12 = *(void *)(a2 + 72);
    if (v12 == 1)
    {
      outlined destroy of AnyIdentifiableShareConfiguration(a1);
      goto LABEL_9;
    }
    uint64_t v18 = *(void *)(a2 + 32);
    char v19 = *(unsigned char *)(a2 + 40);
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = *(void *)(a1 + 16);
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v23 = *(void *)(a1 + 32);
    long long v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    *(void *)(a1 + 32) = v18;
    char v25 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v19;
    outlined consume of AnyShareConfiguration.Storage(v20, v21, v22, v23, v25);
    if (*(void *)(a1 + 72))
    {
      if (v12)
      {
        char v26 = *(unsigned char *)(a2 + 64);
        uint64_t v27 = *(void *)(a1 + 48);
        uint64_t v28 = *(void *)(a1 + 56);
        char v29 = *(unsigned char *)(a1 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(unsigned char *)(a1 + 64) = v26;
        outlined consume of Text.Storage(v27, v28, v29);
        *(void *)(a1 + 72) = v12;
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      outlined destroy of Text(a1 + 48);
    }
    long long v30 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v30;
LABEL_22:
    if (*(void *)(a1 + 104))
    {
      uint64_t v31 = *(void *)(a2 + 104);
      if (v31)
      {
        char v32 = *(unsigned char *)(a2 + 96);
        uint64_t v33 = *(void *)(a1 + 80);
        uint64_t v34 = *(void *)(a1 + 88);
        char v35 = *(unsigned char *)(a1 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(unsigned char *)(a1 + 96) = v32;
        outlined consume of Text.Storage(v33, v34, v35);
        *(void *)(a1 + 104) = v31;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Text(a1 + 80);
    }
    long long v36 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v36;
LABEL_10:
    if (*v4)
    {
      if (v6)
      {
        uint64_t v16 = *(void *)(a2 + 120);
        *(void *)(a1 + 112) = v6;
        *(void *)(a1 + 120) = v16;
        swift_release();
        goto LABEL_5;
      }
      swift_release();
    }
    else if (v6)
    {
      uint64_t v17 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v6;
      *(void *)(a1 + 120) = v17;
      goto LABEL_5;
    }
    *(_OWORD *)long long v4 = *v5;
    goto LABEL_5;
  }
  outlined destroy of SharingPickerHostModifier.Model(a1);
LABEL_4:
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
LABEL_5:
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingPickerHostModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingPickerHostModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 136) = 0;
    }
    if (a2) {
      *(void *)(result + 128) = a2;
    }
  }
  return result;
}

void destroy for UnidentifiedSharingPickerModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of AnyShareConfiguration.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  if (*(void *)(a1 + 96))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 128))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for UnidentifiedSharingPickerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  char v9 = *(unsigned char *)(a2 + 64);
  swift_retain();
  swift_retain();
  outlined copy of AnyShareConfiguration.Storage(v5, v6, v7, v8, v9);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 64) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  if (!v10)
  {
    long long v18 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v18;
    uint64_t v14 = *(void *)(a2 + 128);
    if (v14) {
      goto LABEL_3;
    }
LABEL_5:
    long long v19 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v19;
    return a1;
  }
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  char v13 = *(unsigned char *)(a2 + 88);
  outlined copy of Text.Storage(v11, v12, v13);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRetain();
  uint64_t v14 = *(void *)(a2 + 128);
  if (!v14) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  char v17 = *(unsigned char *)(a2 + 120);
  outlined copy of Text.Storage(v15, v16, v17);
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(unsigned char *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = v14;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnidentifiedSharingPickerModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  char v8 = *(unsigned char *)(a2 + 64);
  outlined copy of AnyShareConfiguration.Storage(v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  char v13 = *(unsigned char *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = v8;
  outlined consume of AnyShareConfiguration.Storage(v9, v10, v11, v12, v13);
  uint64_t v14 = (_OWORD *)(a1 + 72);
  uint64_t v15 = (_OWORD *)(a2 + 72);
  uint64_t v16 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v16)
    {
      uint64_t v17 = *(void *)(a2 + 72);
      uint64_t v18 = *(void *)(a2 + 80);
      char v19 = *(unsigned char *)(a2 + 88);
      outlined copy of Text.Storage(v17, v18, v19);
      uint64_t v20 = *(void *)(a1 + 72);
      uint64_t v21 = *(void *)(a1 + 80);
      char v22 = *(unsigned char *)(a1 + 88);
      *(void *)(a1 + 72) = v17;
      *(void *)(a1 + 80) = v18;
      *(unsigned char *)(a1 + 88) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 72);
      long long v26 = *(_OWORD *)(a2 + 88);
      *uint64_t v14 = *v15;
      *(_OWORD *)(a1 + 88) = v26;
    }
  }
  else if (v16)
  {
    uint64_t v23 = *(void *)(a2 + 72);
    uint64_t v24 = *(void *)(a2 + 80);
    char v25 = *(unsigned char *)(a2 + 88);
    outlined copy of Text.Storage(v23, v24, v25);
    *(void *)(a1 + 72) = v23;
    *(void *)(a1 + 80) = v24;
    *(unsigned char *)(a1 + 88) = v25;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 88);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 88) = v27;
  }
  uint64_t v28 = (_OWORD *)(a1 + 104);
  char v29 = (_OWORD *)(a2 + 104);
  uint64_t v30 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128))
  {
    if (v30)
    {
      uint64_t v31 = *(void *)(a2 + 104);
      uint64_t v32 = *(void *)(a2 + 112);
      char v33 = *(unsigned char *)(a2 + 120);
      outlined copy of Text.Storage(v31, v32, v33);
      uint64_t v34 = *(void *)(a1 + 104);
      uint64_t v35 = *(void *)(a1 + 112);
      char v36 = *(unsigned char *)(a1 + 120);
      *(void *)(a1 + 104) = v31;
      *(void *)(a1 + 112) = v32;
      *(unsigned char *)(a1 + 120) = v33;
      outlined consume of Text.Storage(v34, v35, v36);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 104);
      long long v40 = *(_OWORD *)(a2 + 120);
      *uint64_t v28 = *v29;
      *(_OWORD *)(a1 + 120) = v40;
    }
  }
  else if (v30)
  {
    uint64_t v37 = *(void *)(a2 + 104);
    uint64_t v38 = *(void *)(a2 + 112);
    char v39 = *(unsigned char *)(a2 + 120);
    outlined copy of Text.Storage(v37, v38, v39);
    *(void *)(a1 + 104) = v37;
    *(void *)(a1 + 112) = v38;
    *(unsigned char *)(a1 + 120) = v39;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v41 = *(_OWORD *)(a2 + 120);
    *uint64_t v28 = *v29;
    *(_OWORD *)(a1 + 120) = v41;
  }
  return a1;
}

uint64_t assignWithTake for UnidentifiedSharingPickerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  char v11 = *(unsigned char *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = v5;
  outlined consume of AnyShareConfiguration.Storage(v6, v7, v8, v9, v11);
  if (*(void *)(a1 + 96))
  {
    uint64_t v12 = *(void *)(a2 + 96);
    if (v12)
    {
      char v13 = *(unsigned char *)(a2 + 88);
      uint64_t v14 = *(void *)(a1 + 72);
      uint64_t v15 = *(void *)(a1 + 80);
      char v16 = *(unsigned char *)(a1 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *(void *)(a1 + 96) = v12;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 72);
  }
  long long v17 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v17;
LABEL_6:
  if (!*(void *)(a1 + 128))
  {
LABEL_10:
    long long v23 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v23;
    return a1;
  }
  uint64_t v18 = *(void *)(a2 + 128);
  if (!v18)
  {
    outlined destroy of Text(a1 + 104);
    goto LABEL_10;
  }
  char v19 = *(unsigned char *)(a2 + 120);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v21 = *(void *)(a1 + 112);
  char v22 = *(unsigned char *)(a1 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = v19;
  outlined consume of Text.Storage(v20, v21, v22);
  *(void *)(a1 + 128) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnidentifiedSharingPickerModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnidentifiedSharingPickerModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for UnidentifiedSharingPickerModifier()
{
  return &unk_1ED45F8B8;
}

double protocol witness for ViewModifier.body(content:) in conformance UnidentifiedSharingPickerModifier@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v16 = *(unsigned char *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v20 = *(void *)(v1 + 80);
  uint64_t v21 = *(void *)(v1 + 72);
  uint64_t v19 = *(void *)(v1 + 88);
  uint64_t v17 = *(void *)(v1 + 32);
  uint64_t v18 = *(void *)(v1 + 96);
  uint64_t v23 = *(void *)(v1 + 112);
  uint64_t v24 = *(void *)(v1 + 104);
  uint64_t v8 = *(void *)(v1 + 128);
  uint64_t v22 = *(void *)(v1 + 120);
  char v9 = *(unsigned char *)(v1 + 64);
  swift_retain();
  swift_retain();
  v25[0] = v3;
  v25[1] = v4;
  char v26 = v16;
  uint64_t v27 = Namespace.wrappedValue.getter();
  uint64_t v28 = v17;
  uint64_t v29 = v5;
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  char v32 = v9;
  uint64_t v33 = v21;
  uint64_t v34 = v20;
  uint64_t v35 = v19;
  uint64_t v36 = v18;
  uint64_t v37 = v24;
  uint64_t v38 = v23;
  uint64_t v39 = v22;
  uint64_t v40 = v8;
  _s7SwiftUI19SharingPickerSourceOWOi0_((uint64_t)v25);
  outlined copy of AnyShareConfiguration.Storage(v17, v5, v6, v7, v9);
  outlined copy of Text?(v21, v20, v19, v18);
  outlined copy of Text?(v24, v23, v22, v8);
  uint64_t v10 = static Anchor.Source<A>.bounds.getter();
  outlined init with take of SharingPickerSource((uint64_t)v25, (uint64_t)v41);
  *((void *)&v42 + 1) = v10;
  long long v11 = v41[7];
  a1[6] = v41[6];
  a1[7] = v11;
  long long v12 = v41[3];
  a1[2] = v41[2];
  a1[3] = v12;
  long long v13 = v41[5];
  a1[4] = v41[4];
  a1[5] = v13;
  long long v14 = v41[1];
  *a1 = v41[0];
  a1[1] = v14;
  double result = *(double *)&v42;
  a1[8] = v42;
  return result;
}

uint64_t *closure #1 in SharingPickerHostModifier.body(content:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v4;
  uint64_t v13 = *(void *)(a3 + 128);
  long long v5 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v5;
  long long v6 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v6;
  long long v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  type metadata accessor for State<SharingPickerHostModifier.Model?>(0, (unint64_t *)&lazy cache variable for type metadata for State<SharingPickerHostModifier.Model?>, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v14, (uint64_t)v17, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v17, (uint64_t)v14, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v17, (uint64_t)v12, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  double result = (uint64_t *)_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v12);
  if (result != 1)
  {
    char v9 = v15;
    if (v15)
    {
      uint64_t v10 = v16;
      outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v14, (uint64_t)v11, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
      swift_retain();
      outlined release of SharingPickerHostModifier.Model?(v11);
      v9(v3);
      return (uint64_t *)outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v9, v10);
    }
    else
    {
      outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v14, (uint64_t)v11, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
      return outlined release of SharingPickerHostModifier.Model?(v11);
    }
  }
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance ToBool@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  outlined init with take of SharingPickerHostModifier.Model?(a1, (uint64_t)v6, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v6, (uint64_t)v7, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  uint64_t result = _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v7);
  BOOL v5 = result != 1 && v8 != 1;
  *a2 = v5;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ToBool(uint64_t a1, unsigned char *a2)
{
  if (*a2 == 1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    outlined init with take of SharingPickerHostModifier.Model?(a1, (uint64_t)v4, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
    outlined release of SharingPickerHostModifier.Model?(v4);
    _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWOi0_(v5);
    return outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v5, a1, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  }
  return result;
}

void protocol witness for Projection.get(base:) in conformance ToConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  outlined init with take of SharingPickerHostModifier.Model?(a1, (uint64_t)v22, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v22, (uint64_t)&v23, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)&v23) == 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v20 = v24;
    uint64_t v21 = v23;
    uint64_t v6 = v26;
    uint64_t v7 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    uint64_t v10 = v30;
    uint64_t v16 = v32;
    uint64_t v17 = v31;
    uint64_t v18 = v25;
    uint64_t v13 = v34;
    uint64_t v19 = v33;
    uint64_t v14 = v35;
    uint64_t v15 = v36;
    outlined consume of AnyIdentifiableShareConfiguration?(v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    uint64_t v5 = v18;
    uint64_t v12 = v19;
    uint64_t v11 = v17;
    uint64_t v4 = v20;
    uint64_t v3 = v21;
  }
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v10;
  a2[8] = v11;
  a2[9] = v16;
  a2[10] = v12;
  a2[11] = v13;
  a2[12] = v14;
  a2[13] = v15;
}

void protocol witness for Projection.set(base:newValue:) in conformance ToConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v26 = a2[1];
  uint64_t v27 = *a2;
  uint64_t v24 = a2[3];
  uint64_t v25 = a2[2];
  uint64_t v3 = a2[6];
  uint64_t v22 = a2[5];
  uint64_t v23 = a2[4];
  uint64_t v4 = a2[8];
  uint64_t v28 = a2[7];
  uint64_t v5 = a2[9];
  uint64_t v6 = a2[10];
  uint64_t v7 = a2[11];
  uint64_t v8 = a2[12];
  uint64_t v9 = a2[13];
  outlined init with take of SharingPickerHostModifier.Model?(a1, (uint64_t)v29, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v29, (uint64_t)v30, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v30) != 1)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = *(void *)a1;
    uint64_t v18 = *(void *)(a1 + 24);
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 48);
    long long v12 = *(_OWORD *)(a1 + 80);
    long long v13 = *(_OWORD *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v11 = *(void *)(a1 + 96);
    outlined consume of AnyIdentifiableShareConfiguration?(v27, v26, v25, v24, v23, v22, v3, v28, v4, v5, v6, v7, v8, v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    outlined consume of AnyIdentifiableShareConfiguration?(v21, v20, v19, v18, v17, v16, v15, v14, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, v10, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = v26;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + 24) = v24;
    *(void *)(a1 + 32) = v23;
    *(void *)(a1 + 40) = v22;
    *(void *)(a1 + 48) = v3;
    *(void *)(a1 + 56) = v28;
    *(void *)(a1 + 64) = v4;
    *(void *)(a1 + 72) = v5;
    *(void *)(a1 + 80) = v6;
    *(void *)(a1 + 88) = v7;
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v9;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in UnidentifiedSharingPickerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1878F22BC()
{
  if (*(void *)(v0 + 128) != 1)
  {
    if (*(void *)(v0 + 88) != 1)
    {
      outlined consume of AnyShareConfiguration.Storage(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
      if (*(void *)(v0 + 88))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v0 + 120))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 96), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
        swift_bridgeObjectRelease();
      }
    }
    if (*(void *)(v0 + 128)) {
      swift_release();
    }
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in SharingPickerHostModifier.body(content:)(uint64_t a1, unsigned __int8 *a2)
{
  return closure #1 in SharingPickerHostModifier.body(content:)(a1, a2, v2 + 16);
}

uint64_t *outlined release of SharingPickerHostModifier.Model?(uint64_t *a1)
{
  return a1;
}

uint64_t _s7SwiftUI19SharingPickerSourceOWOi0_(uint64_t result)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  return result;
}

uint64_t outlined release of (Binding<Bool>, AnyIdentifiableShareConfiguration)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v15 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 128);
  char v9 = *(unsigned char *)(a1 + 64);
  swift_release();
  swift_release();
  outlined consume of AnyShareConfiguration.Storage(v2, v3, v4, v5, v9);
  outlined consume of Text?(v11, v6, v7, v8);
  outlined consume of Text?(v15, v14, v13, v12);
  return a1;
}

ValueMetadata *type metadata accessor for PresentSharingPickerKey()
{
  return &type metadata for PresentSharingPickerKey;
}

void *type metadata accessor for ToConfiguration()
{
  return &unk_1ED41C1C8;
}

void *type metadata accessor for ToBool()
{
  return &unk_1ED466B90;
}

void destroy for SharingPickerSource(uint64_t *a1)
{
}

uint64_t *initializeWithCopy for SharingPickerSource(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  outlined copy of SharingPickerSource(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  return a1;
}

uint64_t assignWithCopy for SharingPickerSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v26 = a2[9];
  uint64_t v27 = a2[10];
  uint64_t v28 = a2[11];
  uint64_t v29 = a2[12];
  uint64_t v30 = a2[13];
  uint64_t v31 = a2[14];
  uint64_t v32 = a2[15];
  uint64_t v33 = a2[16];
  outlined copy of SharingPickerSource(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 128);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  *(void *)(a1 + 120) = v32;
  *(void *)(a1 + 128) = v33;
  outlined consume of SharingPickerSource(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
  return a1;
}

uint64_t assignWithTake for SharingPickerSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  uint64_t v16 = *(void *)(a1 + 128);
  long long v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  long long v20 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v20;
  *(void *)(a1 + 128) = v3;
  outlined consume of SharingPickerSource(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingPickerSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 6) | (2
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x38 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SharingPickerSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)uint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 136) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(void *)(result + 128) = 0;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SharingPickerSource(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for SharingPickerSource()
{
  return &type metadata for SharingPickerSource;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier>, &lazy cache variable for type metadata for _ViewModifier_Content<UnidentifiedSharingPickerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier, (uint64_t)&unk_1ED45F8B8);
    lazy protocol witness table accessor for type _ViewModifier_Content<SharingPickerHostModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<UnidentifiedSharingPickerModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<UnidentifiedSharingPickerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnidentifiedSharingPickerModifier and conformance UnidentifiedSharingPickerModifier, (uint64_t)&unk_1ED45F8B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<UnidentifiedSharingPickerModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata completion function for ReferenceFileDocumentCreationStrategy()
{
  type metadata accessor for UTType?(319, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t FileDocumentCreationStrategy.init(contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v36 = a5;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FileDocumentCreationStrategy();
  uint64_t v12 = *(int *)(v11 + 36);
  uint64_t v13 = v11;
  uint64_t v35 = v11;
  long long v14 = (char *)a6 + v12;
  uint64_t v33 = (uint64_t)a6 + v12;
  uint64_t v15 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = (uint64_t *)((char *)a6 + *(int *)(v13 + 40));
  *uint64_t v16 = 0;
  v16[1] = 0;
  uint64_t v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v40 = 0x3A49557466697753;
  unint64_t v41 = 0xE800000000000000;
  v17._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x800000018832CD10;
  v18._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v18);
  uint64_t v20 = v40;
  unint64_t v19 = v41;
  UUID.init()();
  uint64_t v21 = UUID.uuidString.getter();
  long long v23 = v22;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v34);
  uint64_t v40 = v20;
  unint64_t v41 = v19;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v25 = v41;
  *a6 = v40;
  a6[1] = v25;
  uint64_t v26 = v37;
  outlined assign with copy of UTType?(v37, v33);
  uint64_t v27 = v36;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v36 + 16))(a4);
  _s10Foundation3URLVSgWOhTm_0(v26, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  *(uint64_t *)((char *)a6 + *(int *)(v35 + 44)) = v28;
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = a4;
  v29[3] = v27;
  uint64_t v30 = v39;
  v29[4] = v38;
  v29[5] = v30;
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v16);
  *uint64_t v16 = (uint64_t)&async function pointer to partial apply for closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:);
  v16[1] = (uint64_t)v29;
  return result;
}

uint64_t closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v7 = type metadata accessor for Optional();
  v5[7] = v7;
  _OWORD v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v5[11] = *(void *)(a4 - 8);
  v5[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:), 0, 0);
}

uint64_t closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)()
{
  uint64_t v1 = *(int **)(v0 + 24);
  *(void *)(v0 + 104) = **(void **)(v0 + 16);
  type metadata accessor for FileDocumentBox();
  *(void *)(v0 + 112) = swift_dynamicCastClassUnconditional();
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  swift_unknownObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:);
  uint64_t v3 = *(void *)(v0 + 80);
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:);
  }
  else {
    uint64_t v2 = closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0 + 11;
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0 + 5;
  uint64_t v4 = v0[5];
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v4);
  uint64_t v7 = v0[12];
  if (v6 == 1)
  {
    uint64_t v1 = v0 + 8;
    uint64_t v5 = v0 + 7;
    uint64_t v8 = v3;
  }
  else
  {
    uint64_t v10 = v0[8];
    uint64_t v9 = v0[9];
    uint64_t v15 = v0[7];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v7, v3, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v9, v7, v4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v9, 0, 1, v4);
    specialized FileDocumentBox.base.setter(v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v15);
    uint64_t v8 = v0[12];
  }
  uint64_t v11 = *v5;
  uint64_t v12 = *v1;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for DocumentCreationStrategy.preferredContentType.getter in conformance FileDocumentCreationStrategy<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of UTType?(v2 + *(int *)(a1 + 36), a2, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
}

uint64_t protocol witness for DocumentCreationStrategy.newDocumentProvider.getter in conformance FileDocumentCreationStrategy<A>(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 40));
  outlined copy of AppIntentExecutor?(v2);
  return v2;
}

uint64_t protocol witness for DocumentCreationStrategy.allowedContentTypes.getter in conformance FileDocumentCreationStrategy<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReferenceFileDocumentCreationStrategy.__allocating_init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(a1, a2, a3);
  return v6;
}

void *ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v34 = a1;
  uint64_t v31 = *v3;
  uint64_t v5 = v31;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (char *)v3 + direct field offset for ReferenceFileDocumentCreationStrategy.preferredContentType;
  uint64_t v33 = (uint64_t)v9;
  uint64_t v10 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = (void *)((char *)v4 + direct field offset for ReferenceFileDocumentCreationStrategy.newDocumentProvider);
  *uint64_t v11 = 0;
  v11[1] = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v37 = 0x3A49557466697753;
  unint64_t v38 = 0xE800000000000000;
  uint64_t v12 = *(void *)(v5 + 80);
  v13._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x800000018832CD10;
  v14._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v14);
  uint64_t v16 = v37;
  unint64_t v15 = v38;
  UUID.init()();
  uint64_t v17 = UUID.uuidString.getter();
  unint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v32);
  uint64_t v37 = v16;
  unint64_t v38 = v15;
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v21 = v38;
  v4[2] = v37;
  v4[3] = v21;
  uint64_t v22 = v33;
  swift_beginAccess();
  uint64_t v23 = v34;
  outlined assign with copy of UTType?(v34, v22);
  swift_endAccess();
  uint64_t v24 = *(void *)(v31 + 88);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 32))(v12, v24);
  _s10Foundation3URLVSgWOhTm_0(v23, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  *(void *)((char *)v4 + direct field offset for ReferenceFileDocumentCreationStrategy.allowedContentTypes) = v25;
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v12;
  v26[3] = v24;
  uint64_t v27 = v36;
  v26[4] = v35;
  v26[5] = v27;
  uint64_t v28 = *v11;
  *uint64_t v11 = (uint64_t)&async function pointer to partial apply for closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:);
  v11[1] = (uint64_t)v26;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  return v4;
}

uint64_t closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:), 0, 0);
}

uint64_t closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)()
{
  uint64_t v1 = *(int **)(v0 + 24);
  *(void *)(v0 + 56) = **(void **)(v0 + 16);
  type metadata accessor for ReferenceFileDocumentBox();
  *(void *)(v0 + 64) = swift_dynamicCastClassUnconditional();
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  swift_unknownObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  if (*(void *)(v0 + 80))
  {
    swift_unknownObjectRetain();
    specialized ReferenceFileDocumentBox.base.setter();
    swift_unknownObjectRelease_n();
  }
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 80) = a1;
  *(void *)(v3 + 88) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:);
  }
  else {
    uint64_t v4 = closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t ReferenceFileDocumentCreationStrategy.deinit()
{
  swift_bridgeObjectRelease();
  _s10Foundation3URLVSgWOhTm_0(v0 + direct field offset for ReferenceFileDocumentCreationStrategy.preferredContentType, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + direct field offset for ReferenceFileDocumentCreationStrategy.newDocumentProvider));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ReferenceFileDocumentCreationStrategy.__deallocating_deinit()
{
  ReferenceFileDocumentCreationStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReferenceFileDocumentCreationStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for DocumentCreationStrategy.id.getter in conformance ReferenceFileDocumentCreationStrategy<A>()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for DocumentCreationStrategy.preferredContentType.getter in conformance ReferenceFileDocumentCreationStrategy<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + direct field offset for ReferenceFileDocumentCreationStrategy.preferredContentType;
  swift_beginAccess();
  return outlined init with copy of UTType?(v3, a1, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
}

uint64_t protocol witness for DocumentCreationStrategy.newDocumentProvider.getter in conformance ReferenceFileDocumentCreationStrategy<A>()
{
  uint64_t v1 = *(void *)(*v0 + direct field offset for ReferenceFileDocumentCreationStrategy.newDocumentProvider);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t protocol witness for DocumentCreationStrategy.allowedContentTypes.getter in conformance ReferenceFileDocumentCreationStrategy<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Identifiable.id.getter in conformance ReferenceFileDocumentCreationStrategy<A>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *a1 = *(void *)(*(void *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in static URLDocumentCreationStrategy.defaultDocumentProvider(contentType:)(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UTType();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in static URLDocumentCreationStrategy.defaultDocumentProvider(contentType:), 0, 0);
}

uint64_t closure #1 in static URLDocumentCreationStrategy.defaultDocumentProvider(contentType:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v46 = *(void *)(v0 + 96);
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v4 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  v48._object = (void *)0x800000018832CC80;
  v5._countAndFlagsBits = 0x64656C7469746E55;
  v5._object = (void *)0xE800000000000000;
  v6.value._countAndFlagsBits = 0x746E656D75636F44;
  v6.value._object = (void *)0xE900000000000073;
  v7._countAndFlagsBits = 0x64656C7469746E55;
  v7._object = (void *)0xE800000000000000;
  v48._countAndFlagsBits = 0xD00000000000001DLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v48);

  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_defaultManager);
  id v10 = objc_msgSend(v9, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:conformingTo:)();
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v8, sel_defaultManager);
  static UTType.package.getter();
  char v12 = UTType.conforms(to:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v46);
  if (v12)
  {
    URL._bridgeToObjectiveC()(v13);
    unint64_t v15 = v14;
    *(void *)(v0 + 56) = 0;
    unsigned int v16 = objc_msgSend(v11, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v14, 1, 0, v0 + 56);

    uint64_t v17 = *(void **)(v0 + 56);
    uint64_t v18 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v20 = *(void *)(v0 + 136);
    uint64_t v21 = *(void *)(v0 + 120);
    if (v16)
    {
      id v22 = v17;
    }
    else
    {
      id v40 = v17;
      unint64_t v41 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      _StringGuts.grow(_:)(47);
      *(void *)(v0 + 40) = 0;
      *(void *)(v0 + 48) = 0xE000000000000000;
      v42._countAndFlagsBits = 0xD00000000000002DLL;
      v42._object = (void *)0x800000018832CCC0;
      String.append(_:)(v42);
      *(void *)(v0 + 64) = v41;
      type metadata accessor for Error();
      _print_unlocked<A, B>(_:_:)();
      MEMORY[0x18C112B90](*(void *)(v0 + 40), *(void *)(v0 + 48));

      swift_bridgeObjectRelease();
    }
    v43 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v43(v20, v21);
    v43(v18, v21);
  }
  else
  {
    uint64_t v23 = URL.path.getter();
    uint64_t v24 = (void *)MEMORY[0x18C115780](v23);
    swift_bridgeObjectRelease();
    unsigned __int8 v25 = objc_msgSend(v11, sel_createFileAtPath_contents_attributes_, v24, 0, 0);

    if ((v25 & 1) == 0)
    {
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      MEMORY[0x18C112B90](0xD00000000000001FLL, 0x800000018832CCA0);
      swift_bridgeObjectRelease();
    }
    uint64_t v27 = *(void *)(v0 + 128);
    uint64_t v28 = *(void *)(v0 + 136);
    uint64_t v29 = *(void *)(v0 + 120);
    uint64_t v30 = **(void ***)(v0 + 72);
    Class = (__objc2_class *)object_getClass(v30);

    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v32(v28, v29);
    uint64_t v33 = *(void *)(v0 + 144);
    if (Class == _TtC7SwiftUI14URLDocumentBox && v30)
    {
      uint64_t v34 = *(void *)(v0 + 120);
      uint64_t v35 = *(void *)(v0 + 128);
      uint64_t v36 = *(void *)(v0 + 88);
      uint64_t v37 = **(void ***)(v0 + 72);
      if (object_getClass(v37) == (Class)_TtC7SwiftUI14URLDocumentBox) {
        unint64_t v38 = v37;
      }
      else {
        unint64_t v38 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v36, v33, v34);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
      uint64_t v39 = (uint64_t)v38 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
      swift_beginAccess();
      swift_unknownObjectRetain();
      outlined assign with take of URL?(v36, v39);
      swift_endAccess();
      swift_unknownObjectRelease();
    }
    else
    {
      v32(*(void *)(v0 + 144), *(void *)(v0 + 120));
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t URLDocumentCreationStrategy.init(contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v40 = a1;
  uint64_t v42 = a2;
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v6 = v37;
  uint64_t v38 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v36 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v41 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)&v36 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  Swift::String v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URLDocumentCreationStrategy(0);
  unsigned int v16 = (char *)a4 + *(int *)(v15 + 20);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v16, 1, 1, v5);
  uint64_t v43 = v15;
  unint64_t v44 = 0;
  uint64_t v17 = (uint64_t *)((char *)a4 + *(int *)(v15 + 24));
  *uint64_t v17 = 0;
  v17[1] = 0;
  unint64_t v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  UUID.init()();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  uint64_t v21 = v11;
  uint64_t v22 = v39;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v21);
  unint64_t v44 = 0xD00000000000001CLL;
  unint64_t v45 = 0x800000018832CCF0;
  v23._countAndFlagsBits = v18;
  v23._object = v20;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  unint64_t v24 = v45;
  *a4 = v44;
  a4[1] = v24;
  uint64_t v25 = v40;
  uint64_t v26 = (uint64_t)v16;
  uint64_t v27 = v37;
  outlined assign with copy of UTType?(v40, v26);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v42;
  *(void *)(v28 + 24) = v22;
  uint64_t v29 = *v17;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
  *uint64_t v17 = (uint64_t)&async function pointer to partial apply for closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:);
  v17[1] = v28;
  uint64_t v30 = v38;
  outlined init with copy of UTType?(v25, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for UTType?, v41);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v10, 1, v30) == 1)
  {
    uint64_t v31 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v33 = v36;
    v32(v36, v10, v30);
    type metadata accessor for UTType?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
    unint64_t v34 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
    v32((char *)(v31 + v34), v33, v30);
  }
  swift_release();
  uint64_t result = _s10Foundation3URLVSgWOhTm_0(v25, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  *(unint64_t *)((char *)a4 + *(int *)(v43 + 28)) = v31;
  return result;
}

uint64_t closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:), 0, 0);
}

uint64_t closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:)()
{
  uint64_t v1 = (void **)v0[5];
  uint64_t v2 = *v1;
  v0[13] = *v1;
  if (object_getClass(v2) != (Class)_TtC7SwiftUI14URLDocumentBox || v2 == 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (int *)v0[6];
    v0[14] = object_getClass(v2);
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
    swift_unknownObjectRetain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[15] = v7;
    *uint64_t v7 = v0;
    v7[1] = closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:);
    uint64_t v8 = v0[9];
    return v9(v8);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:);
  }
  else {
    uint64_t v2 = closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_unknownObjectRelease();
    _s10Foundation3URLVSgWOhTm_0(v3, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 64);
    if (*(__objc2_class **)(v0 + 112) == _TtC7SwiftUI14URLDocumentBox) {
      uint64_t v6 = *(void *)(v0 + 104);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v11 = v6;
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v7(v4, v3, v1);
    v7(v5, v4, v1);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v5, 0, 1, v1);
    uint64_t v8 = v11 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
    swift_beginAccess();
    outlined assign with take of URL?(v5, v8);
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for DocumentCreationStrategy.id.getter in conformance URLDocumentCreationStrategy()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for DocumentCreationStrategy.preferredContentType.getter in conformance URLDocumentCreationStrategy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of UTType?(v2 + *(int *)(a1 + 20), a2, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
}

uint64_t protocol witness for DocumentCreationStrategy.allowedContentTypes.getter in conformance URLDocumentCreationStrategy()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Identifiable.id.getter in conformance URLDocumentCreationStrategy@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ContentTypeDocumentCreationStrategy.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentTypeDocumentCreationStrategy(0);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = v6;
  uint64_t v31 = v6;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v25 = a2;
  uint64_t v10 = type metadata accessor for UTType();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10 - 8;
  uint64_t v11 = v28;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v27(v9, 1, 1, v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + *(int *)(v8 + 24));
  *uint64_t v12 = 0;
  v12[1] = 0;
  unint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  UUID.init()();
  uint64_t v13 = UUID.uuidString.getter();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v26);
  unint64_t v32 = 0xD00000000000001CLL;
  unint64_t v33 = 0x800000018832CCF0;
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  unint64_t v17 = v33;
  uint64_t v18 = v25;
  *uint64_t v25 = v32;
  v18[1] = v17;
  uint64_t v19 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  _s10Foundation3URLVSgWOhTm_0(v9, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  uint64_t v20 = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v30, v10);
  v27(v9, 0, 1, v10);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v12);
  type metadata accessor for UTType?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, v19, MEMORY[0x1E4FBBE00]);
  *uint64_t v12 = 0;
  v12[1] = 0;
  unint64_t v21 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18834BB80;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v22 + v21, v20, v10);
  *(unint64_t *)((char *)v18 + *(int *)(v31 + 28)) = v22;
  return result;
}

uint64_t DefaultDocumentCreationStrategy.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (int *)type metadata accessor for DefaultDocumentCreationStrategy(0);
  uint64_t v6 = (uint64_t)a1 + v5[5];
  uint64_t v7 = type metadata accessor for UTType();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v18 = v8 + 56;
  v17(v6, 1, 1, v7);
  uint64_t v9 = (uint64_t *)((char *)a1 + v5[6]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  unint64_t v20 = 0;
  unint64_t v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  UUID.init()();
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v19);
  unint64_t v20 = 0xD00000000000001CLL;
  unint64_t v21 = 0x800000018832CCF0;
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  unint64_t v14 = v21;
  *a1 = v20;
  a1[1] = v14;
  _s10Foundation3URLVSgWOhTm_0(v6, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  v17(v6, 1, 1, v7);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v9);
  *uint64_t v9 = 0;
  v9[1] = 0;
  *(unint64_t *)((char *)a1 + v5[7]) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t protocol witness for DocumentCreationStrategy.newDocumentProvider.getter in conformance URLDocumentCreationStrategy(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 24));
  outlined copy of AppIntentExecutor?(v2);
  return v2;
}

uint64_t URLDocumentBox.__deallocating_deinit()
{
  _s10Foundation3URLVSgWOhTm_0(v0 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for URLDocumentBox()
{
  return type metadata accessor for URLDocumentBox(0);
}

uint64_t type metadata accessor for URLDocumentBox(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for URLDocumentBox);
}

void type metadata completion function for URLDocumentBox()
{
  type metadata accessor for UTType?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t outlined destroy of AsyncNewDocumentProvider(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for URLDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for URLDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t type metadata accessor for URLDocumentCreationStrategy(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for URLDocumentCreationStrategy);
}

void type metadata completion function for FileDocumentCreationStrategy()
{
  type metadata accessor for UTType?(319, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FileDocumentCreationStrategy(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[9];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UTType();
    uint64_t v12 = *(void *)(v11 - 8);
    Swift::String v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[10];
    unint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    if (*v18)
    {
      uint64_t v19 = v18[1];
      *unint64_t v17 = *v18;
      v17[1] = v19;
      swift_retain();
    }
    else
    {
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    }
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FileDocumentCreationStrategy(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  if (*(void *)(a1 + *(int *)(a2 + 40))) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for FileDocumentCreationStrategy(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[9];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UTType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[10];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  if (*v16)
  {
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FileDocumentCreationStrategy(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[9];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[10];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a1 + v15);
  uint64_t v19 = *(void *)((char *)a2 + v15);
  if (!v18)
  {
    if (v19)
    {
      uint64_t v21 = *((void *)v17 + 1);
      *uint64_t v16 = v19;
      v16[1] = v21;
      swift_retain();
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_14;
  }
  if (!v19)
  {
    outlined destroy of AsyncNewDocumentProvider((uint64_t)v16);
    goto LABEL_13;
  }
  uint64_t v20 = *((void *)v17 + 1);
  *uint64_t v16 = v19;
  v16[1] = v20;
  swift_retain();
  swift_release();
LABEL_14:
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for FileDocumentCreationStrategy(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[9];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  return a1;
}

void *assignWithTake for FileDocumentCreationStrategy(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[9];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UTType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[10];
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  if (!*(void *)((char *)a1 + v16))
  {
LABEL_11:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_12;
  }
  if (!*(void *)v18)
  {
    outlined destroy of AsyncNewDocumentProvider(v17);
    goto LABEL_11;
  }
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = v19;
  swift_release();
LABEL_12:
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878F6020);
}

uint64_t sub_1878F6020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FileDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878F6114);
}

uint64_t sub_1878F6114(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for FileDocumentCreationStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for URLDocumentCreationStrategy(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UTType();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    if (*v18)
    {
      uint64_t v19 = v18[1];
      *uint64_t v17 = *v18;
      v17[1] = v19;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    }
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

void *initializeWithCopy for URLDocumentCreationStrategy(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UTType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  if (*v16)
  {
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for URLDocumentCreationStrategy(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a1 + v15);
  uint64_t v19 = *(void *)((char *)a2 + v15);
  if (!v18)
  {
    if (v19)
    {
      uint64_t v21 = *((void *)v17 + 1);
      *uint64_t v16 = v19;
      v16[1] = v21;
      swift_retain();
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_14;
  }
  if (!v19)
  {
    outlined destroy of AsyncNewDocumentProvider((uint64_t)v16);
    goto LABEL_13;
  }
  uint64_t v20 = *((void *)v17 + 1);
  *uint64_t v16 = v19;
  v16[1] = v20;
  swift_retain();
  swift_release();
LABEL_14:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for URLDocumentCreationStrategy(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  return a1;
}

void *assignWithTake for URLDocumentCreationStrategy(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UTType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  if (!*(void *)((char *)a1 + v16))
  {
LABEL_11:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_12;
  }
  if (!*(void *)v18)
  {
    outlined destroy of AsyncNewDocumentProvider(v17);
    goto LABEL_11;
  }
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = v19;
  swift_release();
LABEL_12:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTypeDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878F6B58);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ContentTypeDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878F6C50);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ContentTypeDocumentCreationStrategy(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ContentTypeDocumentCreationStrategy);
}

void type metadata completion function for URLDocumentCreationStrategy()
{
  type metadata accessor for UTType?(319, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for URLDocumentCreationStrategy(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  if (*(void *)(a1 + *(int *)(a2 + 24))) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for DefaultDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for DefaultDocumentCreationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t type metadata accessor for DefaultDocumentCreationStrategy(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DefaultDocumentCreationStrategy);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in DefaultDocumentCreationStrategy()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t protocol witness for DocumentBaseBox.base.getter in conformance URLDocumentBox@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
  swift_beginAccess();
  return outlined init with copy of UTType?(v3, a1, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
}

uint64_t protocol witness for DocumentBaseBox.base.setter in conformance URLDocumentBox(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
  swift_beginAccess();
  outlined assign with take of URL?(a1, v3);
  return swift_endAccess();
}

uint64_t (*protocol witness for DocumentBaseBox.base.modify in conformance URLDocumentBox())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t instantiation function for generic protocol witness table for URLDocumentCreationStrategy(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy(&lazy protocol witness table cache variable for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for URLDocumentCreationStrategy);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ReferenceFileDocumentCreationStrategy<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FileDocumentCreationStrategy<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ContentTypeDocumentCreationStrategy(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy(&lazy protocol witness table cache variable for type ContentTypeDocumentCreationStrategy and conformance ContentTypeDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for ContentTypeDocumentCreationStrategy);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for DefaultDocumentCreationStrategy(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy(&lazy protocol witness table cache variable for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for DefaultDocumentCreationStrategy);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t outlined init with copy of UTType?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for UTType?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined assign with copy of UTType?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1878F7374()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in URLDocumentCreationStrategy.init(contentType:prepareDocument:)(a1, v5, v4);
}

uint64_t sub_1878F7454()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  long long v5 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in ReferenceFileDocumentCreationStrategy.init(contentType:prepareDocument:), 0, 0);
}

uint64_t partial apply for closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in FileDocumentCreationStrategy.init(contentType:prepareDocument:)(a1, v7, v6, v4, v5);
}

uint64_t GestureState.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, a2, v7);
  GestureState.init(wrappedValue:resetTransaction:)((uint64_t)v9, 0, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t Gesture.updating<A>(_:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  v22[0] = a2;
  v22[1] = a5;
  uint64_t v12 = type metadata accessor for GestureState();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v22 - v14;
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v7, a4, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  GestureStateGesture.init(base:state:body:)((uint64_t)v19, (uint64_t)v15, v22[0], a3, a4, a6);
  return swift_retain();
}

uint64_t GestureState.init(wrappedValue:resetTransaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  double v10 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  State.init(wrappedValue:)();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  v11((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a2;
  v11((char *)(v13 + v12), (uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  uint64_t result = type metadata accessor for GestureState();
  uint64_t v15 = (uint64_t (**)())(a4 + *(int *)(result + 28));
  *uint64_t v15 = partial apply for closure #1 in GestureState.init(wrappedValue:resetTransaction:);
  v15[1] = (uint64_t (*)())v13;
  return result;
}

uint64_t type metadata accessor for GestureState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in GestureState.init(wrappedValue:resetTransaction:)()
{
  uint64_t v0 = type metadata accessor for Binding();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - v2;
  Binding.transaction(_:)();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t GestureState.init(wrappedValue:reset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  double v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v12);
  State.init(wrappedValue:)();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  v14((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a4);
  unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v16 + 2) = a4;
  *((void *)v16 + 3) = a2;
  *((void *)v16 + 4) = a3;
  v14((char *)v16 + v15, (uint64_t)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  uint64_t result = type metadata accessor for GestureState();
  uint64_t v18 = (uint64_t (**)(uint64_t))(a5 + *(int *)(result + 28));
  *uint64_t v18 = partial apply for closure #1 in GestureState.init(wrappedValue:reset:);
  v18[1] = v16;
  return result;
}

uint64_t closure #1 in GestureState.init(wrappedValue:reset:)(uint64_t a1, void (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Binding();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v17 - v14, a1, v11, v13);
  MEMORY[0x18C113DA0](v11);
  a2(v10, v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a5);
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t GestureState.wrappedValue.getter()
{
  type metadata accessor for State();

  return State.wrappedValue.getter();
}

uint64_t GestureState.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t protocol witness for static DynamicProperty._propertyBehaviors.getter in conformance GestureState<A>()
{
  return MEMORY[0x1F40FE6D0]();
}

uint64_t GestureState<A>.init(resetTransaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  return GestureState.init(wrappedValue:resetTransaction:)((uint64_t)v7, a1, a2, a3);
}

uint64_t GestureState<A>.init(reset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  return GestureState.init(wrappedValue:reset:)((uint64_t)v9, a1, a2, a3, a4);
}

uint64_t GestureStateGesture.init(base:state:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t v10 = type metadata accessor for GestureStateGesture();
  uint64_t v11 = a6 + *(int *)(v10 + 44);
  uint64_t v12 = type metadata accessor for GestureState();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a2, v12);
  uint64_t v14 = (void *)(a6 + *(int *)(v10 + 48));
  *uint64_t v14 = a3;
  v14[1] = a4;
  return result;
}

uint64_t sub_1878F8100()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GestureState.init(wrappedValue:resetTransaction:)()
{
  return closure #1 in GestureState.init(wrappedValue:resetTransaction:)();
}

uint64_t sub_1878F8200()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GestureState.init(wrappedValue:reset:)(uint64_t a1)
{
  return closure #1 in GestureState.init(wrappedValue:reset:)(a1, *(void (**)(char *, char *))(v1 + 24), *(void *)(v1 + 32), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16));
}

uint64_t type metadata accessor for GestureStateGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t GestureStateGesture.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t GestureStateGesture.base.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*GestureStateGesture.base.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GestureStateGesture.state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for GestureState();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t GestureStateGesture.state.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for GestureState();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*GestureStateGesture.state.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for GestureStateGesture.body : <A, B>GestureStateGesture<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 24);
  uint64_t v6 = *(void *)(a3 + a2 - 16);
  uint64_t v7 = *(void *)(a3 + a2 - 8);
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for GestureStateGesture() + 48));
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v11 = (uint64_t (*)())swift_allocObject();
  *((void *)v11 + 2) = v5;
  *((void *)v11 + 3) = v6;
  *((void *)v11 + 4) = v7;
  *((void *)v11 + 5) = v10;
  *((void *)v11 + 6) = v9;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> ();
  a4[1] = v11;

  return swift_retain();
}

uint64_t key path setter for GestureStateGesture.body : <A, B>GestureStateGesture<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void *)(a4 + a3 - 16);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = (uint64_t (*)())swift_allocObject();
  *((void *)v10 + 2) = v5;
  *((void *)v10 + 3) = v6;
  *((void *)v10 + 4) = v7;
  *((void *)v10 + 5) = v9;
  *((void *)v10 + 6) = v8;
  uint64_t v11 = (uint64_t (**)())(a2 + *(int *)(type metadata accessor for GestureStateGesture() + 48));
  swift_retain();
  uint64_t result = swift_release();
  *uint64_t v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ());
  v11[1] = v10;
  return result;
}

uint64_t GestureStateGesture.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 48));
  swift_retain();
  return v2;
}

uint64_t GestureStateGesture.body.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 48));
  uint64_t result = swift_release();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*GestureStateGesture.body.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static GestureStateGesture._makeGesture(gesture:inputs:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[5];
  long long v40 = a2[4];
  long long v41 = v5;
  long long v42 = a2[6];
  uint64_t v43 = *((void *)a2 + 14);
  long long v6 = a2[1];
  long long v36 = *a2;
  long long v37 = v6;
  long long v7 = a2[3];
  long long v38 = a2[2];
  long long v39 = v7;
  int v8 = *((_DWORD *)a2 + 30);
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  type metadata accessor for GestureStateGesture();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  int v9 = _GraphValue.value.getter();
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GestureOutputs();
  long long v31 = v40;
  long long v32 = v41;
  long long v33 = v42;
  uint64_t v34 = v43;
  int v26 = DWORD1(v37);
  uint64_t v29 = *((void *)&v38 + 1);
  long long v30 = v39;
  int v35 = v8;
  LODWORD(v24) = v9;
  DWORD1(v24) = _GestureOutputs.phase.getter();
  DWORD2(v24) = _GestureInputs.resetSeed.getter();
  BYTE12(v24) = (v8 & 0x10) != 0;
  *(_WORD *)((char *)&v24 + 13) = v15;
  HIBYTE(v24) = v16;
  int v25 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v18 = type metadata accessor for GesturePhase();
  uint64_t v19 = type metadata accessor for GestureStatePhase();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v24, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v17, v19, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
  static AGAttributeFlags.transactional.getter();
  static AGAttributeFlags.removable.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  long long v24 = v13;
  int v25 = v14;
  _GestureOutputs.withPhase<A>(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static GestureStateGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for GestureStateGesture();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t GestureStatePhase.gesture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GestureStateGesture();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t GestureStatePhase.phase.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t GestureStatePhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance GestureStateGesture<A, B>(uint64_t a1, long long *a2, uint64_t *a3)
{
  return static GestureStateGesture._makeGesture(gesture:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t GestureStatePhase.updateValue()(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[4];
  uint64_t v90 = a1[3];
  uint64_t v88 = type metadata accessor for GestureStateGesture();
  uint64_t v86 = *(void *)(v88 - 8);
  uint64_t v6 = *(void *)(v86 + 64);
  MEMORY[0x1F4188790](v88);
  v85 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v87 = (uint64_t)&v69 - v8;
  uint64_t v91 = v5;
  uint64_t v89 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v84 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v69 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = type metadata accessor for GesturePhase();
  uint64_t v93 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v92 = (uint64_t)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v69 - v20;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    long long v23 = v2[1];
    long long v94 = *v2;
    long long v95 = v23;
    uint64_t v96 = *((void *)v2 + 4);
    GestureStatePhase.phase.getter((uint64_t)v21);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v79 = v17;
        int v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v82 = v14;
        uint64_t v81 = v16;
        uint64_t v78 = v10;
        uint64_t v77 = v10 + 32;
        v76 = v25;
        v25(v14, v21, v16);
        AGGraphClearUpdate();
        long long v26 = v2[1];
        long long v97 = *v2;
        long long v98 = v26;
        uint64_t v99 = *((void *)v2 + 4);
        type metadata accessor for GestureStatePhase();
        uint64_t v27 = v87;
        GestureStatePhase.gesture.getter(v87);
        AGGraphSetUpdate();
        type metadata accessor for Binding();
        uint64_t v83 = swift_allocBox();
        uint64_t v80 = v28;
        uint64_t v29 = v88;
        type metadata accessor for State();
        State.projectedValue.getter();
        uint64_t v30 = v86;
        long long v31 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
        long long v32 = v85;
        uint64_t v71 = v86 + 16;
        v70 = v31;
        v31(v85, v27, v29);
        uint64_t v33 = *(unsigned __int8 *)(v30 + 80);
        uint64_t v34 = (v33 + 40) & ~v33;
        uint64_t v72 = v33;
        uint64_t v73 = v33 | 7;
        int v35 = (char *)swift_allocObject();
        uint64_t v36 = v90;
        *((void *)v35 + 2) = v89;
        *((void *)v35 + 3) = v36;
        *((void *)v35 + 4) = v91;
        long long v37 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
        uint64_t v75 = v30 + 32;
        v74 = v37;
        v37(&v35[v34], v32, v29);
        *(void *)&v35[(v6 + v34 + 7) & 0xFFFFFFFFFFFFFFF8] = v83;
        uint64_t v38 = *((void *)v2 + 3);
        swift_retain();
        uint64_t v39 = v89;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v38);
        *((void *)v2 + 3) = partial apply for closure #2 in GestureStatePhase.updateValue();
        *((void *)v2 + 4) = v35;
        uint64_t v40 = v90;
        uint64_t v41 = swift_allocBox();
        uint64_t v43 = v42;
        MEMORY[0x1F4188790](v41);
        *(&v69 - 4) = v39;
        *(&v69 - 3) = v40;
        uint64_t v44 = v80;
        *(&v69 - 2) = v91;
        *(&v69 - 1) = v44;
        static Update.dispatchImmediately<A>(_:)();
        swift_beginAccess();
        uint64_t v45 = v44;
        Transaction.tracksVelocity.setter();
        swift_endAccess();
        if (*((unsigned char *)v2 + 12) == 1)
        {
          uint64_t v46 = v72;
          type metadata accessor for GestureGraph();
          uint64_t v80 = MEMORY[0x18C10CFA0]();
          uint64_t v69 = v41;
          uint64_t v47 = v85;
          v70(v85, v87, v88);
          uint64_t v48 = v78;
          v49 = v84;
          (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v84, v82, v81);
          uint64_t v50 = (v46 + 56) & ~v46;
          unint64_t v51 = (v50 + v6 + *(unsigned __int8 *)(v48 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
          v52 = (void *)swift_allocObject();
          uint64_t v53 = v90;
          v52[2] = v39;
          v52[3] = v53;
          uint64_t v54 = v83;
          v52[4] = v91;
          v52[5] = v54;
          v55 = (char *)v52 + v50;
          v52[6] = v69;
          uint64_t v56 = v88;
          v74(v55, v47, v88);
          v57 = (char *)v52 + v51;
          uint64_t v58 = v81;
          v76(v57, v49, v81);
          swift_retain();
          swift_retain();
          GestureGraph.enqueueAction(_:)();
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v56);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v82, v58);
        }
        else
        {
          uint64_t v59 = v87;
          v60 = *(void (**)(char *, uint64_t, uint64_t))(v87 + *(int *)(v88 + 48));
          swift_beginAccess();
          swift_retain();
          v61 = v82;
          v60(v82, v43, v45);
          swift_endAccess();
          swift_release();
          v62 = (void *)swift_allocObject();
          uint64_t v63 = v90;
          v62[2] = v39;
          v62[3] = v63;
          uint64_t v64 = v83;
          v62[4] = v91;
          v62[5] = v64;
          v62[6] = v41;
          swift_retain();
          swift_retain();
          static Update.enqueueAction(_:)();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v59, v88);
          (*(void (**)(char *, uint64_t))(v78 + 8))(v61, v81);
        }
        swift_release();
        swift_release();
        uint64_t v17 = v79;
        goto LABEL_10;
      case 2u:
        (*(void (**)(char *, uint64_t))(v93 + 8))(v21, v17);
        goto LABEL_5;
      case 3u:
LABEL_5:
        GestureStatePhase.resetPhase()();
LABEL_10:
        uint64_t v24 = v93;
        break;
      default:
        uint64_t v24 = v93;
        (*(void (**)(char *, uint64_t))(v93 + 8))(v21, v17);
        break;
    }
    long long v65 = v2[1];
    long long v97 = *v2;
    long long v98 = v65;
    uint64_t v99 = *((void *)v2 + 4);
    uint64_t v66 = v92;
    uint64_t v67 = GestureStatePhase.phase.getter(v92);
    MEMORY[0x1F4188790](v67);
    *(&v69 - 2) = (uint64_t)a1;
    *(&v69 - 1) = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v66, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v69 - 4), v17, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v68);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v66, v17);
  }
  return result;
}

uint64_t closure #2 in GestureStatePhase.updateValue()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = swift_projectBox();
  uint64_t v7 = a1 + *(int *)(type metadata accessor for GestureStateGesture() + 44);
  uint64_t v8 = *(void (**)(char *))(v7 + *(int *)(type metadata accessor for GestureState() + 28));
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v8(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t closure #3 in GestureStatePhase.updateValue()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - v4;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  MEMORY[0x18C113DA0](v2);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t closure #4 in GestureStatePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v7 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  int v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Binding();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = swift_projectBox();
  uint64_t v15 = swift_projectBox();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v15, a6);
  uint64_t v16 = type metadata accessor for GestureStateGesture();
  (*(void (**)(uint64_t, char *, char *))(v18 + *(int *)(v16 + 48)))(v19, v9, v13);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t closure #5 in GestureStatePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v15[-v10];
  uint64_t v12 = swift_projectBox();
  uint64_t v13 = swift_projectBox();
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, a4);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, a4);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t GestureStatePhase.resetPhase()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    swift_retain();
    static Update.enqueueAction(_:)();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = 0;
  }
  return result;
}

uint64_t static GestureStatePhase.willRemove(attribute:)()
{
  return GestureStatePhase.resetPhase()();
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance GestureStatePhase<A, B>()
{
  return MEMORY[0x1F40FFCE8]();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance GestureStatePhase<A, B>()
{
  return GestureStatePhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance GestureStatePhase<A, B>(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance GestureStatePhase<A, B>()
{
  return static GestureStatePhase.willRemove(attribute:)();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance GestureStatePhase<A, B>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t partial apply for closure #1 in static GestureStateGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static GestureStateGesture._makeGesture(gesture:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for GestureStatePhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Gesture in GestureStateGesture<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t sub_1878F9E2C()
{
  return 24;
}

__n128 sub_1878F9E38(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for GestureState()
{
  uint64_t result = type metadata accessor for State();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GestureState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    unint64_t v11 = v7 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = (void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = v12[1];
    uint64_t v14 = (void *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v14 = *v12;
    v14[1] = v13;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for GestureState(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for GestureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  *(void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v8 = a1 + v7 + 7;
  uint64_t v9 = (uint64_t *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = (void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = v10;
  v12[1] = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GestureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  *(void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v8 = (void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for GestureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  *(void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *(_OWORD *)((a1 + (v6 & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((a2
                                                                                              + (v6 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 8
                                                                                              + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for GestureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  *(void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_OWORD *)((a1 + (v6 & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((a2
                                                                                              + (v6 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 8
                                                                                              + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureState(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE) {
    int v6 = 2147483646;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v8 < a2)
  {
    unint64_t v10 = ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v11 = a2 - v8;
    uint64_t v12 = v10 & 0xFFFFFFF8;
    if ((v10 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = v11 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v10);
        if (!v16) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v10);
        if (v16) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1878FA4F4);
      case 4:
        int v16 = *(_DWORD *)((char *)a1 + v10);
        if (!v16) {
          break;
        }
LABEL_25:
        int v18 = v16 - 1;
        if (v12)
        {
          int v18 = 0;
          LODWORD(v12) = *a1;
        }
        return v8 + (v12 | v18) + 1;
      default:
        break;
    }
  }
  if (v6 == v8)
  {
    if (v5 < 0x7FFFFFFE)
    {
      unint64_t v20 = *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v20 >= 0xFFFFFFFF) {
        LODWORD(v20) = -1;
      }
      if ((v20 + 1) >= 2) {
        return v20;
      }
      else {
        return 0;
      }
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v19 = *(void *)(((unint64_t)a1 + v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    return (v19 + 1);
  }
}

void storeEnumTagSinglePayload for GestureState(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    int v8 = 2147483646;
  }
  else {
    int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v9 >= a3)
  {
    int v16 = 0;
    int v17 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_20:
      switch(v16)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v8 == v9)
            {
              if (v7 < 0x7FFFFFFE)
              {
                uint64_t v22 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0x7FFFFFFE)
                {
                  *uint64_t v22 = 0;
                  *(_DWORD *)uint64_t v22 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  *uint64_t v22 = a2;
                }
              }
              else
              {
                unint64_t v20 = *(void (**)(void))(v6 + 56);
                v20();
              }
            }
            else
            {
              uint64_t v21 = (void *)((unint64_t)&a1[v11 + 15] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                *uint64_t v21 = a2 ^ 0x80000000;
                v21[1] = 0;
              }
              else
              {
                *uint64_t v21 = a2 - 1;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = a3 - v9;
    if (((v11 + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    int v17 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_20;
    }
  }
  if (((v11 + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v18 = v17;
  }
  else {
    int v18 = 1;
  }
  if (((v11 + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v19 = ~v9 + a2;
    bzero(a1, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v19;
  }
  switch(v16)
  {
    case 1:
      a1[v12] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v18;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1878FA744);
    case 4:
      *(_DWORD *)&a1[v12] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for GestureStateGesture()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for GestureState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GestureStateGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9 & 0xF8 | 7;
  uint64_t v11 = v6 + v10;
  uint64_t v12 = *(void *)(v8 + 64) + 7;
  unint64_t v13 = (((v12 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  int v14 = v9 | *(_DWORD *)(v5 + 80);
  if ((v14 & 0x1000F8) != 0 || ((v6 + v10) & ~v10) + v13 + 16 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v14 & 0xF8 | 7u) + 16) & ~(unint64_t)(v14 & 0xF8 | 7u)));
  }
  else
  {
    uint64_t v17 = ~v10;
    unint64_t v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v19 = ((unint64_t)v4 + v11) & v17;
    unint64_t v20 = ((unint64_t)a2 + v11) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v19, v20, v7);
    *(void *)((v12 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v12 + v20) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(v19 + v18);
    uint64_t v22 = *(void *)(v20 + v18 + 8);
    *uint64_t v21 = *(void *)(v20 + v18);
    v21[1] = v22;
    long long v23 = (void *)(v13 + v19);
    uint64_t v24 = *(void *)(v13 + v20);
    uint64_t v25 = *(void *)(v13 + v20 + 8);
    *long long v23 = v24;
    v23[1] = v25;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for GestureStateGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  (*(void (**)(uint64_t))(v5 + 8))((*(void *)(v4 + 56) + a1 + v6) & ~v6);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = *(void *)(v6 + 48);
  uint64_t v9 = v7 + 16;
  uint64_t v10 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  *(void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v14 &= 0xFFFFFFFFFFFFFFF8;
  int v15 = (void *)(v14 + 8 + v12);
  uint64_t v16 = (void *)(v14 + 8 + v13);
  uint64_t v17 = v16[1];
  *int v15 = *v16;
  v15[1] = v17;
  unint64_t v18 = ((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v19 = (void *)(v18 + v12);
  unint64_t v20 = (void *)(v18 + v13);
  uint64_t v21 = v20[1];
  *unint64_t v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v9 = v7 + 24;
  uint64_t v10 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  *(void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v14 &= 0xFFFFFFFFFFFFFFF8;
  int v15 = (void *)(v14 + 8 + v12);
  uint64_t v16 = (void *)(v14 + 8 + v13);
  uint64_t v17 = v16[1];
  *int v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  unint64_t v18 = ((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v19 = (void *)(v18 + v12);
  unint64_t v20 = (void *)(v18 + v13);
  uint64_t v21 = v20[1];
  *unint64_t v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v9 = v7 + 32;
  uint64_t v10 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32) + 7;
  *(void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v14 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v14 + 8 + v12) = *(_OWORD *)(v14 + 8 + v13);
  *(_OWORD *)(((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 16 + v12) = *(_OWORD *)(((v14 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 16
                                                                          + v13);
  return a1;
}

uint64_t assignWithTake for GestureStateGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = v7 + 40;
  uint64_t v10 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24) + 7;
  *(void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v14 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v14 + 8 + v12) = *(_OWORD *)(v14 + 8 + v13);
  swift_release();
  *(_OWORD *)(((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 16 + v12) = *(_OWORD *)(((v14 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 16
                                                                          + v13);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureStateGesture(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFE) {
    int v10 = 2147483646;
  }
  else {
    int v10 = *(_DWORD *)(v8 + 84);
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v14 = *(void *)(*(void *)(v5 - 8) + 64) + v13;
  uint64_t v15 = *(void *)(v8 + 64) + 7;
  unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (v12 < a2)
  {
    unint64_t v17 = ((v16 + 15) & 0xFFFFFFFFFFFFFFF8) + (v14 & ~v13) + 32;
    if ((v17 & 0xFFFFFFF8) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = a2 - v12 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v17);
        if (!*((unsigned char *)a1 + v17)) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v17);
        if (*(_WORD *)((char *)a1 + v17)) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1878FB1E8);
      case 4:
        int v21 = *(_DWORD *)((char *)a1 + v17);
        if (!v21) {
          break;
        }
LABEL_28:
        int v23 = v21 - 1;
        if ((v17 & 0xFFFFFFF8) != 0)
        {
          int v23 = 0;
          int v24 = *a1;
        }
        else
        {
          int v24 = 0;
        }
        return v12 + (v24 | v23) + 1;
      default:
        break;
    }
  }
  if (v7 >= v11)
  {
    uint64_t v27 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
    return v27(a1, v7, v5);
  }
  else
  {
    unint64_t v25 = ((unint64_t)a1 + v14) & ~v13;
    if (v10 == v11)
    {
      if (v9 < 0x7FFFFFFE)
      {
        unint64_t v29 = *(void *)((v15 + v25) & 0xFFFFFFFFFFFFFFF8);
        if (v29 >= 0xFFFFFFFF) {
          LODWORD(v29) = -1;
        }
        if ((v29 + 1) >= 2) {
          return v29;
        }
        else {
          return 0;
        }
      }
      else
      {
        long long v26 = *(uint64_t (**)(unint64_t))(v8 + 48);
        return v26(v25);
      }
    }
    else
    {
      unint64_t v28 = *(void *)(v16 + 8 + v25);
      if (v28 >= 0xFFFFFFFF) {
        LODWORD(v28) = -1;
      }
      return (v28 + 1);
    }
  }
}

void storeEnumTagSinglePayload for GestureStateGesture(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  if (v9 <= 0x7FFFFFFE) {
    int v11 = 2147483646;
  }
  else {
    int v11 = *(_DWORD *)(v8 + 84);
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v15 = v10 + v14;
  uint64_t v16 = *(void *)(v8 + 64) + 7;
  size_t v17 = ((v10 + v14) & ~v14) + (((v16 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 + 16;
  if (v13 >= a3)
  {
    int v21 = 0;
    int v22 = a2 - v13;
    if (a2 <= v13)
    {
LABEL_23:
      unint64_t v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      switch(v21)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_39;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_39;
        case 3:
          goto LABEL_62;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_38;
        default:
LABEL_38:
          if (a2)
          {
LABEL_39:
            if (v7 >= v12)
            {
              unint64_t v28 = *(void (**)(unsigned char *))(v6 + 56);
              v28(a1);
            }
            else
            {
              long long v26 = (_DWORD *)((unint64_t)&a1[v15] & ~v14);
              if (v12 >= a2)
              {
                if (v11 == v12)
                {
                  if (v9 < 0x7FFFFFFE)
                  {
                    long long v31 = (void *)(((unint64_t)v26 + v16) & 0xFFFFFFFFFFFFFFF8);
                    if (a2 > 0x7FFFFFFE)
                    {
                      *long long v31 = 0;
                      *(_DWORD *)long long v31 = a2 - 0x7FFFFFFF;
                    }
                    else
                    {
                      *long long v31 = a2;
                    }
                  }
                  else
                  {
                    unint64_t v29 = *(void (**)(unint64_t))(v8 + 56);
                    unint64_t v30 = (unint64_t)&a1[v15] & ~v14;
                    v29(v30);
                  }
                }
                else if ((a2 & 0x80000000) != 0)
                {
                  long long v32 = (void *)((char *)v26 + v23);
                  *long long v32 = a2 ^ 0x80000000;
                  v32[1] = 0;
                }
                else
                {
                  *(void *)((char *)v26 + v23) = a2 - 1;
                }
              }
              else if ((((v16 & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
              {
                unsigned int v27 = ~v12 + a2;
                bzero(v26, (((v16 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
                *long long v26 = v27;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v18 = a3 - v13;
    if (v17 <= 3) {
      unsigned int v19 = v18 + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    int v22 = a2 - v13;
    if (a2 <= v13) {
      goto LABEL_23;
    }
  }
  if (v17 > 3) {
    int v24 = 1;
  }
  else {
    int v24 = v22;
  }
  if ((((int)v10 + (int)v14) & ~v14) + (((v16 & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 16 != -16)
  {
    if (v17 <= 3) {
      unsigned int v25 = 0;
    }
    else {
      unsigned int v25 = ~v13 + a2;
    }
    bzero(a1, v17);
    *(_DWORD *)a1 = v25;
  }
  switch(v21)
  {
    case 1:
      a1[v17] = v24;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v24;
      break;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x1878FB51CLL);
    case 4:
      *(_DWORD *)&a1[v17] = v24;
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for GestureStatePhase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t assignWithCopy for GestureStatePhase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *uint64_t v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GestureStatePhase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v7;
      return a1;
    }
LABEL_7:
    *uint64_t v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v6;
  swift_release();
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in GestureStatePhase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for StatefulRule in GestureStatePhase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t sub_1878FB72C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = (int *)(type metadata accessor for GestureStateGesture() - 8);
  uint64_t v4 = v0
     + ((*(unsigned __int8 *)(*(void *)v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v4, v2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + v3[13], v1);
  type metadata accessor for State();
  swift_release();
  type metadata accessor for GestureState();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in GestureStatePhase.updateValue()()
{
  uint64_t v1 = *(void *)(type metadata accessor for GestureStateGesture() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #2 in GestureStatePhase.updateValue()(v2);
}

uint64_t partial apply for closure #3 in GestureStatePhase.updateValue()()
{
  return closure #3 in GestureStatePhase.updateValue()(*(void *)(v0 + 40));
}

uint64_t sub_1878FB978()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in GestureStatePhase.updateValue()()
{
  return closure #5 in GestureStatePhase.updateValue()(v0[5], v0[6], v0[2], v0[3]);
}

uint64_t sub_1878FB9C8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = (int *)(type metadata accessor for GestureStateGesture() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v5 = *(void *)(*(void *)v3 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v8 = (v4 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  swift_release();
  swift_release();
  uint64_t v9 = v0 + v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v9, v2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v9 + v3[13], v1);
  type metadata accessor for State();
  swift_release();
  type metadata accessor for GestureState();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in GestureStatePhase.updateValue()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(void *)(type metadata accessor for GestureStateGesture() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v9 = (uint64_t)v0 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return closure #4 in GestureStatePhase.updateValue()(v7, v8, (uint64_t)v0 + v4, v9, v1, v2);
}

uint64_t sub_1878FBCF8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t assignWithTake for PhoneUnbridgedNavigationStackCore(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneUnbridgedNavigationStackCore(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 53)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneUnbridgedNavigationStackCore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 53) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 53) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneUnbridgedNavigationStackCore()
{
  return &type metadata for PhoneUnbridgedNavigationStackCore;
}

uint64_t associated type witness table accessor for View.Body : View in PhoneUnbridgedNavigationStackCore()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in PhoneUnbridgedNavigationStackCore.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _NavigationStackStyleConfiguration.Item(a1, a2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PhoneUnbridgedNavigationStackCore()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

__n128 protocol witness for View.body.getter in conformance PhoneUnbridgedNavigationStackCore@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  type metadata accessor for [_NavigationStackStyleConfiguration.Item]();
  lazy protocol witness table accessor for type [_NavigationStackStyleConfiguration.Item] and conformance [A](&lazy protocol witness table cache variable for type [_NavigationStackStyleConfiguration.Item] and conformance [A], (void (*)(uint64_t))type metadata accessor for [_NavigationStackStyleConfiguration.Item]);
  lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item();
  swift_bridgeObjectRetain();
  ForEach<>.init(_:content:)();
  uint64_t v7 = static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v8 = *(void *)(v3 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  __n128 result = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(__n128 *)(a1 + 32) = v11;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  return result;
}

void type metadata accessor for [_NavigationStackStyleConfiguration.Item]()
{
  if (!lazy cache variable for type metadata for [_NavigationStackStyleConfiguration.Item])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [_NavigationStackStyleConfiguration.Item]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item and conformance _NavigationStackStyleConfiguration.Item);
  }
  return result;
}

uint64_t outlined init with copy of _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>()
{
  if (!lazy cache variable for type metadata for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>)
  {
    type metadata accessor for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>();
    lazy protocol witness table accessor for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>();
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>);
    }
  }
}

void type metadata accessor for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>()
{
  if (!lazy cache variable for type metadata for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>)
  {
    type metadata accessor for [_NavigationStackStyleConfiguration.Item]();
    lazy protocol witness table accessor for type [_NavigationStackStyleConfiguration.Item] and conformance [A](&lazy protocol witness table cache variable for type [_NavigationStackStyleConfiguration.Item] and conformance [A], (void (*)(uint64_t))type metadata accessor for [_NavigationStackStyleConfiguration.Item]);
    lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.ID and conformance _NavigationStackStyleConfiguration.Item.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void type metadata accessor for _AnimationModifier<Int>()
{
  if (!lazy cache variable for type metadata for _AnimationModifier<Int>)
  {
    unint64_t v0 = type metadata accessor for _AnimationModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnimationModifier<Int>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type [_NavigationStackStyleConfiguration.Item] and conformance [A](unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>>();
    lazy protocol witness table accessor for type [_NavigationStackStyleConfiguration.Item] and conformance [A](&lazy protocol witness table cache variable for type ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>);
    lazy protocol witness table accessor for type [_NavigationStackStyleConfiguration.Item] and conformance [A](&lazy protocol witness table cache variable for type _AnimationModifier<Int> and conformance _AnimationModifier<A>, (void (*)(uint64_t))type metadata accessor for _AnimationModifier<Int>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>>)
  {
    type metadata accessor for ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>();
    type metadata accessor for _AnimationModifier<Int>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ZStack<ForEach<[_NavigationStackStyleConfiguration.Item], _NavigationStackStyleConfiguration.Item.ID, _NavigationStackStyleConfiguration.Item>>, _AnimationModifier<Int>>);
    }
  }
}

uint64_t Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, long long *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v63 = a7;
  uint64_t v70 = a6;
  uint64_t v71 = a5;
  uint64_t v67 = a4;
  uint64_t v69 = a3;
  uint64_t v72 = a2;
  uint64_t v73 = a1;
  v74 = a12;
  uint64_t v64 = a11;
  uint64_t v68 = a10;
  long long v62 = *a8;
  uint64_t v61 = *((void *)a8 + 2);
  uint64_t v60 = *((void *)a8 + 3);
  v82 = a12;
  uint64_t v83 = a13;
  uint64_t v84 = a15;
  uint64_t v85 = a16;
  unsigned int v18 = (int *)type metadata accessor for Slider();
  uint64_t v59 = v18[19];
  *(unsigned char *)(a9 + v59) = 0;
  uint64_t v19 = a9 + v18[21];
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  uint64_t v20 = type metadata accessor for Binding();
  type metadata accessor for Clamping();
  swift_getWitnessTable();
  uint64_t v66 = v20;
  Binding.projecting<A>(_:)();
  uint64_t v21 = v83;
  uint64_t v22 = v84;
  *(void *)a9 = v82;
  *(void *)(a9 + 8) = v21;
  *(void *)(a9 + 16) = v22;
  uint64_t v23 = (uint64_t)v74;
  *(void *)(a9 + 48) = closure #1 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(v72, (uint64_t)v74, a13, a14);
  uint64_t v76 = v23;
  uint64_t v77 = a13;
  uint64_t v78 = a14;
  uint64_t v79 = a15;
  uint64_t v55 = a15;
  uint64_t v56 = a16;
  uint64_t v80 = a16;
  uint64_t v81 = a17;
  uint64_t v58 = a17;
  uint64_t v57 = a14;
  uint64_t v65 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:), (uint64_t)v75, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB3D0], v24, (uint64_t)&v82);
  uint64_t v54 = 0;
  double v25 = *(double *)&v82;
  if ((_BYTE)v83) {
    double v25 = 0.1;
  }
  *(double *)(a9 + 40) = v25;
  uint64_t v26 = v67;
  *(void *)(a9 + 24) = v69;
  *(void *)(a9 + 32) = v26;
  uint64_t v27 = *(void *)(a13 - 8);
  unint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v28(a9 + v18[17], v71, a13);
  uint64_t v29 = a9 + v18[18];
  uint64_t v69 = a13;
  v28(v29, v70, a13);
  *(unsigned char *)(a9 + v59) = v63;
  unint64_t v30 = *(void **)v19;
  long long v31 = *(void **)(v19 + 8);
  uint64_t v33 = *(void **)(v19 + 16);
  long long v32 = *(void **)(v19 + 24);
  swift_retain();
  uint64_t v34 = v30;
  uint64_t v35 = (uint64_t)v74;
  uint64_t v36 = v31;
  uint64_t v37 = v68;
  outlined consume of AccessibilitySliderValue?(v34, v36, v33, v32);
  *(_OWORD *)uint64_t v19 = v62;
  uint64_t v38 = v60;
  *(void *)(v19 + 16) = v61;
  *(void *)(v19 + 24) = v38;
  uint64_t v39 = *(void *)(v35 - 8);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(a9 + v18[20], v37, v35);
  if (!v64)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v35);
    v52 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v52(v70, v69);
    v52(v71, v69);
    (*(void (**)(uint64_t))(*(void *)(v65 - 8) + 8))(v72);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v66 - 8) + 8))(v73);
    uint64_t v48 = 0;
    goto LABEL_7;
  }
  v82 = v64;
  MEMORY[0x1F4188790](v40);
  v53[2] = v35;
  v53[3] = v69;
  v53[4] = v57;
  v53[5] = v55;
  v53[6] = v56;
  v53[7] = v58;
  type metadata accessor for SliderMark();
  uint64_t v41 = type metadata accessor for Array();
  type metadata accessor for SliderMark<Double>(0, (unint64_t *)&lazy cache variable for type metadata for SliderMark<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderMark);
  uint64_t v43 = v42;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v45 = v54;
  uint64_t v47 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:), (uint64_t)v53, v41, v43, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v46);
  swift_bridgeObjectRelease();
  v82 = v47;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v82);
  if (!v45)
  {
    swift_bridgeObjectRelease();
    uint64_t v48 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v82, (uint64_t (*)(uint64_t *, void *))closure #4 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:), 0);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, void *))(v39 + 8))(v68, v74);
    v49 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    uint64_t v50 = v69;
    v49(v70, v69);
    v49(v71, v50);
    (*(void (**)(uint64_t))(*(void *)(v65 - 8) + 8))(v72);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v66 - 8) + 8))(v73);
LABEL_7:
    *(void *)(a9 + 56) = v48;
    return result;
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t closure #1 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v20 - v8;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  size_t v17 = (char *)v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v9, a4);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v17, a4);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  double v19 = round(1.0 / v20[1]);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, a4);
  if ((~*(void *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)v19 + 1;
  if (__OFADD__((uint64_t)v19, 1)) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t closure #2 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  lazy protocol witness table accessor for type Double and conformance Double();
  return BinaryFloatingPoint.init<A>(_:)();
}

uint64_t closure #3 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X6>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SliderMark();
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return SliderMark<>.init<A>(_:)((uint64_t)v11, a2, a3, a4);
}

BOOL closure #4 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 32);
  double v3 = *(double *)(a2 + 32);
  if (v2 == v3)
  {
    static os_log_type_t.fault.getter();
    uint64_t v4 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = MEMORY[0x1E4FBB3D0];
    *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
    uint64_t v7 = MEMORY[0x1E4FBB460];
    *(void *)(v5 + 56) = v6;
    *(void *)(v5 + 64) = v7;
    *(double *)(v5 + 32) = v2;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
  }
  return v2 == v3;
}

uint64_t Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(void, void))
{
  int v99 = a8;
  uint64_t v119 = a7;
  uint64_t v120 = a6;
  uint64_t v102 = a5;
  uint64_t v101 = a4;
  uint64_t v121 = a3;
  uint64_t v105 = a2;
  uint64_t v122 = a1;
  uint64_t v100 = a9;
  v126 = a18;
  uint64_t v103 = a17;
  uint64_t v125 = a16;
  uint64_t v117 = a15;
  uint64_t v123 = a13;
  uint64_t v92 = a12;
  uint64_t v95 = *(a12 - 1);
  uint64_t v98 = a11;
  uint64_t v118 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v116 = (uint64_t)v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = *(void *)(v20 + 24);
  uint64_t v127 = type metadata accessor for ClosedRange();
  uint64_t v22 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v93 = (char *)v85 - v23;
  uint64_t v115 = *(void *)(a13 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v112 = (uint64_t)v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v111 = (uint64_t)v85 - v27;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v114 = type metadata accessor for Binding();
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  uint64_t v107 = (uint64_t)v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  v110 = (char *)v85 - v30;
  uint64_t v109 = type metadata accessor for Optional();
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v106 = (uint64_t)v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  v104 = (char *)v85 - v33;
  uint64_t v34 = *(void *)(a14 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (char *)v85 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = (char *)v85 - v39;
  uint64_t v97 = *(void *)(v20 + 8);
  *(void *)&long long v139 = a14;
  *((void *)&v139 + 1) = v97;
  *(void *)&long long v140 = v21;
  *((void *)&v140 + 1) = a18;
  uint64_t v90 = v21;
  uint64_t v41 = type metadata accessor for Normalizing();
  uint64_t v96 = *(void *)(v41 - 8);
  double v42 = MEMORY[0x1F4188790](v41);
  uint64_t v44 = (char *)v85 - v43;
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, double))(v34 + 16);
  uint64_t v87 = v40;
  uint64_t v46 = v105;
  v45(v40, v105, a14, v42);
  ((void (*)(char *, uint64_t, uint64_t))v45)(v37, v46 + *(int *)(v127 + 36), a14);
  uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 16);
  uint64_t v89 = v108 + 16;
  uint64_t v47 = v104;
  uint64_t v48 = v121;
  uint64_t v49 = v109;
  v88(v104, v121, v109);
  uint64_t v50 = v47;
  unint64_t v51 = v126;
  Normalizing.init(min:max:stride:)((uint64_t)v40, (uint64_t)v37, v50, a14, v97, v21, v126, (uint64_t)v44);
  uint64_t v86 = a14;
  uint64_t v52 = type metadata accessor for Binding();
  swift_getWitnessTable();
  uint64_t v53 = v110;
  uint64_t v97 = v41;
  Binding.projecting<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v107, v53, v114);
  uint64_t v54 = v92;
  uint64_t v55 = v123;
  v129 = v92;
  uint64_t v130 = v123;
  uint64_t v131 = a14;
  uint64_t v132 = v117;
  uint64_t v133 = v125;
  uint64_t v134 = v103;
  v135 = v51;
  v136 = v44;
  long long v94 = v44;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:), (uint64_t)v128, MEMORY[0x1E4FBC248], AssociatedTypeWitness, v56, v106);
  v85[1] = 0;
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16);
  v57(v111, v120, v55);
  v57(v112, v119, v55);
  uint64_t v91 = v52;
  MEMORY[0x18C113DA0](v52);
  uint64_t v58 = *(void *)(v127 - 8);
  uint64_t v59 = v93;
  uint64_t v60 = v105;
  uint64_t v61 = v127;
  (*(void (**)(char *))(v58 + 16))(v93);
  uint64_t v62 = v95;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v61);
  v88(v104, v48, v49);
  int v63 = v54;
  uint64_t v64 = v86;
  AccessibilityBoundedNumber.init<A>(for:in:by:)();
  v138[0] = v139;
  v138[1] = v140;
  uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v62 + 16))(v116, v118, v63);
  if (v98)
  {
    v104 = (char *)v85;
    uint64_t v137 = v98;
    MEMORY[0x1F4188790](v65);
    uint64_t v77 = v63;
    uint64_t v78 = v123;
    uint64_t v66 = v117;
    uint64_t v79 = v64;
    uint64_t v80 = v117;
    uint64_t v81 = v125;
    uint64_t v82 = v103;
    uint64_t v83 = v126;
    uint64_t v84 = v60;
    uint64_t v67 = v60;
    type metadata accessor for SliderMark();
    uint64_t v68 = type metadata accessor for Array();
    uint64_t v69 = type metadata accessor for SliderMark();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v72 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:), (uint64_t)&v85[-10], v68, v69, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v71);
    swift_bridgeObjectRelease();
    uint64_t v73 = v123;
    uint64_t v74 = v66;
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v67 = v60;
    uint64_t v73 = v123;
    uint64_t v74 = v117;
  }
  Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(v107, v106, v101, v102, v111, v112, v99 & 1, v138, v100, v116, v72, v63, v73, AssociatedTypeWitness, v74, v125, (uint64_t)v126);
  (*(void (**)(uint64_t, void *))(v62 + 8))(v118, v63);
  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
  v75(v119, v73);
  v75(v120, v73);
  (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v121, v109);
  (*(void (**)(uint64_t))(*(void *)(v91 - 8) + 8))(v122);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v110, v114);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v67, v127);
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v94, v97);
}

uint64_t Normalizing.init(min:max:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void, void)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v75 = a7;
  uint64_t v80 = a5;
  uint64_t v81 = a3;
  uint64_t v83 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v66 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v69 = *(void *)(v66 + 16);
  uint64_t v68 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v68);
  uint64_t v67 = (char *)v60 - v13;
  uint64_t v65 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v64 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  int v63 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v79 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  size_t v17 = (char *)v60 - v16;
  uint64_t v82 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v62 = (char *)v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v73 = (char *)v60 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v72 = (char *)v60 - v23;
  v25.n128_f64[0] = MEMORY[0x1F4188790](v24);
  uint64_t v71 = (char *)v60 - v26;
  uint64_t v27 = *(void *)(a4 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v27 + 16);
  uint64_t v78 = a1;
  v28(a8, a1, a4, v25);
  uint64_t v84 = a4;
  uint64_t v85 = v80;
  uint64_t v77 = a6;
  uint64_t v86 = a6;
  uint64_t v29 = v15;
  uint64_t v87 = v75;
  uint64_t v30 = type metadata accessor for Normalizing();
  uint64_t v31 = a8 + *(int *)(v30 + 52);
  uint64_t v80 = a4;
  ((void (*)(uint64_t, uint64_t, uint64_t))v28)(v31, v83, a4);
  uint64_t v76 = v30;
  uint64_t v32 = *(int *)(v30 + 56);
  uint64_t v74 = a8;
  uint64_t v33 = a8 + v32;
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16);
  uint64_t v35 = v81;
  v34(v33, (uint64_t)v81, v29);
  uint64_t v70 = v29;
  v34((uint64_t)v17, (uint64_t)v35, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v36 = *(void (**)(char *, uint64_t))(v79 + 8);
    uint64_t v37 = v70;
    v36(v17, v70);
    uint64_t v38 = v72;
    uint64_t v39 = v83;
    uint64_t v40 = v78;
    uint64_t v41 = v80;
    dispatch thunk of Strideable.distance(to:)();
    v36(v81, v37);
    double v42 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v42(v39, v41);
    v42(v40, v41);
    uint64_t v43 = v76;
    uint64_t v44 = v74;
    uint64_t v45 = v82;
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v74 + *(int *)(v76 + 64), v38, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v44 + *(int *)(v43 + 60), 1, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v61 = v27;
    uint64_t v47 = v82;
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
    v60[1] = v82 + 32;
    v60[0] = v48;
    v48(v71, v17, AssociatedTypeWitness);
    uint64_t v49 = v62;
    dispatch thunk of Strideable.distance(to:)();
    uint64_t v50 = v72;
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    uint64_t v75 = *(void (**)(void, void))(v47 + 8);
    v75(v49, AssociatedTypeWitness);
    uint64_t v51 = v64;
    uint64_t v52 = v63;
    uint64_t v53 = v65;
    (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, *MEMORY[0x1E4FBBEB0], v65);
    dispatch thunk of FloatingPoint.rounded(_:)();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
    uint64_t v54 = (void (*)(char *, uint64_t))v75;
    v75(v50, AssociatedTypeWitness);
    uint64_t v55 = v74;
    dispatch thunk of static Numeric.* infix(_:_:)();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    swift_getAssociatedConformanceWitness();
    char v56 = dispatch thunk of static Comparable.> infix(_:_:)();
    v54(v50, AssociatedTypeWitness);
    if (v56)
    {
      (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v70);
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      uint64_t v58 = v80;
      v57(v83, v80);
      v57(v78, v58);
      v54(v71, AssociatedTypeWitness);
      uint64_t v59 = v55 + *(int *)(v76 + 60);
      ((void (*)(uint64_t, char *, uint64_t))v60[0])(v59, v73, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v59, 0, 1, AssociatedTypeWitness);
    }
    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)()
{
  return dispatch thunk of static FloatingPoint./ infix(_:_:)();
}

double Slider.init<>(_:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  char v10 = *((unsigned char *)a1 + 64);
  outlined consume of AccessibilitySliderValue?((void *)a1[9], (void *)a1[10], (void *)a1[11], (void *)a1[12]);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v9;
  *(_WORD *)(a2 + 64) = 1;
  *(unsigned char *)(a2 + 66) = v10;
  double result = 0.0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  return result;
}

uint64_t Slider.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v102 = a2;
  type metadata accessor for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>();
  uint64_t v95 = v3;
  uint64_t v115 = *(void *)(a1 + 16);
  type metadata accessor for ModifiedContent();
  uint64_t v114 = *(void *)(a1 + 32);
  type metadata accessor for AccessibilityLabelModifier.ChildModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  unint64_t v96 = lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label();
  uint64_t v147 = v114;
  v148 = &protocol witness table for CaptureViewRespondersModifier;
  uint64_t v5 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  v146 = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  uint64_t v143 = swift_getWitnessTable();
  v144 = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v97 = v4;
  uint64_t v93 = swift_getWitnessTable();
  v128 = &type metadata for SliderStyleConfiguration.Label;
  uint64_t v129 = v4;
  unint64_t v130 = v96;
  uint64_t v131 = v93;
  type metadata accessor for StaticSourceWriter();
  uint64_t v88 = type metadata accessor for ModifiedContent();
  uint64_t v101 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  uint64_t v112 = *(void *)(a1 + 24);
  uint64_t v113 = (char *)&v83 - v6;
  type metadata accessor for ModifiedContent();
  uint64_t v111 = *(void *)(a1 + 40);
  uint64_t v7 = v111;
  type metadata accessor for AccessibilityLabelModifier.ChildModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  unint64_t v9 = lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel();
  unint64_t v91 = v9;
  uint64_t v141 = v7;
  v142 = &protocol witness table for CaptureViewRespondersModifier;
  uint64_t v139 = swift_getWitnessTable();
  long long v140 = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  uint64_t v90 = v5;
  uint64_t v137 = swift_getWitnessTable();
  v138 = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v10 = swift_getWitnessTable();
  v128 = &type metadata for SliderStyleConfiguration.MinimumValueLabel;
  uint64_t v129 = v8;
  uint64_t v86 = v8;
  unint64_t v130 = v9;
  uint64_t v131 = v10;
  uint64_t v11 = v10;
  uint64_t v109 = v10;
  type metadata accessor for StaticSourceWriter();
  uint64_t v89 = type metadata accessor for ModifiedContent();
  uint64_t v100 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  v110 = (char *)&v83 - v12;
  unint64_t v92 = lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel();
  v128 = &type metadata for SliderStyleConfiguration.MaximumValueLabel;
  uint64_t v129 = v8;
  unint64_t v130 = v92;
  uint64_t v131 = v11;
  type metadata accessor for StaticSourceWriter();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v98 = v13;
  uint64_t v99 = v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v87 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  long long v94 = (char *)&v83 - v17;
  uint64_t v18 = *v120;
  uint64_t v19 = v120[1];
  uint64_t v20 = v120[2];
  uint64_t v22 = v120[3];
  uint64_t v21 = v120[4];
  uint64_t v23 = v120[5];
  unsigned __int8 v24 = *((unsigned char *)v120 + *(int *)(a1 + 76));
  LODWORD(v105) = v24;
  __n128 v25 = (void *(*)())v120[6];
  uint64_t v26 = v120[7];
  uint64_t v27 = (char *)v120 + *(int *)(a1 + 84);
  uint64_t v28 = *(void **)v27;
  uint64_t v29 = (void *)*((void *)v27 + 1);
  uint64_t v30 = (void *)*((void *)v27 + 2);
  uint64_t v31 = (void *)*((void *)v27 + 3);
  BOOL v32 = *(void *)v27 == 0;
  if (*(void *)v27) {
    uint64_t v33 = (uint64_t *)*((void *)v27 + 1);
  }
  else {
    uint64_t v33 = 0;
  }
  if (*(void *)v27) {
    uint64_t v34 = (void *)*((void *)v27 + 2);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v122 = v29;
  uint64_t v123 = v30;
  uint64_t v107 = v34;
  uint64_t v108 = v33;
  if (v32) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v31;
  }
  uint64_t v118 = v31;
  uint64_t v116 = v35;
  uint64_t v149 = v18;
  uint64_t v150 = v19;
  uint64_t v151 = v20;
  uint64_t v152 = v22;
  uint64_t v153 = v21;
  uint64_t v154 = v23;
  v155 = v25;
  uint64_t v36 = v25;
  uint64_t v156 = v26;
  unsigned __int8 v157 = v24;
  v158 = v28;
  uint64_t v106 = v28;
  v159 = v29;
  v160 = v30;
  v161 = v31;
  uint64_t v37 = swift_allocObject();
  uint64_t v103 = v37;
  v104 = v36;
  *(void *)(v37 + 16) = v18;
  *(void *)(v37 + 24) = v19;
  uint64_t v124 = v18;
  uint64_t v119 = v19;
  *(void *)(v37 + 32) = v20;
  uint64_t v84 = v22;
  *(void *)(v37 + 40) = v22;
  *(void *)(v37 + 48) = v21;
  uint64_t v38 = v21;
  uint64_t v121 = v21;
  *(void *)(v37 + 56) = v23;
  *(void *)(v37 + 64) = v36;
  *(void *)(v37 + 72) = v26;
  uint64_t v39 = v36;
  LOBYTE(v36) = (_BYTE)v105;
  *(unsigned char *)(v37 + 80) = (_BYTE)v105;
  *(void *)(v37 + 88) = v28;
  *(void *)(v37 + 96) = v29;
  uint64_t v40 = v123;
  uint64_t v41 = v118;
  *(void *)(v37 + 104) = v123;
  *(void *)(v37 + 112) = v41;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v18;
  *(void *)(v42 + 24) = v19;
  *(void *)(v42 + 32) = v20;
  *(void *)(v42 + 40) = v22;
  *(void *)(v42 + 48) = v38;
  *(void *)(v42 + 56) = v23;
  *(void *)(v42 + 64) = v39;
  *(void *)(v42 + 72) = v26;
  *(unsigned char *)(v42 + 80) = (_BYTE)v36;
  uint64_t v43 = v106;
  uint64_t v44 = v122;
  *(void *)(v42 + 88) = v106;
  *(void *)(v42 + 96) = v44;
  *(void *)(v42 + 104) = v40;
  *(void *)(v42 + 112) = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v42;
  uint64_t v85 = v42;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v43;
  *(void *)(v47 + 24) = v44;
  uint64_t v48 = v44;
  *(void *)(v47 + 32) = v40;
  *(void *)(v47 + 40) = v45;
  uint64_t v49 = v119;
  *(void *)(v47 + 48) = v124;
  *(void *)(v47 + 56) = v49;
  *(void *)(v47 + 64) = v20;
  uint64_t v50 = v84;
  uint64_t v51 = v121;
  *(void *)(v47 + 72) = v84;
  *(void *)(v47 + 80) = v51;
  *(void *)(v47 + 88) = v23;
  *(void *)(v47 + 96) = v104;
  *(void *)(v47 + 104) = v26;
  *(unsigned char *)(v47 + 112) = (_BYTE)v105;
  *(void *)(v47 + 120) = v43;
  *(void *)(v47 + 128) = v48;
  *(void *)(v47 + 136) = v40;
  *(void *)(v47 + 144) = v45;
  v162 = v43;
  v163 = v108;
  v164 = v107;
  v165 = v116;
  char v166 = 1;
  v104 = partial apply for closure #2 in AccessibilitySliderModifier.init(_:value:);
  v167 = partial apply for closure #2 in AccessibilitySliderModifier.init(_:value:);
  uint64_t v168 = v103;
  uint64_t v105 = partial apply for closure #3 in AccessibilitySliderModifier.init(_:value:);
  v169 = partial apply for closure #3 in AccessibilitySliderModifier.init(_:value:);
  uint64_t v170 = v46;
  v171 = partial apply for closure #4 in AccessibilitySliderModifier.init(_:value:);
  uint64_t v172 = v47;
  uint64_t v173 = v50;
  uint64_t v174 = v51;
  swift_retain();
  swift_retain();
  uint64_t v117 = v26;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v52 = v122;
  uint64_t v53 = v123;
  outlined copy of AccessibilitySliderValue?(v43, v122, v123, v45);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v54 = v52;
  outlined copy of AccessibilitySliderValue?(v43, v52, v53, v45);
  uint64_t v55 = v43;
  outlined copy of AccessibilitySliderValue?(v43, v54, v53, v45);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v43, v54, v53, v45);
  outlined copy of AccessibilitySliderValue?(v43, v54, v53, v45);
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v43, v54, v53, v45);
  outlined copy of AccessibilitySliderValue?(v43, v54, v53, v45);
  swift_retain();
  swift_bridgeObjectRetain();
  char v56 = v107;
  uint64_t v57 = v108;
  uint64_t v58 = v116;
  outlined copy of AccessibilitySliderValue?(v43, v108, v107, v116);
  outlined copy of AppIntentExecutor?((uint64_t)v104);
  outlined copy of AppIntentExecutor?((uint64_t)v105);
  swift_retain();
  swift_retain();
  specialized AccessibilityAdjustableModifier.body(content:)((uint64_t)&v128);
  uint64_t v59 = v57;
  outlined consume of AccessibilitySliderValue?(v55, v57, v56, v58);
  uint64_t v60 = v104;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v104);
  uint64_t v61 = v105;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v105);
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v55, v59, v56, v116);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v60);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v61);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release_n();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v55, v122, v123, v118);
  v127[2] = v115;
  v127[3] = v112;
  v127[4] = v114;
  v127[5] = v111;
  uint64_t v62 = v120;
  v127[6] = v120;
  uint64_t v116 = (void *)lazy protocol witness table accessor for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SliderStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in Slider.body.getter, (uint64_t)v127, v95, (uint64_t)&type metadata for SliderStyleConfiguration.Label, v97, (uint64_t)v116);
  int v63 = v132;
  uint64_t v64 = v133;
  uint64_t v65 = v134;
  uint64_t v66 = v135;
  uint64_t v108 = v136;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v63, v64, v65, v66);
  swift_release();
  swift_release();
  uint64_t v108 = &v83;
  uint64_t v68 = v114;
  uint64_t v67 = v115;
  uint64_t v69 = v111;
  uint64_t v70 = v112;
  v126[2] = v115;
  v126[3] = v112;
  v126[4] = v114;
  v126[5] = v111;
  v126[6] = v62;
  v127[11] = v116;
  v127[12] = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v71 = v88;
  uint64_t v72 = swift_getWitnessTable();
  uint64_t v73 = v86;
  uint64_t v74 = v113;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (void (*)(double))partial apply for closure #2 in Slider.body.getter, (uint64_t)v126, v71, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, v86, v72);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v74, v71);
  v125[2] = v67;
  v125[3] = v70;
  v125[4] = v68;
  v125[5] = v69;
  v125[6] = v120;
  v127[9] = v72;
  v127[10] = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v75 = v89;
  uint64_t v76 = swift_getWitnessTable();
  uint64_t v77 = v87;
  uint64_t v78 = v110;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (void (*)(double))partial apply for closure #3 in Slider.body.getter, (uint64_t)v125, v75, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, v73, v76);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v106, v122, v123, v118);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v78, v75);
  v127[7] = v76;
  v127[8] = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v79 = v98;
  swift_getWitnessTable();
  uint64_t v80 = v94;
  static ViewBuilder.buildExpression<A>(_:)(v77);
  uint64_t v81 = *(void (**)(char *, uint64_t))(v99 + 8);
  v81(v77, v79);
  static ViewBuilder.buildExpression<A>(_:)(v80);
  return ((uint64_t (*)(char *, uint64_t))v81)(v80, v79);
}

void type metadata accessor for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel);
  }
  return result;
}

uint64_t closure #1 in Slider.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v25[3] = a6;
  void v25[2] = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLabelModifier.ChildModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v25 - v16;
  v25[10] = a2;
  v25[11] = a3;
  v25[12] = a4;
  v25[13] = a5;
  v25[1] = a1 + *(int *)(type metadata accessor for Slider() + 80);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a4, v18, v19);
  uint64_t v20 = type metadata accessor for AccessibilityLabelModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  v25[8] = a4;
  v25[9] = &protocol witness table for CaptureViewRespondersModifier;
  v25[6] = swift_getWitnessTable();
  v25[7] = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  v25[4] = swift_getWitnessTable();
  v25[5] = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v22 = swift_getWitnessTable();
  View.accessibilityConfiguration<A>(_:)(v22, a2, v20, a4, WitnessTable);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v23)(v17, v11);
}

uint64_t closure #2 in Slider.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v25[3] = a6;
  void v25[2] = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLabelModifier.ChildModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v25 - v16;
  v25[10] = a2;
  v25[11] = a3;
  v25[12] = a4;
  v25[13] = a5;
  v25[1] = a1 + *(int *)(type metadata accessor for Slider() + 68);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3, a5, v18, v19);
  uint64_t v20 = type metadata accessor for AccessibilityLabelModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  v25[8] = a5;
  v25[9] = &protocol witness table for CaptureViewRespondersModifier;
  v25[6] = swift_getWitnessTable();
  v25[7] = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  v25[4] = swift_getWitnessTable();
  v25[5] = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v22 = swift_getWitnessTable();
  View.accessibilityConfiguration<A>(_:)(v22, a3, v20, a5, WitnessTable);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v23)(v17, v11);
}

uint64_t closure #3 in Slider.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v25[3] = a6;
  void v25[2] = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLabelModifier.ChildModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v25 - v16;
  v25[10] = a2;
  v25[11] = a3;
  v25[12] = a4;
  v25[13] = a5;
  v25[1] = a1 + *(int *)(type metadata accessor for Slider() + 72);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3, a5, v18, v19);
  uint64_t v20 = type metadata accessor for AccessibilityLabelModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  v25[8] = a5;
  v25[9] = &protocol witness table for CaptureViewRespondersModifier;
  v25[6] = swift_getWitnessTable();
  v25[7] = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  v25[4] = swift_getWitnessTable();
  v25[5] = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v22 = swift_getWitnessTable();
  View.accessibilityConfiguration<A>(_:)(v22, a3, v20, a5, WitnessTable);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v23)(v17, v11);
}

uint64_t Slider.init<A>(value:in:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (*a16)(void, void))
{
  uint64_t v61 = a8;
  uint64_t v62 = a7;
  uint64_t v53 = a6;
  uint64_t v56 = a5;
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v66 = a2;
  uint64_t v67 = a1;
  uint64_t v63 = a9;
  uint64_t v60 = a13;
  uint64_t v58 = a16;
  uint64_t v59 = a10;
  uint64_t v57 = a14;
  uint64_t v54 = a15;
  MEMORY[0x1F4188790](a1);
  uint64_t v55 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = *(void *)(a11 - 8);
  uint64_t v17 = v46;
  MEMORY[0x1F4188790](v18);
  uint64_t v52 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v51 = (char *)&v45 - v21;
  uint64_t v23 = v22;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v27 = (char *)&v45 - v26;
  uint64_t v45 = (uint64_t)&v45 - v26;
  uint64_t v48 = v23;
  uint64_t v28 = type metadata accessor for ClosedRange();
  uint64_t v47 = v28;
  uint64_t v49 = *(void *)(v28 - 8);
  uint64_t v29 = v49;
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v45 - v30;
  uint64_t v50 = type metadata accessor for Binding();
  uint64_t v32 = *(void *)(v50 - 8);
  double v33 = MEMORY[0x1F4188790](v50);
  uint64_t v35 = (char *)&v45 - v34;
  (*(void (**)(char *, uint64_t, double))(v32 + 16))((char *)&v45 - v34, v67, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v66, v28);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v27, 1, 1, AssociatedTypeWitness);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v37 = (uint64_t)v51;
  uint64_t v38 = v56;
  v36(v51, v56, a11);
  uint64_t v39 = (uint64_t)v52;
  uint64_t v40 = v53;
  uint64_t v41 = ((uint64_t (*)(char *, uint64_t, uint64_t))v36)(v52, v53, a11);
  uint64_t v42 = (uint64_t)v55;
  v62(v41);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v35, (uint64_t)v31, v45, v64, v65, v37, v39, 1, v63, v42, 0, v59, a11, v48, v60, v57, v54, v58);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v43(v40, a11);
  v43(v38, a11);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v66, v47);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v67, v50);
}

uint64_t Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(void, void))
{
  uint64_t v76 = a8;
  uint64_t v69 = a7;
  uint64_t v70 = a6;
  uint64_t v78 = a4;
  uint64_t v79 = a5;
  uint64_t v56 = a3;
  uint64_t v59 = a2;
  uint64_t v63 = a1;
  uint64_t v77 = a9;
  uint64_t v74 = a15;
  uint64_t v75 = a14;
  uint64_t v67 = a16;
  uint64_t v71 = a10;
  uint64_t v72 = a11;
  uint64_t v73 = a17;
  uint64_t v61 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v68 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *(void *)(v21 - 8);
  uint64_t v22 = v53;
  MEMORY[0x1F4188790](v23);
  uint64_t v66 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v65 = (char *)&v51 - v26;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v28 - 8);
  uint64_t v30 = (char *)&v51 - v29;
  uint64_t v57 = a13;
  uint64_t v31 = type metadata accessor for ClosedRange();
  uint64_t v58 = v31;
  uint64_t v60 = *(void *)(v31 - 8);
  uint64_t v32 = v60;
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v51 - v33;
  uint64_t v55 = (uint64_t)&v51 - v33;
  uint64_t v62 = type metadata accessor for Binding();
  uint64_t v64 = *(void *)(v62 - 8);
  double v35 = MEMORY[0x1F4188790](v62);
  uint64_t v37 = (char *)&v51 - v36;
  (*(void (**)(char *, uint64_t, double))(v38 + 16))((char *)&v51 - v36, a1, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, a2, v31);
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  uint64_t v52 = v30;
  uint64_t v54 = AssociatedTypeWitness;
  v40(v30, a3, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v30, 0, 1, AssociatedTypeWitness);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v42 = (uint64_t)v65;
  uint64_t v43 = v70;
  uint64_t v44 = v61;
  v41(v65, v70, v61);
  uint64_t v45 = (uint64_t)v66;
  uint64_t v46 = v69;
  uint64_t v47 = ((uint64_t (*)(char *, uint64_t, uint64_t))v41)(v66, v69, v44);
  uint64_t v48 = (uint64_t)v68;
  v76(v47);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v37, v55, (uint64_t)v52, v78, v79, v42, v45, 1, v77, v48, 0, v72, v44, v57, v75, v74, v67, v73);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  v49(v46, v44);
  v49(v43, v44);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v56, v54);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v58);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v63, v62);
}

uint64_t Slider<>.init<A>(value:in:onEditingChanged:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(void, void))
{
  uint64_t v41 = a5;
  uint64_t v42 = a7;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v34 = a1;
  uint64_t v43 = a9;
  uint64_t v39 = a12;
  uint64_t v40 = a6;
  uint64_t v37 = a11;
  uint64_t v38 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v36 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v35 = a8;
  uint64_t v20 = type metadata accessor for ClosedRange();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v24 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v24 - 8);
  double v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v34 - v27;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))((char *)&v34 - v27, a1, v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, a2, v20);
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v19, 1, 1, AssociatedTypeWitness);
  uint64_t v30 = (uint64_t)v36;
  v41(v29);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v28, (uint64_t)v23, (uint64_t)v19, v44, v45, v31, v32, 0, v43, v30, 0, v42, MEMORY[0x1E4F417F8], v35, v38, MEMORY[0x1E4F417F0], v37, v39);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a2, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v34, v24);
}

uint64_t Slider<>.init<A>(value:in:step:onEditingChanged:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void, void))
{
  uint64_t v47 = a6;
  uint64_t v48 = a8;
  uint64_t v46 = a7;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v41 = a1;
  uint64_t v42 = a3;
  uint64_t v38 = a2;
  uint64_t v50 = a9;
  uint64_t v49 = a11;
  uint64_t v44 = a12;
  uint64_t v45 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v37 - v20;
  uint64_t v39 = v17;
  uint64_t v22 = type metadata accessor for ClosedRange();
  uint64_t v37 = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v37 - v24;
  uint64_t v40 = type metadata accessor for Binding();
  uint64_t v26 = *(void *)(v40 - 8);
  double v27 = MEMORY[0x1F4188790](v40);
  uint64_t v29 = (char *)&v37 - v28;
  (*(void (**)(char *, uint64_t, double))(v26 + 16))((char *)&v37 - v28, a1, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, a2, v22);
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v31 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v21, v42, AssociatedTypeWitness);
  uint64_t v32 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v21, 0, 1, AssociatedTypeWitness);
  uint64_t v33 = (uint64_t)v43;
  v47(v32);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v29, (uint64_t)v25, (uint64_t)v21, v51, v52, v34, v35, 0, v50, v33, 0, v48, MEMORY[0x1E4F417F8], v39, v49, MEMORY[0x1E4F417F0], v44, v45);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v38, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v41, v40);
}

double Slider<>.init<A>(value:in:onEditingChanged:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void, void)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v38 = a5;
  uint64_t v39 = (char *)&v36 - v14;
  uint64_t v15 = type metadata accessor for ClosedRange();
  uint64_t v37 = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = type metadata accessor for Binding();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v36 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v36 - v22, a1, v19, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, v15);
  uint64_t v24 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v39, 1, 1, AssociatedTypeWitness);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v23, (uint64_t)v18, v24, v42, v43, v25, v26, 0, (uint64_t)v44, v35, 0, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], v38, MEMORY[0x1E4F417F0], MEMORY[0x1E4F417F0], v40, v41);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, v37);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
  uint64_t v27 = v44[1];
  double result = *(double *)&v44[2];
  uint64_t v29 = v46;
  char v30 = v48;
  long long v31 = v45;
  long long v32 = v47;
  long long v33 = v49;
  long long v34 = v50;
  *(void *)a8 = v44[0];
  *(void *)(a8 + 8) = v27;
  *(double *)(a8 + 16) = result;
  *(_OWORD *)(a8 + 24) = v31;
  *(void *)(a8 + 40) = v29;
  *(_OWORD *)(a8 + 48) = v32;
  *(unsigned char *)(a8 + 64) = v30;
  *(_OWORD *)(a8 + 72) = v33;
  *(_OWORD *)(a8 + 88) = v34;
  return result;
}

double Slider<>.init<A>(value:in:step:onEditingChanged:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(void, void)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v44 = a7;
  long long v45 = a8;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v40 = a6;
  uint64_t v17 = type metadata accessor for ClosedRange();
  uint64_t v39 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v41 = type metadata accessor for Binding();
  uint64_t v21 = *(void *)(v41 - 8);
  double v22 = MEMORY[0x1F4188790](v41);
  uint64_t v24 = (char *)&v38 - v23;
  (*(void (**)(char *, uint64_t, double))(v21 + 16))((char *)&v38 - v23, a1, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a2, v17);
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v26 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v16, v43, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v16, 0, 1, AssociatedTypeWitness);
  Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)((uint64_t)v24, (uint64_t)v20, (uint64_t)v16, v46, v47, v27, v28, 0, (uint64_t)v48, v37, 0, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], v40, MEMORY[0x1E4F417F0], MEMORY[0x1E4F417F0], v44, v45);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v39);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v42, v41);
  uint64_t v29 = v48[1];
  double result = *(double *)&v48[2];
  uint64_t v31 = v50;
  char v32 = v52;
  long long v33 = v49;
  long long v34 = v51;
  long long v35 = v53;
  long long v36 = v54;
  *(void *)a9 = v48[0];
  *(void *)(a9 + 8) = v29;
  *(double *)(a9 + 16) = result;
  *(_OWORD *)(a9 + 24) = v33;
  *(void *)(a9 + 40) = v31;
  *(_OWORD *)(a9 + 48) = v34;
  *(unsigned char *)(a9 + 64) = v32;
  *(_OWORD *)(a9 + 72) = v35;
  *(_OWORD *)(a9 + 88) = v36;
  return result;
}

void protocol witness for Projection.get(base:) in conformance Clamping<A>(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = specialized Clamping.get(base:)(a1);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance Clamping<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Clamping.set(base:newValue:)(a1, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t Normalizing.get(base:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of Strideable.distance(to:)();
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t Normalizing.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = a2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v58 = *(void *)(v6 - 8);
  uint64_t v59 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v57 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v71 = *(void *)(a3 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v60 = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v54 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v55 = (char *)v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v56 = (char *)v54 - v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v69 = (char *)v54 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v65 = (char *)v54 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v61 = (char *)v54 - v26;
  MEMORY[0x1F4188790](v27);
  uint64_t v63 = (char *)v54 - v28;
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v66 = (char *)v54 - v31;
  char v32 = *(void (**)(uint64_t, uint64_t, double))(*(void *)(v8 - 8) + 8);
  uint64_t v67 = v8;
  uint64_t v68 = a1;
  v32(a1, v8, v30);
  uint64_t v33 = v3;
  uint64_t v34 = v3 + *(int *)(a3 + 56);
  uint64_t v62 = v11;
  long long v35 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v35(v15, v34, v10);
  uint64_t v70 = v16;
  long long v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v36(v15, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v10;
    uint64_t v38 = v70;
  }
  else
  {
    v54[0] = *(void *)(v70 + 32);
    ((void (*)(char *, char *, uint64_t))v54[0])(v63, v15, AssociatedTypeWitness);
    uint64_t v39 = *(int *)(a3 + 60);
    v54[1] = v33;
    uint64_t v40 = v33 + v39;
    uint64_t v41 = v60;
    v35(v60, v40, v10);
    uint64_t v15 = v41;
    if (v36(v41, 1, AssociatedTypeWitness) != 1)
    {
      ((void (*)(char *, char *, uint64_t))v54[0])(v61, v41, AssociatedTypeWitness);
      uint64_t v45 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v55, v64, AssociatedTypeWitness);
      uint64_t v46 = v56;
      dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
      uint64_t v64 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
      dispatch thunk of static Numeric.* infix(_:_:)();
      uint64_t v44 = *(void (**)(char *, uint64_t))(v45 + 8);
      v44(v46, AssociatedTypeWitness);
      char v48 = v57;
      uint64_t v47 = v58;
      uint64_t v49 = v59;
      (*(void (**)(char *, void, uint64_t))(v58 + 104))(v57, *MEMORY[0x1E4FBBEA0], v59);
      uint64_t v50 = v65;
      long long v51 = v69;
      dispatch thunk of FloatingPoint.rounded(_:)();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      v44(v51, AssociatedTypeWitness);
      uint64_t v43 = v66;
      char v52 = v63;
      dispatch thunk of static Numeric.* infix(_:_:)();
      v44(v50, AssociatedTypeWitness);
      v44(v61, AssociatedTypeWitness);
      v44(v52, AssociatedTypeWitness);
      goto LABEL_7;
    }
    uint64_t v37 = v10;
    uint64_t v38 = v70;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v63, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v62 + 8))(v15, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v69, v64, AssociatedTypeWitness);
  uint64_t v42 = v65;
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  swift_getAssociatedConformanceWitness();
  uint64_t v43 = v66;
  dispatch thunk of static Numeric.* infix(_:_:)();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v38 + 8);
  v44(v42, AssociatedTypeWitness);
LABEL_7:
  dispatch thunk of Strideable.advanced(by:)();
  return ((uint64_t (*)(char *, uint64_t))v44)(v43, AssociatedTypeWitness);
}

uint64_t Normalizing.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static Normalizing.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v99 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v97 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v90 = &v79[-v12];
  uint64_t v96 = v13;
  uint64_t v14 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v95 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v93 = &v79[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v98 = &v79[-v17];
  uint64_t v101 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v18);
  unint64_t v91 = &v79[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v20);
  unint64_t v92 = &v79[-v21];
  MEMORY[0x1F4188790](v22);
  long long v94 = &v79[-v23];
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = &v79[-v25];
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = &v79[-v28];
  MEMORY[0x1F4188790](v30);
  char v32 = &v79[-v31];
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v102 = a3;
  uint64_t v103 = a4;
  uint64_t v104 = a5;
  uint64_t v105 = (void (*)(void, void))v99;
  uint64_t v33 = type metadata accessor for Normalizing();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v99 = v26;
  uint64_t v84 = a3;
  uint64_t v85 = a5;
  uint64_t v34 = *(int *)(v33 + 56);
  uint64_t v88 = a1;
  uint64_t v35 = v33;
  uint64_t v36 = v101 + 16;
  uint64_t v37 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v101 + 16);
  v37(v32, a1 + v34, v14);
  uint64_t v87 = v35;
  uint64_t v38 = *(int *)(v35 + 56);
  uint64_t v89 = a2;
  v37(v29, a2 + v38, v14);
  uint64_t v39 = v98;
  uint64_t v40 = &v98[*(int *)(TupleTypeMetadata2 + 48)];
  v37(v98, (uint64_t)v32, v14);
  v37(v40, (uint64_t)v29, v14);
  uint64_t v41 = v96;
  uint64_t v43 = v97 + 48;
  uint64_t v42 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v97 + 48);
  if (v42(v39, 1, v96) != 1)
  {
    v37(v99, (uint64_t)v39, v14);
    if (v42(v40, 1, v41) != 1)
    {
      uint64_t v82 = v36;
      uint64_t v83 = v37;
      uint64_t v81 = v42;
      uint64_t v50 = v97;
      long long v51 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v97 + 32);
      uint64_t v86 = v43;
      char v52 = v90;
      v51(v90, v40, v41);
      swift_getAssociatedConformanceWitness();
      long long v53 = v99;
      int v80 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v54 = *(void (**)(unsigned char *, uint64_t))(v50 + 8);
      uint64_t v55 = v101;
      v54(v52, v41);
      uint64_t v56 = *(void (**)(unsigned char *, uint64_t))(v55 + 8);
      v56(v29, v14);
      uint64_t v57 = v32;
      uint64_t v47 = v56;
      v56(v57, v14);
      v54(v53, v96);
      v56(v98, v14);
      uint64_t v48 = v96;
      if ((v80 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_10;
    }
    uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v101 + 8);
    v49(v29, v14);
    v49(v32, v14);
    (*(void (**)(unsigned char *, uint64_t))(v97 + 8))(v99, v41);
LABEL_8:
    (*(void (**)(unsigned char *, uint64_t))(v95 + 8))(v98, TupleTypeMetadata2);
    goto LABEL_16;
  }
  uint64_t v82 = v36;
  uint64_t v83 = v37;
  uint64_t v86 = v43;
  uint64_t v44 = v41;
  uint64_t v45 = *(void (**)(unsigned char *, uint64_t))(v101 + 8);
  v45(v29, v14);
  uint64_t v46 = v32;
  uint64_t v47 = v45;
  uint64_t v48 = v44;
  v47(v46, v14);
  if (v42(v40, 1, v44) != 1) {
    goto LABEL_8;
  }
  uint64_t v81 = v42;
  v47(v98, v14);
LABEL_10:
  uint64_t v99 = v47;
  uint64_t v58 = v87;
  uint64_t v59 = v94;
  uint64_t v60 = v83;
  v83(v94, v88 + *(int *)(v87 + 60), v14);
  uint64_t v61 = v92;
  v60(v92, v89 + *(int *)(v58 + 60), v14);
  uint64_t v62 = v93;
  uint64_t v63 = &v93[*(int *)(TupleTypeMetadata2 + 48)];
  v60(v93, (uint64_t)v59, v14);
  v60(v63, (uint64_t)v61, v14);
  uint64_t v64 = v81;
  if (v81(v62, 1, v48) == 1)
  {
    uint64_t v65 = (void (*)(unsigned char *, uint64_t))v99;
    ((void (*)(unsigned char *, uint64_t))v99)(v61, v14);
    v65(v59, v14);
    if (v64(v63, 1, v48) == 1)
    {
      v65(v62, v14);
      swift_getAssociatedConformanceWitness();
LABEL_19:
      char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      return v67 & 1;
    }
    goto LABEL_15;
  }
  v60(v91, (uint64_t)v62, v14);
  if (v64(v63, 1, v48) == 1)
  {
    uint64_t v66 = (void (*)(unsigned char *, uint64_t))v99;
    ((void (*)(unsigned char *, uint64_t))v99)(v61, v14);
    v66(v59, v14);
    (*(void (**)(unsigned char *, uint64_t))(v97 + 8))(v91, v48);
LABEL_15:
    (*(void (**)(unsigned char *, uint64_t))(v95 + 8))(v62, TupleTypeMetadata2);
    goto LABEL_16;
  }
  uint64_t v69 = v62;
  uint64_t v70 = v61;
  uint64_t v71 = v97;
  uint64_t v72 = v90;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v97 + 32))(v90, v63, v48);
  swift_getAssociatedConformanceWitness();
  uint64_t v73 = v91;
  char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v75 = *(void (**)(unsigned char *, uint64_t))(v71 + 8);
  v75(v72, v48);
  uint64_t v76 = v70;
  uint64_t v77 = v48;
  uint64_t v78 = (void (*)(unsigned char *, uint64_t))v99;
  ((void (*)(unsigned char *, uint64_t))v99)(v76, v14);
  v78(v94, v14);
  v75(v73, v77);
  v78(v69, v14);
  if (v74) {
    goto LABEL_19;
  }
LABEL_16:
  char v67 = 0;
  return v67 & 1;
}

Swift::Int Normalizing.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Normalizing<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Normalizing<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Normalizing.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(unsigned char **)(a3 + 40));
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

double specialized AccessibilityAdjustableModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(void **)(v1 + 8);
  uint64_t v7 = *(void **)(v1 + 16);
  uint64_t v6 = *(void **)(v1 + 24);
  char v8 = *(unsigned char *)(v1 + 32) & 1;
  uint64_t v9 = swift_allocObject();
  long long v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v9 + 96) = v10;
  *(void *)(v9 + 112) = *(void *)(v1 + 96);
  long long v11 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v9 + 32) = v11;
  long long v12 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v9 + 64) = v12;
  type metadata accessor for _ContiguousArrayStorage<Text>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
  Swift::UInt32 v14 = AccessibilityActionHandlerSeed++;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>();
  *(void *)(v13 + 56) = v15;
  *(void *)(v13 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v16 = swift_allocObject();
  *(void *)(v13 + 32) = v16;
  *(unsigned char *)(v16 + 16) = v8;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = 0;
  *(void *)(v16 + 48) = 2;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(void *)(v16 + 88) = 0;
  *(void *)(v16 + 96) = partial apply for specialized closure #1 in AccessibilityAdjustableModifier.body(content:);
  *(void *)(v16 + 104) = v9;
  *(_DWORD *)(v16 + 112) = v14;
  *(unsigned char *)(v13 + 72) = 0;
  swift_retain();
  outlined retain of AccessibilityAdjustableModifier<ResolvedSliderStyle, AccessibilitySliderValue>(v2);
  specialized View.accessibility<A>(_:_:isEnabled:)(v13, 1, (uint64_t)v28);
  swift_release();
  swift_bridgeObjectRelease();
  if (v4)
  {
    id v17 = v6;
    id v18 = v4;
    id v19 = v5;
    id v20 = v7;
    specialized closure #2 in AccessibilityAdjustableModifier.body(content:)(v18, v5, v7, v6, v28, v2);
    outlined consume of AccessibilitySliderValue?(v4, v5, v7, v6);
  }
  uint64_t v21 = v28[1];
  uint64_t v22 = v28[2];
  uint64_t v23 = v30;
  char v24 = v32;
  uint64_t v25 = v35;
  uint64_t v26 = v36;
  *(void *)a1 = v28[0];
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 16) = v22;
  *(_OWORD *)(a1 + 24) = v29;
  *(void *)(a1 + 40) = v23;
  *(_OWORD *)(a1 + 48) = v31;
  *(unsigned char *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 72) = v33;
  double result = *(double *)&v34;
  *(_OWORD *)(a1 + 88) = v34;
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v26;
  return result;
}

uint64_t specialized closure #2 in AccessibilityAdjustableModifier.body(content:)(void *a1, void *a2, void *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8 = a5[1];
  uint64_t v56 = *a5;
  uint64_t v9 = a5[2];
  uint64_t v10 = a5[4];
  uint64_t v11 = a5[5];
  uint64_t v44 = a5[6];
  uint64_t v45 = a5[3];
  uint64_t v50 = a5[7];
  uint64_t v51 = v8;
  char v43 = *((unsigned char *)a5 + 64);
  long long v12 = (void *)a5[9];
  uint64_t v13 = (void *)a5[10];
  uint64_t v46 = v12;
  uint64_t v15 = (void *)a5[11];
  Swift::UInt32 v14 = (void *)a5[12];
  uint64_t v16 = a5[13];
  uint64_t v49 = a5[14];
  v54[0] = (uint64_t)a1;
  v54[1] = (uint64_t)a2;
  void v54[2] = (uint64_t)a3;
  v54[3] = (uint64_t)a4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v17 = v10;
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v12, v13, v15, v14);
  lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  swift_retain();
  swift_retain();
  id v18 = a1;
  id v19 = a2;
  id v20 = a3;
  id v21 = a4;
  AccessibilityValueStorage.init<A>(_:description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v55, (uint64_t)v54);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  uint64_t v22 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v22, v53);
  swift_bridgeObjectRelease();
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v54, (uint64_t)v52);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v52);
  uint64_t v23 = v16;
  specialized AccessibilityProperties.subscript.getter(*(void *)(v16 + 16), v52);
  specialized Optional<A>.merge(with:)((uint64_t)v53);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v52);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v53);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  uint64_t v47 = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v12, v13, v15, v14);
  swift_retain();
  swift_retain();
  outlined destroy of AccessibilityValueStorage?((uint64_t)v54);
  outlined destroy of AccessibilityValueStorage((uint64_t)v55);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v12, v13, v15, v14);
  swift_release();
  swift_release();
  uint64_t v24 = swift_allocObject();
  long long v25 = *(_OWORD *)(a6 + 80);
  *(_OWORD *)(v24 + 80) = *(_OWORD *)(a6 + 64);
  *(_OWORD *)(v24 + 96) = v25;
  *(void *)(v24 + 112) = *(void *)(a6 + 96);
  long long v26 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)a6;
  *(_OWORD *)(v24 + 32) = v26;
  long long v27 = *(_OWORD *)(a6 + 48);
  *(_OWORD *)(v24 + 48) = *(_OWORD *)(a6 + 32);
  *(_OWORD *)(v24 + 64) = v27;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for specialized closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:);
  *(void *)(v28 + 24) = v24;
  type metadata accessor for _ContiguousArrayStorage<Text>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_18834BB80;
  LODWORD(v16) = AccessibilityActionHandlerSeed++;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilitySetValueAction>>();
  *(void *)(v29 + 56) = v30;
  *(void *)(v29 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v31 = swift_allocObject();
  *(void *)(v29 + 32) = v31;
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 24) = 0;
  *(void *)(v31 + 32) = 0;
  *(void *)(v31 + 40) = 2;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_OWORD *)(v31 + 64) = 0u;
  *(void *)(v31 + 80) = 0;
  *(void *)(v31 + 88) = partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:);
  *(void *)(v31 + 96) = v28;
  *(_DWORD *)(v31 + 104) = v16;
  *(unsigned char *)(v29 + 72) = 0;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  outlined retain of AccessibilityAdjustableModifier<ResolvedSliderStyle, AccessibilitySliderValue>(a6);
  swift_retain();
  swift_retain();
  uint64_t v32 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v33);
  v54[0] = specialized AccessibilityProperties.subscript.getter(*(void *)(v23 + 16));
  uint64_t v34 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v34);
  specialized AccessibilityProperties.subscript.setter(v54[0]);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v46, v13, v15, v14);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v46, v13, v15, v14);
  swift_release();
  swift_release();
  uint64_t v39 = (void *)a5[10];
  uint64_t v41 = (void *)a5[9];
  uint64_t v37 = (void *)a5[11];
  uint64_t v36 = (void *)a5[12];
  *a5 = v56;
  a5[1] = v51;
  a5[2] = v9;
  a5[3] = v45;
  a5[4] = v47;
  a5[5] = v11;
  a5[6] = v44;
  a5[7] = v50;
  *((unsigned char *)a5 + 64) = v43;
  a5[9] = (uint64_t)v46;
  a5[10] = (uint64_t)v13;
  a5[11] = (uint64_t)v15;
  a5[12] = (uint64_t)v14;
  a5[13] = v23;
  a5[14] = v49;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v41, v39, v37, v36);
  swift_release();
  return swift_release();
}

void *partial apply for closure #2 in AccessibilitySliderModifier.init(_:value:)()
{
  return closure #2 in AccessibilitySliderModifier.init(_:value:)((void *)(v0 + 16));
}

void *partial apply for closure #3 in AccessibilitySliderModifier.init(_:value:)()
{
  return closure #3 in AccessibilitySliderModifier.init(_:value:)((void *)(v0 + 16));
}

uint64_t sub_187902DB8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(v0 + 120);
  if (v2)
  {
  }

  return swift_deallocObject();
}

void partial apply for closure #4 in AccessibilitySliderModifier.init(_:value:)(double *a1)
{
  closure #4 in AccessibilitySliderModifier.init(_:value:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), (void *)(v1 + 48));
}

id outlined copy of AccessibilitySliderValue?(id result, void *a2, void *a3, void *a4)
{
  if (result)
  {
    uint64_t v5 = result;
    id v6 = a4;
    id v7 = v5;
    id v8 = a2;
    return a3;
  }
  return result;
}

void outlined consume of AccessibilitySliderValue?(void *a1, void *a2, void *a3, void *a4)
{
  if (a1)
  {
  }
}

uint64_t partial apply for closure #1 in Slider.body.getter()
{
  return partial apply for closure #1 in Slider.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in Slider.body.getter);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedSliderStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle;
  if (!lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle;
  if (!lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSliderStyle and conformance ResolvedSliderStyle);
  }
  return result;
}

uint64_t partial apply for closure #2 in Slider.body.getter()
{
  return partial apply for closure #1 in Slider.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in Slider.body.getter);
}

uint64_t partial apply for closure #3 in Slider.body.getter()
{
  return partial apply for closure #1 in Slider.body.getter((uint64_t (*)(void, void, void, void, void))closure #3 in Slider.body.getter);
}

uint64_t partial apply for closure #1 in Slider.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t associated type witness table accessor for View.Body : View in Slider<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Slider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Slider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a3 + 16;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v6 + 8);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(v4 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64) + 7;
  int v14 = (*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if ((v12 | v8) > 7
    || v14 != 0
    || ((v13 + ((v12 + v9 + ((v9 + v8 + ((v8 + 64) & ~v8)) & ~v8) + 1) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v18 = v15 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16));
    swift_retain();
  }
  else
  {
    uint64_t v19 = ~v8;
    uint64_t v53 = ~v12;
    long long v54 = a1;
    uint64_t v20 = a2[2];
    a1[1] = a2[1];
    a1[2] = v20;
    id v21 = (void *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = v22[1];
    *id v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v25;
    long long v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v26 = *v27;
    uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v29;
    uint64_t v30 = ((unint64_t)v28 + v8 + 8) & ~v8;
    uint64_t v31 = ((unint64_t)v29 + v8 + 8) & ~v8;
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v50 = v11;
    uint64_t v51 = v4;
    uint64_t v52 = v13;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v32(v30, v31, v5);
    uint64_t v33 = (v10 + v30) & v19;
    uint64_t v34 = (v10 + v31) & v19;
    v32(v33, v34, v5);
    *(unsigned char *)(v33 + v9) = *(unsigned char *)(v34 + v9);
    uint64_t v35 = v34 + v9 + v12;
    uint64_t v36 = (v33 + v9 + v12 + 1) & ~v12;
    uint64_t v37 = (v35 + 1) & v53;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v36, v37, v51);
    unint64_t v38 = (v52 + v36) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = (v52 + v37) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = *(void **)v39;
    if (*(void *)v39 < 0xFFFFFFFFuLL)
    {
      long long v48 = *(_OWORD *)(v39 + 16);
      *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
      *(_OWORD *)(v38 + 16) = v48;
    }
    else
    {
      *(void *)unint64_t v38 = v40;
      uint64_t v41 = *(void **)(v39 + 8);
      *(void *)(v38 + 8) = v41;
      uint64_t v42 = *(void **)(v39 + 16);
      *(void *)(v38 + 16) = v42;
      char v43 = *(void **)(v39 + 24);
      *(void *)(v38 + 24) = v43;
      id v44 = v40;
      id v45 = v41;
      id v46 = v42;
      id v47 = v43;
    }
    return v54;
  }
  return (uint64_t *)v18;
}

void destroy for Slider(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  unint64_t v4 = (((((((a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v6 + 8;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v4 + v9 + 8) & ~v9;
  v7(v10, v5);
  uint64_t v11 = *(void *)(v8 + 56);
  uint64_t v12 = (v11 + v9 + v10) & ~v9;
  v7(v12, v5);
  uint64_t v13 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v14 = v13 + 8;
  unint64_t v15 = (v11 + *(unsigned __int8 *)(v13 + 80) + v12 + 1) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  (*(void (**)(unint64_t))(v13 + 8))(v15);
  unint64_t v16 = (*(void *)(v14 + 56) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v16 >= 0xFFFFFFFFuLL)
  {

    uint64_t v17 = *(void **)(v16 + 24);
  }
}

void *initializeWithCopy for Slider(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = (void *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = v6[1];
  void *v5 = *v6;
  v5[1] = v7;
  uint64_t v8 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = *(void *)(a3 + 24);
  unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  uint64_t v16 = *(void *)(v14 - 8) + 16;
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80);
  uint64_t v18 = ((unint64_t)v12 + v17 + 8) & ~v17;
  uint64_t v19 = ((unint64_t)v13 + v17 + 8) & ~v17;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15(v18, v19, v14);
  uint64_t v20 = *(void *)(v16 + 48);
  uint64_t v21 = (v20 + v17 + v18) & ~v17;
  uint64_t v22 = (v20 + v17 + v19) & ~v17;
  v15(v21, v22, v14);
  uint64_t v23 = v22 + v20;
  *(unsigned char *)(v21 + v20) = *(unsigned char *)(v22 + v20);
  uint64_t v24 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v25 = v24 + 16;
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = (v26 + 1 + v21 + v20) & ~v26;
  uint64_t v28 = (v26 + 1 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v27, v28);
  uint64_t v29 = *(void *)(v25 + 48) + 7;
  unint64_t v30 = (v29 + v27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v29 + v28) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = *(void **)v31;
  if (*(void *)v31 < 0xFFFFFFFFuLL)
  {
    long long v40 = *(_OWORD *)(v31 + 16);
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
    *(_OWORD *)(v30 + 16) = v40;
  }
  else
  {
    *(void *)unint64_t v30 = v32;
    uint64_t v33 = *(void **)(v31 + 8);
    *(void *)(v30 + 8) = v33;
    uint64_t v34 = *(void **)(v31 + 16);
    *(void *)(v30 + 16) = v34;
    uint64_t v35 = *(void **)(v31 + 24);
    *(void *)(v30 + 24) = v35;
    id v36 = v32;
    id v37 = v33;
    id v38 = v34;
    id v39 = v35;
  }
  return a1;
}

void *assignWithCopy for Slider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  uint64_t v6 = (void *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v7[1];
  *uint64_t v6 = *v7;
  v6[1] = v8;
  swift_retain();
  swift_release();
  uint64_t v9 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  uint64_t v18 = v16 + 24;
  uint64_t v19 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = ((unint64_t)v13 + v19 + 8) & ~v19;
  uint64_t v21 = ((unint64_t)v14 + v19 + 8) & ~v19;
  v17(v20, v21, v15);
  uint64_t v22 = *(void *)(v18 + 40);
  uint64_t v23 = (v22 + v19 + v20) & ~v19;
  uint64_t v24 = (v22 + v19 + v21) & ~v19;
  v17(v23, v24, v15);
  uint64_t v25 = (unsigned char *)(v23 + v22);
  *uint64_t v25 = *(unsigned char *)(v24 + v22);
  uint64_t v26 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v27 = v26 + 24;
  uint64_t v28 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v29 = (unint64_t)&v25[v28 + 1] & ~v28;
  uint64_t v30 = (v28 + 1 + v24 + v22) & ~v28;
  (*(void (**)(uint64_t, uint64_t))(v26 + 24))(v29, v30);
  uint64_t v31 = *(void *)(v27 + 40) + 7;
  unint64_t v32 = (v31 + v29) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v31 + v30) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = *(void **)v32;
  uint64_t v35 = *(void **)v33;
  if (*(void *)v32 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v35 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v32 = v35;
      id v46 = *(void **)(v33 + 8);
      *(void *)(v32 + 8) = v46;
      id v47 = *(void **)(v33 + 16);
      *(void *)(v32 + 16) = v47;
      long long v48 = *(void **)(v33 + 24);
      *(void *)(v32 + 24) = v48;
      id v49 = v35;
      id v50 = v46;
      id v51 = v47;
      id v52 = v48;
      return a1;
    }
LABEL_7:
    long long v53 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
    *(_OWORD *)(v32 + 16) = v53;
    return a1;
  }
  if ((unint64_t)v35 < 0xFFFFFFFF)
  {

    goto LABEL_7;
  }
  *(void *)unint64_t v32 = v35;
  id v36 = v35;

  id v37 = *(void **)(v32 + 8);
  id v38 = *(void **)(v33 + 8);
  *(void *)(v32 + 8) = v38;
  id v39 = v38;

  long long v40 = *(void **)(v32 + 16);
  uint64_t v41 = *(void **)(v33 + 16);
  *(void *)(v32 + 16) = v41;
  id v42 = v41;

  char v43 = *(void **)(v32 + 24);
  id v44 = *(void **)(v33 + 24);
  *(void *)(v32 + 24) = v44;
  id v45 = v44;

  return a1;
}

uint64_t initializeWithTake for Slider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = (_OWORD *)((a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (_OWORD *)((a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v5 = *v6;
  uint64_t v7 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  uint64_t v16 = v14 + 32;
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = ((unint64_t)v11 + v17 + 8) & ~v17;
  uint64_t v19 = ((unint64_t)v12 + v17 + 8) & ~v17;
  v15(v18, v19, v13);
  uint64_t v20 = *(void *)(v16 + 32);
  uint64_t v21 = (v20 + v17 + v18) & ~v17;
  uint64_t v22 = (v20 + v17 + v19) & ~v17;
  v15(v21, v22, v13);
  uint64_t v23 = (unsigned char *)(v21 + v20);
  *uint64_t v23 = *(unsigned char *)(v22 + v20);
  uint64_t v24 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v25 = v24 + 32;
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = (unint64_t)&v23[v26 + 1] & ~v26;
  uint64_t v28 = (v26 + 1 + v22 + v20) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v24 + 32))(v27, v28);
  uint64_t v29 = *(void *)(v25 + 32) + 7;
  uint64_t v30 = (_OWORD *)((v29 + v27) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (_OWORD *)((v29 + v28) & 0xFFFFFFFFFFFFFFF8);
  long long v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  return a1;
}

void *assignWithTake for Slider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  uint64_t v6 = (_OWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = ((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v8 = *(_OWORD *)v7;
  v7 += 23;
  *uint64_t v6 = v8;
  swift_release();
  uint64_t v9 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *(void *)(v7 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  uint64_t v17 = v15 + 40;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = ((unint64_t)v12 + v18 + 8) & ~v18;
  uint64_t v20 = ((unint64_t)v13 + v18 + 8) & ~v18;
  v16(v19, v20, v14);
  uint64_t v21 = *(void *)(v17 + 24);
  uint64_t v22 = (v21 + v18 + v19) & ~v18;
  uint64_t v23 = (v21 + v18 + v20) & ~v18;
  v16(v22, v23, v14);
  uint64_t v24 = (unsigned char *)(v22 + v21);
  *uint64_t v24 = *(unsigned char *)(v23 + v21);
  uint64_t v25 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v26 = v25 + 40;
  uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = (unint64_t)&v24[v27 + 1] & ~v27;
  uint64_t v29 = (v27 + 1 + v23 + v21) & ~v27;
  (*(void (**)(uint64_t, uint64_t))(v25 + 40))(v28, v29);
  uint64_t v30 = *(void *)(v26 + 24) + 7;
  unint64_t v31 = (v30 + v28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v30 + v29) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = *(void **)v31;
  if (*(void *)v31 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)v32 < 0xFFFFFFFFuLL)
  {

LABEL_5:
    long long v37 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)unint64_t v31 = *(_OWORD *)v32;
    *(_OWORD *)(v31 + 16) = v37;
    return a1;
  }
  *(void *)unint64_t v31 = *(void *)v32;

  uint64_t v34 = *(void **)(v31 + 8);
  *(void *)(v31 + 8) = *(void *)(v32 + 8);

  uint64_t v35 = *(void **)(v31 + 16);
  *(void *)(v31 + 16) = *(void *)(v32 + 16);

  id v36 = *(void **)(v31 + 24);
  *(void *)(v31 + 24) = *(void *)(v32 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for Slider(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v10 + v9;
  uint64_t v15 = v10 + v11 + 1;
  if (v13 < a2)
  {
    unint64_t v16 = ((*(void *)(*(void *)(v6 - 8) + 64) + ((v15 + ((v14 + ((v9 + 64) & ~v9)) & ~v9)) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32;
    if ((v16 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v13 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v16);
        if (!*((unsigned char *)a1 + v16)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v16);
        if (*(_WORD *)((char *)a1 + v16)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1879040E0);
      case 4:
        int v20 = *(int *)((char *)a1 + v16);
        if (!v20) {
          break;
        }
LABEL_25:
        int v22 = v20 - 1;
        if ((v16 & 0xFFFFFFF8) != 0)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v13 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if ((v12 & 0x80000000) != 0)
  {
    unint64_t v25 = ((((((((((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + v9
         + 8) & ~v9;
    if (v5 == v13) {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(v25);
    }
    else {
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v15 + ((v14 + v25) & ~v9)) & ~v11, v8, v6);
    }
  }
  else
  {
    unint64_t v24 = *((void *)a1 + 1);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    return (v24 + 1);
  }
}

void storeEnumTagSinglePayload for Slider(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v7 = *(void *)(a4 + 16);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = v11 + v10;
  uint64_t v16 = (v11 + v10 + ((v10 + 64) & ~v10)) & ~v10;
  uint64_t v17 = v11 + v12 + 1;
  size_t v18 = ((*(void *)(*(void *)(v7 - 8) + 64) + ((v17 + v16) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v14 >= a3)
  {
    int v22 = 0;
    int v23 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_20:
      uint64_t v24 = ~v10;
      uint64_t v25 = ~v12;
      switch(v22)
      {
        case 1:
          a1[v18] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v18] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v18] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if ((v13 & 0x80000000) != 0)
            {
              unint64_t v28 = (((((((((unint64_t)(a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + v10
                   + 8) & v24;
              if (v8 == v14)
              {
                uint64_t v29 = *(void (**)(unint64_t))(v6 + 56);
                v29(v28);
              }
              else
              {
                unint64_t v30 = (v17 + ((v15 + v28) & v24)) & v25;
                unint64_t v31 = *(void (**)(unint64_t))(v9 + 56);
                v31(v30);
              }
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *((void *)a1 + 1) = 0;
              *((void *)a1 + 2) = 0;
              *(void *)a1 = a2 ^ 0x80000000;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v19 = a3 - v14;
    if (((*(_DWORD *)(*(void *)(v7 - 8) + 64) + ((v17 + v16) & ~v12) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    int v23 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_20;
    }
  }
  if (v18) {
    int v26 = 1;
  }
  else {
    int v26 = v23;
  }
  if (v18)
  {
    int v27 = ~v14 + a2;
    bzero(a1, v18);
    *(_DWORD *)a1 = v27;
  }
  switch(v22)
  {
    case 1:
      a1[v18] = v26;
      break;
    case 2:
      *(_WORD *)&a1[v18] = v26;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1879043D8);
    case 4:
      *(_DWORD *)&a1[v18] = v26;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Slider()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187904418()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for Normalizing()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)()
{
  return closure #1 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)();
}

uint64_t partial apply for closure #2 in Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:label:marks:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  uint64_t v5 = type metadata accessor for SliderMark();
  return SliderMark.normalized<>(in:)(v4, v5, v3, a1);
}

uint64_t type metadata accessor for Clamping()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(uint64_t a1)
{
  return closure #2 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(a1);
}

uint64_t partial apply for closure #3 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in Slider.init<A>(value:skipDistance:onEditingChanged:minimumValueLabel:maximumValueLabel:customMinMaxValueLabels:accessibilityValue:label:marks:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 56), a2);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v90 = *v2;
      uint64_t v91 = *v2 + 32;
      uint64_t v92 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v94 = *(double *)(v90 + 40 * i + 32);
        uint64_t v95 = v92;
        uint64_t v96 = v91;
        do
        {
          if (v94 >= *(double *)v96) {
            break;
          }
          if (!v90) {
            goto LABEL_142;
          }
          uint64_t v97 = v96 + 8;
          long long v98 = *(_OWORD *)(v96 + 8);
          long long v99 = *(_OWORD *)(v96 + 24);
          long long v100 = *(_OWORD *)(v96 - 16);
          *(_OWORD *)(v96 + 8) = *(_OWORD *)(v96 - 32);
          *(_OWORD *)(v96 + 24) = v100;
          double v101 = *(double *)v96;
          *(_OWORD *)(v96 - 32) = v98;
          *(_OWORD *)(v96 - 16) = v99;
          *(double *)uint64_t v96 = v94;
          v96 -= 40;
          *(double *)(v97 + 32) = v101;
        }
        while (!__CFADD__(v95++, 1));
        v91 += 40;
        --v92;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_147;
  }
  Swift::Int v6 = result;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v103 = (char *)MEMORY[0x1E4FBC860];
LABEL_104:
      uint64_t v112 = v9;
      if (v12 >= 2)
      {
        uint64_t v104 = *v2;
        do
        {
          unint64_t v105 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_133;
          }
          if (!v104) {
            goto LABEL_146;
          }
          uint64_t v106 = v103;
          uint64_t v107 = *(void *)&v103[16 * v105 + 32];
          uint64_t v108 = *(void *)&v103[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v104 + 40 * v107), (double *)(v104 + 40 * *(void *)&v103[16 * v12 + 16]), v104 + 40 * v108, __dst);
          if (v1) {
            break;
          }
          if (v108 < v107) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v106);
          }
          if (v105 >= *((void *)v106 + 2)) {
            goto LABEL_135;
          }
          uint64_t v109 = &v106[16 * v105 + 32];
          *(void *)uint64_t v109 = v107;
          *((void *)v109 + 1) = v108;
          unint64_t v110 = *((void *)v106 + 2);
          if (v12 > v110) {
            goto LABEL_136;
          }
          memmove(&v106[16 * v12 + 16], &v106[16 * v12 + 32], 16 * (v110 - v12));
          uint64_t v103 = v106;
          *((void *)v106 + 2) = v110 - 1;
          unint64_t v12 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_94:
      swift_bridgeObjectRelease();
      *(void *)(v112 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v112 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for SliderMark<Double>(0, (unint64_t *)&lazy cache variable for type metadata for SliderMark<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderMark);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v112 = v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v111 = v2;
  uint64_t v11 = *v2;
  uint64_t v116 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v113 = v6;
  Swift::Int v114 = v3;
  while (1)
  {
    Swift::Int v13 = v10++;
    if (v10 < v3)
    {
      double v14 = *(double *)(v11 + 40 * v10 + 32);
      double v15 = *(double *)(v11 + 40 * v13 + 32);
      Swift::Int v10 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = (double *)(v11 + 112 + 40 * v13);
        double v17 = v14;
        while (1)
        {
          double v18 = v17;
          double v17 = *v16;
          if (v14 < v15 == *v16 >= v18) {
            break;
          }
          ++v10;
          v16 += 5;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v10 < v13) {
          goto LABEL_139;
        }
        if (v13 < v10)
        {
          uint64_t v19 = 40 * v10;
          uint64_t v20 = 40 * v13;
          Swift::Int v21 = v10;
          Swift::Int v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v11) {
                goto LABEL_145;
              }
              uint64_t v23 = v11 + v20;
              uint64_t v24 = *(void *)(v11 + v20 + 32);
              uint64_t v25 = v11 + v19;
              long long v26 = *(_OWORD *)(v11 + v20);
              long long v27 = *(_OWORD *)(v11 + v20 + 16);
              uint64_t v28 = *(void *)(v11 + v19 - 8);
              long long v29 = *(_OWORD *)(v11 + v19 - 24);
              *(_OWORD *)uint64_t v23 = *(_OWORD *)(v11 + v19 - 40);
              *(_OWORD *)(v23 + 16) = v29;
              *(void *)(v23 + 32) = v28;
              *(_OWORD *)(v25 - 40) = v26;
              *(_OWORD *)(v25 - 24) = v27;
              *(void *)(v25 - 8) = v24;
            }
            ++v22;
            v19 -= 40;
            v20 += 40;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_38;
    }
    if (__OFSUB__(v10, v13)) {
      goto LABEL_137;
    }
    if (v10 - v13 >= v6) {
      goto LABEL_38;
    }
    Swift::Int v30 = v13 + v6;
    if (__OFADD__(v13, v6)) {
      goto LABEL_140;
    }
    if (v30 >= v3) {
      Swift::Int v30 = v3;
    }
    if (v30 < v13) {
      break;
    }
    if (v10 != v30)
    {
      uint64_t v81 = v11 - 8 + 40 * v10;
      unint64_t v31 = v116;
      do
      {
        double v82 = *(double *)(v11 + 40 * v10 + 32);
        Swift::Int v83 = v13;
        uint64_t v84 = v81;
        do
        {
          if (v82 >= *(double *)v84) {
            break;
          }
          if (!v11) {
            goto LABEL_143;
          }
          uint64_t v85 = v84 + 8;
          long long v86 = *(_OWORD *)(v84 + 8);
          long long v87 = *(_OWORD *)(v84 + 24);
          long long v88 = *(_OWORD *)(v84 - 16);
          *(_OWORD *)(v84 + 8) = *(_OWORD *)(v84 - 32);
          *(_OWORD *)(v84 + 24) = v88;
          double v89 = *(double *)v84;
          *(_OWORD *)(v84 - 32) = v86;
          *(_OWORD *)(v84 - 16) = v87;
          *(double *)uint64_t v84 = v82;
          v84 -= 40;
          ++v83;
          *(double *)(v85 + 32) = v89;
        }
        while (v10 != v83);
        ++v10;
        v81 += 40;
      }
      while (v10 != v30);
      Swift::Int v10 = v30;
      if (v30 < v13) {
        goto LABEL_132;
      }
      goto LABEL_39;
    }
LABEL_38:
    unint64_t v31 = v116;
    if (v10 < v13) {
      goto LABEL_132;
    }
LABEL_39:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
    }
    unint64_t v33 = *((void *)v31 + 2);
    unint64_t v32 = *((void *)v31 + 3);
    unint64_t v12 = v33 + 1;
    if (v33 >= v32 >> 1) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v31);
    }
    *((void *)v31 + 2) = v12;
    uint64_t v34 = v31 + 32;
    uint64_t v35 = &v31[16 * v33 + 32];
    *(void *)uint64_t v35 = v13;
    *((void *)v35 + 1) = v10;
    uint64_t v116 = v31;
    if (v33)
    {
      while (1)
      {
        unint64_t v36 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v41 = &v34[16 * v12];
          uint64_t v42 = *((void *)v41 - 8);
          uint64_t v43 = *((void *)v41 - 7);
          BOOL v47 = __OFSUB__(v43, v42);
          uint64_t v44 = v43 - v42;
          if (v47) {
            goto LABEL_121;
          }
          uint64_t v46 = *((void *)v41 - 6);
          uint64_t v45 = *((void *)v41 - 5);
          BOOL v47 = __OFSUB__(v45, v46);
          uint64_t v39 = v45 - v46;
          char v40 = v47;
          if (v47) {
            goto LABEL_122;
          }
          unint64_t v48 = v12 - 2;
          id v49 = &v34[16 * v12 - 32];
          uint64_t v51 = *(void *)v49;
          uint64_t v50 = *((void *)v49 + 1);
          BOOL v47 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          if (v47) {
            goto LABEL_124;
          }
          BOOL v47 = __OFADD__(v39, v52);
          uint64_t v53 = v39 + v52;
          if (v47) {
            goto LABEL_127;
          }
          if (v53 >= v44)
          {
            uint64_t v71 = &v34[16 * v36];
            uint64_t v73 = *(void *)v71;
            uint64_t v72 = *((void *)v71 + 1);
            BOOL v47 = __OFSUB__(v72, v73);
            uint64_t v74 = v72 - v73;
            if (v47) {
              goto LABEL_131;
            }
            BOOL v64 = v39 < v74;
            goto LABEL_75;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v65 = *((void *)v31 + 4);
            uint64_t v66 = *((void *)v31 + 5);
            BOOL v47 = __OFSUB__(v66, v65);
            uint64_t v58 = v66 - v65;
            char v59 = v47;
            goto LABEL_69;
          }
          uint64_t v38 = *((void *)v31 + 4);
          uint64_t v37 = *((void *)v31 + 5);
          BOOL v47 = __OFSUB__(v37, v38);
          uint64_t v39 = v37 - v38;
          char v40 = v47;
        }
        if (v40) {
          goto LABEL_123;
        }
        unint64_t v48 = v12 - 2;
        long long v54 = &v34[16 * v12 - 32];
        uint64_t v56 = *(void *)v54;
        uint64_t v55 = *((void *)v54 + 1);
        BOOL v57 = __OFSUB__(v55, v56);
        uint64_t v58 = v55 - v56;
        char v59 = v57;
        if (v57) {
          goto LABEL_126;
        }
        uint64_t v60 = &v34[16 * v36];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v47 = __OFSUB__(v61, v62);
        uint64_t v63 = v61 - v62;
        if (v47) {
          goto LABEL_129;
        }
        if (__OFADD__(v58, v63)) {
          goto LABEL_130;
        }
        if (v58 + v63 >= v39)
        {
          BOOL v64 = v39 < v63;
LABEL_75:
          if (v64) {
            unint64_t v36 = v48;
          }
          goto LABEL_77;
        }
LABEL_69:
        if (v59) {
          goto LABEL_125;
        }
        char v67 = &v34[16 * v36];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v47 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v47) {
          goto LABEL_128;
        }
        if (v70 < v58) {
          goto LABEL_15;
        }
LABEL_77:
        unint64_t v75 = v36 - 1;
        if (v36 - 1 >= v12)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v11) {
          goto LABEL_144;
        }
        uint64_t v76 = &v34[16 * v75];
        uint64_t v77 = *(void *)v76;
        uint64_t v78 = &v34[16 * v36];
        uint64_t v79 = *((void *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 40 * *(void *)v76), (double *)(v11 + 40 * *(void *)v78), v11 + 40 * v79, __dst);
        if (v1) {
          goto LABEL_94;
        }
        if (v79 < v77) {
          goto LABEL_118;
        }
        if (v36 > *((void *)v116 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v76 = v77;
        *(void *)&v34[16 * v75 + 8] = v79;
        unint64_t v80 = *((void *)v116 + 2);
        if (v36 >= v80) {
          goto LABEL_120;
        }
        unint64_t v31 = v116;
        unint64_t v12 = v80 - 1;
        memmove(&v34[16 * v36], v78 + 16, 16 * (v80 - 1 - v36));
        *((void *)v116 + 2) = v80 - 1;
        if (v80 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v6 = v113;
    Swift::Int v3 = v114;
    if (v10 >= v114)
    {
      uint64_t v9 = v112;
      uint64_t v103 = v116;
      uint64_t v2 = v111;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::Int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  long long v96;
  long long v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  long long v102;
  long long v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  long long v118;
  long long v119;
  char v120;
  uint64_t v121;
  char v122;
  long long v123;
  long long v124;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  Swift::Int v134;
  void *v135;
  uint64_t v136;
  Swift::Int v137;
  Swift::Int v138;
  long long v139;
  long long v140;
  char v141;
  uint64_t v142;
  char v143;
  char *v144;
  char *v145;
  uint64_t v146;

  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result < v3)
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_226;
    }
    uint64_t v137 = result;
    v146 = v1;
    if (v3 < 2)
    {
      uint64_t v8 = MEMORY[0x1E4FBC860];
      v144 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (v3 != 1)
      {
        uint64_t v11 = *(void *)(MEMORY[0x1E4FBC860] + 16);
        v126 = (char *)MEMORY[0x1E4FBC860];
LABEL_175:
        v136 = v8;
        if (v11 >= 2)
        {
          uint64_t v127 = *v2;
          do
          {
            v128 = v11 - 2;
            if (v11 < 2) {
              goto LABEL_204;
            }
            if (!v127) {
              goto LABEL_221;
            }
            uint64_t v129 = v126;
            unint64_t v130 = *(void *)&v126[16 * v128 + 32];
            uint64_t v131 = *(void *)&v126[16 * v11 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v127 + 72 * v130), (char *)(v127 + 72 * *(void *)&v126[16 * v11 + 16]), (char *)(v127 + 72 * v131), v144);
            if (v146) {
              break;
            }
            if (v131 < v130) {
              goto LABEL_205;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v129);
            }
            if (v128 >= *((void *)v129 + 2)) {
              goto LABEL_206;
            }
            uint64_t v132 = &v129[16 * v128 + 32];
            *(void *)uint64_t v132 = v130;
            *((void *)v132 + 1) = v131;
            uint64_t v133 = *((void *)v129 + 2);
            if (v11 > v133) {
              goto LABEL_207;
            }
            memmove(&v129[16 * v11 + 16], &v129[16 * v11 + 32], 16 * (v133 - v11));
            v126 = v129;
            *((void *)v129 + 2) = v133 - 1;
            uint64_t v11 = v133 - 1;
          }
          while (v133 > 2);
        }
LABEL_147:
        swift_bridgeObjectRelease();
        *(void *)(v136 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      v136 = MEMORY[0x1E4FBC860];
    }
    else
    {
      Swift::Int v6 = v5 >> 1;
      uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v7 + 16) = v6;
      v136 = v7;
      v144 = (char *)(v7 + 32);
    }
    uint64_t v9 = 0;
    v135 = v2;
    Swift::Int v10 = *v2;
    v145 = (char *)MEMORY[0x1E4FBC860];
    v138 = v3;
LABEL_16:
    unint64_t v12 = v9++;
    if (v9 >= v3) {
      goto LABEL_65;
    }
    Swift::Int v13 = *(void *)(v10 + 72 * v9);
    double v14 = *(void *)(v10 + 72 * v12);
    double v15 = *(double *)(v13 + 168);
    uint64_t v16 = *(double *)(v14 + 168);
    if (v15 == v16)
    {
      if (*(unsigned char *)(v13 + 165))
      {
        if ((*(unsigned char *)(v14 + 165) & 1) == 0 && (*(unsigned char *)(v14 + 166) & 1) == 0)
        {
          double v17 = 1;
LABEL_27:
          double v18 = v17 ^ 1;
          goto LABEL_33;
        }
LABEL_28:
        uint64_t v19 = *(_DWORD *)(v13 + 212);
        uint64_t v20 = *(_DWORD *)(v14 + 212);
        if (v19 == v20)
        {
          if (*(unsigned char *)(v13 + 208)) {
            goto LABEL_224;
          }
          if (*(unsigned char *)(v14 + 208)) {
            goto LABEL_225;
          }
          double v18 = *(void *)(v13 + 200) < *(void *)(v14 + 200);
        }
        else
        {
          double v18 = v19 < v20;
        }
        goto LABEL_33;
      }
      double v17 = *(unsigned __int8 *)(v13 + 166);
      if ((*(unsigned char *)(v14 + 165) & 1) == 0)
      {
        if (v17 != *(unsigned __int8 *)(v14 + 166)) {
          goto LABEL_27;
        }
        goto LABEL_28;
      }
      if (v17) {
        goto LABEL_28;
      }
      double v18 = 1;
    }
    else
    {
      double v18 = v15 < v16;
    }
LABEL_33:
    uint64_t v9 = v12 + 2;
    if (v12 + 2 >= v3)
    {
LABEL_55:
      if (v18) {
        goto LABEL_56;
      }
      goto LABEL_65;
    }
    Swift::Int v21 = v10 + 144 + 72 * v12;
    while (1)
    {
      Swift::Int v22 = v15;
      uint64_t v23 = *(void *)v21;
      double v15 = *(double *)(*(void *)v21 + 168);
      if (v15 == v22)
      {
        if (*(unsigned char *)(v23 + 165))
        {
          if (*(unsigned char *)(v13 + 165) & 1) != 0 || (*(unsigned char *)(v13 + 166))
          {
LABEL_49:
            uint64_t v25 = *(_DWORD *)(v23 + 212);
            long long v26 = *(_DWORD *)(v13 + 212);
            if (v25 == v26)
            {
              if (*(unsigned char *)(v23 + 208)) {
                goto LABEL_222;
              }
              if (*(unsigned char *)(v13 + 208)) {
                goto LABEL_223;
              }
              if (v18 != *(void *)(v23 + 200) < *(void *)(v13 + 200)) {
                goto LABEL_55;
              }
            }
            else if (v18 != v25 < v26)
            {
              goto LABEL_55;
            }
            goto LABEL_36;
          }
          uint64_t v24 = 1;
          goto LABEL_47;
        }
        uint64_t v24 = *(unsigned __int8 *)(v23 + 166);
        if ((*(unsigned char *)(v13 + 165) & 1) == 0)
        {
          if (v24 == *(unsigned __int8 *)(v13 + 166)) {
            goto LABEL_49;
          }
LABEL_47:
          if (v18 != (v24 ^ 1)) {
            goto LABEL_55;
          }
          goto LABEL_36;
        }
        if (v24) {
          goto LABEL_49;
        }
        if (v18 != 1) {
          goto LABEL_55;
        }
      }
      else if (v18 != v15 < v22)
      {
        goto LABEL_55;
      }
LABEL_36:
      ++v9;
      v21 += 72;
      Swift::Int v13 = v23;
      if (v3 == v9)
      {
        uint64_t v9 = v3;
        if (!v18) {
          goto LABEL_65;
        }
LABEL_56:
        if (v9 < v12) {
          goto LABEL_210;
        }
        if (v12 < v9)
        {
          long long v27 = 72 * v9;
          uint64_t v28 = 72 * v12;
          long long v29 = v9;
          uint64_t v134 = v12;
          do
          {
            if (v12 != --v29)
            {
              if (!v10) {
                goto LABEL_220;
              }
              Swift::Int v30 = v10 + v27;
              unint64_t v31 = *(void *)(v10 + v28);
              unint64_t v32 = *(void *)(v10 + v28 + 8);
              uint64_t v143 = *(unsigned char *)(v10 + v28 + 16);
              v142 = *(void *)(v10 + v28 + 24);
              uint64_t v141 = *(unsigned char *)(v10 + v28 + 32);
              uint64_t v139 = *(_OWORD *)(v10 + v28 + 56);
              long long v140 = *(_OWORD *)(v10 + v28 + 40);
              memmove((void *)(v10 + v28), (const void *)(v10 + v27 - 72), 0x48uLL);
              *(void *)(v30 - 72) = v31;
              *(void *)(v30 - 64) = v32;
              *(unsigned char *)(v30 - 56) = v143;
              *(void *)(v30 - 48) = v142;
              *(unsigned char *)(v30 - 40) = v141;
              *(_OWORD *)(v30 - 32) = v140;
              *(_OWORD *)(v30 - 16) = v139;
            }
            ++v12;
            v27 -= 72;
            v28 += 72;
          }
          while (v12 < v29);
          Swift::Int v3 = v138;
          unint64_t v12 = v134;
        }
LABEL_65:
        if (v9 >= v3) {
          goto LABEL_73;
        }
        if (__OFSUB__(v9, v12)) {
          goto LABEL_208;
        }
        if (v9 - v12 >= v137)
        {
LABEL_73:
          uint64_t v34 = v145;
          if (v9 < v12) {
            goto LABEL_203;
          }
          goto LABEL_74;
        }
        unint64_t v33 = v12 + v137;
        if (__OFADD__(v12, v137)) {
          goto LABEL_211;
        }
        if (v33 >= v3) {
          unint64_t v33 = v3;
        }
        if (v33 >= v12)
        {
          if (v9 == v33) {
            goto LABEL_73;
          }
          uint64_t v84 = v10 + 56 + 72 * v9;
          uint64_t v34 = v145;
          while (2)
          {
            uint64_t v85 = *(void *)(v10 + 72 * v9);
            long long v86 = v12;
            long long v87 = v84;
            while (2)
            {
              long long v88 = v87 - 128;
              double v89 = *(void *)(v87 - 128);
              uint64_t v90 = *(double *)(v85 + 168);
              uint64_t v91 = *(double *)(v89 + 168);
              if (v90 == v91)
              {
                if (*(unsigned char *)(v85 + 165))
                {
                  if ((*(unsigned char *)(v89 + 165) & 1) == 0 && (*(unsigned char *)(v89 + 166) & 1) == 0) {
                    break;
                  }
                  goto LABEL_136;
                }
                uint64_t v92 = *(unsigned __int8 *)(v85 + 166);
                if (*(unsigned char *)(v89 + 165))
                {
                  if (v92) {
                    goto LABEL_136;
                  }
                }
                else if (v92 == *(unsigned __int8 *)(v89 + 166))
                {
LABEL_136:
                  uint64_t v93 = *(_DWORD *)(v85 + 212);
                  double v94 = *(_DWORD *)(v89 + 212);
                  if (v93 == v94)
                  {
                    if (*(unsigned char *)(v85 + 208)) {
                      goto LABEL_218;
                    }
                    if (*(unsigned char *)(v89 + 208)) {
                      goto LABEL_217;
                    }
                    if (*(void *)(v85 + 200) >= *(void *)(v89 + 200)) {
                      break;
                    }
                  }
                  else if (v93 >= v94)
                  {
                    break;
                  }
                }
                else if (v92)
                {
                  break;
                }
              }
              else if (v90 >= v91)
              {
                break;
              }
              if (!v10) {
                goto LABEL_214;
              }
              uint64_t v95 = *(void *)(v87 - 64);
              uint64_t v97 = *(_OWORD *)(v87 - 96);
              uint64_t v96 = *(_OWORD *)(v87 - 80);
              *(_OWORD *)(v87 - 72) = *(_OWORD *)v87;
              v87 -= 72;
              long long v98 = *(void *)(v87 + 24);
              long long v99 = *(unsigned char *)(v87 + 32);
              long long v100 = *(void *)(v87 + 40);
              double v101 = *(unsigned char *)(v87 + 48);
              uint64_t v102 = *(_OWORD *)(v87 + 56);
              *(_OWORD *)(v88 + 104) = v97;
              *(_OWORD *)(v88 + 120) = v96;
              *(void *)(v88 + 136) = v95;
              uint64_t v103 = *(_OWORD *)(v88 + 16);
              *(_OWORD *)(v88 + 72) = *(_OWORD *)v88;
              *(_OWORD *)(v88 + 88) = v103;
              *(void *)(v87 - 56) = v85;
              *(void *)(v87 - 48) = v98;
              *(unsigned char *)(v87 - 40) = v99;
              *(void *)(v87 - 32) = v100;
              *(unsigned char *)(v87 - 24) = v101;
              ++v86;
              *(_OWORD *)(v87 - 16) = v102;
              if (v9 != v86) {
                continue;
              }
              break;
            }
            ++v9;
            v84 += 72;
            if (v9 != v33) {
              continue;
            }
            break;
          }
          uint64_t v9 = v33;
          if (v33 < v12) {
            goto LABEL_203;
          }
LABEL_74:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, v34);
          }
          unint64_t v36 = *((void *)v34 + 2);
          uint64_t v35 = *((void *)v34 + 3);
          uint64_t v11 = v36 + 1;
          if (v36 >= v35 >> 1) {
            uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v34);
          }
          *((void *)v34 + 2) = v11;
          uint64_t v37 = v34 + 32;
          uint64_t v38 = &v34[16 * v36 + 32];
          *(void *)uint64_t v38 = v12;
          *((void *)v38 + 1) = v9;
          v145 = v34;
          if (v36)
          {
            while (2)
            {
              uint64_t v39 = v11 - 1;
              if (v11 >= 4)
              {
                uint64_t v44 = &v37[16 * v11];
                uint64_t v45 = *((void *)v44 - 8);
                uint64_t v46 = *((void *)v44 - 7);
                uint64_t v50 = __OFSUB__(v46, v45);
                BOOL v47 = v46 - v45;
                if (v50) {
                  goto LABEL_192;
                }
                id v49 = *((void *)v44 - 6);
                unint64_t v48 = *((void *)v44 - 5);
                uint64_t v50 = __OFSUB__(v48, v49);
                uint64_t v42 = v48 - v49;
                uint64_t v43 = v50;
                if (v50) {
                  goto LABEL_193;
                }
                uint64_t v51 = v11 - 2;
                uint64_t v52 = &v37[16 * v11 - 32];
                long long v54 = *(void *)v52;
                uint64_t v53 = *((void *)v52 + 1);
                uint64_t v50 = __OFSUB__(v53, v54);
                uint64_t v55 = v53 - v54;
                if (v50) {
                  goto LABEL_195;
                }
                uint64_t v50 = __OFADD__(v42, v55);
                uint64_t v56 = v42 + v55;
                if (v50) {
                  goto LABEL_198;
                }
                if (v56 >= v47)
                {
                  uint64_t v74 = &v37[16 * v39];
                  uint64_t v76 = *(void *)v74;
                  unint64_t v75 = *((void *)v74 + 1);
                  uint64_t v50 = __OFSUB__(v75, v76);
                  uint64_t v77 = v75 - v76;
                  if (v50) {
                    goto LABEL_202;
                  }
                  char v67 = v42 < v77;
                }
                else
                {
LABEL_92:
                  if (v43) {
                    goto LABEL_194;
                  }
                  uint64_t v51 = v11 - 2;
                  BOOL v57 = &v37[16 * v11 - 32];
                  char v59 = *(void *)v57;
                  uint64_t v58 = *((void *)v57 + 1);
                  uint64_t v60 = __OFSUB__(v58, v59);
                  uint64_t v61 = v58 - v59;
                  uint64_t v62 = v60;
                  if (v60) {
                    goto LABEL_197;
                  }
                  uint64_t v63 = &v37[16 * v39];
                  uint64_t v65 = *(void *)v63;
                  BOOL v64 = *((void *)v63 + 1);
                  uint64_t v50 = __OFSUB__(v64, v65);
                  uint64_t v66 = v64 - v65;
                  if (v50) {
                    goto LABEL_200;
                  }
                  if (__OFADD__(v61, v66)) {
                    goto LABEL_201;
                  }
                  if (v61 + v66 < v42) {
                    goto LABEL_104;
                  }
                  char v67 = v42 < v66;
                }
                if (v67) {
                  uint64_t v39 = v51;
                }
              }
              else
              {
                if (v11 == 3)
                {
                  uint64_t v41 = *((void *)v34 + 4);
                  char v40 = *((void *)v34 + 5);
                  uint64_t v50 = __OFSUB__(v40, v41);
                  uint64_t v42 = v40 - v41;
                  uint64_t v43 = v50;
                  goto LABEL_92;
                }
                uint64_t v68 = *((void *)v34 + 4);
                uint64_t v69 = *((void *)v34 + 5);
                uint64_t v50 = __OFSUB__(v69, v68);
                uint64_t v61 = v69 - v68;
                uint64_t v62 = v50;
LABEL_104:
                if (v62) {
                  goto LABEL_196;
                }
                uint64_t v70 = &v37[16 * v39];
                uint64_t v72 = *(void *)v70;
                uint64_t v71 = *((void *)v70 + 1);
                uint64_t v50 = __OFSUB__(v71, v72);
                uint64_t v73 = v71 - v72;
                if (v50) {
                  goto LABEL_199;
                }
                if (v73 < v61) {
                  goto LABEL_15;
                }
              }
              uint64_t v78 = v39 - 1;
              if (v39 - 1 >= v11)
              {
                __break(1u);
LABEL_189:
                __break(1u);
LABEL_190:
                __break(1u);
LABEL_191:
                __break(1u);
LABEL_192:
                __break(1u);
LABEL_193:
                __break(1u);
LABEL_194:
                __break(1u);
LABEL_195:
                __break(1u);
LABEL_196:
                __break(1u);
LABEL_197:
                __break(1u);
LABEL_198:
                __break(1u);
LABEL_199:
                __break(1u);
LABEL_200:
                __break(1u);
LABEL_201:
                __break(1u);
LABEL_202:
                __break(1u);
LABEL_203:
                __break(1u);
LABEL_204:
                __break(1u);
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
LABEL_211:
                __break(1u);
                goto LABEL_212;
              }
              if (!v10) {
                goto LABEL_219;
              }
              uint64_t v79 = &v37[16 * v78];
              unint64_t v80 = *(void *)v79;
              uint64_t v81 = &v37[16 * v39];
              double v82 = *((void *)v81 + 1);
              specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 72 * *(void *)v79), (char *)(v10 + 72 * *(void *)v81), (char *)(v10 + 72 * v82), v144);
              if (v146) {
                goto LABEL_147;
              }
              if (v82 < v80) {
                goto LABEL_189;
              }
              if (v39 > *((void *)v145 + 2)) {
                goto LABEL_190;
              }
              *(void *)uint64_t v79 = v80;
              *(void *)&v37[16 * v78 + 8] = v82;
              Swift::Int v83 = *((void *)v145 + 2);
              if (v39 >= v83) {
                goto LABEL_191;
              }
              uint64_t v34 = v145;
              uint64_t v11 = v83 - 1;
              memmove(&v37[16 * v39], v81 + 16, 16 * (v83 - 1 - v39));
              *((void *)v145 + 2) = v83 - 1;
              if (v83 <= 2) {
                goto LABEL_15;
              }
              continue;
            }
          }
          uint64_t v11 = 1;
LABEL_15:
          Swift::Int v3 = v138;
          if (v9 >= v138)
          {
            uint64_t v8 = v136;
            v126 = v145;
            uint64_t v2 = v135;
            goto LABEL_175;
          }
          goto LABEL_16;
        }
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
        goto LABEL_216;
      }
    }
  }
  if (v3 < 0) {
    goto LABEL_209;
  }
  if ((unint64_t)v3 < 2) {
    return result;
  }
  uint64_t v104 = *v2;
  unint64_t v105 = *v2 + 128;
  uint64_t v106 = -1;
  uint64_t v107 = 1;
LABEL_150:
  uint64_t v108 = *(void *)(v104 + 72 * v107);
  uint64_t v109 = v106;
  unint64_t v110 = v105;
  while (1)
  {
    uint64_t v111 = v110 - 128;
    uint64_t v112 = *(void *)(v110 - 128);
    Swift::Int v113 = *(double *)(v108 + 168);
    Swift::Int v114 = *(double *)(v112 + 168);
    if (v113 != v114)
    {
      if (v113 >= v114) {
        goto LABEL_149;
      }
      goto LABEL_170;
    }
    if (*(unsigned char *)(v108 + 165)) {
      break;
    }
    uint64_t v115 = *(unsigned __int8 *)(v108 + 166);
    if (*(unsigned char *)(v112 + 165))
    {
      if (v115) {
        goto LABEL_164;
      }
    }
    else
    {
      Swift::Int result = *(unsigned __int8 *)(v112 + 166);
      if (v115 == result) {
        goto LABEL_164;
      }
      if (v115) {
        goto LABEL_149;
      }
    }
LABEL_170:
    if (!v104) {
      goto LABEL_213;
    }
    uint64_t v117 = *(void *)(v110 - 64);
    uint64_t v119 = *(_OWORD *)(v110 - 96);
    uint64_t v118 = *(_OWORD *)(v110 - 80);
    *(_OWORD *)(v110 - 72) = *(_OWORD *)v110;
    v110 -= 72;
    Swift::Int result = *(void *)(v110 + 24);
    uint64_t v120 = *(unsigned char *)(v110 + 32);
    uint64_t v121 = *(void *)(v110 + 40);
    uint64_t v122 = *(unsigned char *)(v110 + 48);
    uint64_t v123 = *(_OWORD *)(v110 + 56);
    *(_OWORD *)(v111 + 104) = v119;
    *(_OWORD *)(v111 + 120) = v118;
    *(void *)(v111 + 136) = v117;
    uint64_t v124 = *(_OWORD *)(v111 + 16);
    *(_OWORD *)(v111 + 72) = *(_OWORD *)v111;
    *(_OWORD *)(v111 + 88) = v124;
    *(void *)(v110 - 56) = v108;
    *(void *)(v110 - 48) = result;
    *(unsigned char *)(v110 - 40) = v120;
    *(void *)(v110 - 32) = v121;
    *(unsigned char *)(v110 - 24) = v122;
    *(_OWORD *)(v110 - 16) = v123;
    if (__CFADD__(v109++, 1))
    {
LABEL_149:
      ++v107;
      v105 += 72;
      --v106;
      if (v107 == v3) {
        return result;
      }
      goto LABEL_150;
    }
  }
  if ((*(unsigned char *)(v112 + 165) & 1) == 0 && (*(unsigned char *)(v112 + 166) & 1) == 0) {
    goto LABEL_149;
  }
LABEL_164:
  uint64_t v116 = *(_DWORD *)(v108 + 212);
  Swift::Int result = *(unsigned int *)(v112 + 212);
  if (v116 != result)
  {
    if (v116 >= result) {
      goto LABEL_149;
    }
    goto LABEL_170;
  }
  if (*(unsigned char *)(v108 + 208)) {
    goto LABEL_215;
  }
  if ((*(unsigned char *)(v112 + 208) & 1) == 0)
  {
    if (*(void *)(v108 + 200) >= *(void *)(v112 + 200)) {
      goto LABEL_149;
    }
    goto LABEL_170;
  }
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = ((char *)a2 - (char *)__src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  long long v29 = __src;
  uint64_t v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[5 * v11] <= __dst) {
        memmove(__dst, a2, 40 * v11);
      }
      double v18 = &v4[5 * v11];
      long long v27 = (char *)v18;
      long long v29 = v6;
      if (v7 < v6 && v10 >= 40)
      {
        unint64_t v19 = a3 - 40;
        do
        {
          uint64_t v20 = (double *)(v19 + 40);
          if (*(v18 - 1) >= *(v6 - 1))
          {
            long long v27 = (char *)(v18 - 5);
            if (v20 < v18 || v19 >= (unint64_t)v18 || v20 != v18)
            {
              long long v24 = *(_OWORD *)(v18 - 5);
              long long v25 = *(_OWORD *)(v18 - 3);
              *(double *)(v19 + 32) = *(v18 - 1);
              *(_OWORD *)unint64_t v19 = v24;
              *(_OWORD *)(v19 + 16) = v25;
            }
            Swift::Int v21 = v6;
            v18 -= 5;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            Swift::Int v21 = v6 - 5;
            if (v20 != v6 || v19 >= (unint64_t)v6)
            {
              long long v22 = *(_OWORD *)v21;
              long long v23 = *(_OWORD *)(v6 - 3);
              *(double *)(v19 + 32) = *(v6 - 1);
              *(_OWORD *)unint64_t v19 = v22;
              *(_OWORD *)(v19 + 16) = v23;
            }
            long long v29 = v6 - 5;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 40;
          Swift::Int v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, (const void **)&v28, &v27);
      return 1;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[5 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    unint64_t v12 = &v4[5 * v9];
    long long v27 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      Swift::Int v13 = v4;
      while (1)
      {
        if (v6[4] >= v13[4])
        {
          uint64_t v4 = v13 + 5;
          double v15 = v13;
          double v14 = v6;
          if (v7 == v13)
          {
            v13 += 5;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 5;
          }
        }
        else
        {
          double v14 = v6 + 5;
          double v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        long long v16 = *(_OWORD *)v15;
        long long v17 = *((_OWORD *)v15 + 1);
        v7[4] = v15[4];
        *(_OWORD *)uint64_t v7 = v16;
        *((_OWORD *)v7 + 1) = v17;
LABEL_18:
        v7 += 5;
        if (v13 < v12)
        {
          Swift::Int v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        uint64_t v28 = v4;
        long long v29 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  unint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    unint64_t v12 = a3 - (void)a2;
  }
  Swift::Int v13 = v12 >> 4;
  long long v24 = __src;
  long long v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      long long v16 = &v4[2 * v13];
      long long v22 = v16;
      long long v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        long long v17 = (double *)(a3 - 16);
        double v18 = v6;
        while (1)
        {
          unint64_t v19 = v17 + 2;
          uint64_t v20 = *(v18 - 2);
          v18 -= 2;
          if (*(v16 - 2) >= v20)
          {
            long long v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)long long v17 = *((_OWORD *)v16 - 1);
            }
            double v18 = v6;
            v16 -= 2;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)long long v17 = *(_OWORD *)v18;
            }
            long long v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 2;
          Swift::Int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    double v14 = &v4[2 * v10];
    long long v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 2;
          long long v23 = v4;
          double v15 = v6;
        }
        else
        {
          double v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 2;
        if (v4 >= v14) {
          break;
        }
        Swift::Int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      long long v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t result;
  char *v23;
  double *v24;
  double *v25;

  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  unint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    unint64_t v12 = a3 - (void)a2;
  }
  Swift::Int v13 = v12 >> 4;
  long long v25 = __src;
  long long v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      double v18 = &v4[2 * v13];
      long long v23 = (char *)v18;
      long long v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        unint64_t v19 = (double *)(a3 - 16);
        do
        {
          uint64_t v20 = v19 + 2;
          if (*(v18 - 1) <= *(v6 - 1))
          {
            Swift::Int v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6) {
              *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
            }
            long long v25 = v6 - 2;
            if (v21 <= v7) {
              break;
            }
          }
          else
          {
            long long v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              *(_OWORD *)unint64_t v19 = *((_OWORD *)v18 - 1);
            }
            Swift::Int v21 = v6;
            v18 -= 2;
            if (v6 <= v7) {
              break;
            }
          }
          v19 -= 2;
          Swift::Int v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    double v14 = &v4[2 * v10];
    long long v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      double v15 = v4;
      while (1)
      {
        if (v6[1] <= v15[1])
        {
          long long v17 = v6 + 2;
          long long v16 = v6;
          if (v7 == v6 && v7 < v17) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v4 = v15 + 2;
          long long v16 = v15;
          long long v17 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 2;
          }
        }
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          Swift::Int v6 = v17;
          if ((unint64_t)v17 < a3) {
            continue;
          }
        }
        long long v24 = v4;
        long long v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  unint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    unint64_t v12 = a3 - (void)a2;
  }
  Swift::Int v13 = v12 >> 4;
  long long v24 = __src;
  long long v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      long long v16 = &v4[2 * v13];
      long long v22 = v16;
      long long v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        long long v17 = (double *)(a3 - 16);
        double v18 = v6;
        while (1)
        {
          unint64_t v19 = v17 + 2;
          uint64_t v20 = *(v18 - 2);
          v18 -= 2;
          if (*(v16 - 2) <= v20)
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)long long v17 = *(_OWORD *)v18;
            }
            long long v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            long long v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)long long v17 = *((_OWORD *)v16 - 1);
            }
            double v18 = v6;
            v16 -= 2;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 2;
          Swift::Int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    double v14 = &v4[2 * v10];
    long long v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 <= *v4)
        {
          double v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        else
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 2;
          long long v23 = v4;
          double v15 = v6;
        }
        v7 += 2;
        if (v4 >= v14) {
          break;
        }
        Swift::Int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      long long v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double *v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  double v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  uint64_t result;
  char *v59;
  double *v60;
  double *v61;

  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 63;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = a3 - (void)a2;
  unint64_t v12 = a3 - (void)a2 + 63;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    unint64_t v12 = a3 - (void)a2;
  }
  Swift::Int v13 = v12 >> 6;
  uint64_t v60 = __dst;
  uint64_t v61 = __src;
  if (v10 >= v13)
  {
    if (v11 < -63) {
      goto LABEL_67;
    }
    uint64_t v34 = v13 << 6;
    if (__dst != a2 || (double *)((char *)a2 + v34) <= __dst) {
      memmove(__dst, a2, v13 << 6);
    }
    uint64_t v35 = (double *)((char *)v4 + v34);
    char v59 = (char *)v4 + v34;
    uint64_t v61 = v6;
    if (v7 >= v6 || (unint64_t)(v11 - 64) > 0xFFFFFFFFFFFFFF80)
    {
LABEL_66:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v61, (const void **)&v60, &v59);
      return 1;
    }
    unint64_t v36 = (double *)(a3 - 64);
    uint64_t v37 = v6;
    while (1)
    {
      uint64_t v38 = v36 + 8;
      uint64_t v39 = *(v35 - 7);
      uint64_t v41 = *((void *)v37 - 8);
      v37 -= 8;
      char v40 = v41;
      uint64_t v42 = v37[1];
      if (v39 == v42)
      {
        uint64_t v43 = *(v35 - 4);
        uint64_t v44 = v37[4];
        uint64_t v45 = v43 < v44;
        if (v43 == v44
          && (uint64_t v46 = *(v35 - 3), v47 = v37[5], v45 = v46 < v47, v46 == v47)
          && (unint64_t v48 = *(v35 - 2), v49 = v37[6], v45 = v48 < v49, v48 == v49))
        {
          uint64_t v50 = *((char *)v35 - 8);
          uint64_t v51 = *((char *)v37 + 56);
          if (v50 == v51)
          {
            if (*((void *)v35 - 8) >= v40) {
              goto LABEL_56;
            }
          }
          else if (v50 >= v51)
          {
LABEL_56:
            char v59 = (char *)(v35 - 8);
            if (v38 < v35 || v36 >= v35 || v38 != v35)
            {
              uint64_t v55 = *((_OWORD *)v35 - 4);
              uint64_t v56 = *((_OWORD *)v35 - 3);
              BOOL v57 = *((_OWORD *)v35 - 1);
              *((_OWORD *)v36 + 2) = *((_OWORD *)v35 - 2);
              *((_OWORD *)v36 + 3) = v57;
              *(_OWORD *)unint64_t v36 = v55;
              *((_OWORD *)v36 + 1) = v56;
            }
            uint64_t v37 = v6;
            v35 -= 8;
            if (v6 <= v7) {
              goto LABEL_66;
            }
            goto LABEL_61;
          }
        }
        else if (!v45)
        {
          goto LABEL_56;
        }
      }
      else if (v42 >= v39)
      {
        goto LABEL_56;
      }
      if (v38 != v6 || v36 >= v6)
      {
        uint64_t v52 = *(_OWORD *)v37;
        uint64_t v53 = *((_OWORD *)v37 + 1);
        long long v54 = *((_OWORD *)v37 + 3);
        *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
        *((_OWORD *)v36 + 3) = v54;
        *(_OWORD *)unint64_t v36 = v52;
        *((_OWORD *)v36 + 1) = v53;
      }
      uint64_t v61 = v37;
      if (v37 <= v7) {
        goto LABEL_66;
      }
LABEL_61:
      v36 -= 8;
      Swift::Int v6 = v37;
      if (v35 <= v4) {
        goto LABEL_66;
      }
    }
  }
  if (v8 >= -63)
  {
    double v14 = v10 << 6;
    if (__dst != __src || (double *)((char *)__src + v14) <= __dst) {
      memmove(__dst, __src, v14);
    }
    double v15 = (double *)((char *)v4 + v14);
    char v59 = (char *)v4 + v14;
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 64) <= 0xFFFFFFFFFFFFFF80)
    {
      while (1)
      {
        long long v16 = v6[1];
        long long v17 = v4[1];
        if (v16 == v17)
        {
          double v18 = v6[4];
          unint64_t v19 = v4[4];
          uint64_t v20 = v18 < v19;
          if (v18 == v19
            && (v21 = v6[5], v22 = v4[5], uint64_t v20 = v21 < v22, v21 == v22)
            && (v23 = v6[6], v24 = v4[6], uint64_t v20 = v23 < v24, v23 == v24))
          {
            long long v25 = *((char *)v6 + 56);
            long long v26 = *((char *)v4 + 56);
            if (v25 == v26)
            {
              if (*(void *)v6 < *(void *)v4) {
                goto LABEL_21;
              }
            }
            else if (v25 < v26)
            {
LABEL_21:
              long long v27 = v6 + 8;
              if (v7 < v6 || v7 >= v27 || v7 != v6)
              {
                uint64_t v28 = *(_OWORD *)v6;
                long long v29 = *((_OWORD *)v6 + 1);
                Swift::Int v30 = *((_OWORD *)v6 + 3);
                *((_OWORD *)v7 + 2) = *((_OWORD *)v6 + 2);
                *((_OWORD *)v7 + 3) = v30;
                *(_OWORD *)uint64_t v7 = v28;
                *((_OWORD *)v7 + 1) = v29;
              }
              goto LABEL_29;
            }
          }
          else if (v20)
          {
            goto LABEL_21;
          }
        }
        else if (v17 < v16)
        {
          goto LABEL_21;
        }
        if (v7 != v4)
        {
          unint64_t v31 = *(_OWORD *)v4;
          unint64_t v32 = *((_OWORD *)v4 + 1);
          unint64_t v33 = *((_OWORD *)v4 + 3);
          *((_OWORD *)v7 + 2) = *((_OWORD *)v4 + 2);
          *((_OWORD *)v7 + 3) = v33;
          *(_OWORD *)uint64_t v7 = v31;
          *((_OWORD *)v7 + 1) = v32;
        }
        v4 += 8;
        uint64_t v60 = v4;
        long long v27 = v6;
LABEL_29:
        v7 += 8;
        if (v4 < v15)
        {
          Swift::Int v6 = v27;
          if ((unint64_t)v27 < a3) {
            continue;
          }
        }
        uint64_t v61 = v7;
        goto LABEL_66;
      }
    }
    goto LABEL_66;
  }
LABEL_67:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in AccessibilityAdjustableModifier.body(content:)@<X0>(char *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  char v4 = *a1;
  uint64_t v5 = (void (*)(uint64_t))a2[5];
  Swift::Int v6 = (void (*)(uint64_t))a2[7];
  uint64_t v7 = (uint64_t (*)(uint64_t))a2[11];
  uint64_t v8 = v7(1);
  if (v4)
  {
    uint64_t v5 = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v5) {
LABEL_5:
  }
    v5(v8);
LABEL_6:
  *a3 = 2;
  return v7(0);
}

uint64_t partial apply for specialized closure #1 in AccessibilityAdjustableModifier.body(content:)@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized closure #1 in AccessibilityAdjustableModifier.body(content:)(a1, (void *)(v2 + 16), a2);
}

void type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>)
  {
    type metadata accessor for SliderMark<Double>(255, &lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityAdjustableAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction, (uint64_t)&type metadata for AccessibilityAdjustableAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityAdjustableAction> and conformance AccessibilityActionStorage<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilityAdjustableAction> and conformance AccessibilityActionStorage<A>, &lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityAdjustableAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction, (uint64_t)&type metadata for AccessibilityAdjustableAction);
    unint64_t v0 = type metadata accessor for AnyAccessibilityAction.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>);
    }
  }
}

uint64_t sub_187905378()
{
  if (*(void *)(v0 + 48) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 80))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined retain of AccessibilityAdjustableModifier<ResolvedSliderStyle, AccessibilitySliderValue>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  outlined copy of AccessibilitySliderValue?(*(id *)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24));
  outlined copy of AppIntentExecutor?(v2);
  outlined copy of AppIntentExecutor?(v3);
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void (**)(uint64_t *))(v1 + 88);
  char v4 = *(void (**)(uint64_t))(v1 + 104);
  v4(1);
  uint64_t v6 = v2;
  v3(&v6);
  return ((uint64_t (*)(void))v4)(0);
}

uint64_t sub_1879055EC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  char v4 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v6 = *a1;
  uint64_t result = v4(&v6);
  *a2 = 2;
  return result;
}

void type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilitySetValueAction>>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilitySetValueAction>>)
  {
    type metadata accessor for SliderMark<Double>(255, &lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilitySetValueAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction, (uint64_t)&type metadata for AccessibilitySetValueAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityAdjustableAction> and conformance AccessibilityActionStorage<A>(&lazy protocol witness table cache variable for type AccessibilityActionStorage<AccessibilitySetValueAction> and conformance AccessibilityActionStorage<A>, &lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilitySetValueAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySetValueAction and conformance AccessibilitySetValueAction, (uint64_t)&type metadata for AccessibilitySetValueAction);
    unint64_t v0 = type metadata accessor for AnyAccessibilityAction.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilitySetValueAction>>);
    }
  }
}

void type metadata accessor for SliderMark<Double>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityAdjustableAction> and conformance AccessibilityActionStorage<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SliderMark<Double>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187905804()
{
  if (*(void *)(v0 + 40) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata completion function for Normalizing()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    unint64_t v4 = v3;
    uint64_t v0 = type metadata accessor for Optional();
    if (v5 <= 0x3F)
    {
      if (v4 > 0x3F)
      {
        return AssociatedTypeWitness;
      }
      else
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Normalizing(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  uint64_t v10 = v7 + v8;
  uint64_t v11 = (v7 + v9) & ~v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v7 + v14;
  uint64_t v16 = *(void *)(v13 + 64);
  if (*(_DWORD *)(v13 + 84)) {
    size_t v17 = *(void *)(v13 + 64);
  }
  else {
    size_t v17 = v16 + 1;
  }
  if ((v14 | (unint64_t)v8) > 7
    || ((*(_DWORD *)(v13 + 80) | v8) & 0x100000) != 0
    || ((v17 + v14 + ((v17 + v14 + ((v15 + v11) & ~v14)) & ~v14)) & ~v14) + v16 > 0x18)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + (((v14 | v8) + 16) & ~(v14 | v8)));
    swift_retain();
  }
  else
  {
    uint64_t v31 = AssociatedTypeWitness;
    size_t v32 = v17 + v14;
    size_t __n = v17;
    uint64_t v30 = ~v14;
    Swift::Int v21 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v21(a1, a2, v5);
    unint64_t v22 = ((unint64_t)a2 + v10) & ~v9;
    v21((uint64_t *)(((unint64_t)a1 + v10) & ~v9), (uint64_t *)v22, v5);
    long long v23 = (void *)(((((unint64_t)a1 + v10) & ~v9) + v15) & v30);
    long long v24 = (const void *)((v22 + v15) & v30);
    long long v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
    if (v25(v24, 1, v31))
    {
      memcpy(v23, v24, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v23, v24, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v23, 0, 1, v31);
    }
    long long v26 = (void *)(((unint64_t)v23 + v32) & v30);
    long long v27 = (const void *)(((unint64_t)v24 + v32) & v30);
    if (v25(v27, 1, v31))
    {
      memcpy(v26, v27, __n);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((unint64_t)v26 + v32) & v30, ((unint64_t)v27 + v32) & v30, v31);
    }
    else
    {
      uint64_t v28 = *(void (**)(void *, const void *, uint64_t))(v13 + 16);
      v28(v26, v27, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v31);
      v28((void *)(((unint64_t)v26 + v32) & v30), (const void *)(((unint64_t)v27 + v32) & v30), v31);
    }
  }
  return a1;
}

uint64_t destroy for Normalizing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(a1, v3);
  uint64_t v6 = *(void *)(v4 + 64);
  unint64_t v7 = (v6 + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v5(v7, v3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = v7 + v6 + v10;
  uint64_t v12 = ~v10;
  uint64_t v20 = v9;
  uint64_t v13 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v13(v11 & ~v10, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v20 + 8))(v11 & ~v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v20 + 84)) {
    uint64_t v14 = *(void *)(v20 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v20 + 64) + 1;
  }
  uint64_t v15 = ((v11 | v10) + v14) & v12;
  unsigned int v16 = v13(v15, 1, AssociatedTypeWitness);
  size_t v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  if (!v16)
  {
    unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v15, AssociatedTypeWitness);
    size_t v17 = v19;
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v17)((v14 + v10 + v15) & v12, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Normalizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v27 = a1;
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v8 + v14 + v10;
  uint64_t v16 = v8 + v14 + v11;
  long long v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  uint64_t v26 = ~v14;
  if (v25(v16 & ~v14, 1, AssociatedTypeWitness))
  {
    int v17 = *(_DWORD *)(v13 + 84);
    size_t v18 = *(void *)(v13 + 64);
    if (v17) {
      size_t v19 = *(void *)(v13 + 64);
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy((void *)(v15 & ~v14), (const void *)(v16 & ~v14), v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15 & ~v14, v16 & ~v14, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15 & ~v14, 0, 1, AssociatedTypeWitness);
    int v17 = *(_DWORD *)(v13 + 84);
    size_t v18 = *(void *)(v13 + 64);
  }
  if (v17) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v18 + 1;
  }
  Swift::Int v21 = (void *)(((v15 | v14) + v20) & v26);
  unint64_t v22 = (const void *)(((v16 | v14) + v20) & v26);
  if (v25((uint64_t)v22, 1, AssociatedTypeWitness))
  {
    memcpy(v21, v22, v20);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((unint64_t)v21 + v20 + v14) & v26, ((unint64_t)v22 + v20 + v14) & v26, AssociatedTypeWitness);
  }
  else
  {
    long long v23 = *(void (**)(void *, const void *, uint64_t))(v13 + 16);
    v23(v21, v22, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, AssociatedTypeWitness);
    v23((void *)(((unint64_t)v21 + v20 + v14) & v26), (const void *)(((unint64_t)v22 + v20 + v14) & v26), AssociatedTypeWitness);
  }
  return v27;
}

uint64_t assignWithCopy for Normalizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v30 = a1;
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v8 + v14;
  uint64_t v16 = v8 + v14 + v10;
  uint64_t v29 = ~v14;
  uint64_t v17 = v15 + v11;
  size_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v18(v16 & ~v14, 1, AssociatedTypeWitness);
  int v19 = v18(v17 & ~v14, 1, AssociatedTypeWitness);
  if (v10)
  {
    if (!v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16 & ~v14, v17 & ~v14, AssociatedTypeWitness);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16 & ~v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v16 & ~v14, v17 & ~v14, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16 & ~v14, AssociatedTypeWitness);
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy((void *)(v16 & ~v14), (const void *)(v17 & ~v14), v22);
LABEL_12:
  if (*(_DWORD *)(v13 + 84)) {
    size_t v23 = *(void *)(v13 + 64);
  }
  else {
    size_t v23 = *(void *)(v13 + 64) + 1;
  }
  long long v24 = (void *)(((v16 | v14) + v23) & v29);
  long long v25 = (const void *)(((v17 | v14) + v23) & v29);
  int v26 = v18((uint64_t)v24, 1, AssociatedTypeWitness);
  int v27 = v18((uint64_t)v25, 1, AssociatedTypeWitness);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v24, v25, AssociatedTypeWitness);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v24, AssociatedTypeWitness);
    goto LABEL_20;
  }
  if (v27)
  {
LABEL_20:
    memcpy(v24, v25, v23);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v24, v25, AssociatedTypeWitness);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v24, 0, 1, AssociatedTypeWitness);
LABEL_21:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 24))(((unint64_t)v24 + v23 + v14) & v29, ((unint64_t)v25 + v23 + v14) & v29, AssociatedTypeWitness);
  return v30;
}

uint64_t initializeWithTake for Normalizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v27 = a1;
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v8 + v14 + v10;
  uint64_t v16 = v8 + v14 + v11;
  long long v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  uint64_t v26 = ~v14;
  if (v25(v16 & ~v14, 1, AssociatedTypeWitness))
  {
    int v17 = *(_DWORD *)(v13 + 84);
    size_t v18 = *(void *)(v13 + 64);
    if (v17) {
      size_t v19 = *(void *)(v13 + 64);
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy((void *)(v15 & ~v14), (const void *)(v16 & ~v14), v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v15 & ~v14, v16 & ~v14, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15 & ~v14, 0, 1, AssociatedTypeWitness);
    int v17 = *(_DWORD *)(v13 + 84);
    size_t v18 = *(void *)(v13 + 64);
  }
  if (v17) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v18 + 1;
  }
  size_t v21 = (void *)(((v15 | v14) + v20) & v26);
  size_t v22 = (const void *)(((v16 | v14) + v20) & v26);
  if (v25((uint64_t)v22, 1, AssociatedTypeWitness))
  {
    memcpy(v21, v22, v20);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)v21 + v20 + v14) & v26, ((unint64_t)v22 + v20 + v14) & v26, AssociatedTypeWitness);
  }
  else
  {
    size_t v23 = *(void (**)(void *, const void *, uint64_t))(v13 + 32);
    v23(v21, v22, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, AssociatedTypeWitness);
    v23((void *)(((unint64_t)v21 + v20 + v14) & v26), (const void *)(((unint64_t)v22 + v20 + v14) & v26), AssociatedTypeWitness);
  }
  return v27;
}

uint64_t assignWithTake for Normalizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v30 = a1;
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v8 + v14;
  uint64_t v16 = v8 + v14 + v10;
  uint64_t v29 = ~v14;
  uint64_t v17 = v15 + v11;
  size_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v18(v16 & ~v14, 1, AssociatedTypeWitness);
  int v19 = v18(v17 & ~v14, 1, AssociatedTypeWitness);
  if (v10)
  {
    if (!v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v16 & ~v14, v17 & ~v14, AssociatedTypeWitness);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16 & ~v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v16 & ~v14, v17 & ~v14, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16 & ~v14, AssociatedTypeWitness);
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy((void *)(v16 & ~v14), (const void *)(v17 & ~v14), v22);
LABEL_12:
  if (*(_DWORD *)(v13 + 84)) {
    size_t v23 = *(void *)(v13 + 64);
  }
  else {
    size_t v23 = *(void *)(v13 + 64) + 1;
  }
  long long v24 = (void *)(((v16 | v14) + v23) & v29);
  long long v25 = (const void *)(((v17 | v14) + v23) & v29);
  int v26 = v18((uint64_t)v24, 1, AssociatedTypeWitness);
  int v27 = v18((uint64_t)v25, 1, AssociatedTypeWitness);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v24, v25, AssociatedTypeWitness);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v24, AssociatedTypeWitness);
    goto LABEL_20;
  }
  if (v27)
  {
LABEL_20:
    memcpy(v24, v25, v23);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v24, v25, AssociatedTypeWitness);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v24, 0, 1, AssociatedTypeWitness);
LABEL_21:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 40))(((unint64_t)v24 + v23 + v14) & v29, ((unint64_t)v25 + v23 + v14) & v29, AssociatedTypeWitness);
  return v30;
}

uint64_t getEnumTagSinglePayload for Normalizing(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v11;
  }
  if (v10 > v12) {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(v8 + 64);
  if (v10) {
    uint64_t v17 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v17 = v16 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = v13 + v14;
  uint64_t v19 = v17 + v15;
  if (a2 <= v12) {
    goto LABEL_32;
  }
  uint64_t v20 = ((v19 + ((v19 + ((v13 + v15 + (v18 & ~v14)) & ~v15)) & ~v15)) & ~v15) + v16;
  char v21 = 8 * v20;
  if (v20 <= 3)
  {
    unsigned int v23 = ((a2 - v12 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      int v22 = *(_DWORD *)((char *)a1 + v20);
      if (!v22) {
        goto LABEL_32;
      }
      goto LABEL_22;
    }
    if (v23 > 0xFF)
    {
      int v22 = *(unsigned __int16 *)((char *)a1 + v20);
      if (!*(unsigned __int16 *)((char *)a1 + v20)) {
        goto LABEL_32;
      }
      goto LABEL_22;
    }
    if (v23 < 2)
    {
LABEL_32:
      if (v12)
      {
        if (v7 == v12)
        {
          int v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v27(a1, v7, v5);
        }
        else
        {
          unint64_t v29 = ((((unint64_t)a1 + v18) & ~v14) + v13 + v15) & ~v15;
          if (v11 == v12)
          {
            unsigned int v30 = (*(uint64_t (**)(unint64_t))(v9 + 48))(v29);
            if (v30 >= 2) {
              return v30 - 1;
            }
            else {
              return 0;
            }
          }
          else
          {
            unint64_t v31 = (v19 + ((v19 + v29) & ~v15)) & ~v15;
            size_t v32 = *(uint64_t (**)(unint64_t))(v9 + 48);
            return v32(v31);
          }
        }
      }
      return 0;
    }
  }
  int v22 = *((unsigned __int8 *)a1 + v20);
  if (!*((unsigned char *)a1 + v20)) {
    goto LABEL_32;
  }
LABEL_22:
  int v24 = (v22 - 1) << v21;
  if (v20 > 3) {
    int v24 = 0;
  }
  if (v20)
  {
    if (v20 <= 3) {
      int v25 = v20;
    }
    else {
      int v25 = 4;
    }
    switch(v25)
    {
      case 2:
        int v26 = *a1;
        break;
      case 3:
        int v26 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v26 = *(_DWORD *)a1;
        break;
      default:
        int v26 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v26 = 0;
  }
  return v12 + (v26 | v24) + 1;
}

void storeEnumTagSinglePayload for Normalizing(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v34 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v13 > v15) {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = v16 + v17;
  uint64_t v19 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v20 = *(void *)(v11 + 64);
  if (v13) {
    uint64_t v21 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v21 = v20 + 1;
  }
  uint64_t v22 = v21 + v19;
  size_t v23 = ((v22 + ((v22 + ((v16 + v19 + ((v16 + v17) & ~v17)) & ~v19)) & ~v19)) & ~v19) + v20;
  if (a3 <= v15) {
    goto LABEL_19;
  }
  if (v23 <= 3)
  {
    unsigned int v24 = ((a3 - v15 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v24))
    {
      int v10 = 4;
      if (v15 >= a2) {
        goto LABEL_27;
      }
      goto LABEL_20;
    }
    if (v24 >= 0x100) {
      int v10 = 2;
    }
    else {
      int v10 = v24 > 1;
    }
LABEL_19:
    if (v15 >= a2) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  int v10 = 1;
  if (v15 >= a2)
  {
LABEL_27:
    uint64_t v28 = ~v17;
    uint64_t v29 = ~v19;
    switch(v10)
    {
      case 1:
        a1[v23] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_32;
      case 2:
        *(_WORD *)&a1[v23] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_32;
      case 3:
        goto LABEL_51;
      case 4:
        *(_DWORD *)&a1[v23] = 0;
        goto LABEL_31;
      default:
LABEL_31:
        if (a2)
        {
LABEL_32:
          if (v9 == v15)
          {
            unsigned int v30 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
            v30(a1, a2, v9, v7);
          }
          else
          {
            unint64_t v31 = (((unint64_t)&a1[v18] & v28) + v16 + v19) & v29;
            if (v14 == v15)
            {
              uint64_t v32 = (a2 + 1);
              unint64_t v33 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
            }
            else
            {
              unint64_t v31 = (v22 + ((v22 + v31) & v29)) & v29;
              unint64_t v33 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
              uint64_t v32 = a2;
            }
            v33(v31, v32);
          }
        }
        break;
    }
    return;
  }
LABEL_20:
  unsigned int v25 = ~v15 + a2;
  if (v23 < 4)
  {
    int v26 = (v25 >> (8 * v23)) + 1;
    if (v23)
    {
      int v27 = v25 & ~(-1 << (8 * v23));
      bzero(a1, v23);
      if (v23 == 3)
      {
        *(_WORD *)a1 = v27;
        a1[2] = BYTE2(v27);
      }
      else if (v23 == 2)
      {
        *(_WORD *)a1 = v27;
      }
      else
      {
        *a1 = v27;
      }
    }
  }
  else
  {
    bzero(a1, v23);
    *(_DWORD *)a1 = v25;
    int v26 = 1;
  }
  switch(v10)
  {
    case 1:
      a1[v23] = v26;
      break;
    case 2:
      *(_WORD *)&a1[v23] = v26;
      break;
    case 3:
LABEL_51:
      __break(1u);
      JUMPOUT(0x187907108);
    case 4:
      *(_DWORD *)&a1[v23] = v26;
      break;
    default:
      return;
  }
}

uint64_t base witness table accessor for Equatable in Normalizing<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Clamping<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in Clamping<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in Normalizing<A>()
{
  return swift_getWitnessTable();
}

double specialized Clamping.get(base:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  double result = v6;
  if (v6 < 0.0) {
    double result = 0.0;
  }
  if (result > 1.0) {
    return 1.0;
  }
  return result;
}

uint64_t specialized Clamping.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[0] = a1;
  uint64_t v23 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v21[1] = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v22 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unsigned int v13 = (char *)v21 - v12;
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v21 - v16;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, double))(v8 + 8);
  v18(a1, a2, v15);
  dispatch thunk of BinaryFloatingPoint.init(_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v19 = v22;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  Comparable.clamp(min:max:)();
  ((void (*)(char *, uint64_t))v18)(v19, a2);
  ((void (*)(char *, uint64_t))v18)(v13, a2);
  return ((uint64_t (*)(char *, uint64_t))v18)(v17, a2);
}

uint64_t type metadata completion function for PointerBridge()
{
  return swift_initClassMetadata2();
}

void PointerBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v13 = *a1;
  PreferenceValues.subscript.getter();
  if (v15 == -1
    || ((int v3 = *(_DWORD *)(v1 + direct field offset for PointerBridge.hasHoverEffectSeed), v3 != -1)
      ? (BOOL v4 = v15 == v3)
      : (BOOL v4 = 0),
        !v4))
  {
    uint64_t v5 = direct field offset for PointerBridge.interaction;
    uint64_t v6 = *(void *)(v1 + direct field offset for PointerBridge.interaction);
    if (v6)
    {
      if ((v14 & 1) == 0)
      {
        uint64_t v7 = (void *)MEMORY[0x18C119DF0](v2 + direct field offset for PointerBridge.host);
        if (v7)
        {
          uint64_t v8 = v7;
          objc_msgSend(v7, sel_removeInteraction_, v6, v13);

          id v9 = 0;
LABEL_13:
          uint64_t v12 = *(void **)(v2 + v5);
          *(void *)(v2 + v5) = v9;

          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_17;
      }
    }
    else if (v14)
    {
      id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1AC8]), sel_initWithDelegate_, v2, v13);
      uint64_t v10 = (void *)MEMORY[0x18C119DF0](v2 + direct field offset for PointerBridge.host);
      if (v10)
      {
        uint64_t v11 = v10;
        objc_msgSend(v10, sel_addInteraction_, v9);

        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_14:
    *(_DWORD *)(v2 + direct field offset for PointerBridge.hasHoverEffectSeed) = v15;
  }
}

id PointerBridge.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for PointerBridge.interaction] = 0;
  *(_DWORD *)&v0[direct field offset for PointerBridge.hasHoverEffectSeed] = 0;
  id v2 = objc_msgSend(self, sel_currentDevice);
  objc_msgSend(v2, sel_userInterfaceIdiom);

  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id @objc PointerBridge.init()()
{
  return PointerBridge.init()();
}

uint64_t PointerBridge.hoverEffectResponder(for:)(void *a1)
{
  uint64_t v3 = v1 + direct field offset for PointerBridge.host;
  uint64_t result = MEMORY[0x18C119DF0](v3);
  if (result)
  {
    uint64_t v5 = (void *)result;
    objc_msgSend(a1, sel_location);
    objc_msgSend(v5, sel_convertPoint_toView_, 0);

    uint64_t result = MEMORY[0x18C119DF0](v3);
    if (result)
    {
      uint64_t v6 = (void *)result;
      type metadata accessor for _UIHostingView();
      swift_getWitnessTable();
      uint64_t v7 = ViewRendererHost.responderNode.getter();

      if (v7)
      {
        type metadata accessor for ViewResponder();
        if (swift_dynamicCastClass())
        {
          uint64_t v8 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
          swift_release();
          if (v8)
          {
            type metadata accessor for HoverEffectResponder();
            ResponderNode.firstAncestor<A>(ofType:)();
            uint64_t v7 = 0;
            swift_release();
            return v7;
          }
        }
        else
        {
          swift_release();
        }
        return 0;
      }
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id @objc PointerBridge.pointerInteraction(_:regionFor:defaultRegion:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = a1;
  uint64_t v12 = (void *)specialized PointerBridge.pointerInteraction(_:regionFor:defaultRegion:)(v9);

  return v12;
}

UIView *@objc PointerBridge.pointerInteraction(_:styleFor:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  id v9 = specialized PointerBridge.pointerInteraction(_:styleFor:)();

  return v9;
}

void @objc PointerBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  id v2 = *(void **)(a1 + direct field offset for PointerBridge.interaction);
}

uint64_t type metadata accessor for PointerBridge()
{
  return __swift_instantiateGenericMetadata();
}

BOOL PointerIdentifier.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for PointerIdentifier();
    if (swift_dynamicCast())
    {
      uint64_t v2 = *(void *)&v4[OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base];

      if (v2) {
        return *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base) == v2;
      }
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t PointerIdentifier.description.getter()
{
  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x800000018832CEC0;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t PointerIdentifier.pointerStyle(host:)(UIView *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UIPointerEffect();
  uint64_t v86 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  id v9 = (uint64_t *)((char *)&v72 - v8);
  type metadata accessor for UIPointerShape?();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (CGFloat *)((char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  int v15 = (CGFloat *)((char *)&v72 - v14);
  uint64_t v16 = 0;
  uint64_t v17 = OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base;
  if (*(unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base)
                + 296) != 3)
  {
    int v83 = *(unsigned __int8 *)(*(void *)(v2
                                         + OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base)
                             + 296);
    uint64_t v84 = v6;
    swift_retain();
    UIViewSnapshotResponder.contentPath.getter((uint64_t)v94);
    uint64_t v80 = *(void *)&v94[0];
    CGFloat y = v94[1];
    CGFloat width = v94[2];
    uint64_t v77 = *(void *)&v94[3];
    LODWORD(v76) = v95;
    swift_release();
    uint64_t v18 = UIView.findPortal(kind:id:excludingGroups:)(4, *(unsigned int *)(*(void *)(v2 + v17) + 300), 0);
    uint64_t v19 = v2;
    uint64_t v20 = v12;
    uint64_t v21 = v18;
    char v23 = v22;
    uint64_t v74 = v19;
    swift_retain();
    id v85 = v21;
    id v24 = objc_msgSend(v85, sel_superview);
    unint64_t v75 = a1;
    uint64_t v81 = v21;
    unsigned int v25 = v21;
    int v26 = v20;
    specialized UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(a1, v25, v23, 2, v24);
    uint64_t v28 = v27;
    swift_release();

    id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B28]), sel_init);
    id v30 = objc_msgSend(self, sel_clearColor);
    id v82 = v29;
    objc_msgSend(v29, sel_setBackgroundColor_, v30);

    uint64_t v31 = type metadata accessor for UIPointerShape();
    uint64_t v32 = *(void *)(v31 - 8);
    unint64_t v33 = *(void (**)(CGFloat *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v33(v15, 1, 1, v31);
    outlined init with take of Path?((uint64_t)v94, (uint64_t)v96);
    if (v97 != 255)
    {
      uint64_t v73 = v32;
      v98[0] = v96[0];
      v98[1] = v96[1];
      unsigned __int8 v99 = v97;
      outlined copy of Path.Storage(v80, *(uint64_t *)&y, *(uint64_t *)&width, v77, v76);
      if (Path.isEmpty.getter())
      {
        outlined release of Path?((uint64_t)v94);
      }
      else
      {
        uint64_t v80 = v4;
        Path.roundedRect()();
        char v34 = v93;
        if (v93 == 2) {
          goto LABEL_10;
        }
        uint64_t v35 = v92;
        uint64_t v36 = v91;
        uint64_t v37 = v90;
        uint64_t v38 = v89;
        uint64_t v39 = v88;
        char v40 = v87;
        if ((v93 & 1) == 0)
        {
          char v93 = 0;
          FixedRoundedRect.rect.getter();
          double v42 = v41;
          long long v87 = v40;
          uint64_t v88 = v39;
          uint64_t v89 = v38;
          uint64_t v90 = v37;
          uint64_t v91 = v36;
          uint64_t v92 = v35;
          char v93 = 0;
          FixedRoundedRect.rect.getter();
          if (v42 != v43) {
            goto LABEL_10;
          }
        }
        char v44 = v34 & 1;
        long long v87 = v40;
        uint64_t v88 = v39;
        uint64_t v89 = v38;
        uint64_t v90 = v37;
        uint64_t v91 = v36;
        uint64_t v92 = v35;
        char v93 = v44;
        FixedRoundedRect.cornerSize.getter();
        double v46 = v45;
        long long v87 = v40;
        uint64_t v88 = v39;
        uint64_t v89 = v38;
        uint64_t v90 = v37;
        uint64_t v91 = v36;
        uint64_t v92 = v35;
        char v93 = v44;
        FixedRoundedRect.cornerSize.getter();
        if (v46 == v47)
        {
          uint64_t v77 = *(void *)(v74 + v17);
          long long v87 = v40;
          uint64_t v88 = v39;
          uint64_t v89 = v38;
          uint64_t v90 = v37;
          uint64_t v91 = v36;
          uint64_t v92 = v35;
          char v93 = v44;
          swift_retain();
          FixedRoundedRect.rect.getter();
          CGFloat v49 = v48;
          CGFloat y = v50;
          CGFloat width = v51;
          CGFloat v53 = v52;
          uint64_t v76 = (UIView_optional *)objc_msgSend(v85, sel_superview);
          v100.origin.CGFloat x = v49;
          v100.origin.CGFloat y = y;
          v100.size.CGFloat width = width;
          v100.size.CGFloat height = v53;
          __C::CGRect v101 = UIViewSnapshotResponder.convertRectToTargetSpace(_:host:preferredContainer:)(v100, v75, v76);
          CGFloat x = v101.origin.x;
          CGFloat y = v101.origin.y;
          CGFloat width = v101.size.width;
          CGFloat height = v101.size.height;
          swift_release();

          long long v87 = v40;
          uint64_t v88 = v39;
          uint64_t v89 = v38;
          uint64_t v90 = v37;
          uint64_t v91 = v36;
          uint64_t v92 = v35;
          char v93 = v44;
          FixedRoundedRect.cornerSize.getter();
          uint64_t v57 = v56;
          outlined release of Path?((uint64_t)v94);
          outlined destroy of UIPointerShape?((uint64_t)v15);
          CGFloat v58 = y;
          *int v26 = x;
          v26[1] = v58;
          v26[2] = width;
          v26[3] = height;
          *((void *)v26 + 4) = v57;
          (*(void (**)(CGFloat *, void, uint64_t))(v73 + 104))(v26, *MEMORY[0x1E4FB0DC8], v31);
          v33(v26, 0, 1, v31);
          outlined init with take of UIPointerShape?((uint64_t)v26, (uint64_t)v15);
        }
        else
        {
LABEL_10:
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
          id v59 = UIBezierPath.init(_:)((uint64_t)v98);
          outlined destroy of UIPointerShape?((uint64_t)v15);
          *(void *)int v15 = v59;
          (*(void (**)(CGFloat *, void, uint64_t))(v73 + 104))(v15, *MEMORY[0x1E4FB0DD0], v31);
          v33(v15, 0, 1, v31);
        }
        uint64_t v4 = v80;
      }
    }
    id v60 = v85;
    id v61 = v85;
    if (!v81)
    {
      uint64_t v62 = *(void *)(v74 + v17);
      swift_retain();
      AGGraphClearUpdate();
      closure #1 in UIViewSnapshotResponder.snapshotView(host:)(v62, v75, &v87);
      AGGraphSetUpdate();
      swift_release();
      id v61 = v87;
    }
    id v63 = objc_allocWithZone(MEMORY[0x1E4FB1D48]);
    id v64 = v60;
    uint64_t v65 = v82;
    id v66 = objc_msgSend(v63, sel_initWithView_parameters_target_, v61, v82, v28);

    char v67 = v84;
    int v68 = v83;
    if (v83)
    {
      *id v9 = v66;
      if (v68 == 1) {
        uint64_t v69 = (unsigned int *)MEMORY[0x1E4FB0E90];
      }
      else {
        uint64_t v69 = (unsigned int *)MEMORY[0x1E4FB0E70];
      }
    }
    else
    {
      *id v9 = v66;
      uint64_t v69 = (unsigned int *)MEMORY[0x1E4FB0E88];
    }
    uint64_t v70 = v86;
    (*(void (**)(void *, void, uint64_t))(v86 + 104))(v9, *v69, v4);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerStyle);
    (*(void (**)(char *, void *, uint64_t))(v70 + 16))(v67, v9, v4);
    outlined init with copy of UIPointerShape?((uint64_t)v15, (uint64_t)v26);
    uint64_t v16 = UIPointerStyle.init(effect:shape:)();

    outlined release of Path?((uint64_t)v94);
    (*(void (**)(void *, uint64_t))(v70 + 8))(v9, v4);
    outlined destroy of UIPointerShape?((uint64_t)v15);
  }
  return v16;
}

id PointerIdentifier.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PointerIdentifier();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PointerIdentifier()
{
  return self;
}

void type metadata accessor for UIPointerShape?()
{
  if (!lazy cache variable for type metadata for UIPointerShape?)
  {
    type metadata accessor for UIPointerShape();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIPointerShape?);
    }
  }
}

uint64_t outlined init with take of Path?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for Path?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UIPointerShape?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIPointerShape?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of Path?(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of UIPointerShape?(uint64_t a1)
{
  type metadata accessor for UIPointerShape?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of UIPointerShape?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIPointerShape?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized PointerBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

id specialized PointerBridge.invalidateHoverState(immediately:)()
{
  id result = *(id *)(v0 + direct field offset for PointerBridge.interaction);
  if (result) {
    return objc_msgSend(result, sel_invalidate);
  }
  return result;
}

uint64_t specialized PointerBridge.pointerInteraction(_:regionFor:defaultRegion:)(void *a1)
{
  MEMORY[0x18C113CA0]();
  uint64_t v2 = PointerBridge.hoverEffectResponder(for:)(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    swift_retain();
    UIViewSnapshotResponder.contentPath.getter((uint64_t)v28);
    swift_release();
    outlined init with take of Path?((uint64_t)v28, (uint64_t)v29);
    if (v30 == 255)
    {
      uint64_t v9 = *(void *)(v3 + 224);
      uint64_t v11 = *(void *)(v3 + 232);
      uint64_t v5 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      long long v31 = v29[0];
      long long v32 = v29[1];
      unsigned __int8 v33 = v30;
      Path.boundingRect.getter();
      uint64_t v5 = v4;
      uint64_t v7 = v6;
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      outlined release of Path?((uint64_t)v28);
    }
    uint64_t v24 = v5;
    uint64_t v25 = v7;
    uint64_t v26 = v9;
    uint64_t v27 = v11;
    hostingViewCoordinateSpace.getter();
    v23[40] = 1;
    swift_retain();
    AGGraphClearUpdate();
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
    static Update.dispatchImmediately<A>(_:)();
    AGGraphSetUpdate();
    if (v17 == (void *)1)
    {
      ViewTransform.init()();
    }
    else
    {
      id v20 = v17;
      long long v21 = v18;
      long long v22 = v19;
    }
    ViewTransform.appendPosition(_:)(*(CGPoint *)(v3 + 240));
    swift_release();
    CGRect.convert(to:transform:)();
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)v23);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerRegion);
    uint64_t v13 = (objc_class *)type metadata accessor for PointerIdentifier();
    uint64_t v14 = (char *)objc_allocWithZone(v13);
    *(void *)&v14[OBJC_IVAR____TtC7SwiftUIP33_E281E5F41850D012D9603104FBB83C5417PointerIdentifier_base] = v3;
    v16.receiver = v14;
    v16.super_class = v13;
    swift_retain();
    id v20 = objc_msgSendSuper2(&v16, sel_init);
    lazy protocol witness table accessor for type PointerIdentifier and conformance NSObject();
    AnyHashable.init<A>(_:)();
    uint64_t v12 = UIPointerRegion.init(rect:identifier:)();
    swift_release();
    static Update.end()();
  }
  else
  {
    static Update.end()();
    return 0;
  }
  return v12;
}

UIView *specialized PointerBridge.pointerInteraction(_:styleFor:)()
{
  UIPointerRegion.identifier.getter();
  if (!v6)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?);
    return 0;
  }
  v1.isa = AnyHashable._bridgeToObjectiveC()().isa;
  outlined destroy of AnyHashable((uint64_t)v5);
  type metadata accessor for PointerIdentifier();
  if (!swift_dynamicCastClass())
  {

    return 0;
  }
  id result = (UIView *)MEMORY[0x18C119DF0](v0 + direct field offset for PointerBridge.host);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = PointerIdentifier.pointerStyle(host:)(result);

    return (UIView *)v4;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in UIViewSnapshotResponder.transform.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in UIViewSnapshotResponder.transform.getter(a1);
}

unint64_t lazy protocol witness table accessor for type PointerIdentifier and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type PointerIdentifier and conformance NSObject;
  if (!lazy protocol witness table cache variable for type PointerIdentifier and conformance NSObject)
  {
    type metadata accessor for PointerIdentifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PointerIdentifier and conformance NSObject);
  }
  return result;
}

void specialized static NSLayoutManager.with<A>(_:drawingScale:size:layoutProperties:_:)(void *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v12 = *(void *)a2;
  int v13 = *(unsigned __int8 *)(a2 + 8);
  if ((v13 & 1) != 0 || v12 != 1) {
    Class isa = NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakByWordWrapping).super.isa;
  }
  else {
    Class isa = a1;
  }
  Class v15 = isa;
  objc_super v16 = NSAttributedString.scaled(by:)();

  id v17 = objc_msgSend(objc_allocWithZone((Class)SwiftUITextStorage), sel_initWithAttributedString_, v16);
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0840]), sel_init);
  objc_msgSend(v18, sel_setUsesFontLeading_, 0);
  objc_msgSend(v18, sel_setAllowsOriginalFontMetricsOverride_, 1);
  objc_msgSend(v17, sel_addLayoutManager_, v18);
  objc_msgSend(v17, sel__setForceWordWrapping_, 1);
  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0880]), sel_initWithSize_, a6, a7);
  objc_msgSend(v19, sel_setLineFragmentPadding_, 0.0);
  if (v12 <= 1) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = v12;
  }
  if (v13) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  uint64_t v22 = *(unsigned __int8 *)(a2 + 25);
  objc_msgSend(v19, sel_setMaximumNumberOfLines_, v21);
  objc_msgSend(v19, sel_setLineBreakMode_, v22 + 3);
  objc_msgSend(v18, sel_addTextContainer_, v19);
  closure #1 in SwiftUIGlue2.linkURL(_:)(v18, (uint64_t)v19, a3, a4, a5);

  outlined release of ContextMenuResponderFilter((uint64_t)a3);
}

uint64_t _SymmetricallyScaledText.source.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Text.Storage(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _SymmetricallyScaledText.source.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(unsigned char *)(v4 + 16) = a3 & 1;
  *(void *)(v4 + 24) = a4;
  return result;
}

uint64_t (*_SymmetricallyScaledText.source.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _SymmetricallyScaledText.reference.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of Text.Storage(v1, *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _SymmetricallyScaledText.reference.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  outlined consume of Text.Storage(*(void *)(v4 + 32), *(void *)(v4 + 40), *(unsigned char *)(v4 + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  *(unsigned char *)(v4 + 48) = a3 & 1;
  *(void *)(v4 + 56) = a4;
  return result;
}

uint64_t (*_SymmetricallyScaledText.reference.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _SymmetricallyScaledText.init(source:reference:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3 & 1;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(unsigned char *)(a9 + 48) = a7 & 1;
  *(void *)(a9 + 56) = a8;
  return result;
}

uint64_t static _SymmetricallyScaledText._makeView(view:inputs:)()
{
  return static _SymmetricallyScaledText.makeView<A>(_:view:inputs:)();
}

uint64_t static _SymmetricallyScaledText.makeView<A>(_:view:inputs:)()
{
  return outlined consume of Text?(0, 0, 0, 0);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _SymmetricallyScaledText()
{
  return static _SymmetricallyScaledText.makeView<A>(_:view:inputs:)();
}

void protocol witness for View.body.getter in conformance _SymmetricallyScaledText()
{
}

_UNKNOWN **base witness table accessor for View in _SymmetricallyScaledText()
{
  return &protocol witness table for _SymmetricallyScaledText;
}

uint64_t destroy for _SymmetricallyScaledText(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _SymmetricallyScaledText(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _SymmetricallyScaledText(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  char v12 = *(unsigned char *)(a2 + 48);
  outlined copy of Text.Storage(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  char v15 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v11;
  *(unsigned char *)(a1 + 48) = v12;
  outlined consume of Text.Storage(v13, v14, v15);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _SymmetricallyScaledText(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymmetricallyScaledText(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymmetricallyScaledText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymmetricallyScaledText()
{
  return &type metadata for _SymmetricallyScaledText;
}

uint64_t SymmetricTextChildQuery.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v99 = a1;
  uint64_t v94 = v3;
  uint64_t v93 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v95 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v92 = (char *)&v85 - v6;
  uint64_t v96 = v7;
  uint64_t v108 = type metadata accessor for ModifiedContent();
  uint64_t v98 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108);
  unsigned __int8 v97 = (char *)&v85 - v8;
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v90 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v91 = (char *)&v85 - v12;
  uint64_t v114 = type metadata accessor for Date();
  uint64_t v115 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  uint64_t v117 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v88 = *(_DWORD *)(v1 + 12);
  uint64_t v103 = *(void *)(v1 + 16);
  uint64_t v110 = *(void *)(v1 + 24);
  uint64_t v86 = *(void *)(v1 + 32);
  *(void *)&long long v107 = *(void *)(v1 + 40);
  id v106 = *(id *)(v1 + 48);
  uint64_t v105 = *(void *)(v1 + 56);
  uint64_t v113 = *(void *)(v1 + 64);
  uint64_t v102 = *(void *)(v1 + 72);
  uint64_t v109 = *(void *)(v1 + 80);
  uint64_t v101 = *(void *)(v1 + 88);
  id v111 = *(id *)(v1 + 96);
  int v104 = *(unsigned __int8 *)(v1 + 104);
  double v14 = *(double *)(v1 + 112);
  uint64_t Value = AGGraphGetValue();
  uint64_t v89 = v16;
  uint64_t v18 = *(void *)Value;
  uint64_t v17 = *(void *)(Value + 8);
  uint64_t v116 = *(unsigned __int8 *)(Value + 16);
  uint64_t v19 = *(void *)(Value + 24);
  uint64_t v20 = AGGraphGetValue();
  uint64_t v87 = v21;
  uint64_t v23 = *(void *)v20;
  uint64_t v22 = *(void *)(v20 + 8);
  uint64_t v24 = *(unsigned __int8 *)(v20 + 16);
  uint64_t v25 = *(void *)(v20 + 24);
  uint64_t v26 = (uint64_t *)AGGraphGetValue();
  uint64_t v85 = v27;
  uint64_t v29 = *v26;
  uint64_t v28 = v26[1];
  uint64_t v121 = v25;
  uint64_t v123 = v23;
  uint64_t v119 = v29;
  uint64_t v124 = v19;
  uint64_t v122 = v17;
  uint64_t v118 = v18;
  uint64_t v100 = v28;
  uint64_t v120 = v22;
  if (v104)
  {
    uint64_t v38 = v17;
    uint64_t v33 = v116;
    outlined copy of Text.Storage(v18, v38, v116);
    swift_bridgeObjectRetain();
    uint64_t v39 = v22;
    uint64_t v31 = v24;
    outlined copy of Text.Storage(v23, v39, v24);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    int v104 = 0;
    uint64_t v36 = v118;
    uint64_t v35 = v117;
LABEL_15:
    if (!v110)
    {
      uint64_t v37 = v113;
      goto LABEL_31;
    }
    uint64_t v37 = v113;
    if ((v89 & 1) == 0) {
      goto LABEL_19;
    }
    if (!v113) {
      goto LABEL_31;
    }
LABEL_18:
    uint64_t v40 = v122;
    outlined copy of Text.Storage(v36, v122, v33);
    swift_bridgeObjectRetain();
    uint64_t v41 = v107;
    uint64_t v42 = (uint64_t)v106;
    char v43 = v105;
    outlined copy of Text?(v107, (uint64_t)v106, v105, v113);
    LOBYTE(v131) = v43 & 1;
    LODWORD(v11outlined consume of Text?(0, 0, 0, 0) = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v36, v40, v33);
    swift_bridgeObjectRelease();
    uint64_t v44 = v41;
    uint64_t v35 = v117;
    char v45 = v43;
    uint64_t v37 = v113;
    outlined consume of Text?(v44, v42, v45, v113);
    if ((v110 & 1) == 0) {
      goto LABEL_31;
    }
LABEL_19:
    if ((v87 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t v30 = v22;
  uint64_t v31 = v24;
  uint64_t v32 = v17;
  uint64_t v33 = v116;
  if (!v110)
  {
    outlined copy of Text.Storage(v18, v32, v116);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v123, v30, v24);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v35 = v117;
    goto LABEL_11;
  }
  outlined copy of Text.Storage(v18, v32, v116);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v123, v30, v24);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  char v34 = ResolvedStyledText.isDynamic.getter();
  uint64_t v35 = v117;
  if ((v34 & 1) == 0)
  {
LABEL_11:
    if (v86) {
      int v104 = ResolvedStyledText.isDynamic.getter();
    }
    else {
      int v104 = 0;
    }
    uint64_t v36 = v18;
    goto LABEL_15;
  }
  if (v89)
  {
    int v104 = 1;
    uint64_t v36 = v18;
    uint64_t v37 = v113;
    if (!v113) {
      goto LABEL_31;
    }
    goto LABEL_18;
  }
  uint64_t v36 = v18;
  if (v87)
  {
    int v104 = 1;
    uint64_t v37 = v113;
LABEL_20:
    if (!v111) {
      goto LABEL_31;
    }
    uint64_t v46 = v123;
    outlined copy of Text.Storage(v123, v120, v31);
    swift_bridgeObjectRetain();
    uint64_t v47 = v102;
    char v48 = v101;
    outlined copy of Text?(v102, v109, v101, (uint64_t)v111);
    LOBYTE(v131) = v48 & 1;
    uint64_t v49 = v120;
    LODWORD(v113) = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v46, v49, v31);
    swift_bridgeObjectRelease();
    char v50 = v48;
    uint64_t v35 = v117;
    outlined consume of Text?(v47, v109, v50, (uint64_t)v111);
    if ((v113 & 1) == 0) {
      goto LABEL_31;
    }
LABEL_22:
    if ((v85 & 1) == 0)
    {
LABEL_24:
      if (AGGraphGetOutputValue())
      {
        if ((v104 & 1) == 0) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
LABEL_31:
      PropertyList.Tracker.reset()();
      swift_retain();
      swift_retain();
      EnvironmentValues.init(_:tracker:)();
      uint64_t v53 = v122;
      outlined copy of Text.Storage(v36, v122, v33);
      uint64_t v54 = v124;
      swift_bridgeObjectRetain();
      outlined consume of Text?(v107, (uint64_t)v106, v105, v37);
      *(void *)(v2 + 4outlined consume of Text?(0, 0, 0, 0) = v36;
      *(void *)(v2 + 48) = v53;
      *(void *)(v2 + 56) = v33;
      *(void *)(v2 + 64) = v54;
      uint64_t v55 = v123;
      uint64_t v56 = v120;
      outlined copy of Text.Storage(v123, v120, v31);
      uint64_t v57 = v121;
      swift_bridgeObjectRetain();
      outlined consume of Text?(v102, v109, v101, (uint64_t)v111);
      *(void *)(v2 + 72) = v55;
      *(void *)(v2 + 8outlined consume of Text?(0, 0, 0, 0) = v56;
      uint64_t v112 = v31;
      *(void *)(v2 + 88) = v31;
      *(void *)(v2 + 96) = v57;
      long long v131 = v136;
      uint64_t v58 = (uint64_t)v91;
      EnvironmentValues.stringResolutionDate.getter();
      uint64_t v59 = v115;
      uint64_t v60 = v114;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v58, 1, v114) == 1)
      {
        *(void *)&long long v131 = *(void *)AGGraphGetValue();
        static Date.now.getter();
        outlined destroy of Date?(v58);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v35, v58, v60);
      }
      id v61 = v90;
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v90, v35, v60);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v61, 0, 1, v60);
      EnvironmentValues.stringResolutionDate.setter();
      long long v62 = v136;
      long long v131 = v136;
      long long v135 = 0uLL;
      swift_retain();
      swift_retain();
      default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
      id v63 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
      swift_release();
      swift_release();
      long long v131 = v62;
      long long v135 = 0uLL;
      swift_retain();
      swift_retain();
      default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
      id v111 = (id)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
      swift_release();
      swift_release();
      uint64_t v113 = type metadata accessor for ResolvedStyledText();
      long long v135 = v62;
      LODWORD(v109) = *(unsigned __int8 *)(v2 + 104);
      LODWORD(v11outlined consume of Text?(0, 0, 0, 0) = *(unsigned __int8 *)(v2 + 105);
      char v127 = v109;
      char v128 = v110;
      swift_retain();
      swift_retain();
      Text.isCollapsible()();
      char v130 = 2;
      default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      __int16 v126 = 0;
      uint64_t v133 = 0;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v107 = xmmword_18834C6D0;
      long long v134 = xmmword_18834C6D0;
      default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      uint64_t v125 = v129;
      default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      id v106 = v63;
      uint64_t v64 = v2;
      uint64_t v65 = static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v135 = v62;
      char v127 = v109;
      char v128 = v110;
      swift_retain();
      swift_retain();
      Text.isCollapsible()();
      char v130 = 2;
      default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      __int16 v126 = 0;
      uint64_t v133 = 0;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v134 = v107;
      default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      uint64_t v125 = v129;
      default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      LOBYTE(v83) = 0;
      v82[0] = default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      v82[1] = &v130;
      uint64_t v66 = static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)();
      swift_release();
      swift_release();
      char v67 = v116;
      swift_bridgeObjectRelease();
      uint64_t v68 = v124;
      swift_bridgeObjectRelease();
      uint64_t v69 = v118;
      uint64_t v70 = v122;
      swift_bridgeObjectRelease();
      swift_retain();
      swift_release();
      *(void *)(v64 + 24) = v65;
      swift_retain();
      swift_release();
      uint64_t v110 = v64;
      *(void *)(v64 + 32) = v66;
      outlined copy of Text.Storage(v69, v70, v67);
      swift_bridgeObjectRetain();
      swift_retain();
      *(void *)&long long v131 = v65;
      *((void *)&v131 + 1) = v69;
      *(void *)&long long v132 = v70;
      BYTE8(v132) = v67;
      uint64_t v133 = v68;
      *(void *)&long long v134 = 0;
      BYTE8(v134) = 0;
      type metadata accessor for AccessibilityStyledTextContentView();
      uint64_t v71 = v92;
      AccessibilityStyledTextContentView.body.getter();
      swift_release();
      outlined consume of Text.Storage(v69, v70, v67);
      swift_bridgeObjectRelease();
      uint64_t v113 = v65;
      *(void *)&long long v131 = v65;
      *((void *)&v131 + 1) = v66;
      uint64_t v72 = v96;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v74 = (uint64_t)v97;
      MEMORY[0x18C113660](&v131, v72, &unk_1ED457058, AssociatedConformanceWitness);
      uint64_t v75 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v71, v72);
      MEMORY[0x1F4188790](v75);
      uint64_t v83 = v99;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v76 = v108;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v74, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v82, v108, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v77);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v74, v76);
      if (v104)
      {
        *(void *)&long long v135 = *(void *)AGGraphGetValue();
        uint64_t v78 = v117;
        ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)();
        double v79 = *(double *)&v131;
        uint64_t v129 = *(void *)AGGraphGetValue();
        ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)();
        if (*(double *)&v135 < v79) {
          double v79 = *(double *)&v135;
        }
        type metadata accessor for ViewGraph();
        uint64_t v80 = MEMORY[0x18C114EE0]();
        swift_beginAccess();
        double v81 = *(double *)(v80 + 376);
        if (v79 < v81) {
          double v81 = v79;
        }
        *(double *)(v80 + 376) = v81;
        swift_release();
        swift_release();
        swift_release();

        outlined consume of Text.Storage(v123, v120, v112);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v69, v70, v67);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(char *, uint64_t))(v115 + 8))(v78, v114);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        outlined consume of Text.Storage(v123, v120, v112);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v69, v70, v67);
        swift_bridgeObjectRelease();
      }
      swift_release();
      return swift_release();
    }
LABEL_23:
    swift_retain();
    char v51 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
    if (v51) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v37 = v113;
  if (v85)
  {
    int v104 = 1;
    goto LABEL_23;
  }
  if (!AGGraphGetOutputValue()) {
    goto LABEL_44;
  }
LABEL_26:
  if (*(double *)AGGraphGetValue() >= v14)
  {
LABEL_44:
    int v104 = 1;
    goto LABEL_31;
  }
LABEL_27:
  swift_release();
  swift_release();
  outlined consume of Text.Storage(v123, v120, v31);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v36, v122, v33);

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance SymmetricTextChildQuery<A>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SymmetricTextChildQuery<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t SymmetricallyScaledTextLayout.sizeThatFits(in:context:child:)()
{
  _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)__PAIR128__(0x7FF0000000000000, 0x7FF0000000000000));
  dispatch thunk of ResolvedStyledText.drawingScale(size:)();
  double v1 = v0;
  dispatch thunk of ResolvedStyledText.drawingScale(size:)();
  if (v1 <= v2) {
    return dispatch thunk of ResolvedStyledText.size(in:)();
  }
  swift_retain();
  ResolvedStyledText.scaleFactorOverride.setter();
  dispatch thunk of ResolvedStyledText.size(in:)();
  return swift_release();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance SymmetricallyScaledTextLayout()
{
  return dispatch thunk of ResolvedStyledText.spacing()();
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance SymmetricallyScaledTextLayout()
{
  PlacementContext.size.getter();
  static UnitPoint.topLeading.getter();

  return _Placement.init(proposedSize:anchoring:at:)();
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance SymmetricallyScaledTextLayout()
{
  return SymmetricallyScaledTextLayout.sizeThatFits(in:context:child:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SymmetricallyScaledTextLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  int v23 = *a1;
  uint64_t v15 = v8;
  int v16 = v9;
  uint64_t v17 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v12;
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v11;
  unint64_t v13 = lazy protocol witness table accessor for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 80))(&v23, &v15, a3, a4, a5, v13);
}

void protocol witness for ViewModifier.body(content:) in conformance SymmetricallyScaledTextLayout()
{
}

double _sSo15NSLayoutManagerC7SwiftUIE4with_12drawingScale4size16layoutProperties_xSo18NSAttributedStringC_12CoreGraphics7CGFloatVSo6CGSizeVAC010TextLayoutJ0VxAB_So15NSTextContainerCtXEtlFZSo6CGRectVSg_TBm503_s7c28UI17AccessibilityNodeC17withr15ManageryxSgSo18kl8C_AESo08a8G0C_So15st4CSo6U25VtXEtlFAeI_AKtXEfU_AM_TG5AbrTxSgRi_zRi0_zlyATIsgggyr_ATTf1nnnnc_n0vcwxy27C14resolvedBounds2in3forSo6u7VSgSo18kl22C_So8_NSRangeVtFAISo15ab6C_So15sT9CAHtXEfU_So8_NSRangeVTf1nnnncn_nTf4nnnnxn_n@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>)
{
  uint64_t v17 = *(void *)a2;
  int v18 = *(unsigned __int8 *)(a2 + 8);
  if ((v18 & 1) != 0 || v17 != 1) {
    Class isa = NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakByWordWrapping).super.isa;
  }
  else {
    Class isa = a1;
  }
  Class v20 = isa;
  uint64_t v21 = NSAttributedString.scaled(by:)();

  id v22 = objc_msgSend(objc_allocWithZone((Class)SwiftUITextStorage), sel_initWithAttributedString_, v21);
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0840]), sel_init);
  objc_msgSend(v23, sel_setUsesFontLeading_, 0);
  objc_msgSend(v23, sel_setAllowsOriginalFontMetricsOverride_, 1);
  objc_msgSend(v22, sel_addLayoutManager_, v23);
  objc_msgSend(v22, sel__setForceWordWrapping_, 1);
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0880]), sel_initWithSize_, a6, a7);
  objc_msgSend(v24, sel_setLineFragmentPadding_, 0.0);
  if (v17 <= 1) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = v17;
  }
  if (v18) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  uint64_t v27 = *(unsigned __int8 *)(a2 + 25);
  objc_msgSend(v24, sel_setMaximumNumberOfLines_, v26);
  objc_msgSend(v24, sel_setLineBreakMode_, v27 + 3);
  objc_msgSend(v23, sel_addTextContainer_, v24);
  id v28 = objc_msgSend(v23, sel_glyphRangeForCharacterRange_actualCharacterRange_, a3, a4, 0);
  objc_msgSend(v23, sel_boundingRectForGlyphRange_inTextContainer_, v28, v29, v24);
  double v31 = v30;
  double v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;

  double result = v33 + a9;
  *(double *)a5 = v31 + a8;
  *(double *)(a5 + 8) = v33 + a9;
  *(void *)(a5 + 16) = v35;
  *(void *)(a5 + 24) = v37;
  *(unsigned char *)(a5 + 32) = 0;
  return result;
}

void type metadata accessor for _GraphValue<_SymmetricallyScaledText>()
{
  if (!lazy cache variable for type metadata for _GraphValue<_SymmetricallyScaledText>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_SymmetricallyScaledText>);
    }
  }
}

uint64_t type metadata accessor for SymmetricTextChildQuery()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for SymmetricTextChildQuery(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 96))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SymmetricTextChildQuery(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  if (!v5)
  {
    long long v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    uint64_t v9 = *(void *)(a2 + 96);
    if (v9) {
      goto LABEL_3;
    }
LABEL_5:
    long long v14 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v14;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  char v8 = *(unsigned char *)(a2 + 56);
  outlined copy of Text.Storage(v6, v7, v8);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  char v12 = *(unsigned char *)(a2 + 88);
  outlined copy of Text.Storage(v10, v11, v12);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v11;
  *(unsigned char *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRetain();
LABEL_6:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for SymmetricTextChildQuery(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      uint64_t v8 = *(void *)(a2 + 48);
      char v9 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v7;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v16 = *(_OWORD *)(a2 + 56);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    char v15 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v13;
    *(void *)(a1 + 48) = v14;
    *(unsigned char *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 56);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  int v18 = (_OWORD *)(a1 + 72);
  long long v19 = (_OWORD *)(a2 + 72);
  uint64_t v20 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v20)
    {
      uint64_t v21 = *(void *)(a2 + 72);
      uint64_t v22 = *(void *)(a2 + 80);
      char v23 = *(unsigned char *)(a2 + 88);
      outlined copy of Text.Storage(v21, v22, v23);
      uint64_t v24 = *(void *)(a1 + 72);
      uint64_t v25 = *(void *)(a1 + 80);
      char v26 = *(unsigned char *)(a1 + 88);
      *(void *)(a1 + 72) = v21;
      *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v22;
      *(unsigned char *)(a1 + 88) = v23;
      outlined consume of Text.Storage(v24, v25, v26);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 72);
      long long v30 = *(_OWORD *)(a2 + 88);
      *int v18 = *v19;
      *(_OWORD *)(a1 + 88) = v30;
    }
  }
  else if (v20)
  {
    uint64_t v27 = *(void *)(a2 + 72);
    uint64_t v28 = *(void *)(a2 + 80);
    char v29 = *(unsigned char *)(a2 + 88);
    outlined copy of Text.Storage(v27, v28, v29);
    *(void *)(a1 + 72) = v27;
    *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v28;
    *(unsigned char *)(a1 + 88) = v29;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v31 = *(_OWORD *)(a2 + 88);
    *int v18 = *v19;
    *(_OWORD *)(a1 + 88) = v31;
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for SymmetricTextChildQuery(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  if (*(void *)(a1 + 64))
  {
    uint64_t v4 = *(void *)(a2 + 64);
    if (v4)
    {
      char v5 = *(unsigned char *)(a2 + 56);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      char v8 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(void *)(a1 + 64) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v9;
LABEL_6:
  if (!*(void *)(a1 + 96))
  {
LABEL_10:
    long long v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v15;
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(a2 + 96);
  if (!v10)
  {
    outlined destroy of Text(a1 + 72);
    goto LABEL_10;
  }
  char v11 = *(unsigned char *)(a2 + 88);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  char v14 = *(unsigned char *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = v11;
  outlined consume of Text.Storage(v12, v13, v14);
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
LABEL_11:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymmetricTextChildQuery(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SymmetricTextChildQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 12outlined consume of Text?(0, 0, 0, 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 12outlined consume of Text?(0, 0, 0, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *assignWithCopy for SymmetricallyScaledTextLayout(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *type metadata accessor for SymmetricallyScaledTextLayout()
{
  return &unk_1ED457058;
}

_UNKNOWN **base witness table accessor for ViewModifier in SymmetricallyScaledTextLayout()
{
  return &protocol witness table for SymmetricallyScaledTextLayout;
}

unint64_t lazy protocol witness table accessor for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout;
  if (!lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout;
  if (!lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout;
  if (!lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout;
  if (!lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricallyScaledTextLayout and conformance SymmetricallyScaledTextLayout);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in SymmetricTextChildQuery<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for Date?()
{
  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
    }
  }
}

void View.exportableToServices<A>(payload:)()
{
}

void View.exportableToServices<A>(payload:onEdit:)()
{
}

void View.importableFromServices<A>(for:action:)()
{
}

void View.exportsItemProviders(_:onExport:)()
{
}

void View.exportsItemProviders(_:onExport:onEdit:)()
{
}

uint64_t sub_18790BD08()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ResponderViewModifier<FocusedValueModifier<ServiceItemHandler?>>()
{
  if (!lazy cache variable for type metadata for ResponderViewModifier<FocusedValueModifier<ServiceItemHandler?>>)
  {
    type metadata accessor for FocusedValueModifier<ServiceItemHandler?>();
    unint64_t v0 = type metadata accessor for ResponderViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResponderViewModifier<FocusedValueModifier<ServiceItemHandler?>>);
    }
  }
}

void type metadata accessor for FocusedValueModifier<ServiceItemHandler?>()
{
  if (!lazy cache variable for type metadata for FocusedValueModifier<ServiceItemHandler?>)
  {
    type metadata accessor for ServiceItemHandler?();
    unint64_t v0 = type metadata accessor for FocusedValueModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FocusedValueModifier<ServiceItemHandler?>);
    }
  }
}

void type metadata accessor for ServiceItemHandler?()
{
  if (!lazy cache variable for type metadata for ServiceItemHandler?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ServiceItemHandler?);
    }
  }
}

uint64_t sub_18790BE88()
{
  return swift_getWitnessTable();
}

uint64_t destroy for ServiceItemHandler(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 8)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 24))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for ServiceItemHandler(void *a1, void *a2)
{
  *a1 = *a2;
  char v5 = a2 + 1;
  uint64_t v4 = a2[1];
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v5;
  }
  uint64_t v7 = a2[3];
  if (v7)
  {
    uint64_t v8 = a2[4];
    a1[3] = v7;
    a1[4] = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  }
  return a1;
}

void *assignWithCopy for ServiceItemHandler(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      uint64_t v5 = a2[2];
      a1[1] = v4;
      a1[2] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  uint64_t v7 = a2[3];
  if (!a1[3])
  {
    if (v7)
    {
      uint64_t v9 = a2[4];
      a1[3] = v7;
      a1[4] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[4];
  a1[3] = v7;
  a1[4] = v8;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for ServiceItemHandler(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      uint64_t v5 = a2[2];
      a1[1] = v4;
      a1[2] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  uint64_t v7 = a2[3];
  if (!a1[3])
  {
    if (v7)
    {
      uint64_t v9 = a2[4];
      a1[3] = v7;
      a1[4] = v9;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[4];
  a1[3] = v7;
  a1[4] = v8;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ServiceItemHandler()
{
  return &type metadata for ServiceItemHandler;
}

void View.exportableToServices<A>(_:)()
{
}

void View.importsItemProviders(_:onImport:)()
{
}

void View.exportableToServices<A>(_:onEdit:)()
{
}

unsigned __int16 specialized static Array<A>.== infix(_:_:)@<H0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0])
  {
    if (v2)
    {
      if (a1 != a2)
      {
        unsigned __int16 result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(a1[2], a2[2])), 0xFuLL)));
        if (result)
        {
          uint64_t v4 = a1 + 3;
          uint64_t v5 = a2 + 3;
          uint64_t v6 = v2 - 1;
          do
          {
            if (!v6) {
              break;
            }
            float32x4_t v7 = *v4++;
            float32x4_t v8 = v7;
            float32x4_t v9 = *v5++;
            unsigned __int16 result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v8, v9)), 0xFuLL)));
            --v6;
          }
          while ((result & 1) != 0);
        }
      }
    }
  }
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 32;
  uint64_t v4 = a2 + 32;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7 != *(void *)(v6 + 16)) {
    return 0;
  }
  uint64_t v8 = 1;
  do
  {
    if (v7 && v5 != v6)
    {
      float32x4_t v9 = (void *)(v5 + 40);
      uint64_t v10 = (uint64_t *)(v6 + 40);
      do
      {
        uint64_t v11 = *v10;
        if (*v9)
        {
          if (!v11) {
            return 0;
          }
          BOOL v12 = *(v9 - 1) == *(v10 - 1) && *v9 == v11;
          if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
        }
        else if (v11)
        {
          return 0;
        }
        v9 += 2;
        v10 += 2;
        --v7;
      }
      while (v7);
    }
    BOOL result = v8 == v2;
    if (v8 == v2) {
      break;
    }
    uint64_t v14 = 8 * v8++;
    uint64_t v5 = *(void *)(v3 + v14);
    uint64_t v6 = *(void *)(v4 + v14);
    uint64_t v7 = *(void *)(v5 + 16);
  }
  while (v7 == *(void *)(v6 + 16));
  return result;
}

{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  BOOL result;
  float v7;
  float v8;
  float v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (float *)(a1 + 36);
  uint64_t v4 = (float *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v7 = *v3++;
    uint64_t v8 = v7;
    float32x4_t v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  BOOL result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  uint64_t v6 = (int *)(a2 + 36);
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    float32x4_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  BOOL result;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(a1 + 32);
  uint64_t v4 = (uint64_t *)(a2 + 32);
  uint64_t v5 = v2 - 1;
  do
  {
    uint64_t v7 = *v3++;
    uint64_t v6 = v7;
    float32x4_t v9 = *v4++;
    uint64_t v8 = v9;
    uint64_t v11 = v5-- != 0;
    BOOL result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

{
  uint64_t v2;
  BOOL result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL result = CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32));
  if (result)
  {
    if (v2 == 1) {
      return 1;
    }
    uint64_t v6 = v2 - 2;
    uint64_t v7 = a2 + 88;
    uint64_t v8 = a1 + 88;
    do
    {
      BOOL result = CGRectEqualToRect(*(CGRect *)(v8 - 24), *(CGRect *)(v7 - 24));
      uint64_t v10 = v6-- != 0;
      if (!result) {
        break;
      }
      v7 += 32;
      v8 += 32;
    }
    while (v10);
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    float32x4_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t specialized static Array<A>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6 == v21) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0) {
    uint64_t v7 = v4;
  }
  if (v5) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    uint64_t result = MEMORY[0x18C117680](0, v4);
    unint64_t v11 = result;
    unint64_t v12 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0) {
      goto LABEL_19;
    }
LABEL_42:
    uint64_t v13 = MEMORY[0x18C117680](0, a2);
LABEL_21:
    char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 160))(v13);
    swift_release();
    swift_release();
    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v19 = i - 4;
        if (v2)
        {
          uint64_t v20 = MEMORY[0x18C117680](i - 4, v4);
          if (v12) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v19 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v20 = *(void *)(v4 + 8 * i);
          swift_retain();
          if (v12)
          {
LABEL_23:
            uint64_t v17 = MEMORY[0x18C117680](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v19 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_39;
        }
        uint64_t v17 = *(void *)(a2 + 8 * i);
        swift_retain();
LABEL_24:
        char v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 160))(v17);
        swift_release();
        swift_release();
        if ((v18 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  unint64_t v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0) {
    goto LABEL_41;
  }
  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v11 = *(void *)(v4 + 32);
  uint64_t result = swift_retain();
  unint64_t v12 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    goto LABEL_42;
  }
LABEL_19:
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v13 = *(void *)(a2 + 32);
    swift_retain();
    goto LABEL_21;
  }
LABEL_44:
  __break(1u);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  unint64_t v5 = a1 + 5;
  uint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

unint64_t TableColumnCustomization.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t TableColumnCustomization.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = 0;
  v8[3] = 0;
  char v9 = 0;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
  uint64_t v5 = 0;
  if (v6) {
    uint64_t v5 = *(unsigned __int8 *)(*(void *)(v3 + 56) + 16 * v4 + 9);
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t key path getter for TableColumnCustomization.subscript(visibility:) : <A>TableColumnCustomization<A>A@<X0>(uint64_t *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = TableColumnCustomization.subscript.getter(v3, v4);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t key path setter for TableColumnCustomization.subscript(visibility:) : <A>TableColumnCustomization<A>A(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  __int16 v5 = *a1;
  type metadata accessor for TableColumnCustomization();
  swift_bridgeObjectRetain();
  specialized TableColumnCustomization.subscript.setter(v5, v3, v4);

  return swift_bridgeObjectRelease();
}

uint64_t TableColumnCustomization.subscript.setter(__int16 a1, uint64_t a2, uint64_t a3)
{
  specialized TableColumnCustomization.subscript.setter(a1, a2, a3);

  return swift_bridgeObjectRelease();
}

void (*TableColumnCustomization.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1)
{
  char v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *char v9 = a2;
  v9[1] = a3;
  *((unsigned char *)v9 + 32) = TableColumnCustomization.subscript.getter(a2, a3);
  return TableColumnCustomization.subscript.modify;
}

void TableColumnCustomization.subscript.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  __int16 v4 = *((unsigned __int8 *)*a1 + 32);
  swift_bridgeObjectRetain();
  specialized TableColumnCustomization.subscript.setter(v4, v3, v2);
  swift_bridgeObjectRelease();

  free(v1);
}

Swift::Void __swiftcall TableColumnCustomization.resetOrder()()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 8) = 0;
}

uint64_t static TableColumnCustomization.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2))
  {
    if (v2)
    {
      if (v3 && (specialized static Array<A>.== infix(_:_:)(v2, v3) & 1) != 0) {
        return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_26:
    uint64_t v16 = *(void *)(v3 + 48) + 40 * v12;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 24);
    char v20 = *(unsigned char *)(v16 + 32);
    uint64_t v21 = *(void *)(v3 + 56) + 16 * v12;
    double v22 = *(double *)v21;
    char v23 = *(unsigned char *)(v21 + 8);
    int v24 = *(unsigned __int8 *)(v21 + 9);
    v31[0] = *(void *)v16;
    v31[1] = v17;
    v31[2] = v18;
    v31[3] = v19;
    char v32 = v20;
    outlined copy of TableColumnCustomizationID.Base(v31[0], v17, v18, v19, v20);
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v31);
    char v27 = v26;
    uint64_t result = outlined release of TableColumnCustomizationID((uint64_t)v31);
    if ((v27 & 1) == 0) {
      return 0;
    }
    uint64_t v28 = *(void *)(a2 + 56) + 16 * v25;
    int v29 = *(unsigned __int8 *)(v28 + 9);
    if (*(unsigned char *)(v28 + 8))
    {
      if (v29 == v24) {
        char v10 = v23;
      }
      else {
        char v10 = 0;
      }
      if ((v10 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v23) {
        return 0;
      }
      if (*(double *)v28 != v22 || v29 != v24) {
        return 0;
      }
    }
  }
  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v13 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v13);
  ++v4;
  if (v14) {
    goto LABEL_25;
  }
  int64_t v4 = v13 + 1;
  if (v13 + 1 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14) {
    goto LABEL_25;
  }
  int64_t v4 = v13 + 2;
  if (v13 + 2 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_25:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_26;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_25;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;

  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v28 = result + 64;
  int64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(result + 64);
  int v29 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      uint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      long long v30 = v3;
      unint64_t v8 = v7 | (v3 << 6);
      goto LABEL_22;
    }
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v9 >= v29) {
      return 1;
    }
    char v10 = *(void *)(v28 + 8 * v9);
    unint64_t v11 = v3 + 1;
    if (!v10)
    {
      unint64_t v11 = v3 + 2;
      if (v3 + 2 >= v29) {
        return 1;
      }
      char v10 = *(void *)(v28 + 8 * v11);
      if (!v10)
      {
        unint64_t v11 = v3 + 3;
        if (v3 + 3 >= v29) {
          return 1;
        }
        char v10 = *(void *)(v28 + 8 * v11);
        if (!v10) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v6 = (v10 - 1) & v10;
    long long v30 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_22:
    int64_t v13 = result;
    unint64_t v14 = *(void *)(result + 48) + 24 * v8;
    int64_t v15 = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v17 = *(unsigned char *)(v14 + 16);
    uint64_t v18 = (unsigned __int8 *)(*(void *)(result + 56) + 2 * v8);
    uint64_t v19 = *v18;
    char v20 = v18[1];
    outlined copy of TabCustomizationID.Base();
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16, v17);
    char v23 = v22;
    outlined consume of TabCustomizationID.Base();
    if (v23)
    {
      int v24 = (unsigned __int8 *)(*(void *)(a2 + 56) + 2 * v21);
      unint64_t v25 = *v24;
      char v26 = v24[1];
      char v27 = v25 == v19 && v26 == v20;
      uint64_t result = v13;
      uint64_t v3 = v30;
      if (v27) {
        continue;
      }
    }
    return 0;
  }
  unint64_t v12 = v3 + 4;
  if (v3 + 4 >= v29) {
    return 1;
  }
  char v10 = *(void *)(v28 + 8 * v12);
  if (v10)
  {
    unint64_t v11 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v29) {
      return 1;
    }
    char v10 = *(void *)(v28 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  char v26 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & *(void *)(result + 64);
  char v27 = (unint64_t)(v5 + 63) >> 6;
  while (v7)
  {
    unint64_t v8 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    int64_t v9 = v8 | (v4 << 6);
LABEL_23:
    int64_t v13 = *(void *)(v3 + 48) + 24 * v9;
    unint64_t v14 = *(void *)v13;
    int64_t v15 = *(void *)(v13 + 8);
    uint64_t v16 = *(unsigned char *)(v13 + 16);
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
    outlined copy of TabCustomizationID.Base();
    swift_bridgeObjectRetain();
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15, v16);
    char v20 = v19;
    outlined consume of TabCustomizationID.Base();
    if ((v20 & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v21 = *(void *)(*(void *)(a2 + 56) + 8 * v18);
    double v22 = *(void *)(v21 + 16);
    if (v22 != *(void *)(v17 + 16)) {
      goto LABEL_40;
    }
    if (v22) {
      char v23 = v21 == v17;
    }
    else {
      char v23 = 1;
    }
    if (!v23)
    {
      int v24 = 0;
      while (1)
      {
        if (*(unsigned char *)(v21 + v24 + 48))
        {
          if ((*(unsigned char *)(v17 + v24 + 48) & 1) == 0) {
            break;
          }
        }
        else if (*(unsigned char *)(v17 + v24 + 48))
        {
          break;
        }
        unint64_t v25 = *(void *)(v21 + v24 + 32) == *(void *)(v17 + v24 + 32)
           && *(void *)(v21 + v24 + 40) == *(void *)(v17 + v24 + 40);
        if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
        v24 += 24;
        if (!--v22) {
          goto LABEL_6;
        }
      }
LABEL_40:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_6:
    uint64_t result = swift_bridgeObjectRelease();
  }
  char v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  if (v10 >= v27) {
    return 1;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v10);
  ++v4;
  if (v11) {
    goto LABEL_22;
  }
  int64_t v4 = v10 + 1;
  if (v10 + 1 >= v27) {
    return 1;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v4);
  if (v11) {
    goto LABEL_22;
  }
  int64_t v4 = v10 + 2;
  if (v10 + 2 >= v27) {
    return 1;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v4);
  if (v11)
  {
LABEL_22:
    uint64_t v7 = (v11 - 1) & v11;
    int64_t v9 = __clz(__rbit64(v11)) + (v4 << 6);
    goto LABEL_23;
  }
  unint64_t v12 = v10 + 3;
  if (v12 >= v27) {
    return 1;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v12);
  if (v11)
  {
    int64_t v4 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v4);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  void v30[2];
  char v31;
  long long v32;
  char v33;
  long long v34;
  uint64_t v35;
  char v36;
  void v37[2];
  char v38;
  long long v39;
  char v40;
  long long v41;
  uint64_t v42;
  char v43;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      char v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    unint64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v9) {
      return 1;
    }
    int64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      int64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        int64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    int64_t v15 = *(void *)(*(void *)(v3 + 48) + 8 * v11);
    uint64_t v16 = *(void *)(v3 + 56) + 80 * v11;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v18 = *(unsigned char *)(v16 + 16);
    uint64_t v19 = *(unsigned char *)(v16 + 40);
    char v20 = *(void *)(v16 + 64);
    uint64_t v21 = *(unsigned char *)(v16 + 72);
    v37[0] = *(void *)v16;
    v37[1] = v17;
    uint64_t v38 = v18;
    uint64_t v39 = *(_OWORD *)(v16 + 24);
    uint64_t v40 = v19;
    uint64_t v41 = *(_OWORD *)(v16 + 48);
    uint64_t v42 = v20;
    char v43 = v21;
    double v22 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    if (v23)
    {
      int v24 = *(void *)(a2 + 56) + 80 * v22;
      unint64_t v25 = *(void *)(v24 + 8);
      char v26 = *(unsigned char *)(v24 + 16);
      char v27 = *(unsigned char *)(v24 + 40);
      uint64_t v28 = *(void *)(v24 + 64);
      int v29 = *(unsigned char *)(v24 + 72);
      v30[0] = *(void *)v24;
      v30[1] = v25;
      long long v31 = v26;
      char v32 = *(_OWORD *)(v24 + 24);
      double v33 = v27;
      uint64_t v34 = *(_OWORD *)(v24 + 48);
      uint64_t v35 = v28;
      uint64_t v36 = v29;
      uint64_t result = specialized static SpatialEventCollection.Event.== infix(_:_:)((uint64_t)v30, (uint64_t)v37);
      if (result) {
        continue;
      }
    }
    return 0;
  }
  unint64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  int64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    int64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  void *v24;
  char v26;
  int64_t v27;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  char v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      int64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      char v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v12 - 1) & v12;
    char v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    unint64_t v14 = 16 * v10;
    int64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    char v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    int v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v27) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  __int16 v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  int64_t v38;
  double v39;
  long long v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  __int16 v46;
  uint64_t v47;
  char v48;
  unsigned char v49[40];
  long long v50;
  long long v51;
  long long v52;
  uint64_t v53;
  long long v54;
  long long v55;
  void v56[4];
  unsigned char v57[48];
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  __int16 v65;
  uint64_t v66;
  char v67;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v37 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & *(void *)(result + 64);
  uint64_t v38 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v9 = v8 | (v4 << 6);
LABEL_8:
      outlined init with copy of ToolbarPlacement.Role(*(void *)(v3 + 48) + 40 * v9, (uint64_t)&v50);
      char v10 = *(void *)(v3 + 56) + 80 * v9;
      unint64_t v11 = *(unsigned char *)v10;
      unint64_t v12 = *(void *)(v10 + 8);
      int64_t v13 = *(void *)(v10 + 16);
      unint64_t v14 = *(unsigned char *)(v10 + 24);
      int64_t v15 = *(void *)(v10 + 32);
      uint64_t v16 = *(unsigned char *)(v10 + 40);
      uint64_t v17 = *(void *)(v10 + 48);
      uint64_t v18 = *(unsigned char *)(v10 + 56);
      uint64_t v19 = *(_WORD *)(v10 + 57);
      char v20 = *(void *)(v10 + 64);
      LOBYTE(v1outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(v10 + 72);
      BYTE8(v52) = v11;
      uint64_t v53 = v12;
      *(void *)&uint64_t v54 = v13;
      BYTE8(v54) = v14;
      *(void *)&uint64_t v55 = v15;
      BYTE8(v55) = v16;
      v56[0] = v17;
      LOBYTE(v56[1]) = v18;
      *(_WORD *)((char *)&v56[1] + 1) = v19;
      v56[2] = v20;
      LOBYTE(v56[3]) = v10;
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_30;
    }
    uint64_t v21 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v21 < v38)
    {
      double v22 = *(void *)(v37 + 8 * v21);
      if (v22) {
        goto LABEL_12;
      }
      char v23 = v4 + 2;
      ++v4;
      if (v21 + 1 < v38)
      {
        double v22 = *(void *)(v37 + 8 * v23);
        if (v22) {
          goto LABEL_15;
        }
        int64_t v4 = v21 + 1;
        if (v21 + 2 < v38)
        {
          double v22 = *(void *)(v37 + 8 * (v21 + 2));
          if (v22)
          {
            v21 += 2;
            goto LABEL_12;
          }
          int64_t v4 = v21 + 2;
          if (v21 + 3 < v38)
          {
            double v22 = *(void *)(v37 + 8 * (v21 + 3));
            if (v22)
            {
              v21 += 3;
              goto LABEL_12;
            }
            char v23 = v21 + 4;
            int64_t v4 = v21 + 3;
            if (v21 + 4 < v38) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v7 = 0;
    char v51 = 0u;
    double v52 = 0u;
    char v50 = 0u;
    uint64_t v53 = 1;
    uint64_t v54 = 0u;
    uint64_t v55 = 0u;
    memset(v56, 0, 25);
LABEL_30:
    outlined init with take of (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?((uint64_t)&v50, (uint64_t)v57);
    if (v58 == 1) {
      return 1;
    }
    outlined init with take of ToolbarPlacement.Role((uint64_t)v57, (uint64_t)v49);
    LOBYTE(v5outlined consume of Text?(0, 0, 0, 0) = v57[40];
    *((void *)&v50 + 1) = v58;
    *(void *)&char v51 = v59;
    BYTE8(v51) = v60;
    *(void *)&double v52 = v61;
    BYTE8(v52) = v62;
    uint64_t v53 = v63;
    LOBYTE(v54) = v64;
    *(_WORD *)((char *)&v54 + 1) = v65;
    *((void *)&v54 + 1) = v66;
    LOBYTE(v55) = v67;
    int v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v49, (void (*)(unsigned char *))ToolbarPlacement.Role.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    char v26 = v25;
    outlined destroy of ToolbarPlacement.Role((uint64_t)v49);
    if ((v26 & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_release();
      return 0;
    }
    char v27 = *(void *)(a2 + 56) + 80 * v24;
    uint64_t v28 = *(unsigned char *)(v27 + 24);
    int v29 = *(void *)(v27 + 32);
    long long v30 = *(unsigned char *)(v27 + 40);
    long long v31 = *(void *)(v27 + 48);
    char v32 = *(unsigned char *)(v27 + 56);
    double v33 = *(_WORD *)(v27 + 57);
    uint64_t v34 = *(void *)(v27 + 64);
    uint64_t v35 = *(unsigned char *)(v27 + 72);
    LOBYTE(v39) = *(unsigned char *)v27;
    uint64_t v40 = *(_OWORD *)(v27 + 8);
    uint64_t v41 = v28;
    uint64_t v42 = v29;
    char v43 = v30;
    uint64_t v44 = v31;
    char v45 = v32;
    uint64_t v46 = v33;
    uint64_t v47 = v34;
    char v48 = v35;
    uint64_t v36 = specialized static ToolbarAppearanceConfiguration.== infix(_:_:)(&v39, (double *)&v50);
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if ((v36 & 1) == 0) {
      return 0;
    }
  }
  double v22 = *(void *)(v37 + 8 * v23);
  if (v22)
  {
LABEL_15:
    uint64_t v21 = v23;
LABEL_12:
    uint64_t v7 = (v22 - 1) & v22;
    int64_t v9 = __clz(__rbit64(v22)) + (v21 << 6);
    int64_t v4 = v21;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v38)
    {
      int64_t v4 = v38 - 1;
      goto LABEL_29;
    }
    double v22 = *(void *)(v37 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v28 = result + 64;
  int64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(result + 64);
  int v29 = (unint64_t)(v4 + 63) >> 6;
  long long v30 = result;
  while (v6)
  {
    long long v31 = (v6 - 1) & v6;
    char v32 = v3;
    uint64_t v7 = __clz(__rbit64(v6)) | (v3 << 6);
LABEL_24:
    unint64_t v12 = *(void *)(result + 48) + 24 * v7;
    int64_t v13 = *(void *)v12;
    unint64_t v14 = *(void *)(v12 + 8);
    int64_t v15 = *(unsigned char *)(v12 + 16);
    uint64_t v16 = *(void *)(result + 56) + 32 * v7;
    uint64_t v18 = *(void *)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    char v20 = *(unsigned __int8 *)(v16 + 24);
    outlined copy of SceneID(*(void *)v12, v14, v15);
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14, v15);
    char v23 = v22;
    outlined consume of SceneID(v13, v14, v15);
    if ((v23 & 1) == 0
      || ((int v24 = *(void *)(a2 + 56) + 32 * v21,
           unint64_t v25 = *(void *)(v24 + 16),
           char v26 = *(unsigned __int8 *)(v24 + 24),
           *(void *)v24 == v18)
        ? (char v27 = *(void *)(v24 + 8) == v17)
        : (char v27 = 0),
          !v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v25 != v19))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    swift_bridgeObjectRelease();
    uint64_t result = v30;
    uint64_t v6 = v31;
    uint64_t v3 = v32;
    if (v26 != v20) {
      return 0;
    }
  }
  unint64_t v8 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v8 >= v29) {
    return 1;
  }
  int64_t v9 = *(void *)(v28 + 8 * v8);
  char v10 = v3 + 1;
  if (v9) {
    goto LABEL_23;
  }
  char v10 = v3 + 2;
  if (v3 + 2 >= v29) {
    return 1;
  }
  int64_t v9 = *(void *)(v28 + 8 * v10);
  if (v9) {
    goto LABEL_23;
  }
  char v10 = v3 + 3;
  if (v3 + 3 >= v29) {
    return 1;
  }
  int64_t v9 = *(void *)(v28 + 8 * v10);
  if (v9) {
    goto LABEL_23;
  }
  char v10 = v3 + 4;
  if (v3 + 4 >= v29) {
    return 1;
  }
  int64_t v9 = *(void *)(v28 + 8 * v10);
  if (v9)
  {
LABEL_23:
    long long v31 = (v9 - 1) & v9;
    char v32 = v10;
    uint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    goto LABEL_24;
  }
  unint64_t v11 = v3 + 5;
  if (v3 + 5 >= v29) {
    return 1;
  }
  int64_t v9 = *(void *)(v28 + 8 * v11);
  if (v9)
  {
    char v10 = v3 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    char v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v29) {
      return 1;
    }
    int64_t v9 = *(void *)(v28 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

BOOL static TableColumnCustomization.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TableColumnCustomization.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t TableColumnCustomization.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D756C6F43726570 && a2 == 0xEE0065746174536ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x724F6E6D756C6F63 && a2 == 0xEB00000000726564)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int TableColumnCustomization.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t TableColumnCustomization.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x724F6E6D756C6F63;
  }
  else {
    return 0x6D756C6F43726570;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomization<A>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static TableColumnCustomization.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomization<A>.CodingKeys()
{
  return TableColumnCustomization.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TableColumnCustomization<A>.CodingKeys(uint64_t a1)
{
  TableColumnCustomization.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomization<A>.CodingKeys()
{
  Hasher.init(_seed:)();
  TableColumnCustomization.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomization<A>.CodingKeys()
{
  return TableColumnCustomization.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomization<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TableColumnCustomization.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TableColumnCustomization<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance AccessibilityLargeContentViewHitTestingTransform();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomization<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomization<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t TableColumnCustomization.encode(to:)(void *a1)
{
  type metadata accessor for TableColumnCustomization.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = (char *)&v14 - v5;
  uint64_t v7 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v8 = a1[3];
  int64_t v9 = a1;
  uint64_t v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v18 = v7;
  char v17 = 0;
  type metadata accessor for [TableColumnCustomizationID : TableColumnCustomizationEntry]();
  lazy protocol witness table accessor for type [TableColumnCustomizationID : TableColumnCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TableColumnCustomizationID : TableColumnCustomizationEntry] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID, (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry);
  uint64_t v12 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    uint64_t v18 = v15;
    char v17 = 1;
    type metadata accessor for [TableColumnCustomizationID](0, &lazy cache variable for type metadata for [TableColumnCustomizationID], (uint64_t)&type metadata for TableColumnCustomizationID, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [TableColumnCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TableColumnCustomizationID] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v11);
}

uint64_t TableColumnCustomization.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = a2;
  type metadata accessor for TableColumnCustomization.CodingKeys();
  swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v4 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v6 = (char *)&v13 - v5;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v14;
    type metadata accessor for [TableColumnCustomizationID : TableColumnCustomizationEntry]();
    char v16 = 0;
    lazy protocol witness table accessor for type [TableColumnCustomizationID : TableColumnCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TableColumnCustomizationID : TableColumnCustomizationEntry] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID, (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry);
    uint64_t v9 = v15;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for [TableColumnCustomizationID](0, &lazy cache variable for type metadata for [TableColumnCustomizationID], (uint64_t)&type metadata for TableColumnCustomizationID, MEMORY[0x1E4FBB320]);
    char v16 = 1;
    lazy protocol witness table accessor for type [TableColumnCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TableColumnCustomizationID] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v6, v9);
    uint64_t v12 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v8 = v10;
    v8[1] = v12;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomization<A>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return TableColumnCustomization.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomization<A>(void *a1)
{
  return TableColumnCustomization.encode(to:)(a1);
}

uint64_t TableColumnCustomizationEntry.Visibility.encode(to:)(void *a1, int a2)
{
  int v28 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.Visibility.HiddenCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys, (uint64_t)&unk_1ED457270, MEMORY[0x1E4FBBDE0]);
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  MEMORY[0x1F4188790](v4);
  unint64_t v25 = (char *)&v21 - v5;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.Visibility.VisibleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys, (uint64_t)&unk_1ED457290, v3);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x1F4188790](v6);
  double v22 = (char *)&v21 - v7;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys, (uint64_t)&unk_1ED4572B0, v3);
  uint64_t v9 = v8;
  uint64_t v21 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v21 - v10;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.Visibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys, (uint64_t)&unk_1ED4571E0, v3);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v16 = (char *)&v21 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v28)
  {
    if (v28 == 1)
    {
      char v30 = 1;
      lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys();
      uint64_t v17 = v22;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v23;
      uint64_t v18 = v24;
    }
    else
    {
      char v31 = 2;
      lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys();
      uint64_t v17 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v26;
      uint64_t v18 = v27;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
  }
  else
  {
    char v29 = 0;
    lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationEntry.Visibility.CodingKeys()
{
  uint64_t v1 = 0x656C6269736976;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6564646968;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6974616D6F747561;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationEntry.Visibility.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TableColumnCustomizationEntry.Visibility.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.Visibility.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.Visibility.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationEntry.Visibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized TableColumnCustomizationEntry.Visibility.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationEntry.Visibility(void *a1)
{
  return TableColumnCustomizationEntry.Visibility.encode(to:)(a1, *v1);
}

void TableColumnCustomizationEntry.hash(into:)(uint64_t a1, Swift::UInt64 a2, unsigned __int16 a3)
{
  unsigned int v3 = a3;
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = a2;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
  Hasher._combine(_:)(v3 >> 8);
}

uint64_t TableColumnCustomizationEntry.encode(to:)(void *a1, uint64_t a2, __int16 a3)
{
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys, (uint64_t)&unk_1ED457150, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13[2] = a2;
  char v14 = a3 & 1;
  char v17 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  uint64_t v11 = v13[1];
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v11)
  {
    char v16 = HIBYTE(a3);
    char v15 = 1;
    lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int TableColumnCustomizationEntry.hashValue.getter(Swift::UInt64 a1, unsigned __int16 a2)
{
  char v2 = a2;
  unsigned int v4 = a2;
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = a1;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
  Hasher._combine(_:)(v4 >> 8);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationEntry.CodingKeys()
{
  if (*v0) {
    return 0x696C696269736976;
  }
  else {
    return 0x57746E6572727563;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationEntry.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TableColumnCustomizationEntry.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationEntry@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized TableColumnCustomizationEntry.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
    *(unsigned char *)(a2 + 9) = HIBYTE(v5);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationEntry(void *a1)
{
  return TableColumnCustomizationEntry.encode(to:)(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 9) << 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomizationEntry()
{
  return TableColumnCustomizationEntry.hashValue.getter(*(void *)v0, *(unsigned __int8 *)(v0 + 8) | (unsigned __int16)(*(unsigned __int8 *)(v0 + 9) << 8));
}

void protocol witness for Hashable.hash(into:) in conformance TableColumnCustomizationEntry(uint64_t a1)
{
  TableColumnCustomizationEntry.hash(into:)(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8) | (*(unsigned __int8 *)(v1 + 9) << 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomizationEntry()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomizationEntry(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9);
}

uint64_t TableColumnCustomizationEntry.description.getter()
{
  _StringGuts.grow(_:)(25);
  v0._countAndFlagsBits = 0x203A6874646977;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
  type metadata accessor for [TableColumnCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x696269736976202CLL;
  v2._object = (void *)0xEE00203A7974696CLL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t TableColumnCustomizationID.TransientHint.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[2] = a5;
  v13[1] = a4;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.TransientHint.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys, (uint64_t)&unk_1ED44C9D8, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  uint64_t v11 = v13[3];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v11)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t TableColumnCustomizationID.Base.encode(to:)(void *a1)
{
  Swift::String v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.Base.TransientCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys, (uint64_t)&unk_1ED44CC08, MEMORY[0x1E4FBBDE0]);
  uint64_t v18 = *(void *)(v3 - 8);
  uint64_t v19 = v3;
  MEMORY[0x1F4188790](v3);
  __int16 v5 = (char *)&v16 - v4;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.Base.ExplicitCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys, (uint64_t)&unk_1ED44CB78, v2);
  uint64_t v7 = v6;
  uint64_t v17 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v16 - v8;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.Base.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys, (uint64_t)&unk_1ED44CAE8, v2);
  uint64_t v11 = v10;
  uint64_t v21 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v16 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of TableColumnCustomizationID.Base(v20, (uint64_t)v24);
  if (v25)
  {
    long long v26 = v24[0];
    long long v27 = v24[1];
    LOBYTE(v22) = 1;
    lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v22 = v26;
    long long v23 = v27;
    lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint();
    uint64_t v14 = v19;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v14);
  }
  else
  {
    LOBYTE(v22) = 0;
    lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v13, v11);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationEntry()
{
  return TableColumnCustomizationEntry.description.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationID.TransientHint.CodingKeys()
{
  if (*v0) {
    return 25705;
  }
  else {
    return 1701667182;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationID.TransientHint.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TableColumnCustomizationID.TransientHint.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.TransientHint.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.TransientHint.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationID.TransientHint@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized TableColumnCustomizationID.TransientHint.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationID.TransientHint(void *a1)
{
  return TableColumnCustomizationID.TransientHint.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomizationID.TransientHint()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TableColumnCustomizationID.TransientHint()
{
  String.hash(into:)();

  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomizationID.TransientHint()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomizationID.TransientHint(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationID.Base.CodingKeys()
{
  if (*v0) {
    return 0x6E6569736E617274;
  }
  else {
    return 0x746963696C707865;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationID.Base.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TableColumnCustomizationID.Base.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.Base.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.Base.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.Base.ExplicitCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.Base.ExplicitCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.Base.TransientCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.Base.TransientCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationID.Base@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized TableColumnCustomizationID.Base.init(from:)(a1, v5);
  if (!v2) {
    return outlined init with take of TableColumnCustomizationID.Base((uint64_t)v5, a2);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationID.Base(void *a1)
{
  outlined init with take of TableColumnCustomizationID.Base(v1, (uint64_t)v4);
  return TableColumnCustomizationID.Base.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomizationID.Base()
{
  char v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TableColumnCustomizationID.Base()
{
  if (*(unsigned char *)(v0 + 32))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }

  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomizationID.Base()
{
  char v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomizationID.Base(uint64_t a1, uint64_t a2)
{
  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v4);
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)v5);
  return specialized static TableColumnCustomizationID.Base.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t TableColumnCustomizationID.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys, (uint64_t)&unk_1ED44C948, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v10[-v7];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of TableColumnCustomizationID.Base(v2, (uint64_t)v11);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v11, (uint64_t)v10);
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int TableColumnCustomizationID.hashValue.getter()
{
  Hasher.init(_seed:)();
  if (*(unsigned char *)(v0 + 32))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  outlined release of TableColumnCustomizationID(v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TableColumnCustomizationID.CodingKeys()
{
  return 1702060386;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TableColumnCustomizationID.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TableColumnCustomizationID.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

double protocol witness for Decodable.init(from:) in conformance TableColumnCustomizationID@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized TableColumnCustomizationID.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TableColumnCustomizationID(void *a1)
{
  return TableColumnCustomizationID.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnCustomizationID()
{
  return TableColumnCustomizationID.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TableColumnCustomizationID()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 32);
  if (v5)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();

  return outlined consume of TableColumnCustomizationID.Base(v1, v2, v3, v4, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnCustomizationID()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  outlined consume of TableColumnCustomizationID.Base(v1, v2, v3, v4, v5);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnCustomizationID(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  char v8 = *(unsigned char *)(a2 + 32);
  return specialized static TableColumnCustomizationID.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

uint64_t TableColumnCustomizationID.description.getter()
{
  outlined init with take of TableColumnCustomizationID.Base(v0, (uint64_t)v5);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    Swift::String v8 = v6[0];
    Swift::String v9 = v6[1];
    v1._countAndFlagsBits = 0x6569736E6172745BLL;
    v1._object = (void *)0xEC000000203A746ELL;
    String.append(_:)(v1);
    _print_unlocked<A, B>(_:_:)();
    v2._countAndFlagsBits = 93;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    return 0;
  }
  else
  {
    v8._countAndFlagsBits = 0x6963696C7078655BLL;
    v8._object = (void *)0xEB00000000203A74;
    String.append(_:)(v6[0]);
    v4._countAndFlagsBits = 93;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return v8._countAndFlagsBits;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnCustomizationID()
{
  return TableColumnCustomizationID.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyTableColumnCustomization(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2))
  {
    if (v2)
    {
      if (v3 && (specialized static Array<A>.== infix(_:_:)(v2, v3) & 1) != 0) {
        return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t protocol witness for Projection.get(base:) in conformance TableColumnCustomization<A>.ToAnyCustomization@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized TableColumnCustomization.ToAnyCustomization.get(base:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance TableColumnCustomization<A>.ToAnyCustomization(void *a1, uint64_t *a2)
{
  return specialized TableColumnCustomization.ToAnyCustomization.set(base:newValue:)(a1, *a2, a2[1]);
}

__n128 SceneStorage.init<A>(wrappedValue:_:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1[1];
  v15[0] = *a1;
  v15[1] = v7;
  uint64_t v8 = type metadata accessor for TableColumnCustomization();
  type metadata accessor for TableColumnCustomizationTransform();
  SceneStorage.init<A>(key:transform:defaultValue:)(a2, a3, v9, (uint64_t)v15, v8, (char *)v16);
  uint64_t v10 = v16[1];
  uint64_t v11 = v18;
  uint64_t v12 = v20;
  __n128 result = v17;
  long long v14 = v19;
  *(void *)a4 = v16[0];
  *(void *)(a4 + 8) = v10;
  *(__n128 *)(a4 + 16) = result;
  *(void *)(a4 + 32) = v11;
  *(_OWORD *)(a4 + 4outlined consume of Text?(0, 0, 0, 0) = v14;
  *(void *)(a4 + 56) = v12;
  return result;
}

char *AppStorage.init<A>(wrappedValue:_:store:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = type metadata accessor for TableColumnCustomizationTransform();
  v13[0] = v7;
  v13[1] = v8;
  uint64_t v10 = type metadata accessor for TableColumnCustomization();
  uint64_t v11 = specialized AppStorage.init(key:transform:store:defaultValue:)(a2, a3, v9, (uint64_t)&protocol witness table for TableColumnCustomizationTransform<A>, a4, (uint64_t)v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t TableColumnCustomizationTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  *a4 = 1;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v13);
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v12);
  if (*((void *)&v14 + 1))
  {
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      *(void *)(a5 + 24) = type metadata accessor for TableColumnCustomization();
      swift_getWitnessTable();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data._Representation(a2, a3);
      return swift_release();
    }
  }
  else
  {
    uint64_t result = _sypSgWOhTm_2((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  }
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

void static TableColumnCustomizationTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = (void *)MEMORY[0x18C115780](a2, a3);
  id v7 = objc_msgSend(a1, sel_dataForKey_, v6);

  if (v7)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    *(void *)(a4 + 24) = type metadata accessor for TableColumnCustomization();
    swift_getWitnessTable();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v8, v10);
    swift_release();
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

void static TableColumnCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = MEMORY[0x1E4FBC840] + 8;
  _sypSgWOcTm_1(a1, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  if (v17[3])
  {
    type metadata accessor for TableColumnCustomization();
    if (swift_dynamicCast())
    {
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      v17[0] = v15;
      v17[1] = v16;
      type metadata accessor for Optional();
      uint64_t WitnessTable = swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v9 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v11 = v10;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      outlined copy of Data._Representation(v9, v11);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v9, v11);
      long long v13 = (void *)MEMORY[0x18C115780](a3, a4);
      objc_msgSend(a2, sel_setObject_forKey_, isa, v13, WitnessTable);
      swift_unknownObjectRelease();

      outlined consume of Data?(v9, v11);
      return;
    }
  }
  else
  {
    _sypSgWOhTm_2((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Any?, v7);
  }
  uint64_t v8 = (void *)MEMORY[0x18C115780](a3, a4);
  objc_msgSend(a2, sel_removeObjectForKey_, v8);
}

uint64_t protocol witness for SceneStorageValueTransform.readValue(from:key:read:) in conformance TableColumnCustomizationTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  return TableColumnCustomizationTransform.readValue(from:key:read:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for SceneStorageValueTransform.writeValue(_:to:key:) in conformance TableColumnCustomizationTransform<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized TableColumnCustomizationTransform.writeValue(_:to:key:)(a1, a2, a3, a4);
}

void protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance TableColumnCustomizationTransform<A>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void protocol witness for static UserDefaultsValueTransform.writeValue(_:to:key:) in conformance TableColumnCustomizationTransform<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6, v7);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))SensoryFeedback.FeedbackType.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, MEMORY[0x1E4FBAF48], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned __int8 a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if ((a2 - 2) >= 3u)
  {
    Hasher._combine(_:)(0);
    Swift::UInt v4 = a2 & 1;
  }
  else
  {
    Swift::UInt v4 = (a2 - 2) + 1;
  }
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1)
{
  unint64_t v2 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v2);
  Swift::Int v3 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  Swift::Int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4UUIDVSgMaTm_0(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - v7;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a1);
  Hasher._combine(_:)(a1[1]);
  uint64_t v9 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  outlined init with copy of UUID?((uint64_t)a1 + *(int *)(v9 + 24), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  Swift::Int v10 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v10);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, char a2)
{
  uint64_t v3 = a2 & 1;
  Hasher.init(_seed:)();
  AccessibilityAttachmentToken.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void **a1)
{
  Hasher.init(_seed:)();
  SystemSegmentItem.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, Swift::UInt a3, unsigned __int8 a4)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, a4, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt8 a2)
{
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v6;
  if (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
    return result;
  }
  uint64_t v8 = ~v6;
  unint64_t v9 = a1 & 0xC000000000000000;
  uint64_t v10 = *(void *)(v3 + 48);
  BOOL v11 = a1 != 0x8000000000000002;
  BOOL v12 = a1 == 0x8000000000000002;
  BOOL v13 = a2 != 2 || a1 != 0x8000000000000002;
  BOOL v14 = a2 != 2 || a1 != 0x8000000000000001;
  BOOL v15 = a2 != 2 || a1 != 0x8000000000000000;
  BOOL v16 = a2 != 1 || a1 != 0x8000000000000003;
  if (a2 == 1)
  {
    BOOL v17 = a1 != 0x8000000000000001;
  }
  else
  {
    BOOL v11 = 1;
    BOOL v17 = 1;
  }
  BOOL v18 = a2 == 1 && a1 == 0x8000000000000000;
  BOOL v19 = *(double *)&a2 == 0.0 && a1 == 0x8000000000000003;
  if (*(double *)&a2 == 0.0)
  {
    BOOL v20 = a1 == 0x8000000000000001;
  }
  else
  {
    BOOL v12 = 0;
    BOOL v20 = 0;
  }
  BOOL v21 = *(double *)&a2 != 0.0 || a1 != 0x8000000000000000;
  char v23 = v9 != 0x8000000000000000 || v13;
  char v24 = v9 != 0x8000000000000000 || v14;
  char v25 = v9 != 0x8000000000000000 || v15;
  char v26 = v9 != 0x8000000000000000 || v16;
  char v27 = v9 != 0x8000000000000000 || v11;
  char v28 = v9 != 0x8000000000000000 || v17;
  char v29 = v9 != 0x8000000000000000 || v21;
  while (1)
  {
    char v31 = (double *)(v10 + 16 * result);
    double v32 = *v31;
    double v33 = v31[1];
    if (!(*(void *)&v32 >> 62))
    {
      if (a1 >> 62) {
        goto LABEL_54;
      }
LABEL_50:
      if (LOBYTE(v32) == a1 && v33 == *(double *)&a2) {
        return result;
      }
      goto LABEL_54;
    }
    if (*(void *)&v32 >> 62 == 1)
    {
      if (v9 != 0x4000000000000000) {
        goto LABEL_54;
      }
      goto LABEL_50;
    }
    if ((__int128)__PAIR128__(1, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(*(unint64_t *)&v33, *(unint64_t *)&v32))break; {
    if ((__int128)__PAIR128__(2, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(*(unint64_t *)&v33, *(unint64_t *)&v32))
    }
    {
      switch(*(void *)&v32)
      {
        case 0x8000000000000001:
          if (v28) {
            goto LABEL_54;
          }
          break;
        case 0x8000000000000002:
          if (v27) {
            goto LABEL_54;
          }
          break;
        case 0x8000000000000003:
          if (v26) {
            goto LABEL_54;
          }
          break;
        default:
          if (!v18) {
            goto LABEL_54;
          }
          break;
      }
      return result;
    }
    if (*(void *)&v33 == 2 && *(void *)&v32 == 0x8000000000000000)
    {
      if ((v25 & 1) == 0) {
        return result;
      }
    }
    else if (*(void *)&v33 == 2 && *(void *)&v32 == 0x8000000000000001)
    {
      if ((v24 & 1) == 0) {
        return result;
      }
    }
    else if ((v23 & 1) == 0)
    {
      return result;
    }
LABEL_54:
    unint64_t result = (result + 1) & v8;
    if (((*(void *)(v5 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
      return result;
    }
  }
  switch(*(void *)&v32)
  {
    case 0x8000000000000001:
      if (!v20) {
        goto LABEL_54;
      }
      break;
    case 0x8000000000000002:
      if (!v12) {
        goto LABEL_54;
      }
      break;
    case 0x8000000000000003:
      if (!v19) {
        goto LABEL_54;
      }
      break;
    default:
      if (v29) {
        goto LABEL_54;
      }
      break;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = *(void *)(v3 + 48) + 16 * result;
      if (*(void *)v8 == a1)
      {
        int v9 = *(unsigned __int8 *)(v8 + 8);
        switch(v9)
        {
          case 2:
            if (a2 == 2) {
              return result;
            }
            break;
          case 3:
            if (a2 == 3) {
              return result;
            }
            break;
          case 4:
            if (a2 == 4) {
              return result;
            }
            break;
          default:
            if (a2 - 2 >= 3 && ((v9 ^ a2) & 1) == 0) {
              return result;
            }
            break;
        }
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = *(void *)(v3 + 48) + 16 * result;
      int v9 = *(void *)v8;
      uint64_t v10 = *(unsigned __int8 *)(v8 + 8);
      if (v9)
      {
        if (a1)
        {
          if (v9 == a1 && v10 == a2) {
            return result;
          }
        }
      }
      else if (!a1 && v10 == a2)
      {
        return result;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v38 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UUID?, UUID?)();
  uint64_t v47 = v7;
  MEMORY[0x1F4188790](v7);
  int v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4UUIDVSgMaTm_0(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
  MEMORY[0x1F4188790](v10 - 8);
  BOOL v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  BOOL v15 = (char *)&v36 - v14;
  uint64_t v16 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  MEMORY[0x1F4188790](v16);
  BOOL v19 = (_DWORD *)((char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = v2 + 64;
  uint64_t v21 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v22 = a2 & ~v21;
  if (((*(void *)(v2 + 64 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
    return v22;
  }
  uint64_t v41 = v16;
  uint64_t v42 = v12;
  uint64_t v49 = ~v21;
  uint64_t v23 = *(void *)(v17 + 72);
  uint64_t v45 = v2;
  uint64_t v46 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v37 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v39 = v15;
  uint64_t v40 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v43 = v23;
  uint64_t v44 = v2 + 64;
  while (1)
  {
    outlined init with copy of SystemSegmentItem(*(void *)(v2 + 48) + v23 * v22, (uint64_t)v19, type metadata accessor for DisplayList.HostedViewState.Key);
    if (*v19 != *a1 || v19[1] != a1[1]) {
      goto LABEL_5;
    }
    uint64_t v25 = *(int *)(v16 + 24);
    uint64_t v26 = (uint64_t)v9;
    uint64_t v27 = (uint64_t)v19 + v25;
    outlined init with copy of UUID?((uint64_t)a1 + v25, (uint64_t)v15);
    uint64_t v28 = v26 + *(int *)(v47 + 48);
    outlined init with copy of UUID?(v27, v26);
    outlined init with copy of UUID?((uint64_t)v15, v28);
    char v29 = *v46;
    uint64_t v30 = v48;
    if ((*v46)(v26, 1, v48) == 1) {
      break;
    }
    uint64_t v31 = (uint64_t)v42;
    outlined init with copy of UUID?(v26, (uint64_t)v42);
    if (v29(v28, 1, v30) == 1)
    {
      BOOL v15 = v39;
      outlined destroy of UUID?((uint64_t)v39);
      (*v40)(v31, v30);
      uint64_t v2 = v45;
      int v9 = (char *)v26;
      uint64_t v16 = v41;
      goto LABEL_4;
    }
    double v32 = v38;
    (*v37)(v38, v28, v30);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v34 = *v40;
    (*v40)((uint64_t)v32, v30);
    BOOL v15 = v39;
    outlined destroy of UUID?((uint64_t)v39);
    v34(v31, v30);
    outlined destroy of UUID?(v26);
    int v9 = (char *)v26;
    uint64_t v16 = v41;
    uint64_t v20 = v44;
    uint64_t v2 = v45;
    uint64_t v23 = v43;
    if (v33) {
      goto LABEL_15;
    }
LABEL_5:
    outlined destroy of SystemSegmentItem((uint64_t)v19, type metadata accessor for DisplayList.HostedViewState.Key);
    unint64_t v22 = (v22 + 1) & v49;
    if (((*(void *)(v20 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
      return v22;
    }
  }
  outlined destroy of UUID?((uint64_t)v15);
  unsigned int v24 = v29(v28, 1, v30);
  uint64_t v2 = v45;
  int v9 = (char *)v26;
  if (v24 != 1)
  {
LABEL_4:
    outlined destroy of SystemSegmentItem((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for (UUID?, UUID?));
    uint64_t v23 = v43;
    uint64_t v20 = v44;
    goto LABEL_5;
  }
  outlined destroy of UUID?(v26);
LABEL_15:
  outlined destroy of SystemSegmentItem((uint64_t)v19, type metadata accessor for DisplayList.HostedViewState.Key);
  return v22;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void **a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SystemSegmentItem() - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (id *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    do
    {
      outlined init with copy of SystemSegmentItem(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      char v13 = specialized static SystemSegmentItem.== infix(_:_:)(v8, a1);
      outlined destroy of SystemSegmentItem((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      if (v13) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    int v12 = a4;
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      uint64_t v16 = v14 + 32 * v8;
      uint64_t v17 = *(void *)(v16 + 16);
      int v18 = *(unsigned __int8 *)(v16 + 24);
      BOOL v19 = *(void *)v16 == a1 && *(void *)(v16 + 8) == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v17 == a3 && v18 == v12) {
        break;
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v25 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v24 = ~v3;
    uint64_t v5 = *(void *)(v2 + 48);
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    uint64_t v8 = a1[2];
    int v9 = *((unsigned __int8 *)a1 + 24);
    uint64_t v10 = a1[7];
    uint64_t v22 = a1[6];
    uint64_t v23 = v10;
    do
    {
      uint64_t v11 = v5 + (v4 << 6);
      uint64_t v12 = *(void *)(v11 + 16);
      int v13 = *(unsigned __int8 *)(v11 + 24);
      uint64_t v15 = *(void *)(v11 + 48);
      uint64_t v14 = *(void *)(v11 + 56);
      BOOL v16 = *(void *)v11 == v6 && *(void *)(v11 + 8) == v7;
      if (v16 || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v10 = v23, (v17 & 1) != 0))
      {
        if (v12 == v8 && v13 == v9)
        {
          if (v14)
          {
            if (v10)
            {
              if (v15 == v22 && v14 == v10) {
                return v4;
              }
              char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v10 = v23;
              if (v20) {
                return v4;
              }
            }
          }
          else if (!v10)
          {
            return v4;
          }
        }
      }
      unint64_t v4 = (v4 + 1) & v24;
    }
    while (((*(void *)(v25 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t specialized static TableColumnCustomizationID.Base.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v18);
  uint64_t v3 = v18[0];
  uint64_t v4 = v18[1];
  if (v19)
  {
    uint64_t v5 = v18[2];
    uint64_t v6 = v18[3];
    outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)&v13);
    if (v17 == 1)
    {
      uint64_t v7 = v15;
      uint64_t v8 = v16;
      BOOL v9 = v3 == v13 && v4 == v14;
      if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)())
        && (v5 == v7 && v6 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
LABEL_19:
        char v10 = 1;
        return v10 & 1;
      }
    }
    goto LABEL_13;
  }
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)&v13);
  if (v17)
  {
LABEL_13:
    char v10 = 0;
    return v10 & 1;
  }
  if (v3 == v13 && v4 == v14) {
    goto LABEL_19;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  return v10 & 1;
}

BOOL specialized static TableColumnCustomizationID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v11);
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)v10);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v11, (uint64_t)v12);
  uint64_t v3 = v12[0];
  uint64_t v4 = v12[1];
  if (v13)
  {
    uint64_t v5 = v12[2];
    uint64_t v6 = v12[3];
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)v10, (uint64_t)&v14);
    if ((v18 & 1) == 0) {
      return 0;
    }
    uint64_t v7 = v16;
    uint64_t v8 = v17;
    if ((v3 != v14 || v4 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
    if (v5 == v7 && v6 == v8) {
      return 1;
    }
  }
  else
  {
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)v10, (uint64_t)&v14);
    if (v18) {
      return 0;
    }
    if (v3 == v14 && v4 == v15) {
      return 1;
    }
  }
  return (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
}

uint64_t specialized TableColumnCustomization.ToAnyCustomization.get(base:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t specialized TableColumnCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of Any(a1, (uint64_t)v12);
  type metadata accessor for TableColumnCustomization();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v12[0] = v10;
    swift_getWitnessTable();
    uint64_t v7 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)&long long v10 = a3;
    *((void *)&v10 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (v9 >> 60 == 15)
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    else
    {
      *((void *)&v11 + 1) = MEMORY[0x1E4F277C0];
      *(void *)&long long v10 = v7;
      *((void *)&v10 + 1) = v9;
    }
    return specialized Dictionary.subscript.setter((uint64_t)&v10, (uint64_t)v12);
  }
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

uint64_t specialized TableColumnCustomization.subscript.setter(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if ((_BYTE)a1)
  {
    uint64_t v6 = *v3;
    uint64_t v17 = a2;
    uint64_t v18 = a3;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
    if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v17), (v8 & 1) != 0))
    {
      uint64_t v9 = *(void *)(v6 + 56) + 16 * v7;
      uint64_t v10 = *(void *)v9;
      __int16 v11 = *(unsigned __int8 *)(v9 + 8);
    }
    else
    {
      uint64_t v10 = 0;
      __int16 v11 = 1;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16[0] = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v11 | (a1 << 8), (uint64_t)&v17, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v16[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = a2;
    uint64_t v18 = a3;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
    uint64_t v15 = specialized Dictionary.subscript.modify(v16, (uint64_t)&v17);
    if (*(unsigned __int8 *)(v14 + 9) << 8 != 768) {
      *(unsigned char *)(v14 + 9) = 0;
    }
    return ((uint64_t (*)(void *, void))v15)(v16, 0);
  }
}

uint64_t type metadata accessor for TableColumnCustomization.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry and conformance TableColumnCustomizationEntry);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TableColumnCustomizationID] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [TableColumnCustomizationID](255, &lazy cache variable for type metadata for [TableColumnCustomizationID], (uint64_t)&type metadata for TableColumnCustomizationID, MEMORY[0x1E4FBB320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TableColumnCustomization()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TableColumnCustomizationTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized TableColumnCustomizationEntry.Visibility.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6974616D6F747561 && a2 == 0xE900000000000063;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C6269736976 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6564646968 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized TableColumnCustomizationEntry.Visibility.init(from:)(uint64_t a1)
{
  BOOL v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.Visibility.HiddenCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys, (uint64_t)&unk_1ED457270, MEMORY[0x1E4FBBDC0]);
  uint64_t v30 = v3;
  uint64_t v28 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v33 = (char *)&v25 - v4;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.Visibility.VisibleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys, (uint64_t)&unk_1ED457290, v2);
  uint64_t v29 = v5;
  uint64_t v27 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v32 = (char *)&v25 - v6;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys, (uint64_t)&unk_1ED4572B0, v2);
  uint64_t v8 = v7;
  uint64_t v26 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v25 - v9;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.Visibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys, (uint64_t)&unk_1ED4571E0, v2);
  uint64_t v12 = v11;
  uint64_t v31 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v25 - v13;
  __swift_project_boxed_opaque_existential_1((void *)a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys();
  uint64_t v15 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v25 = v8;
  uint64_t v16 = v32;
  uint64_t v17 = v33;
  uint64_t v34 = a1;
  uint64_t v18 = v14;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v23 = &type metadata for TableColumnCustomizationEntry.Visibility;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x1E4FBBA70], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v12);
    a1 = v34;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v19 + 32);
  if (*(unsigned char *)(v19 + 32))
  {
    if (a1 == 1)
    {
      char v36 = 1;
      lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v31;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v29);
    }
    else
    {
      char v37 = 2;
      lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v31;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v30);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v35 = 0;
    lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v25);
    swift_bridgeObjectRelease();
    uint64_t v20 = v31;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v12);
  __swift_destroy_boxed_opaque_existential_1(v34);
  return a1;
}

uint64_t specialized TableColumnCustomizationEntry.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x57746E6572727563 && a2 == 0xEC00000068746469;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized TableColumnCustomizationEntry.init(from:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys, (uint64_t)&unk_1ED457150, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    char v12 = 0;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v8 = v10;
    char v11 = 1;
    lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

uint64_t specialized TableColumnCustomizationID.TransientHint.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized TableColumnCustomizationID.TransientHint.init(from:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.TransientHint.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys, (uint64_t)&unk_1ED44C9D8, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    char v11 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t specialized TableColumnCustomizationID.Base.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746963696C707865 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6569736E617274 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized TableColumnCustomizationID.Base.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.Base.TransientCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys, (uint64_t)&unk_1ED44CC08, MEMORY[0x1E4FBBDC0]);
  uint64_t v43 = v4;
  uint64_t v40 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v42 = &v36[-v5];
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.Base.ExplicitCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys, (uint64_t)&unk_1ED44CB78, v3);
  uint64_t v7 = v6;
  uint64_t v39 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v36[-v8];
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.Base.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys, (uint64_t)&unk_1ED44CAE8, v3);
  uint64_t v11 = v10;
  uint64_t v41 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v36[-v12];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys();
  uint64_t v14 = (uint64_t)v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v15 = v7;
  uint64_t v16 = v42;
  uint64_t v17 = v43;
  uint64_t v48 = a1;
  uint64_t v18 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v18 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v21 = v11;
    uint64_t v23 = v22;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v23 = &type metadata for TableColumnCustomizationID.Base;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v23, *MEMORY[0x1E4FBBA70], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v41 + 8))(v13, v21);
    a1 = v48;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v37 = *(unsigned __int8 *)(v18 + 32);
  if (v37)
  {
    LOBYTE(v44) = 1;
    lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys();
    uint64_t v19 = v16;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint();
    uint64_t v24 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v25 = v41;
    (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v19, v24);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v13, v11);
    uint64_t v30 = v44;
    uint64_t v29 = v45;
    uint64_t v31 = v46;
    uint64_t v32 = v47;
  }
  else
  {
    LOBYTE(v44) = 0;
    lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v27 = v41;
    uint64_t v29 = v33;
    uint64_t v34 = *(void (**)(unsigned char *, uint64_t))(v39 + 8);
    uint64_t v43 = v26;
    v34(v9, v15);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v13, v11);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = v43;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  char v35 = v38;
  *uint64_t v38 = v30;
  v35[1] = v29;
  v35[2] = v31;
  v35[3] = v32;
  *((unsigned char *)v35 + 32) = v37;
  return result;
}

uint64_t specialized TableColumnCustomizationID.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TableColumnCustomizationID.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys, (uint64_t)&unk_1ED44C948, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v16;
  lazy protocol witness table accessor for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)&v14[3];
  uint64_t v10 = v14[5];
  uint64_t v11 = v14[6];
  char v12 = v15;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v14;
  *(void *)(v9 + 16) = v10;
  *(void *)(v9 + 24) = v11;
  *(unsigned char *)(v9 + 32) = v12;
  return result;
}

uint64_t specialized TableColumnCustomization.ToAnyCustomization.set(base:newValue:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  a1[1] = a3;
  return result;
}

uint64_t sub_1879179C4()
{
  return 16;
}

__n128 sub_1879179D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *initializeBufferWithCopyOfBuffer for TableColumnCustomization(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TableColumnCustomization(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for TableColumnCustomization(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyTableColumnCustomization()
{
  return &type metadata for AnyTableColumnCustomization;
}

uint64_t getEnumTagSinglePayload for TableColumnCustomizationEntry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnCustomizationEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 1outlined consume of Text?(0, 0, 0, 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 1outlined consume of Text?(0, 0, 0, 0) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationEntry()
{
  return &type metadata for TableColumnCustomizationEntry;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationID()
{
  return &type metadata for TableColumnCustomizationID;
}

uint64_t type metadata accessor for TableColumnCustomization.ToAnyCustomization()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in TableColumnCustomization<A>.ToAnyCustomization()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in TableColumnCustomization<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TableColumnCustomization<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in TableColumnCustomization<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in TableColumnCustomization<A>.ToAnyCustomization()
{
  return swift_getWitnessTable();
}

uint64_t outlined release of TableColumnCustomizationID(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.CodingKeys and conformance TableColumnCustomizationID.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base and conformance TableColumnCustomizationID.Base);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.CodingKeys and conformance TableColumnCustomizationEntry.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility and conformance TableColumnCustomizationEntry.Visibility);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x18C119C60);
  }
  return result;
}

uint64_t outlined retain of AccessibilityLargeContentViewTree(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 232);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    v4);
  return a1;
}

void type metadata accessor for (UUID?, UUID?)()
{
  if (!lazy cache variable for type metadata for (UUID?, UUID?))
  {
    _s10Foundation4UUIDVSgMaTm_0(255, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UUID?, UUID?));
    }
  }
}

void type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)()
{
  if (!lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?))
  {
    type metadata accessor for [TableColumnCustomizationID](255, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
    }
  }
}

uint64_t outlined init with copy of SystemSegmentItem(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of SystemSegmentItem(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for PartialKeyPath<UISplitViewController>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for NSObject(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t destroy for TableColumnCustomizationID.TransientHint()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for TableColumnCustomizationID.TransientHint(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TableColumnCustomizationID.TransientHint(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TableColumnCustomizationID.TransientHint(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationID.TransientHint()
{
  return &type metadata for TableColumnCustomizationID.TransientHint;
}

void *type metadata accessor for TableColumnCustomizationEntry.CodingKeys()
{
  return &unk_1ED457150;
}

void *type metadata accessor for TableColumnCustomizationID.CodingKeys()
{
  return &unk_1ED44C948;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationEntry.Visibility()
{
  return &type metadata for TableColumnCustomizationEntry.Visibility;
}

uint64_t destroy for TableColumnCustomizationID(uint64_t a1)
{
  return outlined consume of TableColumnCustomizationID.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for TableColumnCustomizationID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for TableColumnCustomizationID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of TableColumnCustomizationID.Base(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for TableColumnCustomizationID(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of TableColumnCustomizationID.Base(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCustomizationID(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnCustomizationID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TableColumnCustomizationID.Base(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for TableColumnCustomizationID.Base(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationID.Base()
{
  return &type metadata for TableColumnCustomizationID.Base;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint and conformance TableColumnCustomizationID.TransientHint);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.TransientCodingKeys and conformance TableColumnCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.ExplicitCodingKeys and conformance TableColumnCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.Base.CodingKeys and conformance TableColumnCustomizationID.Base.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.HiddenCodingKeys and conformance TableColumnCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.VisibleCodingKeys and conformance TableColumnCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationEntry.Visibility.CodingKeys and conformance TableColumnCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationID.TransientHint.CodingKeys and conformance TableColumnCustomizationID.TransientHint.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<TableColumnCustomizationID.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void *type metadata accessor for TableColumnCustomizationID.TransientHint.CodingKeys()
{
  return &unk_1ED44C9D8;
}

unsigned char *storeEnumTagSinglePayload for TableColumnCustomizationEntry.Visibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187918D34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TableColumnCustomizationEntry.Visibility.CodingKeys()
{
  return &unk_1ED4571E0;
}

void *type metadata accessor for TableColumnCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  return &unk_1ED4572B0;
}

void *type metadata accessor for TableColumnCustomizationEntry.Visibility.VisibleCodingKeys()
{
  return &unk_1ED457290;
}

void *type metadata accessor for TableColumnCustomizationEntry.Visibility.HiddenCodingKeys()
{
  return &unk_1ED457270;
}

unsigned char *storeEnumTagSinglePayload for TableColumnCustomization.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187918E68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TableColumnCustomizationID.Base.CodingKeys()
{
  return &unk_1ED44CAE8;
}

void *type metadata accessor for TableColumnCustomizationID.Base.ExplicitCodingKeys()
{
  return &unk_1ED44CB78;
}

unsigned char *storeEnumTagSinglePayload for TableColumnCustomizationID.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187918F4CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for TableColumnCustomizationID.Base.TransientCodingKeys()
{
  return &unk_1ED44CC08;
}

uint64_t outlined init with take of (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?(uint64_t a1, uint64_t a2)
{
  _s10Foundation4UUIDVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?, (void (*)(uint64_t))type metadata accessor for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)()
{
  if (!lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration));
    }
  }
}

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for OutsetByRowInsetsIfNecessary(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  char v10 = *(unsigned char *)(a1 + 64);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 64) = v5;
  outlined consume of Environment<HoverEffectContext?>.Content(v6, v7, v8, v9, v10);
  char v12 = *(unsigned char *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for OutsetByRowInsetsIfNecessary(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 82)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OutsetByRowInsetsIfNecessary(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 8outlined consume of Text?(0, 0, 0, 0) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 82) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t OutsetByRowInsetsIfNecessary.OutsetLayout.spacing(in:child:)()
{
  if (LayoutProxy.requiresSpacingProjection.getter()) {
    return LayoutProxy.spacing()();
  }
  LayoutProxy.spacing()();
  static AbsoluteEdge.Set.vertical.getter();
  return Spacing.reset(_:)();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  return OutsetByRowInsetsIfNecessary.OutsetLayout.spacing(in:child:)();
}

void protocol witness for ViewModifier.body(content:) in conformance OutsetByRowInsetsIfNecessary.OutsetLayout()
{
}

uint64_t getEnumTagSinglePayload for OutsetByRowInsetsIfNecessary.OutsetLayout(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[48]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OutsetByRowInsetsIfNecessary.OutsetLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for FocusEventProxyResponder()
{
  uint64_t result = type metadata singleton initialization cache for FocusEventProxyResponder;
  if (!type metadata singleton initialization cache for FocusEventProxyResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for FocusEventProxyResponder()
{
  return swift_initClassMetadata2();
}

uint64_t FocusEventProxyResponder.__allocating_init(inputs:)()
{
  return DefaultLayoutViewResponder.init(inputs:)();
}

void protocol witness for ViewModifier.body(content:) in conformance FocusEventProxyModifier()
{
}

uint64_t FocusEventProxyResponderFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_188351940;
    *(void *)(v4 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t FocusEventProxyResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t FocusEventProxyResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for FocusEventProxyResponder()
{
  return type metadata accessor for FocusEventProxyResponder();
}

_UNKNOWN **base witness table accessor for ViewModifier in FocusEventProxyModifier()
{
  return &protocol witness table for FocusEventProxyModifier;
}

unint64_t lazy protocol witness table accessor for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter;
  if (!lazy protocol witness table cache variable for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter);
  }
  return result;
}

uint64_t assignWithCopy for FocusEventProxyResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FocusEventProxyResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

void *type metadata accessor for FocusEventProxyResponderFilter()
{
  return &unk_1ED458F70;
}

ValueMetadata *type metadata accessor for DefaultWindowToolbarStyle()
{
  return &type metadata for DefaultWindowToolbarStyle;
}

uint64_t static ViewBuilder.buildEither<A, B>(second:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  double v6 = MEMORY[0x1F4188790](v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t CustomProgressView.init(interval:countdown:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = type metadata accessor for CustomProgressView();
  uint64_t v15 = a7 + *(int *)(v14 + 52);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v15, 1, 1, a5);
  uint64_t v16 = a7 + *(int *)(v14 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(v16, 1, 1, a6);
  type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
  uint64_t v18 = *(int *)(v17 + 48);
  outlined init with take of WidgetAuxiliaryViewMetadata(a1, a7, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  *(unsigned char *)(a7 + v18) = a2;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v15, a3, v19);
  uint64_t v20 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v16, a4, v20);
}

uint64_t outlined consume of NSProgress.UIState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ProgressViewValue.encode(to:)(void *a1)
{
  char v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ProgressViewValue.DateRelativeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys, (uint64_t)&unk_1ED424818, MEMORY[0x1E4FBBDE0]);
  uint64_t v30 = v3;
  uint64_t v26 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v34 = (char *)&v25 - v4;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v29 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v28 = (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ProgressViewValue.AbsoluteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys, (uint64_t)&unk_1ED424788, v2);
  uint64_t v27 = v7;
  uint64_t v25 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ProgressViewValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys, (uint64_t)&unk_1ED4246F8, v2);
  uint64_t v14 = v13;
  uint64_t v32 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v25 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ProgressViewStyleConfiguration(v33, (uint64_t)v12, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = v26;
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    uint64_t v18 = v28;
    outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v12, v28, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    char v40 = 1;
    lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v39 = 0;
    _sSNy10Foundation4DateVGSNyxGSesSeRzrlWlTm_1(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v19 = v30;
    uint64_t v20 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v20)
    {
      char v38 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v34, v19);
    outlined destroy of ProgressViewStyleConfiguration(v18, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    uint64_t v21 = v25;
    char v37 = 0;
    lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v36 = 0;
    uint64_t v22 = v27;
    uint64_t v23 = v31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v23)
    {
      char v35 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v14);
}

uint64_t ProgressViewValue.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys, (uint64_t)&unk_1ED424818, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  uint64_t v54 = v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v58 = (char *)&v46 - v6;
  type metadata accessor for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ProgressViewValue.AbsoluteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys, (uint64_t)&unk_1ED424788, v3);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v55 = (char *)&v46 - v8;
  type metadata accessor for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ProgressViewValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys, (uint64_t)&unk_1ED4246F8, v3);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v46 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v46 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys();
  uint64_t v21 = (uint64_t)v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v48 = v17;
  uint64_t v49 = v14;
  uint64_t v22 = v57;
  uint64_t v23 = v58;
  uint64_t v24 = v12;
  uint64_t v59 = a1;
  uint64_t v25 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v26 = (char *)v25;
  if (*(void *)(v25 + 16) != 1)
  {
    uint64_t v28 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v11;
    uint64_t v31 = v30;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v31 = v24;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v31, *MEMORY[0x1E4FBBA70], v28);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v22);
    a1 = v59;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (*(unsigned char *)(v25 + 32))
  {
    char v65 = 1;
    lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v52 = v24;
    uint64_t v55 = v26;
    type metadata accessor for ClosedRange<Date>();
    char v64 = 0;
    _sSNy10Foundation4DateVGSNyxGSesSeRzrlWlTm_1(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date);
    uint64_t v27 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v63 = 1;
    int v36 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v37 = v56;
    uint64_t v38 = v54;
    uint64_t v47 = 0;
    LODWORD(v51) = v36;
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    uint64_t v42 = *(int *)(v41 + 48);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v22);
    uint64_t v43 = (uint64_t)v49;
    v49[v42] = v51 & 1;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    char v62 = 0;
    lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys();
    uint64_t v32 = v55;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v61 = 0;
    uint64_t v33 = v52;
    uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v54) = v39;
    uint64_t v58 = (char *)v34;
    char v60 = 1;
    char v40 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v47 = 0;
    char v44 = v40;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v22);
    uint64_t v45 = v48;
    *uint64_t v48 = v58;
    *((unsigned char *)v45 + 8) = v54 & 1;
    *((unsigned char *)v45 + 9) = v44 & 1;
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = (uint64_t)v45;
  }
  outlined init with take of WidgetAuxiliaryViewMetadata(v43, (uint64_t)v20, type metadata accessor for ProgressViewValue);
  outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v20, v50, type metadata accessor for ProgressViewValue);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ProgressViewValue.AbsoluteCodingKeys()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProgressViewValue.AbsoluteCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ProgressViewValue.AbsoluteCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProgressViewValue.AbsoluteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProgressViewValue.AbsoluteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ProgressViewValue.CodingKeys()
{
  if (*v0) {
    return 0x616C655265746164;
  }
  else {
    return 0x6574756C6F736261;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProgressViewValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ProgressViewValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProgressViewValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProgressViewValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ProgressViewValue.DateRelativeCodingKeys()
{
  if (*v0) {
    return 0x776F64746E756F63;
  }
  else {
    return 0x6C61767265746E69;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProgressViewValue.DateRelativeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ProgressViewValue.DateRelativeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProgressViewValue.DateRelativeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProgressViewValue.DateRelativeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProgressViewValue@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ProgressViewValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProgressViewValue(void *a1)
{
  return ProgressViewValue.encode(to:)(a1);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedProgressView(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = a1[3];
  uint64_t v5 = type metadata accessor for ResolvedProgressViewStyle(0);
  v8[0] = v1;
  v8[1] = v2;
  int v9 = v3;
  uint64_t v10 = v4;
  uint64_t v6 = _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, (void (*)(uint64_t))type metadata accessor for ResolvedProgressViewStyle);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 40))(v8, v5, v6);
}

uint64_t CustomProgressView.init(fractionCompleted:alwaysIndeterminate:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = type metadata accessor for CustomProgressView();
  uint64_t v17 = a8 + *(int *)(v16 + 52);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(v17, 1, 1, a6);
  uint64_t v18 = a8 + *(int *)(v16 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 56))(v18, 1, 1, a7);
  *(void *)a8 = a1;
  *(unsigned char *)(a8 + 8) = a2 & 1;
  *(unsigned char *)(a8 + 9) = a3;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, a4, v19);
  uint64_t v20 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, a5, v20);
}

uint64_t implicit closure #1 in static CustomProgressView._makeView(view:inputs:)(unsigned int a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)uint64_t v49 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v49[16] = v11;
  *(_OWORD *)&v49[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v49[48] = *(_DWORD *)(a3 + 80);
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v47 = *(_OWORD *)a3;
  long long v48 = v12;
  type metadata accessor for Optional();
  uint64_t v51 = a7;
  swift_getWitnessTable();
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a2, (uint64_t *)&v47, (uint64_t)&v52);
  *(void *)&long long v47 = v52;
  DWORD2(v47) = DWORD2(v52);
  *(void *)&long long v48 = v53;
  DWORD2(v48) = DWORD2(v53);
  *(void *)uint64_t v49 = *(void *)v54;
  *(_OWORD *)&v49[8] = *(_OWORD *)&v54[8];
  *(_OWORD *)&v49[24] = *(_OWORD *)&v54[24];
  *(_OWORD *)&v49[40] = *(_OWORD *)&v54[40];
  long long v50 = v55;
  uint64_t v44 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage();
  uint64_t WitnessTable = swift_getWitnessTable();
  outlined retain of _ViewInputs(a3);
  uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F4E740];
  type metadata accessor for Attribute<WidgetAuxiliaryTextImagePreference?>(0, &lazy cache variable for type metadata for Attribute<WidgetAuxiliaryTextImagePreference?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryTextImagePreference?, MEMORY[0x1E4F4E740]);
  uint64_t v14 = v13;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v47, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)v43, v44, MEMORY[0x1E4FBC248], v13, MEMORY[0x1E4FBC278], v15);
  uint64_t v16 = (void *)v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  long long v17 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)uint64_t v49 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v49[16] = v17;
  *(_OWORD *)&v49[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v49[48] = *(_DWORD *)(a3 + 80);
  long long v18 = *(_OWORD *)(a3 + 16);
  long long v47 = *(_OWORD *)a3;
  long long v48 = v18;
  type metadata accessor for Optional();
  uint64_t v46 = a8;
  swift_getWitnessTable();
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a4, (uint64_t *)&v47, (uint64_t)&v52);
  *(void *)&long long v47 = v52;
  DWORD2(v47) = DWORD2(v52);
  *(void *)&long long v48 = v53;
  DWORD2(v48) = DWORD2(v53);
  *(void *)uint64_t v49 = *(void *)v54;
  *(_OWORD *)&v49[8] = *(_OWORD *)&v54[8];
  *(_OWORD *)&v49[24] = *(_OWORD *)&v54[24];
  *(_OWORD *)&v49[40] = *(_OWORD *)&v54[40];
  long long v50 = v55;
  uint64_t v41 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage();
  uint64_t v42 = swift_getWitnessTable();
  outlined retain of _ViewInputs(a3);
  uint64_t v19 = MEMORY[0x1E4FBC248];
  uint64_t v20 = MEMORY[0x1E4FBC278];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v47, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)v40, v41, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v21);
  uint64_t v22 = (void *)v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  long long v23 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)uint64_t v54 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v54[16] = v23;
  *(_OWORD *)&v54[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v54[48] = *(_DWORD *)(a3 + 80);
  long long v24 = *(_OWORD *)(a3 + 16);
  long long v52 = *(_OWORD *)a3;
  long long v53 = v24;
  unsigned int v25 = _ViewInputs.environment.getter();
  *(void *)&long long v47 = __PAIR64__(v36, a1);
  *((void *)&v47 + 1) = __PAIR64__(v25, v36);
  *(void *)&long long v52 = a5;
  *((void *)&v52 + 1) = a6;
  *(void *)&long long v53 = a7;
  *((void *)&v53 + 1) = a8;
  uint64_t v38 = type metadata accessor for CustomProgressView.WidgetMetadataWriter();
  uint64_t v39 = swift_getWitnessTable();
  type metadata accessor for Attribute<WidgetAuxiliaryTextImagePreference?>(0, &lazy cache variable for type metadata for Attribute<WidgetAuxiliaryViewMetadata?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata?, v32);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v47, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)v37, v38, v19, v26, v20, v27);
  return v52;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance CustomProgressView<A, B>.Child@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedProgressView(255);
  lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  type metadata accessor for OptionalSourceWriter();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t CustomProgressView.WidgetMetadataWriter.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v89 = a1;
  uint64_t v85 = a2;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for Attribute<WidgetAuxiliaryTextImagePreference?>(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Progress?, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v84 = (uint64_t)&v76 - v4;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v83 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v88 = (char *)&v76 - v8;
  type metadata accessor for Attribute<WidgetAuxiliaryTextImagePreference?>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], v2);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v87 = (char *)&v76 - v10;
  type metadata accessor for Attribute<WidgetAuxiliaryTextImagePreference?>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v2);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v80 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v76 - v14;
  uint64_t v16 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  *(void *)&long long v86 = *((void *)v16 - 1);
  MEMORY[0x1F4188790](v16);
  double v79 = (uint64_t *)((char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  id v82 = (id *)((char *)&v76 - v19);
  MEMORY[0x1F4188790](v20);
  uint64_t v91 = (id *)((char *)&v76 - v21);
  uint64_t v22 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v22);
  long long v24 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1F4188790](v25);
  uint64_t v81 = (uint64_t)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v76 - v28;
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ProgressViewStyleConfiguration(Value, (uint64_t)v24, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    char v32 = v24[*(int *)(v31 + 48)];
    type metadata accessor for (ClosedRange<Date>, Bool)();
    uint64_t v34 = &v29[*(int *)(v33 + 48)];
    outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v24, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    char v35 = v24[8];
    char v32 = v24[9];
    *(void *)uint64_t v29 = *(void *)v24;
    v29[8] = v35;
    uint64_t v34 = v29 + 9;
  }
  uint64_t v90 = v29;
  *uint64_t v34 = v32;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for WidgetAuxiliaryTextImagePreference?();
  unsigned int v36 = (uint64_t *)AGGraphGetValue();
  uint64_t v37 = *v36;
  if (*v36)
  {
    if (v37 != 1)
    {
      outlined copy of WidgetAuxiliaryTextImagePreference?(*v36);
      uint64_t v38 = swift_bridgeObjectRetain();
      outlined consume of WidgetAuxiliaryTextImagePreference?(v38);
      PlatformItemList.mergedContentItem.getter(v37, (uint64_t)v15);
      swift_bridgeObjectRelease();
      uint64_t v39 = type metadata accessor for PlatformItemList.Item();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v15, 0, 1, v39);
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
  }
  uint64_t v40 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v15, 1, 1, v40);
LABEL_9:
  uint64_t v41 = type metadata accessor for URL();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = (uint64_t)v87;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56);
  uint64_t v45 = v42 + 56;
  v44(v87, 1, 1, v41);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t, int *))(v86 + 56);
  long long v86 = xmmword_18834BB90;
  long long v94 = xmmword_18834BB90;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  uint64_t v47 = (uint64_t)v88;
  long long v48 = v46;
  v46(v88, 1, 1, v16);
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v15, v43, (uint64_t *)&v94, v47, v91);
  uint64_t v49 = (uint64_t *)AGGraphGetValue();
  uint64_t v50 = *v49;
  if (!*v49)
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
    goto LABEL_13;
  }
  if (v50 == 1)
  {
LABEL_13:
    uint64_t v51 = (uint64_t)v90;
    uint64_t v56 = type metadata accessor for PlatformItemList.Item();
    uint64_t v54 = v80;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v80, 1, 1, v56);
    goto LABEL_14;
  }
  uint64_t v51 = (uint64_t)v90;
  outlined copy of WidgetAuxiliaryTextImagePreference?(*v49);
  uint64_t v52 = swift_bridgeObjectRetain();
  outlined consume of WidgetAuxiliaryTextImagePreference?(v52);
  uint64_t v53 = v80;
  PlatformItemList.mergedContentItem.getter(v50, v80);
  uint64_t v54 = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v53, 0, 1, v55);
LABEL_14:
  uint64_t v57 = (uint64_t)v87;
  uint64_t v77 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44;
  uint64_t v78 = v45;
  v44(v87, 1, 1, v41);
  long long v94 = v86;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  uint64_t v80 = v41;
  uint64_t v58 = (uint64_t)v88;
  v48(v88, 1, 1, v16);
  uint64_t v59 = v82;
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)(v54, v57, (uint64_t *)&v94, v58, v82);
  uint64_t v60 = v81;
  outlined init with copy of ProgressViewStyleConfiguration(v51, v81, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  outlined init with copy of ProgressViewStyleConfiguration((uint64_t)v91, v58, type metadata accessor for WidgetAuxiliaryViewMetadata);
  v48((char *)v58, 0, 1, v16);
  uint64_t v61 = v83;
  outlined init with copy of ProgressViewStyleConfiguration((uint64_t)v59, v83, type metadata accessor for WidgetAuxiliaryViewMetadata);
  v48((char *)v61, 0, 1, v16);
  char v62 = (uint64_t *)AGGraphGetValue();
  uint64_t v63 = *v62;
  uint64_t v64 = v62[1];
  swift_retain();
  swift_retain();
  *(void *)&long long v94 = v63;
  *((void *)&v94 + 1) = v64;
  static WidgetAuxiliaryViewMetadata.tint(from:)((uint64_t)&v92);
  swift_release();
  swift_release();
  *(void *)&long long v94 = v92;
  BYTE8(v94) = v93;
  uint64_t v65 = v84;
  WidgetAuxiliaryViewMetadata.Progress.init(kind:label:currentValueLabel:tint:)(v60, v58, v61, (uint64_t *)&v94, v84);
  uint64_t v66 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  char v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56);
  v67(v65, 0, 1, v66);
  uint64_t v68 = (uint64_t)v79;
  *double v79 = 0;
  *(void *)(v68 + 8) = 0;
  uint64_t v69 = v68 + v16[6];
  uint64_t v70 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 1, 1, v70);
  *(void *)(v68 + v16[7]) = 0;
  uint64_t v71 = v68 + v16[8];
  v67(v71, 1, 1, v66);
  uint64_t v72 = v68 + v16[9];
  *(unsigned char *)(v72 + 48) = 0;
  *(_OWORD *)(v72 + 16) = 0u;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)uint64_t v72 = 0u;
  v77(v68 + v16[10], 1, 1, v80);
  uint64_t v73 = (long long *)(v68 + v16[11]);
  *uint64_t v73 = v86;
  v73[1] = 0u;
  v73[2] = 0u;
  v73[3] = 0u;
  outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(v65, v71);
  uint64_t v74 = v85;
  outlined init with take of WidgetAuxiliaryViewMetadata(v68, v85, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined destroy of ProgressViewStyleConfiguration((uint64_t)v59, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined destroy of ProgressViewStyleConfiguration((uint64_t)v91, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined destroy of ProgressViewStyleConfiguration((uint64_t)v90, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  return ((uint64_t (*)(uint64_t, void, uint64_t, int *))v48)(v74, 0, 1, v16);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance CustomProgressView<A, B>.WidgetMetadataWriter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance CustomProgressView<A, B>.WidgetMetadataWriter@<X0>(uint64_t a1@<X8>)
{
  return CustomProgressView.WidgetMetadataWriter.value.getter(*(void *)(v1 + 8), a1);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CustomProgressView<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance CustomProgressView<A, B>()
{
}

uint64_t ProgressView<>.init(label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - v9;
  v19[0] = a2;
  v19[1] = MEMORY[0x1E4F417F8];
  v19[2] = a3;
  v19[3] = MEMORY[0x1E4F417F0];
  uint64_t v11 = type metadata accessor for ProgressView.Base();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, v7, v13);
  LOBYTE(v19[0]) = 1;
  CustomProgressView.init(fractionCompleted:alwaysIndeterminate:label:currentValueLabel:)(0, 1, 1, (uint64_t)v10, (uint64_t)v19, a2, MEMORY[0x1E4F417F8], (uint64_t)v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18, v15, v11);
}

uint64_t ProgressView<>.init(label:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v13 - v10;
  a1(v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v11, 0, 1, a2);
  return ProgressView<>.init(label:)((uint64_t)v11, a2, a3, a4);
}

uint64_t ProgressView<>.init<>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7 & 1;
  uint64_t v9 = MEMORY[0x1E4F41420];
  uint64_t v10 = MEMORY[0x1E4F41418];
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for CustomProgressView<Text, EmptyView>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
  uint64_t v12 = *(int *)(v11 + 56);
  uint64_t v13 = (uint64_t *)(a1 + *(int *)(v11 + 52));
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  *uint64_t v13 = v2;
  v13[1] = v4;
  void v13[2] = v8;
  void v13[3] = v6;
  *(unsigned char *)(a1 + v12) = 1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for ProgressView<Text, EmptyView>.Base, v9, v10, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);

  return swift_storeEnumTagMultiPayload();
}

uint64_t ProgressView<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v7);
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14 & 1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for CustomProgressView<Text, EmptyView>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
  uint64_t v17 = *(int *)(v16 + 56);
  uint64_t v18 = (uint64_t *)(a3 + *(int *)(v16 + 52));
  *(void *)a3 = 0;
  *(_WORD *)(a3 + 8) = 257;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  *uint64_t v18 = v9;
  v18[1] = v11;
  v18[2] = v15;
  v18[3] = v13;
  *(unsigned char *)(a3 + v17) = 1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for ProgressView<Text, EmptyView>.Base, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t ProgressView.init<A>(value:total:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v49 = a9;
  uint64_t v50 = a7;
  uint64_t v48 = a4;
  char v14 = a2;
  uint64_t v40 = a2;
  uint64_t v42 = a1;
  uint64_t v43 = a11;
  uint64_t v44 = a3;
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v41 = (char *)v36 - v17;
  uint64_t v39 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v20 = (char *)v36 - v19;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v53 = a8;
  uint64_t v54 = a10;
  v36[1] = a10;
  v36[2] = a8;
  uint64_t v21 = type metadata accessor for ProgressView.Base();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v46 = v21;
  uint64_t v47 = v22;
  MEMORY[0x1F4188790](v21);
  long long v24 = (char *)v36 - v23;
  uint64_t v43 = getter of fractionCompleted #1 in ProgressView.init<A>(value:total:label:currentValueLabel:)(a1, v14, a5, a6, v50, a8, a10, v43);
  LOBYTE(v14) = v25 & 1;
  uint64_t v26 = v44;
  uint64_t v27 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v44, v39);
  uint64_t v28 = v16;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v30 = (uint64_t)v41;
  uint64_t v31 = v48;
  uint64_t v32 = v45;
  v29(v41, v48, v45);
  CustomProgressView.init(fractionCompleted:alwaysIndeterminate:label:currentValueLabel:)(v43, (char)v14, 0, (uint64_t)v20, v30, v37, v38, (uint64_t)v24);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v32);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(*(void *)(v50 - 8) + 8))(v40, v50);
  uint64_t v33 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v42, v33);
  uint64_t v34 = v46;
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v49, v24, v34);
}

uint64_t getter of fractionCompleted #1 in ProgressView.init<A>(value:total:label:currentValueLabel:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v81 = a2;
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t v9 = *(void *)(a8 + 16);
  uint64_t v72 = a8;
  uint64_t v73 = v9;
  uint64_t v79 = *(void *)(*(void *)(*(void *)(v9 + 16) + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v80 = (char *)&v64 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v64 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v71 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v64 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v64 - v22;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v64 - v25;
  MEMORY[0x1F4188790](v27);
  uint64_t v76 = (char *)&v64 - v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v77 = (char *)&v64 - v30;
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)&v64 - v32;
  double v35 = MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)&v64 - v36;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, AssociatedConformanceWitness, v11, v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return 0;
  }
  uint64_t v68 = v26;
  uint64_t v66 = v20;
  uint64_t v70 = v23;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v37, v14, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v38 = *(void *)(*(void *)(v73 + 24) + 8);
  char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v65 = v33;
  v40(v33, a5);
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v74 = v37;
  v41(v77, v37, a5);
  uint64_t v69 = v41;
  v41(v76, v81, a5);
  uint64_t v67 = v38;
  if (v39)
  {
    v40(v76, a5);
    v40(v77, a5);
    uint64_t v42 = v65;
  }
  else
  {
    uint64_t v44 = v76;
    uint64_t v43 = v77;
    char v45 = dispatch thunk of static Comparable.> infix(_:_:)();
    v40(v44, a5);
    v40(v43, a5);
    uint64_t v42 = v65;
    uint64_t v46 = v74;
    if ((v45 & 1) == 0) {
      goto LABEL_7;
    }
  }
  static os_log_type_t.fault.getter();
  uint64_t v47 = static Log.runtimeIssuesLog.getter();
  uint64_t v77 = (char *)(v15 + 8);
  uint64_t v48 = (void *)v47;
  os_log(_:dso:log:_:_:)();

  uint64_t v46 = v74;
LABEL_7:
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v49 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v40(v42, a5);
  uint64_t v50 = v68;
  uint64_t v51 = v69;
  v69(v68, v81, a5);
  if ((v49 & 1) == 0)
  {
    v40(v50, a5);
    uint64_t v53 = v70;
    v51(v70, v46, a5);
    uint64_t v55 = v66;
    v51(v66, v81, a5);
    goto LABEL_13;
  }
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v52 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v40(v42, a5);
  v40(v50, a5);
  uint64_t v53 = v70;
  v51(v70, v74, a5);
  uint64_t v54 = v42;
  uint64_t v55 = v66;
  v51(v66, v81, a5);
  if ((v52 & 1) == 0)
  {
LABEL_13:
    v40(v55, a5);
    v40(v53, a5);
    goto LABEL_14;
  }
  uint64_t v56 = AssociatedTypeWitness;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
  v40(v54, a5);
  uint64_t v58 = v71;
  v69(v71, v55, a5);
  if (v57)
  {
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
    v40(v54, a5);
    v40(v58, a5);
    v40(v55, a5);
    v40(v70, a5);
    if ((v59 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    v40(v74, a5);
    return 0;
  }
  ((void (*)(char *, uint64_t, uint64_t))v40)(v58, a5, v56);
  v40(v55, a5);
  v40(v70, a5);
LABEL_17:
  uint64_t v61 = v74;
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  double v62 = v82;
  if (v82 < 0.0) {
    double v62 = 0.0;
  }
  if (v62 <= 1.0) {
    double v63 = v62;
  }
  else {
    double v63 = 1.0;
  }
  v40(v61, a5);
  return *(void *)&v63;
}

uint64_t ProgressView.init<A>(value:total:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = &v19[-v16];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v14 + 16))(&v19[-v16], a1, v13, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a3);
  char v21 = 1;
  char v20 = 1;
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v17, v12, (uint64_t)&v21, (uint64_t)&v20, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], a3, MEMORY[0x1E4F417F0], a5, MEMORY[0x1E4F417F0], a4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
}

uint64_t ProgressView.init<A>(value:total:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v31 = a8;
  uint64_t v32 = a9;
  uint64_t v33 = a7;
  uint64_t v28 = a1;
  uint64_t v29 = a4;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  double v15 = (char *)&v27 - v14;
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  double v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v27 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v27 - v23, a1, v20, v22);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a2, a6);
  v30(v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v15, 0, 1, a5);
  char v34 = 1;
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v24, v19, (uint64_t)v15, (uint64_t)&v34, a5, MEMORY[0x1E4F417F8], a6, v33, v32, MEMORY[0x1E4F417F0], v31);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v28, v20);
}

uint64_t ProgressView.init<A>(value:total:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v39 = a8;
  uint64_t v40 = a6;
  uint64_t v37 = a4;
  uint64_t v38 = a3;
  uint64_t v36 = a1;
  uint64_t v44 = a9;
  uint64_t v43 = a12;
  uint64_t v41 = a5;
  uint64_t v42 = a13;
  uint64_t v45 = a11;
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v22 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v34 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v35 - 8);
  double v27 = MEMORY[0x1F4188790](v35);
  uint64_t v29 = (char *)&v34 - v28;
  (*(void (**)(char *, uint64_t, double))(v26 + 16))((char *)&v34 - v28, a1, v27);
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, a2, a10);
  v38(v30);
  uint64_t v31 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(a7 - 8) + 56))(v21, 0, 1, a7);
  v41(v31);
  uint64_t v32 = v39;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v18, 0, 1, v39);
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v29, v25, (uint64_t)v21, (uint64_t)v18, a7, v32, a10, v45, v44, v43, v42);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a2, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v36, v35);
}

uint64_t ProgressView.init<A>(_:value:total:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v26 = a7;
  uint64_t v24 = a3;
  v23[3] = a2;
  uint64_t v27 = a8;
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v23 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)v23 - v17, a4, v14, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, a6);
  v29[0] = Text.init(_:tableName:bundle:comment:)();
  v29[1] = v20;
  _OWORD v29[2] = v19 & 1;
  v29[3] = v21;
  char v28 = 1;
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v18, v13, (uint64_t)v29, (uint64_t)&v28, MEMORY[0x1E4F41420], MEMORY[0x1E4F417F8], a6, MEMORY[0x1E4F41418], v27, MEMORY[0x1E4F417F0], v26);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v25, v14);
}

uint64_t ProgressView.init<A, B>(_:value:total:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v34 = a8;
  uint64_t v35 = a1;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v29 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v29 - v22, a2, v19, v21);
  uint64_t v24 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v31, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v35, a4);
  v37[0] = Text.init<A>(_:)();
  v37[1] = v26;
  v37[2] = v25 & 1;
  v37[3] = v27;
  char v36 = 1;
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v23, v18, (uint64_t)v37, (uint64_t)&v36, MEMORY[0x1E4F41420], MEMORY[0x1E4F417F8], a5, MEMORY[0x1E4F41418], v34, MEMORY[0x1E4F417F0], v33);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v24, a5);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v30, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v35, a4);
}

uint64_t ProgressView.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for ProgressView<EmptyView, EmptyView>.Base, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
  *(void *)(a2 + 56) = 0;

  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v17)();
  uint64_t v18;

  uint64_t v17 = type metadata accessor for CustomProgressView;
  uint64_t v18 = a2;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - v5;
  double v7 = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v17 - v12;
  outlined init with copy of ProgressViewStyleConfiguration(a1, (uint64_t)v10, type metadata accessor for ProgressViewStyleConfiguration);
  uint64_t v15 = *(int *)(v4 + 60);
  uint64_t v14 = *(int *)(v4 + 64);
  v6[v14] = 1;
  outlined init with copy of ProgressViewStyleConfiguration((uint64_t)v10, (uint64_t)v6, type metadata accessor for ProgressViewValue);
  v6[v15] = v10[*(int *)(v8 + 36)];
  LOBYTE(v15) = v10[*(int *)(v8 + 40)];
  outlined destroy of ProgressViewStyleConfiguration((uint64_t)v10, type metadata accessor for ProgressViewStyleConfiguration);
  v6[v14] = v15;
  outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v6, (uint64_t)v13, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))v17);
  outlined destroy of ProgressViewStyleConfiguration(a1, type metadata accessor for ProgressViewStyleConfiguration);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v13, v18, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
}

void type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    v6[0] = &type metadata for ProgressViewStyleConfiguration.Label;
    v6[1] = &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
    Swift::String v6[2] = &protocol witness table for ProgressViewStyleConfiguration.Label;
    v6[3] = &protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel;
    unint64_t v4 = a3(0, v6);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t initializeWithTake for ProgressView(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = ((v8 + v9) & ~v9) + v8;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v12 - 8);
  if ((unint64_t)(v11 + 1) > 0xA) {
    uint64_t v15 = v11 + 1;
  }
  else {
    uint64_t v15 = 10;
  }
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = v15 + v17 + 1;
  int v19 = *(_DWORD *)(v14 + 84);
  size_t v20 = *(void *)(v14 + 64);
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  uint64_t v22 = *(void *)(v13 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  size_t __n = v21;
  uint64_t v24 = (v21 + v23 + (v18 & ~v17)) & ~v23;
  if (*(_DWORD *)(v22 + 84)) {
    uint64_t v25 = *(void *)(*(void *)(v13 - 8) + 64);
  }
  else {
    uint64_t v25 = *(void *)(*(void *)(v13 - 8) + 64) + 1;
  }
  if ((unint64_t)(v25 + v24) <= 0x40) {
    uint64_t v26 = 64;
  }
  else {
    uint64_t v26 = v25 + v24;
  }
  unsigned int v27 = a2[v26];
  unsigned int v28 = v27 - 2;
  if (v27 >= 2)
  {
    if (v26 <= 3) {
      uint64_t v29 = v26;
    }
    else {
      uint64_t v29 = 4;
    }
    switch(v29)
    {
      case 1:
        int v30 = *a2;
        if (v26 >= 4) {
          goto LABEL_27;
        }
        goto LABEL_21;
      case 2:
        int v30 = *(unsigned __int16 *)a2;
        if (v26 < 4) {
          goto LABEL_21;
        }
        goto LABEL_27;
      case 3:
        int v30 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v26 < 4) {
          goto LABEL_21;
        }
        goto LABEL_27;
      case 4:
        int v30 = *(_DWORD *)a2;
        if (v26 < 4)
        {
LABEL_21:
          unsigned int v27 = (v30 | (v28 << (8 * v26))) + 2;
          break;
        }
LABEL_27:
        if (v30 != -1) {
          goto LABEL_28;
        }
        goto LABEL_23;
      default:
        break;
    }
  }
  if (v27 == 1)
  {
LABEL_23:
    long long v31 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v31;
    long long v32 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v32;
    char v33 = 1;
  }
  else
  {
LABEL_28:
    unsigned int v34 = a2[v15];
    unsigned int v35 = v34 - 2;
    if (v34 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v36 = v15;
      }
      else {
        uint64_t v36 = 4;
      }
      switch(v36)
      {
        case 1:
          int v37 = *a2;
          if (v15 < 4) {
            goto LABEL_36;
          }
          goto LABEL_40;
        case 2:
          int v37 = *(unsigned __int16 *)a2;
          if (v15 < 4) {
            goto LABEL_36;
          }
          goto LABEL_40;
        case 3:
          int v37 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v15 < 4) {
            goto LABEL_36;
          }
          goto LABEL_40;
        case 4:
          int v37 = *(_DWORD *)a2;
          if (v15 < 4) {
LABEL_36:
          }
            unsigned int v34 = (v37 | (v35 << (8 * v15))) + 2;
          else {
LABEL_40:
          }
            unsigned int v34 = v37 + 2;
          break;
        default:
          break;
      }
    }
    size_t v60 = v25;
    uint64_t v61 = *(void *)(v13 - 8);
    uint64_t v38 = ~v17;
    if (v34 == 1)
    {
      uint64_t v39 = ~v9;
      uint64_t v59 = v12;
      uint64_t v40 = *(void (**)(uint64_t, unsigned __int8 *))(v7 + 32);
      uint64_t v57 = v15 + v17 + 1;
      uint64_t v58 = v26;
      uint64_t v41 = v6;
      uint64_t v55 = v15;
      uint64_t v56 = v16;
      uint64_t v42 = v11;
      v40(a1, a2);
      uint64_t v43 = v41;
      uint64_t v26 = v58;
      ((void (*)(uint64_t, unint64_t, uint64_t))v40)((v10 + a1) & v39, (unint64_t)&a2[v10] & v39, v43);
      uint64_t v18 = v57;
      uint64_t v12 = v59;
      *(unsigned char *)(v42 + a1) = a2[v42];
      uint64_t v15 = v55;
      uint64_t v16 = v56;
      char v44 = 1;
    }
    else
    {
      char v44 = 0;
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    }
    uint64_t v45 = ~v23;
    *(unsigned char *)(a1 + v15) = v44;
    uint64_t v46 = (void *)((v18 + a1) & v38);
    uint64_t v47 = (char *)((unint64_t)&a2[v18] & v38);
    uint64_t v48 = v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v47, 1, v12))
    {
      size_t v49 = __n;
      memcpy(v46, v47, __n);
      uint64_t v50 = v61;
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 32))(v46, v47, v48);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v46, 0, 1, v48);
      uint64_t v50 = v61;
      size_t v49 = __n;
    }
    uint64_t v51 = &v47[v49];
    char v52 = (void *)(((unint64_t)v46 + v49 + v23) & v45);
    uint64_t v53 = (const void *)((unint64_t)&v51[v23] & v45);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48))(v53, 1, v13))
    {
      memcpy(v52, v53, v60);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 32))(v52, v53, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v13);
    }
    char v33 = 0;
  }
  *(unsigned char *)(a1 + v26) = v33;
  return a1;
}

unsigned __int8 *assignWithTake for ProgressView(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v63 = type metadata accessor for Date();
    uint64_t v6 = *(void *)(*(void *)(v63 - 8) + 64);
    uint64_t v62 = *(void *)(v63 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v62 + 80);
    uint64_t v61 = v6 + v7;
    uint64_t v8 = ((v6 + v7) & ~v7) + v6;
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v67 = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(v67 - 8);
    uint64_t v58 = v8;
    if ((unint64_t)(v8 + 1) > 0xA) {
      uint64_t v11 = v8 + 1;
    }
    else {
      uint64_t v11 = 10;
    }
    uint64_t v12 = *(void *)(v67 - 8);
    uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v14 = v11 + v13 + 1;
    int v15 = *(_DWORD *)(v10 + 84);
    size_t v16 = *(void *)(v10 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    uint64_t v18 = *(void *)(v9 - 8);
    uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v66 = v18;
    size_t v20 = *(void *)(v18 + 64);
    if (!*(_DWORD *)(v18 + 84)) {
      ++v20;
    }
    size_t v59 = v20;
    unint64_t v21 = v20 + ((v17 + v19 + (v14 & ~v13)) & ~v19);
    if (v21 <= 0x40) {
      uint64_t v22 = 64;
    }
    else {
      uint64_t v22 = v21;
    }
    unsigned int v23 = a1[v22];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a1;
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 2:
          int v26 = *(unsigned __int16 *)a1;
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 3:
          int v26 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 4:
          int v26 = *(_DWORD *)a1;
          if (v22 < 4) {
LABEL_21:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
          else {
LABEL_25:
          }
            unsigned int v23 = v26 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v60 = ~v7;
    uint64_t v64 = ~v13;
    uint64_t v65 = ~v19;
    if (v23 == 1)
    {

      if (*((void *)a1 + 4))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    else
    {
      unsigned int v27 = a1[v11];
      unsigned int v28 = v27 - 2;
      if (v27 >= 2)
      {
        if (v11 <= 3) {
          uint64_t v29 = v11;
        }
        else {
          uint64_t v29 = 4;
        }
        switch(v29)
        {
          case 1:
            int v30 = *a1;
            if (v11 >= 4) {
              goto LABEL_70;
            }
            goto LABEL_38;
          case 2:
            int v30 = *(unsigned __int16 *)a1;
            if (v11 < 4) {
              goto LABEL_38;
            }
            goto LABEL_70;
          case 3:
            int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v11 < 4) {
              goto LABEL_38;
            }
            goto LABEL_70;
          case 4:
            int v30 = *(_DWORD *)a1;
            if (v11 < 4)
            {
LABEL_38:
              unsigned int v27 = (v30 | (v28 << (8 * v11))) + 2;
              break;
            }
LABEL_70:
            if (v30 != -1) {
              goto LABEL_41;
            }
            goto LABEL_40;
          default:
            break;
        }
      }
      if (v27 == 1)
      {
LABEL_40:
        uint64_t v56 = *(void *)(v67 - 8);
        uint64_t v31 = v11 + v13 + 1;
        uint64_t v32 = v9;
        char v33 = *(void (**)(unsigned __int8 *, uint64_t))(v62 + 8);
        v33(a1, v63);
        v33((unsigned __int8 *)((unint64_t)&a1[v61] & v60), v63);
        uint64_t v9 = v32;
        uint64_t v14 = v31;
        uint64_t v12 = v56;
      }
LABEL_41:
      unint64_t v34 = (unint64_t)&a1[v14] & v64;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v34, 1, v67)) {
        (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v34, v67);
      }
      size_t v35 = (v34 + v17 + v19) & v65;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v66 + 48))(v35, 1, v9)) {
        (*(void (**)(size_t, uint64_t))(v66 + 8))(v35, v9);
      }
    }
    unsigned int v36 = a2[v22];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v38 = v22;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *a2;
          if (v22 >= 4) {
            goto LABEL_59;
          }
          goto LABEL_53;
        case 2:
          int v39 = *(unsigned __int16 *)a2;
          if (v22 < 4) {
            goto LABEL_53;
          }
          goto LABEL_59;
        case 3:
          int v39 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v22 < 4) {
            goto LABEL_53;
          }
          goto LABEL_59;
        case 4:
          int v39 = *(_DWORD *)a2;
          if (v22 < 4)
          {
LABEL_53:
            unsigned int v36 = (v39 | (v37 << (8 * v22))) + 2;
            break;
          }
LABEL_59:
          if (v39 != -1) {
            goto LABEL_60;
          }
          goto LABEL_55;
        default:
          break;
      }
    }
    if (v36 == 1)
    {
LABEL_55:
      long long v40 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v40;
      long long v41 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v41;
      char v42 = 1;
    }
    else
    {
LABEL_60:
      unsigned int v43 = a2[v11];
      unsigned int v44 = v43 - 2;
      if (v43 >= 2)
      {
        if (v11 <= 3) {
          uint64_t v45 = v11;
        }
        else {
          uint64_t v45 = 4;
        }
        switch(v45)
        {
          case 1:
            int v46 = *a2;
            if (v11 < 4) {
              goto LABEL_73;
            }
            goto LABEL_77;
          case 2:
            int v46 = *(unsigned __int16 *)a2;
            if (v11 < 4) {
              goto LABEL_73;
            }
            goto LABEL_77;
          case 3:
            int v46 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v11 < 4) {
              goto LABEL_73;
            }
            goto LABEL_77;
          case 4:
            int v46 = *(_DWORD *)a2;
            if (v11 < 4) {
LABEL_73:
            }
              unsigned int v43 = (v46 | (v44 << (8 * v11))) + 2;
            else {
LABEL_77:
            }
              unsigned int v43 = v46 + 2;
            break;
          default:
            break;
        }
      }
      uint64_t v57 = v9;
      if (v43 == 1)
      {
        uint64_t v47 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v62 + 32);
        v47(a1, a2, v63);
        v47((unsigned __int8 *)((unint64_t)&a1[v61] & v60), (unsigned __int8 *)((unint64_t)&a2[v61] & v60), v63);
        a1[v58] = a2[v58];
        char v48 = 1;
      }
      else
      {
        char v48 = 0;
        *(void *)a1 = *(void *)a2;
        *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
      }
      a1[v11] = v48;
      size_t v49 = (void *)((unint64_t)&a1[v14] & v64);
      uint64_t v50 = (char *)((unint64_t)&a2[v14] & v64);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v50, 1, v67))
      {
        size_t v51 = v17;
        memcpy(v49, v50, v17);
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v49, v50, v67);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v49, 0, 1, v67);
        size_t v51 = v17;
      }
      char v52 = &v50[v51];
      uint64_t v53 = (void *)(((unint64_t)v49 + v51 + v19) & v65);
      uint64_t v54 = (const void *)((unint64_t)&v52[v19] & v65);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v66 + 48))(v54, 1, v57))
      {
        memcpy(v53, v54, v59);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v66 + 32))(v53, v54, v57);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v53, 0, 1, v57);
      }
      char v42 = 0;
    }
    a1[v22] = v42;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v7 = *(void *)(v6 + 64)
     + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = 10;
  if (v7 + 1 > 0xA) {
    uint64_t v8 = v7 + 1;
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  int v14 = *(_DWORD *)(v12 + 84);
  uint64_t v15 = *(void *)(v12 + 64);
  if (!*(_DWORD *)(v9 + 84)) {
    ++v11;
  }
  unint64_t v16 = (v11 + v13 + v10) & ~v13;
  if (!v14) {
    ++v15;
  }
  unint64_t v17 = v15 + v16;
  uint64_t v18 = 64;
  if (v17 > 0x40) {
    uint64_t v18 = v17;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_28;
  }
  uint64_t v19 = v18 + 1;
  char v20 = 8 * (v18 + 1);
  if ((v18 + 1) <= 3)
  {
    unsigned int v23 = ((a2 + ~(-1 << v20) - 254) >> v20) + 1;
    if (HIWORD(v23))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v23 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v23 < 2)
    {
LABEL_28:
      unsigned int v25 = *((unsigned __int8 *)a1 + v18);
      if (v25 >= 2) {
        return (v25 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_28;
  }
LABEL_20:
  int v24 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v24 = 0;
  }
  if (v19)
  {
    if (v19 > 3) {
      LODWORD(v19) = 4;
    }
    switch((int)v19)
    {
      case 2:
        LODWORD(v19) = *a1;
        break;
      case 3:
        LODWORD(v19) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v19) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v19) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v19 | v24) + 255;
}

void storeEnumTagSinglePayload for ProgressView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v9 = *(void *)(v8 + 64)
     + ((*(void *)(v8 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = 10;
  if (v9 + 1 > 0xA) {
    uint64_t v10 = v9 + 1;
  }
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  int v16 = *(_DWORD *)(v14 + 84);
  uint64_t v17 = *(void *)(v14 + 64);
  if (!*(_DWORD *)(v11 + 84)) {
    ++v13;
  }
  unint64_t v18 = (v13 + v15 + v12) & ~v15;
  if (!v16) {
    ++v17;
  }
  unint64_t v19 = v17 + v18;
  if (v19 <= 0x40) {
    unint64_t v19 = 64;
  }
  size_t v20 = v19 + 1;
  if (a3 < 0xFF)
  {
    int v21 = 0;
  }
  else if (v20 <= 3)
  {
    unsigned int v24 = ((a3 + ~(-1 << (8 * v20)) - 254) >> (8 * v20)) + 1;
    if (HIWORD(v24))
    {
      int v21 = 4;
    }
    else if (v24 >= 0x100)
    {
      int v21 = 2;
    }
    else
    {
      int v21 = v24 > 1;
    }
  }
  else
  {
    int v21 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v22 = a2 - 255;
    if (v20 < 4)
    {
      int v23 = (v22 >> (8 * v20)) + 1;
      if (v19 != -1)
      {
        int v25 = v22 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v19 + 1);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v20] = v23;
        break;
      case 2:
        *(_WORD *)&a1[v20] = v23;
        break;
      case 3:
LABEL_40:
        __break(1u);
        JUMPOUT(0x18791F978);
      case 4:
        *(_DWORD *)&a1[v20] = v23;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v21)
    {
      case 1:
        a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v20] = 0;
        goto LABEL_28;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      default:
LABEL_28:
        if (a2) {
LABEL_29:
        }
          a1[v19] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_18791F9A0()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for ProgressViewValue(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8((void *)((char *)a1 + *(int *)(v9 + 36)), (void *)((char *)a2 + *(int *)(v9 + 36)), v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((unsigned char *)a1 + *(int *)(v10 + 48)) = *((unsigned char *)a2 + *(int *)(v10 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for ProgressViewValue(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), a1, v3);
    type metadata accessor for ClosedRange<Date>();
    uint64_t v5 = a1 + *(int *)(v4 + 36);
    return v6(v5, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for ProgressViewValue(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    type metadata accessor for ClosedRange<Date>();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithCopy for ProgressViewValue(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ProgressViewStyleConfiguration((uint64_t)a1, type metadata accessor for ProgressViewValue);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Date();
      uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      type metadata accessor for ClosedRange<Date>();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

unsigned char *initializeWithTake for ProgressViewValue(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    type metadata accessor for ClosedRange<Date>();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithTake for ProgressViewValue(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ProgressViewStyleConfiguration((uint64_t)a1, type metadata accessor for ProgressViewValue);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Date();
      uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      type metadata accessor for ClosedRange<Date>();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomProgressView(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = v8 + v9;
  uint64_t v12 = ((v8 + v10) & ~v10) + v8;
  if ((unint64_t)(v12 + 1) > 0xA) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = 10;
  }
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  int v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = v13 + v16 + 1;
  if (*(_DWORD *)(v15 + 84)) {
    uint64_t v18 = *(void *)(v15 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v15 + 64) + 1;
  }
  uint64_t v19 = *(void *)(v14 - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80);
  size_t __n = v18;
  if (*(_DWORD *)(v19 + 84)) {
    uint64_t v21 = *(void *)(*(void *)(v14 - 8) + 64);
  }
  else {
    uint64_t v21 = *(void *)(*(void *)(v14 - 8) + 64) + 1;
  }
  unint64_t v22 = v16 | (unint64_t)v9 | v20;
  int v23 = (v16 | v9 | *(_DWORD *)(v19 + 80)) & 0x100000;
  if (v22 > 7 || v23 != 0 || v21 + ((v18 + v20 + (v17 & ~(unint64_t)v16)) & ~v20) > 0x18)
  {
    uint64_t v26 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v27 = v26 + ((v22 & 0xF8 ^ 0x1F8) & (v22 + 16));
    swift_retain();
  }
  else
  {
    unsigned int v28 = a2[v13];
    unsigned int v29 = v28 - 2;
    if (v28 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v30 = v13;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *a2;
          if (v13 < 4) {
            goto LABEL_27;
          }
          goto LABEL_31;
        case 2:
          int v31 = *(unsigned __int16 *)a2;
          if (v13 < 4) {
            goto LABEL_27;
          }
          goto LABEL_31;
        case 3:
          int v31 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v13 < 4) {
            goto LABEL_27;
          }
          goto LABEL_31;
        case 4:
          int v31 = *(_DWORD *)a2;
          if (v13 < 4) {
LABEL_27:
          }
            unsigned int v28 = (v31 | (v29 << (8 * v13))) + 2;
          else {
LABEL_31:
          }
            unsigned int v28 = v31 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v46 = *(void *)(a3 + 16);
    uint64_t v47 = *(void *)(a3 + 24);
    unint64_t v32 = ~(unint64_t)v16;
    uint64_t v49 = a1;
    size_t v45 = v21;
    if (v28 == 1)
    {
      uint64_t v33 = ~v10;
      unint64_t v34 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 16);
      uint64_t v43 = v6;
      uint64_t v44 = v13 + v16 + 1;
      v34(v49, a2, v6);
      v34((v11 + v49) & v33, (unsigned __int8 *)((unint64_t)&a2[v11] & v33), v43);
      uint64_t v17 = v44;
      a1 = v49;
      *(unsigned char *)(v12 + v49) = a2[v12];
      char v35 = 1;
    }
    else
    {
      char v35 = 0;
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    }
    uint64_t v36 = ~v20;
    *(unsigned char *)(a1 + v13) = v35;
    unsigned int v37 = (void *)((v17 + a1) & v32);
    uint64_t v38 = (const void *)((unint64_t)&a2[v17] & v32);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v38, 1, v46))
    {
      size_t v39 = __n;
      memcpy(v37, v38, __n);
      uint64_t v40 = v47;
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v37, v38, v46);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v37, 0, 1, v46);
      uint64_t v40 = v47;
      size_t v39 = __n;
    }
    long long v41 = (const void *)(((unint64_t)v38 + v39 + v20) & v36);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v41, 1, v40))
    {
      memcpy((void *)(((unint64_t)v37 + v39 + v20) & v36), v41, v45);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v19 + 16))(((unint64_t)v37 + v39 + v20) & v36, v41, v40);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v19 + 56))(((unint64_t)v37 + v39 + v20) & v36, 0, 1, v40);
    }
    return v49;
  }
  return v27;
}

uint64_t destroy for CustomProgressView(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = v6 + ((v6 + v7) & ~v7);
  if ((unint64_t)(v9 + 1) > 0xA) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = 10;
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_13;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_13:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 1)
  {
    uint64_t v16 = ~v7;
    uint64_t v17 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
    v17(a1, v4);
    v17((unsigned __int8 *)((unint64_t)&a1[v8] & v16), v4);
  }
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (unint64_t)&a1[v10 + 1 + *(unsigned __int8 *)(v19 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18)) {
    (*(void (**)(unint64_t, uint64_t))(v19 + 8))(v20, v18);
  }
  uint64_t v21 = *(void *)(a2 + 24);
  uint64_t v26 = *(void *)(v21 - 8);
  unint64_t v22 = *(void *)(v19 + 64) + v20;
  if (!*(_DWORD *)(v19 + 84)) {
    ++v22;
  }
  unint64_t v23 = (v22 + *(unsigned __int8 *)(v26 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v23, 1, v21);
  if (!result)
  {
    int v25 = *(uint64_t (**)(unint64_t, uint64_t))(v26 + 8);
    return v25(v23, v21);
  }
  return result;
}

uint64_t initializeWithCopy for CustomProgressView(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA) {
    uint64_t v12 = v11 + 1;
  }
  else {
    uint64_t v12 = 10;
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        if (v12 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        if (v12 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v12 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v16 = *(_DWORD *)a2;
        if (v12 < 4)
        {
LABEL_14:
          unsigned int v13 = (v16 | (v14 << (8 * v12))) + 2;
          break;
        }
LABEL_18:
        if (v16 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
LABEL_16:
    uint64_t v17 = ~v9;
    uint64_t v18 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 16);
    v18(a1, a2, v6);
    v18((v10 + a1) & v17, (unsigned __int8 *)((unint64_t)&a2[v10] & v17), v6);
    *(unsigned char *)(v11 + a1) = a2[v11];
    char v19 = 1;
  }
  else
  {
LABEL_19:
    char v19 = 0;
    *(void *)a1 = *(void *)a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  }
  *(unsigned char *)(a1 + v12) = v19;
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = v12 + v22 + 1;
  unsigned int v24 = (void *)((v23 + a1) & ~v22);
  int v25 = (const void *)((unint64_t)&a2[v23] & ~v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v25, 1, v20))
  {
    int v26 = *(_DWORD *)(v21 + 84);
    uint64_t v27 = *(void *)(v21 + 64);
    if (v26) {
      size_t v28 = *(void *)(v21 + 64);
    }
    else {
      size_t v28 = v27 + 1;
    }
    memcpy(v24, v25, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v24, v25, v20);
    uint64_t v30 = *(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56);
    uint64_t v29 = v21 + 56;
    v30(v24, 0, 1, v20);
    int v26 = *(_DWORD *)(v29 + 28);
    uint64_t v27 = *(void *)(v29 + 8);
  }
  if (v26) {
    uint64_t v31 = v27;
  }
  else {
    uint64_t v31 = v27 + 1;
  }
  uint64_t v32 = *(void *)(a3 + 24);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v33 + 80);
  uint64_t v35 = v31 + v34;
  uint64_t v36 = (void *)(((unint64_t)v24 + v35) & ~v34);
  unsigned int v37 = (const void *)(((unint64_t)v25 + v35) & ~v34);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v37, 1, v32))
  {
    if (*(_DWORD *)(v33 + 84)) {
      size_t v38 = *(void *)(v33 + 64);
    }
    else {
      size_t v38 = *(void *)(v33 + 64) + 1;
    }
    memcpy(v36, v37, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v36, v37, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v32);
  }
  return a1;
}

unsigned __int8 *assignWithCopy for CustomProgressView(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v56 = v8 + v9;
    uint64_t v10 = ((v8 + v9) & ~v9) + v8;
    if ((unint64_t)(v10 + 1) > 0xA) {
      uint64_t v11 = v10 + 1;
    }
    else {
      uint64_t v11 = 10;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          if (v11 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v15 = *(_DWORD *)a1;
          if (v11 < 4) {
LABEL_15:
          }
            unsigned int v12 = (v15 | (v13 << (8 * v11))) + 2;
          else {
LABEL_17:
          }
            unsigned int v12 = v15 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v9;
    if (v12 == 1)
    {
      uint64_t v17 = *(void (**)(unsigned __int8 *, uint64_t))(v7 + 8);
      v17(a1, v6);
      v17((unsigned __int8 *)((unint64_t)&a1[v56] & v16), v6);
    }
    unsigned int v18 = a2[v11];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          if (v11 >= 4) {
            goto LABEL_34;
          }
          goto LABEL_30;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          if (v11 >= 4) {
            goto LABEL_34;
          }
          goto LABEL_30;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v11 < 4) {
            goto LABEL_30;
          }
          goto LABEL_34;
        case 4:
          int v21 = *(_DWORD *)a2;
          if (v11 < 4)
          {
LABEL_30:
            unsigned int v18 = (v21 | (v19 << (8 * v11))) + 2;
            break;
          }
LABEL_34:
          if (v21 != -1) {
            goto LABEL_35;
          }
          goto LABEL_32;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
LABEL_32:
      uint64_t v22 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16);
      v22(a1, a2, v6);
      v22((unsigned __int8 *)((unint64_t)&a1[v56] & v16), (unsigned __int8 *)((unint64_t)&a2[v56] & v16), v6);
      a1[v10] = a2[v10];
      char v23 = 1;
    }
    else
    {
LABEL_35:
      char v23 = 0;
      uint64_t v24 = *(void *)a2;
      *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
      *(void *)a1 = v24;
    }
    a1[v11] = v23;
  }
  uint64_t v25 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v26 = *(void *)(v25 + 64)
      + ((*(void *)(v25 + 64) + *(unsigned __int8 *)(v25 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  uint64_t v27 = 10;
  if (v26 + 1 > 0xA) {
    uint64_t v27 = v26 + 1;
  }
  uint64_t v28 = *(void *)(a3 + 16);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = v27 + v30 + 1;
  uint64_t v32 = (void *)((unint64_t)&a1[v31] & ~v30);
  uint64_t v33 = (void *)((unint64_t)&a2[v31] & ~v30);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  int v35 = v34(v32, 1, v28);
  int v36 = v34(v33, 1, v28);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 16))(v32, v33, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
      goto LABEL_50;
    }
    int v37 = *(_DWORD *)(v29 + 84);
    size_t v38 = *(void *)(v29 + 64);
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 24))(v32, v33, v28);
      goto LABEL_50;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v32, v28);
    int v37 = *(_DWORD *)(v29 + 84);
    size_t v38 = *(void *)(v29 + 64);
  }
  if (v37) {
    size_t v39 = v38;
  }
  else {
    size_t v39 = v38 + 1;
  }
  memcpy(v32, v33, v39);
LABEL_50:
  uint64_t v40 = *(void *)(v29 + 64);
  if (!*(_DWORD *)(v29 + 84)) {
    ++v40;
  }
  uint64_t v41 = *(void *)(a3 + 24);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(unsigned __int8 *)(v42 + 80);
  uint64_t v44 = v40 + v43;
  size_t v45 = (void *)(((unint64_t)v32 + v44) & ~v43);
  uint64_t v46 = (void *)(((unint64_t)v33 + v44) & ~v43);
  uint64_t v47 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v42 + 48);
  int v48 = v47(v45, 1, v41);
  int v49 = v47(v46, 1, v41);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(void *, void *, uint64_t))(v42 + 16))(v45, v46, v41);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v45, 0, 1, v41);
      return a1;
    }
    int v50 = *(_DWORD *)(v42 + 84);
    size_t v51 = *(void *)(v42 + 64);
  }
  else
  {
    if (!v49)
    {
      (*(void (**)(void *, void *, uint64_t))(v42 + 24))(v45, v46, v41);
      return a1;
    }
    uint64_t v53 = *(void (**)(void *, uint64_t))(v42 + 8);
    uint64_t v52 = v42 + 8;
    v53(v45, v41);
    int v50 = *(_DWORD *)(v52 + 76);
    size_t v51 = *(void *)(v52 + 56);
  }
  if (v50) {
    size_t v54 = v51;
  }
  else {
    size_t v54 = v51 + 1;
  }
  memcpy(v45, v46, v54);
  return a1;
}

uint64_t initializeWithTake for CustomProgressView(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA) {
    uint64_t v12 = v11 + 1;
  }
  else {
    uint64_t v12 = 10;
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        if (v12 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        if (v12 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v12 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v16 = *(_DWORD *)a2;
        if (v12 < 4)
        {
LABEL_14:
          unsigned int v13 = (v16 | (v14 << (8 * v12))) + 2;
          break;
        }
LABEL_18:
        if (v16 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
LABEL_16:
    uint64_t v17 = ~v9;
    unsigned int v18 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 32);
    v18(a1, a2, v6);
    v18((v10 + a1) & v17, (unsigned __int8 *)((unint64_t)&a2[v10] & v17), v6);
    *(unsigned char *)(v11 + a1) = a2[v11];
    char v19 = 1;
  }
  else
  {
LABEL_19:
    char v19 = 0;
    *(void *)a1 = *(void *)a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  }
  *(unsigned char *)(a1 + v12) = v19;
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = v12 + v22 + 1;
  uint64_t v24 = (void *)((v23 + a1) & ~v22);
  uint64_t v25 = (const void *)((unint64_t)&a2[v23] & ~v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v25, 1, v20))
  {
    int v26 = *(_DWORD *)(v21 + 84);
    uint64_t v27 = *(void *)(v21 + 64);
    if (v26) {
      size_t v28 = *(void *)(v21 + 64);
    }
    else {
      size_t v28 = v27 + 1;
    }
    memcpy(v24, v25, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v24, v25, v20);
    uint64_t v30 = *(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56);
    uint64_t v29 = v21 + 56;
    v30(v24, 0, 1, v20);
    int v26 = *(_DWORD *)(v29 + 28);
    uint64_t v27 = *(void *)(v29 + 8);
  }
  if (v26) {
    uint64_t v31 = v27;
  }
  else {
    uint64_t v31 = v27 + 1;
  }
  uint64_t v32 = *(void *)(a3 + 24);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v33 + 80);
  uint64_t v35 = v31 + v34;
  int v36 = (void *)(((unint64_t)v24 + v35) & ~v34);
  int v37 = (const void *)(((unint64_t)v25 + v35) & ~v34);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v37, 1, v32))
  {
    if (*(_DWORD *)(v33 + 84)) {
      size_t v38 = *(void *)(v33 + 64);
    }
    else {
      size_t v38 = *(void *)(v33 + 64) + 1;
    }
    memcpy(v36, v37, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v36, v37, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v32);
  }
  return a1;
}

unsigned __int8 *assignWithTake for CustomProgressView(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v55 = v8 + v9;
    uint64_t v10 = ((v8 + v9) & ~v9) + v8;
    if ((unint64_t)(v10 + 1) > 0xA) {
      uint64_t v11 = v10 + 1;
    }
    else {
      uint64_t v11 = 10;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          if (v11 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v15 = *(_DWORD *)a1;
          if (v11 < 4) {
LABEL_15:
          }
            unsigned int v12 = (v15 | (v13 << (8 * v11))) + 2;
          else {
LABEL_17:
          }
            unsigned int v12 = v15 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v9;
    if (v12 == 1)
    {
      uint64_t v17 = *(void (**)(unsigned __int8 *, uint64_t))(v7 + 8);
      v17(a1, v6);
      v17((unsigned __int8 *)((unint64_t)&a1[v55] & v16), v6);
    }
    unsigned int v18 = a2[v11];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          if (v11 >= 4) {
            goto LABEL_34;
          }
          goto LABEL_30;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          if (v11 >= 4) {
            goto LABEL_34;
          }
          goto LABEL_30;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v11 < 4) {
            goto LABEL_30;
          }
          goto LABEL_34;
        case 4:
          int v21 = *(_DWORD *)a2;
          if (v11 < 4)
          {
LABEL_30:
            unsigned int v18 = (v21 | (v19 << (8 * v11))) + 2;
            break;
          }
LABEL_34:
          if (v21 != -1) {
            goto LABEL_35;
          }
          goto LABEL_32;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
LABEL_32:
      uint64_t v22 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32);
      v22(a1, a2, v6);
      v22((unsigned __int8 *)((unint64_t)&a1[v55] & v16), (unsigned __int8 *)((unint64_t)&a2[v55] & v16), v6);
      a1[v10] = a2[v10];
      char v23 = 1;
    }
    else
    {
LABEL_35:
      char v23 = 0;
      *(void *)a1 = *(void *)a2;
      *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
    }
    a1[v11] = v23;
  }
  uint64_t v24 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v25 = *(void *)(v24 + 64)
      + ((*(void *)(v24 + 64) + *(unsigned __int8 *)(v24 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  uint64_t v26 = 10;
  if (v25 + 1 > 0xA) {
    uint64_t v26 = v25 + 1;
  }
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v26 + v29 + 1;
  uint64_t v31 = (void *)((unint64_t)&a1[v30] & ~v29);
  uint64_t v32 = (void *)((unint64_t)&a2[v30] & ~v29);
  uint64_t v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v34 = v33(v31, 1, v27);
  int v35 = v33(v32, 1, v27);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v31, v32, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v27);
      goto LABEL_50;
    }
    int v36 = *(_DWORD *)(v28 + 84);
    size_t v37 = *(void *)(v28 + 64);
  }
  else
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v31, v32, v27);
      goto LABEL_50;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v31, v27);
    int v36 = *(_DWORD *)(v28 + 84);
    size_t v37 = *(void *)(v28 + 64);
  }
  if (v36) {
    size_t v38 = v37;
  }
  else {
    size_t v38 = v37 + 1;
  }
  memcpy(v31, v32, v38);
LABEL_50:
  uint64_t v39 = *(void *)(v28 + 64);
  if (!*(_DWORD *)(v28 + 84)) {
    ++v39;
  }
  uint64_t v40 = *(void *)(a3 + 24);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(unsigned __int8 *)(v41 + 80);
  uint64_t v43 = v39 + v42;
  uint64_t v44 = (void *)(((unint64_t)v31 + v43) & ~v42);
  size_t v45 = (void *)(((unint64_t)v32 + v43) & ~v42);
  uint64_t v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
  int v47 = v46(v44, 1, v40);
  int v48 = v46(v45, 1, v40);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(void *, void *, uint64_t))(v41 + 32))(v44, v45, v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v40);
      return a1;
    }
    int v49 = *(_DWORD *)(v41 + 84);
    size_t v50 = *(void *)(v41 + 64);
  }
  else
  {
    if (!v48)
    {
      (*(void (**)(void *, void *, uint64_t))(v41 + 40))(v44, v45, v40);
      return a1;
    }
    uint64_t v52 = *(void (**)(void *, uint64_t))(v41 + 8);
    uint64_t v51 = v41 + 8;
    v52(v44, v40);
    int v49 = *(_DWORD *)(v51 + 76);
    size_t v50 = *(void *)(v51 + 56);
  }
  if (v49) {
    size_t v53 = v50;
  }
  else {
    size_t v53 = v50 + 1;
  }
  memcpy(v44, v45, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomProgressView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v7 = *(void *)(v6 + 64)
     + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  if (v7 + 1 > 0xA) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = 10;
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = v13;
  uint64_t v15 = *(unsigned int *)(v13 + 84);
  unsigned int v16 = v15 - 1;
  if (!v15) {
    unsigned int v16 = 0;
  }
  if (v12 <= v16) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = v12;
  }
  if (v17 <= 0xFE) {
    unsigned int v18 = 254;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = *(void *)(v9 + 64);
  if (!v11) {
    ++v19;
  }
  uint64_t v20 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = *(void *)(v13 + 64);
  if (v15) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = v22 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v24 = v8 + v20 + 1;
  if (a2 <= v18) {
    goto LABEL_40;
  }
  uint64_t v25 = v23 + ((v19 + v21 + (v24 & ~v20)) & ~v21);
  char v26 = 8 * v25;
  if (v25 <= 3)
  {
    unsigned int v28 = ((a2 - v18 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)((char *)a1 + v25);
      if (!v27) {
        goto LABEL_40;
      }
      goto LABEL_30;
    }
    if (v28 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)((char *)a1 + v25);
      if (!*(unsigned __int16 *)((char *)a1 + v25)) {
        goto LABEL_40;
      }
      goto LABEL_30;
    }
    if (v28 < 2)
    {
LABEL_40:
      if (v17 <= 0xFE)
      {
        unsigned int v32 = *((unsigned __int8 *)a1 + v8);
        if (v32 >= 2) {
          return (v32 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
      unint64_t v34 = ((unint64_t)a1 + v24) & ~v20;
      if (v12 == v18)
      {
        if (v11 >= 2)
        {
          unsigned int v35 = (*(uint64_t (**)(unint64_t))(v10 + 48))(v34);
          goto LABEL_50;
        }
      }
      else if (v15 >= 2)
      {
        unsigned int v35 = (*(uint64_t (**)(unint64_t, uint64_t, void))(v14 + 48))((v34 + v19 + v21) & ~v21, v15, *(void *)(a3 + 24));
LABEL_50:
        if (v35 >= 2) {
          return v35 - 1;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v27 = *((unsigned __int8 *)a1 + v25);
  if (!*((unsigned char *)a1 + v25)) {
    goto LABEL_40;
  }
LABEL_30:
  int v29 = (v27 - 1) << v26;
  if (v25 > 3) {
    int v29 = 0;
  }
  if (v25)
  {
    if (v25 <= 3) {
      int v30 = v25;
    }
    else {
      int v30 = 4;
    }
    switch(v30)
    {
      case 2:
        int v31 = *a1;
        break;
      case 3:
        int v31 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v31 = *(_DWORD *)a1;
        break;
      default:
        int v31 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v31 = 0;
  }
  return v18 + (v31 | v29) + 1;
}

void storeEnumTagSinglePayload for CustomProgressView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v8 = 0;
  uint64_t v9 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v10 = *(void *)(v9 + 64)
      + ((*(void *)(v9 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  if (v10 + 1 > 0xA) {
    uint64_t v11 = v10 + 1;
  }
  else {
    uint64_t v11 = 10;
  }
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v13 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  uint64_t v15 = *(void *)(v12 - 8);
  if (v14) {
    unsigned int v16 = v14 - 1;
  }
  else {
    unsigned int v16 = 0;
  }
  uint64_t v17 = *(void *)(v12 - 8);
  uint64_t v18 = *(unsigned int *)(v15 + 84);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v20 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v21 = *(void *)(v15 + 64);
  unsigned int v22 = v18 - 1;
  if (!v18) {
    unsigned int v22 = 0;
  }
  if (v16 <= v22) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v16;
  }
  if (v23 <= 0xFE) {
    unsigned int v24 = 254;
  }
  else {
    unsigned int v24 = v23;
  }
  if (v14) {
    uint64_t v25 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  else {
    uint64_t v25 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 1;
  }
  size_t v26 = v11 + 1;
  uint64_t v27 = v11 + 1 + v19;
  if (v18) {
    uint64_t v28 = v21;
  }
  else {
    uint64_t v28 = v21 + 1;
  }
  size_t v29 = v28 + ((v25 + v20 + (v27 & ~v19)) & ~v20);
  if (a3 <= v24) {
    goto LABEL_29;
  }
  if (v29 <= 3)
  {
    unsigned int v30 = ((a3 - v24 + ~(-1 << (8 * v29))) >> (8 * v29)) + 1;
    if (HIWORD(v30))
    {
      int v8 = 4;
      if (v24 >= a2) {
        goto LABEL_37;
      }
      goto LABEL_30;
    }
    if (v30 >= 0x100) {
      int v8 = 2;
    }
    else {
      int v8 = v30 > 1;
    }
LABEL_29:
    if (v24 >= a2) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  int v8 = 1;
  if (v24 >= a2)
  {
LABEL_37:
    switch(v8)
    {
      case 1:
        a1[v29] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_42;
      case 2:
        *(_WORD *)&a1[v29] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_42;
      case 3:
        goto LABEL_75;
      case 4:
        *(_DWORD *)&a1[v29] = 0;
        goto LABEL_41;
      default:
LABEL_41:
        if (a2)
        {
LABEL_42:
          if (v23 > 0xFE)
          {
            unint64_t v34 = (unint64_t)&a1[v27] & ~v19;
            if (v16 == v24)
            {
              if (v14 >= 2)
              {
                unsigned int v35 = *(void (**)(unint64_t, void))(v13 + 56);
                v35(v34, a2 + 1);
              }
            }
            else if (v18 >= 2)
            {
              uint64_t v39 = (v34 + v25 + v20) & ~v20;
              uint64_t v40 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56);
              v40(v39, a2 + 1, v18, v12);
            }
          }
          else if (a2 > 0xFE)
          {
            if (v26 <= 3) {
              int v36 = ~(-1 << (8 * v26));
            }
            else {
              int v36 = -1;
            }
            if (v11 != -1)
            {
              int v37 = v36 & (a2 - 255);
              if (v26 <= 3) {
                int v38 = v11 + 1;
              }
              else {
                int v38 = 4;
              }
              bzero(a1, v26);
              switch(v38)
              {
                case 2:
                  *(_WORD *)a1 = v37;
                  break;
                case 3:
                  *(_WORD *)a1 = v37;
                  a1[2] = BYTE2(v37);
                  break;
                case 4:
                  *(_DWORD *)a1 = v37;
                  break;
                default:
                  *a1 = v37;
                  break;
              }
            }
          }
          else
          {
            a1[v11] = -(char)a2;
          }
        }
        break;
    }
    return;
  }
LABEL_30:
  unsigned int v31 = ~v24 + a2;
  if (v29 < 4)
  {
    int v32 = (v31 >> (8 * v29)) + 1;
    if (v29)
    {
      int v33 = v31 & ~(-1 << (8 * v29));
      bzero(a1, v29);
      if (v29 == 3)
      {
        *(_WORD *)a1 = v33;
        a1[2] = BYTE2(v33);
      }
      else if (v29 == 2)
      {
        *(_WORD *)a1 = v33;
      }
      else
      {
        *a1 = v33;
      }
    }
  }
  else
  {
    bzero(a1, v29);
    *(_DWORD *)a1 = v31;
    int v32 = 1;
  }
  switch(v8)
  {
    case 1:
      a1[v29] = v32;
      break;
    case 2:
      *(_WORD *)&a1[v29] = v32;
      break;
    case 3:
LABEL_75:
      __break(1u);
      JUMPOUT(0x1879221ECLL);
    case 4:
      *(_DWORD *)&a1[v29] = v32;
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ProgressView(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = v8 + v9;
  uint64_t v12 = ((v8 + v10) & ~v10) + v8;
  if ((unint64_t)(v12 + 1) > 0xA) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = 10;
  }
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = v13 + v17 + 1;
  if (*(_DWORD *)(v16 + 84)) {
    uint64_t v19 = *(void *)(v16 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v16 + 64) + 1;
  }
  uint64_t v20 = *(void *)(v14 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  unint64_t v22 = (v19 + v21 + (v18 & ~(unint64_t)v17)) & ~v21;
  if (*(_DWORD *)(v20 + 84)) {
    uint64_t v23 = *(void *)(*(void *)(v14 - 8) + 64);
  }
  else {
    uint64_t v23 = *(void *)(*(void *)(v14 - 8) + 64) + 1;
  }
  if (v23 + v22 <= 0x40) {
    uint64_t v24 = 64;
  }
  else {
    uint64_t v24 = v23 + v22;
  }
  unint64_t v25 = v17 | (unint64_t)v9 | v21;
  int v26 = (v17 | v9 | *(_DWORD *)(v20 + 80)) & 0x100000;
  if (v25 > 7 || v26 != 0 || (unint64_t)(v24 + 1) > 0x18)
  {
    uint64_t v29 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v29 + ((v25 & 0xF8 ^ 0x1F8) & (v25 + 16));
LABEL_36:
    swift_retain();
    return a1;
  }
  unsigned int v30 = a2[v24];
  if (v30 >= 2) {
    unsigned int v30 = *(_DWORD *)a2 + 2;
  }
  if (v30 == 1)
  {
    uint64_t v31 = v24;
    int v32 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v33 = *((void *)a2 + 4);
    id v34 = v32;
    if (v33)
    {
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(unsigned char *)(a1 + 16) = a2[16];
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = v33;
      uint64_t v35 = *((void *)a2 + 6);
      *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v40 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v40;
      *(_OWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 40);
    }
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(unsigned char *)(a1 + v31) = 1;
    goto LABEL_36;
  }
  unsigned int v36 = a2[v13];
  unsigned int v37 = v36 - 2;
  if (v36 >= 2)
  {
    if (v13 <= 3) {
      uint64_t v38 = v13;
    }
    else {
      uint64_t v38 = 4;
    }
    switch(v38)
    {
      case 1:
        int v39 = *a2;
        if (v13 < 4) {
          goto LABEL_40;
        }
        goto LABEL_42;
      case 2:
        int v39 = *(unsigned __int16 *)a2;
        if (v13 >= 4) {
          goto LABEL_42;
        }
        goto LABEL_40;
      case 3:
        int v39 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v13 < 4) {
          goto LABEL_40;
        }
        goto LABEL_42;
      case 4:
        int v39 = *(_DWORD *)a2;
        if (v13 < 4) {
LABEL_40:
        }
          unsigned int v36 = (v39 | (v37 << (8 * v13))) + 2;
        else {
LABEL_42:
        }
          unsigned int v36 = v39 + 2;
        break;
      default:
        break;
    }
  }
  size_t __n = v19;
  uint64_t v60 = *(void *)(a3 + 24);
  unint64_t v41 = ~(unint64_t)v17;
  uint64_t v61 = v24;
  size_t v58 = v23;
  if (v36 == 1)
  {
    uint64_t v54 = v6;
    uint64_t v55 = ~v10;
    uint64_t v42 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 16);
    uint64_t v57 = *(void *)(a3 + 16);
    uint64_t v43 = v11;
    unint64_t v56 = ~(unint64_t)v17;
    v42(a1, a2, v6);
    v42((v43 + a1) & v55, (unsigned __int8 *)((unint64_t)&a2[v43] & v55), v54);
    unint64_t v41 = v56;
    uint64_t v15 = v57;
    *(unsigned char *)(v12 + a1) = a2[v12];
    char v44 = 1;
  }
  else
  {
    char v44 = 0;
    *(void *)a1 = *(void *)a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  }
  uint64_t v45 = ~v21;
  *(unsigned char *)(a1 + v13) = v44;
  uint64_t v46 = (void *)((v18 + a1) & v41);
  int v47 = (char *)((unint64_t)&a2[v18] & v41);
  uint64_t v48 = v15;
  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 48))(v47, 1))
  {
    size_t v49 = __n;
    memcpy(v46, v47, __n);
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v46, v47, v48);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v46, 0, 1, v48);
    size_t v49 = __n;
  }
  size_t v50 = &v47[v49];
  uint64_t v51 = (void *)(((unint64_t)v46 + v49 + v21) & v45);
  uint64_t v52 = (const void *)((unint64_t)&v50[v21] & v45);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v52, 1, v60))
  {
    memcpy(v51, v52, v58);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v51, v52, v60);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v51, 0, 1, v60);
  }
  *(unsigned char *)(a1 + v61) = 0;
  return a1;
}

uint64_t destroy for ProgressView.Base(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = v6 + ((v6 + v7) & ~v7);
  uint64_t v10 = 10;
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((unint64_t)(v9 + 1) > 0xA) {
    uint64_t v10 = v9 + 1;
  }
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  int v16 = *(_DWORD *)(v13 + 84);
  uint64_t v17 = *(void *)(v13 + 64);
  if (v16) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v17 + 1;
  }
  uint64_t v19 = *(void *)(v11 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v22 = v10 + v15 + 1;
  if (!*(_DWORD *)(v19 + 84)) {
    ++v21;
  }
  unint64_t v23 = v21 + ((v18 + v20 + (v22 & ~v15)) & ~v20);
  if (v23 <= 0x40) {
    unint64_t v23 = 64;
  }
  unsigned int v24 = a1[v23];
  unsigned int v25 = v24 - 2;
  if (v24 >= 2)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *a1;
        if (v23 >= 4) {
          goto LABEL_28;
        }
        goto LABEL_20;
      case 2:
        int v27 = *(unsigned __int16 *)a1;
        if (v23 >= 4) {
          goto LABEL_28;
        }
        goto LABEL_20;
      case 3:
        int v27 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v23 < 4) {
          goto LABEL_20;
        }
        goto LABEL_28;
      case 4:
        int v27 = *(_DWORD *)a1;
        if (v23 < 4)
        {
LABEL_20:
          unsigned int v24 = (v27 | (v25 << (8 * v23))) + 2;
          break;
        }
LABEL_28:
        if (v27 != -1) {
          goto LABEL_29;
        }
        goto LABEL_22;
      default:
        break;
    }
  }
  if (v24 == 1)
  {
LABEL_22:

    if (*((void *)a1 + 4))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  else
  {
LABEL_29:
    unsigned int v29 = a1[v10];
    unsigned int v30 = v29 - 2;
    if (v29 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v31 = v10;
      }
      else {
        uint64_t v31 = 4;
      }
      switch(v31)
      {
        case 1:
          int v32 = *a1;
          if (v10 < 4) {
            goto LABEL_39;
          }
          goto LABEL_41;
        case 2:
          int v32 = *(unsigned __int16 *)a1;
          if (v10 >= 4) {
            goto LABEL_41;
          }
          goto LABEL_39;
        case 3:
          int v32 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v10 < 4) {
            goto LABEL_39;
          }
          goto LABEL_41;
        case 4:
          int v32 = *(_DWORD *)a1;
          if (v10 < 4) {
LABEL_39:
          }
            unsigned int v29 = (v32 | (v30 << (8 * v10))) + 2;
          else {
LABEL_41:
          }
            unsigned int v29 = v32 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v45 = *(void *)(v11 - 8);
    uint64_t v33 = ~v15;
    if (v29 == 1)
    {
      uint64_t v43 = ~v7;
      uint64_t v44 = v18;
      id v34 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
      uint64_t v35 = v12;
      uint64_t v36 = v4;
      uint64_t v37 = v8;
      v34(a1, v4);
      unint64_t v38 = (unint64_t)&a1[v37];
      uint64_t v18 = v44;
      uint64_t v39 = v36;
      uint64_t v12 = v35;
      v34((unsigned __int8 *)(v38 & v43), v39);
    }
    unint64_t v40 = (unint64_t)&a1[v22] & v33;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v40, 1, v12)) {
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v40, v12);
    }
    unint64_t v41 = (v40 + v18 + v20) & ~v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v45 + 48))(v41, 1, v11);
    if (!result)
    {
      uint64_t v42 = *(uint64_t (**)(unint64_t, uint64_t))(v45 + 8);
      return v42(v41, v11);
    }
  }
  return result;
}

unsigned __int8 *assignWithCopy for ProgressView.Base(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v66 = type metadata accessor for Date();
    uint64_t v6 = *(void *)(*(void *)(v66 - 8) + 64);
    uint64_t v65 = *(void *)(v66 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v65 + 80);
    uint64_t v64 = v6 + v7;
    uint64_t v8 = ((v6 + v7) & ~v7) + v6;
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v70 = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(v70 - 8);
    uint64_t v61 = v8;
    if ((unint64_t)(v8 + 1) > 0xA) {
      uint64_t v11 = v8 + 1;
    }
    else {
      uint64_t v11 = 10;
    }
    uint64_t v12 = *(void *)(v70 - 8);
    uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v14 = v11 + v13 + 1;
    int v15 = *(_DWORD *)(v10 + 84);
    size_t v16 = *(void *)(v10 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    uint64_t v18 = *(void *)(v9 - 8);
    uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v69 = v18;
    size_t v20 = *(void *)(v18 + 64);
    if (!*(_DWORD *)(v18 + 84)) {
      ++v20;
    }
    size_t v62 = v20;
    unint64_t v21 = v20 + ((v17 + v19 + (v14 & ~v13)) & ~v19);
    if (v21 <= 0x40) {
      uint64_t v22 = 64;
    }
    else {
      uint64_t v22 = v21;
    }
    unsigned int v23 = a1[v22];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a1;
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 2:
          int v26 = *(unsigned __int16 *)a1;
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 3:
          int v26 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 4:
          int v26 = *(_DWORD *)a1;
          if (v22 < 4) {
LABEL_21:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
          else {
LABEL_25:
          }
            unsigned int v23 = v26 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v63 = ~v7;
    uint64_t v67 = ~v13;
    uint64_t v68 = ~v19;
    if (v23 == 1)
    {

      if (*((void *)a1 + 4))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    else
    {
      unsigned int v27 = a1[v11];
      unsigned int v28 = v27 - 2;
      if (v27 >= 2)
      {
        if (v11 <= 3) {
          uint64_t v29 = v11;
        }
        else {
          uint64_t v29 = 4;
        }
        switch(v29)
        {
          case 1:
            int v30 = *a1;
            if (v11 >= 4) {
              goto LABEL_73;
            }
            goto LABEL_38;
          case 2:
            int v30 = *(unsigned __int16 *)a1;
            if (v11 < 4) {
              goto LABEL_38;
            }
            goto LABEL_73;
          case 3:
            int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v11 < 4) {
              goto LABEL_38;
            }
            goto LABEL_73;
          case 4:
            int v30 = *(_DWORD *)a1;
            if (v11 < 4)
            {
LABEL_38:
              unsigned int v27 = (v30 | (v28 << (8 * v11))) + 2;
              break;
            }
LABEL_73:
            if (v30 != -1) {
              goto LABEL_41;
            }
            goto LABEL_40;
          default:
            break;
        }
      }
      if (v27 == 1)
      {
LABEL_40:
        uint64_t v59 = *(void *)(v70 - 8);
        uint64_t v31 = v11 + v13 + 1;
        uint64_t v32 = v9;
        uint64_t v33 = *(void (**)(unsigned __int8 *, uint64_t))(v65 + 8);
        v33(a1, v66);
        v33((unsigned __int8 *)((unint64_t)&a1[v64] & v63), v66);
        uint64_t v9 = v32;
        uint64_t v14 = v31;
        uint64_t v12 = v59;
      }
LABEL_41:
      unint64_t v34 = (unint64_t)&a1[v14] & v67;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v34, 1, v70)) {
        (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v34, v70);
      }
      size_t v35 = (v34 + v17 + v19) & v68;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v69 + 48))(v35, 1, v9)) {
        (*(void (**)(size_t, uint64_t))(v69 + 8))(v35, v9);
      }
    }
    unsigned int v36 = a2[v22];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v38 = v22;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *a2;
          if (v22 >= 4) {
            goto LABEL_62;
          }
          goto LABEL_53;
        case 2:
          int v39 = *(unsigned __int16 *)a2;
          if (v22 < 4) {
            goto LABEL_53;
          }
          goto LABEL_62;
        case 3:
          int v39 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v22 < 4) {
            goto LABEL_53;
          }
          goto LABEL_62;
        case 4:
          int v39 = *(_DWORD *)a2;
          if (v22 < 4)
          {
LABEL_53:
            unsigned int v36 = (v39 | (v37 << (8 * v22))) + 2;
            break;
          }
LABEL_62:
          if (v39 != -1) {
            goto LABEL_63;
          }
          goto LABEL_55;
        default:
          break;
      }
    }
    if (v36 == 1)
    {
LABEL_55:
      unint64_t v40 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      uint64_t v41 = *((void *)a2 + 4);
      id v42 = v40;
      if (v41)
      {
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[16] = a2[16];
        *((void *)a1 + 3) = *((void *)a2 + 3);
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *((void *)a1 + 5) = *((void *)a2 + 5);
        *((void *)a1 + 6) = *((void *)a2 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v43 = *(_OWORD *)(a2 + 8);
        long long v44 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v44;
        *(_OWORD *)(a1 + 8) = v43;
      }
      *((void *)a1 + 7) = *((void *)a2 + 7);
      a1[v22] = 1;
      swift_retain();
    }
    else
    {
LABEL_63:
      unsigned int v45 = a2[v11];
      unsigned int v46 = v45 - 2;
      if (v45 >= 2)
      {
        if (v11 <= 3) {
          uint64_t v47 = v11;
        }
        else {
          uint64_t v47 = 4;
        }
        switch(v47)
        {
          case 1:
            int v48 = *a2;
            if (v11 < 4) {
              goto LABEL_76;
            }
            goto LABEL_80;
          case 2:
            int v48 = *(unsigned __int16 *)a2;
            if (v11 < 4) {
              goto LABEL_76;
            }
            goto LABEL_80;
          case 3:
            int v48 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v11 < 4) {
              goto LABEL_76;
            }
            goto LABEL_80;
          case 4:
            int v48 = *(_DWORD *)a2;
            if (v11 < 4) {
LABEL_76:
            }
              unsigned int v45 = (v48 | (v46 << (8 * v11))) + 2;
            else {
LABEL_80:
            }
              unsigned int v45 = v48 + 2;
            break;
          default:
            break;
        }
      }
      uint64_t v60 = v9;
      if (v45 == 1)
      {
        size_t v49 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v65 + 16);
        v49(a1, a2, v66);
        v49((unsigned __int8 *)((unint64_t)&a1[v64] & v63), (unsigned __int8 *)((unint64_t)&a2[v64] & v63), v66);
        a1[v61] = a2[v61];
        char v50 = 1;
      }
      else
      {
        char v50 = 0;
        uint64_t v51 = *(void *)a2;
        *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
        *(void *)a1 = v51;
      }
      a1[v11] = v50;
      uint64_t v52 = (void *)((unint64_t)&a1[v14] & v67);
      size_t v53 = (char *)((unint64_t)&a2[v14] & v67);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v53, 1, v70))
      {
        size_t v54 = v17;
        memcpy(v52, v53, v17);
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v52, v53, v70);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v52, 0, 1, v70);
        size_t v54 = v17;
      }
      uint64_t v55 = &v53[v54];
      unint64_t v56 = (void *)(((unint64_t)v52 + v54 + v19) & v68);
      uint64_t v57 = (const void *)((unint64_t)&v55[v19] & v68);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v69 + 48))(v57, 1, v60))
      {
        memcpy(v56, v57, v62);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v69 + 16))(v56, v57, v60);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v56, 0, 1, v60);
      }
      a1[v22] = 0;
    }
  }
  return a1;
}

uint64_t initializeWithTake for ProgressView.Base(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = ((v8 + v9) & ~v9) + v8;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v12 - 8);
  if ((unint64_t)(v11 + 1) > 0xA) {
    uint64_t v15 = v11 + 1;
  }
  else {
    uint64_t v15 = 10;
  }
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = v15 + v17 + 1;
  int v19 = *(_DWORD *)(v14 + 84);
  size_t v20 = *(void *)(v14 + 64);
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  uint64_t v22 = *(void *)(v13 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  size_t __n = v21;
  uint64_t v24 = (v21 + v23 + (v18 & ~v17)) & ~v23;
  if (*(_DWORD *)(v22 + 84)) {
    uint64_t v25 = *(void *)(*(void *)(v13 - 8) + 64);
  }
  else {
    uint64_t v25 = *(void *)(*(void *)(v13 - 8) + 64) + 1;
  }
  if ((unint64_t)(v25 + v24) <= 0x40) {
    uint64_t v26 = 64;
  }
  else {
    uint64_t v26 = v25 + v24;
  }
  unsigned int v27 = a2[v26];
  unsigned int v28 = v27 - 2;
  if (v27 >= 2)
  {
    if (v26 <= 3) {
      uint64_t v29 = v26;
    }
    else {
      uint64_t v29 = 4;
    }
    switch(v29)
    {
      case 1:
        int v30 = *a2;
        if (v26 >= 4) {
          goto LABEL_27;
        }
        goto LABEL_21;
      case 2:
        int v30 = *(unsigned __int16 *)a2;
        if (v26 < 4) {
          goto LABEL_21;
        }
        goto LABEL_27;
      case 3:
        int v30 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v26 < 4) {
          goto LABEL_21;
        }
        goto LABEL_27;
      case 4:
        int v30 = *(_DWORD *)a2;
        if (v26 < 4)
        {
LABEL_21:
          unsigned int v27 = (v30 | (v28 << (8 * v26))) + 2;
          break;
        }
LABEL_27:
        if (v30 != -1) {
          goto LABEL_28;
        }
        goto LABEL_23;
      default:
        break;
    }
  }
  if (v27 == 1)
  {
LABEL_23:
    long long v31 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v31;
    long long v32 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v32;
    char v33 = 1;
  }
  else
  {
LABEL_28:
    unsigned int v34 = a2[v15];
    unsigned int v35 = v34 - 2;
    if (v34 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v36 = v15;
      }
      else {
        uint64_t v36 = 4;
      }
      switch(v36)
      {
        case 1:
          int v37 = *a2;
          if (v15 < 4) {
            goto LABEL_36;
          }
          goto LABEL_40;
        case 2:
          int v37 = *(unsigned __int16 *)a2;
          if (v15 < 4) {
            goto LABEL_36;
          }
          goto LABEL_40;
        case 3:
          int v37 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v15 < 4) {
            goto LABEL_36;
          }
          goto LABEL_40;
        case 4:
          int v37 = *(_DWORD *)a2;
          if (v15 < 4) {
LABEL_36:
          }
            unsigned int v34 = (v37 | (v35 << (8 * v15))) + 2;
          else {
LABEL_40:
          }
            unsigned int v34 = v37 + 2;
          break;
        default:
          break;
      }
    }
    size_t v60 = v25;
    uint64_t v61 = *(void *)(v13 - 8);
    uint64_t v38 = ~v17;
    if (v34 == 1)
    {
      uint64_t v39 = ~v9;
      uint64_t v59 = v12;
      unint64_t v40 = *(void (**)(uint64_t, unsigned __int8 *))(v7 + 32);
      uint64_t v57 = v15 + v17 + 1;
      uint64_t v58 = v26;
      uint64_t v41 = v6;
      uint64_t v55 = v15;
      uint64_t v56 = v16;
      uint64_t v42 = v11;
      v40(a1, a2);
      uint64_t v43 = v41;
      uint64_t v26 = v58;
      ((void (*)(uint64_t, unint64_t, uint64_t))v40)((v10 + a1) & v39, (unint64_t)&a2[v10] & v39, v43);
      uint64_t v18 = v57;
      uint64_t v12 = v59;
      *(unsigned char *)(v42 + a1) = a2[v42];
      uint64_t v15 = v55;
      uint64_t v16 = v56;
      char v44 = 1;
    }
    else
    {
      char v44 = 0;
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    }
    uint64_t v45 = ~v23;
    *(unsigned char *)(a1 + v15) = v44;
    unsigned int v46 = (void *)((v18 + a1) & v38);
    uint64_t v47 = (char *)((unint64_t)&a2[v18] & v38);
    uint64_t v48 = v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v47, 1, v12))
    {
      size_t v49 = __n;
      memcpy(v46, v47, __n);
      uint64_t v50 = v61;
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 32))(v46, v47, v48);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v46, 0, 1, v48);
      uint64_t v50 = v61;
      size_t v49 = __n;
    }
    uint64_t v51 = &v47[v49];
    uint64_t v52 = (void *)(((unint64_t)v46 + v49 + v23) & v45);
    size_t v53 = (const void *)((unint64_t)&v51[v23] & v45);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48))(v53, 1, v13))
    {
      memcpy(v52, v53, v60);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 32))(v52, v53, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v13);
    }
    char v33 = 0;
  }
  *(unsigned char *)(a1 + v26) = v33;
  return a1;
}

unsigned __int8 *assignWithTake for ProgressView.Base(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v63 = type metadata accessor for Date();
    uint64_t v6 = *(void *)(*(void *)(v63 - 8) + 64);
    uint64_t v62 = *(void *)(v63 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v62 + 80);
    uint64_t v61 = v6 + v7;
    uint64_t v8 = ((v6 + v7) & ~v7) + v6;
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v67 = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(v67 - 8);
    uint64_t v58 = v8;
    if ((unint64_t)(v8 + 1) > 0xA) {
      uint64_t v11 = v8 + 1;
    }
    else {
      uint64_t v11 = 10;
    }
    uint64_t v12 = *(void *)(v67 - 8);
    uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v14 = v11 + v13 + 1;
    int v15 = *(_DWORD *)(v10 + 84);
    size_t v16 = *(void *)(v10 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    uint64_t v18 = *(void *)(v9 - 8);
    uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v66 = v18;
    size_t v20 = *(void *)(v18 + 64);
    if (!*(_DWORD *)(v18 + 84)) {
      ++v20;
    }
    size_t v59 = v20;
    unint64_t v21 = v20 + ((v17 + v19 + (v14 & ~v13)) & ~v19);
    if (v21 <= 0x40) {
      uint64_t v22 = 64;
    }
    else {
      uint64_t v22 = v21;
    }
    unsigned int v23 = a1[v22];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a1;
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 2:
          int v26 = *(unsigned __int16 *)a1;
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 3:
          int v26 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v22 < 4) {
            goto LABEL_21;
          }
          goto LABEL_25;
        case 4:
          int v26 = *(_DWORD *)a1;
          if (v22 < 4) {
LABEL_21:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
          else {
LABEL_25:
          }
            unsigned int v23 = v26 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v60 = ~v7;
    uint64_t v64 = ~v13;
    uint64_t v65 = ~v19;
    if (v23 == 1)
    {

      if (*((void *)a1 + 4))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    else
    {
      unsigned int v27 = a1[v11];
      unsigned int v28 = v27 - 2;
      if (v27 >= 2)
      {
        if (v11 <= 3) {
          uint64_t v29 = v11;
        }
        else {
          uint64_t v29 = 4;
        }
        switch(v29)
        {
          case 1:
            int v30 = *a1;
            if (v11 >= 4) {
              goto LABEL_70;
            }
            goto LABEL_38;
          case 2:
            int v30 = *(unsigned __int16 *)a1;
            if (v11 < 4) {
              goto LABEL_38;
            }
            goto LABEL_70;
          case 3:
            int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v11 < 4) {
              goto LABEL_38;
            }
            goto LABEL_70;
          case 4:
            int v30 = *(_DWORD *)a1;
            if (v11 < 4)
            {
LABEL_38:
              unsigned int v27 = (v30 | (v28 << (8 * v11))) + 2;
              break;
            }
LABEL_70:
            if (v30 != -1) {
              goto LABEL_41;
            }
            goto LABEL_40;
          default:
            break;
        }
      }
      if (v27 == 1)
      {
LABEL_40:
        uint64_t v56 = *(void *)(v67 - 8);
        uint64_t v31 = v11 + v13 + 1;
        uint64_t v32 = v9;
        char v33 = *(void (**)(unsigned __int8 *, uint64_t))(v62 + 8);
        v33(a1, v63);
        v33((unsigned __int8 *)((unint64_t)&a1[v61] & v60), v63);
        uint64_t v9 = v32;
        uint64_t v14 = v31;
        uint64_t v12 = v56;
      }
LABEL_41:
      unint64_t v34 = (unint64_t)&a1[v14] & v64;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v34, 1, v67)) {
        (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v34, v67);
      }
      size_t v35 = (v34 + v17 + v19) & v65;
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v66 + 48))(v35, 1, v9)) {
        (*(void (**)(size_t, uint64_t))(v66 + 8))(v35, v9);
      }
    }
    unsigned int v36 = a2[v22];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v38 = v22;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *a2;
          if (v22 >= 4) {
            goto LABEL_59;
          }
          goto LABEL_53;
        case 2:
          int v39 = *(unsigned __int16 *)a2;
          if (v22 < 4) {
            goto LABEL_53;
          }
          goto LABEL_59;
        case 3:
          int v39 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v22 < 4) {
            goto LABEL_53;
          }
          goto LABEL_59;
        case 4:
          int v39 = *(_DWORD *)a2;
          if (v22 < 4)
          {
LABEL_53:
            unsigned int v36 = (v39 | (v37 << (8 * v22))) + 2;
            break;
          }
LABEL_59:
          if (v39 != -1) {
            goto LABEL_60;
          }
          goto LABEL_55;
        default:
          break;
      }
    }
    if (v36 == 1)
    {
LABEL_55:
      long long v40 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v40;
      long long v41 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v41;
      char v42 = 1;
    }
    else
    {
LABEL_60:
      unsigned int v43 = a2[v11];
      unsigned int v44 = v43 - 2;
      if (v43 >= 2)
      {
        if (v11 <= 3) {
          uint64_t v45 = v11;
        }
        else {
          uint64_t v45 = 4;
        }
        switch(v45)
        {
          case 1:
            int v46 = *a2;
            if (v11 < 4) {
              goto LABEL_73;
            }
            goto LABEL_77;
          case 2:
            int v46 = *(unsigned __int16 *)a2;
            if (v11 < 4) {
              goto LABEL_73;
            }
            goto LABEL_77;
          case 3:
            int v46 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            if (v11 < 4) {
              goto LABEL_73;
            }
            goto LABEL_77;
          case 4:
            int v46 = *(_DWORD *)a2;
            if (v11 < 4) {
LABEL_73:
            }
              unsigned int v43 = (v46 | (v44 << (8 * v11))) + 2;
            else {
LABEL_77:
            }
              unsigned int v43 = v46 + 2;
            break;
          default:
            break;
        }
      }
      uint64_t v57 = v9;
      if (v43 == 1)
      {
        uint64_t v47 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v62 + 32);
        v47(a1, a2, v63);
        v47((unsigned __int8 *)((unint64_t)&a1[v61] & v60), (unsigned __int8 *)((unint64_t)&a2[v61] & v60), v63);
        a1[v58] = a2[v58];
        char v48 = 1;
      }
      else
      {
        char v48 = 0;
        *(void *)a1 = *(void *)a2;
        *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
      }
      a1[v11] = v48;
      size_t v49 = (void *)((unint64_t)&a1[v14] & v64);
      uint64_t v50 = (char *)((unint64_t)&a2[v14] & v64);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v50, 1, v67))
      {
        size_t v51 = v17;
        memcpy(v49, v50, v17);
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v49, v50, v67);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v49, 0, 1, v67);
        size_t v51 = v17;
      }
      uint64_t v52 = &v50[v51];
      size_t v53 = (void *)(((unint64_t)v49 + v51 + v19) & v65);
      size_t v54 = (const void *)((unint64_t)&v52[v19] & v65);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v66 + 48))(v54, 1, v57))
      {
        memcpy(v53, v54, v59);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v66 + 32))(v53, v54, v57);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v53, 0, 1, v57);
      }
      char v42 = 0;
    }
    a1[v22] = v42;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressView.Base(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v7 = *(void *)(v6 + 64)
     + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = 10;
  if (v7 + 1 > 0xA) {
    uint64_t v8 = v7 + 1;
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  int v14 = *(_DWORD *)(v12 + 84);
  uint64_t v15 = *(void *)(v12 + 64);
  if (!*(_DWORD *)(v9 + 84)) {
    ++v11;
  }
  unint64_t v16 = (v11 + v13 + v10) & ~v13;
  if (!v14) {
    ++v15;
  }
  unint64_t v17 = v15 + v16;
  uint64_t v18 = 64;
  if (v17 > 0x40) {
    uint64_t v18 = v17;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_28;
  }
  uint64_t v19 = v18 + 1;
  char v20 = 8 * (v18 + 1);
  if ((v18 + 1) <= 3)
  {
    unsigned int v23 = ((a2 + ~(-1 << v20) - 254) >> v20) + 1;
    if (HIWORD(v23))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v23 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v23 < 2)
    {
LABEL_28:
      unsigned int v25 = *((unsigned __int8 *)a1 + v18);
      if (v25 >= 2) {
        return (v25 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_28;
  }
LABEL_20:
  int v24 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v24 = 0;
  }
  if (v19)
  {
    if (v19 > 3) {
      LODWORD(v19) = 4;
    }
    switch((int)v19)
    {
      case 2:
        LODWORD(v19) = *a1;
        break;
      case 3:
        LODWORD(v19) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v19) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v19) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v19 | v24) + 255;
}

void storeEnumTagSinglePayload for ProgressView.Base(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v9 = *(void *)(v8 + 64)
     + ((*(void *)(v8 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = 10;
  if (v9 + 1 > 0xA) {
    uint64_t v10 = v9 + 1;
  }
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  int v16 = *(_DWORD *)(v14 + 84);
  uint64_t v17 = *(void *)(v14 + 64);
  if (!*(_DWORD *)(v11 + 84)) {
    ++v13;
  }
  unint64_t v18 = (v13 + v15 + v12) & ~v15;
  if (!v16) {
    ++v17;
  }
  unint64_t v19 = v17 + v18;
  if (v19 <= 0x40) {
    unint64_t v19 = 64;
  }
  size_t v20 = v19 + 1;
  if (a3 < 0xFF)
  {
    int v21 = 0;
  }
  else if (v20 <= 3)
  {
    unsigned int v24 = ((a3 + ~(-1 << (8 * v20)) - 254) >> (8 * v20)) + 1;
    if (HIWORD(v24))
    {
      int v21 = 4;
    }
    else if (v24 >= 0x100)
    {
      int v21 = 2;
    }
    else
    {
      int v21 = v24 > 1;
    }
  }
  else
  {
    int v21 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v22 = a2 - 255;
    if (v20 < 4)
    {
      int v23 = (v22 >> (8 * v20)) + 1;
      if (v19 != -1)
      {
        int v25 = v22 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v19 + 1);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v20] = v23;
        break;
      case 2:
        *(_WORD *)&a1[v20] = v23;
        break;
      case 3:
LABEL_40:
        __break(1u);
        JUMPOUT(0x187924554);
      case 4:
        *(_DWORD *)&a1[v20] = v23;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v21)
    {
      case 1:
        a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v20] = 0;
        goto LABEL_28;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      default:
LABEL_28:
        if (a2) {
LABEL_29:
        }
          a1[v19] = -(char)a2;
        break;
    }
  }
}

uint64_t partial apply for implicit closure #1 in static CustomProgressView._makeView(view:inputs:)()
{
  return implicit closure #1 in static CustomProgressView._makeView(view:inputs:)(*(_DWORD *)(v0 + 48), *(_DWORD *)(v0 + 52), *(void *)(v0 + 56), *(_DWORD *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void type metadata accessor for WidgetAuxiliaryTextImagePreference?()
{
  if (!lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?);
    }
  }
}

uint64_t type metadata accessor for CustomProgressView.WidgetMetadataWriter()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for WidgetAuxiliaryViewMetadata?(uint64_t a1)
{
}

void type metadata accessor for Attribute<WidgetAuxiliaryTextImagePreference?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedDecodingContainer<ProgressViewValue.DateRelativeCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t _sSNy10Foundation4DateVGSNyxGSesSeRzrlWlTm_1(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ClosedRange<Date>();
    _s10Foundation4DateVACSLAAWlTm_1(a2, MEMORY[0x1E4F27928]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for ProgressViewValue.CodingKeys()
{
  return &unk_1ED4246F8;
}

void *type metadata accessor for ProgressViewValue.AbsoluteCodingKeys()
{
  return &unk_1ED424788;
}

unsigned char *storeEnumTagSinglePayload for ProgressViewValue.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1879249A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ProgressViewValue.DateRelativeCodingKeys()
{
  return &unk_1ED424818;
}

void *initializeBufferWithCopyOfBuffer for ResolvedProgressView(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      uint64_t v9 = *(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((void *)((char *)a1 + *(int *)(v10 + 36)), (void *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((unsigned char *)a1 + *(int *)(v11 + 48)) = *((unsigned char *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v13 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  }
  return a1;
}

uint64_t destroy for ResolvedProgressView(uint64_t a1)
{
  type metadata accessor for ProgressViewValue(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for Date();
    unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), a1, v3);
    type metadata accessor for ClosedRange<Date>();
    uint64_t v5 = a1 + *(int *)(v4 + 36);
    return v6(v5, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for ResolvedProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v11] = a2[v11];
  return a1;
}

unsigned char *assignWithCopy for ResolvedProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ProgressViewStyleConfiguration((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *initializeWithTake for ResolvedProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v11] = a2[v11];
  return a1;
}

unsigned char *assignWithTake for ResolvedProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ProgressViewStyleConfiguration((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v11] = a2[v11];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187925108);
}

uint64_t sub_187925108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1879251EC);
}

uint64_t sub_1879251EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ProgressViewValue(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in CustomProgressView<A, B>.WidgetMetadataWriter()
{
  return swift_getWitnessTable();
}

void type metadata accessor for (ClosedRange<Date>, Bool)()
{
  if (!lazy cache variable for type metadata for (ClosedRange<Date>, Bool))
  {
    type metadata accessor for ClosedRange<Date>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool));
    }
  }
}

uint64_t specialized ProgressViewValue.AbsoluteCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000018832D0D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000018832D0F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ProgressViewValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574756C6F736261 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616C655265746164 && a2 == 0xEC00000065766974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ProgressViewValue.DateRelativeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t outlined copy of WidgetAuxiliaryTextImagePreference?(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of WidgetAuxiliaryTextImagePreference?(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<WidgetAuxiliaryTextImagePreference?>(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Progress?, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1879259F0()
{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, (void (*)(uint64_t))type metadata accessor for ResolvedProgressViewStyle);
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v30 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v31 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v29 = (void *)*MEMORY[0x1E4FB2EF8];
  unsigned int v28 = (void *)*MEMORY[0x1E4FB2F00];
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (2)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v7 << 6);
    }
    else
    {
      int64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (v11 >= v31) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v30 + 8 * v11);
      ++v7;
      if (!v12)
      {
        int64_t v7 = v11 + 1;
        if (v11 + 1 >= v31) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v30 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 2;
          if (v11 + 2 >= v31) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v30 + 8 * v7);
          if (!v12)
          {
            int64_t v7 = v11 + 3;
            if (v11 + 3 >= v31) {
              goto LABEL_36;
            }
            unint64_t v12 = *(void *)(v30 + 8 * v7);
            if (!v12)
            {
              int64_t v13 = v11 + 4;
              if (v13 >= v31)
              {
LABEL_36:

                uint64_t result = swift_release();
                uint64_t v16 = 0;
                unint64_t v15 = 0xF000000000000007;
                goto LABEL_37;
              }
              unint64_t v12 = *(void *)(v30 + 8 * v13);
              int64_t v7 = v13;
              if (!v12)
              {
                while (1)
                {
                  int64_t v7 = v13 + 1;
                  if (__OFADD__(v13, 1)) {
                    break;
                  }
                  if (v7 >= v31) {
                    goto LABEL_36;
                  }
                  unint64_t v12 = *(void *)(v30 + 8 * v7);
                  ++v13;
                  if (v12) {
                    goto LABEL_21;
                  }
                }
LABEL_39:
                __break(1u);
                JUMPOUT(0x187925D88);
              }
            }
          }
        }
      }
LABEL_21:
      unint64_t v6 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
    }
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    switch(v15 >> 62)
    {
      case 1uLL:
        uint64_t v32 = 0x3A746867696548;
        unint64_t v17 = 0xE700000000000000;
        goto LABEL_25;
      case 2uLL:
        uint64_t v32 = 0x3A6D6F74737543;
        unint64_t v33 = 0xE700000000000000;
        uint64_t v18 = _typeName(_:qualified:)();
        goto LABEL_27;
      case 3uLL:
        if (v16 | v15 ^ 0xC000000000000000) {
          int v21 = v29;
        }
        else {
          int v21 = v28;
        }
        id v20 = v21;
        goto LABEL_32;
      default:
        uint64_t v32 = 0x6E6F697463617246;
        unint64_t v17 = 0xE90000000000003ALL;
LABEL_25:
        unint64_t v33 = v17;
        uint64_t v18 = Double.description.getter();
LABEL_27:
        String.append(_:)(*(Swift::String *)&v18);
        swift_bridgeObjectRelease();
        id v20 = (id)MEMORY[0x18C115780](v32, v33);
        swift_bridgeObjectRelease();
LABEL_32:
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;
        if (v22 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v24 != v25)
        {
          char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v8)
          {

            uint64_t result = swift_release();
            goto LABEL_37;
          }
          continue;
        }

        swift_release();
        uint64_t result = swift_bridgeObjectRelease_n();
LABEL_37:
        *a3 = v16;
        a3[1] = v15;
        return result;
    }
  }
}

uint64_t specialized _UIHostingView.beginDescendingAllowUIKitAnimations(depth:)(uint64_t a1)
{
  uint64_t v3 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70);
  ++*(_DWORD *)((char *)v1 + v3);
  id v4 = objc_msgSend(v1, sel_subviews);
  type metadata accessor for UIView();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v33 = (void *)v5;
  uint64_t v25 = MEMORY[0x1E4FBC838] + 8;
  while (1)
  {
    uint64_t v26 = a1;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (result < 0) {
        goto LABEL_36;
      }
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v9 < 0 || v10 < v9) {
        goto LABEL_37;
      }
      if (v9) {
        goto LABEL_9;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
      if (swift_isUniquelyReferenced_nonNull_bridgeObject())
      {
        uint64_t result = specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10));
        goto LABEL_16;
      }
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_9:
        type metadata accessor for SheetPreference?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, v25, MEMORY[0x1E4FBBE00]);
        int64_t v11 = (void *)swift_allocObject();
        int64_t v12 = _swift_stdlib_malloc_size_1(v11);
        uint64_t v13 = v12 - 32;
        if (v12 < 32) {
          uint64_t v13 = v12 - 25;
        }
        v11[2] = 0;
        v11[3] = (2 * (v13 >> 3)) | 1;
        goto LABEL_14;
      }
    }
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
LABEL_14:
    unint64_t v33 = v11;
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v14) {
        goto LABEL_31;
      }
      goto LABEL_17;
    }
    uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    uint64_t v14 = *(void *)(v7 + 16);
    if (!v14) {
      goto LABEL_31;
    }
LABEL_17:
    if (v14 < 1) {
      goto LABEL_35;
    }
    uint64_t v15 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v18 = (id)MEMORY[0x18C117680](v15, v5);
      }
      else {
        id v18 = *(id *)(v5 + 8 * v15 + 32);
      }
      unint64_t v19 = v18;
      id v29 = v18;
      type metadata accessor for UIKitAnimationCooperating();
      id v20 = v19;
      if (swift_dynamicCast())
      {
        outlined init with take of OptionalBinaryInteger(v27, (uint64_t)v30);
        uint64_t v22 = v31;
        uint64_t v21 = v32;
        __swift_project_boxed_opaque_existential_1(v30, v31);
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v21);
        outlined init with copy of TableColumnList((uint64_t)v30, (uint64_t)v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        unint64_t v24 = v6[2];
        unint64_t v23 = v6[3];
        if (v24 >= v23 >> 1) {
          unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v6);
        }
        Swift::String v6[2] = v24 + 1;
        outlined init with take of OptionalBinaryInteger(v27, (uint64_t)&v6[5 * v24 + 4]);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      }
      else
      {
        uint64_t v28 = 0;
        memset(v27, 0, sizeof(v27));
        outlined destroy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?((uint64_t)v27, &lazy cache variable for type metadata for UIKitAnimationCooperating?, (void (*)(uint64_t))type metadata accessor for UIKitAnimationCooperating);
      }
      ++v15;
      id v16 = objc_msgSend(v20, sel_subviews, v25);
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      specialized Array.append<A>(contentsOf:)(v17);
    }
    while (v14 != v15);
LABEL_31:
    uint64_t result = swift_bridgeObjectRelease();
    a1 = v26 - 1;
    if (__OFSUB__(v26, 1)) {
      break;
    }
    unint64_t v5 = (unint64_t)v33;
    if (a1 <= 0)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v6;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void SheetBridge.host.getter()
{
}

void SheetBridge.seed.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + direct field offset for SheetBridge.seed);
}

_DWORD *SheetBridge.seed.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + direct field offset for SheetBridge.seed) = *result;
  return result;
}

uint64_t SheetBridge.interactiveDismissHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + direct field offset for SheetBridge.interactiveDismissHandler);
  uint64_t v4 = *(void *)(v2 + direct field offset for SheetBridge.interactiveDismissHandler);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

uint64_t SheetBridge.hasWindow.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for SheetBridge.hasWindow) = result;
  return result;
}

uint64_t SheetBridge.presentationState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  return outlined init with copy of PresentationState(v3, a1);
}

void SheetBridge.presenterOverride.getter()
{
}

uint64_t SheetBridge.lastEnvironment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + direct field offset for SheetBridge.lastEnvironment + 8);
  *a1 = *(void *)(v1 + direct field offset for SheetBridge.lastEnvironment);
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t SheetBridge.lastEnvironment.setter(_OWORD *a1)
{
  *(_OWORD *)(v1 + direct field offset for SheetBridge.lastEnvironment) = *a1;
  swift_release();

  return swift_release();
}

uint64_t SheetBridge.requiresTransparentHostKey.getter()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for SheetBridge.host);
  if (result)
  {
    uint64_t v2 = (void *)result;
    uint64_t v3 = (void *)specialized _UIHostingView.inspectorBridge.getter();
    id v4 = v3;

    if (v3) {
    return v3 != 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(void *a1, unsigned char *a2, char a3, Swift::Bool a4, void *a5)
{
  uint64_t v11 = *MEMORY[0x1E4FBC8C8] & *v5;
  Swift::Bool v12 = *a1 != 0;
  swift_beginAccess();
  PresentationState.dismiss(willPresentAgain:hasNoModifier:)(v12, a4);
  swift_endAccess();
  if (a4) {
    a2[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 1;
  }
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of PresentationOptionsPreference?((uint64_t)a1, (uint64_t)v19, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = *(void *)(v11 + 80);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v11 + 88);
  *(void *)(v14 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(v11 + 104);
  *(void *)(v14 + 48) = v13;
  outlined init with take of SheetPreference?((uint64_t)v19, v14 + 56);
  *(void *)(v14 + 168) = a2;
  *(void *)(v14 + 176) = a5;
  *(unsigned char *)(v14 + 184) = a3 & 1;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = partial apply for closure #1 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:);
  *(void *)(v15 + 32) = v14;
  *(unsigned char *)(v15 + 4outlined consume of Text?(0, 0, 0, 0) = a3 & 1;
  id v16 = a2;
  id v17 = a5;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

void closure #1 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(uint64_t a1, uint64_t a2, uint64_t a3, UIViewController *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = a1 + 16;
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x18C119DF0](v16);
  if (v17)
  {
    id v18 = (char *)v17;
    outlined init with copy of PresentationOptionsPreference?(a2, (uint64_t)&v38, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if ((void)v38)
    {
      void v44[3] = v41;
      long long v45 = v42;
      *(_OWORD *)int v46 = v43[0];
      *(_OWORD *)&v46[9] = *(_OWORD *)((char *)v43 + 9);
      v44[0] = v38;
      v44[1] = v39;
      v44[2] = v40;
      uint64_t v19 = (uint64_t)&v18[direct field offset for SheetBridge.presentationState];
      swift_beginAccess();
      outlined init with copy of PresentationState(v19, (uint64_t)&v38);
      outlined init with copy of PresentationState.Base((uint64_t)&v38, (uint64_t)v35);
      if (v37 >= 2u)
      {
        uint64_t v32 = a8;
        char v33 = a5;
        outlined destroy of PresentationState.Base((uint64_t)v35);
        outlined destroy of PresentationState((uint64_t)&v38);
        uint64_t v20 = *(void *)&v44[0];
        uint64_t v21 = direct field offset for UIHostingController.host;
        uint64_t v22 = *(void **)(a3 + direct field offset for UIHostingController.host);
        unint64_t v23 = (void *)((char *)v22 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v22) + 0x60));
        swift_beginAccess();
        *unint64_t v23 = v20;
        swift_retain_n();
        unint64_t v24 = v22;
        swift_release();
        LOWORD(v38) = 1;
        type metadata accessor for PresentationHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        swift_release_n();
        uint64_t v25 = *(void **)(a3 + v21);
        uint64_t v26 = *(void *)&v46[16];
        uint64_t v27 = *(void *)((char *)v25 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v25) + 0x68));
        uint64_t v28 = *(void *)(v27 + 152);
        *(void *)(v27 + 152) = *(void *)&v46[8];
        *(void *)(v27 + 16outlined consume of Text?(0, 0, 0, 0) = v26;
        swift_retain();
        id v29 = v25;
        swift_retain();
        outlined consume of EnvironmentValues?(v28);
        if (MEMORY[0x18C119DF0](v27 + 24))
        {
          swift_getObjectType();
          LOWORD(v38) = 2;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

          swift_unknownObjectRelease();
        }
        else
        {
        }
        unint64_t v34 = v18;
        signed __int8 v30 = BYTE8(v45);
        *(void *)&long long v38 = a6;
        *((void *)&v38 + 1) = a7;
        *(void *)&long long v39 = v32;
        *((void *)&v39 + 1) = a9;
        uint64_t v31 = type metadata accessor for SheetBridge();
        PresentationHostingController.setupSheet<A>(for:presenter:placement:)((uint64_t)&v34, a4, v30, v31, (uint64_t)&protocol witness table for SheetBridge<A, B>);
        [(UIViewController *)a4 presentViewController:a3 animated:v33 & 1 completion:0];
        LODWORD(v34) = *(_DWORD *)&v18[direct field offset for SheetBridge.seed];
        swift_beginAccess();
        PresentationState.present(_:presentedVC:presentationSeed:)(v44, a3, &v34);
        swift_endAccess();

        outlined destroy of SheetPreference((uint64_t)v44);
      }
      else
      {

        outlined destroy of SheetPreference((uint64_t)v35);
        outlined destroy of PresentationState((uint64_t)&v38);
        outlined destroy of SheetPreference((uint64_t)v44);
      }
    }
    else
    {

      outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)&v38, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
    }
  }
}

void closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(void *a1, uint64_t (*a2)(), uint64_t a3, char a4)
{
  id v8 = objc_msgSend(a1, sel_transitionCoordinator);
  if (!v8)
  {
LABEL_6:
    if ((a4 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_7:
    id v11 = objc_msgSend(a1, sel_presentingViewController);
    if (!v11) {
      id v11 = a1;
    }
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    uint64_t v21 = MEMORY[0x1E4F143A8];
    uint64_t v22 = 1107296256;
    unint64_t v23 = thunk for @escaping @callee_guaranteed () -> ();
    unint64_t v24 = &block_descriptor_19_0;
    uint64_t v14 = _Block_copy(&v21);
    swift_retain();
    swift_release();
    objc_msgSend(v11, sel_dismissViewControllerAnimated_completion_, 1, v14);
    _Block_release(v14);
    goto LABEL_10;
  }
  uint64_t v9 = v8;
  id v10 = objc_msgSend(a1, sel_presentationController);
  if (!v10)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  id v11 = v10;
  if (objc_msgSend(v10, sel_dismissing))
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a2;
    *(void *)(v12 + 24) = a3;
    uint64_t v25 = partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:);
    uint64_t v26 = v12;
    uint64_t v21 = MEMORY[0x1E4F143A8];
    uint64_t v22 = 1107296256;
    unint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    unint64_t v24 = &block_descriptor_25;
    uint64_t v13 = _Block_copy(&v21);
    swift_retain();
    swift_release();
    objc_msgSend(v9, sel_animateAlongsideTransition_completion_, 0, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();
LABEL_10:

    return;
  }
  swift_unknownObjectRelease();

  if (a4) {
    goto LABEL_7;
  }
LABEL_12:
  uint64_t v15 = self;
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #2 in closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:);
  *(void *)(v17 + 24) = v16;
  uint64_t v25 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v26 = v17;
  uint64_t v21 = MEMORY[0x1E4F143A8];
  uint64_t v22 = 1107296256;
  unint64_t v23 = thunk for @escaping @callee_guaranteed () -> ();
  unint64_t v24 = &block_descriptor_14;
  id v18 = _Block_copy(&v21);
  swift_retain();
  id v19 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel__performWithoutDeferringTransitions_, v18);
  _Block_release(v18);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
}

void closure #2 in closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(a1, sel_presentingViewController);
  if (!v6) {
    id v6 = a1;
  }
  void v8[4] = a2;
  v8[5] = a3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  void v8[2] = thunk for @escaping @callee_guaranteed () -> ();
  v8[3] = &block_descriptor_28;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_dismissViewControllerAnimated_completion_, 0, v7);
  _Block_release(v7);
}

void closure #5 in SheetBridge.preferencesDidChange(_:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for willDismiss != -1) {
    swift_once();
  }
  objc_msgSend(v14, sel_postNotificationName_object_, static SheetBridgeNotifications.willDismiss, 0);

  id v15 = objc_msgSend(a1, sel_presentingViewController);
  if (!v15) {
    id v15 = a1;
  }
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  void v16[5] = a7;
  v16[6] = a3;
  void v18[4] = partial apply for closure #1 in closure #5 in SheetBridge.preferencesDidChange(_:);
  v18[5] = v16;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed () -> ();
  v18[3] = &block_descriptor_55;
  uint64_t v17 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_dismissViewControllerAnimated_completion_, a2 & 1, v17);
  _Block_release(v17);
}

void closure #1 in closure #5 in SheetBridge.preferencesDidChange(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = (void *)MEMORY[0x18C119DF0](v2 + direct field offset for SheetBridge.host);

    if (v4)
    {
      type metadata accessor for _UIHostingView();
      swift_getWitnessTable();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SheetBridge.sheetPresentationControllerDidChangeSelectedDetentIdentifier(_:)(UISheetPresentationController a1)
{
  uint64_t v3 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v3, (uint64_t)v5);
  id v4 = (void *)PresentationState.Base.presentedVC.getter();
  outlined destroy of PresentationState((uint64_t)v5);
  if (v4)
  {
    specialized PresentationHostingController.didChangeSelectedDetent(sheet:)(a1.super.super.isa);
  }
}

void specialized PresentationHostingController.didChangeSelectedDetent(sheet:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = direct field offset for UIHostingController.host;
  id v5 = *(id *)(v1 + direct field offset for UIHostingController.host);
  uint64_t v6 = specialized _UIHostingView.beginDescendingAllowUIKitAnimations(depth:)(10);

  uint64_t v7 = *(void **)(v2 + v4);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  id v9 = v7;
  onNextMainRunLoop(do:)();

  swift_release();
  uint64_t v10 = v2 + direct field offset for PresentationHostingController.lastPresentationOptions;
  swift_beginAccess();
  outlined init with copy of PresentationOptionsPreference?(v10, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  if (*(void *)&v18[0])
  {
    long long v26 = v18[6];
    v27[0] = v19[0];
    *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v19 + 9);
    long long v22 = v18[2];
    long long v23 = v18[3];
    long long v24 = v18[4];
    long long v25 = v18[5];
    long long v20 = v18[0];
    long long v21 = v18[1];
    id v11 = objc_msgSend(a1, sel_selectedDetentIdentifier);
    if (!v11)
    {
LABEL_7:
      outlined destroy of PresentationOptionsPreference((uint64_t)&v20);
      return;
    }
    uint64_t v12 = v11;
    uint64_t v13 = v21;
    if ((void)v21)
    {
      long long v14 = v20;
      id v15 = v11;
      swift_bridgeObjectRetain();
      outlined copy of Binding<NavigationSplitViewColumn>?(*((uint64_t *)&v14 + 1), v13);
      specialized Sequence.first(where:)(v14, v15, v18);
      swift_bridgeObjectRelease();
      unint64_t v17 = *((void *)&v18[0] + 1);
      uint64_t v16 = *(void *)&v18[0];
      if ((*((void *)&v18[0] + 1) & 0xF000000000000007) == 0xF000000000000007)
      {
        uint64_t v16 = 2;
        unint64_t v17 = 0xC000000000000000;
      }
      *(void *)&v18[0] = v16;
      *((void *)&v18[0] + 1) = v17;
      dispatch thunk of AnyLocation.set(_:transaction:)();

      outlined consume of Binding<NavigationSplitViewColumn>?(*((uint64_t *)&v14 + 1), v13);
      goto LABEL_7;
    }
    outlined destroy of PresentationOptionsPreference((uint64_t)&v20);
  }
  else
  {
    outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
  }
}

void @objc SheetBridge.sheetPresentationControllerDidChangeSelectedDetentIdentifier(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  SheetBridge.sheetPresentationControllerDidChangeSelectedDetentIdentifier(_:)((UISheetPresentationController)v4);
}

Swift::Void __swiftcall SheetBridge._sheetPresentationControllerDidChangeHosting(_:)(UISheetPresentationController a1)
{
  uint64_t v3 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v3, (uint64_t)v13);
  id v4 = (char *)PresentationState.Base.presentedVC.getter();
  outlined destroy of PresentationState((uint64_t)v13);
  if (v4)
  {
    if ([(objc_class *)a1.super.super.isa _isHosting])
    {
      id v5 = objc_msgSend(v4, sel_view);
      if (!v5)
      {
        __break(1u);
        return;
      }
      uint64_t v6 = v5;
      id v7 = objc_msgSend(self, sel_clearColor);
      objc_msgSend(v6, sel_setBackgroundColor_, v7);

      uint64_t v8 = *(void **)&v4[direct field offset for UIHostingController.host];
      id v9 = (void *)((char *)v8 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v8) + 0xB8));
      swift_beginAccess();
      uint64_t v10 = *v9;
      *id v9 = 0;
      if (v10)
      {
        type metadata accessor for PresentationHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        id v11 = v4;
        uint64_t v12 = v8;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        return;
      }
    }
  }
}

void @objc SheetBridge._sheetPresentationControllerDidChangeHosting(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  SheetBridge._sheetPresentationControllerDidChangeHosting(_:)((UISheetPresentationController)v4);
}

void @objc SheetBridge.presentationControllerDidAttemptToDismiss(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized SheetBridge.presentationControllerDidAttemptToDismiss(_:)();
}

Swift::Void __swiftcall SheetBridge.didBeginInteractiveDismissal(_:)(UIViewController *a1)
{
  uint64_t v3 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v3, (uint64_t)v5);
  id v4 = (UIViewController *)PresentationState.Base.presentedVC.getter();
  outlined destroy of PresentationState((uint64_t)v5);
  if (v4)
  {

    if (v4 == a1 && (static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      swift_beginAccess();
      PresentationState.presentationDidBeginInteractiveDismissal()();
      swift_endAccess();
    }
  }
}

uint64_t protocol witness for PresentationHostingControllerDelegate.didDismissViewController(_:wasPreempted:modifierRemoved:) in conformance SheetBridge<A, B>(uint64_t a1, uint64_t a2, char a3)
{
  return specialized SheetBridge.didDismissViewController(_:wasPreempted:modifierRemoved:)(a2, a3);
}

uint64_t protocol witness for PresentationHostingControllerDelegate.isBackingV5Inspector.getter in conformance SheetBridge<A, B>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t protocol witness for PresentationHostingControllerDelegate.willTransitionToRegularSizeClass() in conformance SheetBridge<A, B>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t one-time initialization function for willDismiss()
{
  uint64_t result = MEMORY[0x18C115780](0xD000000000000016, 0x800000018832D240);
  static SheetBridgeNotifications.willDismiss = result;
  return result;
}

void *specialized closure #1 in PresentationHostingController.didChangeSelectedDetent(sheet:)(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *result) + 0x70);
  int v3 = *(_DWORD *)((char *)result + v2);
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)((char *)result + v2) = v5 & ~(v5 >> 31);
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      id v7 = (void *)(a2 + 32);
      do
      {
        uint64_t v8 = v7[3];
        uint64_t v9 = v7[4];
        __swift_project_boxed_opaque_existential_1(v7, v8);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
        v7 += 5;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

void partial apply for closure #1 in SheetBridge.hostingView<A>(_:didChangePreferences:)(char *a1)
{
  char v1 = *a1;
  _UIHostingView.colorScheme.setter(&v1);
}

void specialized SheetBridge.presentationControllerDidAttemptToDismiss(_:)()
{
  uint64_t v1 = v0 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v1, (uint64_t)v6);
  uint64_t v2 = (char *)PresentationState.Base.presentedVC.getter();
  outlined destroy of PresentationState((uint64_t)v6);
  if (v2)
  {
    id v3 = *(id *)&v2[direct field offset for UIHostingController.host];
    BOOL v4 = (char *)specialized _UIHostingView.sheetBridge.getter();

    if (v4)
    {
      int v5 = *(void (**)(void))&v4[direct field offset for SheetBridge.interactiveDismissHandler];
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v5, *(void *)&v4[direct field offset for SheetBridge.interactiveDismissHandler + 8]);

      if (v5)
      {
        v5();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
      }
    }
  }
}

uint64_t specialized SheetBridge.didDismissViewController(_:wasPreempted:modifierRemoved:)(uint64_t result, char a2)
{
  if ((result & 1) == 0)
  {
    if (a2 & 1) != 0 && (static SemanticFeature.isEnabled.getter())
    {
      swift_beginAccess();
      PresentationState.dismiss(willPresentAgain:hasNoModifier:)(0, 1);
      swift_endAccess();
    }
    uint64_t v3 = v2 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v3, (uint64_t)v14);
    PresentationState.delayedPresentation.getter((uint64_t)v18);
    outlined destroy of PresentationState((uint64_t)v14);
    swift_beginAccess();
    PresentationState.presentationDidDisappear()();
    swift_endAccess();
    outlined init with copy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?((uint64_t)v18, (uint64_t)v10);
    if (*(void *)&v10[0])
    {
      v14[4] = v10[4];
      v15[0] = v11[0];
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v11 + 9);
      v14[0] = v10[0];
      v14[1] = v10[1];
      v14[2] = v10[2];
      v14[3] = v10[3];
      uint64_t v4 = (uint64_t)v12;
      id v16 = v12;
      unsigned int v5 = v13;
      unsigned __int8 v17 = v13;
      id v6 = v12;
      id v7 = (UIViewController *)SheetBridge.presenter.getter();
      if (v7)
      {
        uint64_t v8 = v7;
        SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)((uint64_t)v14, v7, v5, v4, 0);
      }
      else
      {
      }
      outlined destroy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)((uint64_t)v14);
      uint64_t v9 = v18;
    }
    else
    {
      outlined destroy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?((uint64_t)v18, &lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?, (void (*)(uint64_t))type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool));
      uint64_t v9 = v10;
    }
    return outlined destroy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?((uint64_t)v9, &lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?, (void (*)(uint64_t))type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool));
  }
  return result;
}

uint64_t outlined init with copy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?(0, &lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?, (void (*)(uint64_t))type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)()
{
  if (!lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool))
  {
    type metadata accessor for PresentationHostingController<AnyView>?();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool));
    }
  }
}

void type metadata accessor for PresentationHostingController<AnyView>?()
{
  if (!lazy cache variable for type metadata for PresentationHostingController<AnyView>?)
  {
    type metadata accessor for PresentationHostingController<AnyView>(255, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>?);
    }
  }
}

uint64_t outlined destroy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)(uint64_t a1)
{
  type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187927CD8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187927D10()
{
  swift_release();
  if (*(void *)(v0 + 56))
  {
    swift_release();
    if (*(void *)(v0 + 64)) {
      swift_release();
    }
    if (*(void *)(v0 + 112)) {
      __swift_destroy_boxed_opaque_existential_1(v0 + 88);
    }
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

void partial apply for closure #1 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)()
{
  closure #1 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(*(void *)(v0 + 48), v0 + 56, *(void *)(v0 + 168), *(UIViewController **)(v0 + 176), *(unsigned char *)(v0 + 184), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_187927DD8()
{
  return objectdestroy_9Tm_1();
}

void partial apply for closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)()
{
  closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(*(void **)(v0 + 16), *(uint64_t (**)())(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_187927DF0()
{
  return objectdestroy_9Tm_1();
}

void partial apply for closure #2 in closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)()
{
  closure #2 in closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_187927E04()
{
  return swift_deallocObject();
}

uint64_t sub_187927E14()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187927E4C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187927E94()
{
  return swift_deallocObject();
}

uint64_t sub_187927ED4()
{
  return swift_deallocObject();
}

uint64_t sub_187927EE4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *partial apply for specialized closure #1 in PresentationHostingController.didChangeSelectedDetent(sheet:)()
{
  return specialized closure #1 in PresentationHostingController.didChangeSelectedDetent(sheet:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t type metadata accessor for UIKitAnimationCooperating()
{
  unint64_t result = lazy cache variable for type metadata for UIKitAnimationCooperating;
  if (!lazy cache variable for type metadata for UIKitAnimationCooperating)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIKitAnimationCooperating);
  }
  return result;
}

uint64_t outlined destroy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_187928034()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #5 in SheetBridge.preferencesDidChange(_:)()
{
  closure #5 in SheetBridge.preferencesDidChange(_:)(*(void **)(v0 + 48), *(unsigned char *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_18792808C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #5 in SheetBridge.preferencesDidChange(_:)()
{
  closure #1 in closure #5 in SheetBridge.preferencesDidChange(_:)(*(void *)(v0 + 48));
}

uint64_t LabeledContent<>.init(_:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(int *)(type metadata accessor for LabeledContent() + 40);
  closure #1 in LabeledContent<>.init(_:content:)(a1, a2, a3);
  *(void *)a4 = closure #2 in LabeledContent<>.init(_:content:)();
  *(void *)(a4 + 8) = v9;
  *(unsigned char *)(a4 + 16) = v10 & 1;
  *(void *)(a4 + 24) = v11;
  *(unsigned char *)(a4 + v8) = 1;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in LabeledContent<>.init(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  char v10 = (char *)&v14 - v9;
  v11(v8);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  id v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a3);
}

uint64_t closure #2 in LabeledContent<>.init(_:content:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t LabeledContent<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(int *)(type metadata accessor for LabeledContent() + 40);
  closure #1 in LabeledContent<>.init<A>(_:content:)(a2, a3, a4);
  *(void *)a6 = closure #2 in LabeledContent<>.init<A>(_:content:)(a1);
  *(void *)(a6 + 8) = v13;
  *(unsigned char *)(a6 + 16) = v14 & 1;
  *(void *)(a6 + 24) = v15;
  *(unsigned char *)(a6 + v12) = 1;
  id v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8);

  return v16(a1, a5);
}

uint64_t closure #1 in LabeledContent<>.init<A>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  char v10 = (char *)&v14 - v9;
  v11(v8);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a3);
}

uint64_t closure #2 in LabeledContent<>.init<A>(_:content:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return Text.init<A>(_:)();
}

uint64_t LabeledContent<>.init<A>(_:value:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v18);
  uint64_t v6 = v18[0];
  uint64_t v7 = v18[1];
  char v8 = v19;
  uint64_t v17 = v20;
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = v13 & 1;
  *(void *)(a3 + 24) = v15;
  *(void *)(a3 + 32) = v6;
  *(void *)(a3 + 4outlined consume of Text?(0, 0, 0, 0) = v7;
  *(unsigned char *)(a3 + 48) = v8;
  *(void *)(a3 + 56) = v17;
  *(unsigned char *)(a3 + 64) = 1;
  return result;
}

uint64_t closure #1 in LabeledContent<>.init<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

double LabeledContent<>.init<A, B>(_:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a3 - 8);
  double v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = &v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, double))(v14 + 16))(v17, a1, v15);
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a2;
  LabeledContent<>.init<A>(_:content:)((uint64_t)v17, (uint64_t)partial apply for closure #1 in LabeledContent<>.init<A, B>(_:value:), (uint64_t)v25, MEMORY[0x1E4F41420], a3, (uint64_t)&v31);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  char v18 = v32;
  uint64_t v19 = v33;
  char v20 = v35;
  uint64_t v21 = v36;
  char v22 = v37;
  double result = *(double *)&v31;
  long long v24 = v34;
  *(_OWORD *)a7 = v31;
  *(unsigned char *)(a7 + 16) = v18;
  *(void *)(a7 + 24) = v19;
  *(_OWORD *)(a7 + 32) = v24;
  *(unsigned char *)(a7 + 48) = v20;
  *(void *)(a7 + 56) = v21;
  *(unsigned char *)(a7 + 64) = v22;
  return result;
}

uint64_t closure #1 in LabeledContent<>.init<A, B>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in LabeledContent<>.init<A, B>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in LabeledContent<>.init<A, B>(_:value:)(*(void *)(v1 + 48), a1);
}

uint64_t LabeledContent<>.init<A>(_:value:format:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  closure #1 in LabeledContent<>.init<A>(_:value:format:)(a1, a2, a3, (uint64_t)v21);
  uint64_t v8 = v21[0];
  uint64_t v20 = v21[1];
  char v19 = v22;
  uint64_t v18 = v23;
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v13 & 1;
  *(void *)(a4 + 24) = v15;
  *(void *)(a4 + 32) = v8;
  *(void *)(a4 + 4outlined consume of Text?(0, 0, 0, 0) = v20;
  *(unsigned char *)(a4 + 48) = v19;
  *(void *)(a4 + 56) = v18;
  *(unsigned char *)(a4 + 64) = 1;
  return result;
}

uint64_t closure #1 in LabeledContent<>.init<A>(_:value:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v19 - v13, a1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  uint64_t result = Text.init<A>(_:format:)();
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v16;
  *(unsigned char *)(a4 + 16) = v17 & 1;
  *(void *)(a4 + 24) = v18;
  return result;
}

double LabeledContent<>.init<A, B>(_:value:format:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v31 = a8;
  uint64_t v17 = *(void *)(a4 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, a1, v21, v18);
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v37 = v31;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  LabeledContent<>.init<A>(_:content:)((uint64_t)v20, (uint64_t)partial apply for closure #1 in LabeledContent<>.init<A, B>(_:value:format:), (uint64_t)v32, MEMORY[0x1E4F41420], a4, (uint64_t)&v40);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a3, a5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  char v23 = v41;
  uint64_t v24 = v42;
  char v25 = v44;
  uint64_t v26 = v45;
  char v27 = v46;
  double result = *(double *)&v40;
  long long v29 = v43;
  *(_OWORD *)a9 = v40;
  *(unsigned char *)(a9 + 16) = v23;
  *(void *)(a9 + 24) = v24;
  *(_OWORD *)(a9 + 32) = v29;
  *(unsigned char *)(a9 + 48) = v25;
  *(void *)(a9 + 56) = v26;
  *(unsigned char *)(a9 + 64) = v27;
  return result;
}

uint64_t closure #1 in LabeledContent<>.init<A, B>(_:value:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v19 - v13, a1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  uint64_t result = Text.init<A>(_:format:)();
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v16;
  *(unsigned char *)(a4 + 16) = v17 & 1;
  *(void *)(a4 + 24) = v18;
  return result;
}

uint64_t partial apply for closure #1 in LabeledContent<>.init<A, B>(_:value:format:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in LabeledContent<>.init<A, B>(_:value:format:)(v1[7], v1[8], v1[3], a1);
}

void LabeledContent<>.init(_:)(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t getEnumTagSinglePayload for LabeledContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0xFD) {
    unsigned int v11 = 253;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  int v13 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_27;
  }
  uint64_t v14 = v10 + (v12 & ~v9) + 1;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v18 < 2)
    {
LABEL_27:
      if (v6 == v11) {
        return (*(uint64_t (**)(void))(v5 + 48))();
      }
      unint64_t v22 = ((unint64_t)a1 + v12) & ~v9;
      if (v8 == v11) {
        return (*(uint64_t (**)(unint64_t))(v7 + 48))(v22);
      }
      unsigned int v23 = *(unsigned __int8 *)(v22 + v10);
      BOOL v24 = v23 >= 2;
      unsigned int v25 = v23 - 2;
      if (!v24) {
        unsigned int v25 = -1;
      }
      if (v25 + 1 >= 2) {
        return v25;
      }
      else {
        return 0;
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_27;
  }
LABEL_17:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v10 + (v12 & ~v9) == -1)
  {
    int v21 = 0;
  }
  else
  {
    if (v14 <= 3) {
      int v20 = v10 + (v12 & ~v9) + 1;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v11 + (v21 | v19) + 1;
}

void storeEnumTagSinglePayload for LabeledContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0xFD) {
    unsigned int v12 = 253;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v10;
  size_t v14 = v11 + (v13 & ~v10) + 1;
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v11 + (v13 & ~v10) != -1)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x187929738);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 == v12)
        {
          unint64_t v22 = *(void (**)(void))(v6 + 56);
          v22();
        }
        else
        {
          unint64_t v23 = (unint64_t)&a1[v13] & ~v10;
          if (v9 == v12)
          {
            BOOL v24 = *(void (**)(unint64_t))(v8 + 56);
            v24(v23);
          }
          else
          {
            *(unsigned char *)(v23 + v11) = a2 + 2;
          }
        }
      }
      return;
  }
}

uint64_t sub_187929760()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of UpdateViewDestinationRequest(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of NavigationRequest?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for NavigationRequest?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of NavigationRequest?(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of NavigationRequest?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  if (a14 >> 1 != 0xFFFFFFFF)
  {
    outlined consume of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
    return swift_release();
  }
  return result;
}

uint64_t static Color.transferRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UTType?();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - v10;
  MEMORY[0x1F4188790](v12);
  size_t v14 = (char *)&v22 - v13;
  UTType.init(_identifier:allowUndeclared:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of UTType?((uint64_t)v4);
    static UTType.item.getter();
    lazy protocol witness table accessor for type Color and conformance Color();
    return DataRepresentation.init(exportedContentType:exporting:)();
  }
  else
  {
    unsigned int v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v16(v14, v4, v5);
    uint64_t v25 = a1;
    int v17 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v17(v11, v14, v5);
    v17(v8, v14, v5);
    uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
    BOOL v24 = v11;
    uint64_t v19 = (v18 + 16) & ~v18;
    uint64_t v22 = v18 | 7;
    uint64_t v23 = swift_allocObject();
    v16((char *)(v23 + v19), v8, v5);
    v17(v8, v14, v5);
    uint64_t v20 = swift_allocObject();
    v16((char *)(v20 + v19), v8, v5);
    unint64_t v21 = lazy protocol witness table accessor for type Color and conformance Color();
    MEMORY[0x18C10ABF0](v24, &async function pointer to partial apply for closure #1 in static Color.transferRepresentation.getter, v23, &async function pointer to partial apply for closure #2 in static Color.transferRepresentation.getter, v20, MEMORY[0x1E4F414E0], v21);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
}

void type metadata accessor for UTType?()
{
  if (!lazy cache variable for type metadata for UTType?)
  {
    type metadata accessor for UTType();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UTType?);
    }
  }
}

uint64_t closure #1 in static Color.transferRepresentation.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *(void *)(v2 + 32) = a2;
  *(void *)(v2 + 4outlined consume of Text?(0, 0, 0, 0) = v3;
  return MEMORY[0x1F4188298](closure #1 in static Color.transferRepresentation.getter, 0, 0);
}

uint64_t closure #1 in static Color.transferRepresentation.getter()
{
  uint64_t v1 = v0[4];
  type metadata accessor for UIColor();
  uint64_t v2 = swift_retain();
  id v3 = UIColor.init(_:)(v2);
  v0[6] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  void *v5 = v0;
  v5[1] = closure #1 in static Color.transferRepresentation.getter;
  uint64_t v6 = MEMORY[0x1E4F277C0];
  return MEMORY[0x1F4188160](v0 + 2, 0, 0, 0x6174614464616F6CLL, 0xEE00293A726F6628, partial apply for closure #1 in UIColor.loadData(for:), v4, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in static Color.transferRepresentation.getter;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in static Color.transferRepresentation.getter;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);

  id v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 48);
  swift_task_dealloc();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #2 in static Color.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return MEMORY[0x1F4188298](closure #2 in static Color.transferRepresentation.getter, 0, 0);
}

uint64_t closure #2 in static Color.transferRepresentation.getter()
{
  uint64_t v1 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v3 = UTType.identifier.getter();
  uint64_t v4 = (void *)MEMORY[0x18C115780](v3);
  swift_bridgeObjectRelease();
  v0[2] = 0;
  id v5 = objc_msgSend(v1, sel_objectWithItemProviderData_typeIdentifier_error_, isa, v4, v0 + 2);

  uint64_t v6 = (void *)v0[2];
  if (v5)
  {
    uint64_t v7 = (uint64_t *)v0[3];
    v0[2] = v5;
    type metadata accessor for UIColor();
    lazy protocol witness table accessor for type DataRepresentation<Color> and conformance DataRepresentation<A>((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
    id v8 = v6;
    *uint64_t v7 = Color.init<A>(provider:)();
  }
  else
  {
    id v10 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t closure #1 in static Color.errorRepresentation.getter()
{
  return MEMORY[0x1F4188298](closure #1 in static Color.errorRepresentation.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = type metadata accessor for TransferableError();
  lazy protocol witness table accessor for type DataRepresentation<Color> and conformance DataRepresentation<A>(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104))(v2, *MEMORY[0x1E4F248E8], v1);
  swift_willThrow();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

unint64_t lazy protocol witness table accessor for type Color and conformance Color()
{
  unint64_t result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

uint64_t sub_18792A4B4()
{
  return objectdestroyTm_8(MEMORY[0x1E4FBCEA8]);
}

uint64_t partial apply for closure #1 in static Color.transferRepresentation.getter(uint64_t *a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UTType() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in static Color.transferRepresentation.getter;
  uint64_t v7 = *a1;
  void v6[4] = v5;
  v6[5] = v7;
  return MEMORY[0x1F4188298](closure #1 in static Color.transferRepresentation.getter, 0, 0);
}

uint64_t partial apply for closure #1 in static Color.transferRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_18792A6C4()
{
  return objectdestroyTm_8(MEMORY[0x1E4FBCEA8]);
}

uint64_t partial apply for closure #2 in static Color.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(type metadata accessor for UTType() - 8);
  uint64_t v9 = v3 + ((*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  id v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *id v10 = v4;
  v10[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  _OWORD v10[5] = a3;
  v10[6] = v9;
  v10[3] = a1;
  v10[4] = a2;
  return MEMORY[0x1F4188298](closure #2 in static Color.transferRepresentation.getter, 0, 0);
}

uint64_t associated type witness table accessor for Transferable.Representation : TransferRepresentation in Color()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18792A7F8()
{
  return lazy protocol witness table accessor for type DataRepresentation<Color> and conformance DataRepresentation<A>(&lazy protocol witness table cache variable for type DataRepresentation<Color> and conformance DataRepresentation<A>, (void (*)(uint64_t))type metadata accessor for DataRepresentation<Color>);
}

void type metadata accessor for DataRepresentation<Color>()
{
  if (!lazy cache variable for type metadata for DataRepresentation<Color>)
  {
    lazy protocol witness table accessor for type Color and conformance Color();
    unint64_t v0 = type metadata accessor for DataRepresentation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DataRepresentation<Color>);
    }
  }
}

void closure #1 in UIColor.loadData(for:)(uint64_t a1, void *a2)
{
  type metadata accessor for CheckedContinuation<Data, Error>();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = UTType.identifier.getter();
  uint64_t v9 = (void *)MEMORY[0x18C115780](v8);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = partial apply for closure #1 in closure #1 in UIColor.loadData(for:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Data?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_15;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  id v13 = objc_msgSend(a2, sel_loadDataWithTypeIdentifier_forItemProviderCompletionHandler_, v9, v12);
  _Block_release(v12);
}

void partial apply for closure #1 in UIColor.loadData(for:)(uint64_t a1)
{
  closure #1 in UIColor.loadData(for:)(a1, *(void **)(v1 + 16));
}

void type metadata accessor for CheckedContinuation<Data, Error>()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<Data, Error>)
  {
    type metadata accessor for Error();
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<Data, Error>);
    }
  }
}

uint64_t closure #1 in closure #1 in UIColor.loadData(for:)(uint64_t a1, unint64_t a2, id a3)
{
  if (a2 >> 60 == 15)
  {
    if (!a3)
    {
      uint64_t v5 = type metadata accessor for TransferableError();
      lazy protocol witness table accessor for type DataRepresentation<Color> and conformance DataRepresentation<A>(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, *MEMORY[0x1E4F248E8], v5);
    }
    id v7 = a3;
    type metadata accessor for CheckedContinuation<Data, Error>();
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    outlined copy of Data._Representation(a1, a2);
    type metadata accessor for CheckedContinuation<Data, Error>();
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_18792AC04()
{
  return objectdestroyTm_8((uint64_t (*)(void))type metadata accessor for CheckedContinuation<Data, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in UIColor.loadData(for:)(uint64_t a1, unint64_t a2, void *a3)
{
  type metadata accessor for CheckedContinuation<Data, Error>();

  return closure #1 in closure #1 in UIColor.loadData(for:)(a1, a2, a3);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Data?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  outlined consume of Data?((uint64_t)v4, v8);

  return swift_release();
}

uint64_t lazy protocol witness table accessor for type DataRepresentation<Color> and conformance DataRepresentation<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _UIHostingView.init(rootView:)()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70)) = 0;
  *((unsigned char *)v0 + *(void *)((*v2 & *v0) + 0x78)) = 0;
  *((unsigned char *)v0 + *(void *)((*v2 & *v0) + 0x80)) = 1;
  *(_DWORD *)((char *)v0 + *(void *)((*v2 & *v0) + 0x88)) = 0;
  uint64_t v3 = (char *)v0 + *(void *)((*v2 & *v0) + 0x90);
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v3[32] = 1;
  uint64_t v4 = (char *)v0 + *(void *)((*v2 & *v0) + 0x98);
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  *(_DWORD *)((char *)v0 + *(void *)((*v2 & *v0) + 0xA0)) = 0;
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xA8)) = 0;
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xB0)) = 0;
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xC8)) = 0;
  *((unsigned char *)v0 + *(void *)((*v2 & *v0) + 0xD8)) = 2;
  uint64_t v5 = *(void *)((*v2 & *v0) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<EmptyView, Alert.Presentation>();
  id v7 = objc_allocWithZone(v6);
  unint64_t v8 = v0;
  *(void *)((char *)v0 + v5) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<EmptyView, Alert.Presentation>);
  uint64_t v9 = *(void *)((*v2 & *v8) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>();
  id v11 = objc_allocWithZone(v10);
  *(void *)((char *)v8 + v9) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>);
  *(void *)((char *)v8 + *(void *)((*v2 & *v8) + 0xF0)) = 1;
  uint64_t v12 = *(void *)((*v2 & *v8) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v14 = MEMORY[0x1E4FBC860];
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v13 + 48) = 0;
  *(void *)(v13 + 56) = v14;
  *(void *)(v13 + 64) = v15;
  EnvironmentValues.init()();
  *(_OWORD *)(v13 + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(void *)(v13 + 136) = 1;
  *(_DWORD *)(v13 + 144) = 0;
  swift_weakInit();
  *(void *)(v13 + 16outlined consume of Text?(0, 0, 0, 0) = 0;
  *(void *)(v13 + 168) = 0;
  *(_WORD *)(v13 + 176) = 1;
  *(void *)((char *)v8 + v12) = v13;
  uint64_t v16 = *(void *)((*v2 & *v8) + 0x100);
  uint64_t v17 = MEMORY[0x1E4F417F8];
  uint64_t v18 = MEMORY[0x1E4F417F0];
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for DragAndDropBridge<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v8 + v16) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v8 + *(void *)((*v2 & *v8) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v2 & *v8) + 0x110);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for TooltipBridge<EmptyView>, v17, v18, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v8 + v2outlined consume of Text?(0, 0, 0, 0) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v2 & *v8) + 0x118);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for EditMenuBridge<EmptyView>, v17, v18, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v8 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v8 + *(void *)((*v2 & *v8) + 0x120)) = 0;
  *(void *)((char *)v8 + *(void *)((*v2 & *v8) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v2 & *v8) + 0x130);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<EmptyView>, v17, v18, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v14;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v8 + v24) = v25;
  uint64_t v26 = v2;
  swift_weakInit();
  *(void *)((char *)v8 + *(void *)((*v2 & *v8) + 0x140)) = 0;
  uint64_t v27 = *(void *)((*v2 & *v8) + 0x148);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<EmptyView>, v17, v18, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v8 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  uint64_t v29 = *(void *)((*v2 & *v8) + 0x150);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for PencilEventsBridge<EmptyView>, v17, v18, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v8 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(void *)((char *)v8 + *(void *)((*v2 & *v8) + 0x158)) = 0;
  uint64_t v31 = *(void *)((*v2 & *v8) + 0x160);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<EmptyView>, v17, v18, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v33 = MEMORY[0x1E4FBC860];
  *(void *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v8 + v31) = v32;
  uint64_t v34 = *(void *)((*v26 & *v8) + 0x168);
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for ContextMenuBridge<EmptyView>, v17, v18, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v8 + v34) = objc_msgSend(objc_allocWithZone(v35), sel_init);
  *((unsigned char *)v8 + *(void *)((*v26 & *v8) + 0x170)) = 0;
  uint64_t v36 = *(void *)((*v26 & *v8) + 0x178);
  *(void *)((char *)v8 + v36) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x180)) = 0;
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x188)) = 0;
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x190)) = 0;
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x1A0)) = 0;
  uint64_t v37 = (char *)v8 + *(void *)((*v26 & *v8) + 0x1A8);
  *(void *)uint64_t v37 = 0;
  v37[8] = 0;
  *((_DWORD *)v37 + 3) = 0;
  uint64_t v38 = (void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x1B0));
  unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  *uint64_t v38 = 0;
  v38[1] = v39;
  uint64_t v40 = MEMORY[0x1E4FBC868];
  v38[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v8 + *(void *)((*v26 & *v8) + 0x1B8)) = 0;
  *((unsigned char *)v8 + *(void *)((*v26 & *v8) + 0x1C0)) = 0;
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x1C8)) = 0;
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x1D0)) = 0;
  *((unsigned char *)v8 + *(void *)((*v26 & *v8) + 0x1D8)) = 0;
  uint64_t v41 = MEMORY[0x18C113CA0]();
  uint64_t v42 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v147, v41);
  if ((v147 & 1) == 0)
  {
    if ((v147 & 2) != 0)
    {
      uint64_t v43 = 2;
      if ((v147 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v43 = 0;
      if ((v147 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v147 & 2) == 0)
  {
    uint64_t v43 = 1;
    if ((v147 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v43 = 3;
  if ((v147 & 4) != 0) {
LABEL_7:
  }
    v43 |= 4uLL;
LABEL_8:
  if ((v147 & 0x10) != 0) {
    v43 |= 8uLL;
  }
  if ((v147 & 0x20) != 0) {
    v43 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v42)) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = v43 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v44, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v45 = swift_retain_n();
  *(void *)&long long v147 = specialized FocusViewGraph.init(graph:)(v45);
  *((void *)&v147 + 1) = v46;
  uint64_t v148 = v47;
  LOWORD(v149) = v48 & 0x101;
  BYTE2(v149) = v49 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v147) = 0;
  *(void *)&long long v147 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>.EnableVFDFeature, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<EmptyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  uint64_t v50 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v148 = 0;
  long long v147 = 0uLL;
  LOBYTE(v149) = 0;
  unint64_t v150 = 0;
  unint64_t v151 = v51;
  uint64_t v152 = v40;
  char v153 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v51);
  unint64_t v52 = specialized Dictionary.init(dictionaryLiteral:)(v50);
  uint64_t v149 = &type metadata for HoverEventDispatcher;
  unint64_t v150 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&long long v147 = v52;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  uint64_t v149 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v150 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  uint64_t v149 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v150 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(v50);
  uint64_t v149 = &type metadata for KeyEventDispatcher;
  unint64_t v150 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&long long v147 = v53;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v8 + *(void *)((*v26 & *v8) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  uint64_t v54 = MEMORY[0x1E4F417F8];
  uint64_t v55 = MEMORY[0x1E4F417F0];
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v146.receiver = v8;
  v146.super_class = v56;
  uint64_t v57 = objc_msgSendSuper2(&v146, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>.HostViewGraph, v54, v55, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<EmptyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v58 = outlined destroy of _UIHostingView<EmptyView>.HostViewGraph((uint64_t)&v147);
  (*(void (**)(uint64_t))((*v26 & *v57) + 0x500))(v58);
  size_t v59 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v59 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v60 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v61 = *((void *)&static RepresentableContextValues.current + 1);
    long long v62 = xmmword_1EB2E8DA0;
    char v63 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v64 = swift_retain();
      outlined copy of RepresentableContextValues?(v64, v61, v62, *((uint64_t *)&v62 + 1), v63);
      uint64_t v65 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v65 && (swift_release(), v60 == v65))
      {
        uint64_t v66 = swift_release();
        if (v63) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v66 = swift_release();
        if (v63)
        {
LABEL_25:
          MEMORY[0x1F4188790](v66);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v62, *((uint64_t *)&v62 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v60, v61, v62, *((uint64_t *)&v62 + 1), v63);
          uint64_t v67 = *((void *)&v147 + 1);
          uint64_t v68 = v147;
LABEL_32:
          uint64_t v69 = *(void *)((char *)v57 + *(void *)((*v26 & *v57) + 0x68));
          uint64_t v70 = *(void *)(v69 + 120);
          *(void *)(v69 + 12outlined consume of Text?(0, 0, 0, 0) = v68;
          *(void *)(v69 + 128) = v67;
          outlined consume of EnvironmentValues?(v70);
          outlined consume of RepresentableContextValues?(v60, v61, v62, *((uint64_t *)&v62 + 1), v63);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v66 = outlined copy of RepresentableContextValues.EnvironmentStorage(v62, *((uint64_t *)&v62 + 1), v63 & 1);
      if (v63) {
        goto LABEL_25;
      }
    }
    long long v147 = v62;
    swift_retain();
    swift_retain();
    uint64_t v67 = *((void *)&v62 + 1);
    uint64_t v68 = v62;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v71 = *(void *)((char *)v57 + *(void *)((*v26 & *v57) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v72 = (char **)(v71 + 24);
  swift_beginAccess();
  uint64_t v73 = *(char **)(v71 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v71 + 24) = v73;
  uint64_t v75 = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v73 + 2) + 1, 1, v73);
    *uint64_t v72 = v73;
  }
  unint64_t v77 = *((void *)v73 + 2);
  unint64_t v76 = *((void *)v73 + 3);
  if (v77 >= v76 >> 1)
  {
    uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v73);
    *uint64_t v72 = v73;
  }
  *((void *)v73 + 2) = v77 + 1;
  uint64_t v78 = &v73[24 * v77];
  *((void *)v78 + 4) = &type metadata for StatusBarKey;
  *((void *)v78 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  uint64_t v79 = *(void *)((*v75 & *v57) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v80 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v81 = v80;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  double v82 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v83 = v82;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    uint64_t v85 = v84;
    swift_unknownObjectWeakAssign();
  }
  long long v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    uint64_t v87 = v86;
    int v88 = *(void (**)(uint64_t))((*v75 & *v86) + 0x1F0);
    uint64_t v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  uint64_t v90 = *(void *)((char *)v57 + *(void *)((*v75 & *v57) + 0xF8));
  unint64_t v91 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>();
  *(void *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v90 + 4outlined consume of Text?(0, 0, 0, 0) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v92 = FocusBridge.host.getter();
  if (v92)
  {
    long long v94 = (void *)v92;
    uint64_t v95 = v93;
    uint64_t v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  long long v97 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x100));
  uint64_t v98 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v98);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v100 = (void *)result;
  uint64_t v101 = swift_getObjectType();
  swift_retain();
  id v102 = v97;

  if ((*(uint64_t (**)(uint64_t))(v101 + 1208))(v103))
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  int v104 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v105 = v104;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v106 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v107 = v106;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v108 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v109 = v108;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v110 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x148));
  uint64_t v111 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v111);
  if (!result) {
    goto LABEL_70;
  }
  uint64_t v112 = (void *)result;
  id v113 = v110;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v114 = objc_msgSend(v57, sel_traitCollection, 0);
  id v115 = objc_msgSend(v114, sel_userInterfaceIdiom);

  if (v115 == (id)1
    || (id v116 = objc_msgSend(v57, sel_traitCollection),
        id v117 = objc_msgSend(v116, sel_userInterfaceIdiom),
        v116,
        v117 == (id)6))
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for PointerBridge<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    id v119 = objc_msgSend(objc_allocWithZone(v118), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v120 = *(void *)((*v75 & *v57) + 0x158);
    uint64_t v121 = *(void **)((char *)v57 + v120);
    *(void *)((char *)v57 + v12outlined consume of Text?(0, 0, 0, 0) = v119;
  }
  uint64_t v122 = *(char **)((char *)v57 + v79);
  uint64_t result = MEMORY[0x18C119DF0](&v122[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v123 = (void *)result;
  uint64_t v124 = swift_getObjectType();
  swift_retain();
  uint64_t v125 = v122;

  if ((*(uint64_t (**)(void))(v124 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  __int16 v126 = *(char **)((char *)v57 + *(void *)((*v75 & *v57) + 0x178));
  *(void *)&v126[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>();
  uint64_t v127 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v127);
  swift_retain();
  char v128 = v126;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v129 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  unint64_t v130 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v129 + 24) = v130;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v131 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v132 = *(void *)((*v75 & *v57) + 0xD0);
  swift_beginAccess();
  *(void *)(v131 + 4outlined consume of Text?(0, 0, 0, 0) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v133 = *(void *)((char *)v57 + v132);
  uint64_t v134 = *(void *)(v133 + 48);
  if (v134)
  {
    long long v135 = v57;
    swift_retain();
    objc_msgSend(v135, sel_addGestureRecognizer_, v134);
  }
  else
  {
    long long v136 = v57;
    swift_retain();
  }
  objc_msgSend(v57, sel_addGestureRecognizer_, *(void *)(v133 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v137 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v138 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v139 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v139)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v139; ++i)
    {
      uint64_t v141 = *(void *)(v138 + 8 * i + 32);
      objc_msgSend(v137, sel_addObserver_selector_name_object_, v57, sel_accessibilityBooleanDidChange_, v141, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v137, sel_addObserver_selector_name_object_, v57, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v142 = one-time initialization token for didUpdateListLayout;
  uint64_t v143 = v57;
  if (v142 != -1) {
    swift_once();
  }
  objc_msgSend(v137, sel_addObserver_selector_name_object_, v143, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v144 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v144, (uint64_t)v145);
  v145[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v145, (uint64_t)v143);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v143;
}

void *specialized _UIHostingView.base.getter()
{
  return specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>);
}

{
  return specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
}

id specialized _UIHostingView.sheetBridge.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0);
  uint64_t v2 = *(void **)((char *)v0 + v1);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    uint64_t ObjectType = swift_getObjectType();
    id v3 = specialized closure #1 in _UIHostingView.sheetBridge.getter(ObjectType, (uint64_t)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, EmptyModifier>, SheetPreference.Key>, (uint64_t)type metadata accessor for SheetBridge, (uint64_t (*)(void, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>);
    uint64_t v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v3;
    id v6 = v3;
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v5);
  }
  outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(v2);
  return v3;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t ObjectType;
  void *v5;
  id v6;

  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0);
  uint64_t v2 = *(void **)((char *)v0 + v1);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    uint64_t ObjectType = swift_getObjectType();
    id v3 = specialized closure #1 in _UIHostingView.sheetBridge.getter(ObjectType, (uint64_t)&lazy cache variable for type metadata for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>, (uint64_t)type metadata accessor for SheetBridge, (uint64_t (*)(void, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>);
    uint64_t v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v3;
    id v6 = v3;
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v5);
  }
  outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(v2);
  return v3;
}

void *_IntelligenceSupport.SummarySymbolHost.__allocating_init(rootView:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  id v6 = (void *)specialized _UIHostingView.init(rootView:)(*(unsigned char *)a1, v4, v5);

  id v7 = (void *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0xB8));
  swift_beginAccess();
  uint64_t v8 = *v7;
  *id v7 = 0;
  if (v8)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
    uint64_t v9 = v6;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return v6;
}

uint64_t @objc _IntelligenceSupport.SummarySymbolHost.isOn.getter(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60);
  swift_beginAccess();
  return *v1;
}

uint64_t _IntelligenceSupport.SummarySymbolHost.isOn.getter()
{
  uint64_t v1 = (unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60);
  swift_beginAccess();
  return *v1;
}

void @objc _IntelligenceSupport.SummarySymbolHost.isOn.setter(void *a1, uint64_t a2, char a3)
{
  uint64_t v5 = (char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60);
  swift_beginAccess();
  id v6 = (void *)*((void *)v5 + 1);
  id v7 = (void *)*((void *)v5 + 2);
  char *v5 = a3;
  uint64_t v8 = a1;
  id v9 = v6;
  id v10 = v7;
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

void _IntelligenceSupport.SummarySymbolHost.isOn.setter(char a1)
{
  id v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  uint64_t v4 = (void *)*((void *)v3 + 1);
  uint64_t v5 = (void *)*((void *)v3 + 2);
  *id v3 = a1;
  id v6 = v4;
  id v7 = v5;
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

void key path setter for _IntelligenceSupport.SummarySymbolHost.isOn : _IntelligenceSupport.SummarySymbolHost(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)*a2) + 0x60);
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 8);
  uint64_t v5 = *(void **)(v3 + 16);
  *(unsigned char *)uint64_t v3 = v2;
  id v6 = v4;
  id v7 = v5;
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

void (*_IntelligenceSupport.SummarySymbolHost.isOn.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  v3[4] = v4;
  uint64_t v5 = (char *)v1 + v4;
  swift_beginAccess();
  *((unsigned char *)v3 + 4outlined consume of Text?(0, 0, 0, 0) = *v5;
  return _IntelligenceSupport.SummarySymbolHost.isOn.modify;
}

void _IntelligenceSupport.SummarySymbolHost.isOn.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24) + *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void **)(v2 + 8);
  uint64_t v4 = *(void **)(v2 + 16);
  *(unsigned char *)uint64_t v2 = *(unsigned char *)(*(void *)a1 + 40);
  id v5 = v3;
  id v6 = v4;
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  free(v1);
}

id @objc _IntelligenceSupport.SummarySymbolHost.font.getter(uint64_t a1, uint64_t a2)
{
  return @objc _IntelligenceSupport.SummarySymbolHost.font.getter(a1, a2, MEMORY[0x1E4F40700]);
}

uint64_t _IntelligenceSupport.SummarySymbolHost.font.getter()
{
  return _IntelligenceSupport.SummarySymbolHost.font.getter(MEMORY[0x1E4F40700]);
}

void @objc _IntelligenceSupport.SummarySymbolHost.font.setter(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v4 = a1;
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(v5, MEMORY[0x1E4F40708]);
}

void _IntelligenceSupport.SummarySymbolHost.font.setter(void *a1)
{
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(a1, MEMORY[0x1E4F40708]);
}

void (*_IntelligenceSupport.SummarySymbolHost.font.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  v3[3] = _IntelligenceSupport.AnimatingSummarySymbol.font.getter();
  return _IntelligenceSupport.SummarySymbolHost.font.modify;
}

void _IntelligenceSupport.SummarySymbolHost.font.modify(uint64_t a1, char a2)
{
}

id @objc _IntelligenceSupport.SummarySymbolHost.foregroundColor.getter(uint64_t a1, uint64_t a2)
{
  return @objc _IntelligenceSupport.SummarySymbolHost.font.getter(a1, a2, MEMORY[0x1E4F40710]);
}

id @objc _IntelligenceSupport.SummarySymbolHost.font.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = swift_beginAccess();
  id v5 = (void *)a3(v4);

  return v5;
}

uint64_t _IntelligenceSupport.SummarySymbolHost.foregroundColor.getter()
{
  return _IntelligenceSupport.SummarySymbolHost.font.getter(MEMORY[0x1E4F40710]);
}

uint64_t _IntelligenceSupport.SummarySymbolHost.font.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = swift_beginAccess();
  return a1(v2);
}

void @objc _IntelligenceSupport.SummarySymbolHost.foregroundColor.setter(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v4 = a1;
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(v5, MEMORY[0x1E4F40718]);
}

void _IntelligenceSupport.SummarySymbolHost.foregroundColor.setter(void *a1)
{
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(a1, MEMORY[0x1E4F40718]);
}

uint64_t key path getter for _IntelligenceSupport.SummarySymbolHost.font : _IntelligenceSupport.SummarySymbolHost@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4 = swift_beginAccess();
  uint64_t result = a1(v4);
  *a2 = result;
  return result;
}

void (*_IntelligenceSupport.SummarySymbolHost.foregroundColor.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  v3[3] = _IntelligenceSupport.AnimatingSummarySymbol.color.getter();
  return _IntelligenceSupport.SummarySymbolHost.foregroundColor.modify;
}

void _IntelligenceSupport.SummarySymbolHost.foregroundColor.modify(uint64_t a1, char a2)
{
}

void _IntelligenceSupport.SummarySymbolHost.font.modify(uint64_t a1, char a2, void (*a3)(id))
{
  uint64_t v4 = *(void **)a1;
  id v6 = (id *)(*(void *)a1 + 24);
  id v5 = *v6;
  id v7 = (char *)(*(void *)(*(void *)a1 + 32) + *(void *)(*(void *)a1 + 40));
  if (a2)
  {
    uint64_t v8 = (void *)*((void *)v7 + 1);
    id v9 = (void *)*((void *)v7 + 2);
    char v26 = *v7;
    Class v28 = v9;
    id v10 = v5;
    id v11 = v8;
    id v12 = v9;
    a3(v10);
    uint64_t v13 = (void *)*((void *)v7 + 1);
    uint64_t v14 = (void *)*((void *)v7 + 2);
    *id v7 = v26;
    *((void *)v7 + 1) = v8;
    *((void *)v7 + 2) = v28;
    id v15 = v8;
    id v16 = v28;

    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  else
  {
    uint64_t v17 = (void *)*((void *)v7 + 1);
    uint64_t v18 = (void *)*((void *)v7 + 2);
    char v27 = *v7;
    uint64_t v29 = v18;
    id v19 = v5;
    id v20 = v17;
    id v21 = v18;
    a3(v19);
    uint64_t v22 = (void *)*((void *)v7 + 1);
    Class v23 = (void *)*((void *)v7 + 2);
    *id v7 = v27;
    *((void *)v7 + 1) = v17;
    *((void *)v7 + 2) = v29;
    id v24 = v17;
    id v25 = v29;

    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }

  free(v4);
}

double @objc _IntelligenceSupport.SummarySymbolHost.baseline.getter(void *a1)
{
  id v1 = a1;
  static VerticalAlignment.firstTextBaseline.getter();
  objc_msgSend(v1, sel_bounds);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.alignment(of:at:)();
  double v3 = v2;

  return v3;
}

uint64_t _IntelligenceSupport.SummarySymbolHost.baseline.getter()
{
  static VerticalAlignment.firstTextBaseline.getter();
  objc_msgSend(v0, sel_bounds);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();

  return ViewRendererHost.alignment(of:at:)();
}

id _IntelligenceSupport.SummarySymbolHost.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void _IntelligenceSupport.SummarySymbolHost.init(coder:)()
{
}

void @objc _IntelligenceSupport.SummarySymbolHost.init(coder:)()
{
}

void *_IntelligenceSupport.SummarySymbolHost.init(rootView:)(uint64_t a1)
{
  id v1 = *(void **)(a1 + 8);
  double v2 = *(void **)(a1 + 16);
  id v3 = (void *)specialized _UIHostingView.init(rootView:)(*(unsigned char *)a1, v1, v2);

  uint64_t v4 = (void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xB8));
  swift_beginAccess();
  uint64_t v5 = *v4;
  *uint64_t v4 = 0;
  if (v5)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
    id v6 = v3;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return v3;
}

id _IntelligenceSupport.SummarySymbolHost.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _IntelligenceSupport.SummarySymbolHost();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized UIHostingViewBase.init<A>(rootViewType:options:)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(void))
{
  swift_unknownObjectWeakInit();
  *(void *)(v5 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v5 + 48) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for UIViewPlatformViewDefinition();
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(void *)(v5 + 72) = DisplayList.ViewRenderer.init(platform:)();
  type metadata accessor for EventBindingManager();
  *(void *)(v5 + 8outlined consume of Text?(0, 0, 0, 0) = EventBindingManager.__allocating_init()();
  *(void *)(v5 + 88) = 0;
  static ViewRendererHostProperties.all.getter();
  *(unsigned char *)(v5 + 98) = 0;
  *(void *)(v5 + 104) = 0;
  *(_DWORD *)(v5 + 112) = 0;
  *(unsigned char *)(v5 + 116) = 1;
  *(_OWORD *)(v5 + 12outlined consume of Text?(0, 0, 0, 0) = xmmword_18834FC50;
  *(_OWORD *)(v5 + 136) = xmmword_18834FC50;
  *(void *)(v5 + 152) = 1;
  *(_OWORD *)(v5 + 16outlined consume of Text?(0, 0, 0, 0) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(void *)(v5 + 192) = 0;
  *(unsigned char *)(v5 + 20outlined consume of Text?(0, 0, 0, 0) = 1;
  *(void *)(v5 + 208) = 0;
  *(unsigned char *)(v5 + 216) = 1;
  *(void *)(v5 + 232) = 0;
  *(void *)(v5 + 217) = 0;
  *(unsigned char *)(v5 + 225) = 0;
  *(_WORD *)(v5 + 24outlined consume of Text?(0, 0, 0, 0) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, a2, a3);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(a4, a2, a3, a5);
  uint64_t v11 = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = v11;
  return v5;
}

id specialized DeprecatedAlertBridge.init(style:)(uint64_t a1)
{
  id v3 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakInit();
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  uint64_t v4 = v1;
  EnvironmentValues.init()();
  uint64_t v5 = (char *)v4 + *(void *)((*v3 & *v4) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((void *)v5 + 2outlined consume of Text?(0, 0, 0, 0) = 0;
  *((unsigned char *)v4 + *(void *)((*v3 & *v4) + 0xA0)) = 0;
  *(void *)((char *)v4 + *(void *)((*v3 & *v4) + 0xA8)) = a1;

  type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, ActionSheet.Presentation>, (uint64_t)&type metadata for ActionSheet.Presentation, (uint64_t)&protocol witness table for ActionSheet.Presentation, (uint64_t (*)(uint64_t, void *))type metadata accessor for DeprecatedAlertBridge);
  v8.receiver = v4;
  v8.super_class = v6;
  return objc_msgSendSuper2(&v8, sel_init);
}

{
  void *v1;
  void *v3;
  void *v4;
  char *v5;
  objc_class *v6;
  objc_super v8;

  id v3 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakInit();
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  uint64_t v4 = v1;
  EnvironmentValues.init()();
  uint64_t v5 = (char *)v4 + *(void *)((*v3 & *v4) + 0x98);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 1outlined consume of Text?(0, 0, 0, 0) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((_OWORD *)v5 + 14) = 0u;
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((void *)v5 + 34) = 0;
  *((unsigned char *)v4 + *(void *)((*v3 & *v4) + 0xA0)) = 0;
  *(void *)((char *)v4 + *(void *)((*v3 & *v4) + 0xA8)) = a1;

  type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>, (uint64_t)&type metadata for Alert.Presentation, (uint64_t)&protocol witness table for Alert.Presentation, (uint64_t (*)(uint64_t, void *))type metadata accessor for DeprecatedAlertBridge);
  v8.receiver = v4;
  v8.super_class = v6;
  return objc_msgSendSuper2(&v8, sel_init);
}

id specialized DeprecatedAlertBridge.init(style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))
{
  id v9 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakInit();
  *((unsigned char *)v4 + *(void *)((*v9 & *v4) + 0x78)) = 0;
  *(_DWORD *)((char *)v4 + *(void *)((*v9 & *v4) + 0x80)) = 0;
  *(void *)((char *)v4 + *(void *)((*v9 & *v4) + 0x88)) = 0;
  id v10 = v4;
  EnvironmentValues.init()();
  uint64_t v11 = (char *)v10 + *(void *)((*v9 & *v10) + 0x98);
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 9) = 0u;
  *((void *)v11 + 2outlined consume of Text?(0, 0, 0, 0) = 0;
  *((unsigned char *)v10 + *(void *)((*v9 & *v10) + 0xA0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v9 & *v10) + 0xA8)) = a1;

  v13.receiver = v10;
  v13.super_class = (Class)a4(0, a2, &type metadata for ActionSheet.Presentation, &protocol witness table for ActionSheet.Presentation, a3);
  return objc_msgSendSuper2(&v13, sel_init);
}

{
  void *v4;
  void *v9;
  void *v10;
  char *v11;
  objc_super v13;

  id v9 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakInit();
  *((unsigned char *)v4 + *(void *)((*v9 & *v4) + 0x78)) = 0;
  *(_DWORD *)((char *)v4 + *(void *)((*v9 & *v4) + 0x80)) = 0;
  *(void *)((char *)v4 + *(void *)((*v9 & *v4) + 0x88)) = 0;
  id v10 = v4;
  EnvironmentValues.init()();
  uint64_t v11 = (char *)v10 + *(void *)((*v9 & *v10) + 0x98);
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 9) = 0u;
  *((_OWORD *)v11 + 1outlined consume of Text?(0, 0, 0, 0) = 0u;
  *((_OWORD *)v11 + 11) = 0u;
  *((_OWORD *)v11 + 12) = 0u;
  *((_OWORD *)v11 + 13) = 0u;
  *((_OWORD *)v11 + 14) = 0u;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((void *)v11 + 34) = 0;
  *((unsigned char *)v10 + *(void *)((*v9 & *v10) + 0xA0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v9 & *v10) + 0xA8)) = a1;

  v13.receiver = v10;
  v13.super_class = (Class)a4(0, a2, &type metadata for Alert.Presentation, &protocol witness table for Alert.Presentation, a3);
  return objc_msgSendSuper2(&v13, sel_init);
}

id specialized closure #1 in _UIHostingView.sheetBridge.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))
{
  if ((*(uint64_t (**)(void))(a1 + 1200))()) {
    return 0;
  }
  else {
    return objc_msgSend(objc_allocWithZone((Class)a4(0, a2, &type metadata for SheetPreference.Key, &protocol witness table for SheetPreference.Key, a3)), sel_init);
  }
}

uint64_t specialized _UIHostingView.init(rootView:)(uint64_t a1, char a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x70)) = 0;
  *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0x78)) = 0;
  *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0x80)) = 1;
  *(_DWORD *)((char *)v2 + *(void *)((*v4 & *v2) + 0x88)) = 0;
  uint64_t v5 = (char *)v2 + *(void *)((*v4 & *v2) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  id v6 = (char *)v2 + *(void *)((*v4 & *v2) + 0x98);
  *(_OWORD *)id v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v2 + *(void *)((*v4 & *v2) + 0xA0)) = 0;
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xA8)) = 0;
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xB0)) = 0;
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xC8)) = 0;
  *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v2) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  id v10 = v2;
  *(void *)((char *)v2 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 16outlined consume of Text?(0, 0, 0, 0) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for DragAndDropBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for TooltipBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v10 + v2outlined consume of Text?(0, 0, 0, 0) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for EditMenuBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  char v26 = v4;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v27 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v10 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  uint64_t v29 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PencilEventsBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v10 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v31 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v33 = MEMORY[0x1E4FBC860];
  *(void *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)((char *)v10 + v31) = v32;
  uint64_t v34 = *(void *)((*v26 & *v10) + 0x168);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for ContextMenuBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone(v35), sel_init);
  *((unsigned char *)v10 + *(void *)((*v26 & *v10) + 0x170)) = 0;
  uint64_t v36 = *(void *)((*v26 & *v10) + 0x178);
  *(void *)((char *)v10 + v36) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x1A0)) = 0;
  uint64_t v37 = (char *)v10 + *(void *)((*v26 & *v10) + 0x1A8);
  *(void *)uint64_t v37 = 0;
  v37[8] = 0;
  *((_DWORD *)v37 + 3) = 0;
  uint64_t v38 = (void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x1B0));
  unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  *uint64_t v38 = 0;
  v38[1] = v39;
  uint64_t v40 = MEMORY[0x1E4FBC868];
  v38[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v26 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v26 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v26 & *v10) + 0x1D8)) = 0;
  uint64_t v41 = (char *)v10 + *(void *)((*v26 & *v10) + 0x60);
  *(void *)uint64_t v41 = a1;
  _OWORD v41[8] = a2;
  uint64_t v42 = swift_retain();
  uint64_t v43 = MEMORY[0x18C113CA0](v42);
  uint64_t v44 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v148, v43);
  if ((v148 & 1) == 0)
  {
    if ((v148 & 2) != 0)
    {
      uint64_t v45 = 2;
      if ((v148 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v45 = 0;
      if ((v148 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v148 & 2) == 0)
  {
    uint64_t v45 = 1;
    if ((v148 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v45 = 3;
  if ((v148 & 4) != 0) {
LABEL_7:
  }
    v45 |= 4uLL;
LABEL_8:
  if ((v148 & 0x10) != 0) {
    v45 |= 8uLL;
  }
  if ((v148 & 0x20) != 0) {
    v45 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v44)) {
    uint64_t v46 = v45;
  }
  else {
    uint64_t v46 = v45 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v46, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v47 = swift_retain_n();
  *(void *)&long long v148 = specialized FocusViewGraph.init(graph:)(v47);
  *((void *)&v148 + 1) = v48;
  uint64_t v149 = v49;
  LOWORD(v15outlined consume of Text?(0, 0, 0, 0) = v50 & 0x101;
  BYTE2(v15outlined consume of Text?(0, 0, 0, 0) = v51 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v148) = 0;
  *(void *)&long long v148 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v52 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v149 = 0;
  long long v148 = 0uLL;
  LOBYTE(v15outlined consume of Text?(0, 0, 0, 0) = 0;
  unint64_t v151 = 0;
  unint64_t v152 = v53;
  uint64_t v153 = v40;
  char v154 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v53);
  unint64_t v54 = specialized Dictionary.init(dictionaryLiteral:)(v52);
  unint64_t v150 = &type metadata for HoverEventDispatcher;
  unint64_t v151 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&long long v148 = v54;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  unint64_t v150 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v151 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  unint64_t v150 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v151 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  unint64_t v55 = specialized Dictionary.init(dictionaryLiteral:)(v52);
  unint64_t v150 = &type metadata for KeyEventDispatcher;
  unint64_t v151 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&long long v148 = v55;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v26 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v147.receiver = v10;
  v147.super_class = v56;
  uint64_t v57 = objc_msgSendSuper2(&v147, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v58 = outlined destroy of _UIHostingView<BridgedPresentation.RootView>.HostViewGraph((uint64_t)&v148);
  (*(void (**)(uint64_t))((*v26 & *v57) + 0x500))(v58);
  size_t v59 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v59 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v60 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v61 = *((void *)&static RepresentableContextValues.current + 1);
    long long v62 = xmmword_1EB2E8DA0;
    char v63 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v64 = swift_retain();
      outlined copy of RepresentableContextValues?(v64, v61, v62, *((uint64_t *)&v62 + 1), v63);
      uint64_t v65 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v65 && (swift_release(), v60 == v65))
      {
        uint64_t v66 = swift_release();
        if (v63) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v66 = swift_release();
        if (v63)
        {
LABEL_25:
          MEMORY[0x1F4188790](v66);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v62, *((uint64_t *)&v62 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v60, v61, v62, *((uint64_t *)&v62 + 1), v63);
          uint64_t v67 = *((void *)&v148 + 1);
          uint64_t v68 = v148;
LABEL_32:
          uint64_t v69 = *(void *)((char *)v57 + *(void *)((*v26 & *v57) + 0x68));
          uint64_t v70 = *(void *)(v69 + 120);
          *(void *)(v69 + 12outlined consume of Text?(0, 0, 0, 0) = v68;
          *(void *)(v69 + 128) = v67;
          outlined consume of EnvironmentValues?(v70);
          outlined consume of RepresentableContextValues?(v60, v61, v62, *((uint64_t *)&v62 + 1), v63);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v66 = outlined copy of RepresentableContextValues.EnvironmentStorage(v62, *((uint64_t *)&v62 + 1), v63 & 1);
      if (v63) {
        goto LABEL_25;
      }
    }
    long long v148 = v62;
    swift_retain();
    swift_retain();
    uint64_t v67 = *((void *)&v62 + 1);
    uint64_t v68 = v62;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v71 = *(void *)((char *)v57 + *(void *)((*v26 & *v57) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v72 = (char **)(v71 + 24);
  swift_beginAccess();
  uint64_t v73 = *(char **)(v71 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v71 + 24) = v73;
  uint64_t v75 = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v73 + 2) + 1, 1, v73);
    *uint64_t v72 = v73;
  }
  unint64_t v77 = *((void *)v73 + 2);
  unint64_t v76 = *((void *)v73 + 3);
  if (v77 >= v76 >> 1)
  {
    uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v73);
    *uint64_t v72 = v73;
  }
  *((void *)v73 + 2) = v77 + 1;
  uint64_t v78 = &v73[24 * v77];
  *((void *)v78 + 4) = &type metadata for StatusBarKey;
  *((void *)v78 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  uint64_t v79 = *(void *)((*v75 & *v57) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v80 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v81 = v80;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  double v82 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v83 = v82;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    uint64_t v85 = v84;
    swift_unknownObjectWeakAssign();
  }
  long long v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    uint64_t v87 = v86;
    int v88 = *(void (**)(uint64_t))((*v75 & *v86) + 0x1F0);
    uint64_t v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  uint64_t v90 = *(void *)((char *)v57 + *(void *)((*v75 & *v57) + 0xF8));
  unint64_t v91 = lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>();
  *(void *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v90 + 4outlined consume of Text?(0, 0, 0, 0) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v92 = FocusBridge.host.getter();
  if (v92)
  {
    long long v94 = (void *)v92;
    uint64_t v95 = v93;
    uint64_t v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  long long v97 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x100));
  uint64_t v98 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v98);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v100 = (void *)result;
  uint64_t v101 = swift_getObjectType();
  swift_retain();
  id v102 = v97;

  if ((*(uint64_t (**)(void))(v101 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t v103 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v104 = v103;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v106 = v105;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v107 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v108 = v107;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v109 = *(void **)((char *)v57 + *(void *)((*v75 & *v57) + 0x148));
  uint64_t v110 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v110);
  if (!result) {
    goto LABEL_70;
  }
  uint64_t v111 = (void *)result;
  id v112 = v109;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v113 = objc_msgSend(v57, sel_traitCollection);
  id v114 = objc_msgSend(v113, sel_userInterfaceIdiom);

  if (v114 == (id)1
    || (id v115 = objc_msgSend(v57, sel_traitCollection),
        id v116 = objc_msgSend(v115, sel_userInterfaceIdiom),
        v115,
        v116 == (id)6))
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PointerBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    id v118 = objc_msgSend(objc_allocWithZone(v117), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v119 = *(void *)((*v75 & *v57) + 0x158);
    uint64_t v120 = *(void **)((char *)v57 + v119);
    *(void *)((char *)v57 + v119) = v118;
  }
  uint64_t v121 = *(char **)((char *)v57 + v79);
  uint64_t result = MEMORY[0x18C119DF0](&v121[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v122 = (void *)result;
  uint64_t v123 = swift_getObjectType();
  swift_retain();
  uint64_t v124 = v121;

  if ((*(uint64_t (**)(void))(v123 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v125 = *(char **)((char *)v57 + *(void *)((*v75 & *v57) + 0x178));
  *(void *)&v125[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>();
  uint64_t v126 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v126);
  swift_retain();
  uint64_t v127 = v125;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v128 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  unint64_t v129 = lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v128 + 24) = v129;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v130 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v131 = *(void *)((*v75 & *v57) + 0xD0);
  swift_beginAccess();
  *(void *)(v130 + 4outlined consume of Text?(0, 0, 0, 0) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v132 = *(void *)((char *)v57 + v131);
  uint64_t v133 = *(void *)(v132 + 48);
  if (v133)
  {
    uint64_t v134 = v57;
    swift_retain();
    objc_msgSend(v134, sel_addGestureRecognizer_, v133);
  }
  else
  {
    long long v135 = v57;
    swift_retain();
  }
  objc_msgSend(v57, sel_addGestureRecognizer_, *(void *)(v132 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v136 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v137 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v138 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v138)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v138; ++i)
    {
      uint64_t v140 = *(void *)(v137 + 8 * i + 32);
      objc_msgSend(v136, sel_addObserver_selector_name_object_, v57, sel_accessibilityBooleanDidChange_, v140, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v57, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v141 = one-time initialization token for didUpdateListLayout;
  uint64_t v142 = v57;
  if (v141 != -1) {
    swift_once();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v142, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v143 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v143, (uint64_t)v146);
  v146[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v146, (uint64_t)v142);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v142;
}

uint64_t specialized _UIHostingView.init(rootView:)(char a1, void *a2, void *a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x70)) = 0;
  *((unsigned char *)v3 + *(void *)((*v5 & *v3) + 0x78)) = 0;
  *((unsigned char *)v3 + *(void *)((*v5 & *v3) + 0x80)) = 1;
  *(_DWORD *)((char *)v3 + *(void *)((*v5 & *v3) + 0x88)) = 0;
  id v6 = (char *)v3 + *(void *)((*v5 & *v3) + 0x90);
  *(_OWORD *)id v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  uint64_t v7 = (char *)v3 + *(void *)((*v5 & *v3) + 0x98);
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v3 + *(void *)((*v5 & *v3) + 0xA0)) = 0;
  *(void *)((char *)v3 + *(void *)((*v5 & *v3) + 0xA8)) = 0;
  *(void *)((char *)v3 + *(void *)((*v5 & *v3) + 0xB0)) = 0;
  *(void *)((char *)v3 + *(void *)((*v5 & *v3) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v3 + *(void *)((*v5 & *v3) + 0xC8)) = 0;
  *((unsigned char *)v3 + *(void *)((*v5 & *v3) + 0xD8)) = 2;
  uint64_t v8 = *(void *)((*v5 & *v3) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>();
  id v10 = objc_allocWithZone(v9);
  uint64_t v11 = v3;
  *(void *)((char *)v3 + v8) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>);
  uint64_t v12 = *(void *)((*v5 & *v11) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>();
  id v14 = objc_allocWithZone(v13);
  *(void *)((char *)v11 + v12) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>);
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0xF0)) = 1;
  uint64_t v15 = *(void *)((*v5 & *v11) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
  swift_unknownObjectWeakInit();
  unint64_t v17 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v16 + 48) = 0;
  *(void *)(v16 + 56) = v17;
  *(void *)(v16 + 64) = v18;
  EnvironmentValues.init()();
  *(_OWORD *)(v16 + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(void *)(v16 + 136) = 1;
  *(_DWORD *)(v16 + 144) = 0;
  swift_weakInit();
  *(void *)(v16 + 16outlined consume of Text?(0, 0, 0, 0) = 0;
  *(void *)(v16 + 168) = 0;
  *(_WORD *)(v16 + 176) = 1;
  *(void *)((char *)v11 + v15) = v16;
  uint64_t v19 = *(void *)((*v5 & *v11) + 0x100);
  uint64_t v20 = MEMORY[0x1E4F40728];
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for DragAndDropBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(void *)((char *)v11 + v19) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x108)) = 0;
  uint64_t v22 = *(void *)((*v5 & *v11) + 0x110);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for TooltipBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(void *)((char *)v11 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  uint64_t v24 = *(void *)((*v5 & *v11) + 0x118);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for EditMenuBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(void *)((char *)v11 + v24) = objc_msgSend(objc_allocWithZone(v25), sel_init);
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x120)) = 0;
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x128)) = 0;
  uint64_t v26 = *(void *)((*v5 & *v11) + 0x130);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  uint64_t v27 = swift_allocObject();
  *(_WORD *)(v27 + 16) = 2;
  *(void *)(v27 + 24) = v17;
  *(void *)(v27 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v11 + v26) = v27;
  swift_weakInit();
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x140)) = 0;
  uint64_t v28 = *(void *)((*v5 & *v11) + 0x148);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(void *)((char *)v11 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  uint64_t v30 = *(void *)((*v5 & *v11) + 0x150);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PencilEventsBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(void *)((char *)v11 + v3outlined consume of Text?(0, 0, 0, 0) = objc_msgSend(objc_allocWithZone(v31), sel_init);
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x158)) = 0;
  uint64_t v32 = *(void *)((*v5 & *v11) + 0x160);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  uint64_t v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v33 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(void *)((char *)v11 + v32) = v33;
  uint64_t v34 = v5;
  uint64_t v35 = *(void *)((*v5 & *v11) + 0x168);
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for ContextMenuBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(void *)((char *)v11 + v35) = objc_msgSend(objc_allocWithZone(v36), sel_init);
  *((unsigned char *)v11 + *(void *)((*v5 & *v11) + 0x170)) = 0;
  uint64_t v37 = *(void *)((*v5 & *v11) + 0x178);
  *(void *)((char *)v11 + v37) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x180)) = 0;
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x188)) = 0;
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x190)) = 0;
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x1A0)) = 0;
  uint64_t v38 = (char *)v11 + *(void *)((*v5 & *v11) + 0x1A8);
  *(void *)uint64_t v38 = 0;
  v38[8] = 0;
  *((_DWORD *)v38 + 3) = 0;
  unint64_t v39 = (void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x1B0));
  unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v17);
  *unint64_t v39 = 0;
  v39[1] = v40;
  uint64_t v41 = MEMORY[0x1E4FBC868];
  v39[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v11 + *(void *)((*v5 & *v11) + 0x1B8)) = 0;
  *((unsigned char *)v11 + *(void *)((*v5 & *v11) + 0x1C0)) = 0;
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x1C8)) = 0;
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x1D0)) = 0;
  *((unsigned char *)v11 + *(void *)((*v5 & *v11) + 0x1D8)) = 0;
  uint64_t v42 = (char *)v11 + *(void *)((*v5 & *v11) + 0x60);
  *uint64_t v42 = a1;
  *((void *)v42 + 1) = a2;
  *((void *)v42 + 2) = a3;
  id v43 = a2;
  uint64_t v44 = MEMORY[0x18C113CA0](a3);
  uint64_t v45 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v151, v44);
  if ((v151 & 1) == 0)
  {
    if ((v151 & 2) != 0)
    {
      uint64_t v46 = 2;
      if ((v151 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v46 = 0;
      if ((v151 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v151 & 2) == 0)
  {
    uint64_t v46 = 1;
    if ((v151 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v46 = 3;
  if ((v151 & 4) != 0) {
LABEL_7:
  }
    v46 |= 4uLL;
LABEL_8:
  if ((v151 & 0x10) != 0) {
    v46 |= 8uLL;
  }
  if ((v151 & 0x20) != 0) {
    v46 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v45)) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = v46 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v47, (void (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v48 = swift_retain_n();
  *(void *)&long long v151 = specialized FocusViewGraph.init(graph:)(v48);
  *((void *)&v151 + 1) = v49;
  uint64_t v152 = v50;
  LOWORD(v153) = v51 & 0x101;
  BYTE2(v153) = v52 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v151) = 0;
  *(void *)&long long v151 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v53 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v54 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v152 = 0;
  long long v151 = 0uLL;
  LOBYTE(v153) = 0;
  unint64_t v154 = 0;
  unint64_t v155 = v54;
  uint64_t v156 = v41;
  char v157 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v54);
  unint64_t v55 = specialized Dictionary.init(dictionaryLiteral:)(v53);
  uint64_t v153 = &type metadata for HoverEventDispatcher;
  unint64_t v154 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&long long v151 = v55;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
  uint64_t v153 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v154 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
  uint64_t v153 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v154 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
  unint64_t v56 = specialized Dictionary.init(dictionaryLiteral:)(v53);
  uint64_t v153 = &type metadata for KeyEventDispatcher;
  unint64_t v154 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&long long v151 = v56;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v11 + *(void *)((*v5 & *v11) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  uint64_t v57 = MEMORY[0x1E4F40728];
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v150.receiver = v11;
  v150.super_class = v58;
  size_t v59 = objc_msgSendSuper2(&v150, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v57, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v60 = outlined destroy of _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph((uint64_t)&v151);
  (*(void (**)(uint64_t))((*v5 & *v59) + 0x500))(v60);
  uint64_t v61 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v61 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v62 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v63 = *((void *)&static RepresentableContextValues.current + 1);
    long long v64 = xmmword_1EB2E8DA0;
    char v65 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v66 = swift_retain();
      outlined copy of RepresentableContextValues?(v66, v63, v64, *((uint64_t *)&v64 + 1), v65);
      uint64_t v67 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v67 && (swift_release(), v62 == v67))
      {
        uint64_t v68 = swift_release();
        if (v65) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v68 = swift_release();
        if (v65)
        {
LABEL_25:
          MEMORY[0x1F4188790](v68);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v64, *((uint64_t *)&v64 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v62, v63, v64, *((uint64_t *)&v64 + 1), v65);
          uint64_t v69 = *((void *)&v151 + 1);
          uint64_t v70 = v151;
LABEL_32:
          uint64_t v71 = *(void *)((char *)v59 + *(void *)((*v5 & *v59) + 0x68));
          uint64_t v72 = *(void *)(v71 + 120);
          *(void *)(v71 + 12outlined consume of Text?(0, 0, 0, 0) = v70;
          *(void *)(v71 + 128) = v69;
          outlined consume of EnvironmentValues?(v72);
          outlined consume of RepresentableContextValues?(v62, v63, v64, *((uint64_t *)&v64 + 1), v65);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v68 = outlined copy of RepresentableContextValues.EnvironmentStorage(v64, *((uint64_t *)&v64 + 1), v65 & 1);
      if (v65) {
        goto LABEL_25;
      }
    }
    long long v151 = v64;
    swift_retain();
    swift_retain();
    uint64_t v69 = *((void *)&v64 + 1);
    uint64_t v70 = v64;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v73 = *(void *)((char *)v59 + *(void *)((*v5 & *v59) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v74 = (char **)(v73 + 24);
  swift_beginAccess();
  uint64_t v75 = *(char **)(v73 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v73 + 24) = v75;
  unint64_t v77 = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v75 + 2) + 1, 1, v75);
    char *v74 = v75;
  }
  unint64_t v79 = *((void *)v75 + 2);
  unint64_t v78 = *((void *)v75 + 3);
  if (v79 >= v78 >> 1)
  {
    uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v79 + 1, 1, v75);
    char *v74 = v75;
  }
  *((void *)v75 + 2) = v79 + 1;
  uint64_t v80 = &v75[24 * v79];
  *((void *)v80 + 4) = &type metadata for StatusBarKey;
  *((void *)v80 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v80 + 12) = -1;
  swift_release();
  swift_release();
  uint64_t v81 = *(void *)((*v77 & *v59) + 0x168);
  swift_unknownObjectWeakAssign();
  double v82 = *(void **)((char *)v59 + *(void *)((*v77 & *v59) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v83 = v82;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v84 = *(void **)((char *)v59 + *(void *)((*v77 & *v59) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v85 = v84;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  long long v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    uint64_t v87 = v86;
    swift_unknownObjectWeakAssign();
  }
  int v88 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v88)
  {
    uint64_t v89 = v88;
    uint64_t v90 = *(void (**)(uint64_t))((*v77 & *v88) + 0x1F0);
    uint64_t v91 = swift_retain();
    v90(v91);

    swift_release();
  }
  uint64_t v92 = *(void *)((char *)v59 + *(void *)((*v77 & *v59) + 0xF8));
  unint64_t v93 = lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  *(void *)(v92 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v92 + 4outlined consume of Text?(0, 0, 0, 0) = v93;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v94 = FocusBridge.host.getter();
  if (v94)
  {
    uint64_t v96 = (void *)v94;
    uint64_t v97 = v95;
    uint64_t v98 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v97 + 8) + 16))(v98);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v99 = *(void **)((char *)v59 + *(void *)((*v77 & *v59) + 0x100));
  uint64_t v100 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v100);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  id v102 = (void *)result;
  uint64_t v103 = swift_getObjectType();
  swift_retain();
  id v104 = v99;

  if ((*(uint64_t (**)(void))(v103 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v105 = *(void **)((char *)v59 + *(void *)((*v77 & *v59) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v106 = v105;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v107 = *(void **)((char *)v59 + *(void *)((*v77 & *v59) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v108 = v107;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v109 = *(void **)((char *)v59 + *(void *)((*v77 & *v59) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v110 = v109;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v111 = *(void **)((char *)v59 + *(void *)((*v77 & *v59) + 0x148));
  uint64_t v112 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v112);
  if (!result) {
    goto LABEL_70;
  }
  id v113 = (void *)result;
  id v114 = v111;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v115 = objc_msgSend(v59, sel_traitCollection);
  id v116 = objc_msgSend(v115, sel_userInterfaceIdiom);

  if (v116 == (id)1
    || (id v117 = objc_msgSend(v59, sel_traitCollection),
        id v118 = objc_msgSend(v117, sel_userInterfaceIdiom),
        v117,
        v118 == (id)6))
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for PointerBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    id v120 = objc_msgSend(objc_allocWithZone(v119), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v121 = *(void *)((*v77 & *v59) + 0x158);
    uint64_t v122 = *(void **)((char *)v59 + v121);
    *(void *)((char *)v59 + v121) = v120;
  }
  uint64_t v123 = *(char **)((char *)v59 + v81);
  uint64_t result = MEMORY[0x18C119DF0](&v123[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v124 = (void *)result;
  uint64_t v125 = swift_getObjectType();
  swift_retain();
  uint64_t v126 = v123;

  if ((*(uint64_t (**)(void))(v125 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v127 = *(char **)((char *)v59 + *(void *)((*v77 & *v59) + 0x178));
  *(void *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  uint64_t v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v128);
  swift_retain();
  unint64_t v129 = v127;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v130 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  unint64_t v131 = lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(void *)(v130 + 24) = v131;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v132 = specialized _UIHostingView.base.getter((uint64_t (*)(void))lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v133 = *(void *)((*v77 & *v59) + 0xD0);
  swift_beginAccess();
  *(void *)(v132 + 4outlined consume of Text?(0, 0, 0, 0) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v134 = *(void *)((char *)v59 + v133);
  uint64_t v135 = *(void *)(v134 + 48);
  if (v135)
  {
    id v136 = v59;
    swift_retain();
    objc_msgSend(v136, sel_addGestureRecognizer_, v135);
  }
  else
  {
    uint64_t v137 = v59;
    swift_retain();
  }
  objc_msgSend(v59, sel_addGestureRecognizer_, *(void *)(v134 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v138 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v139 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v140 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v140)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v140; ++i)
    {
      uint64_t v142 = *(void *)(v139 + 8 * i + 32);
      objc_msgSend(v138, sel_addObserver_selector_name_object_, v59, sel_accessibilityBooleanDidChange_, v142, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v59, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v143 = one-time initialization token for didUpdateListLayout;
  uint64_t v144 = v59;
  if (v143 != -1) {
    swift_once();
  }
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v144, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v145 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v145, (uint64_t)v149);
  v149[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v149, (uint64_t)v144);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v144;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t specialized _UIHostingView.init(rootView:)(uint64_t *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x78)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0x80)) = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0x88)) = 0;
  uint64_t v5 = (char *)v1 + *(void *)((*v4 & *v1) + 0x90);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  id v6 = (char *)v1 + *(void *)((*v4 & *v1) + 0x98);
  *(_OWORD *)id v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xA8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xD8)) = 2;
  uint64_t v7 = *(void *)((*v4 & *v1) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>();
  id v9 = objc_allocWithZone(v8);
  id v10 = v1;
  *(void *)((char *)v1 + v7) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>);
  uint64_t v11 = *(void *)((*v4 & *v10) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>();
  id v13 = objc_allocWithZone(v12);
  *(void *)((char *)v10 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(void))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xF0)) = 1;
  uint64_t v14 = *(void *)((*v4 & *v10) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(void *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(void *)(v15 + 16outlined consume of Text?(0, 0, 0, 0) = 0;
  *(void *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(void *)((char *)v10 + v14) = v15;
  uint64_t v18 = *(void *)((*v4 & *v10) + 0x100);
  type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, DocumentBaseModifier>>();
  *(void *)((char *)v10 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x108)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v10) + 0x110);
  type metadata accessor for TooltipBridge<ModifiedContent<AnyView, DocumentBaseModifier>>();
  *(void *)((char *)v10 + v2outlined consume of Text?(0, 0, 0, 0) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  uint64_t v22 = *(void *)((*v4 & *v10) + 0x118);
  type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>();
  *(void *)((char *)v10 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x120)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x128)) = 0;
  uint64_t v24 = *(void *)((*v4 & *v10) + 0x130);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, DocumentBaseModifier>>();
  uint64_t v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(void *)(v25 + 24) = v16;
  *(void *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + v24) = v25;
  swift_weakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x140)) = 0;
  uint64_t v26 = *(void *)((*v4 & *v10) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, DocumentBaseModifier>>();
  *(void *)((char *)v10 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  uint64_t v28 = *(void *)((*v4 & *v10) + 0x150);
  type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, DocumentBaseModifier>>();
  *(void *)((char *)v10 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x158)) = 0;
  uint64_t v30 = *(void *)((*v4 & *v10) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, DocumentBaseModifier>>();
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(void *)((char *)v10 + v3outlined consume of Text?(0, 0, 0, 0) = v31;
  uint64_t v32 = *(void *)((*v4 & *v10) + 0x168);
  type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>();
  *(void *)((char *)v10 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x170)) = 0;
  uint64_t v34 = *(void *)((*v4 & *v10) + 0x178);
  *(void *)((char *)v10 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x180)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x188)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x190)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1A0)) = 0;
  uint64_t v35 = (char *)v10 + *(void *)((*v4 & *v10) + 0x1A8);
  *(void *)uint64_t v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  Class v36 = (void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1B0));
  unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *Class v36 = 0;
  v36[1] = v37;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  v36[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1B8)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1C0)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1C8)) = 0;
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x1D0)) = 0;
  *((unsigned char *)v10 + *(void *)((*v4 & *v10) + 0x1D8)) = 0;
  unint64_t v39 = (_OWORD *)((char *)v10 + *(void *)((*v4 & *v10) + 0x60));
  uint64_t v155 = *a1;
  uint64_t v154 = a1[5];
  long long v40 = *(_OWORD *)(a1 + 3);
  v153[0] = *(_OWORD *)(a1 + 1);
  v153[1] = v40;
  long long v41 = *((_OWORD *)a1 + 2);
  long long v42 = *((_OWORD *)a1 + 1);
  *unint64_t v39 = *(_OWORD *)a1;
  v39[1] = v42;
  v39[2] = v41;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v155);
  id v43 = outlined retain of DocumentBaseModifier((uint64_t *)v153);
  uint64_t v44 = MEMORY[0x18C113CA0](v43);
  uint64_t v45 = (*(void *(**)(long long *__return_ptr, uint64_t))(ObjectType + 1192))(&v146, v44);
  if ((v146 & 1) == 0)
  {
    if ((v146 & 2) != 0)
    {
      uint64_t v46 = 2;
      if ((v146 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v46 = 0;
      if ((v146 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v146 & 2) == 0)
  {
    uint64_t v46 = 1;
    if ((v146 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v46 = 3;
  if ((v146 & 4) != 0) {
LABEL_7:
  }
    v46 |= 4uLL;
LABEL_8:
  if ((v146 & 0x10) != 0) {
    v46 |= 8uLL;
  }
  if ((v146 & 0x20) != 0) {
    v46 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v45)) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = v46 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  swift_allocObject();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0x68)) = specialized UIHostingViewBase.init<A>(rootViewType:options:)(v47, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  uint64_t v48 = swift_retain_n();
  *(void *)&long long v146 = specialized FocusViewGraph.init(graph:)(v48);
  *((void *)&v146 + 1) = v49;
  uint64_t v147 = v50;
  LOWORD(v148) = v51 & 0x101;
  BYTE2(v148) = v52 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  WORD4(v146) = 0;
  *(void *)&long long v146 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.EnableVFDFeature();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.EnableVFDFeature);
    swift_retain();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  unint64_t v53 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v54 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v147 = 0;
  long long v146 = 0uLL;
  LOBYTE(v148) = 0;
  unint64_t v149 = 0;
  unint64_t v150 = v54;
  uint64_t v151 = v38;
  char v152 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v54);
  unint64_t v55 = specialized Dictionary.init(dictionaryLiteral:)(v53);
  long long v148 = &type metadata for HoverEventDispatcher;
  unint64_t v149 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(void *)&long long v146 = v55;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  long long v148 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v149 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  long long v148 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v149 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  unint64_t v56 = specialized Dictionary.init(dictionaryLiteral:)(v53);
  long long v148 = &type metadata for KeyEventDispatcher;
  unint64_t v149 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(void *)&long long v146 = v56;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v10 + *(void *)((*v4 & *v10) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>();
  v145.receiver = v10;
  v145.super_class = v57;
  uint64_t v58 = objc_msgSendSuper2(&v145, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakInit();
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.HostViewGraph();
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.HostViewGraph);
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v59 = outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph((uint64_t)&v146, (uint64_t (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.HostViewGraph);
  (*(void (**)(uint64_t))((*v4 & *v58) + 0x500))(v59);
  uint64_t v60 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>);
  if (MEMORY[0x18C119DF0](v60 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v61 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v62 = *((void *)&static RepresentableContextValues.current + 1);
    long long v63 = xmmword_1EB2E8DA0;
    char v64 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      swift_retain();
      uint64_t v65 = swift_retain();
      outlined copy of RepresentableContextValues?(v65, v62, v63, *((uint64_t *)&v63 + 1), v64);
      uint64_t v66 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v66 && (swift_release(), v61 == v66))
      {
        uint64_t v67 = swift_release();
        if (v64) {
          goto LABEL_25;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();
        swift_release();
        uint64_t v67 = swift_release();
        if (v64)
        {
LABEL_25:
          MEMORY[0x1F4188790](v67);
          swift_retain();
          swift_retain();
          outlined copy of RepresentableContextValues.EnvironmentStorage(v63, *((uint64_t *)&v63 + 1), 1);
          static Update.ensure<A>(_:)();
          outlined consume of RepresentableContextValues?(v61, v62, v63, *((uint64_t *)&v63 + 1), v64);
          uint64_t v68 = *((void *)&v146 + 1);
          uint64_t v69 = v146;
LABEL_32:
          uint64_t v70 = *(void *)((char *)v58 + *(void *)((*v4 & *v58) + 0x68));
          uint64_t v71 = *(void *)(v70 + 120);
          *(void *)(v70 + 12outlined consume of Text?(0, 0, 0, 0) = v69;
          *(void *)(v70 + 128) = v68;
          outlined consume of EnvironmentValues?(v71);
          outlined consume of RepresentableContextValues?(v61, v62, v63, *((uint64_t *)&v63 + 1), v64);
          goto LABEL_33;
        }
      }
    }
    else
    {
      swift_retain();
      uint64_t v67 = outlined copy of RepresentableContextValues.EnvironmentStorage(v63, *((uint64_t *)&v63 + 1), v64 & 1);
      if (v64) {
        goto LABEL_25;
      }
    }
    long long v146 = v63;
    swift_retain();
    swift_retain();
    uint64_t v68 = *((void *)&v63 + 1);
    uint64_t v69 = v63;
    goto LABEL_32;
  }
LABEL_33:
  swift_unknownObjectWeakAssign();
  uint64_t v72 = *(void *)((char *)v58 + *(void *)((*v4 & *v58) + 0x130));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v73 = (char **)(v72 + 24);
  swift_beginAccess();
  uint64_t v74 = *(char **)(v72 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v72 + 24) = v74;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v74 + 2) + 1, 1, v74);
    *uint64_t v73 = v74;
  }
  unint64_t v77 = *((void *)v74 + 2);
  unint64_t v76 = *((void *)v74 + 3);
  if (v77 >= v76 >> 1)
  {
    uint64_t v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v74);
    *uint64_t v73 = v74;
  }
  *((void *)v74 + 2) = v77 + 1;
  unint64_t v78 = &v74[24 * v77];
  *((void *)v78 + 4) = &type metadata for StatusBarKey;
  *((void *)v78 + 5) = &protocol witness table for StatusBarKey;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  uint64_t v79 = *(void *)((*v4 & *v58) + 0x168);
  swift_unknownObjectWeakAssign();
  uint64_t v80 = *(void **)((char *)v58 + *(void *)((*v4 & *v58) + 0xE0));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v81 = v80;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  double v82 = *(void **)((char *)v58 + *(void *)((*v4 & *v58) + 0xE8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v83 = v82;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  uint64_t v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    id v85 = v84;
    swift_unknownObjectWeakAssign();
  }
  long long v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    uint64_t v87 = v86;
    int v88 = *(void (**)(uint64_t))((*v4 & *v86) + 0x1F0);
    uint64_t v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  uint64_t v90 = *(void *)((char *)v58 + *(void *)((*v4 & *v58) + 0xF8));
  uint64_t v91 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>);
  *(void *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v90 + 4outlined consume of Text?(0, 0, 0, 0) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v92 = FocusBridge.host.getter();
  if (v92)
  {
    uint64_t v94 = (void *)v92;
    uint64_t v95 = v93;
    uint64_t v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  uint64_t v97 = *(void **)((char *)v58 + *(void *)((*v4 & *v58) + 0x100));
  uint64_t v98 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v98);
  if (!result)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v100 = (void *)result;
  uint64_t v101 = swift_getObjectType();
  swift_retain();
  id v102 = v97;

  if ((*(uint64_t (**)(void))(v101 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t v103 = *(void **)((char *)v58 + *(void *)((*v4 & *v58) + 0x110));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v104 = v103;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v105 = *(void **)((char *)v58 + *(void *)((*v4 & *v58) + 0x118));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v106 = v105;
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v107 = *(void **)((char *)v58 + *(void *)((*v4 & *v58) + 0x150));
  swift_unknownObjectWeakAssign();
  swift_retain();
  id v108 = v107;
  GraphHost.addPreference<A>(_:)();

  swift_release();
  id v109 = *(void **)((char *)v58 + *(void *)((*v4 & *v58) + 0x148));
  uint64_t v110 = swift_unknownObjectWeakAssign();
  uint64_t result = MEMORY[0x18C119DF0](v110);
  if (!result) {
    goto LABEL_70;
  }
  uint64_t v111 = (void *)result;
  id v112 = v109;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  id v113 = objc_msgSend(v58, sel_traitCollection);
  id v114 = objc_msgSend(v113, sel_userInterfaceIdiom);

  if (v114 == (id)1
    || (id v115 = objc_msgSend(v58, sel_traitCollection),
        id v116 = objc_msgSend(v115, sel_userInterfaceIdiom),
        v115,
        v116 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>();
    id v118 = objc_msgSend(objc_allocWithZone(v117), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v119 = *(void *)((*v4 & *v58) + 0x158);
    id v120 = *(void **)((char *)v58 + v119);
    *(void *)((char *)v58 + v119) = v118;
  }
  uint64_t v121 = *(char **)((char *)v58 + v79);
  uint64_t result = MEMORY[0x18C119DF0](&v121[direct field offset for ContextMenuBridge.host]);
  if (!result) {
    goto LABEL_71;
  }
  uint64_t v122 = (void *)result;
  uint64_t v123 = swift_getObjectType();
  swift_retain();
  uint64_t v124 = v121;

  if ((*(uint64_t (**)(void))(v123 + 1208))())
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  uint64_t v125 = *(char **)((char *)v58 + *(void *)((*v4 & *v58) + 0x178));
  *(void *)&v125[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>();
  uint64_t v126 = swift_unknownObjectWeakAssign();
  MEMORY[0x1F4188790](v126);
  swift_retain();
  uint64_t v127 = v125;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v128 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v129 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>);
  swift_beginAccess();
  *(void *)(v128 + 24) = v129;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v130 = specialized _UIHostingView.base.getter(lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>)[10];
  swift_retain();
  swift_release();
  uint64_t v131 = *(void *)((*v4 & *v58) + 0xD0);
  swift_beginAccess();
  *(void *)(v130 + 4outlined consume of Text?(0, 0, 0, 0) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v132 = *(void *)((char *)v58 + v131);
  uint64_t v133 = *(void *)(v132 + 48);
  if (v133)
  {
    uint64_t v134 = v58;
    swift_retain();
    objc_msgSend(v134, sel_addGestureRecognizer_, v133);
  }
  else
  {
    uint64_t v135 = v58;
    swift_retain();
  }
  objc_msgSend(v58, sel_addGestureRecognizer_, *(void *)(v132 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v136 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v137 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v138 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v138)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v138; ++i)
    {
      uint64_t v140 = *(void *)(v137 + 8 * i + 32);
      objc_msgSend(v136, sel_addObserver_selector_name_object_, v58, sel_accessibilityBooleanDidChange_, v140, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v58, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v141 = one-time initialization token for didUpdateListLayout;
  uint64_t v142 = v58;
  if (v141 != -1) {
    swift_once();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v142, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_unknownObjectWeakInit();
  uint64_t v143 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v143, (uint64_t)v144);
  v144[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v144, (uint64_t)v142);
  swift_endAccess();

  static Update.end()();
  return (uint64_t)v142;
}

void specialized _IntelligenceSupport.SummarySymbolHost.font.setter(void *a1, void (*a2)(id))
{
  uint64_t v4 = v2;
  id v6 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x60);
  swift_beginAccess();
  uint64_t v7 = (void *)*((void *)v6 + 1);
  Class v8 = (void *)*((void *)v6 + 2);
  char v16 = *v6;
  unint64_t v17 = v7;
  id v9 = a1;
  id v10 = v7;
  id v11 = v8;
  a2(v9);
  Class v12 = (void *)*((void *)v6 + 1);
  id v13 = (void *)*((void *)v6 + 2);
  *id v6 = v16;
  *((void *)v6 + 1) = v17;
  *((void *)v6 + 2) = v8;
  id v14 = v17;
  id v15 = v8;

  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t type metadata accessor for _IntelligenceSupport.SummarySymbolHost()
{
  uint64_t result = type metadata singleton initialization cache for _IntelligenceSupport.SummarySymbolHost;
  if (!type metadata singleton initialization cache for _IntelligenceSupport.SummarySymbolHost) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_187950E30@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = (unsigned char *)(*a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)*a1) + 0x60));
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_187950EA4@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for _IntelligenceSupport.SummarySymbolHost.font : _IntelligenceSupport.SummarySymbolHost(MEMORY[0x1E4F40700], a1);
}

void sub_187950ED0(id *a1)
{
  id v1 = *a1;
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(v1, MEMORY[0x1E4F40708]);
}

uint64_t sub_187950F30@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for _IntelligenceSupport.SummarySymbolHost.font : _IntelligenceSupport.SummarySymbolHost(MEMORY[0x1E4F40710], a1);
}

void sub_187950F5C(id *a1)
{
  id v1 = *a1;
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(v1, MEMORY[0x1E4F40718]);
}

uint64_t type metadata completion function for _IntelligenceSupport.SummarySymbolHost()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for _IntelligenceSupport.SummarySymbolHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for _IntelligenceSupport.SummarySymbolHost);
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.isOn.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x640))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.isOn.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x648))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.isOn.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x650))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.font.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x658))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.font.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x660))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.font.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x668))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.foregroundColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x670))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.foregroundColor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x678))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.foregroundColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x680))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.baseline.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x688))();
}

uint64_t ObjC metadata update function for _IntelligenceSupport.SummarySymbolHost()
{
  return type metadata accessor for _IntelligenceSupport.SummarySymbolHost();
}

void type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar()
{
  unint64_t result = lazy protocol witness table cache variable for type InputAccessoryBar and conformance InputAccessoryBar;
  if (!lazy protocol witness table cache variable for type InputAccessoryBar and conformance InputAccessoryBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputAccessoryBar and conformance InputAccessoryBar);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<InputAccessoryBar>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<InputAccessoryBar, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<InputAccessoryBar, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<InputAccessoryBar, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, (uint64_t)&type metadata for InputAccessoryBar, (void (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for DragAndDropBridge();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for TooltipBridge();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for EditMenuBridge();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for UIKitStatusBarBridge();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for PencilEventsBridge();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for ContextMenuBridge();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.HostViewGraph)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.HostViewGraph);
    }
  }
}

void type metadata accessor for PointerBridge<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for PointerBridge();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.EnableVFDFeature)
  {
    uint64_t v0 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v0);
    unint64_t v1 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void *))
{
  if (!*a2)
  {
    uint64_t v10 = MEMORY[0x1E4F41618];
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    v14[0] = v11;
    v14[1] = a3;
    v14[2] = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v10);
    v14[3] = a4;
    unint64_t v12 = a5(a1, v14);
    if (!v13) {
      atomic_store(v12, a2);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.HostViewGraph);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PointerBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for SheetBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, SheetPreference.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView()
{
  unint64_t result = lazy protocol witness table cache variable for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView;
  if (!lazy protocol witness table cache variable for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<BridgedPresentation.RootView>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<BridgedPresentation.RootView, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<BridgedPresentation.RootView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<BridgedPresentation.RootView, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedPresentation.RootView, (void (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentBaseModifier and conformance DocumentBaseModifier;
  if (!lazy protocol witness table cache variable for type DocumentBaseModifier and conformance DocumentBaseModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentBaseModifier and conformance DocumentBaseModifier);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

uint64_t *outlined retain of DocumentBaseModifier(uint64_t *a1)
{
  return a1;
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.HostViewGraph);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>);
}

void type metadata accessor for PointerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for SheetBridge<ModifiedContent<AnyView, DocumentBaseModifier>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, DocumentBaseModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, DocumentBaseModifier>, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView;
  if (!lazy protocol witness table cache variable for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<DocumentGroupsIntroRootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<DocumentGroupsIntroRootView, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<DocumentGroupsIntroRootView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<DocumentGroupsIntroRootView, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (void (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentSceneRootBoxModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentSceneRootBoxModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier;
  if (!lazy protocol witness table cache variable for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>);
    }
  }
}

uint64_t outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, &lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.HostViewGraph, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, &lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.EnableVFDFeature, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>)
  {
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>)
  {
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BoundInputsView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<BoundInputsView>.HostViewGraph, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<BoundInputsView>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<BoundInputsView>.HostViewGraph, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BoundInputsView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<BoundInputsView>.EnableVFDFeature, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<BoundInputsView, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<BoundInputsView, SheetPreference.Key>)
  {
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<BoundInputsView, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<BoundInputsView, EditModeScopeModifier>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<BoundInputsView, EditModeScopeModifier>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>)
  {
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>)
  {
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<_ViewList_View>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<_ViewList_View>.HostViewGraph, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<_ViewList_View>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<_ViewList_View>.HostViewGraph, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<_ViewList_View>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<_ViewList_View>.EnableVFDFeature, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<_ViewList_View, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<_ViewList_View, SheetPreference.Key>)
  {
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<_ViewList_View, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, EditModeScopeModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, EditModeScopeModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for PointerBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E4F40728], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<_IntelligenceSupport.AnimatingSummarySymbol, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<_IntelligenceSupport.AnimatingSummarySymbol, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<_IntelligenceSupport.AnimatingSummarySymbol, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, MEMORY[0x1E4F40728], (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, MEMORY[0x1E4F40728], (void (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<EmptyView, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<EmptyView, Alert.Presentation>)
  {
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<EmptyView, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>)
  {
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<EmptyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<EmptyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<EmptyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<EmptyView>.HostViewGraph, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<EmptyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<EmptyView>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>.HostViewGraph, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<EmptyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<EmptyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<EmptyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<EmptyView>.EnableVFDFeature, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<EmptyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<EmptyView, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<EmptyView, SheetPreference.Key>)
  {
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<EmptyView, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, EditModeScopeModifier>, MEMORY[0x1E4F417F8], (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, EditModeScopeModifier>, MEMORY[0x1E4F417F8], (uint64_t)&type metadata for EditModeScopeModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v13[0] = v10;
    v13[1] = a3;
    void v13[2] = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    void v13[3] = a4;
    unint64_t v11 = a5(a1, v13);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
}

void type metadata accessor for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.HostViewGraph)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.HostViewGraph);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
}

uint64_t outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.EnableVFDFeature)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, SheetPreference.Key>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, a3, a4);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (void (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
}

void type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
    v13[0] = v10;
    v13[1] = a3;
    void v13[2] = lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>();
    void v13[3] = a4;
    unint64_t v11 = a5(a1, v13);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature(255, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, (void (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, type metadata accessor for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (void (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.HostViewGraph);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
}

void type metadata accessor for PointerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for SheetBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t outlined destroy of BridgedNavigationView.RootView(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<BridgedNavigationView.RootView, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<BridgedNavigationView.RootView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<BridgedNavigationView.RootView, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.HostViewGraph);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<_ViewList_View, ListTableCellModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PointerBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, SheetPreference.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<TabItem.RootView>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(0, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>.HostViewGraph, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t outlined destroy of TabItem.RootView(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>(255, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>.EnableVFDFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

void type metadata accessor for SheetBridge<TabItem.RootView, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<TabItem.RootView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<TabItem.RootView, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for PointerBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>);
    }
  }
}

uint64_t _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, a2, a3, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph);
    }
  }
}

void type metadata accessor for PointerBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for PointerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for SheetBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent);
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, SheetPreference.Key>);
    }
  }
}

uint64_t _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, a2, a3);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)partial apply()
{
  return partial apply for closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)();
}

uint64_t View.indexViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for IndexViewStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  id v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for IndexViewStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of IndexViewStyle._makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for _IndexViewStyleConfiguration()
{
  return &type metadata for _IndexViewStyleConfiguration;
}

uint64_t sub_18795AD48()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for IndexViewStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for IndexViewStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18795B12CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in IndexViewStyleModifier<A>()
{
  return &protocol witness table for IndexViewStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in IndexViewStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in IndexViewStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in IndexViewStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance IndexViewBody@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _IndexViewStyleConfiguration(v1, a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance IndexViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance IndexViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance IndexViewBody()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance IndexViewBody@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IndexViewBody(v1, a1);
}

uint64_t IndexViewStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IndexViewStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IndexViewStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance IndexViewStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t sub_18795B638()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t destroy for _IndexViewStyleConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _IndexViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = a2 + 24;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = v6;
  size_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  swift_retain();
  v8(a1 + 24, v5, v7);
  uint64_t v9 = *(void **)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  id v11 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _IndexViewStyleConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  __swift_assign_boxed_opaque_existential_1(a1 + 3, a2 + 3);
  uint64_t v4 = (void *)a2[8];
  uint64_t v5 = (void *)a1[8];
  a1[8] = v4;
  id v6 = v4;

  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _IndexViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _IndexViewStyleConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _IndexViewStyleConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8outlined consume of Text?(0, 0, 0, 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8outlined consume of Text?(0, 0, 0, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexViewBody()
{
  return &type metadata for IndexViewBody;
}

unint64_t lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody;
  if (!lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody;
  if (!lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexViewStyleModifier<DefaultIndexViewStyle> and conformance IndexViewStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexViewStyleModifier<DefaultIndexViewStyle> and conformance IndexViewStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type IndexViewStyleModifier<DefaultIndexViewStyle> and conformance IndexViewStyleModifier<A>)
  {
    type metadata accessor for IndexViewStyleModifier<DefaultIndexViewStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewStyleModifier<DefaultIndexViewStyle> and conformance IndexViewStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for IndexViewStyleModifier<DefaultIndexViewStyle>()
{
  if (!lazy cache variable for type metadata for IndexViewStyleModifier<DefaultIndexViewStyle>)
  {
    lazy protocol witness table accessor for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle();
    unint64_t v0 = type metadata accessor for IndexViewStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexViewStyleModifier<DefaultIndexViewStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle;
  if (!lazy protocol witness table cache variable for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in IndexViewBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of IndexViewBody(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of _IndexViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

_UNKNOWN **associated type witness table accessor for WidgetConfiguration.Body : WidgetConfiguration in EmptyWidgetConfiguration()
{
  return &protocol witness table for Never;
}

ValueMetadata *type metadata accessor for EmptyWidgetConfiguration()
{
  return &type metadata for EmptyWidgetConfiguration;
}

uint64_t static Section<>._makeRows(content:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(void *)&long long v44 = a7;
  *((void *)&v44 + 1) = a8;
  uint64_t v39 = a9;
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  int v13 = *a1;
  long long v14 = a2[7];
  long long v101 = a2[6];
  long long v102 = v14;
  long long v103 = a2[8];
  uint64_t v104 = *((void *)a2 + 18);
  long long v15 = a2[3];
  long long v97 = a2[2];
  long long v98 = v15;
  long long v16 = a2[5];
  long long v99 = a2[4];
  long long v100 = v16;
  long long v17 = a2[1];
  long long v95 = *a2;
  long long v96 = v17;
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  uint64_t v59 = a7;
  uint64_t v60 = a8;
  uint64_t v43 = a5;
  type metadata accessor for Section();
  uint64_t v18 = type metadata accessor for _GraphValue();
  type metadata accessor for Binding<Bool>?();
  uint64_t v41 = v18;
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Binding<Bool>?>();
  unsigned int v37 = _GraphValue.value.getter();
  LODWORD(v4outlined consume of Text?(0, 0, 0, 0) = HIDWORD(v104);
  int v94 = v104;
  long long v91 = v101;
  long long v92 = v102;
  long long v93 = v103;
  long long v87 = v97;
  long long v88 = v98;
  long long v89 = v99;
  long long v90 = v100;
  long long v85 = v95;
  long long v86 = v96;
  outlined retain of _TableRowInputs((uint64_t)&v95);
  DepthTrait.init(traits:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SectionHeaderTrait and conformance SectionHeaderTrait();
  int v19 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  long long v54 = v44;
  _GraphValue.subscript.getter();
  long long v80 = v91;
  long long v81 = v92;
  long long v82 = v93;
  long long v76 = v87;
  long long v77 = v88;
  long long v78 = v89;
  long long v79 = v90;
  long long v74 = v85;
  long long v75 = v86;
  int v83 = v94;
  int v38 = v19;
  int v84 = v19;
  (*(void (**)(_OWORD *__return_ptr, long long *, long long *, uint64_t, uint64_t))(a6 + 48))(v61, &v64, &v74, a3, a6);
  uint64_t v20 = *(void *)&v61[0];
  int v42 = DWORD2(v61[0]);
  long long v70 = v101;
  long long v71 = v102;
  long long v72 = v103;
  int v73 = v104;
  long long v66 = v97;
  long long v67 = v98;
  long long v68 = v99;
  long long v69 = v100;
  long long v64 = v95;
  long long v65 = v96;
  outlined retain of _TableRowInputs((uint64_t)&v95);
  DepthTrait.init(traits:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DepthTrait and conformance DepthTrait();
  int v21 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&v45[20] = a3;
  uint64_t v46 = a4;
  uint64_t v47 = v43;
  uint64_t v48 = a6;
  uint64_t v40 = a6;
  long long v49 = v44;
  LODWORD(v74) = v13;
  _GraphValue.subscript.getter();
  long long v80 = v70;
  long long v81 = v71;
  long long v82 = v72;
  long long v76 = v66;
  long long v77 = v67;
  long long v78 = v68;
  long long v79 = v69;
  long long v74 = v64;
  long long v75 = v65;
  int v83 = v73;
  LODWORD(v41) = v21;
  int v84 = v21;
  (*(void (**)(_OWORD *__return_ptr, unsigned char *, long long *, uint64_t, void))(v44 + 48))(v61, v45, &v74, a4, v44);
  uint64_t v22 = *(void *)&v61[0];
  int v23 = DWORD2(v61[0]);
  *(void *)&long long v74 = v20;
  DWORD2(v74) = v42;
  uint64_t v24 = PreferencesOutputs.subscript.getter();
  if ((v24 & 0x100000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  unsigned int v25 = v24;
  swift_bridgeObjectRelease();
  *(void *)&long long v74 = v22;
  DWORD2(v74) = v23;
  uint64_t v26 = PreferencesOutputs.subscript.getter();
  if ((v26 & 0x100000000) != 0) {
    goto LABEL_5;
  }
  int v27 = v26;
  uint64_t v28 = swift_bridgeObjectRelease();
  *(void *)&v61[0] = __PAIR64__(v25, v37);
  DWORD2(v61[0]) = v27;
  MEMORY[0x1F4188790](v28);
  *(void *)&long long v74 = a3;
  *((void *)&v74 + 1) = a4;
  *(void *)&long long v75 = v43;
  *((void *)&v75 + 1) = v40;
  long long v76 = v44;
  uint64_t v35 = type metadata accessor for Section<>.HierarchicalTableRowList();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s7SwiftUI7BindingVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v61, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v34, v35, MEMORY[0x1E4FBC248], v29, MEMORY[0x1E4FBC278], v30);
  int v31 = v74;
  uint64_t v32 = PreferencesOutputs.init()();
  *(void *)&long long v74 = *((void *)&v103 + 1);
  DWORD2(v74) = v104;
  MEMORY[0x1F4188790](v32);
  LODWORD(v35) = v31;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  v61[6] = v70;
  v61[7] = v71;
  v61[8] = v72;
  v61[2] = v66;
  v61[3] = v67;
  v61[4] = v68;
  v61[5] = v69;
  v61[0] = v64;
  v61[1] = v65;
  int v62 = v73;
  int v63 = v41;
  outlined release of _TableRowInputs((uint64_t)v61);
  long long v80 = v91;
  long long v81 = v92;
  long long v82 = v93;
  long long v76 = v87;
  long long v77 = v88;
  long long v78 = v89;
  long long v79 = v90;
  long long v74 = v85;
  long long v75 = v86;
  int v83 = v94;
  int v84 = v38;
  return outlined release of _TableRowInputs((uint64_t)&v74);
}

uint64_t closure #1 in static Section<>._makeRows(content:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Section();
  uint64_t v3 = a1 + *(int *)(v2 + 52);
  v9[2] = v2;
  type metadata accessor for Binding<Bool>?();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v5, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t partial apply for closure #1 in static Section<>._makeRows(content:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Section<>._makeRows(content:inputs:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in static Section<>._makeRows(content:inputs:));
}

void type metadata accessor for Binding<Bool>?()
{
  if (!lazy cache variable for type metadata for Binding<Bool>?)
  {
    _s7SwiftUI7BindingVySbGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>?);
    }
  }
}

void type metadata accessor for _GraphValue<Binding<Bool>?>()
{
  if (!lazy cache variable for type metadata for _GraphValue<Binding<Bool>?>)
  {
    type metadata accessor for Binding<Bool>?();
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<Bool>?>);
    }
  }
}

uint64_t outlined retain of _TableRowInputs(uint64_t a1)
{
  return a1;
}

uint64_t closure #2 in static Section<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for Section();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #3 in static Section<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Section();
  uint64_t v6 = a1 + *(int *)(v5 + 44);
  v10[2] = v5;
  v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v10[5];
}

uint64_t closure #1 in Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance Section<A, B, C><>.HeaderViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)(a2, a3, a4, a9, a5, a6, a7, a8);
}

uint64_t Section<>.HierarchicalTableRowList.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableRowList(Value, (uint64_t)v14);
  uint64_t v3 = AGGraphGetValue();
  outlined init with copy of TableRowList(v3, (uint64_t)v12);
  type metadata accessor for Binding<Bool>?();
  uint64_t v4 = AGGraphGetValue();
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  char v7 = *(unsigned char *)(v4 + 16);
  a1[3] = type metadata accessor for Section<>.HierarchicalGenerator();
  a1[4] = (uint64_t)&protocol witness table for Section<A, B, C><>.HierarchicalGenerator;
  uint64_t v8 = swift_allocObject();
  long long v9 = v14[1];
  *(_OWORD *)(v8 + 16) = v14[0];
  *(_OWORD *)(v8 + 32) = v9;
  long long v10 = v12[1];
  *(_OWORD *)(v8 + 56) = v12[0];
  *a1 = v8;
  *(void *)(v8 + 48) = v15;
  *(_OWORD *)(v8 + 72) = v10;
  *(void *)(v8 + 88) = v13;
  *(void *)(v8 + 96) = v5;
  *(void *)(v8 + 104) = v6;
  *(unsigned char *)(v8 + 112) = v7;
  return outlined copy of Binding<NavigationSplitViewColumn>?(v5, v6);
}

uint64_t protocol witness for Rule.value.getter in conformance Section<A, B, C><>.HierarchicalTableRowList@<X0>(uint64_t *a1@<X8>)
{
  return Section<>.HierarchicalTableRowList.value.getter(a1);
}

uint64_t Section<>.HierarchicalGenerator.visitRows<A>(applying:from:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v42 = a5;
  uint64_t v41 = a4;
  uint64_t v10 = *(void *)(a3 + 48);
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v40 = v10;
  uint64_t v39 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v37 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  long long v14 = (char *)&v35 - v13;
  uint64_t v15 = *(void *)(v5 + 88);
  if (!v15) {
    goto LABEL_3;
  }
  char v16 = *(unsigned char *)(v5 + 96) & 1;
  uint64_t v45 = *(void *)(v5 + 80);
  uint64_t v46 = v15;
  LOBYTE(v47) = v16;
  _s7SwiftUI7BindingVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v18 = v17;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](v56, v18);
  swift_release();
  swift_release();
  if ((v56[0] & 1) == 0)
  {
    uint64_t v57 = &type metadata for EmptyTableRowGenerator;
    uint64_t v58 = &protocol witness table for EmptyTableRowGenerator;
    if (*a2) {
      goto LABEL_4;
    }
  }
  else
  {
LABEL_3:
    outlined init with copy of TableRowList(v5 + 40, (uint64_t)v56);
    if (*a2)
    {
LABEL_4:
      int v19 = v57;
      uint64_t v20 = v58;
      __swift_project_boxed_opaque_existential_1(v56, (uint64_t)v57);
      char v21 = ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **))v20[1])(a1, a2, v41, v42, v19, v20);
      goto LABEL_10;
    }
  }
  uint64_t v36 = a1;
  uint64_t v22 = *(void *)(a3 + 16);
  uint64_t v23 = *(void *)(a3 + 56);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  long long v35 = *(_OWORD *)(a3 + 32);
  outlined init with copy of TableRowList(v5, (uint64_t)v50);
  uint64_t v24 = v51;
  uint64_t v25 = v52;
  __swift_project_boxed_opaque_existential_1(v50, v51);
  uint64_t v26 = *(void (**)(uint64_t *, uint64_t *, uint64_t, char **, uint64_t, uint64_t))(v25 + 8);
  uint64_t v45 = v22;
  uint64_t v46 = v39;
  long long v47 = v35;
  uint64_t v48 = v40;
  uint64_t v49 = v23;
  uint64_t v27 = type metadata accessor for Section<>.HeaderViewVisitor();
  v26(&v54, &v53, v27, &protocol witness table for Section<A, B, C><>.HeaderViewVisitor, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (v55) {
    v50[0] = v55;
  }
  else {
    ViewTraitCollection.init()();
  }
  uint64_t v29 = *(void *)(v5 + 88);
  char v30 = *(unsigned char *)(v6 + 96);
  uint64_t v45 = *(void *)(v6 + 80);
  uint64_t v28 = v45;
  uint64_t v46 = v29;
  LOBYTE(v47) = v30;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v28, v29);
  ViewTraitCollection.subscript.setter();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v14, 1, 1, AssociatedTypeWitness);
  uint64_t v44 = v54;
  outlined init with copy of TableRowList((uint64_t)v56, (uint64_t)&v45);
  uint64_t v43 = v50[0];
  uint64_t v31 = v42;
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t *, uint64_t *, uint64_t *, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(v42 + 8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  char v21 = v32(v14, &v44, &v45, &v43, AssociatedTypeWitness, MEMORY[0x1E4F41618], AssociatedConformanceWitness, MEMORY[0x1E4F41610], v41, v31);
  swift_bridgeObjectRelease();
  outlined destroy of Binding<Bool>((uint64_t)&v45, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718]);
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v38);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_10:
  outlined destroy of TableRowList((uint64_t)v56);
  return v21 & 1;
}

uint64_t Section<>.HierarchicalGenerator.count.getter()
{
  uint64_t v1 = v0;
  outlined init with copy of TableRowList(v0, (uint64_t)v8);
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  LOBYTE(v2) = TableRowGenerator.isEmpty.getter(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (v2) {
    return 1;
  }
  outlined init with copy of TableRowList(v1, (uint64_t)v8);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v4;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance Section<A, B, C><>.HierarchicalGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Section<>.HierarchicalGenerator.visitRows<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t static Section<>._tableRowCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v9 = a1[7];
  long long v29 = a1[6];
  long long v30 = v9;
  long long v31 = a1[8];
  uint64_t v32 = *((void *)a1 + 18);
  long long v10 = a1[3];
  long long v25 = a1[2];
  long long v26 = v10;
  long long v11 = a1[5];
  long long v27 = a1[4];
  long long v28 = v11;
  long long v12 = a1[1];
  long long v23 = *a1;
  long long v24 = v12;
  uint64_t v13 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a6 + 56))(&v23, a3, a6);
  if (v14) {
    return v13;
  }
  long long v15 = a1[7];
  long long v29 = a1[6];
  long long v30 = v15;
  long long v31 = a1[8];
  uint64_t v32 = *((void *)a1 + 18);
  long long v16 = a1[3];
  long long v25 = a1[2];
  long long v26 = v16;
  long long v17 = a1[5];
  long long v27 = a1[4];
  long long v28 = v17;
  long long v18 = a1[1];
  long long v23 = *a1;
  long long v24 = v18;
  uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a5 + 56))(&v23, a2, a5);
  uint64_t v21 = (v20 & 1) != 0 ? 0 : result;
  BOOL v22 = __OFADD__(v13, v21);
  v13 += v21;
  if (!v22) {
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t static Section<>._containsOutlineSymbol(inputs:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v9 = a1[7];
  long long v25 = a1[6];
  long long v26 = v9;
  long long v27 = a1[8];
  uint64_t v28 = *((void *)a1 + 18);
  long long v10 = a1[3];
  long long v21 = a1[2];
  long long v22 = v10;
  long long v11 = a1[5];
  long long v23 = a1[4];
  long long v24 = v11;
  long long v12 = a1[1];
  long long v19 = *a1;
  long long v20 = v12;
  if ((*(uint64_t (**)(long long *))(a5 + 64))(&v19))
  {
    char v13 = 1;
  }
  else
  {
    long long v14 = a1[7];
    long long v25 = a1[6];
    long long v26 = v14;
    long long v27 = a1[8];
    uint64_t v28 = *((void *)a1 + 18);
    long long v15 = a1[3];
    long long v21 = a1[2];
    long long v22 = v15;
    long long v16 = a1[5];
    long long v23 = a1[4];
    long long v24 = v16;
    long long v17 = a1[1];
    long long v19 = *a1;
    long long v20 = v17;
    char v13 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a6 + 64))(&v19, a3, a6);
  }
  return v13 & 1;
}

uint64_t Section<>.init<A, B>(header:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  v28[1] = a3;
  long long v29 = a2;
  uint64_t v30 = a8;
  v28[0] = a4;
  MEMORY[0x1F4188790](a1);
  char v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v33 = AssociatedConformanceWitness;
  uint64_t v34 = a7;
  uint64_t v20 = type metadata accessor for TableHeaderRowContent();
  double v21 = MEMORY[0x1F4188790](v20);
  long long v23 = (char *)v28 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, a1, a6, v21);
  uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v23, v18, a6);
  v29(v24);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, a6);
  uint64_t v25 = type metadata accessor for EmptyTableRowContent();
  return Section.init(header:content:footer:)((uint64_t)v23, (uint64_t)v13, v26, v20, v28[0], v25, v30);
}

uint64_t Section<>.init<A, B>(content:header:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8)
{
  v27[0] = a3;
  v27[1] = a2;
  uint64_t v28 = a1;
  uint64_t v29 = a7;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = AssociatedConformanceWitness;
  uint64_t v33 = a8;
  uint64_t v19 = type metadata accessor for TableHeaderRowContent();
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v27 - v21;
  ((void (*)(double))v27[0])(v20);
  uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v22, v17, a6);
  v28(v23);
  uint64_t v24 = type metadata accessor for EmptyTableRowContent();
  return Section.init(header:content:footer:)((uint64_t)v22, (uint64_t)v12, v25, v19, a4, v24, v29);
}

uint64_t Section<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  long long v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v22 = Text.init(_:tableName:bundle:comment:)();
  *((void *)&v22 + 1) = v11;
  char v23 = v12 & 1;
  uint64_t v24 = v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = MEMORY[0x1E4F41420];
  uint64_t v16 = (*(uint64_t (**)(long long *, long long *, void))(*(void *)(MEMORY[0x1E4F41420] - 8) + 32))(&v25, &v22, MEMORY[0x1E4F41420]);
  long long v22 = v25;
  char v23 = v26;
  uint64_t v24 = v27;
  a2(v16);
  v21[0] = a4;
  v21[1] = v15;
  void v21[2] = AssociatedConformanceWitness;
  v21[3] = MEMORY[0x1E4F41418];
  uint64_t v17 = type metadata accessor for TableHeaderRowContent();
  uint64_t v18 = type metadata accessor for EmptyTableRowContent();
  return Section.init(header:content:footer:)((uint64_t)&v22, (uint64_t)v10, v19, v17, a3, v18, a5);
}

uint64_t Section<>.init<A, B>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a6;
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17, v15);
  *(void *)&long long v34 = Text.init<A>(_:)();
  *((void *)&v34 + 1) = v18;
  char v35 = v19 & 1;
  uint64_t v36 = v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v22 = MEMORY[0x1E4F41420];
  uint64_t v23 = (*(uint64_t (**)(long long *, long long *, void))(*(void *)(MEMORY[0x1E4F41420] - 8) + 32))(&v37, &v34, MEMORY[0x1E4F41420]);
  long long v34 = v37;
  char v35 = v38;
  uint64_t v36 = v39;
  v28(v23);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a5);
  uint64_t v30 = a4;
  uint64_t v31 = v22;
  uint64_t v32 = AssociatedConformanceWitness;
  uint64_t v33 = MEMORY[0x1E4F41418];
  uint64_t v24 = type metadata accessor for TableHeaderRowContent();
  uint64_t v25 = type metadata accessor for EmptyTableRowContent();
  return Section.init(header:content:footer:)((uint64_t)&v34, (uint64_t)v11, v26, v24, a3, v25, v29);
}

uint64_t Section<>.init<A>(content:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  char v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedConformanceWitness();
  a1();
  uint64_t v8 = type metadata accessor for EmptyTableRowContent();
  return Section.init(header:content:footer:)(v8, (uint64_t)v7, v9, v8, a2, v8, a3);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <> Section<A, B, C>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Section<>._makeRows(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8), *(void *)(a4 - 16), *(void *)(a4 - 24), a5);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <> Section<A, B, C>(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Section<>._tableRowCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a4, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <> Section<A, B, C>(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Section<>._containsOutlineSymbol(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a4, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t Section<>.init<A, B>(isExpanded:content:header:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t (*a4)(void)@<X3>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v21[1] = a6;
  uint64_t v22 = a5;
  int v25 = a3;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v13 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](a10);
  double v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v26 = a8;
  uint64_t v27 = a9;
  uint64_t v28 = AssociatedConformanceWitness;
  uint64_t v29 = a11;
  type metadata accessor for TableHeaderRowContent();
  type metadata accessor for EmptyTableRowContent();
  uint64_t v17 = a7 + *(int *)(type metadata accessor for Section() + 52);
  uint64_t v18 = a4();
  v22(v18);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7, v15, a9);
  uint64_t v20 = v24;
  *(void *)uint64_t v17 = v23;
  *(void *)(v17 + 8) = v20;
  *(unsigned char *)(v17 + 16) = v25;
  return result;
}

uint64_t Section<>.init<A>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t (*a8)(void)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  char v17 = a3;
  uint64_t v18 = a4;
  Section<>.init<A, B>(isExpanded:content:header:)(a5, a6, a7, a8, (void (*)(uint64_t))partial apply for closure #1 in Section<>.init<A>(_:isExpanded:content:), (uint64_t)v14, a9, a12, MEMORY[0x1E4F41420], a13, MEMORY[0x1E4F41418]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Section<>.init<A, B>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t v16 = a9;
  uint64_t v17 = a10;
  uint64_t v18 = a11;
  uint64_t v19 = a1;
  Section<>.init<A, B>(isExpanded:content:header:)(a2, a3, a4, a5, (void (*)(uint64_t))partial apply for closure #1 in Section<>.init<A, B>(_:isExpanded:content:), (uint64_t)v13, a8, a7, MEMORY[0x1E4F41420], a10, MEMORY[0x1E4F41418]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a9 - 8) + 8))(a1, a9);
}

uint64_t closure #1 in Section<>.init<A, B>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t static EmptyTableRowContent._makeRows(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 136);
  int v3 = *(_DWORD *)(a2 + 144);
  PreferencesOutputs.init()();
  uint64_t v7 = &type metadata for EmptyTableRowGenerator;
  char v8 = &protocol witness table for EmptyTableRowGenerator;
  _s7SwiftUI7BindingVySbGMaTm_0(0, &lazy cache variable for type metadata for External<TableRowList>, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<TableRowList> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of TableRowList((uint64_t)&v5);
  uint64_t v5 = v2;
  int v6 = v3;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t static EmptyTableRowContent._tableRowCount(inputs:)()
{
  return 0;
}

uint64_t static EmptyTableRowContent._containsOutlineSymbol(inputs:)()
{
  return 0;
}

uint64_t TableHeaderRowContent.tableRowBody.getter()
{
  return TableRowSpan.init(content:)(partial apply for closure #1 in TableHeaderRowContent.tableRowBody.getter);
}

uint64_t closure #1 in TableHeaderRowContent.tableRowBody.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t static TableHeaderRowContent._containsOutlineSymbol(inputs:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type SectionHeaderTrait and conformance SectionHeaderTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait;
  if (!lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait);
  }
  return result;
}

uint64_t partial apply for closure #2 in static Section<>._makeRows(content:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Section<>._makeRows(content:inputs:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #2 in static Section<>._makeRows(content:inputs:));
}

unint64_t lazy protocol witness table accessor for type DepthTrait and conformance DepthTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait;
  if (!lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait);
  }
  return result;
}

uint64_t partial apply for closure #3 in static Section<>._makeRows(content:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Section<>._makeRows(content:inputs:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #3 in static Section<>._makeRows(content:inputs:));
}

uint64_t partial apply for closure #1 in static Section<>._makeRows(content:inputs:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t type metadata accessor for Section<>.HierarchicalTableRowList()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in _TableRowOutputs.writeRowListPreference(_:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(unsigned int *)(v4 + 16), a2, a3, a4);
}

uint64_t outlined release of _TableRowInputs(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for TableHeaderRowContent()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for EmptyTableRowContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in Section<>.init<A>(_:isExpanded:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextField<>.init<A>(_:value:format:prompt:)(a1);
}

uint64_t partial apply for closure #1 in Section<>.init<A, B>(_:isExpanded:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Section<>.init<A, B>(_:isExpanded:content:)(*(void *)(v1 + 56), a1);
}

unint64_t lazy protocol witness table accessor for type External<TableRowList> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<TableRowList> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<TableRowList> and conformance External<A>)
  {
    _s7SwiftUI7BindingVySbGMaTm_0(255, &lazy cache variable for type metadata for External<TableRowList>, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<TableRowList> and conformance External<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in TableHeaderRowContent.tableRowBody.getter()
{
  return closure #1 in TableHeaderRowContent.tableRowBody.getter(v0[6], v0[2], v0[3]);
}

_UNKNOWN **associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in <> Section<A, B, C>()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in <> Section<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for EmptyTableRowContent<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableHeaderRowContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for TableHeaderRowContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TableHeaderRowContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18795E610);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_18795E638()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in Section<A, B, C><>.HierarchicalTableRowList()
{
  return swift_getWitnessTable();
}

uint64_t specialized Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = v8;
  uint64_t v10 = *a3;
  v14[1] = *(_OWORD *)(a4 + 16);
  uint64_t v15 = *(void *)(a4 + 32);
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  long long v18 = *(_OWORD *)(a4 + 40);
  uint64_t v19 = *(void *)(a4 + 56);
  uint64_t v20 = a7;
  uint64_t v21 = a8;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:), (uint64_t)v14, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v11, (uint64_t)&v22);
  uint64_t v12 = v22;
  swift_release();
  *BOOL v9 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[1] = v10;
  return 0;
}

uint64_t type metadata accessor for Section<>.HierarchicalGenerator()
{
  return swift_getGenericMetadata();
}

uint64_t sub_18795E790()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  if (*(void *)(v0 + 104))
  {
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t destroy for Section<>.HierarchicalGenerator(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  if (*(void *)(a1 + 88))
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Section<>.HierarchicalGenerator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  uint64_t v6 = *(void *)(a2 + 88);
  if (v6)
  {
    *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v6;
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 80);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  }
  return a1;
}

uint64_t assignWithCopy for Section<>.HierarchicalGenerator(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  long long v4 = (_OWORD *)(a1 + 80);
  long long v5 = (_OWORD *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88))
  {
    if (v6)
    {
      *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
      swift_retain();
      swift_release();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1 + 80, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
      char v7 = *(unsigned char *)(a2 + 96);
      *long long v4 = *v5;
      *(unsigned char *)(a1 + 96) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v8 = *v5;
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    *long long v4 = v8;
  }
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Section<>.HierarchicalGenerator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  if (!*(void *)(a1 + 88)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 88);
  if (!v5)
  {
    outlined destroy of Binding<Bool>(a1 + 80, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
LABEL_5:
    *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 80);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    return a1;
  }
  *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = v5;
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for Section<>.HierarchicalGenerator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 97)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Section<>.HierarchicalGenerator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for Section<>.HeaderViewVisitor()
{
  return swift_getGenericMetadata();
}

uint64_t outlined destroy of Binding<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  _s7SwiftUI7BindingVySbGMaTm_0(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t destroy for Section<>.HeaderViewVisitor()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for Section<>.HeaderViewVisitor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Section<>.HeaderViewVisitor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Section<>.HeaderViewVisitor(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #1 in Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)(a1, a2);
}

void SystemSegmentItem.hash(into:)()
{
  uint64_t v1 = v0;
  if (*v0)
  {
    id v2 = objc_msgSend(*v0, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v3 = PlatformItemList.Item.image.getter();
  if (v3)
  {
    long long v4 = (void *)v3;
    Hasher._combine(_:)(1u);
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*((unsigned char *)v1 + 56));
  if (v1[60])
  {
    Swift::UInt v5 = *((unsigned __int8 *)v1 + 496);
    Swift::UInt v6 = (Swift::UInt)v1[61];
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemSegmentItem()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemSegmentItem()
{
  return Hasher._finalize()();
}

uint64_t specialized static SystemSegmentItem.== infix(_:_:)(id *a1, void **a2)
{
  uint64_t v4 = type metadata accessor for SystemSegmentItem();
  MEMORY[0x1F4188790](v4 - 8);
  Swift::UInt v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  BOOL v9 = (char *)&v81 - v8;
  MEMORY[0x1F4188790](v10);
  long long v85 = (char *)&v81 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v84 = (uint64_t)&v81 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v86 = (uint64_t)&v81 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v87 = (uint64_t)&v81 - v17;
  MEMORY[0x1F4188790](v18);
  long long v89 = (uint64_t *)((char *)&v81 - v19);
  MEMORY[0x1F4188790](v20);
  int v83 = (char *)&v81 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v81 - v23;
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v81 - v27;
  long long v88 = a1;
  if (*a1)
  {
    id v29 = objc_msgSend(*a1, sel_string, v26);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    uint64_t v33 = *a2;
    if (!*a2)
    {
      if (!v32) {
        goto LABEL_14;
      }
      goto LABEL_25;
    }
    long long v34 = v6;
    char v35 = v9;
  }
  else
  {
    uint64_t v33 = *a2;
    if (!*a2)
    {
LABEL_14:
      uint64_t v40 = (uint64_t)v88;
      outlined init with copy of SystemSegmentItem((uint64_t)v88, (uint64_t)v28);
      outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v24);
      uint64_t v41 = v83;
      goto LABEL_15;
    }
    long long v34 = v6;
    char v35 = v9;
    uint64_t v32 = 0;
    uint64_t v30 = 0;
  }
  id v36 = objc_msgSend(v33, sel_string);
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  if (!v32)
  {
    BOOL v9 = v35;
    Swift::UInt v6 = v34;
    if (!v39) {
      goto LABEL_14;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v40 = (uint64_t)v88;
    outlined init with copy of SystemSegmentItem((uint64_t)v88, (uint64_t)v28);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v24);
    uint64_t v41 = v83;
    goto LABEL_26;
  }
  if (!v39)
  {
    BOOL v9 = v35;
    Swift::UInt v6 = v34;
    goto LABEL_25;
  }
  if (v30 == v37 && v32 == v39)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v9 = v35;
    Swift::UInt v6 = v34;
    goto LABEL_14;
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = (uint64_t)v88;
  outlined init with copy of SystemSegmentItem((uint64_t)v88, (uint64_t)v28);
  outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v24);
  BOOL v9 = v35;
  Swift::UInt v6 = v34;
  uint64_t v41 = v83;
  if ((v56 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v42 = (void *)PlatformItemList.Item.image.getter();
  uint64_t v43 = (void *)PlatformItemList.Item.image.getter();
  uint64_t v44 = v43;
  if (!v42)
  {

    if (!v44)
    {
      _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      outlined init with copy of SystemSegmentItem(v40, (uint64_t)v41);
      uint64_t v45 = v89;
      outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v89);
      goto LABEL_21;
    }
    goto LABEL_26;
  }

  if (!v44)
  {
LABEL_26:
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    outlined init with copy of SystemSegmentItem(v40, (uint64_t)v41);
    uint64_t v45 = v89;
    outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v89);
    goto LABEL_27;
  }
  _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  outlined init with copy of SystemSegmentItem(v40, (uint64_t)v41);
  uint64_t v45 = v89;
  outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v89);
  if (v42 != v44)
  {
LABEL_27:
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    uint64_t v52 = (uint64_t)v85;
    uint64_t v51 = v86;
    uint64_t v46 = v87;
LABEL_28:
    outlined init with copy of SystemSegmentItem(v40, v46);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, v51);
    goto LABEL_29;
  }
LABEL_21:
  uint64_t v46 = v87;
  if (*((void *)v41 + 66))
  {
    uint64_t v47 = *((void *)v41 + 67);
    uint64_t v48 = *((void *)v41 + 68);
    uint64_t v49 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v49, (uint64_t)&v92);
    swift_bridgeObjectRelease();
    if (v92)
    {
      uint64_t v92 = v47;
      uint64_t v93 = v48;
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      swift_retain();
      swift_retain();
      uint64_t v82 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
      int v83 = v50;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v82 = 0;
      int v83 = 0;
    }
    uint64_t v45 = v89;
    uint64_t v57 = v89[66];
    if (v57) {
      goto LABEL_40;
    }
LABEL_37:
    uint64_t v58 = 0;
    goto LABEL_44;
  }
  uint64_t v82 = 0;
  int v83 = 0;
  uint64_t v57 = v45[66];
  if (!v57) {
    goto LABEL_37;
  }
LABEL_40:
  uint64_t v59 = v45[67];
  uint64_t v60 = v45[68];
  uint64_t v61 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v61, (uint64_t)&v92);
  swift_bridgeObjectRelease();
  if (v92)
  {
    uint64_t v92 = v59;
    uint64_t v93 = v60;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    swift_retain();
    swift_retain();
    uint64_t v57 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    uint64_t v58 = v62;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
  }
  uint64_t v40 = (uint64_t)v88;
LABEL_44:
  uint64_t v52 = (uint64_t)v85;
  if (!v83)
  {
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v89, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    if (!v58) {
      goto LABEL_51;
    }
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  if (!v58)
  {
    swift_bridgeObjectRetain();
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v89, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    swift_bridgeObjectRelease_n();
LABEL_53:
    uint64_t v51 = v86;
    goto LABEL_28;
  }
  if (v82 == v57 && v83 == v58)
  {
    swift_bridgeObjectRelease();
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v89, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    swift_bridgeObjectRelease();
LABEL_51:
    outlined init with copy of SystemSegmentItem(v40, v46);
    uint64_t v51 = v86;
    outlined init with copy of SystemSegmentItem((uint64_t)a2, v86);
    goto LABEL_55;
  }
  char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v89, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  uint64_t v46 = v87;
  _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  swift_bridgeObjectRelease();
  outlined init with copy of SystemSegmentItem(v40, v46);
  uint64_t v51 = v86;
  outlined init with copy of SystemSegmentItem((uint64_t)a2, v86);
  if ((v63 & 1) == 0)
  {
LABEL_29:
    _s7SwiftUI17SystemSegmentItemVWOhTm_0(v46, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0(v51, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    uint64_t v53 = v84;
    outlined init with copy of SystemSegmentItem(v40, v84);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, v52);
LABEL_30:
    _s7SwiftUI17SystemSegmentItemVWOhTm_0(v52, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0(v53, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    outlined init with copy of SystemSegmentItem(v40, (uint64_t)v9);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v6);
LABEL_31:
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    return 0;
  }
LABEL_55:
  if (*(void *)(v46 + 528))
  {
    uint64_t v64 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v64, (uint64_t)&v92);
    swift_bridgeObjectRelease();
    uint64_t v65 = v93;
    if (!*(void *)(v51 + 528))
    {
      if (v93) {
        goto LABEL_79;
      }
      goto LABEL_70;
    }
    uint64_t v66 = v92;
    int v67 = v94;
  }
  else
  {
    if (!*(void *)(v51 + 528)) {
      goto LABEL_70;
    }
    int v67 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
  }
  uint64_t v68 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v68, (uint64_t)&v92);
  swift_bridgeObjectRelease();
  if (!v65)
  {
    uint64_t v46 = v87;
    if (v93)
    {
LABEL_79:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
LABEL_70:
    _s7SwiftUI17SystemSegmentItemVWOhTm_0(v46, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0(v51, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    uint64_t v53 = v84;
    outlined init with copy of SystemSegmentItem(v40, v84);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, v52);
    goto LABEL_71;
  }
  if (!v93)
  {
    uint64_t v46 = v87;
    goto LABEL_79;
  }
  int v69 = v94;
  if ((v66 != v92 || v65 != v93) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v51 = v86;
    uint64_t v46 = v87;
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s7SwiftUI17SystemSegmentItemVWOhTm_0(v87, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  _s7SwiftUI17SystemSegmentItemVWOhTm_0(v86, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  uint64_t v53 = v84;
  outlined init with copy of SystemSegmentItem(v40, v84);
  outlined init with copy of SystemSegmentItem((uint64_t)a2, v52);
  if (v69 != v67) {
    goto LABEL_30;
  }
LABEL_71:
  uint64_t v70 = v53;
  int v71 = *(unsigned __int8 *)(v53 + 56);
  _s7SwiftUI17SystemSegmentItemVWOhTm_0(v70, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  int v72 = *(unsigned __int8 *)(v52 + 56);
  _s7SwiftUI17SystemSegmentItemVWOhTm_0(v52, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  outlined init with copy of SystemSegmentItem(v40, (uint64_t)v9);
  outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v6);
  if (v71 != v72) {
    goto LABEL_31;
  }
  uint64_t v73 = *((void *)v9 + 60);
  uint64_t v74 = *((void *)v6 + 60);
  if (v73)
  {
    if (v74)
    {
      long long v75 = v6;
      uint64_t v76 = *((void *)v9 + 61);
      int v77 = v9[496];
      uint64_t v78 = *((void *)v75 + 61);
      uint64_t v79 = (uint64_t)v75;
      int v80 = v75[496];
      if (*((void *)v9 + 59) == *((void *)v75 + 59) && v73 == v74)
      {
        if (v76 != v78)
        {
          BOOL v54 = 0;
LABEL_88:
          swift_bridgeObjectRetain_n();
          _s7SwiftUI17SystemSegmentItemVWOhTm_0(v79, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
          _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
          swift_bridgeObjectRelease_n();
          return v54;
        }
      }
      else
      {
        BOOL v54 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v76 != v78) {
          goto LABEL_88;
        }
      }
      BOOL v54 = v77 == v80;
      goto LABEL_88;
    }
    swift_bridgeObjectRetain_n();
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    if (!v74)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for SystemSegmentItem()
{
  uint64_t result = type metadata singleton initialization cache for SystemSegmentItem;
  if (!type metadata singleton initialization cache for SystemSegmentItem) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemSegmentItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *initializeBufferWithCopyOfBuffer for SystemSegmentItem(char *a1, char **a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  Swift::UInt v6 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = &v6[(v5 + 16) & ~(unint64_t)v5];
    goto LABEL_47;
  }
  uint64_t v8 = a2[1];
  uint64_t v7 = a2[2];
  *((void *)a1 + 1) = v8;
  *((void *)a1 + 2) = v7;
  *((void *)a1 + 3) = a2[3];
  a1[32] = *((unsigned char *)a2 + 32);
  BOOL v9 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v9;
  a1[56] = *((unsigned char *)a2 + 56);
  uint64_t v10 = a1 + 64;
  uint64_t v11 = a2 + 8;
  unint64_t v12 = (unint64_t)a2[23];
  uint64_t v13 = v6;
  uint64_t v14 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 >> 1 != 4294967294)
  {
    int v24 = *((unsigned __int8 *)a2 + 72);
    if (v24 == 255)
    {
      *uint64_t v10 = *v11;
      a1[72] = *((unsigned char *)a2 + 72);
    }
    else
    {
      uint64_t v25 = a2[8];
      outlined copy of GraphicsImage.Contents(v25, *((unsigned char *)a2 + 72));
      *((void *)a1 + 8) = v25;
      a1[72] = v24;
      unint64_t v12 = (unint64_t)a2[23];
    }
    *((void *)a1 + 1outlined consume of Text?(0, 0, 0, 0) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    a1[104] = *((unsigned char *)a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    a1[124] = *((unsigned char *)a2 + 124);
    long long v26 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v26;
    *((_WORD *)a1 + 8outlined consume of Text?(0, 0, 0, 0) = *((_WORD *)a2 + 80);
    a1[162] = *((unsigned char *)a2 + 162);
    a1[163] = *((unsigned char *)a2 + 163);
    if (v12 >> 1 == 0xFFFFFFFF)
    {
      long long v27 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 184) = v27;
    }
    else
    {
      uint64_t v28 = (uint64_t)a2[21];
      uint64_t v29 = (uint64_t)a2[22];
      uint64_t v30 = a2[24];
      outlined copy of AccessibilityImageLabel(v28, v29, v12);
      *((void *)a1 + 21) = v28;
      *((void *)a1 + 22) = v29;
      *((void *)a1 + 23) = v12;
      *((void *)a1 + 24) = v30;
    }
    uint64_t v31 = a2[26];
    *((void *)a1 + 25) = a2[25];
    *((void *)a1 + 26) = v31;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    a1[224] = *((unsigned char *)a2 + 224);
    uint64_t v32 = a2[29];
    *((void *)a1 + 29) = v32;
    *((_WORD *)a1 + 12outlined consume of Text?(0, 0, 0, 0) = *((_WORD *)a2 + 120);
    a1[242] = *((unsigned char *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v33 = v32;
    uint64_t v20 = a2[32];
    if (v20) {
      goto LABEL_4;
    }
LABEL_15:
    long long v34 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v34;
    *(_OWORD *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 35);
    goto LABEL_16;
  }
  long long v15 = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = v15;
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)a2 + 239);
  long long v16 = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = v16;
  long long v17 = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 1outlined consume of Text?(0, 0, 0, 0) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = v17;
  long long v18 = *((_OWORD *)a2 + 5);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)a1 + 5) = v18;
  long long v19 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v19;
  uint64_t v20 = a2[32];
  if (!v20) {
    goto LABEL_15;
  }
LABEL_4:
  *((void *)a1 + 31) = a2[31];
  *((void *)a1 + 32) = v20;
  uint64_t v21 = a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v21 >= 2) {
    uint64_t v22 = v21;
  }
  *((void *)a1 + 33) = v21;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  a1[276] = *((unsigned char *)a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
  uint64_t v23 = a2[36];
  *((void *)a1 + 35) = a2[35];
  *((void *)a1 + 36) = v23;
  swift_retain();
  swift_retain();
LABEL_16:
  unint64_t v35 = (unint64_t)a2[41];
  unsigned __int8 v94 = (int *)v4;
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    long long v36 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v36;
    *((void *)a1 + 49) = a2[49];
    long long v37 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v37;
    long long v38 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v38;
  }
  else
  {
    uint64_t v39 = a2[37];
    uint64_t v40 = (uint64_t)a2[38];
    uint64_t v41 = (uint64_t)a2[39];
    uint64_t v42 = (uint64_t)a2[40];
    uint64_t v43 = (uint64_t)a2[42];
    uint64_t v44 = (uint64_t)a2[43];
    uint64_t v45 = a2[44];
    uint64_t v85 = (uint64_t)a2[45];
    uint64_t v86 = (uint64_t)a2[46];
    uint64_t v87 = (uint64_t)a2[47];
    long long v89 = a2[48];
    __dsta = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v35, v43, v44, (char)v45, v85, v86, v87, (char)v89, (uint64_t)__dsta);
    *((void *)a1 + 37) = v39;
    *((void *)a1 + 38) = v40;
    *((void *)a1 + 39) = v41;
    *((void *)a1 + 4outlined consume of Text?(0, 0, 0, 0) = v42;
    *((void *)a1 + 41) = v35;
    *((void *)a1 + 42) = v43;
    *((void *)a1 + 43) = v44;
    *((void *)a1 + 44) = v45;
    *((void *)a1 + 45) = v85;
    *((void *)a1 + 46) = v86;
    *((void *)a1 + 47) = v87;
    *((void *)a1 + 48) = v89;
    uint64_t v4 = (uint64_t)v94;
    *((void *)a1 + 49) = __dsta;
  }
  uint64_t v46 = a2[51];
  if (v46 != (char *)1)
  {
    *((_DWORD *)a1 + 10outlined consume of Text?(0, 0, 0, 0) = *((_DWORD *)a2 + 100);
    a1[404] = *((unsigned char *)a2 + 404);
    if (v46)
    {
      uint64_t v49 = a2[52];
      *((void *)a1 + 51) = v46;
      *((void *)a1 + 52) = v49;
      swift_retain();
      uint64_t v50 = a2[53];
      if (v50) {
        goto LABEL_23;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
      uint64_t v50 = a2[53];
      if (v50)
      {
LABEL_23:
        uint64_t v51 = a2[54];
        *((void *)a1 + 53) = v50;
        *((void *)a1 + 54) = v51;
        swift_retain();
        uint64_t v52 = a2[55];
        if (v52)
        {
LABEL_24:
          uint64_t v53 = a2[56];
          *((void *)a1 + 55) = v52;
          *((void *)a1 + 56) = v53;
          swift_retain();
LABEL_28:
          *((void *)a1 + 57) = a2[57];
          a1[464] = *((unsigned char *)a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 55);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    uint64_t v52 = a2[55];
    if (v52) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  long long v47 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v47;
  a1[464] = *((unsigned char *)a2 + 464);
  long long v48 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v48;
LABEL_29:
  BOOL v54 = a2[60];
  *((void *)a1 + 59) = a2[59];
  *((void *)a1 + 6outlined consume of Text?(0, 0, 0, 0) = v54;
  *((void *)a1 + 61) = a2[61];
  a1[496] = *((unsigned char *)a2 + 496);
  uint64_t v55 = a2[63];
  swift_bridgeObjectRetain();
  if (v55)
  {
    char v56 = a2[64];
    *((void *)a1 + 63) = v55;
    *((void *)a1 + 64) = v56;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 26outlined consume of Text?(0, 0, 0, 0) = *((_WORD *)a2 + 260);
  uint64_t v57 = a2[66];
  if (v57)
  {
    *((void *)a1 + 66) = v57;
    *((void *)a1 + 67) = a2[67];
    *((void *)a1 + 68) = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((void *)a1 + 68) = a2[68];
  }
  uint64_t v58 = a2[69];
  if (v58 == (char *)1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *((void *)a1 + 71) = a2[71];
  }
  else
  {
    *((void *)a1 + 69) = v58;
    uint64_t v59 = a2[70];
    swift_retain();
    if (v59)
    {
      uint64_t v60 = a2[71];
      *((void *)a1 + 7outlined consume of Text?(0, 0, 0, 0) = v59;
      *((void *)a1 + 71) = v60;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  uint64_t v61 = a2[72];
  *((void *)a1 + 72) = v61;
  *((void *)a1 + 73) = a2[73];
  *((void *)a1 + 74) = a2[74];
  *((void *)a1 + 75) = a2[75];
  *((void *)a1 + 76) = a2[76];
  *((void *)a1 + 77) = a2[77];
  *((void *)a1 + 78) = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  a1[634] = *((unsigned char *)a2 + 634);
  uint64_t v62 = *(int *)(v4 + 112);
  __dst = &a1[v62];
  char v63 = (char *)a2 + v62;
  uint64_t v64 = type metadata accessor for CommandOperation();
  uint64_t v88 = *(void *)(v64 - 8);
  uint64_t v90 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v88 + 48);
  uint64_t v65 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v90(v63, 1, v64))
  {
    type metadata accessor for CommandOperation?(0);
    memcpy(__dst, v63, *(void *)(*(void *)(v66 - 8) + 64));
    int v67 = v94;
  }
  else
  {
    char *__dst = *v63;
    uint64_t v68 = *(int *)(v64 + 20);
    int v69 = &__dst[v68];
    uint64_t v70 = &v63[v68];
    uint64_t v91 = v63;
    uint64_t v71 = v64;
    uint64_t v72 = *(void *)v70;
    uint64_t v73 = *((void *)v70 + 1);
    char v74 = v70[16];
    outlined copy of Text.Storage(*(void *)v70, v73, v74);
    *(void *)int v69 = v72;
    *((void *)v69 + 1) = v73;
    v69[16] = v74;
    *((void *)v69 + 3) = *((void *)v70 + 3);
    uint64_t v75 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v76 = &v69[v75];
    int v77 = &v70[v75];
    uint64_t v78 = type metadata accessor for UUID();
    uint64_t v79 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v78 - 8) + 16);
    swift_bridgeObjectRetain();
    v79(v76, v77, v78);
    uint64_t v80 = *(int *)(v71 + 24);
    uint64_t v81 = &__dst[v80];
    uint64_t v82 = &v91[v80];
    if (*v82)
    {
      uint64_t v83 = v82[1];
      *(void *)uint64_t v81 = *v82;
      *((void *)v81 + 1) = v83;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    }
    int v67 = v94;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v71);
  }
  a1[v67[29]] = *((unsigned char *)a2 + v67[29]);
  a1[v67[30]] = *((unsigned char *)a2 + v67[30]);
  a1[v67[31]] = *((unsigned char *)a2 + v67[31]);
  a1[v67[32]] = *((unsigned char *)a2 + v67[32]);
  *(void *)&a1[v67[33]] = *(char **)((char *)a2 + v67[33]);
LABEL_47:
  swift_retain();
  return a1;
}

uint64_t destroy for SystemSegmentItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v4);
      uint64_t v2 = *(void *)(a1 + 184);
      unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v3 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v2);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    int v5 = *(void **)(a1 + 264);
    if ((unint64_t)v5 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v6 = *(void *)(a1 + 328);
  if (v6 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v6, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
  }
  uint64_t v7 = *(void *)(a1 + 408);
  if (v7)
  {
    if (v7 == 1) {
      goto LABEL_20;
    }
    swift_release();
  }
  if (*(void *)(a1 + 424)) {
    swift_release();
  }
  if (*(void *)(a1 + 440)) {
    swift_release();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 504)) {
    swift_release();
  }
  if (*(void *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(void *)(a1 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
  uint64_t v9 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = v8 + *(int *)(v9 + 20);
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    if (*(void *)(v8 + *(int *)(v9 + 24))) {
      swift_release();
    }
  }

  return swift_release();
}

uint64_t initializeWithCopy for SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  int v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = a1 + 64;
  uint64_t v9 = a2 + 64;
  unint64_t v10 = *(void *)(a2 + 184);
  id v11 = v4;
  id v12 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v10 >> 1 != 4294967294)
  {
    int v22 = *(unsigned __int8 *)(a2 + 72);
    if (v22 == 255)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
    }
    else
    {
      uint64_t v23 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v23, *(unsigned char *)(a2 + 72));
      *(void *)(a1 + 64) = v23;
      *(unsigned char *)(a1 + 72) = v22;
      unint64_t v10 = *(void *)(a2 + 184);
    }
    *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    long long v24 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v24;
    *(_WORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 160);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    if (v10 >> 1 == 0xFFFFFFFF)
    {
      long long v25 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v25;
    }
    else
    {
      uint64_t v26 = *(void *)(a2 + 168);
      uint64_t v27 = *(void *)(a2 + 176);
      uint64_t v28 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v26, v27, v10);
      *(void *)(a1 + 168) = v26;
      *(void *)(a1 + 176) = v27;
      *(void *)(a1 + 184) = v10;
      *(void *)(a1 + 192) = v28;
    }
    uint64_t v29 = *(void *)(a2 + 208);
    *(void *)(a1 + 20outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v29;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 22outlined consume of Text?(0, 0, 0, 0) = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    uint64_t v30 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v30;
    *(_WORD *)(a1 + 24outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v31 = v30;
    uint64_t v18 = *(void *)(a2 + 256);
    if (v18) {
      goto LABEL_3;
    }
LABEL_13:
    long long v32 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v32;
    *(_OWORD *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 280);
    goto LABEL_14;
  }
  long long v13 = *(_OWORD *)(v9 + 144);
  *(_OWORD *)(v8 + 128) = *(_OWORD *)(v9 + 128);
  *(_OWORD *)(v8 + 144) = v13;
  *(_OWORD *)(v8 + 16outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(v9 + 160);
  *(_DWORD *)(v8 + 175) = *(_DWORD *)(v9 + 175);
  long long v14 = *(_OWORD *)(v9 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(v8 + 8outlined consume of Text?(0, 0, 0, 0) = v14;
  long long v15 = *(_OWORD *)(v9 + 112);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
  *(_OWORD *)(v8 + 112) = v15;
  long long v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v16;
  long long v17 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v17;
  uint64_t v18 = *(void *)(a2 + 256);
  if (!v18) {
    goto LABEL_13;
  }
LABEL_3:
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v18;
  long long v19 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v19 >= 2) {
    id v20 = v19;
  }
  *(void *)(a1 + 264) = v19;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  uint64_t v21 = *(void *)(a2 + 288);
  *(void *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v21;
  swift_retain();
  swift_retain();
LABEL_14:
  unint64_t v33 = *(void *)(a2 + 328);
  if (v33 >> 2 == 0xFFFFFFFF)
  {
    long long v34 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v34;
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    long long v35 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v35;
    long long v36 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v36;
  }
  else
  {
    long long v37 = *(void **)(a2 + 296);
    uint64_t v38 = *(void *)(a2 + 304);
    uint64_t v39 = *(void *)(a2 + 312);
    uint64_t v40 = *(void *)(a2 + 320);
    uint64_t v41 = *(void *)(a2 + 336);
    uint64_t v42 = *(void *)(a2 + 344);
    uint64_t v43 = *(void *)(a2 + 352);
    uint64_t v83 = *(void *)(a2 + 360);
    uint64_t v85 = *(void *)(a2 + 368);
    uint64_t v87 = *(void *)(a2 + 376);
    __dsta = *(void **)(a2 + 384);
    uint64_t v91 = *(void *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v37, v38, v39, v40, v33, v41, v42, v43, v83, v85, v87, (char)__dsta, v91);
    *(void *)(a1 + 296) = v37;
    *(void *)(a1 + 304) = v38;
    *(void *)(a1 + 312) = v39;
    *(void *)(a1 + 32outlined consume of Text?(0, 0, 0, 0) = v40;
    *(void *)(a1 + 328) = v33;
    *(void *)(a1 + 336) = v41;
    *(void *)(a1 + 344) = v42;
    *(void *)(a1 + 352) = v43;
    *(void *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = v83;
    *(void *)(a1 + 368) = v85;
    *(void *)(a1 + 376) = v87;
    *(void *)(a1 + 384) = __dsta;
    *(void *)(a1 + 392) = v91;
  }
  uint64_t v44 = *(void *)(a2 + 408);
  if (v44 == 1)
  {
    long long v45 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v45;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
    long long v46 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 40outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v46;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 40outlined consume of Text?(0, 0, 0, 0) = *(_DWORD *)(a2 + 400);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  if (v44)
  {
    uint64_t v47 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v44;
    *(void *)(a1 + 416) = v47;
    swift_retain();
    uint64_t v48 = *(void *)(a2 + 424);
    if (v48) {
      goto LABEL_21;
    }
LABEL_24:
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    uint64_t v50 = *(void *)(a2 + 440);
    if (v50) {
      goto LABEL_22;
    }
LABEL_25:
    *(_OWORD *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 440);
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  uint64_t v48 = *(void *)(a2 + 424);
  if (!v48) {
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v49 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = v48;
  *(void *)(a1 + 432) = v49;
  swift_retain();
  uint64_t v50 = *(void *)(a2 + 440);
  if (!v50) {
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v51 = *(void *)(a2 + 448);
  *(void *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = v50;
  *(void *)(a1 + 448) = v51;
  swift_retain();
LABEL_26:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_27:
  uint64_t v52 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 48outlined consume of Text?(0, 0, 0, 0) = v52;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v53 = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v53)
  {
    uint64_t v54 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v53;
    *(void *)(a1 + 512) = v54;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 52outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 520);
  uint64_t v55 = *(void *)(a2 + 528);
  if (v55)
  {
    *(void *)(a1 + 528) = v55;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
  }
  uint64_t v56 = *(void *)(a2 + 552);
  if (v56 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
  }
  else
  {
    *(void *)(a1 + 552) = v56;
    uint64_t v57 = *(void *)(a2 + 560);
    swift_retain();
    if (v57)
    {
      uint64_t v58 = *(void *)(a2 + 568);
      *(void *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = v57;
      *(void *)(a1 + 568) = v58;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 560);
    }
  }
  uint64_t v59 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v59;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 60outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v60 = type metadata accessor for PlatformItemList.Item();
  uint64_t v61 = *(int *)(v60 + 112);
  __dst = (unsigned char *)(a1 + v61);
  uint64_t v92 = (int *)v60;
  uint64_t v62 = (unsigned char *)(a2 + v61);
  uint64_t v63 = type metadata accessor for CommandOperation();
  uint64_t v86 = *(void *)(v63 - 8);
  uint64_t v88 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v86 + 48);
  id v64 = v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v88(v62, 1, v63))
  {
    type metadata accessor for CommandOperation?(0);
    memcpy(__dst, v62, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    unsigned char *__dst = *v62;
    uint64_t v66 = *(int *)(v63 + 20);
    int v67 = v62;
    uint64_t v84 = v62;
    uint64_t v68 = &__dst[v66];
    int v69 = &v67[v66];
    uint64_t v70 = *(void *)&v67[v66];
    uint64_t v71 = *(void *)&v67[v66 + 8];
    char v72 = v67[v66 + 16];
    outlined copy of Text.Storage(v70, v71, v72);
    *(void *)uint64_t v68 = v70;
    *((void *)v68 + 1) = v71;
    v68[16] = v72;
    *((void *)v68 + 3) = *((void *)v69 + 3);
    uint64_t v73 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    char v74 = &v68[v73];
    uint64_t v75 = &v69[v73];
    uint64_t v76 = type metadata accessor for UUID();
    int v77 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v76 - 8) + 16);
    swift_bridgeObjectRetain();
    v77(v74, v75, v76);
    uint64_t v78 = *(int *)(v63 + 24);
    uint64_t v79 = &__dst[v78];
    uint64_t v80 = &v84[v78];
    if (*v80)
    {
      uint64_t v81 = v80[1];
      *uint64_t v79 = *v80;
      v79[1] = v81;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v63);
  }
  *(unsigned char *)(a1 + v92[29]) = *(unsigned char *)(a2 + v92[29]);
  *(unsigned char *)(a1 + v92[30]) = *(unsigned char *)(a2 + v92[30]);
  *(unsigned char *)(a1 + v92[31]) = *(unsigned char *)(a2 + v92[31]);
  *(unsigned char *)(a1 + v92[32]) = *(unsigned char *)(a2 + v92[32]);
  *(void *)(a1 + v92[33]) = *(void *)(a2 + v92[33]);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 278;
  int v5 = *(void **)a1;
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v7 = v6;

  uint64_t v8 = *(void **)(a1 + 8);
  uint64_t v9 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v9;
  id v10 = v9;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  id v11 = (_OWORD *)(a1 + 64);
  id v12 = (id *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 184) >> 1 == 4294967294)
  {
    if (v13 == 0x1FFFFFFFCLL)
    {
      long long v14 = *(_OWORD *)v12;
      long long v15 = *(_OWORD *)(a2 + 80);
      long long v16 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v16;
      *id v11 = v14;
      *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v15;
      long long v17 = *(_OWORD *)(a2 + 128);
      long long v18 = *(_OWORD *)(a2 + 144);
      long long v19 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v19;
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v18;
      long long v20 = *(_OWORD *)(a2 + 192);
      long long v21 = *(_OWORD *)(a2 + 208);
      long long v22 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v21;
      *(_OWORD *)(a1 + 224) = v22;
      *(_OWORD *)(a1 + 192) = v20;
    }
    else
    {
      int v32 = *(unsigned __int8 *)(a2 + 72);
      if (v32 == 255)
      {
        id v38 = *v12;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)id v11 = v38;
      }
      else
      {
        id v33 = *v12;
        outlined copy of GraphicsImage.Contents(*v12, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v33;
        *(unsigned char *)(a1 + 72) = v32;
      }
      *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      long long v39 = *(_OWORD *)(a2 + 108);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v39;
      long long v40 = *(_OWORD *)(a2 + 128);
      long long v41 = *(_OWORD *)(a2 + 144);
      *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v40;
      *(_OWORD *)(a1 + 144) = v41;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      unint64_t v42 = *(void *)(a2 + 184);
      if (v42 >> 1 == 0xFFFFFFFF)
      {
        long long v43 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v43;
      }
      else
      {
        uint64_t v44 = *(void *)(a2 + 168);
        uint64_t v45 = *(void *)(a2 + 176);
        uint64_t v46 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v44, v45, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v44;
        *(void *)(a1 + 176) = v45;
        *(void *)(a1 + 184) = v42;
        *(void *)(a1 + 192) = v46;
      }
      *(void *)(a1 + 20outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      int v47 = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(_DWORD *)(a1 + 22outlined consume of Text?(0, 0, 0, 0) = v47;
      uint64_t v48 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v48;
      *(_WORD *)(a1 + 24outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 240);
      *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v49 = v48;
    }
  }
  else if (v13 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 64);
    long long v23 = *(_OWORD *)(a2 + 112);
    long long v25 = *(_OWORD *)v12;
    long long v24 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v23;
    *id v11 = v25;
    *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v24;
    long long v26 = *(_OWORD *)(a2 + 176);
    long long v28 = *(_OWORD *)(a2 + 128);
    long long v27 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
    *(_OWORD *)(a1 + 128) = v28;
    *(_OWORD *)(a1 + 144) = v27;
    long long v30 = *(_OWORD *)(a2 + 208);
    long long v29 = *(_OWORD *)(a2 + 224);
    long long v31 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    *(_OWORD *)(a1 + 208) = v30;
    *(_OWORD *)(a1 + 224) = v29;
    *(_OWORD *)(a1 + 192) = v31;
  }
  else
  {
    int v34 = *(unsigned __int8 *)(a2 + 72);
    if (*(unsigned __int8 *)(a1 + 72) == 255)
    {
      if (v34 == 255)
      {
        id v52 = *v12;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)id v11 = v52;
      }
      else
      {
        id v50 = *v12;
        outlined copy of GraphicsImage.Contents(*v12, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v50;
        *(unsigned char *)(a1 + 72) = v34;
      }
    }
    else if (v34 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 64);
      char v51 = *(unsigned char *)(a2 + 72);
      *(void *)id v11 = *v12;
      *(unsigned char *)(a1 + 72) = v51;
    }
    else
    {
      id v35 = *v12;
      outlined copy of GraphicsImage.Contents(*v12, *(unsigned char *)(a2 + 72));
      long long v36 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v35;
      char v37 = *(unsigned char *)(a1 + 72);
      *(unsigned char *)(a1 + 72) = v34;
      outlined consume of GraphicsImage.Contents(v36, v37);
    }
    *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    long long v53 = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v53;
    long long v54 = *(_OWORD *)(a2 + 128);
    long long v55 = *(_OWORD *)(a2 + 144);
    *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v54;
    *(_OWORD *)(a1 + 144) = v55;
    *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    uint64_t v56 = (_OWORD *)(a1 + 168);
    uint64_t v57 = (_OWORD *)(a2 + 168);
    uint64_t v58 = *(void *)(a2 + 184);
    unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 184) >> 1 == 0xFFFFFFFFLL)
    {
      if (v59 == 0x1FFFFFFFELL)
      {
        long long v60 = *(_OWORD *)(a2 + 184);
        *uint64_t v56 = *v57;
        *(_OWORD *)(a1 + 184) = v60;
      }
      else
      {
        uint64_t v62 = *(void *)(a2 + 168);
        uint64_t v63 = *(void *)(a2 + 176);
        uint64_t v64 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v62, v63, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v62;
        *(void *)(a1 + 176) = v63;
        *(void *)(a1 + 184) = v58;
        *(void *)(a1 + 192) = v64;
      }
    }
    else if (v59 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 168);
      long long v61 = *(_OWORD *)(a2 + 184);
      *uint64_t v56 = *v57;
      *(_OWORD *)(a1 + 184) = v61;
    }
    else
    {
      uint64_t v65 = *(void *)(a2 + 168);
      uint64_t v66 = *(void *)(a2 + 176);
      uint64_t v67 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v65, v66, *(void *)(a2 + 184));
      uint64_t v68 = *(void *)(a1 + 168);
      uint64_t v69 = *(void *)(a1 + 176);
      uint64_t v70 = *(void *)(a1 + 184);
      *(void *)(a1 + 168) = v65;
      *(void *)(a1 + 176) = v66;
      *(void *)(a1 + 184) = v58;
      *(void *)(a1 + 192) = v67;
      outlined consume of AccessibilityImageLabel(v68, v69, v70);
    }
    *(void *)(a1 + 20outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 200);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
    int v71 = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(_DWORD *)(a1 + 22outlined consume of Text?(0, 0, 0, 0) = v71;
    char v72 = *(void **)(a1 + 232);
    uint64_t v73 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v73;
    id v74 = v73;

    *(_WORD *)(a1 + 24outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  }
  uint64_t v75 = (_OWORD *)(a1 + 248);
  uint64_t v76 = (_OWORD *)(a2 + 248);
  uint64_t v77 = *(void *)(a2 + 256);
  if (*(void *)(a1 + 256))
  {
    if (!v77)
    {
      outlined destroy of Image.NamedResolved(a1 + 248);
      long long v85 = *(_OWORD *)(a2 + 264);
      long long v84 = *(_OWORD *)(a2 + 280);
      *uint64_t v75 = *v76;
      *(_OWORD *)(a1 + 264) = v85;
      *(_OWORD *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = v84;
      goto LABEL_44;
    }
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v78 = *(void **)(a1 + 264);
    uint64_t v79 = *(void **)(a2 + 264);
    if ((unint64_t)v78 >= 2)
    {
      if ((unint64_t)v79 >= 2)
      {
        *(void *)(a1 + 264) = v79;
        id v88 = v79;

        goto LABEL_43;
      }

      uint64_t v79 = *(void **)(a2 + 264);
    }
    else if ((unint64_t)v79 >= 2)
    {
      *(void *)(a1 + 264) = v79;
      id v80 = v79;
LABEL_43:
      int v89 = *(_DWORD *)(a2 + 272);
      *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
      *(_DWORD *)(a1 + 272) = v89;
      *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
      *(unsigned char *)(a1 + 278) = *(unsigned char *)v4;
      *(void *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 280);
      swift_retain();
      swift_release();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_retain();
      swift_release();
      goto LABEL_44;
    }
    *(void *)(a1 + 264) = v79;
    goto LABEL_43;
  }
  if (v77)
  {
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    uint64_t v81 = *(void **)(a2 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v81 >= 2) {
      id v82 = v81;
    }
    *(void *)(a1 + 264) = v81;
    int v83 = *(_DWORD *)(a2 + 272);
    *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
    *(_DWORD *)(a1 + 272) = v83;
    *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
    *(unsigned char *)(a1 + 278) = *(unsigned char *)(a2 + 278);
    *(void *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v86 = *v76;
    long long v87 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = v87;
    *uint64_t v75 = v86;
  }
LABEL_44:
  uint64_t v90 = (long long *)(a1 + 296);
  uint64_t v91 = (long long *)(a2 + 296);
  unint64_t v92 = *(void *)(a2 + 328);
  unint64_t v93 = v92 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(void *)(a1 + 328) >> 2 == 0xFFFFFFFFLL)
  {
    if (v93 == 0x3FFFFFFFCLL)
    {
      long long v94 = *v91;
      long long v95 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v95;
      *uint64_t v90 = v94;
      long long v96 = *(_OWORD *)(a2 + 344);
      long long v97 = *(_OWORD *)(a2 + 360);
      long long v98 = *(_OWORD *)(a2 + 376);
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      *(_OWORD *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = v97;
      *(_OWORD *)(a1 + 376) = v98;
      *(_OWORD *)(a1 + 344) = v96;
    }
    else
    {
      uint64_t v104 = *(void **)(a2 + 296);
      uint64_t v105 = *(void *)(a2 + 304);
      uint64_t v231 = v4;
      uint64_t v106 = *(void *)(a2 + 312);
      uint64_t v107 = *(void *)(a2 + 320);
      uint64_t v108 = *(void *)(a2 + 336);
      uint64_t v109 = *(void *)(a2 + 344);
      uint64_t v110 = *(void *)(a2 + 352);
      uint64_t v219 = *(void *)(a2 + 360);
      uint64_t v221 = *(void *)(a2 + 368);
      uint64_t v223 = *(void *)(a2 + 376);
      uint64_t v225 = *(void *)(a2 + 384);
      uint64_t v228 = *(void *)(a2 + 392);
      outlined copy of PlatformItemList.Item.SystemItem(v104, v105, v106, v107, v92, v108, v109, v110, v219, v221, v223, v225, v228);
      *(void *)(a1 + 296) = v104;
      *(void *)(a1 + 304) = v105;
      *(void *)(a1 + 312) = v106;
      *(void *)(a1 + 32outlined consume of Text?(0, 0, 0, 0) = v107;
      *(void *)(a1 + 328) = v92;
      *(void *)(a1 + 336) = v108;
      *(void *)(a1 + 344) = v109;
      *(void *)(a1 + 352) = v110;
      *(void *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = v219;
      *(void *)(a1 + 368) = v221;
      *(void *)(a1 + 376) = v223;
      *(void *)(a1 + 384) = v225;
      uint64_t v4 = v231;
      *(void *)(a1 + 392) = v228;
    }
  }
  else if (v93 == 0x3FFFFFFFCLL)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    long long v100 = *(_OWORD *)(a2 + 312);
    long long v99 = *(_OWORD *)(a2 + 328);
    *uint64_t v90 = *v91;
    *(_OWORD *)(a1 + 312) = v100;
    *(_OWORD *)(a1 + 328) = v99;
    long long v102 = *(_OWORD *)(a2 + 360);
    long long v101 = *(_OWORD *)(a2 + 376);
    long long v103 = *(_OWORD *)(a2 + 344);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(_OWORD *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = v102;
    *(_OWORD *)(a1 + 376) = v101;
    *(_OWORD *)(a1 + 344) = v103;
  }
  else
  {
    uint64_t v111 = *(void **)(a2 + 296);
    uint64_t v112 = *(void *)(a2 + 304);
    uint64_t v232 = v4;
    uint64_t v113 = *(void *)(a2 + 312);
    uint64_t v114 = *(void *)(a2 + 320);
    uint64_t v115 = *(void *)(a2 + 336);
    uint64_t v116 = *(void *)(a2 + 344);
    uint64_t v117 = *(void *)(a2 + 352);
    uint64_t v220 = *(void *)(a2 + 360);
    uint64_t v222 = *(void *)(a2 + 368);
    uint64_t v224 = *(void *)(a2 + 376);
    uint64_t v226 = *(void *)(a2 + 384);
    uint64_t v229 = *(void *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v111, v112, v113, v114, v92, v115, v116, v117, v220, v222, v224, v226, v229);
    id v118 = *(void **)(a1 + 296);
    uint64_t v119 = *(void *)(a1 + 304);
    uint64_t v120 = *(void *)(a1 + 312);
    uint64_t v121 = *(void *)(a1 + 320);
    unint64_t v122 = *(void *)(a1 + 328);
    uint64_t v123 = *(void *)(a1 + 336);
    uint64_t v124 = *(void *)(a1 + 344);
    uint64_t v125 = *(void *)(a1 + 352);
    long long v126 = *(_OWORD *)(a1 + 360);
    long long v127 = *(_OWORD *)(a1 + 376);
    uint64_t v128 = *(void *)(a1 + 392);
    *(void *)(a1 + 296) = v111;
    *(void *)(a1 + 304) = v112;
    *(void *)(a1 + 312) = v113;
    *(void *)(a1 + 32outlined consume of Text?(0, 0, 0, 0) = v114;
    *(void *)(a1 + 328) = v92;
    *(void *)(a1 + 336) = v115;
    *(void *)(a1 + 344) = v116;
    *(void *)(a1 + 352) = v117;
    *(void *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = v220;
    *(void *)(a1 + 368) = v222;
    *(void *)(a1 + 376) = v224;
    *(void *)(a1 + 384) = v226;
    uint64_t v4 = v232;
    *(void *)(a1 + 392) = v229;
    outlined consume of PlatformItemList.Item.SystemItem(v118, v119, v120, v121, v122, v123, v124, v125, v126, *((uint64_t *)&v126 + 1), v127, SBYTE8(v127), v128);
  }
  uint64_t v129 = (_OWORD *)(a1 + 400);
  uint64_t v130 = (_OWORD *)(v4 + 122);
  uint64_t v131 = (_OWORD *)(a1 + 408);
  uint64_t v132 = *(void *)(a1 + 408);
  uint64_t v133 = (_OWORD *)(a2 + 408);
  uint64_t v134 = *(void *)(a2 + 408);
  if (v132 != 1)
  {
    if (v134 == 1)
    {
      outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
      _OWORD *v129 = *v130;
      long long v139 = *(_OWORD *)(v4 + 154);
      long long v138 = *(_OWORD *)(v4 + 170);
      long long v140 = *(_OWORD *)(v4 + 138);
      *(unsigned char *)(a1 + 464) = *(unsigned char *)(v4 + 186);
      *(_OWORD *)(a1 + 432) = v139;
      *(_OWORD *)(a1 + 448) = v138;
      *(_OWORD *)(a1 + 416) = v140;
      goto LABEL_85;
    }
    *(unsigned char *)(a1 + 40outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(v4 + 122);
    *(unsigned char *)(a1 + 401) = *(unsigned char *)(v4 + 123);
    *(unsigned char *)(a1 + 402) = *(unsigned char *)(v4 + 124);
    *(unsigned char *)(a1 + 403) = *(unsigned char *)(v4 + 125);
    *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
    uint64_t v146 = *(void *)(a2 + 408);
    if (v132)
    {
      if (v146)
      {
        uint64_t v147 = *(void *)(a2 + 416);
        *(void *)(a1 + 408) = v146;
        *(void *)(a1 + 416) = v147;
        swift_retain();
        swift_release();
        goto LABEL_70;
      }
      swift_release();
    }
    else if (v146)
    {
      uint64_t v148 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v146;
      *(void *)(a1 + 416) = v148;
      swift_retain();
      goto LABEL_70;
    }
    *uint64_t v131 = *v133;
LABEL_70:
    uint64_t v149 = *(void *)(a2 + 424);
    if (*(void *)(a1 + 424))
    {
      if (v149)
      {
        uint64_t v150 = *(void *)(a2 + 432);
        *(void *)(a1 + 424) = v149;
        *(void *)(a1 + 432) = v150;
        swift_retain();
        swift_release();
        goto LABEL_77;
      }
      swift_release();
    }
    else if (v149)
    {
      uint64_t v151 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v149;
      *(void *)(a1 + 432) = v151;
      swift_retain();
      goto LABEL_77;
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_77:
    uint64_t v145 = *(void *)(a2 + 440);
    if (*(void *)(a1 + 440))
    {
      if (v145)
      {
        uint64_t v152 = *(void *)(a2 + 448);
        *(void *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = v145;
        *(void *)(a1 + 448) = v152;
        swift_retain();
        swift_release();
        goto LABEL_84;
      }
      swift_release();
    }
    else if (v145)
    {
      goto LABEL_81;
    }
    *(_OWORD *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 440);
    goto LABEL_84;
  }
  if (v134 == 1)
  {
    _OWORD *v129 = *v130;
    long long v135 = *(_OWORD *)(v4 + 138);
    long long v136 = *(_OWORD *)(v4 + 154);
    long long v137 = *(_OWORD *)(v4 + 170);
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(v4 + 186);
    *(_OWORD *)(a1 + 432) = v136;
    *(_OWORD *)(a1 + 448) = v137;
    *(_OWORD *)(a1 + 416) = v135;
    goto LABEL_85;
  }
  *(unsigned char *)(a1 + 40outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 400);
  *(unsigned char *)(a1 + 401) = *(unsigned char *)(a2 + 401);
  *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
  *(unsigned char *)(a1 + 403) = *(unsigned char *)(a2 + 403);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  uint64_t v141 = *(void *)(a2 + 408);
  if (v141)
  {
    uint64_t v142 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v141;
    *(void *)(a1 + 416) = v142;
    swift_retain();
    uint64_t v143 = *(void *)(a2 + 424);
    if (v143) {
      goto LABEL_58;
    }
  }
  else
  {
    *uint64_t v131 = *v133;
    uint64_t v143 = *(void *)(a2 + 424);
    if (v143)
    {
LABEL_58:
      uint64_t v144 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v143;
      *(void *)(a1 + 432) = v144;
      swift_retain();
      uint64_t v145 = *(void *)(a2 + 440);
      if (!v145) {
        goto LABEL_65;
      }
LABEL_81:
      uint64_t v153 = *(void *)(a2 + 448);
      *(void *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = v145;
      *(void *)(a1 + 448) = v153;
      swift_retain();
      goto LABEL_84;
    }
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  uint64_t v145 = *(void *)(a2 + 440);
  if (v145) {
    goto LABEL_81;
  }
LABEL_65:
  *(_OWORD *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 440);
LABEL_84:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_85:
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 48outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v154 = *(void *)(a2 + 504);
  if (*(void *)(a1 + 504))
  {
    if (v154)
    {
      uint64_t v155 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v154;
      *(void *)(a1 + 512) = v155;
      swift_retain();
      swift_release();
      goto LABEL_92;
    }
    swift_release();
  }
  else if (v154)
  {
    uint64_t v156 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v154;
    *(void *)(a1 + 512) = v156;
    swift_retain();
    goto LABEL_92;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_92:
  *(_WORD *)(a1 + 52outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 520);
  char v157 = (_OWORD *)(a1 + 528);
  v158 = (_OWORD *)(a2 + 528);
  uint64_t v159 = *(void *)(a2 + 528);
  if (*(void *)(a1 + 528))
  {
    if (v159)
    {
      *(void *)(a1 + 528) = v159;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      swift_retain();
      swift_release();
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
      uint64_t v160 = *(void *)(a2 + 544);
      *char v157 = *v158;
      *(void *)(a1 + 544) = v160;
    }
  }
  else if (v159)
  {
    *(void *)(a1 + 528) = v159;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v161 = *v158;
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    *char v157 = v161;
  }
  v162 = (_OWORD *)(a1 + 552);
  v163 = (_OWORD *)(a2 + 552);
  uint64_t v164 = *(void *)(a2 + 552);
  if (*(void *)(a1 + 552) != 1)
  {
    if (v164 == 1)
    {
      outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
      uint64_t v166 = *(void *)(a2 + 568);
      _OWORD *v162 = *v163;
      *(void *)(a1 + 568) = v166;
      goto LABEL_116;
    }
    *(void *)(a1 + 552) = v164;
    swift_retain();
    swift_release();
    v162 = (_OWORD *)(a1 + 560);
    uint64_t v169 = *(void *)(a2 + 560);
    if (*(void *)(a1 + 560))
    {
      if (v169)
      {
        uint64_t v170 = *(void *)(a2 + 568);
        *(void *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = v169;
        *(void *)(a1 + 568) = v170;
        swift_retain();
        swift_release();
        goto LABEL_116;
      }
      swift_release();
    }
    else if (v169)
    {
      uint64_t v168 = *(void *)(a2 + 568);
      *(void *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = v169;
LABEL_112:
      *(void *)(a1 + 568) = v168;
      swift_retain();
      goto LABEL_116;
    }
    long long v165 = *(_OWORD *)(a2 + 560);
    goto LABEL_115;
  }
  if (v164 != 1)
  {
    *(void *)(a1 + 552) = v164;
    uint64_t v167 = *(void *)(a2 + 560);
    swift_retain();
    if (!v167)
    {
      *(_OWORD *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 560);
      goto LABEL_116;
    }
    uint64_t v168 = *(void *)(a2 + 568);
    *(void *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = v167;
    goto LABEL_112;
  }
  long long v165 = *v163;
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
LABEL_115:
  _OWORD *v162 = v165;
LABEL_116:
  v171 = *(void **)(a1 + 576);
  uint64_t v172 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v172;
  id v173 = v172;

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 60outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(unsigned char *)(a1 + 633) = *(unsigned char *)(a2 + 633);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v174 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v175 = v174[28];
  v176 = (unsigned char *)(a1 + v175);
  v177 = (unsigned char *)(a2 + v175);
  uint64_t v178 = type metadata accessor for CommandOperation();
  uint64_t v179 = *(void *)(v178 - 8);
  v180 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v179 + 48);
  int v181 = v180(v176, 1, v178);
  int v182 = v180(v177, 1, v178);
  if (!v181)
  {
    if (!v182)
    {
      unsigned char *v176 = *v177;
      uint64_t v199 = *(int *)(v178 + 20);
      v200 = &v176[v199];
      v234 = v177;
      v201 = &v177[v199];
      uint64_t v202 = *(void *)v201;
      uint64_t v203 = *((void *)v201 + 1);
      char v204 = v201[16];
      outlined copy of Text.Storage(*(void *)v201, v203, v204);
      uint64_t v205 = *(void *)v200;
      uint64_t v206 = *((void *)v200 + 1);
      char v207 = v200[16];
      *(void *)v200 = v202;
      *((void *)v200 + 1) = v203;
      v200[16] = v204;
      outlined consume of Text.Storage(v205, v206, v207);
      *((void *)v200 + 3) = *((void *)v201 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v208 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v209 = &v200[v208];
      v210 = &v201[v208];
      uint64_t v211 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v211 - 8) + 24))(v209, v210, v211);
      uint64_t v212 = *(int *)(v178 + 24);
      v213 = &v176[v212];
      v214 = &v234[v212];
      uint64_t v215 = *(void *)&v234[v212];
      if (*v213)
      {
        if (v215)
        {
          uint64_t v216 = *((void *)v214 + 1);
          void *v213 = v215;
          v213[1] = v216;
          swift_retain();
          swift_release();
          goto LABEL_128;
        }
        swift_release();
      }
      else if (v215)
      {
        uint64_t v218 = *((void *)v214 + 1);
        void *v213 = v215;
        v213[1] = v218;
        swift_retain();
        goto LABEL_128;
      }
      *(_OWORD *)v213 = *(_OWORD *)v214;
      goto LABEL_128;
    }
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v176, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    goto LABEL_122;
  }
  if (v182)
  {
LABEL_122:
    type metadata accessor for CommandOperation?(0);
    memcpy(v176, v177, *(void *)(*(void *)(v198 - 8) + 64));
    goto LABEL_128;
  }
  unsigned char *v176 = *v177;
  uint64_t v183 = *(int *)(v178 + 20);
  v184 = v177;
  v230 = v176;
  v233 = v177;
  v185 = &v176[v183];
  v186 = &v184[v183];
  uint64_t v187 = *(void *)&v184[v183];
  uint64_t v188 = *(void *)&v184[v183 + 8];
  char v189 = v184[v183 + 16];
  outlined copy of Text.Storage(v187, v188, v189);
  *(void *)v185 = v187;
  *((void *)v185 + 1) = v188;
  v185[16] = v189;
  *((void *)v185 + 3) = *((void *)v186 + 3);
  uint64_t v190 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v227 = &v185[v190];
  v191 = &v186[v190];
  uint64_t v192 = type metadata accessor for UUID();
  v193 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v192 - 8) + 16);
  swift_bridgeObjectRetain();
  v193(v227, v191, v192);
  uint64_t v194 = *(int *)(v178 + 24);
  v195 = &v230[v194];
  v196 = &v233[v194];
  if (*v196)
  {
    uint64_t v197 = v196[1];
    void *v195 = *v196;
    v195[1] = v197;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v195 = *(_OWORD *)v196;
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v179 + 56))(v230, 0, 1, v178);
LABEL_128:
  *(unsigned char *)(a1 + v174[29]) = *(unsigned char *)(a2 + v174[29]);
  *(unsigned char *)(a1 + v174[30]) = *(unsigned char *)(a2 + v174[30]);
  *(unsigned char *)(a1 + v174[31]) = *(unsigned char *)(a2 + v174[31]);
  *(unsigned char *)(a1 + v174[32]) = *(unsigned char *)(a2 + v174[32]);
  *(void *)(a1 + v174[33]) = *(void *)(a2 + v174[33]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s7SwiftUI17SystemSegmentItemVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v6;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  long long v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v9;
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  long long v11 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = v11;
  long long v12 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v12;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  long long v13 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v13;
  long long v14 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v14;
  long long v15 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v15;
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  long long v16 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 40outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v16;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
  uint64_t v17 = *(void *)(a2 + 504);
  if (v17)
  {
    uint64_t v18 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v17;
    *(void *)(a1 + 512) = v18;
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 52outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 60outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 600);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  long long v19 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v20 = v19[28];
  long long v21 = (unsigned char *)(a1 + v20);
  long long v22 = (unsigned char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for CommandOperation();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    type metadata accessor for CommandOperation?(0);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *long long v21 = *v22;
    uint64_t v26 = *(int *)(v23 + 20);
    long long v27 = &v21[v26];
    long long v28 = &v22[v26];
    long long v29 = *(_OWORD *)&v22[v26 + 16];
    *long long v27 = *(_OWORD *)&v22[v26];
    v27[1] = v29;
    uint64_t v30 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    long long v31 = (char *)v27 + v30;
    int v32 = &v28[v30];
    uint64_t v33 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
    uint64_t v34 = *(int *)(v23 + 24);
    id v35 = &v21[v34];
    long long v36 = (uint64_t *)&v22[v34];
    uint64_t v37 = *v36;
    if (*v36)
    {
      uint64_t v38 = v36[1];
      *id v35 = v37;
      v35[1] = v38;
    }
    else
    {
      *(_OWORD *)id v35 = *(_OWORD *)v36;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(unsigned char *)(a1 + v19[29]) = *(unsigned char *)(a2 + v19[29]);
  *(unsigned char *)(a1 + v19[30]) = *(unsigned char *)(a2 + v19[30]);
  *(unsigned char *)(a1 + v19[31]) = *(unsigned char *)(a2 + v19[31]);
  *(unsigned char *)(a1 + v19[32]) = *(unsigned char *)(a2 + v19[32]);
  *(void *)(a1 + v19[33]) = *(void *)(a2 + v19[33]);
  return a1;
}

uint64_t assignWithTake for SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 278;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  long long v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v9 = (_OWORD *)(a1 + 64);
  long long v10 = (_OWORD *)(a2 + 64);
  if (*(void *)(a1 + 184) >> 1 == 4294967294) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 184) >> 1 == 4294967294)
  {
    outlined destroy of Image.Resolved(a1 + 64);
LABEL_4:
    long long v11 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v11;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *long long v9 = *v10;
    *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v14;
    long long v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    goto LABEL_16;
  }
  int v16 = *(unsigned __int8 *)(a1 + 72);
  if (v16 != 255)
  {
    int v17 = *(unsigned __int8 *)(a2 + 72);
    if (v17 != 255)
    {
      uint64_t v18 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = *(void *)v10;
      *(unsigned char *)(a1 + 72) = v17;
      outlined consume of GraphicsImage.Contents(v18, v16);
      goto LABEL_10;
    }
    outlined destroy of GraphicsImage.Contents(a1 + 64);
  }
  *(void *)long long v9 = *(void *)v10;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
LABEL_10:
  *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  long long v19 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v19;
  *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  unint64_t v20 = *(void *)(a1 + 184);
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  if (v20 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v21 = *(void *)(a2 + 184);
    if (v21 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v23 = *(void *)(a2 + 192);
      uint64_t v24 = *(void *)(a1 + 168);
      uint64_t v25 = *(void *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(void *)(a1 + 184) = v21;
      *(void *)(a1 + 192) = v23;
      outlined consume of AccessibilityImageLabel(v24, v25, v20);
      goto LABEL_15;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 168);
  }
  long long v22 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v22;
LABEL_15:
  *(void *)(a1 + 20outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 200);
  swift_unknownObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
  *(_DWORD *)(a1 + 22outlined consume of Text?(0, 0, 0, 0) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  uint64_t v26 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);

  *(_WORD *)(a1 + 24outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 240);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
LABEL_16:
  if (!*(void *)(a1 + 256))
  {
LABEL_21:
    long long v30 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v30;
    *(_OWORD *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 280);
    goto LABEL_26;
  }
  uint64_t v27 = *(void *)(a2 + 256);
  if (!v27)
  {
    outlined destroy of Image.NamedResolved(a1 + 248);
    goto LABEL_21;
  }
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v27;
  swift_bridgeObjectRelease();
  long long v28 = *(void **)(a1 + 264);
  unint64_t v29 = *(void *)(a2 + 264);
  if ((unint64_t)v28 >= 2)
  {
    if (v29 >= 2)
    {
      *(void *)(a1 + 264) = v29;
    }
    else
    {

      *(void *)(a1 + 264) = *(void *)(a2 + 264);
    }
  }
  else
  {
    *(void *)(a1 + 264) = v29;
  }
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_WORD *)(a1 + 276) = *(_WORD *)(a2 + 276);
  *(unsigned char *)(a1 + 278) = *(unsigned char *)v4;
  *(void *)(a1 + 28outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 280);
  swift_release();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_release();
LABEL_26:
  long long v31 = (_OWORD *)(a1 + 296);
  unint64_t v32 = *(void *)(a1 + 328);
  if (v32 >> 2 == 0xFFFFFFFF)
  {
LABEL_29:
    long long v34 = *(_OWORD *)(v4 + 98);
    *(_OWORD *)(a1 + 36outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(v4 + 82);
    *(_OWORD *)(a1 + 376) = v34;
    *(void *)(a1 + 392) = *(void *)(v4 + 114);
    long long v35 = *(_OWORD *)(v4 + 34);
    *long long v31 = *(_OWORD *)(v4 + 18);
    *(_OWORD *)(a1 + 312) = v35;
    long long v36 = *(_OWORD *)(v4 + 66);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v4 + 50);
    *(_OWORD *)(a1 + 344) = v36;
    goto LABEL_31;
  }
  unint64_t v33 = *(void *)(a2 + 328);
  if (v33 >> 2 == 0xFFFFFFFF)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    goto LABEL_29;
  }
  uint64_t v37 = *(void **)(a1 + 296);
  uint64_t v38 = *(void *)(a1 + 304);
  uint64_t v39 = *(void *)(a1 + 312);
  uint64_t v40 = *(void *)(a1 + 320);
  uint64_t v41 = *(void *)(a1 + 336);
  uint64_t v42 = *(void *)(a1 + 344);
  uint64_t v43 = *(void *)(a1 + 352);
  long long v44 = *(_OWORD *)(a1 + 360);
  long long v45 = *(_OWORD *)(a1 + 376);
  uint64_t v46 = *(void *)(a1 + 392);
  long long v47 = *(_OWORD *)(v4 + 34);
  *long long v31 = *(_OWORD *)(v4 + 18);
  *(_OWORD *)(a1 + 312) = v47;
  *(void *)(a1 + 328) = v33;
  long long v48 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v48;
  long long v49 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v49;
  outlined consume of PlatformItemList.Item.SystemItem(v37, v38, v39, v40, v32, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v45, SBYTE8(v45), v46);
LABEL_31:
  uint64_t v50 = *(void *)(a1 + 408);
  if (v50 == 1)
  {
LABEL_34:
    long long v52 = *(_OWORD *)(v4 + 170);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v4 + 154);
    *(_OWORD *)(a1 + 448) = v52;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(v4 + 186);
    long long v53 = *(_OWORD *)(v4 + 138);
    *(_OWORD *)(a1 + 40outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(v4 + 122);
    *(_OWORD *)(a1 + 416) = v53;
    goto LABEL_57;
  }
  uint64_t v51 = *(void *)(a2 + 408);
  if (v51 == 1)
  {
    outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
    goto LABEL_34;
  }
  *(unsigned char *)(a1 + 40outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(v4 + 122);
  *(unsigned char *)(a1 + 401) = *(unsigned char *)(v4 + 123);
  *(unsigned char *)(a1 + 402) = *(unsigned char *)(v4 + 124);
  *(unsigned char *)(a1 + 403) = *(unsigned char *)(v4 + 125);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  if (v50)
  {
    if (v51)
    {
      uint64_t v54 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v51;
      *(void *)(a1 + 416) = v54;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v51)
  {
    uint64_t v55 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v51;
    *(void *)(a1 + 416) = v55;
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
LABEL_42:
  uint64_t v56 = *(void *)(a2 + 424);
  if (*(void *)(a1 + 424))
  {
    if (v56)
    {
      uint64_t v57 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v56;
      *(void *)(a1 + 432) = v57;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v56)
  {
    uint64_t v58 = *(void *)(a2 + 432);
    *(void *)(a1 + 424) = v56;
    *(void *)(a1 + 432) = v58;
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_49:
  uint64_t v59 = *(void *)(a2 + 440);
  if (!*(void *)(a1 + 440))
  {
    if (v59)
    {
      uint64_t v61 = *(void *)(a2 + 448);
      *(void *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = v59;
      *(void *)(a1 + 448) = v61;
      goto LABEL_56;
    }
LABEL_55:
    *(_OWORD *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 440);
    goto LABEL_56;
  }
  if (!v59)
  {
    swift_release();
    goto LABEL_55;
  }
  uint64_t v60 = *(void *)(a2 + 448);
  *(void *)(a1 + 44outlined consume of Text?(0, 0, 0, 0) = v59;
  *(void *)(a1 + 448) = v60;
  swift_release();
LABEL_56:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_57:
  uint64_t v62 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 48outlined consume of Text?(0, 0, 0, 0) = v62;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v63 = *(void *)(a2 + 504);
  if (*(void *)(a1 + 504))
  {
    if (v63)
    {
      uint64_t v64 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v63;
      *(void *)(a1 + 512) = v64;
      swift_release();
      goto LABEL_64;
    }
    swift_release();
  }
  else if (v63)
  {
    uint64_t v65 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v63;
    *(void *)(a1 + 512) = v65;
    goto LABEL_64;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_64:
  *(_WORD *)(a1 + 52outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 520);
  if (*(void *)(a1 + 528))
  {
    uint64_t v66 = *(void *)(a2 + 528);
    if (v66)
    {
      *(void *)(a1 + 528) = v66;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      swift_release();
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_release();
      goto LABEL_69;
    }
    outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
LABEL_69:
  if (*(void *)(a1 + 552) == 1)
  {
LABEL_72:
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    goto LABEL_73;
  }
  uint64_t v67 = *(void *)(a2 + 552);
  if (v67 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    goto LABEL_72;
  }
  *(void *)(a1 + 552) = v67;
  swift_release();
  uint64_t v92 = *(void *)(a2 + 560);
  if (*(void *)(a1 + 560))
  {
    if (v92)
    {
      uint64_t v93 = *(void *)(a2 + 568);
      *(void *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = v92;
      *(void *)(a1 + 568) = v93;
      swift_release();
      goto LABEL_73;
    }
    swift_release();
  }
  else if (v92)
  {
    uint64_t v109 = *(void *)(a2 + 568);
    *(void *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = v92;
    *(void *)(a1 + 568) = v109;
    goto LABEL_73;
  }
  *(_OWORD *)(a1 + 56outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 560);
LABEL_73:
  uint64_t v68 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 60outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  uint64_t v69 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v70 = v69[28];
  int v71 = (unsigned char *)(a1 + v70);
  char v72 = (unsigned char *)(a2 + v70);
  uint64_t v73 = type metadata accessor for CommandOperation();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v74 + 48);
  int v76 = v75(v71, 1, v73);
  int v77 = v75(v72, 1, v73);
  if (!v76)
  {
    if (!v77)
    {
      *int v71 = *v72;
      uint64_t v94 = *(int *)(v73 + 20);
      long long v95 = &v71[v94];
      long long v96 = &v72[v94];
      LOBYTE(v94) = v72[v94 + 16];
      uint64_t v97 = *(void *)v95;
      uint64_t v98 = *((void *)v95 + 1);
      char v99 = v95[16];
      *(_OWORD *)long long v95 = *(_OWORD *)v96;
      v95[16] = v94;
      outlined consume of Text.Storage(v97, v98, v99);
      *((void *)v95 + 3) = *((void *)v96 + 3);
      swift_bridgeObjectRelease();
      uint64_t v100 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      long long v101 = &v95[v100];
      long long v102 = &v96[v100];
      uint64_t v103 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v103 - 8) + 40))(v101, v102, v103);
      uint64_t v104 = *(int *)(v73 + 24);
      uint64_t v105 = &v71[v104];
      uint64_t v106 = (uint64_t *)&v72[v104];
      uint64_t v107 = *v106;
      if (*v105)
      {
        if (v107)
        {
          uint64_t v108 = v106[1];
          *uint64_t v105 = v107;
          v105[1] = v108;
          swift_release();
          goto LABEL_90;
        }
        swift_release();
      }
      else if (v107)
      {
        uint64_t v111 = v106[1];
        *uint64_t v105 = v107;
        v105[1] = v111;
        goto LABEL_90;
      }
      *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
      goto LABEL_90;
    }
    _s7SwiftUI17SystemSegmentItemVWOhTm_0((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    goto LABEL_79;
  }
  if (v77)
  {
LABEL_79:
    type metadata accessor for CommandOperation?(0);
    memcpy(v71, v72, *(void *)(*(void *)(v91 - 8) + 64));
    goto LABEL_90;
  }
  *int v71 = *v72;
  uint64_t v78 = *(int *)(v73 + 20);
  uint64_t v79 = &v71[v78];
  id v80 = &v72[v78];
  long long v81 = *(_OWORD *)&v72[v78 + 16];
  *uint64_t v79 = *(_OWORD *)&v72[v78];
  v79[1] = v81;
  uint64_t v82 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  int v83 = (char *)v79 + v82;
  long long v84 = &v80[v82];
  uint64_t v85 = type metadata accessor for UUID();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v85 - 8) + 32))(v83, v84, v85);
  uint64_t v86 = *(int *)(v73 + 24);
  long long v87 = &v71[v86];
  id v88 = (uint64_t *)&v72[v86];
  uint64_t v89 = *v88;
  if (*v88)
  {
    uint64_t v90 = v88[1];
    *long long v87 = v89;
    v87[1] = v90;
  }
  else
  {
    *(_OWORD *)long long v87 = *(_OWORD *)v88;
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
LABEL_90:
  *(unsigned char *)(a1 + v69[29]) = *(unsigned char *)(a2 + v69[29]);
  *(unsigned char *)(a1 + v69[30]) = *(unsigned char *)(a2 + v69[30]);
  *(unsigned char *)(a1 + v69[31]) = *(unsigned char *)(a2 + v69[31]);
  *(unsigned char *)(a1 + v69[32]) = *(unsigned char *)(a2 + v69[32]);
  *(void *)(a1 + v69[33]) = *(void *)(a2 + v69[33]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemSegmentItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187962B98);
}

uint64_t sub_187962B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SystemSegmentItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187962C18);
}

uint64_t sub_187962C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SystemSegmentItem()
{
  uint64_t result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem;
  if (!lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem)
  {
    type metadata accessor for SystemSegmentItem();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem);
  }
  return result;
}

uint64_t View.presentationLink<A, B>(isPresented:presenting:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void, void, void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v34 = a7;
  uint64_t v28 = a4;
  unint64_t v29 = a6;
  uint64_t v31 = a5;
  uint64_t v32 = a9;
  int v30 = a3;
  uint64_t v33 = a11;
  uint64_t v27 = a10;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = type metadata accessor for PresentationLinkModifier();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v26 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, v28, v15, v21);
  swift_retain();
  swift_retain();
  uint64_t v24 = v29;
  swift_retain();
  PresentationLinkModifier.init(isPresented:presenting:destination:)(a1, a2, v30, (uint64_t)v18, v31, v24, a8, v27, (uint64_t)v23, a12);
  MEMORY[0x18C113660](v23, v34, v19, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t type metadata accessor for PresentationLinkModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PresentationLinkModifier.init(isPresented:presenting:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void, void, void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v44 = a5;
  long long v45 = a6;
  uint64_t v51 = a1;
  uint64_t v52 = a4;
  int v47 = a3;
  uint64_t v46 = a2;
  uint64_t v49 = a9;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v39 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  double v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v50 = (char *)&v38 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)(a7 - 8) + 56))(a9, 1, 1, a7, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(a9, a4, v14);
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v48 = type metadata accessor for PresentationLinkModifier();
  uint64_t v20 = (void *)(a9 + *(int *)(v48 + 44));
  double v21 = v45;
  *uint64_t v20 = v44;
  v20[1] = v21;
  long long v45 = *(void (**)(void, void, void))(v15 + 16);
  v45(v19, a4, v14);
  uint64_t v22 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = v15;
  uint64_t v24 = (v22 + 73) & ~v22;
  uint64_t v43 = v15;
  uint64_t v44 = v24 + v16;
  uint64_t v40 = v22 | 7;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 32) = a7;
  *(void *)(v25 + 4outlined consume of Text?(0, 0, 0, 0) = a8;
  uint64_t v27 = v50;
  uint64_t v26 = v51;
  *(void *)(v25 + 48) = a10;
  *(void *)(v25 + 56) = v26;
  uint64_t v28 = v46;
  *(void *)(v25 + 64) = v46;
  LOBYTE(v19) = v47;
  *(unsigned char *)(v25 + 72) = v47;
  unint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
  uint64_t v30 = v39;
  v29(v25 + v24, v27, v39);
  v45(v27, v52, v30);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 24) = 0;
  uint64_t v32 = v42;
  *(void *)(v31 + 32) = v41;
  *(void *)(v31 + 4outlined consume of Text?(0, 0, 0, 0) = v32;
  *(void *)(v31 + 48) = a10;
  uint64_t v33 = v50;
  *(void *)(v31 + 56) = v51;
  *(void *)(v31 + 64) = v28;
  *(unsigned char *)(v31 + 72) = (_BYTE)v19;
  v29(v31 + v24, v33, v30);
  swift_retain();
  swift_retain();
  Binding.init(get:set:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v52, v30);
  uint64_t v35 = v54;
  char v36 = v55;
  uint64_t v37 = v49 + *(int *)(v48 + 48);
  *(void *)uint64_t v37 = v53;
  *(void *)(v37 + 8) = v35;
  *(unsigned char *)(v37 + 16) = v36;
  return result;
}

uint64_t View.presentationLink<A>(isPresented:content:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v20[0] = 0;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = a7;
  *(void *)(v17 + 32) = a8;
  *(void *)(v17 + 4outlined consume of Text?(0, 0, 0, 0) = a9;
  *(void *)(v17 + 48) = a4;
  *(void *)(v17 + 56) = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  PresentationLinkModifier.init(isPresented:presenting:destination:)(a1, a2, a3, (uint64_t)v20, (uint64_t)partial apply for implicit closure #1 in closure #1 in TableRowContent.draggable<A>(_:), (void (*)(void, void, void))v17, MEMORY[0x1E4FBC848] + 8, a7, (uint64_t)v26, a9);
  v20[0] = v26[0];
  uint64_t v21 = v27;
  uint64_t v22 = v28;
  uint64_t v23 = v29;
  uint64_t v24 = v30;
  char v25 = v31;
  uint64_t v18 = type metadata accessor for PresentationLinkModifier();
  MEMORY[0x18C113660](v20, a6, v18, a8);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1879633DC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187963414()
{
  return swift_getWitnessTable();
}

uint64_t sub_1879634AC()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for PresentationLinkModifier()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PresentationLinkModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  int v8 = *(_DWORD *)(v6 + 80);
  if ((v8 & 0x1000F8) != 0 || ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(v4, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v4, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    }
    long long v11 = (void *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v12 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = v12[1];
    *long long v11 = *v12;
    v11[1] = v13;
    unint64_t v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = *(void *)(v15 + 8);
    *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PresentationLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for PresentationLinkModifier(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    long long v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  unint64_t v14 = (void *)(((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (void *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[1];
  *unint64_t v14 = *v15;
  v14[1] = v16;
  unint64_t v17 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PresentationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  unint64_t v15 = (void *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *unint64_t v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  unint64_t v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  swift_retain();
  swift_release();
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  return a1;
}

void *initializeWithTake for PresentationLinkModifier(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    size_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  uint64_t v14 = (_OWORD *)(((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (_OWORD *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  unint64_t v16 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)v16;
  unint64_t v18 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v16 + 16);
  *(_OWORD *)unint64_t v18 = v17;
  return a1;
}

void *assignWithTake for PresentationLinkModifier(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  unint64_t v15 = (_OWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (unint64_t)&a2[v14];
  unint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 23;
  *unint64_t v15 = *(_OWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v17;
  swift_release();
  *(void *)(v18 + 8) = *(void *)(v17 + 8);
  swift_release();
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v17 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationLinkModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v14 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1879640B4);
      case 4:
        int v14 = *(_DWORD *)&a1[v9];
        if (!v14) {
          break;
        }
LABEL_27:
        int v16 = (v14 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v16 = 0;
        }
        if (((((v8 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v17 = *a1;
        }
        else {
          int v17 = *(_DWORD *)a1;
        }
        return v7 + (v17 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v19 = *(void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    return (v19 + 1);
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for PresentationLinkModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v13 = 8 * v12;
  if (v10 < a3)
  {
    unsigned int v14 = (a3 - v10 + 255) >> v13;
    if (v12 <= 3) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (v10 < a2)
  {
    if (v12 < 4) {
      unsigned int v17 = ((~v10 + a2) >> v13) + 1;
    }
    else {
      unsigned int v17 = 1;
    }
    if (v12 >= 4) {
      int v18 = ~v10 + a2;
    }
    else {
      int v18 = (~(_BYTE)v10 + a2);
    }
    bzero(a1, v12);
    if (v12 == 1) {
      *a1 = v18;
    }
    else {
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x187964380);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        if (v9 < 0x7FFFFFFF)
        {
          uint64_t v22 = (void *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *uint64_t v22 = a2 ^ 0x80000000;
            v22[1] = 0;
          }
          else
          {
            *uint64_t v22 = a2 - 1;
          }
        }
        else if (v9 >= a2)
        {
          uint64_t v23 = *(void (**)(void))(v7 + 56);
          v23();
        }
        else
        {
          if (v11 <= 3) {
            int v19 = ~(-1 << (8 * v11));
          }
          else {
            int v19 = -1;
          }
          if (v11)
          {
            int v20 = v19 & (~v9 + a2);
            if (v11 <= 3) {
              int v21 = v11;
            }
            else {
              int v21 = 4;
            }
            bzero(a1, v11);
            switch(v21)
            {
              case 2:
                *(_WORD *)a1 = v20;
                break;
              case 3:
                *(_WORD *)a1 = v20;
                a1[2] = BYTE2(v20);
                break;
              case 4:
                *(_DWORD *)a1 = v20;
                break;
              default:
                *a1 = v20;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PresentationLinkModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in PresentationLinkModifier.init(isPresented:presenting:destination:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, char a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X6>, BOOL *a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unsigned int v15 = (char *)v19 - v14;
  v19[1] = a1;
  _OWORD v19[2] = a2;
  char v20 = a3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v21);
  int v16 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, v12);
  BOOL v17 = v16 == 1
     && (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 48))(v15, 1, a5) != 1;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *a6 = v17;
  return result;
}

uint64_t closure #2 in PresentationLinkModifier.init(isPresented:presenting:destination:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  unsigned int v15 = &v19[-v14];
  LODWORD(a1) = *a1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v12 + 16))(&v19[-v14], a7, v11, v13);
  BOOL v16 = a1 == 1
     && (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 48))(v15, 1, a8) != 1;
  BOOL v17 = *(void (**)(unsigned char *, uint64_t))(v12 + 8);
  swift_retain();
  swift_retain();
  v17(v15, v11);
  v19[15] = v16;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t PresentationLinkModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v4 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v4);
  uint64_t v25 = (uint64_t)v24 - v5;
  uint64_t v34 = *(void *)(a1 + 32);
  v24[1] = swift_getWitnessTable();
  v24[0] = type metadata accessor for NavigationLinkModifier();
  uint64_t v27 = *(void *)(v24[0] - 8);
  MEMORY[0x1F4188790](v24[0]);
  uint64_t v7 = (char *)v24 - v6;
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for _ViewModifier_Content();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v26 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v24 - v13;
  unsigned int v15 = (uint64_t *)(v2 + *(int *)(a1 + 48));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  LOBYTE(v15) = *((unsigned char *)v15 + 16);
  *(void *)&long long v31 = v16;
  *((void *)&v31 + 1) = v17;
  char v32 = (char)v15;
  char v33 = 1;
  swift_retain();
  swift_retain();
  uint64_t v18 = v25;
  PresentationLinkModifier.composedDestination.getter(a1, v25);
  NavigationLinkModifier.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:needsButtonStyle:)(&v31, 0, 0, 0, 0, 0, v18, 0, (uint64_t)v7, 1, 0, v4);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = v8;
  uint64_t v21 = v24[0];
  MEMORY[0x18C113660](v7, v20, v24[0], WitnessTable);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v21);
  uint64_t v29 = WitnessTable;
  uint64_t v30 = &protocol witness table for NavigationLinkModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v26 + 8);
  v22(v11, v9);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v22)(v14, v9);
}

uint64_t PresentationLinkModifier.composedDestination.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v40 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v34 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v35 = (char *)&v33 - v6;
  uint64_t v38 = v7;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v17 - 8);
  uint64_t v37 = v17;
  MEMORY[0x1F4188790](v17);
  int v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v39 = (uint64_t)&v33 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v2, v9, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v19, 1, 1, v3);
    uint64_t v23 = *(void *)(v38 + 32);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v8);
    uint64_t v24 = v38;
    uint64_t v25 = v34;
    (*(void (**)(char *))(v2 + *(int *)(v38 + 44)))(v16);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v8);
    uint64_t v23 = *(void *)(v24 + 32);
    uint64_t v26 = v35;
    static ViewBuilder.buildExpression<A>(_:)(v25);
    uint64_t v27 = v40;
    uint64_t v28 = *(void (**)(char *, uint64_t))(v40 + 8);
    v28(v25, v3);
    static ViewBuilder.buildExpression<A>(_:)(v26);
    v28(v26, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v19, 0, 1, v3);
  }
  uint64_t v29 = v39;
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v19, v39);
  uint64_t v30 = v37;
  long long v31 = *(void (**)(char *, uint64_t))(v36 + 8);
  v31(v19, v37);
  uint64_t v42 = v23;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(uint64_t, uint64_t))v31)(v29, v30);
}

uint64_t partial apply for closure #1 in PresentationLinkModifier.init(isPresented:presenting:destination:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(type metadata accessor for Optional() - 8);
  return closure #1 in PresentationLinkModifier.init(isPresented:presenting:destination:)(*(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), v1 + ((*(unsigned __int8 *)(v4 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3, a1);
}

uint64_t partial apply for closure #2 in PresentationLinkModifier.init(isPresented:presenting:destination:)(unsigned __int8 *a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(type metadata accessor for Optional() - 8);
  return closure #2 in PresentationLinkModifier.init(isPresented:presenting:destination:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), v1 + ((*(unsigned __int8 *)(v4 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
}

uint64_t sub_187965018()
{
  return swift_getWitnessTable();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10UIDragItemCG_So14NSItemProviderCs5NeverOTg50279_s7SwiftUI39CollectionViewListDragAndDropControllerC12dropProposal33_58C2E16B617C53060683163D61173E85LL9indexPath7session14isLocalSession10targetsRowSo012UICollectiondhK0C10Foundation05IndexS0V_So06UIDropW0_pS2btFAkA01_Y17VisitationContextVyAA06ShadowE10DataSourceVyxGGXEfU0_So14fg5CSo10dE52Ccfu_32cb925696a53b0e7863d1d6fe4dbec285AyWTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x1E4FBC860];
    if (!v2) {
      break;
    }
    uint64_t v8 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x18C117680](v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      id v7 = objc_msgSend(v5, sel_itemProvider);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return v8;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v30 - v9;
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v38 = v13;
    uint64_t v14 = a3;
    uint64_t v15 = a3 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v16 = *(void *)(v12 + 56);
    uint64_t v35 = v7;
    uint64_t v36 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v32 = v16;
    uint64_t v33 = (void (**)(char *))(v12 + 16);
    uint64_t v34 = (void (**)(char *, uint64_t))(v12 - 8);
    v30[2] = v14;
    swift_bridgeObjectRetain();
    uint64_t v37 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 40);
    v30[1] = (v12 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      v38(v10, v15, v4);
      uint64_t v17 = *v37;
      (*v37)(v10, 0, 1, v4);
      int v18 = (*v36)(v10, 1, v4);
      BOOL v19 = v18 == 1;
      if (v18 == 1) {
        break;
      }
      long long v31 = v17;
      uint64_t v20 = v12;
      double v21 = v10;
      uint64_t v22 = v4;
      uint64_t v23 = v35;
      uint64_t v24 = v21;
      (*v33)(v35);
      uint64_t v25 = v40;
      char v26 = v39(v23);
      uint64_t v40 = v25;
      if (v25)
      {
        (*v34)(v23, v22);
        swift_bridgeObjectRelease();
        return v19;
      }
      char v27 = v26;
      (*v34)(v23, v22);
      if ((v27 & 1) == 0) {
        break;
      }
      uint64_t v4 = v22;
      v15 += v32;
      --v11;
      uint64_t v12 = v20;
      uint64_t v10 = v24;
      if (!v11)
      {
        uint64_t v28 = v31;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain();
LABEL_9:
    BOOL v19 = 1;
    v28(v10, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  return v19;
}

Swift::Void __swiftcall ListDragAndDropControllerBase.prepareForDropSession(view:)(UIView *view)
{
  uint64_t v2 = view;
  while (1)
  {
    swift_getObjectType();
    if (swift_conformsToProtocol2() ? v2 : 0) {
      break;
    }
    uint64_t v4 = [(UIView *)v2 superview];

    uint64_t v2 = v4;
    if (!v4) {
      return;
    }
  }
  uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90);
  uint64_t v6 = *(void **)((char *)v1 + v5);
  *(void *)((char *)v1 + v5) = v2;
}

void ListDragAndDropControllerBase.resetAfterSession(_:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70));
  swift_beginAccess();
  if (*v2) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2[1] == 1;
  }
  if (v3) {
    goto LABEL_10;
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_10;
  }
  uint64_t v5 = v2[1];
  uint64_t v6 = *(void **)((char *)v0 + *(void *)((*v1 & *v0) + 0x90));
  if (v6)
  {
    id v7 = (void *)Strong;
    uint64_t v15 = &type metadata for DropInfoAdaptor;
    uint64_t v16 = &protocol witness table for DropInfoAdaptor;
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = (void *)(v8 + 16);
    *(void *)&long long v14 = v8;
    id v10 = v6;
    swift_retain();
    uint64_t v11 = (void *)swift_unknownObjectRetain();
    DropInfoAdaptor.init(_:host:responder:)(v11, v10, v7, v9);
    outlined init with take of OptionalBinaryInteger(&v14, (uint64_t)v17);
    (*(void (**)(long long *__return_ptr, void, uint64_t))(v5 + 8))(&v14, *v7, v5);
    uint64_t v12 = v15;
    if (v15)
    {
      uint64_t v13 = v16;
      __swift_project_boxed_opaque_existential_1(&v14, (uint64_t)v15);
      ((void (*)(unsigned char *, ValueMetadata *, _UNKNOWN **))v13[5])(v17, v12, v13);
      swift_release();
      outlined destroy of DropInfo((uint64_t)v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    }
    else
    {
      swift_release();
      outlined destroy of DropInfo((uint64_t)v17);
      outlined destroy of DropDelegate?((uint64_t)&v14);
    }
LABEL_10:
    $defer #1 <A>() in ListDragAndDropControllerBase.resetAfterSession(_:)(v0);
    return;
  }
  __break(1u);
}

void $defer #1 <A>() in ListDragAndDropControllerBase.resetAfterSession(_:)(void *a1)
{
  v6[0] = xmmword_18834BB90;
  memset(&v6[1], 0, 57);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (uint64_t)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70);
  swift_beginAccess();
  outlined assign with take of DropDestination?((uint64_t)v6, v3, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  swift_endAccess();
  uint64_t v4 = *(void *)((*v2 & *a1) + 0x90);
  uint64_t v5 = *(void **)((char *)a1 + v4);
  *(void *)((char *)a1 + v4) = 0;
}

void @objc ListDragAndDropControllerBase.init()()
{
}

id ListDragAndDropControllerBase.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ListDragAndDropControllerBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc ListDragAndDropControllerBase.__ivar_destroyer(void *a1)
{
  objc_super v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60);
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  outlined destroy of DropDestination?((uint64_t)a1 + *(void *)((*v2 & *a1) + 0x70), &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)a1 + *(void *)((*v2 & *a1) + 0x88));
  uint64_t v5 = *(void **)((char *)a1 + *(void *)((*v2 & *a1) + 0x90));
}

uint64_t one-time initialization function for allowFakeMoves()
{
  uint64_t result = closure #1 in variable initialization expression of allowFakeMoves();
  allowFakeMoves = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of allowFakeMoves()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1) {
    return 0;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == 0xD000000000000013 && v4 == 0x800000018832D4E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

id CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(uint64_t a1, uint64_t a2, char a3, int a4)
{
  int v27 = a4;
  uint64_t v28 = a1;
  id v7 = (void *)(*MEMORY[0x1E4FBC8C8] & *v4);
  uint64_t v8 = v7[20];
  uint64_t v9 = v7[21];
  uint64_t v10 = type metadata accessor for ShadowListDataSource();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v14 = (char *)&v24 - v13;
  if ((a3 & 1) == 0)
  {
LABEL_12:
    uint64_t v20 = (char *)v4 + v7[12];
    swift_beginAccess();
    uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, v20, v10);
    MEMORY[0x1F4188790](v21);
    *(&v24 - 4) = v8;
    *(&v24 - 3) = v9;
    *(&v24 - 2) = a2;
    uint64_t v22 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewDropProposal);
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.visitContent<A>(atRow:visitor:)(v28, (uint64_t)partial apply for closure #2 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:), (uint64_t)(&v24 - 6), v10, v22, WitnessTable, (uint64_t)&v29);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    id result = v29;
    if (v29) {
      return result;
    }
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB15B8]), sel_initWithDropOperation_, 0);
  }
  uint64_t v25 = v9;
  char v26 = (char *)&v24 - v13;
  uint64_t v15 = *(void *)((char *)v4 + v7[16]);
  if (*(void *)(v15 + 16))
  {
    MEMORY[0x1F4188790](v12);
    *(&v24 - 2) = (uint64_t)v4;
    *(&v24 - 1) = v16;
    swift_bridgeObjectRetain();
    BOOL v17 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(char *))partial apply for closure #1 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:), (uint64_t)(&v24 - 4), v15);
    swift_bridgeObjectRelease();
    if (v17)
    {
      id v18 = objc_allocWithZone(MEMORY[0x1E4FB15B8]);
      if (v27)
      {
        id result = objc_msgSend(v18, sel_initWithDropOperation_intent_, 3, 1);
        if (result) {
          return result;
        }
      }
      else
      {
        id result = objc_msgSend(v18, sel_initWithDropOperation_dropLocation_, 3, 2);
        if (result) {
          return result;
        }
      }
    }
  }
  if (one-time initialization token for allowFakeMoves != -1) {
    swift_once();
  }
  if (allowFakeMoves)
  {
    id v7 = (void *)(*MEMORY[0x1E4FBC8C8] & *v4);
    uint64_t v9 = v25;
    long long v14 = v26;
    goto LABEL_12;
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB15B8]), sel_initWithDropOperation_, 0);
}

uint64_t closure #1 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v7 = type metadata accessor for ShadowListDataSource();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = (char *)a2 + *(void *)(v6 + 96);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t WitnessTable = swift_getWitnessTable();
  LOBYTE(a3) = ListCoreDataSource.canMoveCell(fromRowAt:to:)(a1, a3, v7, WitnessTable);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return a3 & 1;
}

id closure #2 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)@<X0>(id a1@<X1>, void *a2@<X8>)
{
  id v3 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10UIDragItemCG_So14NSItemProviderCs5NeverOTg50279_s7SwiftUI39CollectionViewListDragAndDropControllerC12dropProposal33_58C2E16B617C53060683163D61173E859indexPath7session14isLocalSession10targetsRowSo012UICollectiondhK0C10Foundation05IndexS0V_So06UIDropW0_pS2btFAkA01_Y17VisitationContextVyAA06ShadowE10DataSourceVyxGGXEfU0_So14fg5CSo10dE52Ccfu_32cb925696a53b0e7863d1d6fe4dbec285AyWTf3nnnpk_nTf1cn_n(v4);
  swift_bridgeObjectRelease();
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  type metadata accessor for _RowVisitationContext();
  Swift::Bool v6 = _RowVisitationContext.canHandleDropInsert(items:)((Swift::OpaquePointer)v5);
  swift_bridgeObjectRelease();
  id v7 = objc_allocWithZone(MEMORY[0x1E4FB15B8]);
  if (v6) {
    id result = objc_msgSend(v7, sel_initWithDropOperation_intent_, 2, 1);
  }
  else {
    id result = objc_msgSend(v7, sel_initWithDropOperation_, 0);
  }
  *a2 = result;
  return result;
}

uint64_t CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v30 = a3;
  id v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xA0);
  uint64_t v9 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xA8);
  uint64_t v10 = type metadata accessor for ShadowListDataSource();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - v12;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v15 = objc_msgSend(a2, sel_cellForItemAtIndexPath_, isa);

  if (!v15) {
    goto LABEL_9;
  }
  type metadata accessor for AnyListCollectionViewCell();
  uint64_t v16 = (void *)swift_dynamicCastClass();
  if (!v16 || (BOOL v17 = (void *)(*(uint64_t (**)(void))((*v7 & *v16) + 0xA0))(), v18 = v7, !v17))
  {

LABEL_9:
    uint64_t v22 = (char *)v4 + *(void *)((*v7 & *v4) + 0x60);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v13, v22, v10);
    MEMORY[0x1F4188790](v23);
    *(&v29 - 2) = v8;
    *(&v29 - 1) = v9;
    type metadata accessor for [UIDragItem]();
    uint64_t v25 = v24;
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in CollectionViewListDragAndDropController.dragItem(at:collectionView:session:), (uint64_t)(&v29 - 4), v10, v25, WitnessTable, (uint64_t)&v31);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (v31) {
      return v31;
    }
    else {
      return MEMORY[0x1E4FBC860];
    }
  }
  BOOL v19 = v17;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))((*v18 & *v17) + 0x58))(v30);
  uint64_t v21 = v20;
  if ((unint64_t)v20 >> 62)
  {
    uint64_t v28 = v20 & 0xFFFFFFFFFFFFFF8;
    if (v20 < 0) {
      uint64_t v28 = v20;
    }
    uint64_t v30 = v28;
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }

  if (!v30)
  {
    swift_bridgeObjectRelease();
    id v7 = (void *)MEMORY[0x1E4FBC8C8];
    goto LABEL_9;
  }
  return v21;
}

void closure #1 in CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(void *a1@<X8>)
{
  void (*v6)(void *__return_ptr, void);
  void (*v7)(void *__return_ptr, uint64_t);

  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  type metadata accessor for _RowVisitationContext();
  swift_bridgeObjectRetain();
  uint64_t v2 = ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v3 = (uint64_t)v7;
  if (!v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v7(&v7, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  swift_bridgeObjectRelease();
  unint64_t v4 = v7;
  if (!v7)
  {
LABEL_5:
    Swift::Bool v6 = (void (*)(void *__return_ptr, void))MEMORY[0x1E4FBC860];
    goto LABEL_6;
  }
  type metadata accessor for DropDestination?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_188351940;
  *(void *)(v5 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1710]), sel_initWithItemProvider_, v4);
  id v7 = (void (*)(void *__return_ptr, uint64_t))v5;
  specialized Array._endMutation()();
  Swift::Bool v6 = v7;

LABEL_6:
  *a1 = v6;
}

uint64_t CollectionViewListDragAndDropController.collectionView(_:itemsForBeginning:at:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + v9, a3, v7);
  uint64_t v11 = (void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78));
  swift_beginAccess();
  *uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  return CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(a3, a1, a2);
}

Class @objc CollectionViewListDragAndDropController.collectionView(_:itemsForBeginning:at:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  swift_unknownObjectRetain();
  id v12 = a1;
  CollectionViewListDragAndDropController.collectionView(_:itemsForBeginning:at:)(v11, a4, (uint64_t)v10);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v13.super.isa;
}

Class @objc CollectionViewListDragAndDropController.collectionView(_:itemsForAddingTo:at:point:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  swift_unknownObjectRetain();
  id v12 = a1;
  specialized CollectionViewListDragAndDropController.collectionView(_:itemsForAddingTo:at:point:)(v11, a4, (uint64_t)v10);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v13.super.isa;
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionDidEnd:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  swift_unknownObjectRetain();
  id v5 = a1;
  specialized CollectionViewListDragAndDropController.collectionView(_:dragSessionDidEnd:)();

  swift_unknownObjectRelease();
}

id CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(void *a1, uint64_t a2)
{
  uint64_t v36 = a1;
  id v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA0);
  uint64_t v6 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA8);
  uint64_t v7 = type metadata accessor for ShadowListDataSource();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v35 - v9;
  int v11 = static SemanticFeature.isEnabled.getter();
  id v12 = (char *)v2 + *(void *)((*v4 & *v2) + 0x60);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v12, v7);
  uint64_t v38 = v5;
  uint64_t v39 = v6;
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:), (uint64_t)v37, v7, MEMORY[0x1E4FBB390], WitnessTable, (uint64_t)v40);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v40[0] == 2)
  {
    if (v11)
    {
      char v14 = 0;
      goto LABEL_6;
    }
    return 0;
  }
  if (((v11 | v40[0]) & 1) == 0) {
    return 0;
  }
  char v14 = v40[0] | v11 ^ 1;
LABEL_6:
  uint64_t v15 = v36;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v17 = objc_msgSend(v15, sel_cellForItemAtIndexPath_, isa);

  if (!v17) {
    return 0;
  }
  type metadata accessor for AnyListCollectionViewCell();
  id v18 = (void *)swift_dynamicCastClass();
  if (v18
    && (BOOL v19 = v18, v20 = objc_msgSend(v18, sel_window), v20, v20))
  {
    uint64_t v21 = MEMORY[0x18C113CA0]();
    long long v41 = 0u;
    long long v42 = 0u;
    char v43 = 6;
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v19) + 0x90))(v21))
    {
      type metadata accessor for ViewResponder();
      if (swift_dynamicCastClass())
      {
        *(void *)&v45[0] = 2;
        hostingViewCoordinateSpace.getter();
        v40[40] = 1;
        dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
        swift_release();
        outlined destroy of CoordinateSpace((uint64_t)v40);
      }
      else
      {
        swift_release();
      }
    }
    v45[0] = v41;
    v45[1] = v42;
    char v46 = v43;
    outlined init with take of Path.Storage((uint64_t)v45, (uint64_t)v40);
    _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v40, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    char v23 = Path.isEmpty.getter();
    _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v45, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    if (v14 & 1 | ((v23 & 1) == 0))
    {
      id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1720]), sel_init);
      id v24 = objc_msgSend(v19, sel_traitCollection);
      id v25 = objc_msgSend(v24, sel_userInterfaceIdiom);

      if (v25 != (id)6)
      {
        char v26 = self;
        id v27 = v22;
        id v28 = objc_msgSend(v26, sel_clearColor);
        objc_msgSend(v27, sel_setBackgroundColor_, v28);
      }
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v40, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      uint64_t v29 = v45;
      char v30 = Path.isEmpty.getter();
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v45, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      if ((v30 & 1) == 0)
      {
        id v31 = objc_msgSend(v19, sel_contentView);
        objc_msgSend(v31, sel_frame);

        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v40, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
        uint64_t v29 = v44;
        Path.offsetBy(dx:dy:)();
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v45, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v45, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
        id v32 = v22;
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v44, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
        id v33 = UIBezierPath.init(_:)((uint64_t)v44);
        objc_msgSend(v32, sel_setVisiblePath_, v33);
      }
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    }
    else
    {
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v45, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      id v22 = 0;
    }
    static Update.end()();
  }
  else
  {
    id v22 = 0;
  }

  return v22;
}

uint64_t closure #1 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  type metadata accessor for _RowVisitationContext();
  uint64_t result = _RowVisitationContext.wantsClippedBackground.getter();
  *a1 = result & 1;
  return result;
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:));
}

id CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v116 = a3;
  uint64_t v106 = a1;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = type metadata accessor for ShadowRowCollection();
  uint64_t v102 = *(void *)(v6 - 8);
  uint64_t v103 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v112 = (char *)&v96 - v7;
  uint64_t v8 = v3;
  uint64_t v9 = type metadata accessor for ShadowSectionCollection();
  uint64_t v109 = *(void *)(v9 - 8);
  uint64_t v110 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v108 = (uint64_t)&v96 - v10;
  int v11 = v5;
  uint64_t v113 = type metadata accessor for ShadowListDataSource();
  uint64_t v111 = *(void *)(v113 - 8);
  MEMORY[0x1F4188790](v113);
  uint64_t v114 = (char *)&v96 - v12;
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  id v18 = (char *)&v96 - v17;
  uint64_t v115 = type metadata accessor for IndexPath();
  uint64_t v19 = *(void *)(v115 - 8);
  uint64_t v104 = v19;
  MEMORY[0x1F4188790](v115);
  long long v96 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v107 = (char *)&v96 - v22;
  MEMORY[0x1F4188790](v23);
  id v25 = (char *)&v96 - v24;
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v96 - v28;
  uint64_t v100 = a2;
  id v30 = objc_msgSend(a2, sel_localDragSession, v27);
  uint64_t v31 = MEMORY[0x18C119DF0]((char *)v8 + *(void *)((*v11 & *v8) + 0x88));
  id v32 = (id)v31;
  long long v101 = v8;
  if (v30)
  {
    swift_unknownObjectRelease();
    if (v32)
    {
      swift_unknownObjectRelease();
      if (v30 == v32) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (!v31)
    {
LABEL_16:
      LODWORD(v105) = 1;
      uint64_t v34 = v115;
      uint64_t v54 = v113;
      uint64_t v33 = v19;
      goto LABEL_20;
    }
    swift_unknownObjectRelease();
  }
  outlined init with copy of IndexPath?(v116, (uint64_t)v18);
  uint64_t v33 = v19;
  uint64_t v34 = v115;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v115) == 1)
  {
    outlined destroy of IndexPath?((uint64_t)v18);
LABEL_19:
    LODWORD(v105) = 0;
    uint64_t v54 = v113;
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v29, v18, v34);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v36 = objc_msgSend(v106, sel_cellForItemAtIndexPath_, isa);

  if (!v36)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v34);
    goto LABEL_19;
  }
  type metadata accessor for AnyListCollectionViewCell();
  uint64_t v37 = (void *)swift_dynamicCastClass();
  if (!v37)
  {

    goto LABEL_18;
  }
  uint64_t v97 = v25;
  uint64_t v38 = *v11;
  uint64_t v39 = *(void **)((char *)v8 + *(void *)((*v11 & *v8) + 0x90));
  if (!v39)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v34);

LABEL_39:
    LODWORD(v105) = 0;
    id v25 = v97;
    uint64_t v54 = v113;
    int v11 = (uint64_t *)MEMORY[0x1E4FBC8C8];
LABEL_20:
    outlined init with copy of IndexPath?(v116, (uint64_t)v15);
    char v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
    uint64_t v99 = v33 + 48;
    uint64_t v98 = v55;
    int v56 = v55((uint64_t)v15, 1, v34);
    uint64_t v117 = v33;
    if (v56 == 1)
    {
      CollectionViewListDragAndDropController.validIndexPath(in:)(v106, (SEL *)&selRef_numberOfItemsInSection_);
      outlined destroy of IndexPath?((uint64_t)v15);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v25, v15, v34);
    }
    uint64_t v57 = (char *)v8 + *(void *)((*v11 & *v8) + 0x60);
    swift_beginAccess();
    uint64_t v58 = v111;
    uint64_t v59 = *(void **)(v111 + 16);
    uint64_t v60 = v114;
    uint64_t v115 = (uint64_t)v57;
    uint64_t v106 = v59;
    ((void (*)(char *, char *, uint64_t))v59)(v114, v57, v54);
    uint64_t v61 = v108;
    ShadowListDataSource.sectionIDs.getter(v108);
    uint64_t v111 = *(void *)(v58 + 8);
    ((void (*)(char *, uint64_t))v111)(v60, v54);
    uint64_t v62 = v110;
    uint64_t v63 = ShadowSectionCollection.count.getter(v110);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v61, v62);
    uint64_t v64 = IndexPath.section.getter();
    uint64_t v65 = v107;
    (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v107, v25, v34);
    uint64_t v110 = v63;
    uint64_t v66 = (uint64_t)v25;
    if (v64 >= v63)
    {
      uint64_t v74 = *(void (**)(char *, uint64_t))(v117 + 8);
      long long v84 = v65;
      uint64_t v76 = v34;
      v74(v84, v34);
      uint64_t v85 = (void (*)(char *, uint64_t))v111;
      char v72 = v112;
      uint64_t v79 = v115;
      uint64_t v86 = (void (*)(char *, uint64_t, uint64_t))v106;
      if (!v105)
      {
LABEL_29:
        if (v110 >= 1)
        {
          uint64_t v88 = v113;
          long long v87 = v114;
          v86(v114, v79, v113);
          uint64_t WitnessTable = swift_getWitnessTable();
          ListDiffable.rowIDs(forSectionAtOffset:)(0, v88, WitnessTable);
          v85(v87, v88);
          uint64_t v90 = v66;
          uint64_t v91 = v103;
          swift_getWitnessTable();
          LOBYTE(v87) = Collection.isEmpty.getter();
          uint64_t v92 = v91;
          uint64_t v66 = v90;
          (*(void (**)(char *, uint64_t))(v102 + 8))(v72, v92);
          if ((v87 & 1) == 0)
          {
            uint64_t v94 = (uint64_t)v96;
            MEMORY[0x18C10A8A0](0, 0);
            BOOL v95 = v98(v116, 1, v76) != 1;
            id v53 = CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(v94, (uint64_t)v100, 0, v95);
            v74((char *)v94, v76);
            v74((char *)v66, v76);
            return v53;
          }
        }
      }
    }
    else
    {
      uint64_t v97 = v25;
      uint64_t v67 = v34;
      uint64_t v109 = IndexPath.row.getter();
      uint64_t v68 = (void (*)(char *, uint64_t, uint64_t))v106;
      ((void (*)(char *, uint64_t, uint64_t))v106)(v60, v115, v54);
      uint64_t v69 = IndexPath.section.getter();
      uint64_t v70 = swift_getWitnessTable();
      int v71 = v60;
      char v72 = v112;
      ListDiffable.rowIDs(forSectionAtOffset:)(v69, v54, v70);
      uint64_t v73 = (void (*)(char *, uint64_t))v111;
      ((void (*)(char *, uint64_t))v111)(v71, v54);
      uint64_t v74 = *(void (**)(char *, uint64_t))(v117 + 8);
      uint64_t v75 = v65;
      uint64_t v76 = v67;
      v117 += 8;
      v74(v75, v67);
      uint64_t v77 = v103;
      uint64_t v78 = ShadowRowCollection.count.getter(v103);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v72, v77);
      uint64_t v79 = v115;
      if (v109 < v78)
      {
        BOOL v80 = v98(v116, 1, v67) != 1;
        uint64_t v81 = (uint64_t)v97;
        id v53 = CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)((uint64_t)v97, (uint64_t)v100, (char)v105, v80);
        uint64_t v82 = v81;
        uint64_t v83 = v67;
LABEL_32:
        v74((char *)v82, v83);
        return v53;
      }
      uint64_t v85 = v73;
      uint64_t v86 = v68;
      uint64_t v66 = (uint64_t)v97;
      if (!v105) {
        goto LABEL_29;
      }
    }
    id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB15B8]), sel_initWithDropOperation_, 0);
    uint64_t v82 = v66;
    uint64_t v83 = v76;
    goto LABEL_32;
  }
  uint64_t v40 = v36;
  long long v41 = (void *)(*(uint64_t (**)(void))((*v37 & v38) + 0xA0))();
  if (!v41)
  {
LABEL_37:

    uint64_t v33 = v19;
    uint64_t v34 = v115;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v115);
    goto LABEL_39;
  }
  long long v42 = v41;
  char v43 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v41) + 0x50);
  id v44 = v39;
  long long v45 = (uint64_t *)v43();
  uint64_t v47 = v46;

  if (!v45)
  {

    uint64_t v8 = v101;
    goto LABEL_37;
  }
  uint64_t v8 = v101;
  uint64_t v48 = (void *)((char *)v101 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v101) + 0x70));
  swift_beginAccess();
  swift_retain();
  id v105 = v44;
  id v49 = specialized static UIDropProposal.fromActiveDrop(_:session:responder:host:)(v48, v100, v45, v47, v44);
  swift_endAccess();
  swift_release();
  uint64_t v50 = v49;
  id v51 = objc_msgSend(v49, sel_operation);
  uint64_t v34 = v115;
  uint64_t v33 = v19;
  if (v51 != (id)2)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v115);

    swift_release();
    goto LABEL_39;
  }
  id v52 = objc_msgSend(v50, sel_operation);
  id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB15B8]), sel_initWithDropOperation_intent_, v52, 2);
  swift_release();

  (*(void (**)(char *, uint64_t))(v33 + 8))(v29, v34);
  return v53;
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, uint64_t, char *))CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:));
}

void CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v184 = a2;
  uint64_t v169 = a1;
  id v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v183 = (void *)(*MEMORY[0x1E4FBC8C8] & *v2);
  long long v161 = (void *)v183[21];
  uint64_t v5 = v161[1];
  uint64_t v6 = v183[20];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = v4;
  uint64_t v168 = AssociatedTypeWitness;
  uint64_t v167 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v172 = type metadata accessor for DropCoordinator();
  uint64_t v171 = *(void *)(v172 - 8);
  MEMORY[0x1F4188790](v172);
  uint64_t v170 = (uint64_t)&v159 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v159 - v12;
  int v182 = (void (**)(uint64_t, uint64_t))TupleTypeMetadata2;
  uint64_t v180 = type metadata accessor for DropCoordinator.Operation();
  uint64_t v179 = *(void *)(v180 - 8);
  MEMORY[0x1F4188790](v180);
  int v181 = (char *)&v159 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v166 = (char *)&v159 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v178 = (char *)&v159 - v18;
  uint64_t v160 = v6;
  uint64_t v159 = v5;
  uint64_t v175 = type metadata accessor for ShadowListDataSource();
  uint64_t v174 = *(void *)(v175 - 8);
  MEMORY[0x1F4188790](v175);
  id v173 = (char *)&v159 - v19;
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v159 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v164 = (char *)&v159 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (uint64_t)&v159 - v26;
  uint64_t v177 = type metadata accessor for IndexPath();
  uint64_t v28 = *(char **)(v177 - 8);
  uint64_t v29 = *((void *)v28 + 8);
  MEMORY[0x1F4188790](v177);
  id v30 = (char *)&v159 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (void (**)(uint64_t, uint64_t))((char *)&v159 - v32);
  MEMORY[0x1F4188790](v34);
  v163 = (char *)&v159 - v35;
  MEMORY[0x1F4188790](v36);
  v176 = (char *)&v159 - v37;
  MEMORY[0x1F4188790](v38);
  long long v165 = (char *)&v159 - v39;
  uint64_t v40 = v183[14];
  uint64_t v183 = v3;
  long long v41 = (void *)((char *)v3 + v40);
  swift_beginAccess();
  if (*v41 || v41[1] != 1)
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      char v43 = (void *)Strong;
      uint64_t v44 = v41[1];
      long long v45 = *(void **)((char *)v183 + *(void *)((*v8 & *v183) + 0x90));
      if (v45)
      {
        id v46 = v45;
        id v47 = objc_msgSend(v184, sel_session);
        uint64_t v192 = &type metadata for DropInfoAdaptor;
        v193 = &protocol witness table for DropInfoAdaptor;
        uint64_t v48 = swift_allocObject();
        id v49 = (void *)(v48 + 16);
        uint64_t aBlock = v48;
        id v50 = v46;
        swift_retain();
        DropInfoAdaptor.init(_:host:responder:)(v47, v50, v43, v49);
        uint64_t v51 = *v43;
        v185 = v43;
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v44 + 8))(v186, v51, v44);
        uint64_t v52 = v187;
        if (v187)
        {
          uint64_t v53 = v188;
          __swift_project_boxed_opaque_existential_1(v186, v187);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 16))(&aBlock, v52, v53);

          swift_release();
          outlined destroy of DropInfo((uint64_t)&aBlock);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v186);
        }
        else
        {
          swift_release();

          outlined destroy of DropInfo((uint64_t)&aBlock);
          outlined destroy of DropDelegate?((uint64_t)v186);
        }
        goto LABEL_55;
      }
      swift_release();
    }
  }
  id v54 = objc_msgSend(objc_msgSend(v184, sel_session), sel_localDragSession);
  swift_unknownObjectRelease();
  uint64_t v55 = MEMORY[0x18C119DF0]((char *)v183 + *(void *)((*v8 & *v183) + 0x88));
  id v56 = (id)v55;
  if (v54)
  {
    swift_unknownObjectRelease();
    if (v56)
    {
      swift_unknownObjectRelease();
      BOOL v57 = v54 == v56;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v55)
  {
    swift_unknownObjectRelease();
LABEL_13:
    BOOL v57 = 0;
    goto LABEL_15;
  }
  BOOL v57 = 1;
LABEL_15:
  id v58 = objc_msgSend(v184, sel_items);
  uint64_t v162 = type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for UICollectionViewDropItem);
  unint64_t v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v59 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v60 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  BOOL v61 = v60 == 1 && v57;
  if (!v61
    || (id v62 = objc_msgSend(v184, sel_proposal),
        id v63 = objc_msgSend(v62, sel_operation),
        v62,
        v63 != (id)3))
  {
    id v109 = objc_msgSend(v184, sel_destinationIndexPath);
    if (v109)
    {
      uint64_t v110 = v109;
      uint64_t v111 = (uint64_t)v176;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v112 = (void (*)(char *, uint64_t, uint64_t))*((void *)v28 + 4);
      uint64_t v113 = v177;
      v112(v22, v111, v177);
      (*((void (**)(char *, void, uint64_t, uint64_t))v28 + 7))(v22, 0, 1, v113);
      int v114 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v28 + 6))(v22, 1, v113);
      uint64_t v115 = (void *)MEMORY[0x1E4FBC8C8];
      if (v114 != 1)
      {
        v112(v30, (uint64_t)v22, v113);
        uint64_t v116 = (uint64_t)v166;
        uint64_t v117 = (uint64_t)&v166[*((int *)v182 + 12)];
        id v118 = (char *)v183 + *(void *)((*v115 & *v183) + 0x60);
        swift_beginAccess();
        uint64_t v119 = v174;
        uint64_t v120 = v173;
        uint64_t v121 = v118;
        uint64_t v122 = v175;
        (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v173, v121, v175);
        uint64_t WitnessTable = swift_getWitnessTable();
        ListDiffable.rowIndex(at:)(v116, v117, (uint64_t)v30, v122, WitnessTable);
        (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v122);
        uint64_t v124 = (void (*)(char *, uint64_t))*((void *)v28 + 1);
        v28 += 8;
        v124(v30, v113);
        uint64_t v125 = v180;
        swift_storeEnumTagMultiPayload();
        uint64_t v126 = v179;
        long long v127 = v178;
        (*(void (**)(char *, uint64_t, uint64_t))(v179 + 32))(v178, v116, v125);
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v113 = v177;
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v28 + 7))(v22, 1, 1, v177);
      uint64_t v115 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v111 = (uint64_t)v176;
    }
    outlined destroy of IndexPath?((uint64_t)v22);
    uint64_t v128 = v182;
    uint64_t v129 = (uint64_t)&v13[*((int *)v182 + 12)];
    uint64_t v130 = (char *)v183 + *(void *)((*v115 & *v183) + 0x60);
    swift_beginAccess();
    uint64_t v131 = v174;
    uint64_t v132 = (uint64_t)v13;
    uint64_t v133 = v173;
    uint64_t v134 = v130;
    uint64_t v135 = v175;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v173, v134, v175);
    CollectionViewListDragAndDropController.validIndexPath(in:)(v169, (SEL *)&selRef_numberOfItemsInSection_);
    uint64_t v136 = swift_getWitnessTable();
    ListDiffable.rowIndex(at:)(v132, v129, v111, v135, v136);
    long long v137 = (void (*)(uint64_t, uint64_t))*((void *)v28 + 1);
    v28 += 8;
    v137(v111, v113);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v133, v135);
    long long v127 = v178;
    long long v138 = &v178[*((int *)v128 + 12)];
    (*(void (**)(char *, uint64_t))(*(void *)(v168 - 8) + 32))(v178, v132);
    (*(void (**)(char *, uint64_t))(*(void *)(v167 - 8) + 32))(v138, v129);
    uint64_t v125 = v180;
    swift_storeEnumTagMultiPayload();
    uint64_t v126 = v179;
LABEL_38:
    (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v181, v127, v125);
    id v139 = objc_msgSend(objc_msgSend(v184, sel_session), sel_items);
    swift_unknownObjectRelease();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
    unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v65 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v33 = (void (**)(uint64_t, uint64_t))MEMORY[0x1E4FBC8C8];
    if (v29)
    {
      v186[0] = MEMORY[0x1E4FBC860];
      uint64_t v27 = (uint64_t)v186;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v29 < 0)
      {
        __break(1u);
        goto LABEL_68;
      }
      uint64_t v140 = 0;
      do
      {
        if ((v65 & 0xC000000000000001) != 0) {
          id v141 = (id)MEMORY[0x18C117680](v140, v65);
        }
        else {
          id v141 = *(id *)(v65 + 8 * v140 + 32);
        }
        uint64_t v142 = v141;
        ++v140;
        id v143 = objc_msgSend(v141, sel_itemProvider);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v29 != v140);
      uint64_t v144 = v186[0];
      swift_bridgeObjectRelease();
      uint64_t v125 = v180;
      uint64_t v126 = v179;
      long long v127 = v178;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v144 = MEMORY[0x1E4FBC860];
    }
    uint64_t v145 = v170;
    uint64_t v146 = DropCoordinator.init(operation:items:)((uint64_t)v181, v144, v170);
    uint64_t v147 = v183;
    double v148 = MEMORY[0x1F4188790](v146);
    *(&v159 - 2) = (uint64_t)v147;
    *(&v159 - 1) = v145;
    v149(partial apply for closure #4 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:), v148);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v125);
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v145, v172);
    uint64_t v150 = v147;
LABEL_56:
    $defer #1 <A>() in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(v150);
    return;
  }
  id v64 = objc_msgSend(v184, sel_items);
  unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v65 & 0xC000000000000001) != 0)
  {
LABEL_68:
    uint64_t v66 = (void *)MEMORY[0x18C117680](0, v65);
    goto LABEL_25;
  }
  if (!*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_70:
    uint64_t v153 = (void *)MEMORY[0x18C117680](0, v27);
    goto LABEL_64;
  }
  uint64_t v66 = *(void **)(v65 + 32);
  swift_unknownObjectRetain();
LABEL_25:
  swift_bridgeObjectRelease();
  id v67 = objc_msgSend(v66, sel_sourceIndexPath);
  swift_unknownObjectRelease();
  if (!v67)
  {
    (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v28 + 7))(v27, 1, 1, v177);
    goto LABEL_54;
  }
  int v181 = (char *)v33;
  uint64_t v68 = v176;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v69 = v28;
  uint64_t v70 = (void (*)(uint64_t, char *, uint64_t))*((void *)v28 + 4);
  uint64_t v71 = v177;
  v70(v27, v68, v177);
  char v72 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v69 + 7);
  v72(v27, 0, 1, v71);
  int v182 = (void (**)(uint64_t, uint64_t))v69;
  uint64_t v73 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v69 + 6);
  if (v73(v27, 1, v71) == 1)
  {
LABEL_54:
    outlined destroy of IndexPath?(v27);
LABEL_55:
    uint64_t v150 = v183;
    goto LABEL_56;
  }
  v70((uint64_t)v165, (char *)v27, v71);
  id v74 = objc_msgSend(v184, sel_destinationIndexPath);
  if (!v74)
  {
    uint64_t v27 = (uint64_t)v164;
    v72((uint64_t)v164, 1, 1, v71);
    goto LABEL_53;
  }
  uint64_t v75 = v74;
  uint64_t v76 = v176;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = (uint64_t)v164;
  v70((uint64_t)v164, v76, v71);
  v72(v27, 0, 1, v71);
  if (v73(v27, 1, v71) == 1)
  {
LABEL_53:
    v182[1]((uint64_t)v165, v71);
    goto LABEL_54;
  }
  uint64_t v77 = (uint64_t)v163;
  v70((uint64_t)v163, (char *)v27, v71);
  uint64_t v78 = (char *)v183 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v183) + 0x60);
  swift_beginAccess();
  uint64_t v79 = v174;
  BOOL v80 = v173;
  uint64_t v81 = v175;
  (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v173, v78, v175);
  uint64_t v82 = swift_getWitnessTable();
  uint64_t v83 = (uint64_t)v165;
  uint64_t v84 = v77;
  LOBYTE(v77) = ListCoreDataSource.canMoveCell(fromRowAt:to:)((uint64_t)v165, v77, v81, v82);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
  uint64_t v33 = v182;
  if ((v77 & 1) == 0)
  {
    uint64_t v151 = v182[1];
    v151(v84, v71);
    v151(v83, v71);
    goto LABEL_55;
  }
  uint64_t v85 = (void *)MEMORY[0x1E4FBC8C8];
  id v86 = objc_msgSend(v169, sel_dataSource);
  if (v86)
  {
    uint64_t v87 = (uint64_t)v86;
    uint64_t v88 = v160;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v89 = type metadata accessor for SelectionManagerBox();
    uint64_t v90 = swift_getWitnessTable();
    uint64_t aBlock = v88;
    uint64_t v190 = v89;
    v191 = v161;
    uint64_t v192 = (ValueMetadata *)v90;
    type metadata accessor for UICollectionViewListCoordinatorBase();
    uint64_t v91 = (void *)swift_dynamicCastClass();
    if (v91)
    {
      uint64_t v92 = v91;
      uint64_t v93 = *(void *)((*v85 & *v91) + 0xD0);
      LODWORD(v179) = *((unsigned __int8 *)v91 + v93);
      *((unsigned char *)v91 + v93) = 1;
      uint64_t v94 = (void (*)(char *, uint64_t, uint64_t))v33[2];
      uint64_t v180 = v87;
      BOOL v95 = v176;
      long long v96 = (char *)v177;
      v94(v176, (uint64_t)v165, v177);
      uint64_t v97 = (uint64_t)v181;
      v94(v181, (uint64_t)v163, (uint64_t)v96);
      uint64_t v98 = *((unsigned __int8 *)v33 + 80);
      uint64_t v99 = (v98 + 40) & ~v98;
      uint64_t v100 = (v29 + v98 + v99) & ~v98;
      long long v101 = (void *)swift_allocObject();
      uint64_t v102 = v161;
      v101[2] = v160;
      v101[3] = v102;
      v101[4] = v92;
      v70((uint64_t)v101 + v99, v95, (uint64_t)v96);
      v70((uint64_t)v101 + v100, (char *)v97, (uint64_t)v96);
      uint64_t v103 = v169;
      *(void *)((char *)v101 + ((v29 + v100 + 7) & 0xFFFFFFFFFFFFFFF8)) = v169;
      uint64_t v104 = swift_allocObject();
      uint64_t v29 = (uint64_t)partial apply for closure #1 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:);
      *(void *)(v104 + 16) = partial apply for closure #1 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:);
      *(void *)(v104 + 24) = v101;
      v193 = (_UNKNOWN **)partial apply for thunk for @callee_guaranteed () -> ();
      uint64_t v194 = v104;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v190 = 1107296256;
      v191 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v192 = (ValueMetadata *)&block_descriptor_16;
      id v105 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      id v106 = v103;
      swift_release();
      uint64_t v107 = swift_allocObject();
      *(void *)(v107 + 16) = v92;
      *(unsigned char *)(v107 + 24) = v179;
      v193 = (_UNKNOWN **)partial apply for closure #2 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:);
      uint64_t v194 = v107;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v190 = 1107296256;
      uint64_t v33 = v182;
      v191 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      uint64_t v192 = (ValueMetadata *)&block_descriptor_17_0;
      uint64_t v108 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      uint64_t v13 = v96;
      swift_release();
      objc_msgSend(v106, sel_performBatchUpdates_completion_, v105, v108);
      _Block_release(v108);
      _Block_release(v105);
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v13 = (char *)v177;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v13 = (char *)v177;
  }
  id v152 = objc_msgSend(v184, sel_items);
  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v27 & 0xC000000000000001) != 0) {
    goto LABEL_70;
  }
  if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v153 = *(void **)(v27 + 32);
    swift_unknownObjectRetain();
LABEL_64:
    swift_bridgeObjectRelease();
    id v154 = objc_msgSend(v153, sel_dragItem);
    swift_unknownObjectRelease();
    uint64_t v155 = v163;
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v157 = objc_msgSend(v184, sel_dropItem_toItemAtIndexPath_, v154, isa);
    swift_unknownObjectRelease();

    v158 = (void (*)(char *, char *))v33[1];
    v158(v155, v13);
    v158(v165, v13);
    $defer #1 <A>() in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(v183);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
    return;
  }
  __break(1u);
}

void closure #1 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  UICollectionViewListCoordinatorBase.stopWaitingForAnimationCompletion()();
  swift_beginAccess();
  uint64_t v7 = type metadata accessor for ShadowListDataSource();
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.moveCell(fromRowAt:to:)(a2, a3, v7, WitnessTable);
  swift_endAccess();
  UICollectionViewListCoordinatorBase.commitUpdates()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  Class v10 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a4, sel_moveItemAtIndexPath_toIndexPath_, isa, v10);
}

uint64_t closure #4 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v5 = type metadata accessor for ShadowListDataSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = (char *)a1 + *(void *)(v4 + 96);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v9, v5);
  ShadowListDataSource.performDrop(to:)(a2, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void @objc CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dropPreviewParametersForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))CollectionViewListDragAndDropController.collectionView(_:dropPreviewParametersForItemAt:));
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidExit:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnd:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

id TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = (void *)(*MEMORY[0x1E4FBC8C8] & *v3);
  uint64_t v8 = v7[20];
  uint64_t v9 = v7[21];
  uint64_t v10 = type metadata accessor for ShadowListDataSource();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v18[-v12];
  uint64_t v14 = (char *)v3 + v7[12];
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v13, v14, v10);
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  char v21 = a3;
  uint64_t v22 = a2;
  uint64_t v15 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITableViewDropProposal);
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:), (uint64_t)v18, v10, v15, WitnessTable, (uint64_t)&v23);
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  id result = v23;
  if (!v23) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D28]), sel_initWithDropOperation_, 0);
  }
  return result;
}

id closure #1 in TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X2>, void *a4@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for _RowVisitationContext();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v25 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v25 - v11, a1, v8, v10);
  if (a2)
  {
    BOOL v13 = _RowVisitationContext.canMove.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    if (v13)
    {
      id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D28]), sel_initWithDropOperation_intent_, 3, 1);
LABEL_20:
      *a4 = result;
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  id v15 = objc_msgSend(a3, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v16 >> 62))
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17) {
      goto LABEL_7;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    v22._rawuint64_t Value = (void *)MEMORY[0x1E4FBC860];
LABEL_16:
    Swift::Bool v23 = _RowVisitationContext.canHandleDropInsert(items:)(v22);
    swift_bridgeObjectRelease();
    id v24 = objc_allocWithZone(MEMORY[0x1E4FB1D28]);
    if (v23) {
      id result = objc_msgSend(v24, sel_initWithDropOperation_intent_, 2, 1);
    }
    else {
      id result = objc_msgSend(v24, sel_initWithDropOperation_, 0);
    }
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v26 = (void *)MEMORY[0x1E4FBC860];
  id result = (id)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = a4;
    uint64_t v18 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0) {
        id v19 = (id)MEMORY[0x18C117680](v18, v16);
      }
      else {
        id v19 = *(id *)(v16 + 8 * v18 + 32);
      }
      uint64_t v20 = v19;
      ++v18;
      id v21 = objc_msgSend(v19, sel_itemProvider, v25);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v17 != v18);
    v22._rawuint64_t Value = v26;
    swift_bridgeObjectRelease();
    a4 = v25;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

void CollectionViewListDragAndDropController.validIndexPath(in:)(void *a1, SEL *a2)
{
  uint64_t v4 = (char *)objc_msgSend(a1, sel_numberOfSections);
  uint64_t v5 = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
  }
  else if (((unint64_t)v5 & 0x8000000000000000) != 0 || !__OFSUB__(objc_msgSend(a1, *a2, v5), 1))
  {
LABEL_9:
    JUMPOUT(0x18C10A880);
  }
  __break(1u);
  goto LABEL_9;
}

void closure #1 in TableViewListDragAndDropController.dragItem(at:tableView:session:)(void *a1@<X8>)
{
  void (*v6)(void *__return_ptr, void);
  void (*v7)(void *__return_ptr, uint64_t);

  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  type metadata accessor for _RowVisitationContext();
  swift_bridgeObjectRetain();
  uint64_t v2 = ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v3 = (uint64_t)v7;
  if (!v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v7(&v7, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = v7;
  if (!v7)
  {
LABEL_5:
    uint64_t v6 = (void (*)(void *__return_ptr, void))MEMORY[0x1E4FBC860];
    goto LABEL_6;
  }
  type metadata accessor for DropDestination?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_188351940;
  *(void *)(v5 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1710]), sel_initWithItemProvider_, v4);
  uint64_t v7 = (void (*)(void *__return_ptr, uint64_t))v5;
  specialized Array._endMutation()();
  uint64_t v6 = v7;

LABEL_6:
  *a1 = v6;
}

Class @objc TableViewListDragAndDropController.tableView(_:itemsForBeginning:at:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized TableViewListDragAndDropController.tableView(_:itemsForAddingTo:at:point:)(v9, (uint64_t)v8);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v11.super.isa;
}

Class @objc TableViewListDragAndDropController.tableView(_:itemsForAddingTo:at:point:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized TableViewListDragAndDropController.tableView(_:itemsForAddingTo:at:point:)(v9, (uint64_t)v8);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v11.super.isa;
}

void @objc TableViewListDragAndDropController.tableView(_:dragSessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

uint64_t @objc TableViewListDragAndDropController.tableView(_:dragSessionDidEnd:)()
{
  return specialized TableViewListDragAndDropController.tableView(_:dragSessionDidEnd:)();
}

void TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v5 = (void *)(*MEMORY[0x1E4FBC8C8] & *v2);
  uint64_t v6 = v5[20];
  uint64_t v7 = v5[21];
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  NSArray v11 = &v28[-v10];
  uint64_t v12 = (char *)v2 + v5[12];
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v29 = v6;
  uint64_t v30 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:), (uint64_t)v28, v8, MEMORY[0x1E4FBB390], WitnessTable, (uint64_t)v31);
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  if (v31[0] != 2 && (v31[0] & 1) != 0)
  {
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1720]), sel_init);
    id v15 = self;
    id v16 = v14;
    id v17 = objc_msgSend(v15, sel_clearColor);
    objc_msgSend(v16, sel_setBackgroundColor_, v17);

    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v19 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

    if (!v19)
    {
      __break(1u);
      return;
    }
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCastUnknownClassUnconditional();
    long long v32 = 0u;
    long long v33 = 0u;
    char v34 = 6;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 56))(AssociatedTypeWitness);
    if (v22)
    {
      Swift::Bool v23 = (void *)v22;
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();

      uint64_t v24 = ViewGraph.responderNode.getter();
      swift_release();
      if (v24)
      {
        type metadata accessor for ViewResponder();
        if (swift_dynamicCastClass())
        {
          *(void *)&v35[0] = 2;
          hostingViewCoordinateSpace.getter();
          v31[40] = 1;
          dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
          outlined destroy of CoordinateSpace((uint64_t)v31);
          v35[0] = v32;
          v35[1] = v33;
          char v36 = v34;
          outlined init with take of Path.Storage((uint64_t)v35, (uint64_t)v31);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v31, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          char v25 = Path.isEmpty.getter();
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v35, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          if (v25)
          {
            _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v35, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);

            swift_release();
          }
          else
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
            id v26 = v16;
            _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v35, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
            id v27 = UIBezierPath.init(_:)((uint64_t)v35);
            objc_msgSend(v26, sel_setVisiblePath_, v27);
            swift_release();

            _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v35, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          }
          return;
        }
        swift_release();
      }
    }
  }
}

uint64_t closure #1 in TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  type metadata accessor for _RowVisitationContext();
  uint64_t result = _RowVisitationContext.wantsClippedBackground.getter();
  *a1 = result & 1;
  return result;
}

id @objc TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:));
}

uint64_t TableViewListDragAndDropController.tableView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  id v108 = a3;
  uint64_t v100 = a1;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = type metadata accessor for ShadowRowCollection();
  uint64_t v96 = *(void *)(v7 - 8);
  uint64_t v97 = v7;
  MEMORY[0x1F4188790](v7);
  BOOL v95 = (char *)&v89 - v8;
  uint64_t v9 = type metadata accessor for ShadowSectionCollection();
  uint64_t v104 = *(void *)(v9 - 8);
  uint64_t v105 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v102 = (uint64_t)&v89 - v10;
  uint64_t v107 = type metadata accessor for ShadowListDataSource();
  uint64_t v11 = *(void *)(v107 - 8);
  MEMORY[0x1F4188790](v107);
  uint64_t v13 = (char *)&v89 - v12;
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8);
  id v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  id v19 = (char *)&v89 - v18;
  uint64_t v20 = type metadata accessor for IndexPath();
  uint64_t v98 = *(void *)(v20 - 8);
  uint64_t v109 = v98;
  MEMORY[0x1F4188790](v20);
  uint64_t v89 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v103 = (char *)&v89 - v23;
  MEMORY[0x1F4188790](v24);
  id v26 = (char *)&v89 - v25;
  double v28 = MEMORY[0x1F4188790](v27);
  long long v101 = (char *)&v89 - v29;
  uint64_t v92 = a2;
  id v30 = objc_msgSend(a2, sel_localDragSession, v28);
  uint64_t v31 = MEMORY[0x18C119DF0]((char *)v4 + *(void *)((*v6 & *v4) + 0x88));
  id v32 = (id)v31;
  id v106 = v26;
  uint64_t v90 = v13;
  if (v30)
  {
    swift_unknownObjectRelease();
    uint64_t v33 = (uint64_t)v108;
    if (v32)
    {
      swift_unknownObjectRelease();
      if (v30 == v32)
      {
        LODWORD(v101) = 1;
        uint64_t v34 = v107;
        uint64_t v35 = v109;
LABEL_28:
        outlined init with copy of IndexPath?(v33, (uint64_t)v16);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v16, 1, v20) == 1)
        {
          CollectionViewListDragAndDropController.validIndexPath(in:)(v100, (SEL *)&selRef_numberOfRowsInSection_);
          outlined destroy of IndexPath?((uint64_t)v16);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v26, v16, v20);
        }
        uint64_t v58 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x60);
        uint64_t v91 = v4;
        unint64_t v59 = (char *)v4 + v58;
        swift_beginAccess();
        uint64_t v60 = *(void **)(v11 + 16);
        id v108 = v59;
        uint64_t v100 = v60;
        ((void (*)(char *, char *, uint64_t))v60)(v13, v59, v34);
        uint64_t v61 = v102;
        ShadowListDataSource.sectionIDs.getter(v102);
        uint64_t v99 = *(void (**)(char *, uint64_t))(v11 + 8);
        v99(v13, v34);
        uint64_t v62 = v105;
        uint64_t v63 = v34;
        uint64_t v64 = ShadowSectionCollection.count.getter(v105);
        (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v61, v62);
        uint64_t v65 = IndexPath.section.getter();
        uint64_t v66 = v103;
        (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v103, v26, v20);
        uint64_t v105 = v64;
        uint64_t v67 = v20;
        uint64_t v93 = v11 + 8;
        id v94 = (id)(v11 + 16);
        if (v65 >= v64)
        {
          uint64_t v76 = *(void (**)(char *, uint64_t))(v109 + 8);
          uint64_t v81 = v67;
          v76(v66, v67);
          id v79 = v108;
          id v74 = v99;
          uint64_t v68 = (void (*)(char *, id, uint64_t))v100;
        }
        else
        {
          uint64_t v104 = IndexPath.row.getter();
          uint64_t v68 = (void (*)(char *, id, uint64_t))v100;
          ((void (*)(char *, id, uint64_t))v100)(v13, v108, v63);
          uint64_t v69 = IndexPath.section.getter();
          uint64_t WitnessTable = swift_getWitnessTable();
          uint64_t v71 = v66;
          char v72 = v95;
          ListDiffable.rowIDs(forSectionAtOffset:)(v69, v63, WitnessTable);
          uint64_t v73 = v13;
          id v74 = v99;
          v99(v73, v63);
          uint64_t v75 = v71;
          uint64_t v76 = *(void (**)(char *, uint64_t))(v109 + 8);
          v76(v75, v67);
          uint64_t v77 = v97;
          uint64_t v78 = ShadowRowCollection.count.getter(v97);
          (*(void (**)(char *, uint64_t))(v96 + 8))(v72, v77);
          id v79 = v108;
          if (v104 < v78)
          {
            uint64_t v80 = (uint64_t)v106;
            id v56 = TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)((uint64_t)v106, (uint64_t)v92, (char)v101);
            v76((char *)v80, v67);
            return (uint64_t)v56;
          }
          uint64_t v81 = v67;
        }
        if (v101)
        {
          id v82 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D28]), sel_initWithDropOperation_intent_, 3, 1);
        }
        else
        {
          if (v105 >= 1)
          {
            uint64_t v83 = v90;
            uint64_t v84 = v107;
            v68(v90, v79, v107);
            uint64_t v85 = swift_getWitnessTable();
            id v86 = v95;
            ListDiffable.rowIDs(forSectionAtOffset:)(0, v84, v85);
            v74(v83, v84);
            uint64_t v87 = v97;
            swift_getWitnessTable();
            LOBYTE(v83) = Collection.isEmpty.getter();
            (*(void (**)(char *, uint64_t))(v96 + 8))(v86, v87);
            if ((v83 & 1) == 0)
            {
              uint64_t v88 = (uint64_t)v89;
              MEMORY[0x18C10A880](0, 0);
              id v56 = TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)(v88, (uint64_t)v92, 0);
              v76((char *)v88, v81);
              v76(v106, v81);
              return (uint64_t)v56;
            }
          }
          id v82 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D28]), sel_initWithDropOperation_, 0);
        }
        id v56 = v82;
        v76(v106, v81);
        return (uint64_t)v56;
      }
    }
  }
  else
  {
    if (!v31)
    {
      LODWORD(v101) = 1;
      uint64_t v34 = v107;
      uint64_t v33 = (uint64_t)v108;
      uint64_t v35 = v109;
      goto LABEL_28;
    }
    swift_unknownObjectRelease();
    uint64_t v33 = (uint64_t)v108;
  }
  outlined init with copy of IndexPath?(v33, (uint64_t)v19);
  uint64_t v35 = v109;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of IndexPath?((uint64_t)v19);
    LODWORD(v101) = 0;
    uint64_t v34 = v107;
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v101, v19, v20);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v37 = objc_msgSend(v100, sel_cellForRowAtIndexPath_, isa);

  id v38 = v37;
  uint64_t v34 = v107;
  if (!v38)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t))(v35 + 8))(v101, v20);
    LODWORD(v101) = 0;
    goto LABEL_28;
  }
  type metadata accessor for ListTableViewCell();
  uint64_t v39 = swift_dynamicCastClass();
  if (!v39)
  {

    goto LABEL_18;
  }
  uint64_t v93 = v11;
  uint64_t v40 = *MEMORY[0x1E4FBC8C8];
  long long v41 = *(void **)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x90));
  if (!v41)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v101, v20);

    LODWORD(v101) = 0;
LABEL_27:
    uint64_t v11 = v93;
    goto LABEL_28;
  }
  long long v42 = *(void **)(v39 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
  if (!v42)
  {
LABEL_25:

    (*(void (**)(char *, uint64_t))(v35 + 8))(v101, v20);
    LODWORD(v101) = 0;
    goto LABEL_27;
  }
  id v108 = v38;
  uint64_t v99 = (void (*)(char *, uint64_t))v20;
  char v43 = *(char **)((char *)v42 + *(void *)((*v42 & v40) + 0x100));
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t result = MEMORY[0x18C119DF0](&v43[direct field offset for DragAndDropBridge.host]);
  if (result)
  {
    long long v45 = (void *)result;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>();
    id v46 = v43;
    id v94 = v41;
    uint64_t v47 = ViewRendererHost.responderNode.getter();

    if (v47)
    {
      MEMORY[0x1F4188790](v48);
      *(&v89 - 2) = (char *)&v110;
      dispatch thunk of ResponderNode.visit(applying:)();

      swift_release();
    }
    else
    {
    }
    uint64_t v20 = (uint64_t)v99;
    id v49 = v110;
    id v26 = v106;
    uint64_t v13 = v90;
    if (v110)
    {
      uint64_t v50 = v111;
      uint64_t v51 = (void *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70));
      swift_beginAccess();
      swift_retain();
      uint64_t v52 = v51;
      uint64_t v53 = v94;
      id v54 = specialized static UIDropProposal.fromActiveDrop(_:session:responder:host:)(v52, v92, v49, v50, v94);
      swift_endAccess();
      swift_release();
      if (objc_msgSend(v54, sel_operation) == (id)2)
      {
        id v55 = objc_msgSend(v54, sel_operation);
        id v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D28]), sel_initWithDropOperation_intent_, v55, 2);
        swift_release();

        (*(void (**)(char *, uint64_t))(v109 + 8))(v101, v20);
        return (uint64_t)v56;
      }
      BOOL v57 = v54;
      uint64_t v35 = v109;
      (*(void (**)(char *, uint64_t))(v109 + 8))(v101, v20);

      swift_release();
      LODWORD(v101) = 0;
      uint64_t v34 = v107;
      goto LABEL_27;
    }

    uint64_t v34 = v107;
    id v38 = v108;
    uint64_t v35 = v109;
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

id @objc TableViewListDragAndDropController.tableView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, uint64_t, char *))TableViewListDragAndDropController.tableView(_:dropSessionDidUpdate:withDestinationIndexPath:));
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(id, uint64_t, char *))
{
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v20 - v12;
  if (a5)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = type metadata accessor for IndexPath();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
  }
  else
  {
    uint64_t v15 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  }
  id v16 = a3;
  swift_unknownObjectRetain();
  id v17 = a1;
  uint64_t v18 = (void *)a6(v16, a4, v13);

  swift_unknownObjectRelease();
  outlined destroy of IndexPath?((uint64_t)v13);

  return v18;
}

void TableViewListDragAndDropController.tableView(_:performDropWith:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v116 = a2;
  uint64_t v102 = a1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = v4;
  uint64_t v103 = AssociatedTypeWitness;
  uint64_t v101 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v106 = type metadata accessor for DropCoordinator();
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  uint64_t v104 = (uint64_t)&v98 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v100 = (char *)&v98 - v10;
  uint64_t v110 = type metadata accessor for ShadowListDataSource();
  uint64_t v109 = *(void *)(v110 - 8);
  MEMORY[0x1F4188790](v110);
  id v108 = (char *)&v98 - v11;
  uint64_t v115 = TupleTypeMetadata2;
  uint64_t v12 = type metadata accessor for DropCoordinator.Operation();
  uint64_t v112 = *(void *)(v12 - 8);
  uint64_t v113 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v114 = (uint64_t)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v99 = (char *)&v98 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v111 = (char *)&v98 - v17;
  uint64_t v18 = type metadata accessor for IndexPath();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v98 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v98 - v22;
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v107 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v98 - v28;
  id v30 = objc_msgSend(objc_msgSend(v116, sel_session, v27), sel_localDragSession);
  swift_unknownObjectRelease();
  uint64_t v31 = MEMORY[0x18C119DF0](&v3[*(void *)((*v6 & *(void *)v3) + 0x88)]);
  id v32 = (id)v31;
  uint64_t v33 = v6;
  if (v30)
  {
    swift_unknownObjectRelease();
    if (v32)
    {
      swift_unknownObjectRelease();
      BOOL v34 = v30 == v32;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v31)
  {
    swift_unknownObjectRelease();
LABEL_6:
    BOOL v34 = 0;
    goto LABEL_8;
  }
  BOOL v34 = 1;
LABEL_8:
  id v35 = objc_msgSend(v116, sel_items);
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UITableViewDropItem);
  unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  BOOL v38 = v37 == 1 && v34;
  uint64_t v39 = (char *)v18;
  uint64_t v40 = (uint64_t)v23;
  uint64_t v41 = v19;
  if (v38)
  {
    id v42 = objc_msgSend(v116, sel_items);
    uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v43 & 0xC000000000000001) != 0)
    {
      uint64_t v44 = (void *)MEMORY[0x18C117680](0, v43);
    }
    else
    {
      if (!*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_52;
      }
      uint64_t v44 = *(void **)(v43 + 32);
      swift_unknownObjectRetain();
    }
    swift_bridgeObjectRelease();
    id v45 = objc_msgSend(v44, sel_sourceIndexPath);
    swift_unknownObjectRelease();
    if (v45)
    {
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, uint64_t, char *))(v19 + 32))(v29, v40, v39);
      (*(void (**)(char *, void, uint64_t, char *))(v19 + 56))(v29, 0, 1, v39);
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v19 + 48))(v29, 1, v39) != 1)
      {
        outlined destroy of IndexPath?((uint64_t)v29);
        goto LABEL_22;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, char *))(v19 + 56))(v29, 1, 1, v39);
    }
    outlined destroy of IndexPath?((uint64_t)v29);
    id v46 = objc_msgSend(v116, sel_proposal);
    id v47 = objc_msgSend(v46, sel_operation);

    if (v47 == (id)3) {
      return;
    }
  }
LABEL_22:
  uint64_t v48 = v110;
  id v49 = &v3[*(void *)((*v33 & *(void *)v3) + 0x70)];
  swift_beginAccess();
  if (*(void *)v49 || *((void *)v49 + 1) != 1)
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v51 = (void *)Strong;
      uint64_t v52 = *((void *)v49 + 1);
      uint64_t v53 = *(void **)&v3[*(void *)((*v33 & *(void *)v3) + 0x90)];
      if (v53)
      {
        id v54 = v53;
        id v55 = objc_msgSend(v116, sel_session);
        v121[3] = &type metadata for DropInfoAdaptor;
        v121[4] = &protocol witness table for DropInfoAdaptor;
        uint64_t v56 = swift_allocObject();
        BOOL v57 = (void *)(v56 + 16);
        v121[0] = v56;
        id v58 = v54;
        swift_retain();
        DropInfoAdaptor.init(_:host:responder:)(v55, v58, v51, v57);
        uint64_t v59 = *v51;
        uint64_t v117 = v51;
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v52 + 8))(v118, v59, v52);
        uint64_t v60 = v119;
        if (v119)
        {
          uint64_t v61 = v120;
          __swift_project_boxed_opaque_existential_1(v118, v119);
          (*(void (**)(void *, uint64_t, uint64_t))(v61 + 16))(v121, v60, v61);

          swift_release();
          outlined destroy of DropInfo((uint64_t)v121);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
        }
        else
        {
          swift_release();

          outlined destroy of DropInfo((uint64_t)v121);
          outlined destroy of DropDelegate?((uint64_t)v118);
        }
        goto LABEL_48;
      }
      swift_release();
    }
  }
  id v62 = objc_msgSend(v116, sel_destinationIndexPath);
  if (v62)
  {
    uint64_t v63 = v62;
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v64 = *(void (**)(char *, uint64_t, char *))(v41 + 32);
    uint64_t v65 = (uint64_t)v107;
    v64(v107, v40, v39);
    (*(void (**)(uint64_t, void, uint64_t, char *))(v41 + 56))(v65, 0, 1, v39);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v41 + 48))(v65, 1, v39) != 1)
    {
      uint64_t v66 = (uint64_t)v98;
      v64(v98, v65, v39);
      uint64_t v67 = v33;
      uint64_t v68 = (uint64_t)v99;
      uint64_t v69 = (uint64_t)&v99[*(int *)(v115 + 48)];
      uint64_t v70 = &v3[*(void *)((*v67 & *(void *)v3) + 0x60)];
      swift_beginAccess();
      uint64_t v71 = v109;
      char v72 = v108;
      (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v108, v70, v48);
      uint64_t WitnessTable = swift_getWitnessTable();
      ListDiffable.rowIndex(at:)(v68, v69, v66, v48, WitnessTable);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v48);
      (*(void (**)(uint64_t, char *))(v41 + 8))(v66, v39);
      uint64_t v74 = v113;
      swift_storeEnumTagMultiPayload();
      uint64_t v76 = v111;
      uint64_t v75 = v112;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v111, v68, v74);
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v65 = (uint64_t)v107;
    (*(void (**)(char *, uint64_t, uint64_t, char *))(v41 + 56))(v107, 1, 1, v39);
  }
  outlined destroy of IndexPath?(v65);
  uint64_t v77 = v115;
  uint64_t v78 = *(int *)(v115 + 48);
  uint64_t v107 = v39;
  uint64_t v79 = (uint64_t)v100;
  uint64_t v80 = (uint64_t)&v100[v78];
  uint64_t v81 = &v3[*(void *)((*v33 & *(void *)v3) + 0x60)];
  swift_beginAccess();
  uint64_t v82 = v109;
  uint64_t v83 = v108;
  (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v108, v81, v48);
  CollectionViewListDragAndDropController.validIndexPath(in:)(v102, (SEL *)&selRef_numberOfRowsInSection_);
  uint64_t v84 = swift_getWitnessTable();
  ListDiffable.rowIndex(at:)(v79, v80, v40, v48, v84);
  (*(void (**)(uint64_t, char *))(v41 + 8))(v40, v107);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v48);
  uint64_t v76 = v111;
  uint64_t v85 = &v111[*(int *)(v77 + 48)];
  (*(void (**)(char *, uint64_t))(*(void *)(v103 - 8) + 32))(v111, v79);
  (*(void (**)(char *, uint64_t))(*(void *)(v101 - 8) + 32))(v85, v80);
  uint64_t v74 = v113;
  swift_storeEnumTagMultiPayload();
  uint64_t v75 = v112;
LABEL_34:
  (*(void (**)(uint64_t, char *, uint64_t))(v75 + 16))(v114, v76, v74);
  id v86 = objc_msgSend(objc_msgSend(v116, sel_session), sel_items);
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v87 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v88)
    {
LABEL_36:
      v118[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v88 & 0x8000000000000000) == 0)
      {
        uint64_t v89 = 0;
        do
        {
          if ((v87 & 0xC000000000000001) != 0) {
            id v90 = (id)MEMORY[0x18C117680](v89, v87);
          }
          else {
            id v90 = *(id *)(v87 + 8 * v89 + 32);
          }
          uint64_t v91 = v90;
          ++v89;
          id v92 = objc_msgSend(v90, sel_itemProvider);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v88 != v89);
        uint64_t v93 = v118[0];
        swift_bridgeObjectRelease();
        uint64_t v75 = v112;
        uint64_t v74 = v113;
        uint64_t v76 = v111;
        goto LABEL_47;
      }
LABEL_52:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v88 = *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v88) {
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v93 = MEMORY[0x1E4FBC860];
LABEL_47:
  uint64_t v94 = v104;
  uint64_t v95 = DropCoordinator.init(operation:items:)(v114, v93, v104);
  double v96 = MEMORY[0x1F4188790](v95);
  *(&v98 - 2) = v3;
  *(&v98 - 1) = (char *)v94;
  v97(partial apply for closure #2 in TableViewListDragAndDropController.tableView(_:performDropWith:), v96);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v74);
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v94, v106);
LABEL_48:
  $defer #1 <A>() in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(v3);
}

uint64_t $defer #1 <A>() in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(void *a1)
{
  v3[0] = xmmword_18834BB90;
  memset(&v3[1], 0, 57);
  uint64_t v1 = (uint64_t)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70);
  swift_beginAccess();
  outlined assign with take of DropDestination?((uint64_t)v3, v1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  return swift_endAccess();
}

uint64_t closure #2 in TableViewListDragAndDropController.tableView(_:performDropWith:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v5 = type metadata accessor for ShadowListDataSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = (char *)a1 + *(void *)(v4 + 96);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v9, v5);
  ShadowListDataSource.performDrop(to:)(a2, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void @objc TableViewListDragAndDropController.tableView(_:performDropWith:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  id v8 = a3;
  swift_unknownObjectRetain();
  id v9 = a1;
  a5(v8, a4);

  swift_unknownObjectRelease();
}

id @objc TableViewListDragAndDropController.tableView(_:dropPreviewParametersForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))TableViewListDragAndDropController.tableView(_:dropPreviewParametersForRowAt:));
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(id, char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  uint64_t v14 = (void *)a5(v12, v11);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

  return v14;
}

void @objc TableViewListDragAndDropController.tableView(_:dropSessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id))
{
  id v7 = a3;
  swift_unknownObjectRetain();
  id v8 = a1;
  a5(v7);

  swift_unknownObjectRelease();
}

void @objc TableViewListDragAndDropController.tableView(_:dropSessionDidExit:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc TableViewListDragAndDropController.tableView(_:dropSessionDidEnd:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8 = a3;
  swift_unknownObjectRetain();
  id v9 = a1;
  a5(a4);

  swift_unknownObjectRelease();
}

uint64_t type metadata accessor for TableViewListDragAndDropController()
{
  return __swift_instantiateGenericMetadata();
}

void specialized ListDragAndDropControllerBase.init()()
{
}

uint64_t specialized CollectionViewListDragAndDropController.collectionView(_:itemsForAddingTo:at:point:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a3, v6, v8);
  uint64_t v11 = (void **)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78));
  swift_beginAccess();
  id v12 = *v11;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v11 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v12 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    *uint64_t v11 = v12;
  }
  unint64_t v15 = v12[2];
  unint64_t v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    id v12 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1, v12);
    *uint64_t v11 = v12;
  }
  _OWORD v12[2] = v15 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, v10, v6);
  swift_endAccess();
  return CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(a3, a1, v17);
}

uint64_t specialized CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(void *a1)
{
  swift_unknownObjectWeakAssign();
  uint64_t v28 = a1;
  id v2 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = (char *)MEMORY[0x1E4FBC860];
  if (!v4)
  {
LABEL_28:
    swift_bridgeObjectRelease_n();
    specialized Sequence.compactMap<A>(_:)((uint64_t)v5);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_setLocalContext_, isa);

    uint64_t v26 = (void *)MEMORY[0x1E4FBC8C8];
    double v27 = (void *)((char *)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x78));
    swift_beginAccess();
    *(void *)((char *)v29 + *(void *)((*v26 & *v29) + 0x80)) = *v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *double v27 = MEMORY[0x1E4FBC860];
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = 4;
  uint64_t v40 = MEMORY[0x1E4FBC840] + 8;
  unint64_t v41 = v3 & 0xC000000000000001;
  unint64_t v30 = v3;
  uint64_t v39 = v4;
  while (1)
  {
    if (v41) {
      id v7 = (id)MEMORY[0x18C117680](v6 - 4, v3);
    }
    else {
      id v7 = *(id *)(v3 + 8 * v6);
    }
    double v8 = v7;
    uint64_t v9 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (objc_msgSend(v7, sel_localObject))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v50, 0, sizeof(v50));
    }
    outlined init with take of Any?((uint64_t)v50, (uint64_t)&v42);
    if (!*((void *)&v43 + 1))
    {
      outlined destroy of DropDestination?((uint64_t)&v42, (unint64_t *)&lazy cache variable for type metadata for Any?, v40);
LABEL_19:
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      goto LABEL_20;
    }
    type metadata accessor for DragSourceContext();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(v49 + 24);
    swift_retain();
    swift_release();
    uint64_t v11 = v10 + 152;
    swift_beginAccess();
    _sypSgWOcTm_2(v10 + 152, (uint64_t)&v42, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    if (!*((void *)&v48 + 1)) {
      break;
    }
    long long v55 = v46;
    long long v56 = v47;
    long long v57 = v48;
    long long v51 = v42;
    long long v52 = v43;
    long long v53 = v44;
    long long v54 = v45;
    swift_release();
    uint64_t v4 = v39;
LABEL_20:

    if (*((void *)&v57 + 1))
    {
      long long v46 = v55;
      long long v47 = v56;
      long long v48 = v57;
      long long v42 = v51;
      long long v43 = v52;
      long long v44 = v53;
      long long v45 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v13 = *((void *)v5 + 2);
      unint64_t v12 = *((void *)v5 + 3);
      if (v13 >= v12 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v13 + 1;
      unint64_t v14 = &v5[112 * v13];
      long long v15 = v42;
      long long v16 = v44;
      *((_OWORD *)v14 + 3) = v43;
      *((_OWORD *)v14 + 4) = v16;
      *((_OWORD *)v14 + 2) = v15;
      long long v17 = v45;
      long long v18 = v46;
      long long v19 = v48;
      *((_OWORD *)v14 + 7) = v47;
      *((_OWORD *)v14 + 8) = v19;
      *((_OWORD *)v14 + 5) = v17;
      *((_OWORD *)v14 + 6) = v18;
    }
    else
    {
      outlined destroy of DropDestination?((uint64_t)&v51, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    }
    ++v6;
    if (v9 == v4) {
      goto LABEL_28;
    }
  }
  outlined destroy of DropDestination?((uint64_t)&v42, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  swift_beginAccess();
  uint64_t result = _sypSgWOcTm_2(v10 + 32, (uint64_t)&v42, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  if (*((void *)&v48 + 1))
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for DropDestination?(0, (unint64_t *)&lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, MEMORY[0x1E4FBB320]);
    static Update.dispatchImmediately<A>(_:)();
    char v37 = v42;
    uint64_t v21 = *((void *)&v43 + 1);
    uint64_t v33 = v43;
    uint64_t v34 = *((void *)&v42 + 1);
    uint64_t v22 = *((void *)&v44 + 1);
    uint64_t v31 = *((void *)&v43 + 1);
    uint64_t v32 = *((void *)&v44 + 1);
    uint64_t v23 = *((void *)&v45 + 1);
    uint64_t v35 = v44;
    long long v24 = v45;
    uint64_t v38 = *(void *)&v50[0];
    uint64_t v36 = v46;
    _sypSgWOcTm_2((uint64_t)&v46 + 8, (uint64_t)&v55 + 8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    LOBYTE(v51) = v37;
    *((void *)&v51 + 1) = v34;
    *(void *)&long long v52 = v33;
    *((void *)&v52 + 1) = v21;
    *(void *)&long long v53 = v35;
    *((void *)&v53 + 1) = v22;
    *(void *)&long long v54 = v24;
    *((void *)&v54 + 1) = v23;
    *(void *)&long long v55 = v36;
    *((void *)&v57 + 1) = v38;
    outlined copy of AppIntentExecutor?(v34);
    outlined copy of AppIntentExecutor?(v31);
    outlined copy of AppIntentExecutor?(v32);
    outlined copy of AppIntentExecutor?(*((uint64_t *)&v24 + 1));
    outlined destroy of _DraggingModifier((uint64_t)&v42);
    outlined init with copy of DragContext((uint64_t)&v51, (uint64_t)&v42);
    swift_beginAccess();
    outlined assign with take of DropDestination?((uint64_t)&v42, v11, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    swift_endAccess();
    swift_release();
    unint64_t v3 = v30;
    uint64_t v4 = v39;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t specialized CollectionViewListDragAndDropController.collectionView(_:dragSessionDidEnd:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakAssign();
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x80)) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  unint64_t v3 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x78));
  swift_beginAccess();
  *unint64_t v3 = v2;
  return swift_bridgeObjectRelease();
}

uint64_t specialized DragAndDropBridge.itemsInListForSession(_:)()
{
  uint64_t v6 = 0;
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    uint64_t v2 = (void *)result;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>();
    uint64_t v3 = ViewRendererHost.responderNode.getter();

    if (v3)
    {
      MEMORY[0x1F4188790](v4);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
    uint64_t v5 = MEMORY[0x1E4FBC860];
    swift_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized TableViewListDragAndDropController.dragItem(at:tableView:session:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA0);
  uint64_t v8 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA8);
  uint64_t v9 = type metadata accessor for ShadowListDataSource();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v27 - v11;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v14 = objc_msgSend(a2, sel_cellForRowAtIndexPath_, isa);

  if (!v14) {
    goto LABEL_9;
  }
  type metadata accessor for ListTableViewCell();
  uint64_t v15 = swift_dynamicCastClass();
  if (!v15 || (long long v16 = *(void **)(v15 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host)) == 0)
  {

LABEL_9:
    uint64_t v21 = (char *)v3 + *(void *)((*v6 & *v3) + 0x60);
    swift_beginAccess();
    uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v12, v21, v9);
    MEMORY[0x1F4188790](v22);
    *(&v27 - 2) = v7;
    *(&v27 - 1) = v8;
    type metadata accessor for [UIDragItem]();
    uint64_t v24 = v23;
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in TableViewListDragAndDropController.dragItem(at:tableView:session:), (uint64_t)(&v27 - 4), v9, v24, WitnessTable, (uint64_t)&v29);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v29) {
      return v29;
    }
    else {
      return MEMORY[0x1E4FBC860];
    }
  }
  long long v17 = *(void **)((char *)v16 + *(void *)((*v6 & *v16) + 0x100));
  uint64_t v28 = v16;
  id v18 = v17;
  unint64_t v19 = specialized DragAndDropBridge.itemsInListForSession(_:)();

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }

  if (!v20)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    goto LABEL_9;
  }
  return v19;
}

unint64_t specialized TableViewListDragAndDropController.tableView(_:itemsForAddingTo:at:point:)(void *a1, uint64_t a2)
{
  return specialized TableViewListDragAndDropController.dragItem(at:tableView:session:)(a2, a1);
}

void specialized TableViewListDragAndDropController.tableView(_:dragSessionWillBegin:)(void *a1)
{
  swift_unknownObjectWeakAssign();
  uint64_t v26 = a1;
  id v2 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v4)
  {
    unint64_t v38 = v3 & 0xC000000000000001;
    uint64_t v5 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v6 = 4;
    uint64_t v36 = v4;
    uint64_t v37 = MEMORY[0x1E4FBC840] + 8;
    unint64_t v27 = v3;
    while (1)
    {
      if (v38) {
        id v7 = (id)MEMORY[0x18C117680](v6 - 4, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * v6);
      }
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (objc_msgSend(v7, sel_localObject))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v47, 0, sizeof(v47));
      }
      outlined init with take of Any?((uint64_t)v47, (uint64_t)&v39);
      if (!*((void *)&v40 + 1)) {
        break;
      }
      type metadata accessor for DragSourceContext();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v10 = *(void *)(v46 + 24);
      swift_retain();
      swift_release();
      uint64_t v11 = v10 + 152;
      swift_beginAccess();
      _sypSgWOcTm_2(v10 + 152, (uint64_t)&v39, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
      if (*((void *)&v45 + 1))
      {
        long long v52 = v43;
        long long v53 = v44;
        long long v54 = v45;
        long long v48 = v39;
        long long v49 = v40;
        long long v50 = v41;
        long long v51 = v42;
        swift_release();
        uint64_t v4 = v36;
      }
      else
      {
        outlined destroy of DropDestination?((uint64_t)&v39, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        swift_beginAccess();
        uint64_t v20 = _sypSgWOcTm_2(v10 + 32, (uint64_t)&v39, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
        if (!*((void *)&v45 + 1))
        {
          __break(1u);
          return;
        }
        MEMORY[0x1F4188790](v20);
        type metadata accessor for DropDestination?(0, (unint64_t *)&lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, MEMORY[0x1E4FBB320]);
        static Update.dispatchImmediately<A>(_:)();
        char v34 = v39;
        uint64_t v21 = *((void *)&v40 + 1);
        uint64_t v30 = v40;
        uint64_t v31 = *((void *)&v39 + 1);
        uint64_t v22 = *((void *)&v41 + 1);
        uint64_t v28 = *((void *)&v40 + 1);
        uint64_t v29 = *((void *)&v41 + 1);
        uint64_t v23 = *((void *)&v42 + 1);
        uint64_t v32 = v41;
        long long v24 = v42;
        uint64_t v35 = *(void *)&v47[0];
        uint64_t v33 = v43;
        _sypSgWOcTm_2((uint64_t)&v43 + 8, (uint64_t)&v52 + 8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
        LOBYTE(v48) = v34;
        *((void *)&v48 + 1) = v31;
        *(void *)&long long v49 = v30;
        *((void *)&v49 + 1) = v21;
        *(void *)&long long v50 = v32;
        *((void *)&v50 + 1) = v22;
        *(void *)&long long v51 = v24;
        *((void *)&v51 + 1) = v23;
        *(void *)&long long v52 = v33;
        *((void *)&v54 + 1) = v35;
        outlined copy of AppIntentExecutor?(v31);
        outlined copy of AppIntentExecutor?(v28);
        outlined copy of AppIntentExecutor?(v29);
        outlined copy of AppIntentExecutor?(*((uint64_t *)&v24 + 1));
        outlined destroy of _DraggingModifier((uint64_t)&v39);
        outlined init with copy of DragContext((uint64_t)&v48, (uint64_t)&v39);
        swift_beginAccess();
        outlined assign with take of DropDestination?((uint64_t)&v39, v11, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        swift_endAccess();
        swift_release();
        unint64_t v3 = v27;
        uint64_t v4 = v36;
      }
LABEL_20:

      if (*((void *)&v54 + 1))
      {
        long long v43 = v52;
        long long v44 = v53;
        long long v45 = v54;
        long long v39 = v48;
        long long v40 = v49;
        long long v41 = v50;
        long long v42 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        unint64_t v13 = *((void *)v5 + 2);
        unint64_t v12 = *((void *)v5 + 3);
        if (v13 >= v12 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v5);
        }
        *((void *)v5 + 2) = v13 + 1;
        id v14 = &v5[112 * v13];
        long long v15 = v39;
        long long v16 = v41;
        *((_OWORD *)v14 + 3) = v40;
        *((_OWORD *)v14 + 4) = v16;
        *((_OWORD *)v14 + 2) = v15;
        long long v17 = v42;
        long long v18 = v43;
        long long v19 = v45;
        *((_OWORD *)v14 + 7) = v44;
        *((_OWORD *)v14 + 8) = v19;
        *((_OWORD *)v14 + 5) = v17;
        *((_OWORD *)v14 + 6) = v18;
      }
      else
      {
        outlined destroy of DropDestination?((uint64_t)&v48, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
      }
      ++v6;
      if (v9 == v4) {
        goto LABEL_29;
      }
    }
    outlined destroy of DropDestination?((uint64_t)&v39, (unint64_t *)&lazy cache variable for type metadata for Any?, v37);
LABEL_19:
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    goto LABEL_20;
  }
  uint64_t v5 = (char *)MEMORY[0x1E4FBC860];
LABEL_29:
  swift_bridgeObjectRelease_n();
  specialized Sequence.compactMap<A>(_:)((uint64_t)v5);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v26, sel_setLocalContext_, isa);
}

uint64_t specialized TableViewListDragAndDropController.tableView(_:dragSessionDidEnd:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_18796E25C()
{
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined destroy of DropInfo(uint64_t a1)
{
  return a1;
}

void type metadata accessor for DropDelegate?()
{
  if (!lazy cache variable for type metadata for DropDelegate?)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for DropDelegate);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?);
    }
  }
}

uint64_t partial apply for closure #1 in TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)(a1);
}

uint64_t outlined destroy of IndexPath?(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #2 in TableViewListDragAndDropController.tableView(_:performDropWith:)()
{
  return closure #2 in TableViewListDragAndDropController.tableView(_:performDropWith:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in DragAndDropBridge.outermostDropResponder()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in DragAndDropBridge.outermostDropResponder()(a1, *(uint64_t **)(v2 + 16), a2);
}

id partial apply for closure #1 in TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)(a1, *(unsigned char *)(v2 + 32), *(void **)(v2 + 40), a2);
}

uint64_t outlined destroy of DropDestination?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for DropDestination?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t partial apply for closure #1 in _DraggingModifier.resolve()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _DraggingModifier.resolve()(*(void *)(v1 + 16), a1);
}

uint64_t outlined init with copy of DragContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of DropDestination?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for DropDestination?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

void partial apply for closure #1 in TableViewListDragAndDropController.dragItem(at:tableView:session:)(void *a1@<X8>)
{
}

void type metadata accessor for [UIDragItem]()
{
  if (!lazy cache variable for type metadata for [UIDragItem])
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIDragItem);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIDragItem]);
    }
  }
}

uint64_t outlined destroy of DragContext(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in DragAndDropBridge.itemsInListForSession(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in DragAndDropBridge.itemsInListForSession(_:)(a1, *(void **)(v2 + 16), a2);
}

void type metadata accessor for DropDestination?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for closure #1 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1);
}

uint64_t partial apply for closure #4 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)()
{
  return closure #4 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_18796E674()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  unint64_t v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v8 = v0 + v4;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v8, v1);
  v9(v0 + v6, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for IndexPath() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  uint64_t v6 = *(void *)(v0 + 32);
  unint64_t v7 = *(void **)(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(v6, v0 + v3, v0 + v5, v7);
}

uint64_t sub_18796E81C()
{
  return swift_deallocObject();
}

uint64_t sub_18796E82C()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)()
{
  *(unsigned char *)(*(void *)(v0 + 16) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0xD0)) = *(unsigned char *)(v0 + 24);
}

id partial apply for closure #2 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)@<X0>(void *a1@<X8>)
{
  return closure #2 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(*(id *)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(uint64_t a1)
{
  return closure #1 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

void partial apply for closure #1 in CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(void *a1@<X8>)
{
}

uint64_t EnvironmentValues.menuOrder.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.menuOrder : EnvironmentValues()
{
  return EnvironmentValues.menuOrder.setter();
}

uint64_t EnvironmentValues.menuOrder.setter()
{
  type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuOrder(_:)()
{
  return swift_release();
}

uint64_t sub_18796EBB4()
{
  return EnvironmentValues.menuOrder.setter();
}

void static MenuOrder.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static MenuOrder.priority.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static MenuOrder.fixed.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

BOOL static MenuOrder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MenuOrder.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MenuOrder.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*EnvironmentValues.menuOrder.modify(void *a1))(uint64_t *a1)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.menuOrder.modify;
}

uint64_t EnvironmentValues.menuOrder.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type MenuOrder and conformance MenuOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuOrder and conformance MenuOrder;
  if (!lazy protocol witness table cache variable for type MenuOrder and conformance MenuOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuOrder and conformance MenuOrder);
  }
  return result;
}

uint64_t sub_18796EF50()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<MenuOrder>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuOrder>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuOrder>);
    }
  }
}

void *type metadata accessor for MenuOrderKey()
{
  return &unk_1ED411B70;
}

unint64_t lazy protocol witness table accessor for type MenuOrder.Guts and conformance MenuOrder.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuOrder.Guts and conformance MenuOrder.Guts;
  if (!lazy protocol witness table cache variable for type MenuOrder.Guts and conformance MenuOrder.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuOrder.Guts and conformance MenuOrder.Guts);
  }
  return result;
}

uint64_t PlaceholderTextShapeStyle._apply(to:)(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 2);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance PlaceholderTextShapeStyle(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 2);
}

ValueMetadata *type metadata accessor for PlaceholderTextShapeStyle()
{
  return &type metadata for PlaceholderTextShapeStyle;
}

uint64_t EnvironmentValues.triggerDeleteBackward.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path setter for EnvironmentValues.triggerDeleteBackward : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*a1, v2);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v1, v2);
}

uint64_t closure #1 in OnDeleteBackwardModifier.body(content:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  outlined copy of Environment<TriggerDeleteBackwardAction?>.Content(v2, v3, v4);
  uint64_t v5 = (void (*)(uint64_t))specialized Environment.wrappedValue.getter(v2, v3, v4);
  uint64_t v7 = v6;
  uint64_t v8 = outlined consume of Environment<TriggerDeleteBackwardAction?>.Content(v2, v3, v4);
  if (v5)
  {
    v5(v8);
    uint64_t v8 = outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v5, v7);
  }
  return (*(uint64_t (**)(uint64_t))a1)(v8);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnDeleteBackwardModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t KeyPath = swift_getKeyPath();
  long long v8 = *((_OWORD *)v1 + 1);
  char v9 = *((unsigned char *)v1 + 32);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  *(_OWORD *)(v6 + 32) = *((_OWORD *)v1 + 1);
  *(unsigned char *)(v6 + 48) = *((unsigned char *)v1 + 32);
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in OnDeleteBackwardModifier.body(content:);
  a1[2] = v6;
  swift_retain();
  return outlined retain of Environment<TriggerDeleteBackwardAction?>((uint64_t)&v8);
}

void View.onDeleteBackward(_:)()
{
}

uint64_t sub_18796F3D4()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type OnDeleteBackwardModifier and conformance OnDeleteBackwardModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnDeleteBackwardModifier and conformance OnDeleteBackwardModifier;
  if (!lazy protocol witness table cache variable for type OnDeleteBackwardModifier and conformance OnDeleteBackwardModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnDeleteBackwardModifier and conformance OnDeleteBackwardModifier);
  }
  return result;
}

uint64_t outlined copy of Environment<TriggerDeleteBackwardAction?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for OnDeleteBackwardModifier(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);

  return outlined consume of Environment<TriggerDeleteBackwardAction?>.Content(v2, v3, v4);
}

uint64_t outlined consume of Environment<TriggerDeleteBackwardAction?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for OnDeleteBackwardModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<TriggerDeleteBackwardAction?>.Content(v4, v5, v6);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for OnDeleteBackwardModifier(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  LOBYTE(v2) = *((unsigned char *)v2 + 32);
  outlined copy of Environment<TriggerDeleteBackwardAction?>.Content(v5, v6, (char)v2);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = (_BYTE)v2;
  outlined consume of Environment<TriggerDeleteBackwardAction?>.Content(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for OnDeleteBackwardModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Environment<TriggerDeleteBackwardAction?>.Content(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeleteBackwardModifier(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDeleteBackwardModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnDeleteBackwardModifier()
{
  return &type metadata for OnDeleteBackwardModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnDeleteBackwardModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18796F6BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.triggerDeleteBackward.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18796F6FC()
{
  swift_release();
  outlined consume of Environment<TriggerDeleteBackwardAction?>.Content(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnDeleteBackwardModifier.body(content:)()
{
  return closure #1 in OnDeleteBackwardModifier.body(content:)(v0 + 16);
}

uint64_t outlined retain of Environment<TriggerDeleteBackwardAction?>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>);
    }
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.TriggerDeleteBackwardKey()
{
  return &type metadata for EnvironmentValues.TriggerDeleteBackwardKey;
}

ValueMetadata *type metadata accessor for TriggerDeleteBackwardAction()
{
  return &type metadata for TriggerDeleteBackwardAction;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnDeleteBackwardModifier>, _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnDeleteBackwardModifier>, _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnDeleteBackwardModifier>, _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnDeleteBackwardModifier>, _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnDeleteBackwardModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<OnDeleteBackwardModifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnDeleteBackwardModifier>, _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnDeleteBackwardModifier>, _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnDeleteBackwardModifier>, _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>>)
  {
    type metadata accessor for _ViewModifier_Content<OnDeleteBackwardModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnDeleteBackwardModifier>, _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<OnDeleteBackwardModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnDeleteBackwardModifier>)
  {
    lazy protocol witness table accessor for type OnDeleteBackwardModifier and conformance OnDeleteBackwardModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnDeleteBackwardModifier>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>)
  {
    type metadata accessor for TriggerDeleteBackwardAction?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TriggerDeleteBackwardAction?>);
    }
  }
}

void type metadata accessor for TriggerDeleteBackwardAction?()
{
  if (!lazy cache variable for type metadata for TriggerDeleteBackwardAction?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TriggerDeleteBackwardAction?);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void protocol witness for View.body.getter in conformance TabViewStyleConfiguration<A>.Content()
{
}

uint64_t _TabViewValue.selection.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for TabViewStyleConfiguration();
  double v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v12 - v7, v2 + *(int *)(a1 + 52), v6);
  type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a2, v8, v10);
}

uint64_t _TabViewValue.Init1.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvedTabView();
  uint64_t Value = AGGraphGetValue();
  char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t _TabViewValue.Init1.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for TabViewStyleConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for ResolvedTabView();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  double v13 = MEMORY[0x1F4188790](v12);
  long long v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v2 + *(int *)(a1 + 52), v11, v13);
  _TabViewValue.Init1.base.getter((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  return _TabViewValue.init(style:configuration:)((uint64_t)v15, (uint64_t)v7, v11, v19);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _TabViewValue<A, B>.Init1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TabViewValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t dispatch thunk of static TabViewStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of static TabViewStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for _TabViewValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  uint64_t v10 = (v8 | 7) + *(void *)(v5 + 64);
  uint64_t v11 = v8 | 7 | *(_DWORD *)(v5 + 80);
  if (v11 == 7 && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0 && (v10 & ~(v8 | 7)) + v9 <= 0x18)
  {
    uint64_t v26 = *(void *)(a3 + 24);
    uint64_t v15 = ~(v8 | 7);
    uint64_t v16 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    long long v17 = (void *)(((unint64_t)v4 + v10) & v15);
    uint64_t v18 = (void *)(((unint64_t)a2 + v10) & v15);
    uint64_t v19 = (uint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      uint64_t v21 = v26;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v19 + v8 + 8) & v16, v7, v26))
      {
LABEL_14:
        memcpy(v17, v18, v9);
        return v4;
      }
    }
    else
    {
      uint64_t v20 = *v19;
      if ((unint64_t)*v19 >= 0xFFFFFFFF) {
        LODWORD(v2outlined consume of Text?(0, 0, 0, 0) = -1;
      }
      uint64_t v21 = v26;
      if (v20 != -1) {
        goto LABEL_14;
      }
    }
    *long long v17 = *v18;
    uint64_t v22 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v22 = *v19;
    uint64_t v23 = ((unint64_t)v22 + v8 + 8) & v16;
    long long v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v24(v23, ((unint64_t)v19 + v8 + 8) & v16, v21);
    return v4;
  }
  uint64_t v14 = *a2;
  *uint64_t v4 = *a2;
  uint64_t v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for _TabViewValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 32);
  uint64_t v11 = (char *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = ~v9;
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v16 = *v15;
    if ((unint64_t)*v15 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    if (v16 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v11 = *v12;
    unint64_t v17 = (unint64_t)(v11 + 15);
    *(void *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v9 + 8 + (v17 & 0xFFFFFFFFFFFFFFF8)) & v13, ((unint64_t)v15 + v9 + 8) & v13, v7);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v15 + v9 + 8) & v13)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v11, v12, ((v9 + 16) & ~v9) + v14);
  return a1;
}

uint64_t assignWithTake for _TabViewValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 24);
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  size_t v15 = ((v9 + 16) & ~v9) + *(void *)(v8 + 64);
  uint64_t v16 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = ~v9;
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v30 = (v10 + a1) & ~(v9 | 7);
    uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v22 = v12;
    uint64_t v23 = v7;
    int v24 = v21(((unint64_t)v16 + v9 + 8) & v14, v13, v7);
    uint64_t v25 = v21;
    int v29 = v24;
    uint64_t v18 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v13;
    uint64_t v17 = v23;
    uint64_t v27 = v23;
    uint64_t v12 = v22;
    uint64_t v11 = (void *)v30;
    int v20 = v25(((unint64_t)v18 + v9 + 8) & v14, v26, v27);
    if (!v29)
    {
LABEL_5:
      if (!v20)
      {
        *uint64_t v11 = *v12;
        swift_release();
        *uint64_t v16 = *v18;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v16 + v9 + 8) & v31, ((unint64_t)v18 + v9 + 8) & v31, v17);
        return a1;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v31, v17);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = v7;
    uint64_t v18 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = *v18;
    if (*v18 >= 0xFFFFFFFFuLL) {
      LODWORD(v19) = -1;
    }
    int v20 = v19 + 1;
    if (*v16 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v20)
  {
    *uint64_t v11 = *v12;
    *uint64_t v16 = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v16 + v9 + 8) & v31, ((unint64_t)v18 + v9 + 8) & v31, v17);
    return a1;
  }
LABEL_9:
  memcpy(v11, v12, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TabViewValue(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  if (v11 <= v6) {
    unsigned int v13 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v13 = v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v12 | 7;
  uint64_t v15 = (v12 | 7) + *(void *)(*(void *)(v4 - 8) + 64);
  int v16 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = ((v12 + 16) & ~v12) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + (v15 & ~v14);
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      int v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(unsigned __int16 *)((char *)a1 + v17)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_28:
      if (v6 >= v11)
      {
        uint64_t v28 = *(uint64_t (**)(void))(v5 + 48);
        return v28();
      }
      else
      {
        uint64_t v25 = (unint64_t *)(((((unint64_t)a1 + v15) & ~v14) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          unsigned int v27 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v25 + v12 + 8) & ~v12);
        }
        else
        {
          unint64_t v26 = *v25;
          if (v26 >= 0xFFFFFFFF) {
            LODWORD(v26) = -1;
          }
          unsigned int v27 = v26 + 1;
        }
        if (v27 >= 2) {
          return v27 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((unsigned char *)a1 + v17)) {
    goto LABEL_28;
  }
LABEL_18:
  int v22 = (v19 - 1) << v18;
  if (v17 > 3) {
    int v22 = 0;
  }
  if (v17)
  {
    if (v17 <= 3) {
      int v23 = ((v12 + 16) & ~v12)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
          + (v15 & ~v14);
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v13 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for _TabViewValue(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  unsigned int v13 = v12 - 1;
  if (v12 - 1 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = v12 - 1;
  }
  size_t v15 = ((v11 + 16) & ~v11) + *(void *)(v9 + 64);
  uint64_t v16 = (v11 | 7) + *(void *)(*(void *)(v6 - 8) + 64);
  size_t v17 = (v16 & ~(v11 | 7)) + v15;
  BOOL v18 = a3 >= v14;
  unsigned int v19 = a3 - v14;
  if (v19 != 0 && v18)
  {
    if (v17 <= 3)
    {
      unsigned int v23 = ((v19 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v23))
      {
        int v20 = 4;
      }
      else if (v23 >= 0x100)
      {
        int v20 = 2;
      }
      else
      {
        int v20 = v23 > 1;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  else
  {
    int v20 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v21 = ~v14 + a2;
    if (v17 < 4)
    {
      int v22 = (v21 >> (8 * v17)) + 1;
      if (v17)
      {
        int v24 = v21 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v24;
          a1[2] = BYTE2(v24);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v24;
        }
        else
        {
          *a1 = v24;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v17] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v22;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v17] = v22;
        return;
      default:
        return;
    }
  }
  switch(v20)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x187970C10);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 >= v13)
        {
          int v29 = *(void (**)(char *))(v7 + 56);
          v29(a1);
        }
        else
        {
          uint64_t v25 = (unsigned char *)((unint64_t)&a1[v16] & ~(v11 | 7));
          if (v13 >= a2)
          {
            if (a2 + 1 <= v12)
            {
              if (a2 != -1)
              {
                uint64_t v32 = (void *)((unint64_t)(v25 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v10 & 0x80000000) != 0)
                {
                  char v34 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
                  uint64_t v35 = a2 + 1;
                  v34(((unint64_t)v32 + v11 + 8) & ~v11, v35);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v33 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v33 = a2;
                  }
                  *uint64_t v32 = v33;
                }
              }
            }
            else
            {
              if (v15 <= 3) {
                int v30 = ~(-1 << (8 * v15));
              }
              else {
                int v30 = -1;
              }
              if (v15)
              {
                int v27 = v30 & (a2 - v12);
                if (v15 <= 3) {
                  int v31 = v15;
                }
                else {
                  int v31 = 4;
                }
                bzero(v25, v15);
                switch(v31)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)uint64_t v25 = v27;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)uint64_t v25 = v27;
                    void v25[2] = BYTE2(v27);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)uint64_t v25 = v27;
                    break;
                  default:
LABEL_52:
                    *uint64_t v25 = v27;
                    break;
                }
              }
            }
          }
          else
          {
            if (v15 <= 3) {
              int v26 = ~(-1 << (8 * v15));
            }
            else {
              int v26 = -1;
            }
            if (v15)
            {
              int v27 = v26 & (a2 - v12);
              if (v15 <= 3) {
                int v28 = v15;
              }
              else {
                int v28 = 4;
              }
              bzero(v25, v15);
              switch(v28)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
      }
      return;
  }
}

_UNKNOWN **sub_187970C58()
{
  return &protocol witness table for TabViewStyleConfiguration<A>.Content;
}

uint64_t sub_187970C64()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for UpdateDefaultTabFill()
{
  return &type metadata for UpdateDefaultTabFill;
}

uint64_t getEnumTagSinglePayload for _TabViewStyleWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _TabViewStyleWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187971058);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for ResolvedTabView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = (((1 << v9) + a2 - v7) >> v9) + 1;
  if (HIWORD(v12))
  {
    int v10 = *(_DWORD *)((char *)a1 + v8);
    if (v10) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      unsigned int v18 = v17 + 1;
    }
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
  if (v12 > 0xFF)
  {
    int v10 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(unsigned __int16 *)((char *)a1 + v8)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v12 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_25;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 <= 3) {
      int v14 = ((v6 + 16) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      int v14 = 4;
    }
    switch(v14)
    {
      case 2:
        int v15 = *a1;
        break;
      case 3:
        int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)a1;
        break;
      default:
        int v15 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v15 = 0;
  }
  return (v15 | v13) + v7;
}

void storeEnumTagSinglePayload for ResolvedTabView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v8 - 1 >= a3)
  {
    int v12 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v12 = 1;
  if (v11 > 3) {
    goto LABEL_13;
  }
  unsigned int v13 = (((1 << (8 * v11)) + a3 - v8) >> (8 * v11)) + 1;
  if (HIWORD(v13))
  {
    int v12 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v13 >= 0x100) {
      int v12 = 2;
    }
    else {
      int v12 = v13 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v12)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                int v20 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  int v22 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v23 = a2 + 1;
                  v22(((unint64_t)v20 + v10 + 8) & ~v10, v23);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v21 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v21 = a2;
                  }
                  *int v20 = v21;
                }
              }
            }
            else
            {
              if (v11 <= 3) {
                int v17 = ~(-1 << (8 * v11));
              }
              else {
                int v17 = -1;
              }
              if (v11)
              {
                int v18 = v17 & (a2 - v8);
                if (v11 <= 3) {
                  int v19 = v11;
                }
                else {
                  int v19 = 4;
                }
                bzero(a1, v11);
                switch(v19)
                {
                  case 2:
                    *(_WORD *)a1 = v18;
                    break;
                  case 3:
                    *(_WORD *)a1 = v18;
                    a1[2] = BYTE2(v18);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v18;
                    break;
                  default:
                    *a1 = v18;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v14 = a2 - v8;
  if (v11 < 4)
  {
    int v15 = (v14 >> (8 * v11)) + 1;
    if (v11)
    {
      int v16 = v14 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11);
    *(_DWORD *)a1 = v14;
    int v15 = 1;
  }
  switch(v12)
  {
    case 1:
      a1[v11] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v15;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x187971570);
    case 4:
      *(_DWORD *)&a1[v11] = v15;
      break;
    default:
      return;
  }
}

_UNKNOWN **base witness table accessor for View in ResolvedTabView<A>()
{
  return &protocol witness table for ResolvedTabView<A>;
}

uint64_t closure #1 in static _TabViewStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for _TabViewStyleWriter();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

_UNKNOWN **base witness table accessor for ViewModifier in _TabViewStyleWriter<A>()
{
  return &protocol witness table for _TabViewStyleWriter<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in UpdateDefaultTabFill()
{
  return &protocol witness table for UpdateDefaultTabFill;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TabViewStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for _TabViewStyleWriter<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TabViewStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance TabViewStyleOverrideInput<A>()
{
  return MEMORY[0x1F40FD0F8]();
}

void protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance TabViewStyleOverrideInput<A>()
{
}

uint64_t static ResolvedTabView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v16 = *(_DWORD *)(a2 + 36);
  int v17 = *(_DWORD *)(a2 + 56);
  int v18 = *(_DWORD *)(a2 + 60);
  int v19 = *(_DWORD *)(a2 + 64);
  int v20 = *(_DWORD *)(a2 + 68);
  int v21 = *(_DWORD *)(a2 + 72);
  int v22 = *(_DWORD *)(a2 + 76);
  int v23 = *(_DWORD *)(a2 + 80);
  lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v27)
  {
    uint64_t v14 = v28;
    v43[0] = v5;
    uint64_t v27 = v6;
    LODWORD(v28) = v7;
    uint64_t v29 = v8;
    int v30 = v10;
    int v31 = v9;
    int v32 = v11;
    int v33 = v16;
    uint64_t v34 = v12;
    uint64_t v35 = v13;
    int v36 = v17;
    int v37 = v18;
    int v38 = v19;
    int v39 = v20;
    int v40 = v21;
    int v41 = v22;
    int v42 = v23;
    return (*(uint64_t (**)(int *))(v14 + 8))(v43);
  }
  else
  {
    v43[0] = v5;
    uint64_t v27 = v6;
    LODWORD(v28) = v7;
    uint64_t v29 = v8;
    int v30 = v10;
    int v31 = v9;
    int v32 = v11;
    int v33 = v16;
    uint64_t v34 = v12;
    uint64_t v35 = v13;
    int v36 = v17;
    int v37 = v18;
    int v38 = v19;
    int v39 = v20;
    int v40 = v21;
    int v41 = v22;
    int v42 = v23;
    return static ResolvedTabView.makeView<A>(view:style:inputs:)(v43, 0, &v27, a3, (uint64_t)&type metadata for DefaultTabViewStyle, a4, (uint64_t)&protocol witness table for DefaultTabViewStyle, a5);
  }
}

uint64_t static ResolvedTabView.makeView<A>(view:style:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v36 = a2;
  int v40 = a1;
  uint64_t v41 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  int v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v17;
  uint64_t v43 = v16;
  uint64_t v44 = v19;
  uint64_t v45 = v18;
  uint64_t v20 = type metadata accessor for _TabViewValue.Init1();
  uint64_t v34 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v33 - v24;
  int v26 = *v40;
  uint64_t v39 = *a3;
  int v38 = *((_DWORD *)a3 + 2);
  uint64_t v37 = a3[2];
  LODWORD(v4outlined consume of Text?(0, 0, 0, 0) = *((_DWORD *)a3 + 20);
  LODWORD(v42) = v26;
  type metadata accessor for ResolvedTabView();
  type metadata accessor for _GraphValue();
  long long v35 = *(_OWORD *)(a3 + 5);
  uint64_t v27 = a3[3];
  uint64_t v28 = a3[4];
  long long v33 = *(_OWORD *)(a3 + 7);
  uint64_t v29 = a3[9];
  LODWORD(a3) = _GraphValue.value.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v36, a5);
  *(_DWORD *)uint64_t v25 = a3;
  uint64_t v42 = a5;
  uint64_t v43 = a4;
  uint64_t v44 = a7;
  uint64_t v45 = a6;
  uint64_t v30 = type metadata accessor for _TabViewValue.Init1();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v25[*(int *)(v30 + 52)], v15, a5);
  uint64_t v31 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v22, v25, v20);
  uint64_t v42 = a5;
  uint64_t v43 = a4;
  uint64_t v44 = a7;
  uint64_t v45 = a6;
  type metadata accessor for _TabViewValue();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v42 = v39;
  LODWORD(v43) = v38;
  uint64_t v44 = v37;
  uint64_t v45 = v27;
  uint64_t v46 = v28;
  long long v47 = v35;
  long long v48 = v33;
  uint64_t v49 = v29;
  int v50 = (int)v40;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 8))(v51, &v42, a4, a6, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v25, v20);
}

uint64_t static ResolvedTabView.makeViewList<A>(view:style:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v34 = a2;
  *(void *)&long long v42 = a1;
  uint64_t v43 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  int v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v17;
  uint64_t v45 = v16;
  uint64_t v46 = v19;
  uint64_t v47 = v18;
  uint64_t v20 = type metadata accessor for _TabViewValue.Init1();
  uint64_t v33 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v32 - v24;
  int v26 = *(_DWORD *)v42;
  uint64_t v37 = *a3;
  int v36 = *((_DWORD *)a3 + 2);
  uint64_t v35 = a3[2];
  long long v42 = *(_OWORD *)(a3 + 5);
  uint64_t v41 = a3[7];
  int v40 = *((_DWORD *)a3 + 16);
  uint64_t v39 = a3[9];
  int v38 = *((unsigned __int8 *)a3 + 80);
  LODWORD(v44) = v26;
  type metadata accessor for ResolvedTabView();
  type metadata accessor for _GraphValue();
  uint64_t v27 = a3[3];
  uint64_t v28 = a3[4];
  LODWORD(a3) = _GraphValue.value.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v34, a5);
  *(_DWORD *)uint64_t v25 = a3;
  uint64_t v44 = a5;
  uint64_t v45 = a4;
  uint64_t v46 = a7;
  uint64_t v47 = a6;
  uint64_t v29 = type metadata accessor for _TabViewValue.Init1();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v25[*(int *)(v29 + 52)], v15, a5);
  uint64_t v30 = v33;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v22, v25, v20);
  uint64_t v44 = a5;
  uint64_t v45 = a4;
  uint64_t v46 = a7;
  uint64_t v47 = a6;
  type metadata accessor for _TabViewValue();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v44 = v37;
  LODWORD(v45) = v36;
  uint64_t v46 = v35;
  uint64_t v47 = v27;
  uint64_t v48 = v28;
  long long v49 = v42;
  uint64_t v50 = v41;
  int v51 = v40;
  uint64_t v52 = v39;
  char v53 = v38;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(v54, &v44, a4, a6, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v25, v20);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTabView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ResolvedTabView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

void protocol witness for View.body.getter in conformance ResolvedTabView<A>()
{
}

uint64_t protocol witness for Rule.value.getter in conformance UpdateDefaultTabFill.FillSymbols@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  static SymbolVariants.fill.getter();
  __int16 v8 = v9;
  int v5 = (uint64_t (*)(unsigned char *, void))EnvironmentValues.symbolVariants.modify();
  SymbolVariants.formUnion(_:)();
  return v5(v7, 0);
}

uint64_t UpdateDefaultTabFill.AdaptiveFillSymbols.value.getter@<X0>(void *a1@<X8>)
{
  long long v8 = *(_OWORD *)(v1 + 8);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v5 = Value[1];
  uint64_t v12 = *Value;
  uint64_t v4 = v12;
  uint64_t v13 = v5;
  *(void *)&long long v9 = v12;
  *((void *)&v9 + 1) = v5;
  swift_retain();
  swift_retain();
  EnvironmentValues.horizontalSizeClass.getter();
  if (v11 != 2 && (v11 & 1) == 0
    || (v9 = v8, uint64_t result = AnyInterfaceIdiom.accepts<A>(_:)(), (result & 1) != 0))
  {
    static SymbolVariants.fill.getter();
    __int16 v10 = v11;
    int v7 = (uint64_t (*)(long long *, void))EnvironmentValues.symbolVariants.modify();
    SymbolVariants.formUnion(_:)();
    uint64_t result = v7(&v9, 0);
    uint64_t v4 = v12;
    uint64_t v5 = v13;
  }
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UpdateDefaultTabFill(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  int v8 = *((_DWORD *)a2 + 20);
  uint64_t v20 = *a2;
  int v21 = v4;
  uint64_t v22 = v5;
  long long v23 = *(_OWORD *)(a2 + 3);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 7);
  uint64_t v27 = a2[9];
  int v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static UpdateDefaultTabFill._makeViewInputs(modifier:inputs:)();
  uint64_t v11 = v20;
  int v12 = v21;
  uint64_t v13 = v5;
  long long v14 = v23;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  long long v17 = v26;
  uint64_t v18 = v27;
  int v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UpdateDefaultTabFill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t updated = lazy protocol witness table accessor for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, updated);
}

void protocol witness for ViewModifier.body(content:) in conformance UpdateDefaultTabFill()
{
}

uint64_t type metadata accessor for _TabViewValue.Init1()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill;
  if (!lazy protocol witness table cache variable for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill);
  }
  return result;
}

uint64_t specialized static UpdateDefaultTabFill._makeViewInputs(modifier:inputs:)()
{
  lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput();
  PropertyList.subscript.getter();
  if (v3
    && ((type metadata accessor for StyleType<SidebarAdaptableTabViewStyle>(0, &lazy cache variable for type metadata for StyleType<SidebarAdaptableTabViewStyle>), v0 == v3)|| (type metadata accessor for StyleType<SidebarAdaptableTabViewStyle>(0, &lazy cache variable for type metadata for StyleType<AdaptiveTabViewStyle>), v1 == v3)))
  {
    _ViewInputs.environment.getter();
    _GraphInputs.interfaceIdiom.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols();
  }
  else
  {
    _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols();
  }
  Attribute.init<A>(body:value:flags:update:)();
  return _ViewInputs.environment.setter();
}

unint64_t lazy protocol witness table accessor for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols;
  if (!lazy protocol witness table cache variable for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols);
  }
  return result;
}

void type metadata accessor for StyleType<SidebarAdaptableTabViewStyle>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for StyleType();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols;
  if (!lazy protocol witness table cache variable for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols);
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateDefaultTabFill.AdaptiveFillSymbols()
{
  return &type metadata for UpdateDefaultTabFill.AdaptiveFillSymbols;
}

ValueMetadata *type metadata accessor for UpdateDefaultTabFill.FillSymbols()
{
  return &type metadata for UpdateDefaultTabFill.FillSymbols;
}

uint64_t getEnumTagSinglePayload for _TabViewValue.Init1(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for _TabViewValue.Init1(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187972CACLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

void *type metadata accessor for TabViewStyleInput()
{
  return &unk_1ED4253E8;
}

uint64_t base witness table accessor for GraphInput in TabViewStyleOverrideInput<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _TabViewValue<A, B>.Init1()
{
  return swift_getWitnessTable();
}

uint64_t BorderedButtonStyle_Phone.init(tint:isProminent:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a3 = a1;
  *(unsigned char *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = KeyPath;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = v7;
  *(_WORD *)(a3 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
  *(void *)(a3 + 48) = v8;
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = result;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

unint64_t ResolvedBorderedButton.materialBackgroundSpec.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 3);
  char v3 = *((unsigned char *)v1 + 32);
  uint64_t v4 = *((void *)v1 + 5);
  char v5 = *((unsigned char *)v1 + 48);
  uint64_t v6 = *((void *)v1 + 7);
  char v7 = *((unsigned char *)v1 + 64);
  char v32 = *((unsigned char *)v1 + 82);
  int v33 = *((unsigned __int8 *)v1 + 81);
  char v31 = *((unsigned char *)v1 + 83);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v5 & 1);
  char v8 = specialized Environment.wrappedValue.getter(v4, v5 & 1);
  outlined consume of Environment<Bool?>.Content(v4, v5 & 1);
  uint64_t v9 = v7 & 1;
  if ((v8 & 1) == 0)
  {
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3 & 1);
    specialized Environment.wrappedValue.getter(v2, v3 & 1, &v35);
    outlined consume of Environment<Bool?>.Content(v2, v3 & 1);
    char v14 = v35;
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v7 & 1);
    specialized Environment.wrappedValue.getter(v6, v7 & 1);
    outlined consume of Environment<Bool?>.Content(v6, v7 & 1);
    if ((v14 & 1) == 0)
    {
      double v15 = 1.0;
      LOBYTE(v35) = 0;
      uint64_t v12 = Color.init(_:white:opacity:)();
      LOBYTE(v35) = 0;
      unint64_t result = Color.init(_:white:opacity:)();
      uint64_t v11 = result;
      char v13 = 0;
      double v17 = 0.15;
LABEL_64:
      uint64_t v29 = a1;
      goto LABEL_65;
    }
    double v15 = 1.0;
    LOBYTE(v35) = 0;
    uint64_t v12 = Color.init(_:white:opacity:)();
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v7 & 1);
    char v16 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
    unint64_t result = outlined consume of Environment<Bool?>.Content(v6, v7 & 1);
    if (v16) {
      char v13 = 0;
    }
    else {
      char v13 = 19;
    }
    uint64_t v11 = 2;
LABEL_63:
    double v17 = 1.0;
    goto LABEL_64;
  }
  long long v35 = *v1;
  uint64_t v36 = *((void *)v1 + 2);
  uint64_t v37 = v2;
  char v38 = v3;
  *(_DWORD *)uint64_t v39 = *(_DWORD *)((char *)v1 + 33);
  *(_DWORD *)&v39[3] = *((_DWORD *)v1 + 9);
  uint64_t v40 = v4;
  char v41 = v5;
  *(_DWORD *)long long v42 = *(_DWORD *)((char *)v1 + 49);
  *(_DWORD *)&v42[3] = *((_DWORD *)v1 + 13);
  uint64_t v43 = v6;
  char v44 = v7;
  long long v45 = *(long long *)((char *)v1 + 65);
  char v46 = v33;
  char v47 = v32;
  char v48 = v31;
  long long v55 = *(long long *)((char *)v1 + 180);
  long long v56 = *(long long *)((char *)v1 + 196);
  v57[0] = *(long long *)((char *)v1 + 212);
  *(_OWORD *)((char *)v57 + 13) = *(long long *)((char *)v1 + 225);
  long long v51 = *(long long *)((char *)v1 + 116);
  long long v52 = *(long long *)((char *)v1 + 132);
  long long v53 = *(long long *)((char *)v1 + 148);
  long long v54 = *(long long *)((char *)v1 + 164);
  long long v49 = *(long long *)((char *)v1 + 84);
  long long v50 = *(long long *)((char *)v1 + 100);
  unint64_t result = ResolvedBorderedButton.resolvedTint.getter();
  uint64_t v11 = result;
  if (result >> 62)
  {
    if (result >> 62 == 1)
    {
      uint64_t v12 = result & 0x3FFFFFFFFFFFFFFFLL;
      if (v31)
      {
        outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3 & 1);
        specialized Environment.wrappedValue.getter(v2, v3 & 1, &v35);
        outlined consume of Environment<Bool?>.Content(v2, v3 & 1);
        if (v35)
        {
          LOBYTE(v35) = 0;
          double v15 = 1.0;
          Color.init(_:white:opacity:)();
          uint64_t v20 = Color.over(_:)();
          swift_release();
          unint64_t result = swift_release();
          char v13 = 0;
          uint64_t v11 = 0;
          double v17 = 0.75;
          uint64_t v12 = v20;
        }
        else
        {
          outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v9);
          char v25 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
          unint64_t result = outlined consume of Environment<Bool?>.Content(v6, v9);
          double v15 = 0.75;
          if (v25)
          {
            static Color.white.getter();
            uint64_t v26 = Color.over(_:)();
            swift_release();
            unint64_t result = swift_release();
            char v13 = 0;
            uint64_t v11 = 0;
            uint64_t v12 = v26;
          }
          else
          {
            char v13 = 0;
            uint64_t v11 = 0;
          }
          double v17 = 0.75;
        }
        goto LABEL_64;
      }
      char v13 = 0;
      uint64_t v11 = 0;
      goto LABEL_46;
    }
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3 & 1);
    specialized Environment.wrappedValue.getter(v2, v3 & 1, &v35);
    outlined consume of Environment<Bool?>.Content(v2, v3 & 1);
    char v19 = v35;
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v9);
    specialized Environment.wrappedValue.getter(v6, v7 & 1);
    outlined consume of Environment<Bool?>.Content(v6, v9);
    if (v19)
    {
      double v15 = 1.0;
      LOBYTE(v35) = 0;
      uint64_t v12 = Color.init(_:white:opacity:)();
      if ((v31 & 1) == 0)
      {
        if ((v32 & 1) != 0 || v33 != 1) {
          unint64_t result = static Color.accentColor.getter();
        }
        else {
          unint64_t result = static Color.red.getter();
        }
        uint64_t v11 = result;
        goto LABEL_59;
      }
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v9);
      char v24 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
      outlined consume of Environment<Bool?>.Content(v6, v9);
      if ((v24 & 1) == 0) {
        double v15 = 0.65;
      }
      LOBYTE(v35) = 0;
      Color.init(_:white:opacity:)();
      if ((v32 & 1) != 0 || v33 != 1) {
        static Color.accentColor.getter();
      }
      else {
        static Color.red.getter();
      }
      uint64_t v11 = Color.over(_:)();
      swift_release();
LABEL_58:
      unint64_t result = swift_release();
LABEL_59:
      char v13 = 0;
      goto LABEL_63;
    }
    LOBYTE(v35) = 0;
    uint64_t v12 = Color.init(_:white:opacity:)();
    if ((v32 & 1) != 0 || v33 != 1)
    {
      unint64_t result = static Color.accentColor.getter();
      uint64_t v11 = result;
      if (v31) {
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t result = static Color.red.getter();
      uint64_t v11 = result;
      if (v31)
      {
LABEL_29:
        outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v9);
        char v21 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
        unint64_t result = outlined consume of Environment<Bool?>.Content(v6, v9);
        char v13 = 0;
        if (v21) {
          double v15 = 1.0;
        }
        else {
          double v15 = 0.65;
        }
        double v17 = 0.75;
        goto LABEL_64;
      }
    }
    char v13 = 0;
LABEL_46:
    double v15 = 1.0;
    goto LABEL_63;
  }
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3 & 1);
  specialized Environment.wrappedValue.getter(v2, v3 & 1, &v35);
  outlined consume of Environment<Bool?>.Content(v2, v3 & 1);
  if (v35)
  {
    if (static Color.red.getter() != v11)
    {
      char v18 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      if (v18)
      {
LABEL_34:
        uint64_t v22 = Color.opacity(_:)();
        outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v9);
        char v23 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
        outlined consume of Environment<Bool?>.Content(v6, v9);
        if (v31)
        {
          if (v23)
          {
            static Color.black.getter();
            uint64_t v12 = Color.over(_:)();
            swift_release();
          }
          else
          {
            swift_retain();
            uint64_t v12 = v22;
          }
          LOBYTE(v35) = 0;
          double v15 = 1.0;
          Color.init(_:white:opacity:)();
          uint64_t v30 = Color.over(_:)();
          swift_release();
          swift_release();
          unint64_t result = swift_release();
          char v13 = 0;
          uint64_t v11 = v30;
          goto LABEL_63;
        }
        double v15 = 1.0;
        LOBYTE(v35) = 0;
        Color.init(_:white:opacity:)();
        uint64_t v12 = Color.over(_:)();
        swift_release();
        goto LABEL_58;
      }
      if (static Color.pink.getter() != v11)
      {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        goto LABEL_34;
      }
    }
    swift_release();
    goto LABEL_34;
  }
  if (static Color.yellow.getter() != v11) {
    dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
  }
  swift_release();
  uint64_t v12 = Color.opacity(_:)();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v9);
  char v27 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
  unint64_t result = outlined consume of Environment<Bool?>.Content(v6, v9);
  if (v27)
  {
    static Color.white.getter();
    uint64_t v28 = Color.over(_:)();
    swift_release();
    unint64_t result = swift_release();
    uint64_t v12 = v28;
  }
  uint64_t v29 = a1;
  char v13 = 0;
  double v17 = 0.75;
  if (v31)
  {
    double v15 = 0.65;
  }
  else
  {
    double v17 = 1.0;
    double v15 = 1.0;
  }
LABEL_65:
  *(void *)uint64_t v29 = v12;
  *(double *)(v29 + 8) = v15;
  *(void *)(v29 + 16) = 0x3FF0000000000000;
  *(_OWORD *)(v29 + 24) = xmmword_188368AE0;
  *(unsigned char *)(v29 + 4outlined consume of Text?(0, 0, 0, 0) = v13;
  *(void *)(v29 + 48) = v11;
  *(double *)(v29 + 56) = v17;
  *(void *)(v29 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedBorderedButton()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(0);
  type metadata accessor for ViewInputFlagModifier<ButtonContainerIsBorderedInput>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance UseImageBackground()
{
  return PropertyList.subscript.setter();
}

uint64_t View.materialBackedBorderedButtons()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground();

  return View.input<A>(_:)((uint64_t)&unk_1ED42A680, a1, (uint64_t)&unk_1ED42A680, a2, v4);
}

uint64_t sub_18797380C()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for BorderedButtonStyle_Phone(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 41);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 41);
  *(void *)(a1 + 32) = v8;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v10;
  *(unsigned char *)(a1 + 41) = v9;
  outlined consume of Environment<CGFloat?>.Content(v11, v13, v12);
  uint64_t v14 = *(void *)(a2 + 48);
  unsigned __int8 v15 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v14, v15);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 56) = v15;
  outlined consume of Environment<Bool?>.Content(v16, v17);
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v19 = *(unsigned __int8 *)(a2 + 72);
  outlined copy of Environment<Color?>.Content(v18, v19);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(unsigned __int8 *)(a1 + 72);
  *(void *)(a1 + 64) = v18;
  *(unsigned char *)(a1 + 72) = v19;
  outlined consume of Environment<Color?>.Content(v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderedButtonStyle_Phone(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 73)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BorderedButtonStyle_Phone(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in UseImageBackground()
{
  return &protocol witness table for UseImageBackground;
}

uint64_t key path getter for EnvironmentValues.imageScale : EnvironmentValues, serialized()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_187973B68()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t key path setter for EnvironmentValues.imageScale : EnvironmentValues, serialized()
{
  return EnvironmentValues.imageScale.setter();
}

uint64_t sub_187973BC4()
{
  return EnvironmentValues.imageScale.setter();
}

double sub_187973BFC@<D0>(_OWORD *a1@<X8>)
{
  EnvironmentValues.backgroundMaterial.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_187973C40(uint64_t *a1)
{
  return EnvironmentValues.backgroundMaterial.setter();
}

uint64_t sub_187973C90@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityReduceTransparency.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187973CD0()
{
  return EnvironmentValues.accessibilityReduceTransparency.setter();
}

uint64_t assignWithCopy for ResolvedBorderedButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Material?>.Content(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Environment<Material?>.Content(v7, v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  LOBYTE(v5) = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v10, v5);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 32) = v5;
  outlined consume of Environment<Bool?>.Content(v11, v12);
  uint64_t v13 = *(void *)(a2 + 40);
  LOBYTE(v5) = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v13, v5);
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v13;
  *(unsigned char *)(a1 + 48) = v5;
  outlined consume of Environment<Bool?>.Content(v14, v15);
  uint64_t v16 = *(void *)(a2 + 56);
  LOBYTE(v5) = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v16, v5);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(unsigned __int8 *)(a1 + 64);
  *(void *)(a1 + 56) = v16;
  *(unsigned char *)(a1 + 64) = v5;
  outlined consume of Environment<Bool?>.Content(v17, v18);
  uint64_t v19 = *(void *)(a2 + 72);
  LOBYTE(v5) = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v19, v5);
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v21 = *(unsigned __int8 *)(a1 + 80);
  *(void *)(a1 + 72) = v19;
  *(unsigned char *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v5;
  outlined consume of Environment<Bool?>.Content(v20, v21);
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v22 = *(void *)(a2 + 104);
  LOBYTE(v5) = *(unsigned char *)(a2 + 112);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v22, v5);
  uint64_t v23 = *(void *)(a1 + 104);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 112);
  *(void *)(a1 + 104) = v22;
  *(unsigned char *)(a1 + 112) = v5;
  outlined consume of Environment<Bool?>.Content(v23, v24);
  uint64_t v25 = *(void *)(a2 + 120);
  LOBYTE(v5) = *(unsigned char *)(a2 + 129);
  unsigned __int8 v26 = *(unsigned char *)(a2 + 128);
  outlined copy of Environment<CGFloat?>.Content(v25, v26, v5);
  uint64_t v27 = *(void *)(a1 + 120);
  char v28 = *(unsigned char *)(a1 + 129);
  *(void *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = v25;
  uint64_t v29 = *(unsigned __int8 *)(a1 + 128);
  *(unsigned char *)(a1 + 128) = v26;
  *(unsigned char *)(a1 + 129) = v5;
  outlined consume of Environment<CGFloat?>.Content(v27, v29, v28);
  uint64_t v30 = *(void *)(a2 + 136);
  LOBYTE(v5) = *(unsigned char *)(a2 + 144);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v30, v5);
  uint64_t v31 = *(void *)(a1 + 136);
  uint64_t v32 = *(unsigned __int8 *)(a1 + 144);
  *(void *)(a1 + 136) = v30;
  *(unsigned char *)(a1 + 144) = v5;
  outlined consume of Environment<Bool?>.Content(v31, v32);
  uint64_t v33 = *(void *)(a2 + 152);
  LOBYTE(v5) = *(unsigned char *)(a2 + 160);
  outlined copy of Environment<Color?>.Content(v33, v5);
  uint64_t v34 = *(void *)(a1 + 152);
  uint64_t v35 = *(unsigned __int8 *)(a1 + 160);
  *(void *)(a1 + 152) = v33;
  *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = v5;
  outlined consume of Environment<Color?>.Content(v34, v35);
  uint64_t v36 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v36;
  uint64_t v37 = *(void *)(a2 + 184);
  LOBYTE(v5) = *(unsigned char *)(a2 + 192);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v37, v5);
  uint64_t v38 = *(void *)(a1 + 184);
  uint64_t v39 = *(unsigned __int8 *)(a1 + 192);
  *(void *)(a1 + 184) = v37;
  *(unsigned char *)(a1 + 192) = v5;
  outlined consume of Environment<Bool?>.Content(v38, v39);
  uint64_t v40 = *(void *)(a2 + 200);
  uint64_t v41 = *(void *)(a2 + 208);
  uint64_t v42 = *(void *)(a2 + 216);
  char v43 = *(unsigned char *)(a2 + 225);
  unsigned __int8 v44 = *(unsigned char *)(a2 + 224);
  outlined copy of Environment<KeyboardShortcut?>.Content(v40, v41, v42, v44, v43);
  uint64_t v45 = *(void *)(a1 + 200);
  uint64_t v46 = *(void *)(a1 + 208);
  uint64_t v47 = *(void *)(a1 + 216);
  char v48 = *(unsigned char *)(a1 + 225);
  *(void *)(a1 + 20outlined consume of Text?(0, 0, 0, 0) = v40;
  *(void *)(a1 + 208) = v41;
  *(void *)(a1 + 216) = v42;
  uint64_t v49 = *(unsigned __int8 *)(a1 + 224);
  *(unsigned char *)(a1 + 224) = v44;
  *(unsigned char *)(a1 + 225) = v43;
  outlined consume of Environment<KeyboardShortcut?>.Content(v45, v46, v47, v49, v48);
  uint64_t v50 = *(void *)(a2 + 232);
  uint64_t v51 = *(unsigned __int8 *)(a2 + 240);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v50, v51);
  uint64_t v52 = *(void *)(a1 + 232);
  uint64_t v53 = *(unsigned __int8 *)(a1 + 240);
  *(void *)(a1 + 232) = v50;
  *(unsigned char *)(a1 + 24outlined consume of Text?(0, 0, 0, 0) = v51;
  outlined consume of Environment<Bool?>.Content(v52, v53);
  return a1;
}

__n128 __swift_memcpy241_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(unsigned char *)(a1 + 24outlined consume of Text?(0, 0, 0, 0) = *((unsigned char *)a2 + 240);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for ResolvedBorderedButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<Material?>.Content(v5, v6, v7);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  char v11 = *(unsigned char *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v11;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  char v14 = *(unsigned char *)(a2 + 64);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v14;
  outlined consume of Environment<Bool?>.Content(v15, v16);
  char v17 = *(unsigned char *)(a2 + 80);
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v19 = *(unsigned __int8 *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = v17;
  outlined consume of Environment<Bool?>.Content(v18, v19);
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  char v20 = *(unsigned char *)(a2 + 112);
  uint64_t v21 = *(void *)(a1 + 104);
  uint64_t v22 = *(unsigned __int8 *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = v20;
  outlined consume of Environment<Bool?>.Content(v21, v22);
  char v23 = *(unsigned char *)(a2 + 128);
  char v24 = *(unsigned char *)(a2 + 129);
  uint64_t v25 = *(void *)(a1 + 120);
  char v26 = *(unsigned char *)(a1 + 129);
  *(void *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 120);
  uint64_t v27 = *(unsigned __int8 *)(a1 + 128);
  *(unsigned char *)(a1 + 128) = v23;
  *(unsigned char *)(a1 + 129) = v24;
  outlined consume of Environment<CGFloat?>.Content(v25, v27, v26);
  char v28 = *(unsigned char *)(a2 + 144);
  uint64_t v29 = *(void *)(a1 + 136);
  uint64_t v30 = *(unsigned __int8 *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = v28;
  outlined consume of Environment<Bool?>.Content(v29, v30);
  char v31 = *(unsigned char *)(a2 + 160);
  uint64_t v32 = *(void *)(a1 + 152);
  uint64_t v33 = *(unsigned __int8 *)(a1 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = v31;
  outlined consume of Environment<Color?>.Content(v32, v33);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  char v34 = *(unsigned char *)(a2 + 192);
  uint64_t v35 = *(void *)(a1 + 184);
  uint64_t v36 = *(unsigned __int8 *)(a1 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = v34;
  outlined consume of Environment<Bool?>.Content(v35, v36);
  uint64_t v37 = *(void *)(a2 + 216);
  char v38 = *(unsigned char *)(a2 + 224);
  char v39 = *(unsigned char *)(a2 + 225);
  uint64_t v40 = *(void *)(a1 + 200);
  uint64_t v41 = *(void *)(a1 + 208);
  uint64_t v42 = *(void *)(a1 + 216);
  char v43 = *(unsigned char *)(a1 + 225);
  *(_OWORD *)(a1 + 20outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = v37;
  uint64_t v44 = *(unsigned __int8 *)(a1 + 224);
  *(unsigned char *)(a1 + 224) = v38;
  *(unsigned char *)(a1 + 225) = v39;
  outlined consume of Environment<KeyboardShortcut?>.Content(v40, v41, v42, v44, v43);
  char v45 = *(unsigned char *)(a2 + 240);
  uint64_t v46 = *(void *)(a1 + 232);
  uint64_t v47 = *(unsigned __int8 *)(a1 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 24outlined consume of Text?(0, 0, 0, 0) = v45;
  outlined consume of Environment<Bool?>.Content(v46, v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedBorderedButton(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 241)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedBorderedButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 24outlined consume of Text?(0, 0, 0, 0) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 241) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 241) = 0;
    }
    if (a2) {
      *(void *)(result + 88) = a2;
    }
  }
  return result;
}

void static WindowFlexibility.constrainedToContent.getter()
{
}

void Scene.windowFlexibility(_:)()
{
}

void static WindowFlexibility.automatic.setter()
{
}

void static WindowFlexibility.constrainedToContent.setter()
{
}

void static WindowFlexibility.constrainedToContentMinimum.setter()
{
}

ValueMetadata *type metadata accessor for WindowFlexibility()
{
  return &type metadata for WindowFlexibility;
}

unsigned char *storeEnumTagSinglePayload for WindowFlexibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18797442CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WindowFlexibility.Role()
{
  return &type metadata for WindowFlexibility.Role;
}

unint64_t lazy protocol witness table accessor for type WindowFlexibility.Role and conformance WindowFlexibility.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowFlexibility.Role and conformance WindowFlexibility.Role;
  if (!lazy protocol witness table cache variable for type WindowFlexibility.Role and conformance WindowFlexibility.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowFlexibility.Role and conformance WindowFlexibility.Role);
  }
  return result;
}

void static WindowFlexibility.automatic.getter()
{
}

void static WindowFlexibility.constrainedToContentMinimum.getter()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContentMarginModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ContentMarginModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance ResetContentMarginModifier()
{
}

uint64_t ContentMarginProxy.margins(for:in:allowAutomatic:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  uint64_t v46 = *a1;
  char v4 = *((unsigned char *)v3 + 8);
  uint64_t v5 = v3[2];
  char v6 = *((unsigned char *)v3 + 24);
  uint64_t v7 = v3[4];
  char v8 = *((unsigned char *)v3 + 40);
  uint64_t v9 = v3[6];
  char v10 = *((unsigned char *)v3 + 56);
  uint64_t v22 = v3[8];
  char v21 = *((unsigned char *)v3 + 72);
  uint64_t v20 = v3[10];
  char v19 = *((unsigned char *)v3 + 88);
  uint64_t v18 = v3[12];
  char v17 = *((unsigned char *)v3 + 104);
  uint64_t v16 = v3[14];
  char v15 = *((unsigned char *)v3 + 120);
  uint64_t v36 = v3[16];
  char v35 = *((unsigned char *)v3 + 136);
  uint64_t v34 = v3[18];
  char v33 = *((unsigned char *)v3 + 152);
  uint64_t v32 = v3[20];
  char v31 = *((unsigned char *)v3 + 168);
  uint64_t v30 = v3[22];
  char v29 = *((unsigned char *)v3 + 184);
  uint64_t v28 = v3[24];
  char v27 = *((unsigned char *)v3 + 200);
  uint64_t v26 = v3[26];
  char v25 = *((unsigned char *)v3 + 216);
  uint64_t v24 = v3[28];
  char v23 = *((unsigned char *)v3 + 232);
  uint64_t v11 = v3[30];
  char v12 = *((unsigned char *)v3 + 248);
  uint64_t v44 = *v3;
  uint64_t v13 = *v3;
  char v43 = v4;
  uint64_t v42 = v5;
  char v41 = v6;
  uint64_t v40 = v7;
  char v39 = v8;
  uint64_t v38 = v9;
  char v37 = v10;
  OptionalEdgeInsets.init()();
  switch(v46)
  {
    case 1:
      uint64_t v13 = v22;
      char v4 = v21;
      uint64_t v5 = v20;
      char v6 = v19;
      uint64_t v7 = v18;
      char v8 = v17;
      uint64_t v9 = v16;
      char v10 = v15;
      break;
    case 2:
      uint64_t v13 = v36;
      char v4 = v35;
      uint64_t v5 = v34;
      char v6 = v33;
      uint64_t v7 = v32;
      char v8 = v31;
      uint64_t v9 = v30;
      char v10 = v29;
      break;
    case 3:
      uint64_t v13 = v28;
      char v4 = v27;
      uint64_t v5 = v26;
      char v6 = v25;
      uint64_t v7 = v24;
      char v8 = v23;
      uint64_t v9 = v11;
      char v10 = v12;
      break;
    default:
      break;
  }
  uint64_t v63 = v13;
  char v64 = v4;
  uint64_t v65 = v5;
  char v66 = v6;
  uint64_t v67 = v7;
  char v68 = v8;
  uint64_t v69 = v9;
  char v70 = v10;
  static OptionalEdgeInsets.none.getter();
  uint64_t v47 = v55;
  char v48 = v56;
  uint64_t v49 = v57;
  char v50 = v58;
  uint64_t v51 = v59;
  char v52 = v60;
  uint64_t v53 = v61;
  char v54 = v62;
  if (MEMORY[0x18C110940](&v63, &v47) & 1) != 0 && (a3)
  {
    uint64_t v13 = v44;
    char v4 = v43;
    uint64_t v5 = v42;
    char v6 = v41;
    uint64_t v7 = v40;
    char v8 = v39;
    uint64_t v9 = v38;
    char v10 = v37;
  }
  uint64_t v71 = v13;
  char v72 = v4;
  uint64_t v73 = v5;
  char v74 = v6;
  uint64_t v75 = v7;
  char v76 = v8;
  uint64_t v77 = v9;
  char v78 = v10;
  return OptionalEdgeInsets.in(edges:)();
}

uint64_t View.contentMargin(_:_:for:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, double a5)
{
  char v6 = *a2;
  return View.contentMargin(_:_:for:)(a1, *(void *)&a5, 0, &v6, a3, a4);
}

uint64_t View.contentMargins(_:for:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  char v6 = static Edge.Set.all.getter();
  static Edge.Set.all.getter();
  OptionalEdgeInsets.init(_:edges:)();
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v9 = v18;
  char v10 = v19;
  uint64_t v11 = v20;
  char v12 = v21;
  uint64_t v13 = v22;
  char v14 = v23;
  LOBYTE(v16) = v6;
  uint64_t v17 = v7;
  LOBYTE(v18) = v8;
  uint64_t v19 = v9;
  LOBYTE(v2outlined consume of Text?(0, 0, 0, 0) = v10;
  uint64_t v21 = v11;
  LOBYTE(v22) = v12;
  uint64_t v23 = v13;
  char v24 = v14;
  char v25 = v5;
  return MEMORY[0x18C113660](&v16, a2, &type metadata for ContentMarginModifier, a3);
}

uint64_t sub_187974A30()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for ContentMarginModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 66)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 65);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentMarginModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 66) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 65) = a2 + 3;
    }
  }
  return result;
}

void *type metadata accessor for EnvironmentValues.ToolbarMarginKey()
{
  return &unk_1ED421A98;
}

void *type metadata accessor for EnvironmentValues.ScrollIndicatorContentMarginKey()
{
  return &unk_1ED422348;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ScrollContentContentMarginKey()
{
  return &type metadata for EnvironmentValues.ScrollContentContentMarginKey;
}

void *type metadata accessor for EnvironmentValues.AutomaticContentMarginKey()
{
  return &unk_1ED421FD0;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContentMarginModifier()
{
  return &protocol witness table for ContentMarginModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetContentMarginModifier()
{
  return &protocol witness table for ResetContentMarginModifier;
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance SectionIndexLabelKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)&double result = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 16) = xmmword_188354140;
  return result;
}

void static SectionIndexTitleKey.defaultValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void View.listSectionIndexTitle(_:)()
{
}

{
  View.listSectionIndexTitle(_:)();
}

void View.listSectionIndexTitle<A>(_:)()
{
}

uint64_t outlined copy of SectionIndexLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    return swift_retain();
  }
  else
  {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
}

uint64_t destroy for SectionIndexLabel(uint64_t *a1)
{
  return outlined consume of SectionIndexLabel(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for SectionIndexLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of SectionIndexLabel(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for SectionIndexLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of SectionIndexLabel(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of SectionIndexLabel(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for SectionIndexLabel(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of SectionIndexLabel(v3, v5, v4);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SectionIndexLabel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * -a2;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for SectionIndexLabel(uint64_t a1)
{
  return *(void *)(a1 + 16) >> 63;
}

uint64_t destructiveProjectEnumData for SectionIndexLabel(uint64_t result)
{
  *(void *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for SectionIndexLabel(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = *(void *)(result + 16) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for SectionIndexLabelKey()
{
  return &type metadata for SectionIndexLabelKey;
}

ValueMetadata *type metadata accessor for SectionIndexTitleKey()
{
  return &type metadata for SectionIndexTitleKey;
}

uint64_t sub_187974DEC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<SectionIndexTitleKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<SectionIndexTitleKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<SectionIndexTitleKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<SectionIndexTitleKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187974F10()
{
  return swift_getWitnessTable();
}

uint64_t View.disclosureGroupStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DisclosureGroupStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for DisclosureGroupStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t DisclosureGroupStyleConfiguration.isExpanded.getter()
{
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

void *key path getter for DisclosureGroupStyleConfiguration.isExpanded : DisclosureGroupStyleConfiguration@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for Binding<Bool>();
  unint64_t result = MEMORY[0x18C113DA0](&v3);
  *a1 = v3;
  return result;
}

uint64_t key path setter for DisclosureGroupStyleConfiguration.isExpanded : DisclosureGroupStyleConfiguration()
{
  return swift_release_n();
}

uint64_t DisclosureGroupStyleConfiguration.isExpanded.setter()
{
  return swift_release();
}

void (*DisclosureGroupStyleConfiguration.isExpanded.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  v3[3] = *v1;
  v3[4] = v5;
  char v6 = *((unsigned char *)v1 + 16);
  *uint64_t v3 = v4;
  v3[1] = v5;
  *((unsigned char *)v3 + 16) = v6;
  type metadata accessor for Binding<Bool>();
  uint64_t v8 = v7;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](v8);
  return ToggleStyleConfiguration.isOn.modify;
}

uint64_t DisclosureGroupStyleConfiguration.$isExpanded.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  swift_retain();
  return v1;
}

unint64_t instantiation function for generic protocol witness table for DisclosureGroupStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in DisclosureGroupStyleConfiguration.Label()
{
  return &protocol witness table for DisclosureGroupStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for DisclosureGroupStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in DisclosureGroupStyleConfiguration.Content()
{
  return &protocol witness table for DisclosureGroupStyleConfiguration.Content;
}

uint64_t dispatch thunk of DisclosureGroupStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for DisclosureGroupStyleConfiguration()
{
  return &type metadata for DisclosureGroupStyleConfiguration;
}

ValueMetadata *type metadata accessor for DisclosureGroupStyleConfiguration.Label()
{
  return &type metadata for DisclosureGroupStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for DisclosureGroupStyleConfiguration.Content()
{
  return &type metadata for DisclosureGroupStyleConfiguration.Content;
}

uint64_t sub_18797551C()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ResolvedDisclosureGroupStyle()
{
  return &type metadata for ResolvedDisclosureGroupStyle;
}

uint64_t getEnumTagSinglePayload for DisclosureGroupStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for DisclosureGroupStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187975910);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in DisclosureGroupStyleModifier<A>()
{
  return &protocol witness table for DisclosureGroupStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in DisclosureGroupStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in DisclosureGroupStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in DisclosureGroupStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedDisclosureGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedDisclosureGroupStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedDisclosureGroupStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedDisclosureGroupStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedDisclosureGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = 1;
  swift_retain();

  return swift_retain();
}

uint64_t DisclosureGroupStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v18[-1] - v11;
  uint64_t v13 = *(void *)(a1 + 8);
  char v14 = *(unsigned char *)(a1 + 16);
  v18[0] = *(void *)a1;
  v18[1] = v13;
  char v19 = v14;
  (*(void (**)(void *, uint64_t, uint64_t, double))(v3 + 24))(v18, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedDisclosureGroupStyle()
{
  return lazy protocol witness table accessor for type DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle> and conformance DisclosureGroupStyleModifier<A>(&lazy protocol witness table cache variable for type DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle> and conformance DisclosureGroupStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>);
}

void type metadata accessor for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>()
{
  if (!lazy cache variable for type metadata for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>)
  {
    lazy protocol witness table accessor for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle();
    unint64_t v0 = type metadata accessor for DisclosureGroupStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DisclosureGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DisclosureGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance DisclosureGroupStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187976068()
{
  return lazy protocol witness table accessor for type DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle> and conformance DisclosureGroupStyleModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>, (void (*)(uint64_t))type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>);
}

uint64_t lazy protocol witness table accessor for type DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle> and conformance DisclosureGroupStyleModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1879760F8()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t EnvironmentValues.isSceneCaptured.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>(0, &lazy cache variable for type metadata for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>, (uint64_t)&unk_1ED4320F0, (uint64_t)&protocol witness table for SceneCaptureStateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup);
  lazy protocol witness table accessor for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>();
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)();
    swift_release_n();
  }
  else
  {
    PropertyList.valueWithSecondaryLookup<A>(_:)();
  }
  swift_release_n();
  return v3;
}

unint64_t lazy protocol witness table accessor for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>;
  if (!lazy protocol witness table cache variable for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>)
  {
    type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>(255, &lazy cache variable for type metadata for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>, (uint64_t)&unk_1ED4320F0, (uint64_t)&protocol witness table for SceneCaptureStateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>);
  }
  return result;
}

uint64_t (*EnvironmentValues.isSceneCaptured.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>(0, &lazy cache variable for type metadata for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>, (uint64_t)&unk_1ED4320F0, (uint64_t)&protocol witness table for SceneCaptureStateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup);
  lazy protocol witness table accessor for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)();
    swift_release_n();
  }
  else
  {
    PropertyList.valueWithSecondaryLookup<A>(_:)();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.isSceneCaptured.modify;
}

uint64_t EnvironmentValues.isSceneCaptured.modify()
{
  return specialized EnvironmentValues.setBridgedValue<A>(value:for:)();
}

id protocol witness for static UITraitBridgedEnvironmentKey.read(from:) in conformance SceneCaptureStateKey@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(a1, sel__swiftui_sceneIsCaptured);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t specialized EnvironmentValues.setBridgedValue<A>(value:for:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>, (uint64_t)&type metadata for BridgedEnvironmentKeysKey, (uint64_t)&protocol witness table for BridgedEnvironmentKeysKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>, (uint64_t)&type metadata for BridgedEnvironmentKeysKey, (uint64_t)&protocol witness table for BridgedEnvironmentKeysKey);
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v2 = (char *)v10;
  uint64_t v3 = *(void *)(v10 + 16);
  if (v3)
  {
    uint64_t v4 = 32;
    uint64_t v5 = *(void *)(v10 + 16);
    while (*(_UNKNOWN **)(v10 + v4) != &unk_1ED4320F0)
    {
      v4 += 16;
      if (!--v5) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 + 1, 1, (char *)v10);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    size_t v8 = &v2[16 * v7];
    *((void *)v8 + 4) = &unk_1ED4320F0;
    *((void *)v8 + 5) = &protocol witness table for SceneCaptureStateKey;
    type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>, (uint64_t)&type metadata for BridgedEnvironmentKeysKey, (uint64_t)&protocol witness table for BridgedEnvironmentKeysKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>, (uint64_t)&type metadata for BridgedEnvironmentKeysKey, (uint64_t)&protocol witness table for BridgedEnvironmentKeysKey);
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    if (v1)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneCaptureStateKey>, (uint64_t)&unk_1ED4320F0, (uint64_t)&protocol witness table for SceneCaptureStateKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneCaptureStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneCaptureStateKey>, (uint64_t)&unk_1ED4320F0, (uint64_t)&protocol witness table for SceneCaptureStateKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_187976864@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isSceneCaptured.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1879768A4()
{
  return specialized EnvironmentValues.setBridgedValue<A>(value:for:)();
}

void *type metadata accessor for SceneCaptureStateKey()
{
  return &unk_1ED4320F0;
}

void type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static DefaultFocusEvaluationPriority.automatic.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t View.defaultFocus<A>(_:_:priority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v27 = a7;
  uint64_t v28 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v12;
  uint64_t v13 = type metadata accessor for FocusState.Binding();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = type metadata accessor for DefaultFocusStateModifier();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v24 - v20;
  uint64_t v22 = *a3;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, v25, v13, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, a5);
  uint64_t v30 = v22;
  DefaultFocusStateModifier.init(binding:value:priority:)((uint64_t)v16, (uint64_t)v11, &v30, a5, (uint64_t)v21);
  MEMORY[0x18C113660](v21, v28, v17, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

void static DefaultFocusEvaluationPriority.userInitiated.getter(void *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for DefaultFocusEvaluationPriority()
{
  return &type metadata for DefaultFocusEvaluationPriority;
}

uint64_t sub_187976C08()
{
  return swift_getWitnessTable();
}

uint64_t View.onContinuousHover(coordinateSpace:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  outlined init with copy of CoordinateSpace(a1, (uint64_t)v10);
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  char v13 = 0;
  swift_retain();
  MEMORY[0x18C113660](v10, a4, &type metadata for SpatialHoverRegionModifier, a5);
  return outlined destroy of SpatialHoverRegionModifier((uint64_t)v10);
}

uint64_t outlined destroy of SpatialHoverRegionModifier(uint64_t a1)
{
  return a1;
}

uint64_t View.onContinuousHover<A>(coordinateSpace:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a7 + 8))(v12, a5, a7);
  v12[6] = a2;
  v12[7] = a3;
  char v13 = 0;
  swift_retain();
  MEMORY[0x18C113660](v12, a4, &type metadata for SpatialHoverRegionModifier, a6);
  return outlined destroy of SpatialHoverRegionModifier((uint64_t)v12);
}

uint64_t static HoverPhase.== infix(_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  BOOL v6 = *(double *)&a1 == *(double *)&a4;
  if (*(double *)&a2 != *(double *)&a5) {
    BOOL v6 = 0;
  }
  if ((a3 | a6)) {
    char v7 = a3 & a6;
  }
  else {
    char v7 = v6;
  }
  return v7 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HoverPhase(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
  {
    double v6 = *(double *)(a1 + 8);
    BOOL v7 = *(double *)a1 == *(double *)a2;
    return v6 == *(double *)(a2 + 8) && v7;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HoverPhase(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

uint64_t getEnumTag for HoverPhase(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for HoverPhase(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 1;
  }
  else
  {
    *(unsigned char *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverPhase()
{
  return &type metadata for HoverPhase;
}

uint64_t sub_187976EC4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187976F28()
{
  return swift_getWitnessTable();
}

uint64_t destroy for HoverCallback()
{
  return outlined consume of HoverCallback();
}

uint64_t initializeBufferWithCopyOfBuffer for HoverCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of HoverCallback();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HoverCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of HoverCallback();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t assignWithTake for HoverCallback(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of HoverCallback();
  return a1;
}

ValueMetadata *type metadata accessor for HoverCallback()
{
  return &type metadata for HoverCallback;
}

uint64_t destroy for SpatialHoverRegionModifier(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  return outlined consume of HoverCallback();
}

uint64_t initializeWithCopy for SpatialHoverRegionModifier(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(unsigned char *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  char v8 = *(unsigned char *)(a2 + 64);
  outlined copy of HoverCallback();
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = v8;
  return a1;
}

uint64_t assignWithCopy for SpatialHoverRegionModifier(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1);
    if (*((unsigned char *)a2 + 40))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
    }
  }
  uint64_t v7 = *((void *)a2 + 6);
  uint64_t v8 = *((void *)a2 + 7);
  char v9 = *((unsigned char *)a2 + 64);
  outlined copy of HoverCallback();
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 64) = v9;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t assignWithTake for SpatialHoverRegionModifier(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  char v5 = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v5;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialHoverRegionModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialHoverRegionModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialHoverRegionModifier()
{
  return &type metadata for SpatialHoverRegionModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in SpatialHoverRegionModifier()
{
  return &protocol witness table for SpatialHoverRegionModifier;
}

double static SpatialHoverRegionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  int v43 = *a1;
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 24);
  int v8 = *(_DWORD *)(a2 + 28);
  int v10 = *(_DWORD *)(a2 + 32);
  int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 56);
  int v14 = *(_DWORD *)(a2 + 60);
  int v16 = *(_DWORD *)(a2 + 64);
  int v17 = *(_DWORD *)(a2 + 68);
  int v18 = *(_DWORD *)(a2 + 72);
  int v19 = *(_DWORD *)(a2 + 76);
  int v20 = *(_DWORD *)(a2 + 80);
  uint64_t v55 = *(void *)a2;
  int v21 = v6;
  LODWORD(v56) = v6;
  uint64_t v57 = v7;
  int v58 = v9;
  int v59 = v8;
  int v51 = v10;
  int v52 = v8;
  int v60 = v10;
  int v61 = v11;
  int v49 = v16;
  int v50 = v11;
  uint64_t v22 = v12;
  uint64_t v62 = v12;
  uint64_t v63 = v13;
  int v64 = v15;
  int v65 = v14;
  int v44 = v14;
  int v45 = v20;
  int v66 = v16;
  int v67 = v17;
  int v47 = v18;
  int v48 = v17;
  int v68 = v18;
  int v46 = v19;
  int v69 = v19;
  int v70 = v20;
  a3(&v53);
  type metadata accessor for ViewGraph();
  uint64_t v23 = MEMORY[0x18C114EE0]() + 200;
  swift_beginAccess();
  uint64_t v24 = MEMORY[0x18C119DF0](v23);
  swift_release();
  if (v24)
  {
    int v42 = v9;
    swift_getObjectType();
    uint64_t v25 = swift_conformsToProtocol2();
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    if (v25) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v27)
    {
      char v41 = a4;
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v29 = type metadata accessor for EventGraphHost();
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t))(*(void *)(v26 + 8)
                                                                                                 + 16))(&v55, v29, v29, ObjectType);
      swift_unknownObjectRelease();
      if (v55)
      {
        double v30 = v56;
        uint64_t v31 = swift_getObjectType();
        (*(void (**)(uint64_t, double))(*(void *)&v30 + 8))(v31, COERCE_DOUBLE(*(void *)&v30));
        swift_unknownObjectRelease();
        uint64_t v55 = v13;
        LODWORD(v56) = v15;
        if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
        {
          uint64_t v55 = v5;
          LODWORD(v56) = v21;
          uint64_t v57 = v7;
          int v58 = v42;
          int v59 = v52;
          int v60 = v51;
          int v61 = v50;
          uint64_t v62 = v22;
          uint64_t v63 = v13;
          int v64 = v15;
          int v65 = v44;
          int v66 = v49;
          int v67 = v48;
          int v68 = v47;
          int v69 = v46;
          int v70 = v45;
          type metadata accessor for HoverResponder();
          swift_allocObject();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v40 = HoverResponder.init(inputs:)();
          LODWORD(v55) = v43;
          type metadata accessor for _GraphValue<SpatialHoverRegionModifier>();
          swift_retain();
          _GraphValue.value.getter();
          int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
          LODWORD(v55) = v43;
          _GraphValue.value.getter();
          int v38 = AGGraphCreateOffsetAttribute2();
          uint64_t v55 = v53;
          double v56 = v54;
          int v37 = _ViewOutputs.viewResponders()();
          uint64_t v55 = v5;
          LODWORD(v56) = v21;
          uint64_t v57 = v7;
          int v58 = v42;
          int v59 = v52;
          int v60 = v51;
          int v61 = v50;
          uint64_t v62 = v22;
          uint64_t v63 = v13;
          int v64 = v15;
          int v65 = v44;
          int v66 = v49;
          int v67 = v48;
          int v68 = v47;
          int v69 = v46;
          int v70 = v45;
          int v36 = _ViewInputs.animatedPosition()();
          uint64_t v55 = v5;
          LODWORD(v56) = v21;
          uint64_t v57 = v7;
          int v58 = v42;
          int v59 = v52;
          int v60 = v51;
          int v61 = v50;
          uint64_t v62 = v22;
          uint64_t v63 = v13;
          int v64 = v15;
          int v65 = v44;
          int v66 = v49;
          int v67 = v48;
          int v68 = v47;
          int v69 = v46;
          int v70 = v45;
          int v35 = _ViewInputs.transform.getter();
          uint64_t v55 = v5;
          LODWORD(v56) = v21;
          uint64_t v57 = v7;
          int v58 = v42;
          int v59 = v52;
          int v60 = v51;
          int v61 = v50;
          uint64_t v62 = v22;
          uint64_t v63 = v13;
          int v64 = v15;
          int v65 = v44;
          int v66 = v49;
          int v67 = v48;
          int v68 = v47;
          int v69 = v46;
          int v70 = v45;
          int v34 = _ViewInputs.animatedSize()();
          uint64_t v55 = v5;
          LODWORD(v56) = v21;
          uint64_t v57 = v7;
          int v58 = v42;
          int v59 = v52;
          int v60 = v51;
          int v61 = v50;
          uint64_t v62 = v22;
          uint64_t v63 = v13;
          int v64 = v15;
          int v65 = v44;
          int v66 = v49;
          int v67 = v48;
          int v68 = v47;
          int v69 = v46;
          int v70 = v45;
          swift_getKeyPath();
          int v32 = _ViewInputs.mapEnvironment<A>(_:)();
          swift_release();
          LODWORD(v56) = v38;
          BYTE1(v63) = 1;
          swift_release();
          uint64_t v55 = v40;
          HIDWORD(v63) = OffsetAttribute2;
          int v64 = v37;
          int v65 = v36;
          int v66 = v35;
          int v67 = v34;
          int v68 = v32;
          protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
          type metadata accessor for [ViewResponder]();
          lazy protocol witness table accessor for type HoverResponderChild and conformance HoverResponderChild();
          Attribute.init<A>(body:value:flags:update:)();
          outlined destroy of HoverResponderChild((uint64_t)&v55);
          LOBYTE(v55) = 0;
          _ViewOutputs.subscript.setter();
        }
        swift_release();
      }
      a4 = v41;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  *(void *)a4 = v53;
  double result = v54;
  a4[1] = v54;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance SpatialHoverRegionModifier()
{
}

void type metadata accessor for _GraphValue<SpatialHoverRegionModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<SpatialHoverRegionModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<SpatialHoverRegionModifier>);
    }
  }
}

uint64_t Scene.windowManagerRole(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

void static WindowManagerRole.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void View.windowDockBehavior(_:)()
{
}

void static WindowBehavior.enabled.getter()
{
}

ValueMetadata *type metadata accessor for WindowInteractionBehavior()
{
  return &type metadata for WindowInteractionBehavior;
}

ValueMetadata *type metadata accessor for WindowManagerRole()
{
  return &type metadata for WindowManagerRole;
}

ValueMetadata *type metadata accessor for WindowBehavior()
{
  return &type metadata for WindowBehavior;
}

ValueMetadata *type metadata accessor for WindowFullScreenBehavior()
{
  return &type metadata for WindowFullScreenBehavior;
}

ValueMetadata *type metadata accessor for WindowStageManagerBehavior()
{
  return &type metadata for WindowStageManagerBehavior;
}

uint64_t sub_187977AC8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

ValueMetadata *type metadata accessor for WindowManagerRole.Guts()
{
  return &type metadata for WindowManagerRole.Guts;
}

unsigned char *storeEnumTagSinglePayload for WindowInteractionBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187977BACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WindowInteractionBehavior.Guts()
{
  return &type metadata for WindowInteractionBehavior.Guts;
}

unint64_t lazy protocol witness table accessor for type WindowInteractionBehavior.Guts and conformance WindowInteractionBehavior.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowInteractionBehavior.Guts and conformance WindowInteractionBehavior.Guts;
  if (!lazy protocol witness table cache variable for type WindowInteractionBehavior.Guts and conformance WindowInteractionBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowInteractionBehavior.Guts and conformance WindowInteractionBehavior.Guts);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WindowManagerRole.Guts and conformance WindowManagerRole.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowManagerRole.Guts and conformance WindowManagerRole.Guts;
  if (!lazy protocol witness table cache variable for type WindowManagerRole.Guts and conformance WindowManagerRole.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowManagerRole.Guts and conformance WindowManagerRole.Guts);
  }
  return result;
}

void View.windowMinimizeBehavior(_:)()
{
}

void View.windowDismissBehavior(_:)()
{
}

{
  View.windowDockBehavior(_:)();
}

void View.windowFullScreenBehavior(_:)()
{
}

{
  View.windowDockBehavior(_:)();
}

void View.windowResizeBehavior(_:)()
{
}

{
  View.windowDockBehavior(_:)();
}

void View.windowStageManagerBehavior(_:)()
{
}

void static WindowInteractionBehavior.automatic.getter()
{
}

void static WindowInteractionBehavior.disabled.getter()
{
}

void static WindowInteractionBehavior.enabled.getter()
{
}

void static WindowManagerRole.principal.getter()
{
}

void static WindowManagerRole.associated.getter()
{
}

void static WindowBehavior.automatic.getter()
{
}

void static WindowBehavior.disabled.getter()
{
}

void static WindowFullScreenBehavior.automatic.getter()
{
}

void static WindowFullScreenBehavior.enabled.getter()
{
}

void static WindowFullScreenBehavior.disabled.getter()
{
}

void static WindowFullScreenBehavior.associated.getter()
{
}

void static WindowStageManagerBehavior.automatic.getter()
{
}

void static WindowStageManagerBehavior.primary.getter()
{
}

void static WindowStageManagerBehavior.auxiliary.getter()
{
}

uint64_t static LabeledContentStyle<>.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t AutomaticLabeledContentStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_187977E60@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.labelsVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.labelsVisibility : EnvironmentValues()
{
  return EnvironmentValues.labelsVisibility.setter();
}

uint64_t sub_187977EC4()
{
  return EnvironmentValues.labelsVisibility.setter();
}

uint64_t (*_IndefiniteSymbolEffectModifier.config.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _IndefiniteSymbolEffectModifier.options.getter@<X0>(uint64_t a1@<X8>)
{
  return _IndefiniteSymbolEffectModifier.options.getter(type metadata accessor for _IndefiniteSymbolEffectModifier, a1);
}

uint64_t type metadata accessor for _IndefiniteSymbolEffectModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _IndefiniteSymbolEffectModifier);
}

uint64_t _IndefiniteSymbolEffectModifier.options.setter(uint64_t a1)
{
  return _IndefiniteSymbolEffectModifier.options.setter(a1, type metadata accessor for _IndefiniteSymbolEffectModifier);
}

uint64_t (*_IndefiniteSymbolEffectModifier.options.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _IndefiniteSymbolEffectModifier.isActive.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for _IndefiniteSymbolEffectModifier(0) + 24));
}

uint64_t _IndefiniteSymbolEffectModifier.isActive.setter(char a1)
{
  uint64_t result = type metadata accessor for _IndefiniteSymbolEffectModifier(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*_IndefiniteSymbolEffectModifier.isActive.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _IndefiniteSymbolEffectModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.environment.setter();
}

double _IndefiniteSymbolEffectModifier.EffectEnvironment.value.getter@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v20 = a1;
  int v21 = a2;
  uint64_t v2 = type metadata accessor for SymbolEffectOptions();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v11 = Value[1];
  *(void *)&long long v27 = *Value;
  *((void *)&v27 + 1) = v11;
  uint64_t v12 = type metadata accessor for _IndefiniteSymbolEffectModifier(0);
  if (*(unsigned char *)(AGGraphGetValue() + *(int *)(v12 + 24)) == 1)
  {
    uint64_t v13 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v13, v6);
    uint64_t v14 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14 + *(int *)(v12 + 20), v2);
    swift_retain();
    swift_retain();
    _SymbolEffect.init(config:options:)((uint64_t)v9, (uint64_t)v5, v22);
    uint64_t v15 = v23;
    unsigned __int16 v16 = v24;
    if ((~v23 & 0xFFFFFFFE) != 0 || (v24 & 0xFEFE) != 2)
    {
      uint64_t v18 = v22[0];
      uint64_t v17 = v22[1];
      BYTE4(v25) &= 1u;
      v26 &= 1u;
      EnvironmentValues.appendSymbolEffect(_:for:)();
      outlined consume of SymbolEffect?(v18, v17, v15, v16);
    }
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  double result = *(double *)&v27;
  *int v21 = v27;
  return result;
}

uint64_t _SymbolEffect.init(config:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v202 = a2;
  uint64_t v205 = a3;
  uint64_t v170 = type metadata accessor for BreatheSymbolEffect();
  uint64_t v169 = *(void *)(v170 - 8);
  MEMORY[0x1F4188790](v170);
  uint64_t v167 = (char *)&v167 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v168 = (char *)&v167 - v6;
  uint64_t v177 = type metadata accessor for RotateSymbolEffect();
  uint64_t v176 = *(void *)(v177 - 8);
  MEMORY[0x1F4188790](v177);
  uint64_t v172 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v175 = (char *)&v167 - v9;
  uint64_t v179 = type metadata accessor for WiggleSymbolEffect();
  uint64_t v178 = *(void *)(v179 - 8);
  MEMORY[0x1F4188790](v179);
  uint64_t v174 = (char *)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v180 = (char *)&v167 - v12;
  uint64_t v184 = type metadata accessor for DisappearSymbolEffect();
  uint64_t v183 = *(void *)(v184 - 8);
  MEMORY[0x1F4188790](v184);
  int v181 = (char *)&v167 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  int v182 = (char *)&v167 - v15;
  uint64_t v188 = type metadata accessor for AppearSymbolEffect();
  uint64_t v187 = *(void *)(v188 - 8);
  MEMORY[0x1F4188790](v188);
  v185 = (char *)&v167 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  v186 = (char *)&v167 - v18;
  uint64_t v192 = type metadata accessor for ScaleSymbolEffect();
  uint64_t v191 = *(void *)(v192 - 8);
  MEMORY[0x1F4188790](v192);
  char v189 = (char *)&v167 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v190 = (char *)&v167 - v21;
  uint64_t v22 = type metadata accessor for VariableColorSymbolEffect();
  uint64_t v195 = *(void *)(v22 - 8);
  uint64_t v196 = v22;
  MEMORY[0x1F4188790](v22);
  v193 = (char *)&v167 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v194 = (char *)&v167 - v25;
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v171 = (char *)&v167 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  id v173 = (char *)&v167 - v29;
  MEMORY[0x1F4188790](v30);
  v200 = (char *)&v167 - v31;
  uint64_t v197 = type metadata accessor for BounceSymbolEffect();
  uint64_t v199 = *(void *)(v197 - 8);
  MEMORY[0x1F4188790](v197);
  *(void *)&long long v201 = (char *)&v167 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v198 = (char *)&v167 - v34;
  uint64_t v204 = type metadata accessor for SymbolEffectOptions();
  uint64_t v35 = *(void *)(v204 - 8);
  MEMORY[0x1F4188790](v204);
  int v37 = (char *)&v167 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for PulseSymbolEffect();
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  char v41 = (char *)&v167 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  int v44 = (char *)&v167 - v43;
  uint64_t v45 = type metadata accessor for SymbolEffectConfiguration.Effect();
  uint64_t v46 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  int v48 = (char *)&v167 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = a1;
  SymbolEffectConfiguration.effect.getter();
  int v49 = (*(uint64_t (**)(char *, uint64_t))(v46 + 88))(v48, v45);
  if (v49 == *MEMORY[0x1E4F419D0])
  {
    (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v44, v48, v38);
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v41, v44, v38);
    char v50 = PulseSymbolEffect.isLayered.getter();
    LOBYTE(v21outlined consume of Text?(0, 0, 0, 0) = (v50 == 2) | v50 & 1;
    int v51 = *(void (**)(char *, uint64_t))(v39 + 8);
    v51(v41, v38);
    uint64_t v52 = v210;
    uint64_t v53 = v202;
    uint64_t v54 = v204;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v202, v204);
    _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v210);
    *(void *)&long long v55 = v210;
    long long v201 = v55;
    int v56 = v211;
    int v57 = v212;
    uint64_t v58 = v54;
    unsigned int v59 = HIDWORD(v211);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v53, v58);
    uint64_t v60 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v203, v60);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v51)(v44, v38);
    v200 = (char *)0xF000000000000006;
    unint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  else
  {
    uint64_t v64 = v202;
    if (v49 == *MEMORY[0x1E4F419E8])
    {
      (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
      uint64_t v65 = v197;
      (*(void (**)(char *, char *, uint64_t))(v199 + 32))(v198, v48, v197);
      uint64_t v66 = (uint64_t)v200;
      uint64_t v67 = v64;
      SymbolEffectOptions.repeat.getter();
      uint64_t v68 = type metadata accessor for SymbolEffectOptions.RepeatOption();
      char v69 = 1;
      int v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48))(v66, 1, v68);
      outlined destroy of SymbolEffectOptions.RepeatOption?(v66, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0]);
      if (v70 != 1) {
        char v69 = SymbolEffectOptions.prefersContinuous.getter();
      }
      uint64_t v71 = v198;
      uint64_t v72 = v199;
      uint64_t v73 = v201;
      (*(void (**)(void, char *, uint64_t))(v199 + 16))(v201, v198, v65);
      v210 = (char *)0xF000000000000006;
      _SymbolEffect.BounceConfiguration.init(_:isContinuous:trigger:)(v73, v69 & 1, (uint64_t *)&v210, (uint64_t)&v206);
      v200 = v206;
      uint64_t v74 = 0x100000000;
      if (!(_BYTE)v208) {
        uint64_t v74 = 0;
      }
      uint64_t v75 = v74 | v207;
      uint64_t v76 = v204;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v67, v204);
      _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v210);
      *(void *)&long long v77 = v210;
      long long v201 = v77;
      int v56 = v211;
      unsigned int v59 = HIDWORD(v211);
      int v57 = v212;
      uint64_t v78 = v67;
      uint64_t v52 = v75;
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v78, v76);
      uint64_t v79 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(v203, v79);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v71, v65);
      unint64_t v62 = 0;
      uint64_t v63 = 0x2000;
    }
    else
    {
      uint64_t v80 = v35;
      if (v49 == *MEMORY[0x1E4F419C8])
      {
        (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
        uint64_t v81 = v194;
        uint64_t v82 = v195;
        uint64_t v83 = v196;
        (*(void (**)(char *, char *, uint64_t))(v195 + 32))(v194, v48, v196);
        uint64_t v84 = (uint64_t)v193;
        (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v193, v81, v83);
        v210 = (char *)0xF000000000000006;
        _SymbolEffect.VariableColorConfiguration.init(_:trigger:)(v84, (uint64_t *)&v210, (uint64_t)&v206);
        v200 = v206;
        uint64_t v85 = v207;
        uint64_t v86 = v204;
        (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v37, v64, v204);
        _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v210);
        *(void *)&long long v87 = v210;
        long long v201 = v87;
        int v56 = v211;
        unsigned int v59 = HIDWORD(v211);
        int v57 = v212;
        uint64_t v88 = v86;
        uint64_t v52 = v85;
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v64, v88);
        uint64_t v89 = type metadata accessor for SymbolEffectConfiguration();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v89 - 8) + 8))(v203, v89);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v81, v83);
        unint64_t v62 = 0;
        uint64_t v63 = 20480;
      }
      else if (v49 == *MEMORY[0x1E4F419D8])
      {
        (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
        uint64_t v90 = v191;
        uint64_t v91 = v190;
        uint64_t v92 = v192;
        (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v190, v48, v192);
        uint64_t v93 = v189;
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v189, v91, v92);
        _SymbolEffect.ScaleConfiguration.init()();
        LODWORD(v21outlined consume of Text?(0, 0, 0, 0) = v206;
        char v94 = ScaleSymbolEffect.isLayered.getter();
        BYTE4(v21outlined consume of Text?(0, 0, 0, 0) = (v94 == 2) | v94 & 1;
        ScaleSymbolEffect.isUp.getter();
        _SymbolEffect.ScaleConfiguration.level.setter();
        uint64_t v95 = *(void (**)(char *, uint64_t))(v90 + 8);
        v95(v93, v92);
        uint64_t v96 = 0x100000000;
        if (!BYTE4(v210)) {
          uint64_t v96 = 0;
        }
        v200 = (char *)(v96 | v210);
        uint64_t v97 = v204;
        (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v37, v64, v204);
        _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v210);
        *(void *)&long long v98 = v210;
        long long v201 = v98;
        int v56 = v211;
        unsigned int v59 = HIDWORD(v211);
        int v57 = v212;
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v64, v97);
        uint64_t v99 = type metadata accessor for SymbolEffectConfiguration();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v203, v99);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v95)(v91, v92);
        uint64_t v52 = 0;
        unint64_t v62 = 0;
        uint64_t v63 = 24576;
      }
      else
      {
        if (v49 == *MEMORY[0x1E4F419E0])
        {
          (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
          uint64_t v100 = v187;
          uint64_t v101 = v186;
          uint64_t v102 = v188;
          (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v186, v48, v188);
          uint64_t v103 = v185;
          (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v185, v101, v102);
          _SymbolEffect.HiddenConfiguration.init()();
          LODWORD(v21outlined consume of Text?(0, 0, 0, 0) = v206;
          BYTE5(v21outlined consume of Text?(0, 0, 0, 0) = BYTE5(v206);
          char v104 = ScaleSymbolEffect.isLayered.getter();
          BYTE4(v21outlined consume of Text?(0, 0, 0, 0) = (v104 == 2) | v104 & 1;
          AppearSymbolEffect.isUp.getter();
          _SymbolEffect.HiddenConfiguration.flags.setter();
          BYTE5(v21outlined consume of Text?(0, 0, 0, 0) = 1;
          uint64_t v105 = *(void (**)(char *, uint64_t))(v100 + 8);
          v105(v103, v102);
          uint64_t v106 = 0x100000000;
          if (!BYTE4(v210)) {
            uint64_t v106 = 0;
          }
          uint64_t v107 = v106 | v210;
          uint64_t v108 = 0x10000000000;
          if (!BYTE5(v210)) {
            uint64_t v108 = 0;
          }
          v200 = (char *)(v107 | v108);
          uint64_t v109 = v204;
          (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v37, v64, v204);
          _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v210);
          *(void *)&long long v110 = v210;
          long long v201 = v110;
          int v56 = v211;
          unsigned int v59 = HIDWORD(v211);
          int v57 = v212;
          (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v64, v109);
          uint64_t v111 = type metadata accessor for SymbolEffectConfiguration();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v203, v111);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v105)(v101, v102);
        }
        else
        {
          if (v49 != *MEMORY[0x1E4F41A18])
          {
            if (v49 != *MEMORY[0x1E4F41A08] && v49 != *MEMORY[0x1E4F41A10])
            {
              if (v49 == *MEMORY[0x1E4F419F8])
              {
                (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
                (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v180, v48, v179);
                uint64_t v130 = (uint64_t)v173;
                uint64_t v131 = v64;
                SymbolEffectOptions.repeat.getter();
                uint64_t v132 = type metadata accessor for SymbolEffectOptions.RepeatOption();
                char v133 = 1;
                int v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 48))(v130, 1, v132);
                outlined destroy of SymbolEffectOptions.RepeatOption?(v130, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0]);
                if (v134 != 1) {
                  char v133 = SymbolEffectOptions.prefersContinuous.getter();
                }
                uint64_t v135 = v178;
                uint64_t v136 = (uint64_t)v174;
                uint64_t v137 = v179;
                (*(void (**)(char *, char *, uint64_t))(v178 + 16))(v174, v180, v179);
                uint64_t v206 = (char *)0xF000000000000006;
                v138.n128_f64[0] = _SymbolEffect.WiggleConfiguration.init(_:isContinuous:trigger:)(v136, v133 & 1, (uint64_t *)&v206, (uint64_t)&v210);
                uint64_t v199 = v211;
                v200 = v210;
                unint64_t v62 = v212 | ((unint64_t)v213 << 32);
                uint64_t v139 = 256;
                if (!v215) {
                  uint64_t v139 = 0;
                }
                uint64_t v63 = v139 | v214 | 0x3000;
                uint64_t v140 = v204;
                (*(void (**)(char *, uint64_t, uint64_t, __n128))(v35 + 16))(v37, v131, v204, v138);
                _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v206);
                *(void *)&long long v141 = v206;
                long long v201 = v141;
                int v56 = v207;
                unsigned int v59 = v208;
                int v57 = v209;
                (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v131, v140);
                uint64_t v142 = type metadata accessor for SymbolEffectConfiguration();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v142 - 8) + 8))(v203, v142);
                uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v180, v137);
                uint64_t v52 = v199;
                goto LABEL_28;
              }
              if (v49 == *MEMORY[0x1E4F419F0])
              {
                (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
                (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v175, v48, v177);
                uint64_t v143 = (uint64_t)v171;
                SymbolEffectOptions.repeat.getter();
                uint64_t v144 = type metadata accessor for SymbolEffectOptions.RepeatOption();
                char v145 = 1;
                int v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 48))(v143, 1, v144);
                outlined destroy of SymbolEffectOptions.RepeatOption?(v143, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0]);
                uint64_t v147 = v204;
                if (v146 != 1) {
                  char v145 = SymbolEffectOptions.prefersContinuous.getter();
                }
                uint64_t v148 = v176;
                uint64_t v149 = (uint64_t)v172;
                uint64_t v150 = v175;
                uint64_t v151 = v177;
                (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v172, v175, v177);
                v210 = (char *)0xF000000000000006;
                _SymbolEffect.RotateConfiguration.init(_:isContinuous:trigger:)(v149, v145 & 1, (uint64_t *)&v210, (uint64_t)&v206);
                v200 = v206;
                uint64_t v152 = 0x100000000;
                if (!(_BYTE)v208) {
                  uint64_t v152 = 0;
                }
                uint64_t v153 = v152 | v207;
                (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v37, v64, v147);
                _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v210);
                *(void *)&long long v154 = v210;
                long long v201 = v154;
                int v56 = v211;
                unsigned int v59 = HIDWORD(v211);
                int v57 = v212;
                (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v64, v147);
                uint64_t v155 = type metadata accessor for SymbolEffectConfiguration();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v155 - 8) + 8))(v203, v155);
                uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v150, v151);
                uint64_t v52 = v153;
                unint64_t v62 = 0;
                uint64_t v63 = 0x4000;
                goto LABEL_28;
              }
              if (v49 == *MEMORY[0x1E4F41A00])
              {
                (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
                uint64_t v156 = v169;
                id v157 = v168;
                uint64_t v158 = v170;
                (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v168, v48, v170);
                uint64_t v159 = (uint64_t)v167;
                (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v167, v157, v158);
                v210 = (char *)0xF000000000000006;
                _SymbolEffect.BreatheConfiguration.init(_:trigger:)(v159, (uint64_t *)&v210, (uint64_t)&v206);
                v200 = v206;
                uint64_t v160 = 0x100000000;
                if (!(_BYTE)v208) {
                  uint64_t v160 = 0;
                }
                uint64_t v161 = v160 | v207;
                uint64_t v162 = v204;
                (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v37, v64, v204);
                _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v210);
                *(void *)&long long v163 = v210;
                long long v201 = v163;
                int v56 = v211;
                unsigned int v59 = HIDWORD(v211);
                int v57 = v212;
                uint64_t v164 = v162;
                uint64_t v52 = v161;
                (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v64, v164);
                uint64_t v165 = type metadata accessor for SymbolEffectConfiguration();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v165 - 8) + 8))(v203, v165);
                uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v156 + 8))(v157, v158);
                unint64_t v62 = 0;
                uint64_t v63 = 4096;
                goto LABEL_28;
              }
            }
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v202, v204);
            uint64_t v166 = type metadata accessor for SymbolEffectConfiguration();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v166 - 8) + 8))(v203, v166);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v48, v45);
            uint64_t v127 = 0;
            uint64_t v128 = 0;
            uint64_t v129 = v205;
            *uint64_t v205 = 0;
            v129[1] = 0;
            v129[2] = 4294967294;
            unint64_t v124 = 2;
            goto LABEL_34;
          }
          (*(void (**)(char *, uint64_t))(v46 + 96))(v48, v45);
          uint64_t v112 = v183;
          uint64_t v113 = v182;
          uint64_t v114 = v184;
          (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v182, v48, v184);
          uint64_t v115 = v181;
          (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v181, v113, v114);
          _SymbolEffect.HiddenConfiguration.init()();
          LODWORD(v21outlined consume of Text?(0, 0, 0, 0) = v206;
          BYTE5(v21outlined consume of Text?(0, 0, 0, 0) = BYTE5(v206);
          char v116 = ScaleSymbolEffect.isLayered.getter();
          BYTE4(v21outlined consume of Text?(0, 0, 0, 0) = (v116 == 2) | v116 & 1;
          DisappearSymbolEffect.isUp.getter();
          _SymbolEffect.HiddenConfiguration.flags.setter();
          BYTE5(v21outlined consume of Text?(0, 0, 0, 0) = 1;
          uint64_t v117 = *(void (**)(char *, uint64_t))(v112 + 8);
          v117(v115, v114);
          uint64_t v118 = 0x100000000;
          if (!BYTE4(v210)) {
            uint64_t v118 = 0;
          }
          uint64_t v119 = v118 | v210;
          uint64_t v120 = 0x10000000000;
          if (!BYTE5(v210)) {
            uint64_t v120 = 0;
          }
          v200 = (char *)(v119 | v120);
          uint64_t v121 = v204;
          (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v37, v64, v204);
          _SymbolEffect.Options.init(_:)((uint64_t)v37, (uint64_t)&v210);
          *(void *)&long long v122 = v210;
          long long v201 = v122;
          int v56 = v211;
          unsigned int v59 = HIDWORD(v211);
          int v57 = v212;
          (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v64, v121);
          uint64_t v123 = type metadata accessor for SymbolEffectConfiguration();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v123 - 8) + 8))(v203, v123);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v117)(v113, v114);
        }
        uint64_t v52 = 0;
        unint64_t v62 = 0;
        uint64_t v63 = 28672;
      }
    }
  }
LABEL_28:
  unint64_t v124 = v63 | ((unint64_t)v201 << 32);
  uint64_t v125 = 0x100000000;
  if (v56) {
    uint64_t v126 = 0x100000000;
  }
  else {
    uint64_t v126 = 0;
  }
  uint64_t v127 = v126 | DWORD1(v201);
  if (!v57) {
    uint64_t v125 = 0;
  }
  uint64_t v128 = v125 | v59;
  uint64_t v129 = v205;
  *uint64_t v205 = v200;
  v129[1] = v52;
  v129[2] = v62;
LABEL_34:
  v129[3] = v124;
  v129[4] = v127;
  *((_DWORD *)v129 + 1outlined consume of Text?(0, 0, 0, 0) = v128;
  *((unsigned char *)v129 + 44) = BYTE4(v128);
  return result;
}

double protocol witness for Rule.value.getter in conformance _IndefiniteSymbolEffectModifier.EffectEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return _IndefiniteSymbolEffectModifier.EffectEnvironment.value.getter(*(void *)(v1 + 8), a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _IndefiniteSymbolEffectModifier.EffectEnvironment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _IndefiniteSymbolEffectModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _IndefiniteSymbolEffectModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _IndefiniteSymbolEffectModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _IndefiniteSymbolEffectModifier()
{
  return _GraphInputs.environment.setter();
}

uint64_t _DiscreteSymbolEffectModifier.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SymbolEffectConfiguration();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t _DiscreteSymbolEffectModifier.config.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SymbolEffectConfiguration();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*_DiscreteSymbolEffectModifier.config.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _DiscreteSymbolEffectModifier.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for SymbolEffectOptions();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t _DiscreteSymbolEffectModifier.options.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for SymbolEffectOptions();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*_DiscreteSymbolEffectModifier.options.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _DiscreteSymbolEffectModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t _DiscreteSymbolEffectModifier.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*_DiscreteSymbolEffectModifier.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _DiscreteSymbolEffectModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  LODWORD(v13) = *a1;
  type metadata accessor for _DiscreteSymbolEffectModifier();
  type metadata accessor for _GraphValue();
  int v3 = _GraphValue.value.getter();
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  uint64_t v13 = *a2;
  LODWORD(v14) = v4;
  uint64_t v15 = v5;
  long long v16 = *(_OWORD *)(a2 + 3);
  uint64_t v17 = v6;
  LODWORD(v13) = v3;
  HIDWORD(v13) = _GraphInputs.environment.getter();
  uint64_t v14 = AGMakeUniqueID();
  uint64_t v11 = type metadata accessor for _DiscreteSymbolEffectModifier.EffectEnvironment();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<EnvironmentValues>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E4F40140], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v13, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v10, v11, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return _GraphInputs.environment.setter();
}

uint64_t _DiscreteSymbolEffectModifier.EffectEnvironment.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _DiscreteSymbolEffectModifier();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

double _DiscreteSymbolEffectModifier.EffectEnvironment.value.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v32 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v31 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SymbolEffectOptions();
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v34 = (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v33 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _DiscreteSymbolEffectModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v25 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v25 - v17;
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(v41);
  _DiscreteSymbolEffectModifier.EffectEnvironment.modifier.getter((uint64_t)v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v33, v18, v28);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v18, v9);
  _DiscreteSymbolEffectModifier.EffectEnvironment.modifier.getter((uint64_t)v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v34, &v15[*(int *)(v9 + 36)], v30);
  v19(v15, v9);
  _DiscreteSymbolEffectModifier.EffectEnvironment.modifier.getter((uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v31, &v12[*(int *)(v9 + 40)], a2);
  v19(v12, v9);
  AnyEquatable.init<A>(_:)();
  v35[0] = v35[1];
  _SymbolEffect.init(config:options:trigger:)(v33, v34, (uint64_t)v35, v36);
  uint64_t v20 = v37;
  unsigned __int16 v21 = v38;
  if ((~v37 & 0xFFFFFFFE) != 0 || (v38 & 0xFEFE) != 2)
  {
    uint64_t v23 = v36[0];
    uint64_t v22 = v36[1];
    BYTE4(v39) &= 1u;
    v40 &= 1u;
    EnvironmentValues.appendSymbolEffect(_:for:)();
    outlined consume of SymbolEffect?(v23, v22, v20, v21);
  }
  double result = v41[0];
  *uint64_t v26 = *(_OWORD *)v41;
  return result;
}

uint64_t _SymbolEffect.init(config:options:trigger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v161 = a2;
  uint64_t v162 = a3;
  uint64_t v160 = a4;
  uint64_t v138 = type metadata accessor for BreatheSymbolEffect();
  uint64_t v137 = *(void *)(v138 - 8);
  MEMORY[0x1F4188790](v138);
  uint64_t v135 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v136 = (char *)&v135 - v7;
  uint64_t v144 = type metadata accessor for RotateSymbolEffect();
  uint64_t v143 = *(void *)(v144 - 8);
  MEMORY[0x1F4188790](v144);
  uint64_t v140 = (char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  char v145 = (char *)&v135 - v10;
  uint64_t v148 = type metadata accessor for WiggleSymbolEffect();
  uint64_t v146 = *(void *)(v148 - 8);
  MEMORY[0x1F4188790](v148);
  uint64_t v142 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v147 = (char *)&v135 - v13;
  uint64_t v14 = type metadata accessor for VariableColorSymbolEffect();
  uint64_t v151 = *(void *)(v14 - 8);
  uint64_t v152 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v149 = (char *)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v150 = (char *)&v135 - v17;
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v139 = (char *)&v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  long long v141 = (char *)&v135 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v153 = (char *)&v135 - v23;
  uint64_t v154 = type metadata accessor for BounceSymbolEffect();
  uint64_t v156 = *(void *)(v154 - 8);
  MEMORY[0x1F4188790](v154);
  *(void *)&long long v157 = (char *)&v135 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v155 = (char *)&v135 - v26;
  uint64_t v159 = type metadata accessor for SymbolEffectOptions();
  uint64_t v27 = *(void *)(v159 - 8);
  MEMORY[0x1F4188790](v159);
  uint64_t v29 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for PulseSymbolEffect();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v135 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = (char *)&v135 - v35;
  uint64_t v37 = type metadata accessor for SymbolEffectConfiguration.Effect();
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  char v40 = (char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = *(void *)v162;
  uint64_t v158 = a1;
  SymbolEffectConfiguration.effect.getter();
  int v41 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v40, v37);
  if (v41 != *MEMORY[0x1E4F419D0])
  {
    uint64_t v59 = v27;
    uint64_t v60 = v161;
    if (v41 == *MEMORY[0x1E4F419E8])
    {
      (*(void (**)(char *, uint64_t))(v38 + 96))(v40, v37);
      int v61 = v40;
      uint64_t v62 = v154;
      (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v155, v61, v154);
      uint64_t v63 = (uint64_t)v153;
      SymbolEffectOptions.repeat.getter();
      uint64_t v64 = type metadata accessor for SymbolEffectOptions.RepeatOption();
      int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v63, 1, v64);
      outlined destroy of SymbolEffectOptions.RepeatOption?(v63, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0]);
      if (v65 == 1) {
        char v66 = 0;
      }
      else {
        char v66 = SymbolEffectOptions.prefersContinuous.getter();
      }
      uint64_t v77 = v162;
      uint64_t v78 = v59;
      uint64_t v79 = v159;
      uint64_t v80 = (uint64_t)v29;
      uint64_t v82 = v156;
      uint64_t v81 = v157;
      uint64_t v83 = v155;
      (*(void (**)(void, char *, uint64_t))(v156 + 16))(v157, v155, v62);
      uint64_t v167 = v77;
      _SymbolEffect.BounceConfiguration.init(_:isContinuous:trigger:)(v81, v66 & 1, &v167, (uint64_t)&v163);
      uint64_t v162 = v163;
      uint64_t v84 = 0x100000000;
      if (!(_BYTE)v165) {
        uint64_t v84 = 0;
      }
      uint64_t v85 = v84 | v164;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v80, v60, v79);
      _SymbolEffect.Options.init(_:)(v80, (uint64_t)&v167);
      *(void *)&long long v86 = v167;
      long long v157 = v86;
      int v48 = v168;
      unsigned int v49 = HIDWORD(v168);
      int v51 = v169;
      uint64_t v87 = v60;
      uint64_t v44 = v85;
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v87, v79);
      uint64_t v88 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 8))(v158, v88);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v83, v62);
      uint64_t v58 = v162;
      uint64_t v54 = v157;
      unint64_t v55 = 0;
      uint64_t v56 = 0x2000;
    }
    else
    {
      if (v41 != *MEMORY[0x1E4F419C8])
      {
        if (v41 != *MEMORY[0x1E4F419D8]
          && v41 != *MEMORY[0x1E4F419E0]
          && v41 != *MEMORY[0x1E4F41A18]
          && v41 != *MEMORY[0x1E4F41A08]
          && v41 != *MEMORY[0x1E4F41A10])
        {
          if (v41 == *MEMORY[0x1E4F419F8])
          {
            (*(void (**)(char *, uint64_t))(v38 + 96))(v40, v37);
            (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v147, v40, v148);
            uint64_t v94 = (uint64_t)v141;
            SymbolEffectOptions.repeat.getter();
            uint64_t v95 = type metadata accessor for SymbolEffectOptions.RepeatOption();
            int v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 48))(v94, 1, v95);
            outlined destroy of SymbolEffectOptions.RepeatOption?(v94, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0]);
            uint64_t v97 = v162;
            if (v96 == 1) {
              char v98 = 0;
            }
            else {
              char v98 = SymbolEffectOptions.prefersContinuous.getter();
            }
            uint64_t v103 = v146;
            uint64_t v104 = (uint64_t)v142;
            (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v142, v147, v148);
            uint64_t v163 = v97;
            v105.n128_f64[0] = _SymbolEffect.WiggleConfiguration.init(_:isContinuous:trigger:)(v104, v98 & 1, &v163, (uint64_t)&v167);
            uint64_t v58 = v167;
            uint64_t v162 = v168;
            unint64_t v55 = v169 | ((unint64_t)v170 << 32);
            uint64_t v106 = 256;
            if (!v172) {
              uint64_t v106 = 0;
            }
            uint64_t v56 = v106 | v171 | 0x3000;
            uint64_t v107 = v59;
            uint64_t v108 = v159;
            (*(void (**)(char *, uint64_t, uint64_t, __n128))(v59 + 16))(v29, v60, v159, v105);
            _SymbolEffect.Options.init(_:)((uint64_t)v29, (uint64_t)&v163);
            *(void *)&long long v109 = v163;
            long long v157 = v109;
            int v48 = v164;
            unsigned int v49 = v165;
            int v51 = v166;
            uint64_t v110 = v60;
            uint64_t v44 = v162;
            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v110, v108);
            uint64_t v111 = type metadata accessor for SymbolEffectConfiguration();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v158, v111);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v147, v148);
            uint64_t v54 = v157;
            goto LABEL_12;
          }
          if (v41 == *MEMORY[0x1E4F419F0])
          {
            (*(void (**)(char *, uint64_t))(v38 + 96))(v40, v37);
            (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v145, v40, v144);
            uint64_t v99 = (uint64_t)v139;
            SymbolEffectOptions.repeat.getter();
            uint64_t v100 = type metadata accessor for SymbolEffectOptions.RepeatOption();
            int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48))(v99, 1, v100);
            outlined destroy of SymbolEffectOptions.RepeatOption?(v99, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0]);
            if (v101 == 1) {
              char v102 = 0;
            }
            else {
              char v102 = SymbolEffectOptions.prefersContinuous.getter();
            }
            uint64_t v124 = v162;
            uint64_t v125 = v59;
            uint64_t v126 = v159;
            uint64_t v127 = v143;
            uint64_t v128 = (uint64_t)v140;
            uint64_t v129 = v144;
            (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v140, v145, v144);
            uint64_t v167 = v124;
            _SymbolEffect.RotateConfiguration.init(_:isContinuous:trigger:)(v128, v102 & 1, &v167, (uint64_t)&v163);
            uint64_t v58 = v163;
            uint64_t v130 = 0x100000000;
            if (!(_BYTE)v165) {
              uint64_t v130 = 0;
            }
            uint64_t v131 = v130 | v164;
            (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v29, v60, v126);
            _SymbolEffect.Options.init(_:)((uint64_t)v29, (uint64_t)&v167);
            *(void *)&long long v132 = v167;
            long long v157 = v132;
            int v48 = v168;
            unsigned int v49 = HIDWORD(v168);
            int v51 = v169;
            uint64_t v133 = v60;
            uint64_t v44 = v131;
            (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v133, v126);
            uint64_t v134 = type metadata accessor for SymbolEffectConfiguration();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v134 - 8) + 8))(v158, v134);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v145, v129);
            uint64_t v54 = v157;
            unint64_t v55 = 0;
            uint64_t v56 = 0x4000;
            goto LABEL_12;
          }
          if (v41 == *MEMORY[0x1E4F41A00])
          {
            (*(void (**)(char *, uint64_t))(v38 + 96))(v40, v37);
            uint64_t v112 = v137;
            uint64_t v113 = v136;
            uint64_t v114 = v40;
            uint64_t v115 = v138;
            (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v136, v114, v138);
            uint64_t v116 = (uint64_t)v135;
            (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v135, v113, v115);
            uint64_t v167 = v162;
            _SymbolEffect.BreatheConfiguration.init(_:trigger:)(v116, &v167, (uint64_t)&v163);
            uint64_t v58 = v163;
            uint64_t v117 = 0x100000000;
            if (!(_BYTE)v165) {
              uint64_t v117 = 0;
            }
            uint64_t v162 = v117 | v164;
            uint64_t v118 = v59;
            uint64_t v119 = v159;
            (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v29, v60, v159);
            _SymbolEffect.Options.init(_:)((uint64_t)v29, (uint64_t)&v167);
            *(void *)&long long v120 = v167;
            long long v157 = v120;
            int v48 = v168;
            unsigned int v49 = HIDWORD(v168);
            int v51 = v169;
            uint64_t v121 = v60;
            uint64_t v44 = v162;
            (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v121, v119);
            uint64_t v122 = type metadata accessor for SymbolEffectConfiguration();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v122 - 8) + 8))(v158, v122);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v113, v115);
            uint64_t v54 = v157;
            unint64_t v55 = 0;
            uint64_t v56 = 4096;
            goto LABEL_12;
          }
        }
        outlined consume of _SymbolEffect.Trigger(v162);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v60, v159);
        uint64_t v123 = type metadata accessor for SymbolEffectConfiguration();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v123 - 8) + 8))(v158, v123);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v37);
        uint64_t v92 = 0;
        uint64_t v93 = 0;
        int v57 = v160;
        uint64_t *v160 = 0;
        v57[1] = 0;
        v57[2] = 4294967294;
        unint64_t v89 = 2;
        goto LABEL_19;
      }
      (*(void (**)(char *, uint64_t))(v38 + 96))(v40, v37);
      uint64_t v67 = v151;
      uint64_t v68 = v150;
      char v69 = v40;
      uint64_t v70 = v152;
      (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v150, v69, v152);
      uint64_t v71 = (uint64_t)v149;
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v149, v68, v70);
      uint64_t v167 = v162;
      _SymbolEffect.VariableColorConfiguration.init(_:trigger:)(v71, &v167, (uint64_t)&v163);
      uint64_t v58 = v163;
      uint64_t v162 = v164;
      uint64_t v72 = v59;
      uint64_t v73 = v159;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v29, v60, v159);
      _SymbolEffect.Options.init(_:)((uint64_t)v29, (uint64_t)&v167);
      *(void *)&long long v74 = v167;
      long long v157 = v74;
      int v48 = v168;
      unsigned int v49 = HIDWORD(v168);
      int v51 = v169;
      uint64_t v75 = v60;
      uint64_t v44 = v162;
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v75, v73);
      uint64_t v76 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 - 8) + 8))(v158, v76);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v68, v70);
      uint64_t v54 = v157;
      unint64_t v55 = 0;
      uint64_t v56 = 20480;
    }
LABEL_12:
    int v57 = v160;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v38 + 96))(v40, v37);
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v36, v40, v30);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v33, v36, v30);
  char v42 = PulseSymbolEffect.isLayered.getter();
  LOBYTE(v167) = (v42 == 2) | v42 & 1;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v31 + 8);
  v43(v33, v30);
  uint64_t v44 = v167;
  uint64_t v45 = v161;
  uint64_t v46 = v159;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v161, v159);
  _SymbolEffect.Options.init(_:)((uint64_t)v29, (uint64_t)&v167);
  *(void *)&long long v47 = v167;
  long long v157 = v47;
  int v48 = v168;
  unsigned int v49 = HIDWORD(v168);
  uint64_t v50 = v46;
  int v51 = v169;
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v45, v50);
  uint64_t v52 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v158, v52);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v36, v30);
  uint64_t v54 = v157;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  int v57 = v160;
  uint64_t v58 = v162;
LABEL_13:
  unint64_t v89 = v56 | ((unint64_t)v54 << 32);
  uint64_t v90 = 0x100000000;
  if (v48) {
    uint64_t v91 = 0x100000000;
  }
  else {
    uint64_t v91 = 0;
  }
  uint64_t v92 = v91 | HIDWORD(v54);
  if (!v51) {
    uint64_t v90 = 0;
  }
  uint64_t v93 = v90 | v49;
  uint64_t *v57 = v58;
  v57[1] = v44;
  v57[2] = v55;
LABEL_19:
  _OWORD v57[3] = v89;
  v57[4] = v92;
  *((_DWORD *)v57 + 1outlined consume of Text?(0, 0, 0, 0) = v93;
  *((unsigned char *)v57 + 44) = BYTE4(v93);
  return result;
}

double protocol witness for Rule.value.getter in conformance _DiscreteSymbolEffectModifier<A>.EffectEnvironment@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return _DiscreteSymbolEffectModifier.EffectEnvironment.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _DiscreteSymbolEffectModifier<A>.EffectEnvironment(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _DiscreteSymbolEffectModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for _DiscreteSymbolEffectModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _DiscreteSymbolEffectModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for _DiscreteSymbolEffectModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _DiscreteSymbolEffectModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _DiscreteSymbolEffectModifier<A>(_DWORD *a1, uint64_t *a2)
{
  return static _DiscreteSymbolEffectModifier._makeInputs(modifier:inputs:)(a1, a2);
}

uint64_t (*_ConditionalSymbolEffectModifier.config.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ConditionalSymbolEffectModifier.options.getter@<X0>(uint64_t a1@<X8>)
{
  return _IndefiniteSymbolEffectModifier.options.getter(type metadata accessor for _ConditionalSymbolEffectModifier, a1);
}

uint64_t _IndefiniteSymbolEffectModifier.options.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for SymbolEffectOptions();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t _ConditionalSymbolEffectModifier.options.setter(uint64_t a1)
{
  return _IndefiniteSymbolEffectModifier.options.setter(a1, type metadata accessor for _ConditionalSymbolEffectModifier);
}

uint64_t _IndefiniteSymbolEffectModifier.options.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for SymbolEffectOptions();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*_ConditionalSymbolEffectModifier.options.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ConditionalSymbolEffectModifier.condition.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for _ConditionalSymbolEffectModifier(0) + 24));
}

uint64_t _ConditionalSymbolEffectModifier.condition.setter(char a1)
{
  uint64_t result = type metadata accessor for _ConditionalSymbolEffectModifier(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*_ConditionalSymbolEffectModifier.condition.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _ConditionalSymbolEffectModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.environment.setter();
}

double _ConditionalSymbolEffectModifier.EffectEnvironment.value.getter@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  v20[1] = a1;
  uint64_t v21 = a2;
  uint64_t v2 = type metadata accessor for SymbolEffectOptions();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v11 = Value[1];
  *(void *)&long long v28 = *Value;
  *((void *)&v28 + 1) = v11;
  uint64_t v12 = type metadata accessor for _ConditionalSymbolEffectModifier(0);
  uint64_t v13 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v13, v6);
  uint64_t v14 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14 + *(int *)(v12 + 20), v2);
  unint64_t v22 = *(unsigned __int8 *)(AGGraphGetValue() + *(int *)(v12 + 24)) | 0x8000000000000000;
  swift_retain();
  swift_retain();
  _SymbolEffect.init(config:options:trigger:)((uint64_t)v9, (uint64_t)v5, (uint64_t)&v22, v23);
  uint64_t v15 = v24;
  unsigned __int16 v16 = v25;
  if ((~v24 & 0xFFFFFFFE) != 0 || (v25 & 0xFEFE) != 2)
  {
    uint64_t v18 = v23[0];
    uint64_t v17 = v23[1];
    BYTE4(v26) &= 1u;
    v27 &= 1u;
    EnvironmentValues.appendSymbolEffect(_:for:)();
    outlined consume of SymbolEffect?(v18, v17, v15, v16);
  }
  double result = *(double *)&v28;
  *uint64_t v21 = v28;
  return result;
}

double protocol witness for Rule.value.getter in conformance _ConditionalSymbolEffectModifier.EffectEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return _ConditionalSymbolEffectModifier.EffectEnvironment.value.getter(*(void *)(v1 + 8), a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalSymbolEffectModifier.EffectEnvironment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ConditionalSymbolEffectModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ConditionalSymbolEffectModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _ConditionalSymbolEffectModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _ConditionalSymbolEffectModifier()
{
  return _GraphInputs.environment.setter();
}

uint64_t _IndefiniteSymbolEffectModifier.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SymbolEffectConfiguration();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t _IndefiniteSymbolEffectModifier.config.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SymbolEffectConfiguration();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*SymbolEffectTransition.config.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SymbolEffectTransition.options.getter@<X0>(uint64_t a1@<X8>)
{
  return _IndefiniteSymbolEffectModifier.options.getter(type metadata accessor for SymbolEffectTransition, a1);
}

uint64_t SymbolEffectTransition.options.setter(uint64_t a1)
{
  return _IndefiniteSymbolEffectModifier.options.setter(a1, type metadata accessor for SymbolEffectTransition);
}

uint64_t (*SymbolEffectTransition.options.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SymbolEffectTransition.body(content:phase:)@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  int v4 = a1;
  uint64_t v5 = type metadata accessor for SymbolEffectOptions();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SymbolEffectConfiguration();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))(v12, v2, v10);
  uint64_t result = _SymbolEffect.HiddenConfiguration.init(_:hidden:)((uint64_t)v12, v4 != 1, &v25);
  unint64_t v15 = v25 | ((unint64_t)(unsigned __int16)v26 << 32);
  if ((v15 & 0xFF00000000) == 0x200000000)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 2;
    uint64_t v20 = 4294967294;
  }
  else
  {
    uint64_t v16 = v15 & 0x101FFFFFFFFLL;
    uint64_t v21 = type metadata accessor for SymbolEffectTransition(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(int *)(v21 + 20), v5);
    uint64_t result = _SymbolEffect.Options.init(_:)((uint64_t)v8, (uint64_t)&v25);
    uint64_t v20 = 0;
    unint64_t v19 = ((unint64_t)v25 << 32) | 0x7000;
    if (v27) {
      uint64_t v22 = 0x100000000;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v17 = v22 | v26;
    if (v29) {
      uint64_t v23 = 0x100000000;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v18 = v23 | v28;
  }
  *(void *)a2 = v16;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v17;
  *(_DWORD *)(a2 + 4outlined consume of Text?(0, 0, 0, 0) = v18;
  *(unsigned char *)(a2 + 44) = BYTE4(v18);
  return result;
}

uint64_t _SymbolEffect.HiddenConfiguration.init(_:hidden:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  int v49 = a2;
  uint64_t v50 = a3;
  uint64_t v4 = type metadata accessor for DisappearSymbolEffect();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = type metadata accessor for AppearSymbolEffect();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = type metadata accessor for SymbolEffectConfiguration.Effect();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  SymbolEffectConfiguration.effect.getter();
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  if (v21 == *MEMORY[0x1E4F419D0]
    || v21 == *MEMORY[0x1E4F419E8]
    || v21 == *MEMORY[0x1E4F419C8]
    || v21 == *MEMORY[0x1E4F419D8])
  {
    goto LABEL_12;
  }
  uint64_t v46 = a1;
  if (v21 != *MEMORY[0x1E4F419E0])
  {
    if (v21 == *MEMORY[0x1E4F41A18])
    {
      (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
      uint64_t v35 = v47;
      uint64_t v34 = v48;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v9, v20, v48);
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v6, v9, v34);
      _SymbolEffect.HiddenConfiguration.init()();
      unsigned int v53 = v51;
      char v55 = v52;
      char v36 = ScaleSymbolEffect.isLayered.getter();
      unsigned __int8 v54 = (v36 == 2) | v36 & 1;
      DisappearSymbolEffect.isUp.getter();
      _SymbolEffect.HiddenConfiguration.flags.setter();
      char v55 = v49 & 1;
      uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      v37(v6, v34);
      unsigned int v30 = v53;
      int v31 = v54;
      char v32 = v55;
      uint64_t v38 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v46, v38);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v9, v34);
      goto LABEL_23;
    }
    BOOL v39 = v21 != *MEMORY[0x1E4F41A08] && v21 == *MEMORY[0x1E4F41A10];
    a1 = v46;
    if (v39)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      _SymbolEffect.HiddenConfiguration.init()();
      unsigned int v30 = v53;
      int v31 = v54;
      uint64_t v40 = type metadata accessor for SymbolEffectConfiguration();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(a1, v40);
      char v32 = v49;
      goto LABEL_23;
    }
LABEL_12:
    uint64_t v25 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a1, v25);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    uint64_t v27 = 0x200000000;
    goto LABEL_28;
  }
  (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v20, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  _SymbolEffect.HiddenConfiguration.init()();
  unsigned int v53 = v51;
  char v55 = v52;
  char v28 = ScaleSymbolEffect.isLayered.getter();
  unsigned __int8 v54 = (v28 == 2) | v28 & 1;
  AppearSymbolEffect.isUp.getter();
  _SymbolEffect.HiddenConfiguration.flags.setter();
  char v55 = v49 & 1;
  char v29 = *(void (**)(char *, uint64_t))(v11 + 8);
  v29(v13, v10);
  unsigned int v30 = v53;
  int v31 = v54;
  char v32 = v55;
  uint64_t v33 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v46, v33);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v16, v10);
LABEL_23:
  uint64_t v41 = 0x100000000;
  if (!v31) {
    uint64_t v41 = 0;
  }
  uint64_t v42 = v41 | v30;
  uint64_t v43 = 0x10000000000;
  if ((v32 & 1) == 0) {
    uint64_t v43 = 0;
  }
  uint64_t v27 = v42 | v43;
LABEL_28:
  uint64_t v44 = v50;
  *uint64_t v50 = v27;
  *((_WORD *)v44 + 2) = WORD2(v27);
  return result;
}

uint64_t _SymbolEffect.Options.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SymbolEffectOptions.RepeatOption();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F419A0];
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v30 - v16;
  char v18 = 1;
  char v32 = 1;
  char v31 = 1;
  SymbolEffectOptions.repeat.getter();
  outlined init with copy of WiggleSymbolEffect.WiggleStyle?((uint64_t)v17, (uint64_t)v14, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
  {
    float v19 = 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v14, v4);
    (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v7, v4);
    if (v20 == *MEMORY[0x1E4F41998])
    {
      (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v7, v4);
      char v18 = 0;
      float v19 = (float)*v7;
    }
    else if (v20 == *MEMORY[0x1E4F41990])
    {
      char v18 = 0;
      float v19 = INFINITY;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
      float v19 = 0.0;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  outlined destroy of SymbolEffectOptions.RepeatOption?((uint64_t)v17, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, MEMORY[0x1E4F419A0]);
  char v32 = v18;
  float v22 = COERCE_DOUBLE(SymbolEffectOptions.repeatDelay.getter());
  if (v21) {
    float v23 = 0.0;
  }
  else {
    float v23 = v22;
  }
  char v31 = v21 & 1;
  SymbolEffectOptions.speed.getter();
  float v25 = v24;
  uint64_t v26 = type metadata accessor for SymbolEffectOptions();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
  char v28 = v32;
  char v29 = v31;
  *(float *)a2 = v25;
  *(float *)(a2 + 4) = v19;
  *(unsigned char *)(a2 + 8) = v28;
  *(float *)(a2 + 12) = v23;
  *(unsigned char *)(a2 + 16) = v29;
  return result;
}

void static SymbolEffectTransition.properties.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t SymbolEffectTransition._makeContentTransition(transition:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SymbolEffectConfiguration();
  double v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void (**)(char *, uint64_t, double))(v8 + 16);
  if (*(unsigned char *)a1 == 3)
  {
    (*v9)(v7, v2, v5);
    uint64_t result = _SymbolEffect.HiddenConfiguration.init(_:hidden:)((uint64_t)v7, 1, &v29);
    if ((unint64_t)BYTE4(v29) << 32 != 0x200000000)
    {
      uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
      *(void *)(a1 + 24) = 1;
      *(unsigned char *)(a1 + 32) = 0;
    }
  }
  else
  {
    (*v9)(v7, v2, v5);
    uint64_t result = _SymbolEffect.HiddenConfiguration.init(_:hidden:)((uint64_t)v7, 1, &v29);
    unint64_t v11 = v29 | ((unint64_t)WORD2(v29) << 32);
    if ((v11 & 0xFF00000000) != 0x200000000)
    {
      BYTE4(v29) = BYTE4(v11) & 1;
      BYTE5(v29) = BYTE5(v11) & 1;
      LODWORD(v29) = _SymbolEffect.HiddenConfiguration.transitionFlags.getter();
      BYTE4(v29) = 1;
      type metadata accessor for SymbolEffectTransition(0);
      SymbolEffectOptions.speed.getter();
      *(float *)&double v12 = v12;
      LODWORD(v21) = LODWORD(v12);
      BYTE4(v21) = 0;
      ContentTransition.EffectType.init(type:arg0:arg1:)();
      uint64_t v21 = v25;
      char v22 = v26;
      int v23 = v27;
      char v24 = v28;
      default argument 3 of ContentTransition.Effect.init(type:begin:duration:events:flags:)();
      default argument 4 of ContentTransition.Effect.init(type:begin:duration:events:flags:)();
      ContentTransition.Effect.init(type:begin:duration:events:flags:)();
      char v13 = v30;
      int v14 = v31;
      char v15 = v32;
      type metadata accessor for Attribute<EnvironmentValues>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, MEMORY[0x1E4F3FF08], MEMORY[0x1E4FBBE00]);
      uint64_t v16 = v33;
      uint64_t v17 = v29;
      uint64_t v18 = v34;
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_18834BB80;
      *(void *)(v19 + 32) = v17;
      *(unsigned char *)(v19 + 4outlined consume of Text?(0, 0, 0, 0) = v13;
      *(_DWORD *)(v19 + 44) = v14;
      *(unsigned char *)(v19 + 48) = v15;
      *(void *)(v19 + 52) = v16;
      *(void *)(v19 + 6outlined consume of Text?(0, 0, 0, 0) = v18;
      uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
      *(void *)(a1 + 24) = v19;
      *(unsigned char *)(a1 + 32) = 1;
    }
  }
  return result;
}

uint64_t static ContentTransition.symbolEffect<A>(_:options:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SymbolEffectOptions();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SymbolEffectConfiguration();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of SymbolEffect.configuration.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  _SymbolEffect.ReplaceConfiguration.init(_:options:)((uint64_t)v10, v7, &v14);
  uint64_t v11 = v14;
  if ((v14 & 0xFF00000000) == 0x200000000) {
    return static ContentTransition.default.getter();
  }
  int v13 = v15;
  uint64_t result = _SymbolEffect.ReplaceConfiguration.init()();
  *(void *)a2 = v11 & 0x1FFFFFFFFLL;
  *(unsigned char *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = v13;
  *(_WORD *)(a2 + 13) = 2;
  return result;
}

uint64_t _SymbolEffect.ReplaceConfiguration.init(_:options:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v67 = a2;
  char v69 = a3;
  uint64_t v4 = type metadata accessor for MagicReplaceSymbolEffect();
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v62 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v60 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, &lazy cache variable for type metadata for ReplaceSymbolEffect.ReplaceStyle?, MEMORY[0x1E4F41978], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v60 - v7;
  uint64_t v66 = type metadata accessor for SymbolEffectOptions();
  uint64_t v9 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v63 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v64 = (char *)&v60 - v12;
  uint64_t v13 = type metadata accessor for ReplaceSymbolEffect();
  uint64_t v65 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v60 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v60 - v20;
  uint64_t v22 = type metadata accessor for SymbolEffectConfiguration.Effect();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  _SymbolEffect.ReplaceConfiguration.init()();
  uint64_t v68 = a1;
  SymbolEffectConfiguration.effect.getter();
  int v26 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v25, v22);
  if (v26 == *MEMORY[0x1E4F419D0]
    || v26 == *MEMORY[0x1E4F419E8]
    || v26 == *MEMORY[0x1E4F419C8]
    || v26 == *MEMORY[0x1E4F419D8]
    || v26 == *MEMORY[0x1E4F419E0]
    || v26 == *MEMORY[0x1E4F41A18])
  {
    goto LABEL_23;
  }
  if (v26 == *MEMORY[0x1E4F41A08])
  {
    (*(void (**)(char *, uint64_t))(v23 + 96))(v25, v22);
    uint64_t v27 = v65;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v21, v25, v13);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v18, v21, v13);
    uint64_t v28 = (uint64_t)v64;
    uint64_t v30 = v66;
    uint64_t v29 = v67;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v64, v67, v66);
    BreatheSymbolEffect.style.getter();
    uint64_t v31 = type metadata accessor for ReplaceSymbolEffect.ReplaceStyle();
    int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v8, 1, v31);
    outlined destroy of SymbolEffectOptions.RepeatOption?((uint64_t)v8, &lazy cache variable for type metadata for ReplaceSymbolEffect.ReplaceStyle?, MEMORY[0x1E4F41978]);
    if (v32 == 1)
    {
      static Semantics.v6.getter();
      char v33 = isLinkedOnOrAfter(_:)();
    }
    else
    {
      char v33 = 0;
    }
    float v44 = _SymbolEffect.ReplaceConfiguration.init(_:options:allowMagic:)((uint64_t)v18, v28, v33 & 1, (uint64_t)&v71);
    (*(void (**)(char *, uint64_t, float))(v9 + 8))(v29, v30, v44);
    uint64_t v45 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v68, v45);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v21, v13);
    goto LABEL_19;
  }
  if (v26 != *MEMORY[0x1E4F41A10])
  {
    if (v26 != *MEMORY[0x1E4F419F8]
      && v26 != *MEMORY[0x1E4F419F0]
      && v26 != *MEMORY[0x1E4F41A00]
      && v26 == *MEMORY[0x1E4F419C0])
    {
      (*(void (**)(char *, uint64_t))(v23 + 96))(v25, v22);
      uint64_t v47 = v60;
      uint64_t v46 = v61;
      uint64_t v48 = v62;
      uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v61 + 32))(v60, v25, v62);
      MEMORY[0x18C115190](v49);
      uint64_t v50 = (uint64_t)v63;
      uint64_t v52 = v66;
      unsigned int v51 = v67;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v63, v67, v66);
      float v53 = _SymbolEffect.ReplaceConfiguration.init(_:options:allowMagic:)((uint64_t)v15, v50, 1, (uint64_t)&v71);
      (*(void (**)(char *, uint64_t, float))(v9 + 8))(v51, v52, v53);
      uint64_t v54 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v68, v54);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v47, v48);
LABEL_19:
      unsigned int v37 = v71;
      int v41 = v72;
      float v39 = v73;
      goto LABEL_20;
    }
LABEL_23:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v67, v66);
    uint64_t v58 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v68, v58);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    uint64_t v59 = v69;
    *char v69 = 0x200000000;
    *((_DWORD *)v59 + 2) = 0;
    return result;
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  uint64_t v34 = v63;
  uint64_t v36 = v66;
  uint64_t v35 = v67;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v63, v67, v66);
  _SymbolEffect.ReplaceConfiguration.init()();
  unsigned int v37 = v71;
  unsigned __int8 v70 = v72;
  SymbolEffectOptions.speed.getter();
  float v39 = v38;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v9 + 8);
  v40(v34, v36);
  int v41 = v70;
  v40(v35, v36);
  uint64_t v42 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v68, v42);
LABEL_20:
  uint64_t v55 = 0x100000000;
  if (!v41) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 | v37;
  int v57 = (float *)v69;
  *char v69 = v56;
  v57[2] = v39;
  return result;
}

uint64_t _SymbolEffect.BounceConfiguration.init(_:isContinuous:trigger:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a3;
  _SymbolEffect.BounceConfiguration.init()();
  uint64_t v21 = v19;
  int v22 = v20;
  char v8 = ScaleSymbolEffect.isLayered.getter();
  if (v8 == 2)
  {
    char v23 = 1;
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    char v23 = v8 & 1;
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = (void (*)(uint64_t *, void))_SymbolEffect.BounceConfiguration.flags.modify();
  if ((*v9 & 0x10) == 0) {
    *v9 |= 0x10u;
  }
  v10(&v19, 0);
LABEL_8:
  char v11 = BounceSymbolEffect.isUp.getter();
  if (v11 != 2)
  {
    if (v11) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    uint64_t v14 = (void (*)(uint64_t *, void))_SymbolEffect.BounceConfiguration.flags.modify();
    if ((*v13 & v12) == 0) {
      *v13 |= v12;
    }
    v14(&v19, 0);
  }
  outlined consume of _SymbolEffect.Trigger?(v21);
  uint64_t v21 = v7;
  uint64_t v15 = type metadata accessor for BounceSymbolEffect();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  int v17 = v22;
  char v18 = v23;
  *(void *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v17;
  *(unsigned char *)(a4 + 12) = v18;
  return result;
}

uint64_t _SymbolEffect.VariableColorConfiguration.init(_:trigger:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  _SymbolEffect.VariableColorConfiguration.init()();
  uint64_t v17 = v15;
  int v18 = v16;
  _SymbolEffect.VariableColorConfiguration.flags.setter();
  if (VariableColorSymbolEffect.isReversing.getter())
  {
    uint64_t v7 = (void (*)(uint64_t *, void))_SymbolEffect.VariableColorConfiguration.flags.modify();
    if ((*v6 & 8) == 0) {
      *v6 |= 8u;
    }
    v7(&v15, 0);
  }
  if (VariableColorSymbolEffect.isIterative.getter())
  {
    uint64_t v9 = (void (*)(uint64_t *, void))_SymbolEffect.VariableColorConfiguration.flags.modify();
    if ((*v8 & 1) == 0) {
      *v8 |= 1u;
    }
    v9(&v15, 0);
  }
  if (VariableColorSymbolEffect.hasReveal.getter())
  {
    char v11 = (void (*)(uint64_t *, void))_SymbolEffect.VariableColorConfiguration.flags.modify();
    if ((*v10 & 2) == 0) {
      *v10 |= 2u;
    }
    v11(&v15, 0);
  }
  outlined consume of _SymbolEffect.Trigger?(v17);
  uint64_t v17 = v5;
  uint64_t v12 = type metadata accessor for VariableColorSymbolEffect();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  int v14 = v18;
  *(void *)a3 = v17;
  *(_DWORD *)(a3 + 8) = v14;
  return result;
}

double _SymbolEffect.WiggleConfiguration.init(_:isContinuous:trigger:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, &lazy cache variable for type metadata for WiggleSymbolEffect.WiggleStyle?, MEMORY[0x1E4F41940], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (double *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = *a3;
  _SymbolEffect.WiggleConfiguration.init()();
  long long v43 = v39;
  char v44 = v40;
  int v45 = v41;
  char v47 = v42;
  char v15 = WiggleSymbolEffect.isLayered.getter();
  if (v15 == 2)
  {
    char v46 = 1;
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    char v46 = v15 & 1;
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = (void (*)(long long *, void))_SymbolEffect.WiggleConfiguration.flags.modify();
  if ((*v16 & 0x100) == 0) {
    *v16 |= 0x100u;
  }
  v17(&v39, 0);
LABEL_8:
  WiggleSymbolEffect.style.getter();
  uint64_t v18 = type metadata accessor for WiggleSymbolEffect.WiggleStyle();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1, v18) != 1)
  {
    outlined init with copy of WiggleSymbolEffect.WiggleStyle?((uint64_t)v13, (uint64_t)v10, &lazy cache variable for type metadata for WiggleSymbolEffect.WiggleStyle?, MEMORY[0x1E4F41940]);
    int v20 = (*(uint64_t (**)(double *, uint64_t))(v19 + 88))(v10, v18);
    if (v20 == *MEMORY[0x1E4F41928])
    {
      (*(void (**)(double *, uint64_t))(v19 + 96))(v10, v18);
      int v21 = *(unsigned __int8 *)v10;
      char v23 = (void (*)(long long *, void))_SymbolEffect.WiggleConfiguration.flags.modify();
      if ((~*v22 & 3) != 0) {
        *v22 |= 3u;
      }
      v23(&v39, 0);
      if (v21) {
        int v24 = 16;
      }
      else {
        int v24 = 32;
      }
      int v26 = (void (*)(long long *, void))_SymbolEffect.WiggleConfiguration.flags.modify();
      if ((*v25 & v24) == 0) {
        *v25 |= v24;
      }
      v26(&v39, 0);
    }
    else if (v20 == *MEMORY[0x1E4F41930])
    {
      (*(void (**)(double *, uint64_t))(v19 + 96))(v10, v18);
      *((double *)&v43 + 1) = *v10 * 0.0174532925;
      char v44 = 0;
    }
    else if (v20 == *MEMORY[0x1E4F41938])
    {
      (*(void (**)(double *, uint64_t))(v19 + 96))(v10, v18);
      int v27 = *(unsigned __int8 *)v10;
      uint64_t v29 = (void (*)(long long *, void))_SymbolEffect.WiggleConfiguration.flags.modify();
      if ((*v28 & 1) == 0) {
        *v28 |= 1u;
      }
      v29(&v39, 0);
      if (v27) {
        int v30 = 16;
      }
      else {
        int v30 = 32;
      }
      int v32 = (void (*)(long long *, void))_SymbolEffect.WiggleConfiguration.flags.modify();
      if ((*v31 & v30) == 0) {
        *v31 |= v30;
      }
      v32(&v39, 0);
      char v47 = 1;
    }
    else
    {
      (*(void (**)(double *, uint64_t))(v19 + 8))(v10, v18);
    }
  }
  outlined destroy of SymbolEffectOptions.RepeatOption?((uint64_t)v13, &lazy cache variable for type metadata for WiggleSymbolEffect.WiggleStyle?, MEMORY[0x1E4F41940]);
  outlined consume of _SymbolEffect.Trigger?(v43);
  *(void *)&long long v43 = v14;
  uint64_t v33 = type metadata accessor for WiggleSymbolEffect();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(a1, v33);
  char v34 = v44;
  int v35 = v45;
  char v36 = v46;
  char v37 = v47;
  double result = *(double *)&v43;
  *(_OWORD *)a4 = v43;
  *(unsigned char *)(a4 + 16) = v34;
  *(_DWORD *)(a4 + 2outlined consume of Text?(0, 0, 0, 0) = v35;
  *(unsigned char *)(a4 + 24) = v36;
  *(unsigned char *)(a4 + 25) = v37;
  return result;
}

uint64_t _SymbolEffect.RotateConfiguration.init(_:isContinuous:trigger:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a3;
  _SymbolEffect.BounceConfiguration.init()();
  uint64_t v21 = v19;
  int v22 = v20;
  char v8 = ScaleSymbolEffect.isLayered.getter();
  if (v8 == 2)
  {
    char v23 = 1;
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    char v23 = v8 & 1;
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = (void (*)(uint64_t *, void))_SymbolEffect.RotateConfiguration.flags.modify();
  if ((*v9 & 0x10) == 0) {
    *v9 |= 0x10u;
  }
  v10(&v19, 0);
LABEL_8:
  char v11 = RotateSymbolEffect.isClockwise.getter();
  if (v11 != 2)
  {
    if (v11) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    uint64_t v14 = (void (*)(uint64_t *, void))_SymbolEffect.RotateConfiguration.flags.modify();
    if ((*v13 & v12) == 0) {
      *v13 |= v12;
    }
    v14(&v19, 0);
  }
  outlined consume of _SymbolEffect.Trigger?(v21);
  uint64_t v21 = v7;
  uint64_t v15 = type metadata accessor for RotateSymbolEffect();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  int v17 = v22;
  char v18 = v23;
  *(void *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v17;
  *(unsigned char *)(a4 + 12) = v18;
  return result;
}

uint64_t _SymbolEffect.BreatheConfiguration.init(_:trigger:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, &lazy cache variable for type metadata for BreatheSymbolEffect.BreatheStyle?, MEMORY[0x1E4F41958], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)&v23 - v10;
  uint64_t v12 = *a2;
  _SymbolEffect.BounceConfiguration.init()();
  uint64_t v25 = v23;
  int v26 = v24;
  char v13 = ScaleSymbolEffect.isLayered.getter();
  char v27 = (v13 == 2) | v13 & 1;
  BreatheSymbolEffect.style.getter();
  uint64_t v14 = type metadata accessor for BreatheSymbolEffect.BreatheStyle();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14) != 1)
  {
    outlined init with copy of WiggleSymbolEffect.WiggleStyle?((uint64_t)v11, (uint64_t)v8, &lazy cache variable for type metadata for BreatheSymbolEffect.BreatheStyle?, MEMORY[0x1E4F41958]);
    int v16 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v8, v14);
    if (v16 != *MEMORY[0x1E4F41948])
    {
      if (v16 == *MEMORY[0x1E4F41950])
      {
        char v18 = (void (*)(uint64_t *, void))_SymbolEffect.BreatheConfiguration.flags.modify();
        if ((*v17 & 1) == 0) {
          *v17 |= 1u;
        }
        v18(&v23, 0);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v14);
      }
    }
  }
  outlined destroy of SymbolEffectOptions.RepeatOption?((uint64_t)v11, &lazy cache variable for type metadata for BreatheSymbolEffect.BreatheStyle?, MEMORY[0x1E4F41958]);
  outlined consume of _SymbolEffect.Trigger?(v25);
  uint64_t v25 = v12;
  uint64_t v19 = type metadata accessor for BreatheSymbolEffect();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  int v21 = v26;
  char v22 = v27;
  *(void *)a3 = v25;
  *(_DWORD *)(a3 + 8) = v21;
  *(unsigned char *)(a3 + 12) = v22;
  return result;
}

float _SymbolEffect.ReplaceConfiguration.init(_:options:allowMagic:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, &lazy cache variable for type metadata for ReplaceSymbolEffect.ReplaceStyle?, MEMORY[0x1E4F41978], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v33 - v9;
  uint64_t v11 = type metadata accessor for ReplaceSymbolEffect.ReplaceStyle();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  int v17 = (char *)v33 - v16;
  _SymbolEffect.ReplaceConfiguration.init()();
  int v34 = v33[0];
  char v18 = ScaleSymbolEffect.isLayered.getter();
  char v35 = (v18 == 2) | v18 & 1;
  SymbolEffectOptions.speed.getter();
  *(float *)&double v19 = v19;
  float v36 = *(float *)&v19;
  BreatheSymbolEffect.style.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of SymbolEffectOptions.RepeatOption?((uint64_t)v10, &lazy cache variable for type metadata for ReplaceSymbolEffect.ReplaceStyle?, MEMORY[0x1E4F41978]);
    if (a3) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
  int v20 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v20 == *MEMORY[0x1E4F41970])
  {
    char v22 = (void (*)(_DWORD *, void))_SymbolEffect.ReplaceConfiguration.flags.modify();
    if ((*v21 & 2) != 0) {
      goto LABEL_14;
    }
    int v23 = *v21 | 2;
    goto LABEL_13;
  }
  if (v20 == *MEMORY[0x1E4F41960])
  {
    char v22 = (void (*)(_DWORD *, void))_SymbolEffect.ReplaceConfiguration.flags.modify();
    if ((~*v21 & 3) == 0) {
      goto LABEL_14;
    }
    int v23 = *v21 | 3;
    goto LABEL_13;
  }
  if (v20 == *MEMORY[0x1E4F41968])
  {
    char v22 = (void (*)(_DWORD *, void))_SymbolEffect.ReplaceConfiguration.flags.modify();
    if ((*v21 & 4) != 0) {
      goto LABEL_14;
    }
    int v23 = *v21 | 4;
LABEL_13:
    *int v21 = v23;
LABEL_14:
    v22(v33, 0);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    if (a3) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  int v32 = *(void (**)(char *, uint64_t))(v12 + 8);
  v32(v17, v11);
  v32(v14, v11);
  if (a3) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v25 = (void (*)(_DWORD *, void))_SymbolEffect.ReplaceConfiguration.flags.modify();
  if ((*v24 & 0x20) == 0) {
    *v24 |= 0x20u;
  }
  v25(v33, 0);
  char v27 = (void (*)(_DWORD *, void))_SymbolEffect.ReplaceConfiguration.flags.modify();
  if ((*v26 & 0x40) == 0) {
    *v26 |= 0x40u;
  }
  v27(v33, 0);
LABEL_20:
  uint64_t v28 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(a2, v28);
  uint64_t v29 = type metadata accessor for ReplaceSymbolEffect();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(a1, v29);
  char v30 = v35;
  float result = v36;
  *(_DWORD *)a4 = v34;
  *(unsigned char *)(a4 + 4) = v30;
  *(float *)(a4 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

uint64_t type metadata accessor for _DiscreteSymbolEffectModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _DiscreteSymbolEffectModifier.EffectEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _ConditionalSymbolEffectModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _ConditionalSymbolEffectModifier);
}

void type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

uint64_t type metadata accessor for SymbolEffectTransition(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SymbolEffectTransition);
}

void type metadata accessor for Attribute<EnvironmentValues>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in _IndefiniteSymbolEffectModifier()
{
  return &protocol witness table for _IndefiniteSymbolEffectModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _DiscreteSymbolEffectModifier<A>()
{
  return &protocol witness table for _DiscreteSymbolEffectModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in _ConditionalSymbolEffectModifier()
{
  return &protocol witness table for _ConditionalSymbolEffectModifier;
}

uint64_t associated type witness table accessor for Transition.Body : View in SymbolEffectTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

uint64_t storeEnumTagSinglePayload for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

uint64_t type metadata completion function for _DiscreteSymbolEffectModifier()
{
  uint64_t result = type metadata accessor for SymbolEffectConfiguration();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SymbolEffectOptions();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _DiscreteSymbolEffectModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = type metadata accessor for SymbolEffectOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = *(void *)(v10 + 64);
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = (*(unsigned char *)(v10 + 80) | *(unsigned char *)(v7 + 80) | *(unsigned char *)(v15 + 80));
  if (v17 <= 7
    && ((v13 + (v12 & ~v11) + v16) & (unint64_t)~v16) + *(void *)(v15 + 64) <= 0x18
    && ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v15 + 80)) & 0x100000) == 0)
  {
    uint64_t v21 = ~v11;
    uint64_t v25 = v9;
    uint64_t v26 = v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    unint64_t v22 = ((unint64_t)a1 + v12) & v21;
    unint64_t v23 = ((unint64_t)a2 + v12) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(v22, v23, v25);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))((v22 + v13 + v16) & ~v16, (v23 + v13 + v16) & ~v16, v26);
  }
  else
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  uint64_t v6 = *(void *)(v5 + 56) + a1;
  uint64_t v7 = type metadata accessor for SymbolEffectOptions();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (v10 + *(void *)(v9 + 56) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

uint64_t initializeWithCopy for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for SymbolEffectOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v8 + v12;
  uint64_t v14 = (v8 + v12 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v14, v15, v9);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 16))((*(void *)(v11 + 48) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v11 + 48) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t assignWithCopy for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = type metadata accessor for SymbolEffectOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v8 + v12;
  uint64_t v14 = (v8 + v12 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v14, v15, v9);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 24))((*(void *)(v11 + 40) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v11 + 40) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t initializeWithTake for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = type metadata accessor for SymbolEffectOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v8 + v12;
  uint64_t v14 = (v8 + v12 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v14, v15, v9);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))((*(void *)(v11 + 32) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v11 + 32) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t assignWithTake for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = type metadata accessor for SymbolEffectOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v8 + v12;
  uint64_t v14 = (v8 + v12 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v14, v15, v9);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))((*(void *)(v11 + 24) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v11 + 24) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _DiscreteSymbolEffectModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = type metadata accessor for SymbolEffectOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = *(void *)(*(void *)(v9 - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  if (*(_DWORD *)(v14 + 84) <= v12) {
    unsigned int v18 = v12;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v14 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = *(void *)(v7 + 64) + v15;
  if (a2 <= v18) {
    goto LABEL_27;
  }
  uint64_t v20 = ((v16 + (v19 & ~v15) + v17) & ~v17) + *(void *)(v14 + 64);
  char v21 = 8 * v20;
  if (v20 > 3) {
    goto LABEL_10;
  }
  unsigned int v23 = ((a2 - v18 + ~(-1 << v21)) >> v21) + 1;
  if (HIWORD(v23))
  {
    int v22 = *(_DWORD *)((char *)a1 + v20);
    if (!v22) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v23 > 0xFF)
  {
    int v22 = *(unsigned __int16 *)((char *)a1 + v20);
    if (!*(unsigned __int16 *)((char *)a1 + v20)) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v23 >= 2)
  {
LABEL_10:
    int v22 = *((unsigned __int8 *)a1 + v20);
    if (!*((unsigned char *)a1 + v20)) {
      goto LABEL_27;
    }
LABEL_17:
    int v24 = (v22 - 1) << v21;
    if (v20 > 3) {
      int v24 = 0;
    }
    if (v20)
    {
      if (v20 <= 3) {
        int v25 = ((v16 + (v19 & ~v15) + v17) & ~v17) + *(_DWORD *)(v14 + 64);
      }
      else {
        int v25 = 4;
      }
      switch(v25)
      {
        case 2:
          int v26 = *a1;
          break;
        case 3:
          int v26 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v26 = *(_DWORD *)a1;
          break;
        default:
          int v26 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v26 = 0;
    }
    return v18 + (v26 | v24) + 1;
  }
LABEL_27:
  if (!v18) {
    return 0;
  }
  if (v8 == v18)
  {
    char v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v28 = a1;
    uint64_t v29 = v8;
    uint64_t v13 = v6;
LABEL_36:
    return v27(v28, v29, v13);
  }
  unint64_t v31 = ((unint64_t)a1 + v19) & ~v15;
  if (v11 != v18)
  {
    uint64_t v28 = (unsigned __int16 *)((v31 + v16 + v17) & ~v17);
    char v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v29 = *(unsigned int *)(v14 + 84);
    goto LABEL_36;
  }
  int v32 = *(uint64_t (**)(unint64_t))(v10 + 48);

  return v32(v31);
}

void storeEnumTagSinglePayload for _DiscreteSymbolEffectModifier(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = type metadata accessor for SymbolEffectOptions();
  uint64_t v12 = *(void *)(v11 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= v10) {
    unsigned int v14 = v10;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v15 = *(void *)(a4 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = *(void *)(*(void *)(v11 - 8) + 64);
  uint64_t v21 = *(unsigned __int8 *)(v16 + 80);
  if (v17 <= v14) {
    unsigned int v22 = v14;
  }
  else {
    unsigned int v22 = *(_DWORD *)(v16 + 84);
  }
  size_t v23 = ((v20 + ((v18 + v19) & ~v19) + v21) & ~v21) + *(void *)(v16 + 64);
  if (a3 <= v22)
  {
    int v24 = 0;
  }
  else if (v23 <= 3)
  {
    unsigned int v27 = ((a3 - v22 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v27))
    {
      int v24 = 4;
    }
    else if (v27 >= 0x100)
    {
      int v24 = 2;
    }
    else
    {
      int v24 = v27 > 1;
    }
  }
  else
  {
    int v24 = 1;
  }
  if (v22 < a2)
  {
    unsigned int v25 = ~v22 + a2;
    if (v23 < 4)
    {
      int v26 = (v25 >> (8 * v23)) + 1;
      if (v23)
      {
        int v28 = v25 & ~(-1 << (8 * v23));
        bzero(a1, v23);
        if (v23 == 3)
        {
          *(_WORD *)a1 = v28;
          a1[2] = BYTE2(v28);
        }
        else if (v23 == 2)
        {
          *(_WORD *)a1 = v28;
        }
        else
        {
          *a1 = v28;
        }
      }
    }
    else
    {
      bzero(a1, v23);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v24)
    {
      case 1:
        a1[v23] = v26;
        return;
      case 2:
        *(_WORD *)&a1[v23] = v26;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&a1[v23] = v26;
        return;
      default:
        return;
    }
  }
  switch(v24)
  {
    case 1:
      a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x18797FF1CLL);
    case 4:
      *(_DWORD *)&a1[v23] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v10 == v22)
      {
        uint64_t v29 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        char v30 = a1;
        uint64_t v31 = a2;
        uint64_t v32 = v10;
        uint64_t v15 = v8;
LABEL_37:
        v29(v30, v31, v32, v15);
        return;
      }
      unint64_t v33 = (unint64_t)&a1[v18 + v19] & ~v19;
      if (v13 != v22)
      {
        char v30 = (unsigned char *)((v33 + v20 + v21) & ~v21);
        uint64_t v29 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        uint64_t v31 = a2;
        uint64_t v32 = v17;
        goto LABEL_37;
      }
      int v34 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
      v34(v33, a2);
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for _IndefiniteSymbolEffectModifier(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymbolEffectOptions();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t initializeWithCopy for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1879803A4);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for SymbolEffectOptions();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
      if (v14 >= 2) {
        return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for _ConditionalSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1879804E0);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for SymbolEffectOptions();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for _IndefiniteSymbolEffectModifier()
{
  uint64_t result = type metadata accessor for SymbolEffectConfiguration();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SymbolEffectOptions();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SymbolEffectTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymbolEffectOptions();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SymbolEffectOptions();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t initializeWithCopy for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187980B68);
}

uint64_t sub_187980B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for SymbolEffectOptions();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187980C74);
}

uint64_t sub_187980C74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SymbolEffectConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SymbolEffectOptions();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata completion function for SymbolEffectTransition()
{
  uint64_t result = type metadata accessor for SymbolEffectConfiguration();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SymbolEffectOptions();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier>();
    lazy protocol witness table accessor for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier>)
  {
    type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(255, &lazy cache variable for type metadata for PlaceholderContentView<SymbolEffectTransition>, type metadata accessor for SymbolEffectTransition, MEMORY[0x1E4F40988]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>;
  if (!lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>)
  {
    type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(255, &lazy cache variable for type metadata for PlaceholderContentView<SymbolEffectTransition>, type metadata accessor for SymbolEffectTransition, MEMORY[0x1E4F40988]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>);
  }
  return result;
}

void *type metadata accessor for _ConditionalSymbolEffectModifier.EffectEnvironment()
{
  return &unk_1ED45DC20;
}

void *type metadata accessor for _IndefiniteSymbolEffectModifier.EffectEnvironment()
{
  return &unk_1ED45C458;
}

uint64_t base witness table accessor for _AttributeBody in _DiscreteSymbolEffectModifier<A>.EffectEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of SymbolEffectOptions.RepeatOption?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of WiggleSymbolEffect.WiggleStyle?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for _GraphValue<_IndefiniteSymbolEffectModifier>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void static WindowLayout.windowLayoutProperties.getter()
{
}

void WindowLayout.updateCache(_:content:context:)()
{
}

void Scene.windowLayout<A>(_:)()
{
}

void WindowLayoutProperties.triggers.getter()
{
}

void WindowLayoutProperties.triggers.setter()
{
}

void WindowLayoutProperties.triggers.modify()
{
}

SwiftUI::WindowLayoutProperties __swiftcall WindowLayoutProperties.init()()
{
  result.triggers.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void WindowLayoutUpdateTriggers.rawValue.getter()
{
}

SwiftUI::WindowLayoutUpdateTriggers __swiftcall WindowLayoutUpdateTriggers.init(rawValue:)(Swift::Int rawValue)
{
  result.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static WindowLayoutUpdateTriggers.displayConfiguration.getter()
{
}

void WindowLayout<>.makeCache(content:context:)()
{
}

unint64_t lazy protocol witness table accessor for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers;
  if (!lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers;
  if (!lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers;
  if (!lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers;
  if (!lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers);
  }
  return result;
}

uint64_t dispatch thunk of static WindowLayout.windowLayoutProperties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of WindowLayout.makeCache(content:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of WindowLayout.updateCache(_:content:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of WindowLayout.windowPlacement(content:context:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

ValueMetadata *type metadata accessor for WindowLayoutProperties()
{
  return &type metadata for WindowLayoutProperties;
}

ValueMetadata *type metadata accessor for WindowLayoutUpdateTriggers()
{
  return &type metadata for WindowLayoutUpdateTriggers;
}

uint64_t sub_18798145C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void static WindowLayoutUpdateTriggers.initial.getter()
{
}

void static WindowLayoutUpdateTriggers.all.getter()
{
}

SwiftUI::SpatialEventCollection::Event::ID __swiftcall SpatialEventCollection.Event.ID.init(_:)(SwiftUI::SpatialEventCollection::Event::ID result)
{
  v1->value = result.value;
  return result;
}

void SpatialEventCollection.Event.ID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static SpatialEventCollection.Event.ID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int SpatialEventCollection.Event.ID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SpatialEventCollection.Event.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt64 v4 = *(void *)(v0 + 24);
  Swift::UInt64 v3 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(unsigned __int8 *)(v0 + 40);
  Swift::UInt v6 = *(void *)(v0 + 48);
  Swift::UInt64 v7 = *(void *)(v0 + 56);
  Swift::UInt64 v8 = *(void *)(v0 + 64);
  char v9 = *(unsigned char *)(v0 + 72);
  Hasher._combine(_:)(*(void *)v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v1;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  switch(v2)
  {
    case 1uLL:
    case 2uLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x187981938);
    case 3uLL:
      Swift::UInt v2 = 1;
      break;
    case 4uLL:
      Swift::UInt v2 = 2;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v2);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v4;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v3;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v9 & 1) == 0)
  {
    if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v13 = v7;
    }
    else {
      Swift::UInt64 v13 = 0;
    }
    Hasher._combine(_:)(v13);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v14 = v8;
    }
    else {
      Swift::UInt64 v14 = 0;
    }
    Hasher._combine(_:)(v14);
  }
}

void SpatialEventCollection.Event.Kind.hash(into:)()
{
  Swift::UInt v1 = *v0;
  switch(*v0)
  {
    case 1:
    case 2:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x1879819B0);
    case 3:
      Swift::UInt v1 = 1;
      break;
    case 4:
      Swift::UInt v1 = 2;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
}

void SpatialEventCollection.Event.Phase.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void SpatialEventCollection.Event.InputDevicePose.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

BOOL static SpatialEventCollection.Event.Kind.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  switch(*a1)
  {
    case 1:
    case 2:
LABEL_8:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x187981AC4);
    case 3:
      uint64_t v2 = 1;
      break;
    case 4:
      uint64_t v2 = 2;
      break;
    default:
      break;
  }
  switch(*a2)
  {
    case 1:
    case 2:
      goto LABEL_8;
    case 3:
      uint64_t v3 = 1;
      return v2 == v3;
    case 4:
      uint64_t v3 = 2;
      return v2 == v3;
    default:
      return v2 == v3;
  }
}

Swift::Int SpatialEventCollection.Event.Kind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
    case 2uLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x187981B6CLL);
    case 3uLL:
      Swift::UInt v1 = 1;
      break;
    case 4uLL:
      Swift::UInt v1 = 2;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpatialEventCollection.Event.Kind(unsigned char *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  switch(*a1)
  {
    case 1:
    case 2:
LABEL_8:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x187981C0CLL);
    case 3:
      uint64_t v2 = 1;
      break;
    case 4:
      uint64_t v2 = 2;
      break;
    default:
      break;
  }
  switch(*a2)
  {
    case 1:
    case 2:
      goto LABEL_8;
    case 3:
      uint64_t v3 = 1;
      return v2 == v3;
    case 4:
      uint64_t v3 = 2;
      return v2 == v3;
    default:
      return v2 == v3;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpatialEventCollection.Event.Kind()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
    case 2uLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x187981CB4);
    case 3uLL:
      Swift::UInt v1 = 1;
      break;
    case 4uLL:
      Swift::UInt v1 = 2;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SpatialEventCollection.Event.Kind()
{
  Swift::UInt v1 = *v0;
  switch(*v0)
  {
    case 1:
    case 2:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x187981D2CLL);
    case 3:
      Swift::UInt v1 = 1;
      break;
    case 4:
      Swift::UInt v1 = 2;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialEventCollection.Event.Kind()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
    case 2uLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x187981DBCLL);
    case 3uLL:
      Swift::UInt v1 = 1;
      break;
    case 4uLL:
      Swift::UInt v1 = 2;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static SpatialEventCollection.Event.Phase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int SpatialEventCollection.Event.Phase.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double SpatialEventCollection.Event.InputDevicePose.altitude.getter()
{
  return *(double *)v0;
}

void SpatialEventCollection.Event.InputDevicePose.altitude.setter(double a1)
{
  *Swift::UInt v1 = a1;
}

uint64_t (*SpatialEventCollection.Event.InputDevicePose.altitude.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SpatialEventCollection.Event.InputDevicePose.azimuth.getter()
{
  return *(double *)(v0 + 8);
}

void SpatialEventCollection.Event.InputDevicePose.azimuth.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpatialEventCollection.Event.InputDevicePose.azimuth.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

BOOL static SpatialEventCollection.Event.InputDevicePose.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int SpatialEventCollection.Event.InputDevicePose.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialEventCollection.Event.InputDevicePose()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpatialEventCollection.Event.InputDevicePose(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void SpatialEventCollection.Event.id.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *SpatialEventCollection.Event.id.setter(void *result)
{
  *Swift::UInt64 v1 = *result;
  return result;
}

uint64_t (*SpatialEventCollection.Event.id.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SpatialEventCollection.Event.timestamp.getter()
{
  return *(double *)(v0 + 8);
}

void SpatialEventCollection.Event.timestamp.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpatialEventCollection.Event.timestamp.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void SpatialEventCollection.Event.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *SpatialEventCollection.Event.kind.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*SpatialEventCollection.Event.kind.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SpatialEventCollection.Event.location.getter()
{
  return *(double *)(v0 + 24);
}

void SpatialEventCollection.Event.location.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*SpatialEventCollection.Event.location.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void SpatialEventCollection.Event.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

unsigned char *SpatialEventCollection.Event.phase.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 4outlined consume of Text?(0, 0, 0, 0) = *result;
  return result;
}

uint64_t (*SpatialEventCollection.Event.phase.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialEventCollection.Event.modifierKeys.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t SpatialEventCollection.Event.modifierKeys.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*SpatialEventCollection.Event.modifierKeys.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 SpatialEventCollection.Event.inputDevicePose.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 72);
  __n128 result = *(__n128 *)(v1 + 56);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 SpatialEventCollection.Event.inputDevicePose.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  *(unsigned char *)(v1 + 72) = v2;
  return result;
}

__n128 (*SpatialEventCollection.Event.inputDevicePose.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 24) = v1;
  char v2 = *(unsigned char *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(unsigned char *)(a1 + 16) = v2;
  return SpatialEventCollection.Event.inputDevicePose.modify;
}

__n128 SpatialEventCollection.Event.inputDevicePose.modify(__n128 *a1)
{
  unint64_t v1 = a1[1].n128_u64[1];
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  *(unsigned char *)(v1 + 72) = v2;
  return result;
}

Swift::Int SpatialEventCollection.Event.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpatialEventCollection.Event()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialEventCollection.Event()
{
  return Hasher._finalize()();
}

double SpatialEventCollection.subscript.getter@<D0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(*a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(v4 + 56) + 80 * v5;
    uint64_t v8 = *(void *)(v7 + 8);
    char v9 = *(unsigned char *)(v7 + 16);
    char v10 = *(unsigned char *)(v7 + 40);
    uint64_t v11 = *(void *)(v7 + 64);
    char v12 = *(unsigned char *)(v7 + 72);
    *(void *)a2 = *(void *)v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v7 + 24);
    *(unsigned char *)(a2 + 4outlined consume of Text?(0, 0, 0, 0) = v10;
    long long v13 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(a2 + 48) = v13;
    *(void *)(a2 + 64) = v11;
    *(unsigned char *)(a2 + 72) = v12;
  }
  else
  {
    *(void *)&long long v13 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 4outlined consume of Text?(0, 0, 0, 0) = 3;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a2 + 72) = 0;
  }
  return *(double *)&v13;
}

void SpatialEventCollection.Iterator.next()(uint64_t a1@<X8>)
{
  int64_t v3 = v1[3];
  unint64_t v2 = v1[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = *(void *)(*v1 + 56) + 80 * v6;
    uint64_t v8 = *(void *)(v7 + 8);
    char v9 = *(unsigned char *)(v7 + 16);
    char v10 = *(unsigned char *)(v7 + 40);
    uint64_t v11 = *(void *)(v7 + 64);
    char v12 = *(unsigned char *)(v7 + 72);
    *(void *)a1 = *(void *)v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + 24);
    *(unsigned char *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v10;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 + 48);
    *(void *)(a1 + 64) = v11;
    *(unsigned char *)(a1 + 72) = v12;
    v1[3] = v4;
    v1[4] = v5;
    return;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v1[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v1[1];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              int64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = 3;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    v1[3] = v4;
    v1[4] = 0;
  }
}

uint64_t SpatialEventCollection.makeIterator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = *(void *)v1 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(*(void *)v1 + 32);
  if (-v4 < 64) {
    uint64_t v2 = ~(-1 << -(char)v4);
  }
  uint64_t v5 = v2 & *(void *)(*(void *)v1 + 64);
  *a1 = *(void *)v1;
  a1[1] = v3;
  a1[2] = ~v4;
  a1[3] = 0;
  a1[4] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t SpatialEventCollection.updateWithEvent(_:)(_OWORD *a1)
{
  long long v2 = a1[1];
  v8[0] = *a1;
  v8[1] = v2;
  long long v3 = a1[3];
  void v8[2] = a1[2];
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a1 + 57);
  Swift::UInt v4 = *(void *)&v8[0];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, v4, isUniquelyReferenced_nonNull_native);
  *uint64_t v1 = v7;

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall SpatialEventCollection.updateAfterCallback()()
{
  uint64_t v1 = specialized Dictionary.compactMapValues<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  *uint64_t v0 = v1;
}

BOOL static SpatialEventCollection.Index.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result < *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static SpatialEventCollection.Index.== infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result == *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance SpatialEventCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result < *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance SpatialEventCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 16) & 1) == 0 && (*(unsigned char *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(void *)(result + 8)) {
      return *(void *)a2 >= *(void *)result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance SpatialEventCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result >= *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance SpatialEventCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 16) & 1) == 0 && (*(unsigned char *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(void *)(result + 8)) {
      return *(void *)a2 < *(void *)result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpatialEventCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result == *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SpatialEventCollection.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized Dictionary.startIndex.getter(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  char v9 = (unint64_t *)(a1 + 88);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void SpatialEventCollection.endIndex.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36);
  *(void *)a1 = 1 << *(unsigned char *)(*(void *)v1 + 32);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
}

double SpatialEventCollection.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized Dictionary.subscript.getter(&v17, (uint64_t)v10, *(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *v2);
  uint64_t v4 = v10[1];
  char v5 = v11;
  char v6 = v13;
  uint64_t v7 = v15;
  char v8 = v16;
  *(void *)a2 = v10[0];
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 24) = v12;
  *(unsigned char *)(a2 + 4outlined consume of Text?(0, 0, 0, 0) = v6;
  double result = *(double *)&v14;
  *(_OWORD *)(a2 + 48) = v14;
  *(void *)(a2 + 64) = v7;
  *(unsigned char *)(a2 + 72) = v8;
  return result;
}

void *specialized Dictionary.subscript.getter(void *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < 0 || 1 << *(unsigned char *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a6 + 8 * ((unint64_t)a3 >> 6) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    uint64_t v6 = *(void *)(a6 + 56);
    *double result = *(void *)(*(void *)(a6 + 48) + 8 * a3);
    uint64_t v7 = v6 + 80 * a3;
    uint64_t v8 = *(void *)(v7 + 8);
    char v9 = *(unsigned char *)(v7 + 16);
    char v10 = *(unsigned char *)(v7 + 40);
    uint64_t v11 = *(void *)(v7 + 64);
    char v12 = *(unsigned char *)(v7 + 72);
    *(void *)a2 = *(void *)v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v7 + 24);
    *(unsigned char *)(a2 + 4outlined consume of Text?(0, 0, 0, 0) = v10;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(v7 + 48);
    *(void *)(a2 + 64) = v11;
    *(unsigned char *)(a2 + 72) = v12;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 8 * a2);
    outlined init with copy of NavigationDestinationPresentation(*(void *)(a5 + 56) + 96 * a2, result);
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t SpatialEventCollection.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized _NativeDictionary.index(after:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

SwiftUI::SpatialEventCollection __swiftcall SpatialEventCollection.init()()
{
  *uint64_t v0 = MEMORY[0x1E4FBC868];
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance SpatialEventCollection@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized Dictionary.startIndex.getter(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance SpatialEventCollection(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36);
  *(void *)a1 = 1 << *(unsigned char *)(*(void *)v1 + 32);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
}

void (*protocol witness for Collection.subscript.read in conformance SpatialEventCollection(void *a1, uint64_t a2))(void **a1)
{
  char v5 = (char *)malloc(0x49uLL);
  *a1 = v5;
  specialized Dictionary.subscript.getter(&v19, (uint64_t)v12, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v2);
  uint64_t v6 = v12[1];
  char v7 = v13;
  char v8 = v15;
  uint64_t v9 = v17;
  char v10 = v18;
  *(void *)char v5 = v12[0];
  *((void *)v5 + 1) = v6;
  v5[16] = v7;
  *(_OWORD *)(v5 + 24) = v14;
  unsigned char v5[40] = v8;
  *((_OWORD *)v5 + 3) = v16;
  *((void *)v5 + 8) = v9;
  v5[72] = v10;
  return ListBatchUpdates.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SpatialEventCollection@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[1];
  long long v5 = *a1;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  return specialized Collection<>.subscript.getter((uint64_t)&v5, *v2, a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance SpatialEventCollection@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = specialized Dictionary.startIndex.getter(v3);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5 & 1;
  uint64_t v6 = *(unsigned int *)(v3 + 36);
  *(void *)(a1 + 32) = 1 << *(unsigned char *)(v3 + 32);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v6;
  *(unsigned char *)(a1 + 48) = 0;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance SpatialEventCollection()
{
  uint64_t v1 = *v0;
  uint64_t result = specialized Dictionary.startIndex.getter(*v0);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) == v3) {
      return result == 1 << *(unsigned char *)(v1 + 32);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance SpatialEventCollection(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance SpatialEventCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *v3, a3);
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a4 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
    uint64_t v7 = a2;
    unint64_t v8 = result;
    uint64_t v9 = a6;
    char v10 = a3 & 1;
    if (a4)
    {
      uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
      uint64_t v12 = 0;
      uint64_t v13 = a5 + 64;
      uint64_t v14 = v7;
      while (1)
      {
        if (v10) {
          goto LABEL_33;
        }
        if ((v8 & 0x8000000000000000) != 0 || (uint64_t v15 = 1 << *(unsigned char *)(a5 + 32), (uint64_t)v8 >= v15))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        unint64_t v16 = v8 >> 6;
        unint64_t v17 = *(void *)(v13 + 8 * (v8 >> 6));
        if (((v17 >> v8) & 1) == 0) {
          goto LABEL_30;
        }
        if (*(_DWORD *)(a5 + 36) != v7) {
          goto LABEL_31;
        }
        unint64_t v18 = v17 & (-2 << (v8 & 0x3F));
        if (v18)
        {
          uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v8, v7, 0);
          unint64_t v8 = __clz(__rbit64(v18)) | v8 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v19 = v16 + 1;
          unint64_t v20 = (unint64_t)(v15 + 63) >> 6;
          if (v16 + 1 >= v20) {
            goto LABEL_23;
          }
          unint64_t v21 = *(void *)(v13 + 8 * v19);
          if (!v21)
          {
            unint64_t v19 = v16 + 2;
            if (v16 + 2 >= v20) {
              goto LABEL_23;
            }
            unint64_t v21 = *(void *)(v13 + 8 * v19);
            if (!v21)
            {
              unint64_t v19 = v16 + 3;
              if (v16 + 3 >= v20)
              {
LABEL_23:
                uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v8, v7, 0);
                unint64_t v8 = v15;
                goto LABEL_5;
              }
              unint64_t v21 = *(void *)(v13 + 8 * v19);
              if (!v21)
              {
                unint64_t v22 = v20 - 4;
                while (v22 != v16)
                {
                  unint64_t v21 = *(void *)(a5 + 96 + 8 * v16++);
                  if (v21)
                  {
                    unint64_t v19 = v16 + 3;
                    goto LABEL_14;
                  }
                }
                uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v8, v7, 0);
                unint64_t v8 = v15;
                goto LABEL_5;
              }
            }
          }
LABEL_14:
          uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v8, v7, 0);
          unint64_t v8 = __clz(__rbit64(v21)) | (v19 << 6);
        }
LABEL_5:
        char v10 = 0;
        ++v12;
        uint64_t v7 = v14;
        if (v12 == a4)
        {
          uint64_t v7 = v14;
          uint64_t v9 = a6;
          goto LABEL_28;
        }
      }
    }
    uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
LABEL_28:
    *(void *)uint64_t v9 = v8;
    *(void *)(v9 + 8) = v7;
    *(unsigned char *)(v9 + 16) = v10;
  }
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance SpatialEventCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 16), *v4, a4);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance SpatialEventCollection(uint64_t a1, uint64_t a2)
{
  return specialized Collection.distance(from:to:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *v2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance SpatialEventCollection(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v2 != *(void *)(a2 + 32)) {
    goto LABEL_11;
  }
  if (*(void *)result >= *(void *)(a2 + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  int v2;

  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(a2 + 32) != v2) {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 24) < *(void *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(result + 8) != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a2 + 40) | *(unsigned char *)(result + 40)))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(a2 + 32) != *(void *)(result + 32)) {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 24) < *(void *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance SpatialEventCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized _NativeDictionary.index(after:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance SpatialEventCollection(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  uint64_t v7 = specialized _NativeDictionary.index(after:)(*(void *)a1, v5, v6, v3);
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v4, v5, v6);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SpatialEventCollection@<X0>(void *a1@<X8>)
{
  SpatialEventCollection.makeIterator()(a1);

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.count.getter in conformance SpatialEventCollection()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized Dictionary.startIndex.getter(*v0);
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  uint64_t v7 = specialized Collection.distance(from:to:)(v2, v3, v5 & 1, 1 << *(unsigned char *)(v1 + 32), *(_DWORD *)(v1 + 36), 0, v1);
  outlined consume of Set<UIOpenURLContext>.Index._Variant(v2, v4, v6);
  return v7;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SpatialEventCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance SpatialEventCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t static SpatialEventCollection.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SpatialEventCollection(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  char v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    __swift_destroy_boxed_opaque_existential_1(v19);
    return outlined init with take of OptionalBinaryInteger(a1, v19);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, (uint64_t)a1, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, _OWORD *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v1outlined consume of Text?(0, 0, 0, 0) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1 & 1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  char v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= result && (a6 & 1) != 0)
  {
LABEL_7:
    char v22 = *v7;
    if (v20)
    {
LABEL_8:
      *(void *)(v22[7] + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a6 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
  if ((v20 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  char v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a4, a5, a1, v22);
  swift_retain();

  return outlined copy of Text.LineStyle?(a3, a4);
}

{
  void *v6;
  void **v7;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t vars8;

  uint64_t v7 = (void **)v6;
  char v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 < v19 || (a6 & 1) == 0)
  {
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
    unsigned int v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
    if ((v20 & 1) == (v26 & 1))
    {
      unint64_t v16 = v25;
      char v22 = *v7;
      if (v20) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v22 = *v7;
  if (v20)
  {
LABEL_8:
    char v23 = v22[7] + 160 * v16;
    return outlined assign with take of UpdateViewDestinationRequest(a1, v23);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a4, a5, a1, v22);
  swift_retain();

  return outlined copy of Text.LineStyle?(a3, a4);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  char v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    BOOL v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      unint64_t result = swift_release();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  BOOL v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt32 a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 184 * v10;
    return outlined assign with take of ConfirmationDialog(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for NSAttributedStringKey(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    char v16 = (_OWORD *)(v15[7] + 32 * v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return outlined init with take of Any(a1, v16);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  char v8 = (void **)v7;
  uint64_t v15 = (void *)*v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a7 & 1) != 0)
  {
LABEL_7:
    char v23 = *v8;
    if (v21)
    {
LABEL_8:
      int v24 = (uint64_t *)(v23[7] + 32 * v17);
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      *int v24 = a1;
      v24[1] = a2;
      void v24[2] = a3;
      v24[3] = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a7 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a7 & 1);
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  char v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v17, a5, a6, a1, a2, a3, a4, v23);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int16 a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  char v6 = (void **)v5;
  char v11 = a4 & 1;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      *(_WORD *)(v20[7] + 2 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);

  return outlined copy of TabCustomizationID.Base();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  char v6 = v5;
  uint64_t v11 = a4 & 1;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = *(void *)(v20 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);

  return outlined copy of TabCustomizationID.Base();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 80 * v10;
    return outlined assign with take of ScrollViewCommitInfo(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t vars8;

  char v5 = v4;
  unint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = *(void *)(v18 + 56);

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= (uint64_t)result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      char v16 = (_OWORD *)(v15[7] + 48 * v9);
      long long v17 = a1[1];
      *char v16 = *a1;
      v16[1] = v17;
      void v16[2] = a1[2];
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)result, a3 & 1);
  id result = (id)specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);

  return a2;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      unint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return outlined init with take of Any(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  char v5 = (void **)v4;
  char v9 = a3 & 1;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, v9);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  char v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      char v22 = *(void **)v21;
      swift_bridgeObjectRelease();

      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::UInt32 a3, char a4)
{
  char v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      unint64_t result = swift_release();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  char v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 112 * v12;
    return outlined assign with take of TouchEvent((uint64_t)a1, v19);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 40 * v10;
    return outlined init with take of NavigationSplitViewColumnWidth(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 40 * v10;
    __swift_destroy_boxed_opaque_existential_1(v17);
    return outlined init with take of OptionalBinaryInteger(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, __int16 a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      *(void *)uint64_t v19 = a1;
      *(unsigned char *)(v19 + 8) = a2 & 1;
      *(unsigned char *)(v19 + 9) = HIBYTE(a2);
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v20 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2 & 0xFF01, v18);
  outlined init with take of TableColumnCustomizationID.Base(a3, (uint64_t)v21);
  return outlined retain of TableColumnCustomizationID.Base((uint64_t)v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = (_OWORD *)(v16[7] + 80 * v10);
      long long v18 = a1[3];
      v17[2] = a1[2];
      v17[3] = v18;
      *(_OWORD *)((char *)v17 + 57) = *(_OWORD *)((char *)a1 + 57);
      long long v19 = a1[1];
      *uint64_t v17 = *a1;
      v17[1] = v19;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v13 = a1 & 1;
  char v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  int64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  int64_t v21 = v14[3];
  if (v21 >= result && (a2 & 1) != 0)
  {
LABEL_7:
    char v22 = *v7;
    if (v20)
    {
LABEL_8:
      unint64_t v23 = (double *)(v22[7] + 32 * v16);
      *unint64_t v23 = a3;
      v23[1] = a4;
      uint64_t v23[2] = a5;
      v23[3] = a6;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a2 & 1) == 0)
  {
    int64_t result = (int64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
  int64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v20 & 1) != (v24 & 1))
  {
LABEL_15:
    int64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  char v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v16, v13, v22, a3, a4, a5, a6);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v1outlined consume of Text?(0, 0, 0, 0) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v10 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v10;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = *(void *)(v23 + 56);
      uint64_t result = swift_release();
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a2, a3, a1, v23);

  return swift_bridgeObjectRetain();
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, int a2, Swift::UInt32 a3, char a4)
{
  char v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v19 = a1;
      *(_WORD *)(v19 + 8) = a2;
      *(unsigned char *)(v19 + 1outlined consume of Text?(0, 0, 0, 0) = BYTE2(a2);
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2 & 0xFFFFFF, v18);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  BOOL v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
  {
LABEL_7:
    char v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 32 * v16);
      unint64_t result = swift_bridgeObjectRelease();
      *uint64_t v23 = a1;
      v23[1] = a2;
      uint64_t v23[2] = a3;
      v23[3] = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  char v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v16, a5, a1, a2, a3, a4, v22);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v1outlined consume of Text?(0, 0, 0, 0) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = *(void *)(v15 + 56);

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    type metadata accessor for UIMenuIdentifier(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v9 = v17;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v9, a2, a1, v15);

  id v19 = a2;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  char v10 = *((unsigned char *)a1 + 24);
  uint64_t v22 = a1[4];
  uint64_t v23 = a1[5];
  char v24 = *((unsigned char *)a1 + 48);
  BOOL v11 = (void *)*v3;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    id v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 56 * v13;
      *(void *)uint64_t v20 = v8;
      *(void *)(v20 + 8) = v7;
      *(void *)(v20 + 16) = v9;
      *(unsigned char *)(v20 + 24) = v10;
      *(void *)(v20 + 32) = v22;
      *(void *)(v20 + 4outlined consume of Text?(0, 0, 0, 0) = v23;
      *(unsigned char *)(v20 + 48) = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v17 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = result;
  id v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of TableRowID(a2, (uint64_t)v31);
  *(void *)&long long v25 = v8;
  *((void *)&v25 + 1) = v7;
  uint64_t v26 = v9;
  char v27 = v10;
  uint64_t v28 = v22;
  uint64_t v29 = v23;
  char v30 = v24;
  return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v31, &v25, v19);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 < result || (a6 & 1) == 0)
  {
    if (v21 >= result && (a6 & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((v20 & 1) == (v22 & 1))
    {
      unint64_t v16 = result;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  int v23 = a4 & 1;
  char v24 = *v7;
  if (v20)
  {
    uint64_t v25 = v24[7] + 32 * v16;
    *(void *)uint64_t v25 = a1;
    *(void *)(v25 + 8) = a2;
    *(void *)(v25 + 16) = a3;
    *(unsigned char *)(v25 + 24) = v23 != 0;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v16, a5, a1, a2, a3, v23, v24);
  }
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = (void **)v5;
  char v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 24 * v14;
      unint64_t result = swift_release();
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      *(_WORD *)(v21 + 2outlined consume of Text?(0, 0, 0, 0) = WORD2(a3);
      *(_DWORD *)(v21 + 16) = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3 & 0xFFFFFFFFFFFFLL, v20);
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_10;
  }
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if ((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result))
  {
    if (*(_DWORD *)(a4 + 36) == a2) {
      return _HashTable.occupiedBucket(after:)();
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized static SpatialEventCollection.Event.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (*(void *)a1 == *(void *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
  {
    double v5 = *(double *)(a1 + 24);
    double v4 = *(double *)(a1 + 32);
    int v6 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    double v9 = *(double *)(a1 + 56);
    double v8 = *(double *)(a1 + 64);
    int v10 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v11 = *(unsigned __int8 *)(a2 + 16);
    double v13 = *(double *)(a2 + 24);
    double v12 = *(double *)(a2 + 32);
    int v14 = *(unsigned __int8 *)(a2 + 40);
    uint64_t v15 = *(void *)(a2 + 48);
    double v17 = *(double *)(a2 + 56);
    double v16 = *(double *)(a2 + 64);
    unsigned int v18 = *(unsigned __int8 *)(a2 + 72);
    int v19 = 1;
    uint64_t v20 = *(unsigned __int8 *)(a1 + 16);
    int v21 = 0;
    int v22 = 1;
    switch(v20)
    {
      case 1:
      case 2:
LABEL_29:
        _diagnoseUnavailableCodeReached()();
        __break(1u);
        JUMPOUT(0x187987B64);
      case 3:
        int v22 = 0;
        goto LABEL_6;
      case 4:
        int v19 = 0;
LABEL_6:
        int v21 = 1;
        break;
      default:
        break;
    }
    switch(v11)
    {
      case 1:
      case 2:
        goto LABEL_29;
      case 3:
        if (v5 == v13) {
          int v23 = v22;
        }
        else {
          int v23 = 1;
        }
        goto LABEL_17;
      case 4:
        if (v5 == v13) {
          int v23 = v19;
        }
        else {
          int v23 = 1;
        }
        goto LABEL_17;
      default:
        if (v5 == v13) {
          int v23 = v21;
        }
        else {
          int v23 = 1;
        }
LABEL_17:
        if (v4 != v12) {
          int v23 = 1;
        }
        if (v6 != v14) {
          int v23 = 1;
        }
        if (v7 != v15) {
          int v23 = 1;
        }
        if ((v23 | v10 | v18)) {
          uint64_t result = (v23 ^ (v23 | v10)) & v18;
        }
        else {
          uint64_t result = v9 == v17 && v8 == v16;
        }
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event.Kind and conformance SpatialEventCollection.Event.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.Kind and conformance SpatialEventCollection.Event.Kind;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.Kind and conformance SpatialEventCollection.Event.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.Kind and conformance SpatialEventCollection.Event.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event.Phase and conformance SpatialEventCollection.Event.Phase()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.Phase and conformance SpatialEventCollection.Event.Phase;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.Phase and conformance SpatialEventCollection.Event.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.Phase and conformance SpatialEventCollection.Event.Phase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event.InputDevicePose and conformance SpatialEventCollection.Event.InputDevicePose()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.InputDevicePose and conformance SpatialEventCollection.Event.InputDevicePose;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.InputDevicePose and conformance SpatialEventCollection.Event.InputDevicePose)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.InputDevicePose and conformance SpatialEventCollection.Event.InputDevicePose);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event and conformance SpatialEventCollection.Event()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Event and conformance SpatialEventCollection.Event;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event and conformance SpatialEventCollection.Event)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event and conformance SpatialEventCollection.Event);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection and conformance SpatialEventCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in SpatialEventCollection()
{
  return lazy protocol witness table accessor for type DefaultIndices<SpatialEventCollection> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<SpatialEventCollection> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<SpatialEventCollection>, MEMORY[0x1E4FBAF10]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SpatialEventCollection()
{
  return lazy protocol witness table accessor for type DefaultIndices<SpatialEventCollection> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<SpatialEventCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<SpatialEventCollection>, MEMORY[0x1E4FBC320]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<SpatialEventCollection> and conformance DefaultIndices<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DefaultIndices<SpatialEventCollection>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DefaultIndices<SpatialEventCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type SpatialEventCollection and conformance SpatialEventCollection();
    unint64_t v7 = a3(a1, &type metadata for SpatialEventCollection, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Iterator and conformance SpatialEventCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventCollection.Iterator and conformance SpatialEventCollection.Iterator;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Iterator and conformance SpatialEventCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Iterator and conformance SpatialEventCollection.Iterator);
  }
  return result;
}

__n128 sub_187988098@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 56);
  *a2 = result;
  a2[1].n128_u8[0] = v2;
  return result;
}

__n128 sub_1879880AC(__n128 *a1, uint64_t a2)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(a2 + 56) = *a1;
  *(unsigned char *)(a2 + 72) = v2;
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection()
{
  return &type metadata for SpatialEventCollection;
}

uint64_t getEnumTagSinglePayload for SpatialEventCollection.Event(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialEventCollection.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4outlined consume of Text?(0, 0, 0, 0) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event()
{
  return &type metadata for SpatialEventCollection.Event;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event.ID()
{
  return &type metadata for SpatialEventCollection.Event.ID;
}

unsigned char *storeEnumTagSinglePayload for SpatialEventCollection.Event.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187988258);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event.Kind()
{
  return &type metadata for SpatialEventCollection.Event.Kind;
}

unsigned char *storeEnumTagSinglePayload for SpatialEventCollection.Event.Phase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18798835CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event.Phase()
{
  return &type metadata for SpatialEventCollection.Event.Phase;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event.InputDevicePose()
{
  return &type metadata for SpatialEventCollection.Event.InputDevicePose;
}

uint64_t destroy for SpatialEventCollection.Iterator()
{
  return outlined consume of Set<UIPress>.Iterator._Variant();
}

void *initializeWithCopy for SpatialEventCollection.Iterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

void *assignWithCopy for SpatialEventCollection.Iterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of Set<UIPress>.Iterator._Variant();
  return a1;
}

uint64_t assignWithTake for SpatialEventCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v3;
  outlined consume of Set<UIPress>.Iterator._Variant();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialEventCollection.Iterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SpatialEventCollection.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Iterator()
{
  return &type metadata for SpatialEventCollection.Iterator;
}

uint64_t destroy for SpatialEventCollection.Index(uint64_t a1)
{
  return outlined consume of Set<UIOpenURLContext>.Index._Variant(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for SpatialEventCollection.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SpatialEventCollection.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Set<UIOpenURLContext>.Index._Variant(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SpatialEventCollection.Index(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Set<UIOpenURLContext>.Index._Variant(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Index()
{
  return &type metadata for SpatialEventCollection.Index;
}

uint64_t outlined assign with take of NavigationColumnState(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of OrnamentPresentation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of TouchEvent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandGroupPlacementBox(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ScrollViewCommitInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of InspectorStorage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of AlertStorage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of TabEntry(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ListRowConfiguration.background.getter()
{
  return swift_retain();
}

uint64_t ListRowConfiguration.background.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ListRowConfiguration.background.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 ListRowConfiguration.insets.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 8);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

uint64_t ListRowConfiguration.insets.setter(uint64_t a1)
{
  return outlined init with take of EdgeInsets?(a1, v1 + 8);
}

uint64_t (*ListRowConfiguration.insets.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for ListRowConfiguration.onMove : ListRowConfiguration@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  char v3 = *(uint64_t (**)(uint64_t, void *))(result + 48);
  if ((unint64_t)v3 > 1)
  {
    uint64_t v5 = *(void *)(result + 56);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    *(void *)(v4 + 24) = v5;
    __n128 result = outlined copy of AppIntentExecutor?((uint64_t)v3);
    char v3 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ();
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ListRowConfiguration.onMove : ListRowConfiguration(uint64_t a1, uint64_t a2)
{
  char v3 = *(uint64_t (**)())a1;
  if (*(void *)a1 && v3 != (uint64_t (*)())1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    *(void *)(v4 + 24) = v5;
    outlined copy of AppIntentExecutor?((uint64_t)v3);
    char v3 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @in_guaranteed Int) -> (@out ())partial apply;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe(*(void *)(a2 + 48));
  *(void *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v4;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @in_guaranteed Int) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4 = a2;
  return a3(a1, &v4);
}

uint64_t ListRowConfiguration.onMove.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ())??(v1);
  return v1;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ())??(uint64_t result)
{
  if (result != 1) {
    return outlined copy of AppIntentExecutor?(result);
  }
  return result;
}

uint64_t ListRowConfiguration.onMove.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe(*(void *)(v2 + 48));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*ListRowConfiguration.onMove.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ListRowConfiguration.onMoveDisabled.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t ListRowConfiguration.onMoveDisabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 64) = result;
  return result;
}

uint64_t (*ListRowConfiguration.onMoveDisabled.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void ListRowConfiguration.sectionSpacing.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 80);
  char v3 = *(unsigned char *)(v1 + 81);
  *(void *)a1 = *(void *)(v1 + 72);
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
}

uint64_t ListRowConfiguration.sectionSpacing.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  char v3 = *(unsigned char *)(result + 9);
  *(void *)(v1 + 72) = *(void *)result;
  *(unsigned char *)(v1 + 8outlined consume of Text?(0, 0, 0, 0) = v2;
  *(unsigned char *)(v1 + 81) = v3;
  return result;
}

uint64_t (*ListRowConfiguration.sectionSpacing.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ContainerValues.listRowConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((void)v7)
  {
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = v7;
    uint64_t v5 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @in_guaranteed Transaction) -> (@out ());
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe(0);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
  *(void *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = v10;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v4;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v3;
  *(unsigned char *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = BYTE8(v7);
  *(unsigned char *)(a1 + 81) = BYTE9(v7);
  return result;
}

uint64_t sub_1879890D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for ListRowConfiguration(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 48) >= 2uLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ListRowConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = (_OWORD *)(a2 + 48);
  unint64_t v5 = *(void *)(a2 + 48);
  swift_retain();
  if (v5 > 1)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v5;
    *(void *)(a1 + 56) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *v4;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for ListRowConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  unint64_t v7 = *(void *)(a2 + 48);
  if (v6 == 1)
  {
    if (v7 >= 2) {
      goto LABEL_11;
    }
  }
  else if (v7 == 1)
  {
    outlined destroy of (@escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ())?(a1 + 48);
  }
  else if (v6)
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v8;
      swift_retain();
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v7)
  {
LABEL_11:
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v9;
    swift_retain();
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_12:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v10;
  return a1;
}

uint64_t outlined destroy of (@escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ())?(uint64_t a1)
{
  type metadata accessor for (())?(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for ListRowConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  unint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 40);
  if (v5 == 1)
  {
    if (v4 >= 2) {
      goto LABEL_11;
    }
  }
  else if (v4 == 1)
  {
    outlined destroy of (@escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ())?(a1 + 48);
  }
  else if (v5)
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v4;
      *(void *)(a1 + 56) = v6;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v4)
  {
LABEL_11:
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = v7;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_12:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRowConfiguration(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 82)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRowConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 8outlined consume of Text?(0, 0, 0, 0) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 82) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowConfiguration()
{
  return &type metadata for ListRowConfiguration;
}

void __swiftcall WindowMenuBarExtraStyle.init()()
{
}

void WindowMenuBarExtraStyle._makeMenuBarExtra(_:)()
{
}

void static MenuBarExtraStyle<>.window.getter()
{
}

ValueMetadata *type metadata accessor for WindowMenuBarExtraStyle()
{
  return &type metadata for WindowMenuBarExtraStyle;
}

uint64_t LinearProgressViewStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t LinearProgressViewStyle.init(tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = KeyPath;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = a1;
  return result;
}

uint64_t LinearProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *(_OWORD *)(v2 + 16);
  v8[0] = *(_OWORD *)v2;
  v8[1] = v5;
  uint64_t v9 = *(void *)(v2 + 32);
  *(void *)a2 = static HorizontalAlignment.leading.getter();
  *(void *)(a2 + 8) = 0x4010000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>();
  return closure #1 in LinearProgressViewStyle.makeBody(configuration:)((uint64_t)v8, a1, (unsigned char *)(a2 + *(int *)(v6 + 44)));
}

uint64_t closure #1 in LinearProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v42 - v10;
  outlined retain of LinearProgressViewStyle(a1);
  static Semantics.v5.getter();
  char v12 = isLinkedOnOrAfter(_:)();
  uint64_t v48 = a3;
  uint64_t v49 = v8;
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = *(unsigned __int8 *)(a1 + 24);
    outlined retain of LinearProgressViewStyle(a1);
    outlined copy of Environment<Bool>.Content(v13, v14);
    int v15 = specialized Environment.wrappedValue.getter(v13, v14);
    outlined consume of Environment<Bool?>.Content(v13, v14);
    outlined release of LinearProgressViewStyle(a1);
    outlined release of LinearProgressViewStyle(a1);
    if (v15 == 2)
    {
      int v16 = 0;
      int v17 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    outlined release of LinearProgressViewStyle(a1);
  }
  int v17 = 0;
  int v16 = *(unsigned __int8 *)(a2 + *(int *)(type metadata accessor for ProgressViewStyleConfiguration(0) + 28));
LABEL_6:
  long long v18 = *(_OWORD *)(a1 + 16);
  long long v55 = *(_OWORD *)a1;
  long long v56 = v18;
  uint64_t v57 = *(void *)(a1 + 32);
  LinearProgressViewStyle.progressBar(configuration:)(a2, (uint64_t)v11);
  outlined retain of LinearProgressViewStyle(a1);
  static Semantics.v5.getter();
  char v19 = isLinkedOnOrAfter(_:)();
  int v46 = v16;
  int v47 = v17;
  if ((v19 & 1) == 0)
  {
    outlined release of LinearProgressViewStyle(a1);
    goto LABEL_10;
  }
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(unsigned __int8 *)(a1 + 24);
  outlined retain of LinearProgressViewStyle(a1);
  outlined copy of Environment<Bool>.Content(v20, v21);
  int v22 = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool?>.Content(v20, v21);
  outlined release of LinearProgressViewStyle(a1);
  outlined release of LinearProgressViewStyle(a1);
  if (v22 != 2)
  {
LABEL_10:
    char v50 = *(unsigned char *)(a2 + *(int *)(type metadata accessor for ProgressViewStyleConfiguration(0) + 32));
    static Color.secondary.getter();
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?();
    View.defaultForegroundColor(_:)();
    swift_release();
    char v28 = v55;
    uint64_t v29 = *((void *)&v55 + 1);
    uint64_t v30 = v56;
    uint64_t v31 = static Font.caption.getter();
    uint64_t KeyPath = swift_getKeyPath();
    char v50 = v28;
    uint64_t v51 = v29;
    uint64_t v52 = v30;
    uint64_t v53 = KeyPath;
    uint64_t v54 = v31;
    type metadata accessor for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    View.monospacedDigit()();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v45 = v55;
    uint64_t v23 = *((void *)&v56 + 1);
    uint64_t v43 = v56;
    uint64_t v44 = *((void *)&v55 + 1);
    uint64_t v24 = v57;
    uint64_t v25 = v58;
    uint64_t v26 = v59;
    uint64_t v27 = v60;
    goto LABEL_11;
  }
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
LABEL_11:
  uint64_t v33 = (uint64_t)v11;
  uint64_t v34 = (uint64_t)v49;
  outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>((uint64_t)v11, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>);
  char v35 = v48;
  *uint64_t v48 = v46;
  v35[1] = v47;
  type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)();
  uint64_t v37 = v36;
  outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(v34, (uint64_t)&v35[*(int *)(v36 + 48)], (uint64_t (*)(void))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>);
  double v38 = (uint64_t *)&v35[*(int *)(v37 + 64)];
  uint64_t v40 = v44;
  uint64_t v39 = v45;
  *double v38 = v45;
  v38[1] = v40;
  v38[2] = v43;
  v38[3] = v23;
  v38[4] = v24;
  v38[5] = v25;
  v38[6] = v26;
  v38[7] = v27;
  outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?(v39, v40);
  outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(v33);
  outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?(v39, v40);
  return outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(v34);
}

uint64_t LinearProgressViewStyle.progressBar(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v39 = type metadata accessor for LinearUIKitProgressView();
  MEMORY[0x1F4188790](v39);
  uint64_t v38 = (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v37 = (uint64_t)&v32 - v6;
  uint64_t v7 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v35 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v33 = type metadata accessor for ArchivableLinearProgressView(0);
  MEMORY[0x1F4188790](v33);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  int v16 = (char *)&v32 - v15;
  uint64_t v17 = *(void *)v2;
  uint64_t v18 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v19 = *(void *)(v2 + 16);
  uint64_t v20 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v21 = *(void *)(v2 + 32);
  uint64_t v34 = a1;
  outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(a1, (uint64_t)v11, type metadata accessor for ProgressViewStyleConfiguration);
  outlined copy of Environment<Color?>.Content(v17, v18);
  outlined copy of Environment<Bool>.Content(v19, v20);
  if (v21)
  {
    swift_retain();
    uint64_t v22 = v21;
  }
  else
  {
    outlined copy of Environment<Color?>.Content(v17, v18);
    uint64_t v22 = specialized Environment.wrappedValue.getter(v17, v18);
    outlined consume of Environment<Color?>.Content(v17, v18);
  }
  swift_retain();
  outlined consume of Environment<Color?>.Content(v17, v18);
  outlined consume of Environment<Bool?>.Content(v19, v20);
  swift_release();
  outlined init with take of ProgressViewStyleConfiguration((uint64_t)v11, (uint64_t)v13, type metadata accessor for ProgressViewStyleConfiguration);
  *(void *)&v13[*(int *)(v33 + 20)] = v22;
  outlined init with take of ProgressViewStyleConfiguration((uint64_t)v13, (uint64_t)v16, type metadata accessor for ArchivableLinearProgressView);
  uint64_t v23 = (uint64_t)v16;
  uint64_t v24 = v36;
  outlined init with take of ProgressViewStyleConfiguration(v23, v36, type metadata accessor for ArchivableLinearProgressView);
  uint64_t v25 = v35;
  outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(v34, v35, type metadata accessor for ProgressViewStyleConfiguration);
  outlined copy of Environment<Color?>.Content(v17, v18);
  outlined copy of Environment<Bool>.Content(v19, v20);
  swift_retain();
  if (!v21)
  {
    outlined copy of Environment<Color?>.Content(v17, v18);
    uint64_t v21 = specialized Environment.wrappedValue.getter(v17, v18);
    outlined consume of Environment<Color?>.Content(v17, v18);
  }
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>();
  uint64_t v27 = v24 + *(int *)(v26 + 52);
  swift_retain();
  outlined consume of Environment<Color?>.Content(v17, v18);
  outlined consume of Environment<Bool?>.Content(v19, v20);
  swift_release();
  uint64_t v28 = v38;
  outlined init with take of ProgressViewStyleConfiguration(v25, v38, type metadata accessor for ProgressViewStyleConfiguration);
  *(void *)(v28 + *(int *)(v39 + 20)) = v21;
  uint64_t v29 = v28;
  uint64_t v30 = v37;
  outlined init with take of ProgressViewStyleConfiguration(v29, v37, (uint64_t (*)(void))type metadata accessor for LinearUIKitProgressView);
  return outlined init with take of ProgressViewStyleConfiguration(v30, v27, (uint64_t (*)(void))type metadata accessor for LinearUIKitProgressView);
}

uint64_t protocol witness for ProgressViewStyle.makeBody(configuration:) in conformance LinearProgressViewStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *(_OWORD *)(v2 + 16);
  v8[0] = *(_OWORD *)v2;
  v8[1] = v5;
  uint64_t v9 = *(void *)(v2 + 32);
  *(void *)a2 = static HorizontalAlignment.leading.getter();
  *(void *)(a2 + 8) = 0x4010000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>();
  return closure #1 in LinearProgressViewStyle.makeBody(configuration:)((uint64_t)v8, a1, (unsigned char *)(a2 + *(int *)(v6 + 44)));
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>)
  {
    type metadata accessor for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>(255, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?), MEMORY[0x1E4F41850]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>);
    }
  }
}

void type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)()
{
  if (!lazy cache variable for type metadata for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?))
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_1(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label??, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label?, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, MEMORY[0x1E4FBB718]);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>();
    type metadata accessor for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?));
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>();
    type metadata accessor for ArchivableLinearProgressView(255);
    type metadata accessor for LinearUIKitProgressView();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (void (*)(uint64_t))type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>);
    }
  }
}

void type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>()
{
  if (!lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>)
  {
    unint64_t v0 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>);
    }
  }
}

void type metadata accessor for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t (*)(uint64_t))type metadata accessor for [AnyFontModifier], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in LinearProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for LinearProgressViewStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearProgressViewStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t sub_18798A44C()
{
  return lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>);
}

uint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>)
  {
    type metadata accessor for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>(255, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>(255, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t outlined retain of LinearProgressViewStyle(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  outlined copy of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  swift_retain();
  return a1;
}

uint64_t outlined release of LinearProgressViewStyle(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  outlined consume of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool?>.Content(v2, v3);
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGACyxGAA04ViewF0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGACyxGAA04ViewF0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(uint64_t a1)
{
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void specialized MutableCollection<>.sort(by:)(char **a1, char a2)
{
  int v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  }
  uint64_t v5 = *((void *)v4 + 2);
  v6[0] = (uint64_t)(v4 + 32);
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6, a2 & 1);
  *a1 = v4;
}

void PagingScrollTargetBehavior.decelerationRate(context:)(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t PagingScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, long long *a2)
{
  long long v3 = a2[11];
  *(_OWORD *)&v62[96] = a2[10];
  *(_OWORD *)&v62[112] = v3;
  long long v4 = a2[13];
  long long v63 = a2[12];
  long long v64 = v4;
  long long v5 = a2[7];
  *(_OWORD *)&v62[32] = a2[6];
  *(_OWORD *)&v62[48] = v5;
  long long v6 = a2[9];
  *(_OWORD *)&v62[64] = a2[8];
  *(_OWORD *)&v62[80] = v6;
  long long v7 = a2[3];
  long long v60 = a2[2];
  long long v61 = v7;
  long long v8 = a2[5];
  *(_OWORD *)uint64_t v62 = a2[4];
  *(_OWORD *)&v62[16] = v8;
  long long v9 = a2[1];
  long long v58 = *a2;
  long long v59 = v9;
  specialized ScrollTargetBehavior.clampTarget(_:context:)(a1, (uint64_t)&v58);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  char v16 = *(unsigned char *)(a1 + 48);
  *(void *)&long long v37 = *(void *)a1;
  *((void *)&v37 + 1) = v11;
  *(void *)&long long v38 = v12;
  *((void *)&v38 + 1) = v13;
  *(void *)&long long v39 = v14;
  *((void *)&v39 + 1) = v15;
  LOBYTE(v4outlined consume of Text?(0, 0, 0, 0) = v16;
  uint64_t result = ScrollTarget.rect.getter();
  double v20 = v19;
  char v21 = v62[120];
  if ((v62[120] & 2) != 0)
  {
    double v22 = v18;
    long long v55 = *(_OWORD *)&v62[72];
    long long v56 = *(_OWORD *)&v62[88];
    long long v57 = *(_OWORD *)&v62[104];
    long long v51 = *(_OWORD *)&v62[8];
    long long v52 = *(_OWORD *)&v62[24];
    long long v53 = *(_OWORD *)&v62[40];
    long long v54 = *(_OWORD *)&v62[56];
    long long v41 = *(_OWORD *)&v62[72];
    long long v42 = *(_OWORD *)&v62[88];
    long long v43 = *(_OWORD *)&v62[104];
    long long v37 = *(_OWORD *)&v62[8];
    long long v38 = *(_OWORD *)&v62[24];
    long long v39 = *(_OWORD *)&v62[40];
    long long v40 = *(_OWORD *)&v62[56];
    ScrollGeometry.containerSize.getter();
    double v24 = v23;
    uint64_t result = ScrollGeometry.contentSize.getter();
    if (v22 > 0.0 && v22 < v25 - v24)
    {
      *(void *)&long long v51 = v10;
      *((void *)&v51 + 1) = v11;
      *(void *)&long long v52 = v12;
      *((void *)&v52 + 1) = v13;
      *(void *)&long long v53 = v14;
      *((void *)&v53 + 1) = v15;
      LOBYTE(v54) = v16;
      long long v47 = *(_OWORD *)&v62[96];
      long long v48 = *(_OWORD *)&v62[112];
      long long v49 = v63;
      long long v50 = v64;
      long long v43 = *(_OWORD *)&v62[32];
      long long v44 = *(_OWORD *)&v62[48];
      long long v45 = *(_OWORD *)&v62[64];
      long long v46 = *(_OWORD *)&v62[80];
      long long v39 = v60;
      long long v40 = v61;
      long long v41 = *(_OWORD *)v62;
      long long v42 = *(_OWORD *)&v62[16];
      long long v37 = v58;
      long long v38 = v59;
      uint64_t result = PagingScrollTargetBehavior.makeInfo(_:context:axis:)((uint64_t)&v51, (uint64_t)&v37, 1);
      if ((v28 & 1) == 0) {
        uint64_t result = specialized ScrollTargetBehavior.alignTarget(_:context:axis:itemInfo:)(a1, (uint64_t)&v58, 1, *(double *)&result, v26, v27);
      }
    }
  }
  if (v21)
  {
    long long v55 = *(_OWORD *)&v62[72];
    long long v56 = *(_OWORD *)&v62[88];
    long long v57 = *(_OWORD *)&v62[104];
    long long v51 = *(_OWORD *)&v62[8];
    long long v52 = *(_OWORD *)&v62[24];
    long long v53 = *(_OWORD *)&v62[40];
    long long v54 = *(_OWORD *)&v62[56];
    long long v41 = *(_OWORD *)&v62[72];
    long long v42 = *(_OWORD *)&v62[88];
    long long v43 = *(_OWORD *)&v62[104];
    long long v37 = *(_OWORD *)&v62[8];
    long long v38 = *(_OWORD *)&v62[24];
    long long v39 = *(_OWORD *)&v62[40];
    long long v40 = *(_OWORD *)&v62[56];
    ScrollGeometry.containerSize.getter();
    double v30 = v29;
    uint64_t result = ScrollGeometry.contentSize.getter();
    if (v20 > 0.0 && v20 < v31 - v30)
    {
      char v32 = *(unsigned char *)(a1 + 48);
      long long v33 = *(_OWORD *)(a1 + 16);
      long long v51 = *(_OWORD *)a1;
      long long v52 = v33;
      long long v53 = *(_OWORD *)(a1 + 32);
      LOBYTE(v54) = v32;
      long long v47 = *(_OWORD *)&v62[96];
      long long v48 = *(_OWORD *)&v62[112];
      long long v49 = v63;
      long long v50 = v64;
      long long v43 = *(_OWORD *)&v62[32];
      long long v44 = *(_OWORD *)&v62[48];
      long long v45 = *(_OWORD *)&v62[64];
      long long v46 = *(_OWORD *)&v62[80];
      long long v39 = v60;
      long long v40 = v61;
      long long v41 = *(_OWORD *)v62;
      long long v42 = *(_OWORD *)&v62[16];
      long long v37 = v58;
      long long v38 = v59;
      uint64_t result = PagingScrollTargetBehavior.makeInfo(_:context:axis:)((uint64_t)&v51, (uint64_t)&v37, 0);
      if ((v36 & 1) == 0) {
        return specialized ScrollTargetBehavior.alignTarget(_:context:axis:itemInfo:)(a1, (uint64_t)&v58, 0, *(double *)&result, v34, v35);
      }
    }
  }
  return result;
}

uint64_t PagingScrollTargetBehavior.makeInfo(_:context:axis:)(uint64_t a1, uint64_t a2, char a3)
{
  ScrollGeometry.containerSize.getter();
  double v5 = v4;
  double v7 = v6;
  ScrollTarget.rect.getter();
  double v9 = v8;
  double v11 = v10;
  ScrollTarget.rect.getter();
  if (a3) {
    double v12 = v7;
  }
  else {
    double v12 = v5;
  }
  if (a3) {
    double v13 = v11;
  }
  else {
    double v13 = v9;
  }
  return round(v13 / v12);
}

uint64_t protocol witness for ScrollTargetBehavior.updateTarget(_:context:) in conformance PagingScrollTargetBehavior(uint64_t a1, long long *a2)
{
  return PagingScrollTargetBehavior.updateTarget(_:context:)(a1, a2);
}

uint64_t protocol witness for ScrollTargetBehavior._updateEnvironment(_:context:) in conformance PagingScrollTargetBehavior(uint64_t a1)
{
  return PagingScrollTargetBehavior._updateEnvironment(_:context:)(a1);
}

uint64_t PagingScrollTargetBehavior._updateEnvironment(_:context:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4[80] = 3;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v4, (uint64_t)&v3);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v4);
}

void static ViewAlignedScrollTargetBehavior.LimitBehavior.alwaysByFew.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static ViewAlignedScrollTargetBehavior.LimitBehavior.alwaysByOne.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ViewAlignedScrollTargetBehavior.LimitBehavior.never.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void ViewAlignedScrollTargetBehavior.LimitBehavior.alwaysByOne.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t ViewAlignedScrollTargetBehavior.updateTarget(_:context:)(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  long long v4 = a2[11];
  *(_OWORD *)&v56[96] = a2[10];
  *(_OWORD *)&v56[112] = v4;
  long long v5 = a2[13];
  long long v57 = a2[12];
  long long v58 = v5;
  long long v6 = a2[7];
  *(_OWORD *)&v56[32] = a2[6];
  *(_OWORD *)&v56[48] = v6;
  long long v7 = a2[9];
  *(_OWORD *)&v56[64] = a2[8];
  *(_OWORD *)&v56[80] = v7;
  long long v8 = a2[3];
  long long v54 = a2[2];
  long long v55 = v8;
  long long v9 = a2[5];
  *(_OWORD *)long long v56 = a2[4];
  *(_OWORD *)&v56[16] = v9;
  long long v10 = a2[1];
  long long v52 = *a2;
  long long v53 = v10;
  if (v56[120] == 2)
  {
    int v11 = 0;
  }
  else
  {
    if (v56[120] != 1) {
      return result;
    }
    int v11 = 1;
  }
  if (v56[121] == 2 && *v2 != 2) {
    specialized ScrollTargetBehavior.clampTarget(_:context:)(result, (uint64_t)&v52);
  }
  ScrollTarget.rect.getter();
  double v13 = v12;
  double v15 = v14;
  long long v48 = *(_OWORD *)&v56[72];
  long long v49 = *(_OWORD *)&v56[88];
  long long v50 = *(_OWORD *)&v56[104];
  long long v44 = *(_OWORD *)&v56[8];
  long long v45 = *(_OWORD *)&v56[24];
  long long v46 = *(_OWORD *)&v56[40];
  long long v47 = *(_OWORD *)&v56[56];
  long long v34 = *(_OWORD *)&v56[72];
  long long v35 = *(_OWORD *)&v56[88];
  long long v36 = *(_OWORD *)&v56[104];
  long long v30 = *(_OWORD *)&v56[8];
  long long v31 = *(_OWORD *)&v56[24];
  long long v32 = *(_OWORD *)&v56[40];
  long long v33 = *(_OWORD *)&v56[56];
  ScrollGeometry.containerSize.getter();
  double v17 = v16;
  double v19 = v18;
  uint64_t result = ScrollGeometry.contentSize.getter();
  if (v11) {
    double v22 = v13;
  }
  else {
    double v22 = v15;
  }
  if (v11) {
    double v23 = v17;
  }
  else {
    double v23 = v19;
  }
  if (!v11) {
    double v20 = v21;
  }
  if (v22 > 0.0 && v22 < v20 - v23)
  {
    char v24 = *(unsigned char *)(v3 + 48);
    long long v25 = *(_OWORD *)(v3 + 16);
    long long v44 = *(_OWORD *)v3;
    long long v45 = v25;
    long long v46 = *(_OWORD *)(v3 + 32);
    LOBYTE(v47) = v24;
    long long v40 = *(_OWORD *)&v56[96];
    long long v41 = *(_OWORD *)&v56[112];
    long long v42 = v57;
    long long v43 = v58;
    long long v36 = *(_OWORD *)&v56[32];
    long long v37 = *(_OWORD *)&v56[48];
    long long v38 = *(_OWORD *)&v56[64];
    long long v39 = *(_OWORD *)&v56[80];
    long long v32 = v54;
    long long v33 = v55;
    long long v34 = *(_OWORD *)v56;
    long long v35 = *(_OWORD *)&v56[16];
    long long v30 = v52;
    long long v31 = v53;
    ViewAlignedScrollTargetBehavior.makeTarget(_:context:)((uint64_t)&v44, &v30, (uint64_t)v51);
    uint64_t v26 = v51[0];
    uint64_t v27 = v51[1];
    uint64_t result = outlined init with take of CGRect?((uint64_t)v51, (uint64_t)&v30);
    if ((v32 & 1) == 0)
    {
      double v29 = (uint64_t (*)(long long *, void))ScrollTarget.rect.modify();
      if (v11) {
        *char v28 = v26;
      }
      else {
        v28[1] = v27;
      }
      return v29(&v44, 0);
    }
  }
  return result;
}

uint64_t ViewAlignedScrollTargetBehavior.makeTarget(_:context:)@<X0>(uint64_t result@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v87 = *(void *)result;
  uint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = *(void *)(result + 24);
  uint64_t v89 = *(void *)(result + 40);
  uint64_t v90 = *(void *)(result + 32);
  char v88 = *(unsigned char *)(result + 48);
  long long v7 = a2[5];
  *(_OWORD *)uint64_t v127 = a2[4];
  *(_OWORD *)&v127[16] = v7;
  long long v8 = a2[3];
  long long v125 = a2[2];
  long long v126 = v8;
  long long v9 = a2[9];
  *(_OWORD *)&v127[64] = a2[8];
  *(_OWORD *)&v127[80] = v9;
  long long v10 = a2[7];
  *(_OWORD *)&v127[32] = a2[6];
  *(_OWORD *)&v127[48] = v10;
  long long v11 = a2[13];
  long long v128 = a2[12];
  long long v129 = v11;
  long long v12 = a2[11];
  *(_OWORD *)&v127[96] = a2[10];
  *(_OWORD *)&v127[112] = v12;
  long long v13 = a2[1];
  long long v123 = *a2;
  long long v124 = v13;
  uint64_t v14 = v128;
  uint64_t v130 = v128;
  uint64_t v86 = *(void *)(v128 + 16);
  if (!v86)
  {
    uint64_t result = MEMORY[0x18C112B90](0xD000000000000075, 0x800000018832D680);
    LOBYTE(v15) = 1;
    CGFloat x = 0.0;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
    goto LABEL_51;
  }
  int v15 = 1;
  uint64_t v78 = v6;
  uint64_t v79 = v5;
  if (v127[120] == 2)
  {
    uint64_t v76 = a3;
    goto LABEL_7;
  }
  CGFloat x = 0.0;
  CGFloat y = 0.0;
  CGFloat width = 0.0;
  CGFloat height = 0.0;
  if (v127[120] != 1)
  {
LABEL_51:
    *(CGFloat *)uint64_t v3 = x;
    *(CGFloat *)(v3 + 8) = y;
    *(CGFloat *)(v3 + 16) = width;
    *(CGFloat *)(v3 + 24) = height;
    *(unsigned char *)(v3 + 32) = v15;
    return result;
  }
  uint64_t v76 = a3;
  int v15 = 0;
  uint64_t v5 = v79;
LABEL_7:
  EnvironmentValues.layoutDirection.getter();
  int v20 = v131;
  long long v135 = *(_OWORD *)&v127[72];
  long long v136 = *(_OWORD *)&v127[88];
  long long v137 = *(_OWORD *)&v127[104];
  long long v131 = *(_OWORD *)&v127[8];
  long long v132 = *(_OWORD *)&v127[24];
  long long v133 = *(_OWORD *)&v127[40];
  long long v134 = *(_OWORD *)&v127[56];
  long long v98 = *(_OWORD *)&v127[72];
  long long v99 = *(_OWORD *)&v127[88];
  long long v100 = *(_OWORD *)&v127[104];
  long long v94 = *(_OWORD *)&v127[8];
  long long v95 = *(_OWORD *)&v127[24];
  long long v96 = *(_OWORD *)&v127[40];
  long long v97 = *(_OWORD *)&v127[56];
  swift_bridgeObjectRetain();
  ScrollGeometry.containerSize.getter();
  if (!v15) {
    double v22 = v21;
  }
  uint64_t v116 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v85 = v128 + 32;
  double v84 = v22;
  double v82 = v22 * 1.1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v23 = 0;
  uint64_t v81 = v128;
  int v83 = v15;
  int v91 = v20;
  uint64_t v77 = v4;
  while (1)
  {
    if (v23 >= *(void *)(v14 + 16))
    {
      __break(1u);
      goto LABEL_53;
    }
    outlined init with copy of TableColumnList(v85 + 40 * v23, (uint64_t)v113);
    uint64_t v24 = v115;
    long long v25 = __swift_project_boxed_opaque_existential_1(v113, *(uint64_t *)&v114);
    MEMORY[0x1F4188790](v25);
    (*(void (**)(double (*)(uint64_t, uint64_t)))(v24 + 24))(partial apply for closure #1 in ViewAlignedScrollTargetBehavior.makeTarget(_:context:));
    uint64_t v26 = *(void *)&v114;
    uint64_t v27 = v115;
    __swift_project_boxed_opaque_existential_1(v113, *(uint64_t *)&v114);
    *(void *)&long long v108 = v87;
    *((void *)&v108 + 1) = v4;
    *(void *)&long long v109 = v5;
    *((void *)&v109 + 1) = v6;
    uint64_t v110 = v90;
    uint64_t v111 = v89;
    char v112 = v88;
    ScrollTarget.rect.getter();
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v27 + 32))(&v94, v26, v27);
    if (!*((void *)&v94 + 1)) {
      goto LABEL_11;
    }
    unint64_t v92 = v23;
    uint64_t v28 = v94;
    long long v29 = v97;
    long long v93 = v98;
    uint64_t v30 = v99;
    uint64_t v31 = *((void *)&v94 + 1);
    ScrollableCollectionSubview.frame.getter();
    double v119 = v34;
    double v120 = v35;
    double v121 = v32;
    double v122 = v33;
    double v36 = v15 ? v33 : v32;
    if (v36 <= v82) {
      break;
    }
    outlined consume of ScrollableCollectionSubview?(v28, v31);
    LOBYTE(v2outlined consume of Text?(0, 0, 0, 0) = v91;
    int v15 = v83;
    uint64_t v14 = v81;
    unint64_t v23 = v92;
LABEL_11:
    ++v23;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
    if (v23 == v86)
    {
      outlined release of _LazyLayout_Placements((uint64_t)&v130);
      *(void *)&long long v94 = v87;
      *((void *)&v94 + 1) = v4;
      *(void *)&long long v95 = v5;
      *((void *)&v95 + 1) = v6;
      *(void *)&long long v96 = v90;
      *((void *)&v96 + 1) = v89;
      LOBYTE(v97) = v88;
      ScrollTarget.rect.getter();
      long long v104 = *(_OWORD *)&v127[96];
      long long v105 = *(_OWORD *)&v127[112];
      long long v106 = v128;
      long long v107 = v129;
      long long v100 = *(_OWORD *)&v127[32];
      long long v101 = *(_OWORD *)&v127[48];
      long long v102 = *(_OWORD *)&v127[64];
      long long v103 = *(_OWORD *)&v127[80];
      long long v96 = v125;
      long long v97 = v126;
      long long v98 = *(_OWORD *)v127;
      long long v99 = *(_OWORD *)&v127[16];
      long long v94 = v123;
      long long v95 = v124;
      ViewAlignedScrollTargetBehavior.findClosestRect(rects:targetOffset:context:)(&v116, (uint64_t)&v94, (uint64_t)v117, v64, v65);
      CGFloat x = *(double *)v117;
      CGFloat y = *(double *)&v117[1];
      CGFloat width = *(double *)&v117[2];
      CGFloat height = *(double *)&v117[3];
      char v66 = v118;
      outlined init with take of CGRect?((uint64_t)v117, (uint64_t)v113);
      if (v115)
      {
        outlined release of _LazyLayout_Placements((uint64_t)&v130);
        uint64_t result = swift_bridgeObjectRelease();
        LOBYTE(v15) = v66;
      }
      else
      {
        CGFloat x = *(double *)v113;
        CGFloat y = *(double *)&v113[1];
        CGFloat width = *(double *)&v113[2];
        CGFloat height = v114;
        long long v98 = v135;
        long long v99 = v136;
        long long v100 = v137;
        long long v94 = v131;
        long long v95 = v132;
        long long v96 = v133;
        long long v97 = v134;
        uint64_t result = ScrollGeometry.containerSize.getter();
        if (!*(void *)(v14 + 16)) {
          goto LABEL_54;
        }
        double v69 = v67;
        double v70 = v68;
        outlined init with copy of TableColumnList(v85, (uint64_t)&v94);
        outlined release of _LazyLayout_Placements((uint64_t)&v130);
        if (*((void *)&v95 + 1))
        {
          outlined init with take of OptionalBinaryInteger(&v94, (uint64_t)&v108);
          uint64_t v71 = *((void *)&v109 + 1);
          uint64_t v72 = v110;
          __swift_project_boxed_opaque_existential_1(&v108, *((uint64_t *)&v109 + 1));
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, double, double, double, double))(v72 + 32))(&v94, v71, v72, 0.0, 0.0, v69, v70);
          uint64_t v73 = *((void *)&v94 + 1);
          if (*((void *)&v94 + 1))
          {
            char v74 = v20;
            uint64_t v75 = v94;
            validatedRect #1 (_:) in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)((uint64_t)&v94, v15, v74, (uint64_t)&v123, (uint64_t)&v119, v84);
            outlined init with take of CGRect?((uint64_t)&v119, (uint64_t)&v94);
            if ((v96 & 1) == 0)
            {
              v139.origin.CGFloat x = x;
              v139.origin.CGFloat y = y;
              v139.size.CGFloat width = width;
              v139.size.CGFloat height = height;
              CGRect v140 = CGRectOffset(v139, -*(double *)&v94, -*((double *)&v94 + 1));
              CGFloat x = v140.origin.x;
              CGFloat y = v140.origin.y;
              CGFloat width = v140.size.width;
              CGFloat height = v140.size.height;
            }
            outlined consume of ScrollableCollectionSubview?(v75, v73);
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v108);
        }
        else
        {
          outlined destroy of ScrollableCollection?((uint64_t)&v94);
        }
        uint64_t result = swift_bridgeObjectRelease();
        LOBYTE(v15) = 0;
      }
      uint64_t v3 = v76;
      goto LABEL_51;
    }
  }
  uint64_t v37 = v5;
  uint64_t v80 = v28;
  static CoordinateSpace.scrollViewContent.getter();
  long long v108 = v29;
  long long v109 = v93;
  uint64_t v110 = v30;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v94);
  long long v98 = v135;
  long long v99 = v136;
  long long v100 = v137;
  long long v94 = v131;
  long long v95 = v132;
  long long v96 = v133;
  long long v97 = v134;
  ScrollGeometry.contentSize.getter();
  double v39 = v119;
  double v40 = v120;
  double v41 = v121;
  double v42 = v122;
  if (v91)
  {
    double v43 = v38;
    double v44 = v119;
    CGFloat v45 = v120;
    CGFloat v46 = v121;
    CGFloat v47 = v122;
    double v39 = v43 - CGRectGetMaxX(*(CGRect *)(&v40 - 1));
  }
  else
  {
    CGFloat v47 = v122;
    CGFloat v46 = v121;
    CGFloat v45 = v120;
  }
  unint64_t v23 = v92;
  long long v48 = v116;
  LOBYTE(v2outlined consume of Text?(0, 0, 0, 0) = v91;
  if (!*((void *)v116 + 2)) {
    goto LABEL_33;
  }
  uint64_t v49 = *((void *)v116 + 2);
  CGFloat v50 = *((double *)v116 + 4);
  CGFloat v51 = *((double *)v116 + 5);
  CGFloat v53 = *((double *)v116 + 6);
  CGFloat v52 = *((double *)v116 + 7);
  swift_bridgeObjectRetain();
  v138.origin.CGFloat x = v50;
  v138.origin.CGFloat y = v51;
  v138.size.CGFloat width = v53;
  v138.size.CGFloat height = v52;
  v141.origin.CGFloat x = v39;
  CGFloat v54 = v45;
  v141.origin.CGFloat y = v45;
  CGFloat v55 = v46;
  v141.size.CGFloat width = v46;
  CGFloat v56 = v47;
  v141.size.CGFloat height = v47;
  if (CGRectEqualToRect(v138, v141))
  {
    swift_bridgeObjectRelease();
    outlined consume of ScrollableCollectionSubview?(v80, v31);
    uint64_t v14 = v81;
    uint64_t v4 = v77;
    uint64_t v6 = v78;
    uint64_t v5 = v79;
    int v15 = v83;
    goto LABEL_11;
  }
  uint64_t v4 = v77;
  uint64_t v6 = v78;
  uint64_t v5 = v79;
  if (v49 == 1) {
    goto LABEL_32;
  }
  v142.origin.CGFloat x = v39;
  v142.origin.CGFloat y = v54;
  v142.size.CGFloat width = v55;
  v142.size.CGFloat height = v56;
  uint64_t result = CGRectEqualToRect(*((CGRect *)v48 + 2), v142);
  LOBYTE(v2outlined consume of Text?(0, 0, 0, 0) = v91;
  if (result)
  {
    swift_bridgeObjectRelease();
    outlined consume of ScrollableCollectionSubview?(v80, v31);
    int v15 = v83;
    uint64_t v14 = v81;
    goto LABEL_11;
  }
  if (v49 == 2)
  {
LABEL_32:
    uint64_t v37 = v79;
    CGFloat v47 = v56;
    CGFloat v46 = v55;
    CGFloat v45 = v54;
    swift_bridgeObjectRelease();
LABEL_33:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48);
    }
    unint64_t v61 = *((void *)v48 + 2);
    unint64_t v60 = *((void *)v48 + 3);
    uint64_t v62 = v80;
    if (v61 >= v60 >> 1)
    {
      long long v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1, v48);
      uint64_t v62 = v80;
    }
    *((void *)v48 + 2) = v61 + 1;
    long long v63 = (double *)&v48[32 * v61];
    v63[4] = v39;
    v63[5] = v45;
    v63[6] = v46;
    v63[7] = v47;
    outlined consume of ScrollableCollectionSubview?(v62, v31);
    uint64_t v116 = v48;
    uint64_t v14 = v81;
    LOBYTE(v2outlined consume of Text?(0, 0, 0, 0) = v91;
    int v15 = v83;
    uint64_t v5 = v37;
    goto LABEL_11;
  }
  long long v57 = v48 + 120;
  uint64_t v58 = 2;
  while (1)
  {
    uint64_t v59 = v58 + 1;
    if (__OFADD__(v58, 1)) {
      break;
    }
    v143.origin.CGFloat x = v39;
    v143.origin.CGFloat y = v54;
    v143.size.CGFloat width = v55;
    v143.size.CGFloat height = v56;
    uint64_t result = CGRectEqualToRect(*(CGRect *)(v57 - 24), v143);
    if (result)
    {
      swift_bridgeObjectRelease();
      outlined consume of ScrollableCollectionSubview?(v80, v31);
      int v15 = v83;
      LOBYTE(v2outlined consume of Text?(0, 0, 0, 0) = v91;
      uint64_t v14 = v81;
      goto LABEL_11;
    }
    v57 += 32;
    ++v58;
    if (v59 == v49) {
      goto LABEL_32;
    }
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

void validatedRect #1 (_:) in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  *(void *)&long long v33 = *(void *)a1;
  *((void *)&v33 + 1) = v11;
  long long v17 = *(_OWORD *)(a1 + 32);
  long long v34 = *(_OWORD *)(a1 + 16);
  long long v35 = v17;
  *(void *)&long long v36 = v12;
  *((void *)&v36 + 1) = v13;
  *(void *)&long long v37 = v14;
  *((void *)&v37 + 1) = v15;
  *(void *)&long long v38 = v16;
  ScrollableCollectionSubview.frame.getter();
  v45.origin.CGFloat x = v20;
  v45.origin.CGFloat y = v21;
  v45.size.CGFloat width = v18;
  v45.size.CGFloat height = v19;
  if (a2) {
    double v22 = v19;
  }
  else {
    double v22 = v18;
  }
  if (v22 <= a6 * 1.1)
  {
    static CoordinateSpace.scrollViewContent.getter();
    uint64_t v40 = v12;
    uint64_t v41 = v13;
    uint64_t v42 = v14;
    uint64_t v43 = v15;
    uint64_t v44 = v16;
    CGRect.convert(to:transform:)();
    outlined destroy of CoordinateSpace((uint64_t)&v33);
    long long v26 = *(_OWORD *)(a4 + 120);
    long long v27 = *(_OWORD *)(a4 + 152);
    long long v37 = *(_OWORD *)(a4 + 136);
    long long v38 = v27;
    long long v39 = *(_OWORD *)(a4 + 168);
    long long v28 = *(_OWORD *)(a4 + 88);
    long long v33 = *(_OWORD *)(a4 + 72);
    long long v34 = v28;
    long long v35 = *(_OWORD *)(a4 + 104);
    long long v36 = v26;
    ScrollGeometry.contentSize.getter();
    if (a3)
    {
      CGFloat y = v45.origin.y;
      CGFloat width = v45.size.width;
      CGFloat height = v45.size.height;
      origin.CGFloat x = v29 - CGRectGetMaxX(v45);
      origin.CGFloat y = y;
      CGFloat v23 = width;
      CGFloat v24 = height;
    }
    else
    {
      CGPoint origin = v45.origin;
      CGFloat v23 = v45.size.width;
      CGFloat v24 = v45.size.height;
    }
  }
  else
  {
    CGFloat v23 = 0.0;
    CGFloat v24 = 0.0;
    CGPoint origin = (CGPoint)0;
  }
  *(CGPoint *)a5 = origin;
  *(CGFloat *)(a5 + 16) = v23;
  *(CGFloat *)(a5 + 24) = v24;
  *(unsigned char *)(a5 + 32) = v22 > a6 * 1.1;
}

double closure #1 in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)(uint64_t a1, double a2, uint64_t a3, char a4, char a5, uint64_t a6, char **a7)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)&long long v18 = *(void *)a1;
  *((void *)&v18 + 1) = v8;
  long long v10 = *(_OWORD *)(a1 + 32);
  long long v19 = *(_OWORD *)(a1 + 16);
  long long v20 = v10;
  uint64_t v21 = v9;
  long long v22 = *(_OWORD *)(a1 + 56);
  long long v23 = *(_OWORD *)(a1 + 72);
  validatedRect #1 (_:) in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)((uint64_t)&v18, a4 & 1, a5 & 1, a6, (uint64_t)v24, a2);
  outlined init with take of CGRect?((uint64_t)v24, (uint64_t)&v18);
  if ((v20 & 1) == 0)
  {
    long long v25 = v18;
    long long v26 = v19;
    uint64_t v12 = *a7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
      *a7 = v12;
    }
    unint64_t v15 = *((void *)v12 + 2);
    unint64_t v14 = *((void *)v12 + 3);
    if (v15 >= v14 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v15 + 1;
    uint64_t v16 = &v12[32 * v15];
    double result = *(double *)&v25;
    long long v17 = v26;
    *((_OWORD *)v16 + 2) = v25;
    *((_OWORD *)v16 + 3) = v17;
    *a7 = v12;
  }
  return result;
}

void ViewAlignedScrollTargetBehavior.findClosestRect(rects:targetOffset:context:)(char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v9 = *(double *)(a2 + 56);
  double v10 = *(double *)(a2 + 64);
  int v11 = *(unsigned __int8 *)(a2 + 184);
  int v12 = *(unsigned __int8 *)(a2 + 185);
  long long v13 = 0uLL;
  int v14 = 1;
  if (v11 != 2)
  {
    if (v11 != 1)
    {
      long long v41 = 0uLL;
      goto LABEL_48;
    }
    int v14 = 0;
  }
  specialized MutableCollection<>.sort(by:)(a1, v14);
  unint64_t v15 = *a1;
  uint64_t v16 = *((void *)*a1 + 2);
  if (!v16) {
    goto LABEL_26;
  }
  double v49 = a4;
  double v50 = a5;
  double v47 = v10;
  double v48 = v9;
  uint64_t v17 = (uint64_t)&v15[32 * v16 + 32];
  unint64_t v18 = *(void *)(v17 - 16);
  unint64_t v19 = *(void *)(v17 - 8);
  __C::CGRect v54 = CGRect.outset(bySize:)(*((CGSize *)v15 + 3));
  CGFloat x = v54.origin.x;
  CGFloat y = v54.origin.y;
  CGFloat width = v54.size.width;
  CGFloat height = v54.size.height;
  double MinX = CGRectGetMinX((CGRect)v54);
  v55.origin.CGFloat x = x;
  v55.origin.CGFloat y = y;
  v55.size.CGFloat width = width;
  v55.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v55);
  __C::CGRect v56 = CGRect.outset(bySize:)((CGSize)__PAIR128__(v19, v18));
  CGFloat v25 = v56.origin.x;
  CGFloat v26 = v56.origin.y;
  CGFloat v27 = v56.size.width;
  CGFloat v28 = v56.size.height;
  double MaxX = CGRectGetMaxX((CGRect)v56);
  v57.origin.CGFloat x = v25;
  v57.origin.CGFloat y = v26;
  v57.size.CGFloat width = v27;
  v57.size.CGFloat height = v28;
  double MaxY = CGRectGetMaxY(v57);
  if (v14) {
    double v31 = MinY;
  }
  else {
    double v31 = MinX;
  }
  if (v14) {
    double v32 = MaxY;
  }
  else {
    double v32 = MaxX;
  }
  if (v31 > v32)
  {
    __break(1u);
    goto LABEL_50;
  }
  double v33 = v14 ? v50 : v49;
  BOOL v34 = v31 > v33 || v33 > v32;
  if (v34
    || (int v52 = v12,
        unint64_t v35 = ViewAlignedScrollTargetBehavior.findClosestRectIndex(rects:targetOffset:context:)((uint64_t)v15),
        int v37 = v36,
        ScrollTarget.rect.getter(),
        uint64_t v38 = ViewAlignedScrollTargetBehavior.findClosestRectIndex(rects:targetOffset:context:)((uint64_t)v15),
        ((v37 | v39) & 1) != 0))
  {
LABEL_26:
    LOBYTE(v14) = 1;
    long long v41 = 0uLL;
    long long v13 = 0uLL;
LABEL_48:
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 16) = v41;
    *(unsigned char *)(a3 + 32) = v14;
    return;
  }
  if (v35 != v38)
  {
    double v40 = v48;
    goto LABEL_29;
  }
  double v40 = v48;
  if (v52 == 4)
  {
LABEL_29:
    if (v14) {
      goto LABEL_45;
    }
    int v42 = 0;
    goto LABEL_32;
  }
  if (v14)
  {
    if (v47 <= 0.0)
    {
      if (v47 >= 0.0) {
        goto LABEL_45;
      }
LABEL_40:
      uint64_t v43 = -1;
      goto LABEL_41;
    }
LABEL_39:
    uint64_t v43 = 1;
    goto LABEL_41;
  }
  int v42 = 1;
LABEL_32:
  EnvironmentValues.layoutDirection.getter();
  if (!v42) {
    goto LABEL_45;
  }
  if (v40 <= 0.0)
  {
    if (v40 >= 0.0) {
      goto LABEL_45;
    }
    if ((v53 & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (v53) {
    uint64_t v43 = -1;
  }
  else {
    uint64_t v43 = 1;
  }
LABEL_41:
  unint64_t v44 = ViewAlignedScrollTargetBehavior.findNextClosestRectIndex(index:delta:rects:axis:)(v35, v43, (uint64_t)v15, v14);
  if (v45) {
    goto LABEL_45;
  }
  if ((v44 & 0x8000000000000000) == 0)
  {
    if (v44 < *((void *)v15 + 2))
    {
LABEL_47:
      LOBYTE(v14) = 0;
      CGFloat v46 = &v15[32 * v44 + 32];
      long long v13 = *(_OWORD *)v46;
      long long v41 = *((_OWORD *)v46 + 1);
      goto LABEL_48;
    }
    __break(1u);
LABEL_45:
    if ((v35 & 0x8000000000000000) == 0)
    {
      unint64_t v44 = v35;
      if (v35 < *((void *)v15 + 2)) {
        goto LABEL_47;
      }
      goto LABEL_51;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  __break(1u);
}

uint64_t ViewAlignedScrollTargetBehavior.findClosestRectIndex(rects:targetOffset:context:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 <= 1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = swift_bridgeObjectRetain() + 72;
  for (uint64_t i = 1; i != v1; ++i)
  {
    distance(_:_:)();
    double v6 = v5;
    distance(_:_:)();
    if (v6 < v7) {
      uint64_t v2 = i;
    }
    v3 += 32;
  }
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t ViewAlignedScrollTargetBehavior.findNextClosestRectIndex(index:delta:rects:axis:)(unint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (!a2) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v4 = *(void *)(a3 + 16);
  if (v4 <= result)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v5 = a3 + 32 * result;
  double v6 = (double *)(v5 + 32);
  double v7 = (double *)(v5 + 40);
  if ((a4 & 1) == 0) {
    double v7 = v6;
  }
  BOOL v8 = __OFADD__(result, a2);
  result += a2;
  if (v8) {
    goto LABEL_20;
  }
  if (result >= v4) {
    return 0;
  }
  double v9 = *v7;
  uint64_t v10 = a3 + 32 * result + 40;
  while (1)
  {
    int v11 = (double *)(v10 - 8);
    if (a4) {
      int v11 = (double *)v10;
    }
    if (v9 != *v11) {
      return result;
    }
    unint64_t v12 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(1u);
      goto LABEL_18;
    }
    result += a2;
    v10 += 32 * a2;
    if (v12 >= v4) {
      return 0;
    }
  }
}

SwiftUI::ViewAlignedScrollTargetBehavior __swiftcall ViewAlignedScrollTargetBehavior.init(limit:)(SwiftUI::ViewAlignedScrollTargetBehavior limit)
{
  *unint64_t v1 = *(unsigned char *)limit.limitBehavior.role;
  return limit;
}

uint64_t AnyScrollTargetBehavior.base.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TableColumnList(v1, a1);
}

uint64_t AnyScrollTargetBehavior.base.setter(long long *a1)
{
  __swift_destroy_boxed_opaque_existential_1(v1);

  return outlined init with take of OptionalBinaryInteger(a1, v1);
}

uint64_t (*AnyScrollTargetBehavior.base.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AnyScrollTargetBehavior.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  double v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnyScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6);
}

uint64_t AnyScrollTargetBehavior._updateEnvironment(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, v5, v6);
}

uint64_t protocol witness for ScrollTargetBehavior.updateTarget(_:context:) in conformance AnyScrollTargetBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6);
}

uint64_t protocol witness for ScrollTargetBehavior._updateEnvironment(_:context:) in conformance AnyScrollTargetBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, v5, v6);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2)
{
  uint64_t v4 = a2 & 1;
  Swift::Int v5 = a1[1];
  Swift::Int v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0) {
      goto LABEL_139;
    }
    if (v5) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, v4);
    }
    return;
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_147;
  }
  Swift::Int v134 = v6;
  long long v131 = a1;
  if (v5 < 2)
  {
    CGRect v140 = (CGFloat *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v133 = MEMORY[0x1E4FBC860];
    if (v5 != 1)
    {
      unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_106:
      long long v123 = v12;
      if (v13 >= 2)
      {
        uint64_t v124 = *v131;
        do
        {
          unint64_t v125 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_134;
          }
          if (!v124) {
            goto LABEL_146;
          }
          long long v126 = v123;
          uint64_t v127 = *(void *)&v123[16 * v125 + 32];
          uint64_t v128 = *(void *)&v123[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((CGFloat *)(v124 + 32 * v127), (CGFloat *)(v124 + 32 * *(void *)&v123[16 * v13 + 16]), v124 + 32 * v128, v140, v4);
          if (v2) {
            break;
          }
          if (v128 < v127) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v126 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v126);
          }
          if (v125 >= *((void *)v126 + 2)) {
            goto LABEL_136;
          }
          long long v129 = &v126[16 * v125 + 32];
          *(void *)long long v129 = v127;
          *((void *)v129 + 1) = v128;
          unint64_t v130 = *((void *)v126 + 2);
          if (v13 > v130) {
            goto LABEL_137;
          }
          memmove(&v126[16 * v13 + 16], &v126[16 * v13 + 32], 16 * (v130 - v13));
          long long v123 = v126;
          *((void *)v126 + 2) = v130 - 1;
          unint64_t v13 = v130 - 1;
        }
        while (v130 > 2);
      }
LABEL_103:
      swift_bridgeObjectRelease();
      *(void *)(v133 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v8 = v7 >> 1;
    type metadata accessor for CGRect(0);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v8;
    uint64_t v133 = v9;
    CGRect v140 = (CGFloat *)(v9 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v132 = *a1 + 48;
  unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v135 = v5;
  uint64_t v139 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v5)
    {
      unint64_t v15 = (CGFloat *)(v11 + 32 * v10);
      CGFloat v16 = *v15;
      CGFloat v17 = v15[1];
      CGFloat v18 = v15[2];
      CGFloat v19 = v15[3];
      long long v20 = (CGFloat *)(v11 + 32 * v14);
      CGFloat v21 = *v20;
      CGFloat v22 = v20[1];
      CGFloat v23 = v20[2];
      CGFloat v24 = v20[3];
      v145.origin.CGFloat x = v16;
      v145.origin.CGFloat y = v17;
      v145.size.CGFloat width = v18;
      v145.size.CGFloat height = v19;
      CGFloat MinX = CGRectGetMinX(v145);
      v146.origin.CGFloat x = v16;
      v146.origin.CGFloat y = v17;
      v146.size.CGFloat width = v18;
      v146.size.CGFloat height = v19;
      double MinY = CGRectGetMinY(v146);
      v147.origin.CGFloat x = v21;
      v147.origin.CGFloat y = v22;
      v147.size.CGFloat width = v23;
      v147.size.CGFloat height = v24;
      double v26 = CGRectGetMinX(v147);
      v148.origin.CGFloat x = v21;
      v148.origin.CGFloat y = v22;
      v148.size.CGFloat width = v23;
      v148.size.CGFloat height = v24;
      double v27 = CGRectGetMinY(v148);
      CGFloat v28 = MinX;
      if (v4) {
        CGFloat v28 = MinY;
      }
      else {
        double v27 = v26;
      }
      double v137 = v27;
      double v138 = v28;
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v5)
      {
        double v29 = (CGFloat *)(v132 + 32 * v14);
        while (1)
        {
          CGFloat v30 = v29[2];
          CGFloat v31 = v29[3];
          CGFloat v32 = v29[4];
          CGFloat v33 = v29[5];
          CGFloat v34 = *(v29 - 2);
          CGFloat v35 = *(v29 - 1);
          CGFloat v36 = *v29;
          CGFloat v37 = v29[1];
          v149.origin.CGFloat x = v30;
          v149.origin.CGFloat y = v31;
          v149.size.CGFloat width = v32;
          v149.size.CGFloat height = v33;
          CGFloat v142 = CGRectGetMinX(v149);
          v150.origin.CGFloat x = v30;
          v150.origin.CGFloat y = v31;
          v150.size.CGFloat width = v32;
          v150.size.CGFloat height = v33;
          double v38 = CGRectGetMinY(v150);
          v151.origin.CGFloat x = v34;
          v151.origin.CGFloat y = v35;
          v151.size.CGFloat width = v36;
          v151.size.CGFloat height = v37;
          double v39 = CGRectGetMinX(v151);
          v152.origin.CGFloat x = v34;
          v152.origin.CGFloat y = v35;
          v152.size.CGFloat width = v36;
          v152.size.CGFloat height = v37;
          double v40 = CGRectGetMinY(v152);
          double v41 = v142;
          if (v4) {
            double v41 = v38;
          }
          else {
            double v40 = v39;
          }
          if (v138 < v137 == v41 >= v40) {
            break;
          }
          ++v10;
          v29 += 4;
          if (v5 == v10)
          {
            Swift::Int v10 = v5;
            break;
          }
        }
      }
      if (v138 < v137)
      {
        if (v10 < v14) {
          goto LABEL_140;
        }
        if (v14 < v10)
        {
          uint64_t v42 = 32 * v10;
          uint64_t v43 = 32 * v14;
          Swift::Int v44 = v10;
          Swift::Int v45 = v14;
          do
          {
            if (v45 != --v44)
            {
              if (!v11) {
                goto LABEL_145;
              }
              CGFloat v46 = (_OWORD *)(v11 + v43);
              uint64_t v47 = v11 + v42;
              long long v48 = *(_OWORD *)(v11 + v43);
              long long v49 = *(_OWORD *)(v11 + v43 + 16);
              long long v50 = *(_OWORD *)(v11 + v42 - 16);
              *CGFloat v46 = *(_OWORD *)(v11 + v42 - 32);
              v46[1] = v50;
              *(_OWORD *)(v47 - 32) = v48;
              *(_OWORD *)(v47 - 16) = v49;
            }
            ++v45;
            v42 -= 32;
            v43 += 32;
          }
          while (v45 < v44);
        }
      }
    }
    if (v10 < v5)
    {
      if (__OFSUB__(v10, v14)) {
        goto LABEL_138;
      }
      if (v10 - v14 < v134) {
        break;
      }
    }
LABEL_55:
    if (v10 < v14) {
      goto LABEL_133;
    }
    Swift::Int v68 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v70 = *((void *)v12 + 2);
    unint64_t v69 = *((void *)v12 + 3);
    unint64_t v13 = v70 + 1;
    if (v70 >= v69 >> 1) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v13;
    uint64_t v71 = v12 + 32;
    uint64_t v72 = &v12[16 * v70 + 32];
    *(void *)uint64_t v72 = v68;
    *((void *)v72 + 1) = v10;
    if (v70)
    {
      Swift::Int v144 = v10;
      while (1)
      {
        unint64_t v73 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v78 = &v71[16 * v13];
          uint64_t v79 = *((void *)v78 - 8);
          uint64_t v80 = *((void *)v78 - 7);
          BOOL v84 = __OFSUB__(v80, v79);
          uint64_t v81 = v80 - v79;
          if (v84) {
            goto LABEL_122;
          }
          uint64_t v83 = *((void *)v78 - 6);
          uint64_t v82 = *((void *)v78 - 5);
          BOOL v84 = __OFSUB__(v82, v83);
          uint64_t v76 = v82 - v83;
          char v77 = v84;
          if (v84) {
            goto LABEL_123;
          }
          unint64_t v85 = v13 - 2;
          uint64_t v86 = &v71[16 * v13 - 32];
          uint64_t v88 = *(void *)v86;
          uint64_t v87 = *((void *)v86 + 1);
          BOOL v84 = __OFSUB__(v87, v88);
          uint64_t v89 = v87 - v88;
          if (v84) {
            goto LABEL_125;
          }
          BOOL v84 = __OFADD__(v76, v89);
          uint64_t v90 = v76 + v89;
          if (v84) {
            goto LABEL_128;
          }
          if (v90 >= v81)
          {
            long long v108 = &v71[16 * v73];
            uint64_t v110 = *(void *)v108;
            uint64_t v109 = *((void *)v108 + 1);
            BOOL v84 = __OFSUB__(v109, v110);
            uint64_t v111 = v109 - v110;
            if (v84) {
              goto LABEL_132;
            }
            BOOL v101 = v76 < v111;
            goto LABEL_93;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v102 = *((void *)v12 + 4);
            uint64_t v103 = *((void *)v12 + 5);
            BOOL v84 = __OFSUB__(v103, v102);
            uint64_t v95 = v103 - v102;
            char v96 = v84;
            goto LABEL_87;
          }
          uint64_t v75 = *((void *)v12 + 4);
          uint64_t v74 = *((void *)v12 + 5);
          BOOL v84 = __OFSUB__(v74, v75);
          uint64_t v76 = v74 - v75;
          char v77 = v84;
        }
        if (v77) {
          goto LABEL_124;
        }
        unint64_t v85 = v13 - 2;
        int v91 = &v71[16 * v13 - 32];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v94 = __OFSUB__(v92, v93);
        uint64_t v95 = v92 - v93;
        char v96 = v94;
        if (v94) {
          goto LABEL_127;
        }
        long long v97 = &v71[16 * v73];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v84 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v84) {
          goto LABEL_130;
        }
        if (__OFADD__(v95, v100)) {
          goto LABEL_131;
        }
        if (v95 + v100 >= v76)
        {
          BOOL v101 = v76 < v100;
LABEL_93:
          if (v101) {
            unint64_t v73 = v85;
          }
          goto LABEL_95;
        }
LABEL_87:
        if (v96) {
          goto LABEL_126;
        }
        long long v104 = &v71[16 * v73];
        uint64_t v106 = *(void *)v104;
        uint64_t v105 = *((void *)v104 + 1);
        BOOL v84 = __OFSUB__(v105, v106);
        uint64_t v107 = v105 - v106;
        if (v84) {
          goto LABEL_129;
        }
        if (v107 < v95) {
          goto LABEL_14;
        }
LABEL_95:
        unint64_t v112 = v73 - 1;
        if (v73 - 1 >= v13)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        uint64_t v113 = v11;
        if (!v11) {
          goto LABEL_144;
        }
        double v114 = v12;
        uint64_t v115 = v4;
        uint64_t v116 = &v71[16 * v112];
        uint64_t v117 = *(void *)v116;
        char v118 = v71;
        unint64_t v119 = v73;
        double v120 = &v71[16 * v73];
        uint64_t v121 = *((void *)v120 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((CGFloat *)(v113 + 32 * *(void *)v116), (CGFloat *)(v113 + 32 * *(void *)v120), v113 + 32 * v121, v140, v115);
        if (v2) {
          goto LABEL_103;
        }
        if (v121 < v117) {
          goto LABEL_119;
        }
        if (v119 > *((void *)v114 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v116 = v117;
        *(void *)&v118[16 * v112 + 8] = v121;
        unint64_t v122 = *((void *)v114 + 2);
        if (v119 >= v122) {
          goto LABEL_121;
        }
        unint64_t v12 = v114;
        unint64_t v13 = v122 - 1;
        memmove(v120, v120 + 16, 16 * (v122 - 1 - v119));
        uint64_t v71 = v118;
        *((void *)v114 + 2) = v122 - 1;
        uint64_t v4 = v115;
        uint64_t v11 = v139;
        Swift::Int v10 = v144;
        if (v122 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v5 = v135;
    if (v10 >= v135) {
      goto LABEL_106;
    }
  }
  if (__OFADD__(v14, v134)) {
    goto LABEL_141;
  }
  if (v14 + v134 >= v5) {
    Swift::Int v51 = v5;
  }
  else {
    Swift::Int v51 = v14 + v134;
  }
  if (v51 >= v14)
  {
    if (v10 != v51)
    {
      uint64_t v52 = v11 + 32 * v10;
      Swift::Int v136 = v14;
      do
      {
        char v53 = (CGFloat *)(v11 + 32 * v10);
        CGFloat v54 = *v53;
        CGFloat v55 = v53[1];
        CGFloat v56 = v53[2];
        CGFloat v57 = v53[3];
        uint64_t v58 = (CGFloat *)v52;
        do
        {
          CGFloat v59 = *(v58 - 4);
          CGFloat v60 = *(v58 - 3);
          CGFloat v61 = *(v58 - 2);
          CGFloat v62 = *(v58 - 1);
          v153.origin.CGFloat x = v54;
          v153.origin.CGFloat y = v55;
          v153.size.CGFloat width = v56;
          v153.size.CGFloat height = v57;
          CGFloat v143 = CGRectGetMinX(v153);
          v154.origin.CGFloat x = v54;
          v154.origin.CGFloat y = v55;
          v154.size.CGFloat width = v56;
          v154.size.CGFloat height = v57;
          double v63 = CGRectGetMinY(v154);
          v155.origin.CGFloat x = v59;
          v155.origin.CGFloat y = v60;
          v155.size.CGFloat width = v61;
          v155.size.CGFloat height = v62;
          double v64 = CGRectGetMinX(v155);
          v156.origin.CGFloat x = v59;
          v156.origin.CGFloat y = v60;
          v156.size.CGFloat width = v61;
          v156.size.CGFloat height = v62;
          double v65 = CGRectGetMinY(v156);
          double v66 = v143;
          if (v4) {
            double v66 = v63;
          }
          else {
            double v65 = v64;
          }
          if (v66 >= v65) {
            break;
          }
          if (!v11) {
            goto LABEL_143;
          }
          CGFloat v54 = *v58;
          CGFloat v55 = v58[1];
          CGFloat v56 = v58[2];
          CGFloat v57 = v58[3];
          long long v67 = *((_OWORD *)v58 - 1);
          *(_OWORD *)uint64_t v58 = *((_OWORD *)v58 - 2);
          *((_OWORD *)v58 + 1) = v67;
          *(v58 - 3) = v55;
          *(v58 - 2) = v56;
          *(v58 - 1) = v57;
          *(v58 - 4) = v54;
          v58 -= 4;
          ++v14;
        }
        while (v10 != v14);
        ++v10;
        v52 += 32;
        Swift::Int v14 = v136;
      }
      while (v10 != v51);
      Swift::Int v10 = v51;
    }
    goto LABEL_55;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v9 = *a4;
    uint64_t v10 = *a4 + 32 * a3;
LABEL_5:
    uint64_t v11 = (CGFloat *)(v9 + 32 * v6);
    CGFloat v12 = *v11;
    CGFloat v13 = v11[1];
    CGFloat v14 = v11[2];
    CGFloat v15 = v11[3];
    uint64_t v16 = a1;
    CGFloat v17 = (CGFloat *)v10;
    while (1)
    {
      CGFloat v18 = *(v17 - 4);
      CGFloat v19 = *(v17 - 3);
      CGFloat v20 = *(v17 - 2);
      CGFloat v21 = *(v17 - 1);
      v28.origin.CGFloat x = v12;
      v28.origin.CGFloat y = v13;
      v28.size.CGFloat width = v14;
      v28.size.CGFloat height = v15;
      CGFloat MinX = CGRectGetMinX(v28);
      v29.origin.CGFloat x = v12;
      v29.origin.CGFloat y = v13;
      v29.size.CGFloat width = v14;
      v29.size.CGFloat height = v15;
      double MinY = CGRectGetMinY(v29);
      v30.origin.CGFloat x = v18;
      v30.origin.CGFloat y = v19;
      v30.size.CGFloat width = v20;
      v30.size.CGFloat height = v21;
      double v23 = CGRectGetMinX(v30);
      v31.origin.CGFloat x = v18;
      v31.origin.CGFloat y = v19;
      v31.size.CGFloat width = v20;
      v31.size.CGFloat height = v21;
      double v24 = CGRectGetMinY(v31);
      double v25 = MinX;
      if (a5) {
        double v25 = MinY;
      }
      else {
        double v24 = v23;
      }
      if (v25 >= v24)
      {
LABEL_4:
        ++v6;
        v10 += 32;
        if (v6 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v9) {
        break;
      }
      CGFloat v12 = *v17;
      CGFloat v13 = v17[1];
      CGFloat v14 = v17[2];
      CGFloat v15 = v17[3];
      long long v26 = *((_OWORD *)v17 - 1);
      *(_OWORD *)CGFloat v17 = *((_OWORD *)v17 - 2);
      *((_OWORD *)v17 + 1) = v26;
      *(v17 - 3) = v13;
      *(v17 - 2) = v14;
      *(v17 - 1) = v15;
      *(v17 - 4) = v12;
      v17 -= 4;
      if (v6 == ++v16) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(CGFloat *__src, CGFloat *a2, unint64_t a3, CGFloat *__dst, char a5)
{
  Swift::Int v5 = __dst;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v10 = (char *)a2 - (char *)__src;
  int64_t v11 = (char *)a2 - (char *)__src + 31;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v11 = (char *)a2 - (char *)__src;
  }
  uint64_t v12 = v11 >> 5;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 31;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 5;
  CGFloat v55 = __src;
  CGFloat v54 = __dst;
  if (v12 >= v14 >> 5)
  {
    if (v13 >= -31)
    {
      if (__dst != a2 || &a2[4 * v15] <= __dst) {
        memmove(__dst, a2, 32 * v15);
      }
      CGFloat v32 = &v5[4 * v15];
      char v53 = (char *)v32;
      CGFloat v55 = v7;
      if (v8 < v7 && v13 >= 32)
      {
        CGFloat v33 = (CGFloat *)(a3 - 32);
        CGFloat v34 = v7;
        while (1)
        {
          CGFloat v35 = v33 + 4;
          CGFloat v36 = *(v32 - 4);
          CGFloat v37 = *(v32 - 3);
          CGFloat v38 = *(v32 - 2);
          CGFloat v39 = *(v32 - 1);
          CGFloat v40 = *(v34 - 4);
          CGFloat v41 = *(v34 - 3);
          v34 -= 4;
          CGFloat v42 = v34[2];
          CGFloat v43 = v34[3];
          v60.origin.CGFloat x = v36;
          v60.origin.CGFloat y = v37;
          v60.size.CGFloat width = v38;
          v60.size.CGFloat height = v39;
          CGFloat MinX = CGRectGetMinX(v60);
          v61.origin.CGFloat x = v36;
          v61.origin.CGFloat y = v37;
          v61.size.CGFloat width = v38;
          v61.size.CGFloat height = v39;
          double MinY = CGRectGetMinY(v61);
          v62.origin.CGFloat x = v40;
          v62.origin.CGFloat y = v41;
          v62.size.CGFloat width = v42;
          v62.size.CGFloat height = v43;
          double v45 = CGRectGetMinX(v62);
          v63.origin.CGFloat x = v40;
          v63.origin.CGFloat y = v41;
          v63.size.CGFloat width = v42;
          v63.size.CGFloat height = v43;
          double v46 = CGRectGetMinY(v63);
          double v47 = MinX;
          if (a5) {
            double v47 = MinY;
          }
          else {
            double v46 = v45;
          }
          if (v47 >= v46)
          {
            char v53 = (char *)(v32 - 4);
            if (v35 < v32 || v33 >= v32 || v35 != v32)
            {
              long long v49 = *((_OWORD *)v32 - 1);
              *(_OWORD *)CGFloat v33 = *((_OWORD *)v32 - 2);
              *((_OWORD *)v33 + 1) = v49;
            }
            CGFloat v34 = v7;
            v32 -= 4;
            if (v7 <= v8) {
              goto LABEL_48;
            }
          }
          else
          {
            if (v35 != v7 || v33 >= v7)
            {
              long long v48 = *((_OWORD *)v34 + 1);
              *(_OWORD *)CGFloat v33 = *(_OWORD *)v34;
              *((_OWORD *)v33 + 1) = v48;
            }
            CGFloat v55 = v34;
            if (v34 <= v8) {
              goto LABEL_48;
            }
          }
          v33 -= 4;
          uint64_t v7 = v34;
          if (v32 <= v5) {
            goto LABEL_48;
          }
        }
      }
      goto LABEL_48;
    }
  }
  else if (v10 >= -31)
  {
    if (__dst != __src || &__src[4 * v12] <= __dst) {
      memmove(__dst, __src, 32 * v12);
    }
    uint64_t v16 = &v5[4 * v12];
    char v53 = (char *)v16;
    if ((unint64_t)v7 < a3 && v10 >= 32)
    {
      do
      {
        CGFloat v17 = *v7;
        CGFloat v18 = v7[1];
        CGFloat v19 = v7[2];
        CGFloat v20 = v7[3];
        CGFloat v21 = *v5;
        CGFloat v22 = v5[1];
        CGFloat v23 = v5[2];
        CGFloat v24 = v5[3];
        v56.origin.CGFloat x = *v7;
        v56.origin.CGFloat y = v18;
        v56.size.CGFloat width = v19;
        v56.size.CGFloat height = v20;
        CGFloat v51 = CGRectGetMinX(v56);
        v57.origin.CGFloat x = v17;
        v57.origin.CGFloat y = v18;
        v57.size.CGFloat width = v19;
        v57.size.CGFloat height = v20;
        double v25 = CGRectGetMinY(v57);
        v58.origin.CGFloat x = v21;
        v58.origin.CGFloat y = v22;
        v58.size.CGFloat width = v23;
        v58.size.CGFloat height = v24;
        double v26 = CGRectGetMinX(v58);
        v59.origin.CGFloat x = v21;
        v59.origin.CGFloat y = v22;
        v59.size.CGFloat width = v23;
        v59.size.CGFloat height = v24;
        double v27 = CGRectGetMinY(v59);
        double v28 = v51;
        if (a5) {
          double v28 = v25;
        }
        else {
          double v27 = v26;
        }
        if (v28 >= v27)
        {
          if (v8 != v5)
          {
            long long v31 = *((_OWORD *)v5 + 1);
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v5;
            *((_OWORD *)v8 + 1) = v31;
          }
          v5 += 4;
          CGFloat v54 = v5;
          CGRect v29 = v7;
        }
        else
        {
          CGRect v29 = v7 + 4;
          if (v8 < v7 || v8 >= v29 || v8 != v7)
          {
            long long v30 = *((_OWORD *)v7 + 1);
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
            *((_OWORD *)v8 + 1) = v30;
          }
        }
        v8 += 4;
        if (v5 >= v16) {
          break;
        }
        uint64_t v7 = v29;
      }
      while ((unint64_t)v29 < a3);
      CGFloat v55 = v8;
    }
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v55, (const void **)&v54, &v53);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ScrollTargetBehavior.clampTarget(_:context:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  long long v3 = *(_OWORD *)(a2 + 120);
  long long v4 = *(_OWORD *)(a2 + 152);
  long long v42 = *(_OWORD *)(a2 + 136);
  long long v43 = v4;
  long long v44 = *(_OWORD *)(a2 + 168);
  long long v5 = *(_OWORD *)(a2 + 88);
  long long v38 = *(_OWORD *)(a2 + 72);
  long long v39 = v5;
  long long v40 = *(_OWORD *)(a2 + 104);
  long long v41 = v3;
  char v6 = *(unsigned char *)(a2 + 184);
  if (v6)
  {
    uint64_t v7 = (long long *)(a2 + 72);
    char v8 = *(unsigned char *)(result + 48);
    long long v9 = *(_OWORD *)(result + 16);
    long long v31 = *(_OWORD *)result;
    long long v32 = v9;
    long long v33 = *(_OWORD *)(result + 32);
    LOBYTE(v34) = v8;
    ScrollTarget.rect.getter();
    double v11 = v10;
    long long v12 = v7[5];
    long long v35 = v7[4];
    long long v36 = v12;
    long long v37 = v7[6];
    long long v13 = v7[1];
    long long v31 = *v7;
    long long v32 = v13;
    long long v14 = v7[3];
    long long v33 = v7[2];
    long long v34 = v14;
    ScrollGeometry.containerSize.getter();
    double v16 = v11 - v15;
    if (v11 - v15 <= v11) {
      double v16 = v11;
    }
    double v17 = v11 + v15;
    if (v17 >= v16) {
      double v18 = v16;
    }
    else {
      double v18 = v17;
    }
    CGFloat v19 = (uint64_t (*)(long long *, void))ScrollTarget.rect.modify();
    *CGFloat v20 = v18;
    uint64_t result = v19(&v31, 0);
  }
  if ((v6 & 2) != 0)
  {
    char v21 = *(unsigned char *)(v2 + 48);
    long long v22 = *(_OWORD *)(v2 + 16);
    long long v31 = *(_OWORD *)v2;
    long long v32 = v22;
    long long v33 = *(_OWORD *)(v2 + 32);
    LOBYTE(v34) = v21;
    ScrollTarget.rect.getter();
    double v24 = v23;
    long long v35 = v42;
    long long v36 = v43;
    long long v37 = v44;
    long long v31 = v38;
    long long v32 = v39;
    long long v33 = v40;
    long long v34 = v41;
    ScrollGeometry.containerSize.getter();
    double v26 = v24 - v25;
    if (v24 - v25 <= v24) {
      double v26 = v24;
    }
    double v27 = v24 + v25;
    if (v27 >= v26) {
      double v28 = v26;
    }
    else {
      double v28 = v27;
    }
    CGRect v29 = (uint64_t (*)(long long *, void))ScrollTarget.rect.modify();
    *(double *)(v30 + 8) = v28;
    return v29(&v31, 0);
  }
  return result;
}

uint64_t specialized ScrollTargetBehavior.alignTarget(_:context:axis:itemInfo:)(uint64_t a1, uint64_t a2, char a3, double a4, double a5, double a6)
{
  double v7 = a5;
  double v10 = *(double *)(a2 + 56);
  if (*(unsigned char *)(a2 + 185) == 4)
  {
    if (a3) {
      goto LABEL_18;
    }
    BOOL v11 = 0;
    goto LABEL_5;
  }
  BOOL v11 = a4 == a5;
  if ((a3 & 1) == 0)
  {
LABEL_5:
    v25[0] = *(_OWORD *)(a2 + 208);
    EnvironmentValues.layoutDirection.getter();
    if (!v11) {
      goto LABEL_18;
    }
    if (v10 > 0.0)
    {
      double v12 = -1.0;
      if (v24) {
        goto LABEL_17;
      }
      goto LABEL_11;
    }
    if (v10 >= 0.0) {
      goto LABEL_18;
    }
    double v12 = 1.0;
    if (v24) {
      goto LABEL_17;
    }
LABEL_16:
    double v12 = -1.0;
    goto LABEL_17;
  }
  if (a4 != a5) {
    goto LABEL_18;
  }
  double v13 = *(double *)(a2 + 64);
  if (v13 <= 0.0)
  {
    if (v13 >= 0.0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_11:
  double v12 = 1.0;
LABEL_17:
  double v7 = v12 + v7;
LABEL_18:
  char v14 = *(unsigned char *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v15;
  void v25[2] = *(_OWORD *)(a1 + 32);
  char v26 = v14;
  ScrollTarget.rect.getter();
  if (a3) {
    double v16 = v17;
  }
  if (v7 < 0.0) {
    double v18 = v16;
  }
  else {
    double v18 = v7 * a6;
  }
  if (v7 >= 1.0)
  {
    EdgeInsets.originOffset.getter();
    if (a3) {
      double v19 = v20;
    }
    double v18 = v18 + v7 * (v19 * 0.5);
  }
  char v21 = (uint64_t (*)(_OWORD *, void))ScrollTarget.rect.modify();
  *(double *)(v22 + 8 * (a3 & 1)) = v18;
  return v21(v25, 0);
}

ValueMetadata *type metadata accessor for PagingScrollTargetBehavior()
{
  return &type metadata for PagingScrollTargetBehavior;
}

ValueMetadata *type metadata accessor for AnyScrollTargetBehavior()
{
  return &type metadata for AnyScrollTargetBehavior;
}

unsigned char *storeEnumTagSinglePayload for ViewAlignedScrollTargetBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18798D7F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewAlignedScrollTargetBehavior.LimitBehavior.Role and conformance ViewAlignedScrollTargetBehavior.LimitBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewAlignedScrollTargetBehavior.LimitBehavior.Role and conformance ViewAlignedScrollTargetBehavior.LimitBehavior.Role;
  if (!lazy protocol witness table cache variable for type ViewAlignedScrollTargetBehavior.LimitBehavior.Role and conformance ViewAlignedScrollTargetBehavior.LimitBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewAlignedScrollTargetBehavior.LimitBehavior.Role and conformance ViewAlignedScrollTargetBehavior.LimitBehavior.Role);
  }
  return result;
}

double partial apply for closure #1 in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)(a1, *(double *)(v2 + 24), a2, *(unsigned char *)(v2 + 16), *(unsigned char *)(v2 + 32), *(void *)(v2 + 40), *(char ***)(v2 + 48));
}

uint64_t outlined destroy of ScrollableCollection?(uint64_t a1)
{
  type metadata accessor for CGRect?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (void (*)(uint64_t))type metadata accessor for ScrollableCollection);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of ScrollableCollectionSubview?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL result;

  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  long long v9 = ~v5;
  uint64_t v10 = (v6 + 1) & v9;
  if (((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    return 0;
  }
  if (*(void *)(v8 + 8 * v10) == a1) {
    return 1;
  }
  unint64_t v11 = (v10 + 1) & v9;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v9;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(Swift::UInt a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    PresentationDetent.Identifier.hash(into:)((uint64_t)v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v9 = ~v7;
      BOOL v10 = a1 != 0;
      BOOL v11 = a2 != 0xC000000000000000 || a1 != 2;
      BOOL v12 = a2 != 0xC000000000000000 || a1 != 1;
      if (a2 != 0xC000000000000000) {
        BOOL v10 = 1;
      }
      unint64_t v13 = a2 & 0xC000000000000000;
      int v14 = a2 >> 62 != 3 || v11;
      if (a2 >> 62 == 3)
      {
        char v15 = v10;
      }
      else
      {
        BOOL v12 = 1;
        char v15 = 1;
      }
      while (1)
      {
        uint64_t v16 = *(void *)(a3 + 48) + 16 * v8;
        double v17 = *(double *)v16;
        unint64_t v18 = *(void *)(v16 + 8);
        switch(v18 >> 62)
        {
          case 1uLL:
            if (v13 == 0x4000000000000000) {
              goto LABEL_18;
            }
            goto LABEL_19;
          case 2uLL:
            if (v13 == 0x8000000000000000 && *(void *)&v17 == a1) {
              return 1;
            }
            goto LABEL_19;
          case 3uLL:
            if (*(void *)&v17 | v18 ^ 0xC000000000000000)
            {
              if (v18 == 0xC000000000000000 && *(void *)&v17 == 1)
              {
                if (!v12) {
                  return 1;
                }
              }
              else if (!v14)
              {
                return 1;
              }
            }
            else if ((v15 & 1) == 0)
            {
              return 1;
            }
LABEL_19:
            unint64_t v8 = (v8 + 1) & v9;
            if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
              return 0;
            }
            break;
          default:
            if (a2 >> 62) {
              goto LABEL_19;
            }
LABEL_18:
            if (v17 != *(double *)&a1) {
              goto LABEL_19;
            }
            return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(Swift::UInt a1, Swift::UInt a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  uint64_t v9 = ~v7;
  do
  {
    BOOL v10 = (void *)(*(void *)(a3 + 48) + 16 * v8);
    BOOL v11 = v10[1] == a2 && *v10 == a1;
    uint64_t result = v11;
    if (v11) {
      break;
    }
    unint64_t v8 = (v8 + 1) & v9;
  }
  while (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  return result;
}

uint64_t _ArchivedViewHost.viewGraph.getter()
{
  specialized _ArchivedViewHost.viewGraph.getter();

  return swift_retain();
}

uint64_t _ArchivedViewHost.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  int v3 = (_WORD *)(v1 + direct field offset for _ArchivedViewHost.propertiesNeedingUpdate);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t _ArchivedViewHost.propertiesNeedingUpdate.setter(__int16 *a1)
{
  __int16 v2 = *a1;
  int v3 = (_WORD *)(v1 + direct field offset for _ArchivedViewHost.propertiesNeedingUpdate);
  uint64_t result = swift_beginAccess();
  *int v3 = v2;
  return result;
}

uint64_t (*_ArchivedViewHost.propertiesNeedingUpdate.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.renderingPhase.getter@<X0>(unsigned char *a1@<X8>)
{
  int v3 = (unsigned char *)(v1 + direct field offset for _ArchivedViewHost.renderingPhase);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t _ArchivedViewHost.renderingPhase.setter(char *a1)
{
  char v2 = *a1;
  int v3 = (unsigned char *)(v1 + direct field offset for _ArchivedViewHost.renderingPhase);
  uint64_t result = swift_beginAccess();
  *int v3 = v2;
  return result;
}

uint64_t (*_ArchivedViewHost.renderingPhase.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

double _ArchivedViewHost.currentTimestamp.getter@<D0>(void *a1@<X8>)
{
  int v3 = (double *)(v1 + direct field offset for _ArchivedViewHost.currentTimestamp);
  swift_beginAccess();
  double result = *v3;
  *a1 = *(void *)v3;
  return result;
}

uint64_t _ArchivedViewHost.currentTimestamp.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = (void *)(v1 + direct field offset for _ArchivedViewHost.currentTimestamp);
  uint64_t result = swift_beginAccess();
  *int v3 = v2;
  return result;
}

uint64_t (*_ArchivedViewHost.currentTimestamp.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.externalUpdateCount.getter()
{
  uint64_t v1 = v0 + direct field offset for _ArchivedViewHost.externalUpdateCount;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t _ArchivedViewHost.externalUpdateCount.setter(uint64_t a1)
{
  int v3 = (void *)(v1 + direct field offset for _ArchivedViewHost.externalUpdateCount);
  uint64_t result = swift_beginAccess();
  *int v3 = a1;
  return result;
}

uint64_t (*_ArchivedViewHost.externalUpdateCount.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 208);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t key path getter for _ArchivedViewHost.content : <A, B>_ArchivedViewHost<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 32);
  uint64_t v6 = *(void *)a1 + *(void *)(**(void **)a1 + 208);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a4, v6, v5);
}

uint64_t _ArchivedViewHost.content.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized _ArchivedViewHost.content.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

uint64_t (*_ArchivedViewHost.content.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return _ArchivedViewHost.content.modify;
}

uint64_t _ArchivedViewHost.content.modify(uint64_t a1, char a2)
{
  return _ArchivedViewHost.content.modify(a1, a2);
}

{
  uint64_t result;

  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return _ArchivedViewHost.content.didset();
  }
  return result;
}

uint64_t _ArchivedViewHost.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 216));
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path getter for _ArchivedViewHost.environment : <A, B>_ArchivedViewHost<A, B>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*(void *)a1 + *(void *)(**(void **)a1 + 216));
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for _ArchivedViewHost.environment : <A, B>_ArchivedViewHost<A, B>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_retain();
  swift_retain();
  return _ArchivedViewHost.environment.setter(v4);
}

uint64_t _ArchivedViewHost.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)(v1 + *(void *)(*(void *)v1 + 216));
  swift_beginAccess();
  *uint64_t v4 = v2;
  v4[1] = v3;
  swift_release();
  swift_release();
  return _ArchivedViewHost.content.didset();
}

uint64_t _ArchivedViewHost.content.didset()
{
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*_ArchivedViewHost.environment.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return _ArchivedViewHost.environment.modify;
}

uint64_t _ArchivedViewHost.environment.modify(uint64_t a1, char a2)
{
  return _ArchivedViewHost.content.modify(a1, a2);
}

double _ArchivedViewHost.size.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 224);
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t _ArchivedViewHost.size.setter(double a1, double a2)
{
  uint64_t v5 = (double *)(v2 + *(void *)(*(void *)v2 + 224));
  swift_beginAccess();
  double *v5 = a1;
  v5[1] = a2;
  return _ArchivedViewHost.size.didset();
}

uint64_t (*_ArchivedViewHost.size.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return _ArchivedViewHost.size.modify;
}

uint64_t _ArchivedViewHost.size.modify(uint64_t a1, char a2)
{
  return _ArchivedViewHost.safeAreaInsets.modify(a1, a2);
}

uint64_t _ArchivedViewHost.safeAreaInsets.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return _ArchivedViewHost.size.didset();
  }
  return result;
}

{
  return _ArchivedViewHost.safeAreaInsets.modify(a1, a2);
}

double _ArchivedViewHost.safeAreaInsets.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 232);
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t _ArchivedViewHost.safeAreaInsets.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = (double *)(v4 + *(void *)(*(void *)v4 + 232));
  swift_beginAccess();
  *uint64_t v9 = a1;
  v9[1] = a2;
  _OWORD v9[2] = a3;
  v9[3] = a4;
  return _ArchivedViewHost.size.didset();
}

uint64_t _ArchivedViewHost.size.didset()
{
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*_ArchivedViewHost.safeAreaInsets.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return _ArchivedViewHost.safeAreaInsets.modify;
}

uint64_t _ArchivedViewHost.auxiliaryData.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 240);
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t _ArchivedViewHost.auxiliaryData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 240));
  swift_beginAccess();
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t *v5 = a1;
  v5[1] = a2;
  return outlined consume of Data?(v6, v7);
}

uint64_t (*_ArchivedViewHost.auxiliaryData.modify())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t _ArchivedViewHost.delegate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 248);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 88) - 8) + 16))(a1, v4);
}

uint64_t _ArchivedViewHost.delegate.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 248);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 88) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*_ArchivedViewHost.delegate.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.encodesCustomFontsAsURLs.getter()
{
  return (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) >> 2) & 1;
}

uint64_t _ArchivedViewHost.encodesCustomFontsAsURLs.setter(uint64_t result)
{
  if (result) {
    char v2 = 4;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) = *(unsigned char *)(v1
                                                                                       + direct field offset for _ArchivedViewHost.archiveOptions) & 0xFB | v2;
  return result;
}

uint64_t (*_ArchivedViewHost.encodesCustomFontsAsURLs.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) & 4) != 0;
  return _ArchivedViewHost.encodesCustomFontsAsURLs.modify;
}

uint64_t _ArchivedViewHost.encodesCustomFontsAsURLs.modify(uint64_t result)
{
  if (*(unsigned char *)(result + 8)) {
    char v1 = 4;
  }
  else {
    char v1 = 0;
  }
  *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions) = *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions) & 0xFB | v1;
  return result;
}

uint64_t _ArchivedViewHost.encodesPreciseTextLayout.getter()
{
  return (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) >> 4) & 1;
}

uint64_t _ArchivedViewHost.encodesPreciseTextLayout.setter(uint64_t result)
{
  if (result) {
    char v2 = 16;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) = *(unsigned char *)(v1
                                                                                       + direct field offset for _ArchivedViewHost.archiveOptions) & 0xEF | v2;
  return result;
}

uint64_t (*_ArchivedViewHost.encodesPreciseTextLayout.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) & 0x10) != 0;
  return _ArchivedViewHost.encodesPreciseTextLayout.modify;
}

uint64_t _ArchivedViewHost.encodesPreciseTextLayout.modify(uint64_t result)
{
  if (*(unsigned char *)(result + 8)) {
    char v1 = 16;
  }
  else {
    char v1 = 0;
  }
  *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions) = *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions) & 0xEF | v1;
  return result;
}

uint64_t _ArchivedViewHost.allowedImageTypes.getter()
{
  specialized _ArchivedViewHost.allowedImageTypes.getter();

  return swift_bridgeObjectRetain();
}

uint64_t _ArchivedViewHost.allowedImageTypes.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 256));
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*_ArchivedViewHost.allowedImageTypes.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.defaultImageType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 264);
  swift_beginAccess();
  return outlined init with copy of UTType?(v3, a1);
}

uint64_t _ArchivedViewHost.defaultImageType.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 264);
  swift_beginAccess();
  outlined assign with take of UTType?(a1, v3);
  return swift_endAccess();
}

uint64_t (*_ArchivedViewHost.defaultImageType.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t (*_ArchivedViewHost.encodingStyle.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ArchivedViewHost.encodesStableDisplayListIdentifiers.getter()
{
  return (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) >> 1) & 1;
}

uint64_t _ArchivedViewHost.encodesStableDisplayListIdentifiers.setter(uint64_t result)
{
  if (result) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) = *(unsigned char *)(v1
                                                                                       + direct field offset for _ArchivedViewHost.archiveOptions) & 0xFD | v2;
  return result;
}

uint64_t (*_ArchivedViewHost.encodesStableDisplayListIdentifiers.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) & 2) != 0;
  return _ArchivedViewHost.encodesStableDisplayListIdentifiers.modify;
}

uint64_t _ArchivedViewHost.encodesStableDisplayListIdentifiers.modify(uint64_t result)
{
  if (*(unsigned char *)(result + 8)) {
    char v1 = 2;
  }
  else {
    char v1 = 0;
  }
  *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions) = *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions) & 0xFD | v1;
  return result;
}

uint64_t _ArchivedViewHost.encodesAssetCatalogReferences.getter()
{
  return (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) >> 3) & 1;
}

uint64_t _ArchivedViewHost.encodesAssetCatalogReferences.setter(uint64_t result)
{
  if (result) {
    char v2 = 8;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) = *(unsigned char *)(v1
                                                                                       + direct field offset for _ArchivedViewHost.archiveOptions) & 0xF7 | v2;
  return result;
}

uint64_t (*_ArchivedViewHost.encodesAssetCatalogReferences.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) & 8) != 0;
  return _ArchivedViewHost.encodesAssetCatalogReferences.modify;
}

uint64_t _ArchivedViewHost.encodesAssetCatalogReferences.modify(uint64_t result)
{
  if (*(unsigned char *)(result + 8)) {
    char v1 = 8;
  }
  else {
    char v1 = 0;
  }
  *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions) = *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions) & 0xF7 | v1;
  return result;
}

void _ArchivedViewHost.deploymentVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions + 1);
}

unsigned char *_ArchivedViewHost.deploymentVersion.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions + 1) = *result;
  return result;
}

uint64_t (*_ArchivedViewHost.deploymentVersion.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions + 1);
  return _ArchivedViewHost.deploymentVersion.modify;
}

uint64_t _ArchivedViewHost.deploymentVersion.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result + direct field offset for _ArchivedViewHost.archiveOptions + 1) = *(unsigned char *)(result + 8);
  return result;
}

char *_ArchivedViewHost.__allocating_init(content:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_allocObject();
  uint64_t v6 = specialized _ArchivedViewHost.init(content:delegate:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 88) - 8) + 8))(a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v6;
}

char *_ArchivedViewHost.init(content:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = specialized _ArchivedViewHost.init(content:delegate:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 88) - 8) + 8))(a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 80) - 8) + 8))(a1);
  return v6;
}

uint64_t _ArchivedViewHost.renderUntilStable()()
{
  if (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) != *(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.instantiatedArchiveOptions)
    || *(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions + 1) != *(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.instantiatedArchiveOptions + 1))
  {
    GraphHost.uninstantiate(immediately:)(0);
  }
  uint64_t v2 = direct field offset for _ArchivedViewHost.pendingIgnoredUpdates;
  uint64_t v3 = direct field offset for _ArchivedViewHost.ignoreUpdateRequests;
  uint64_t v4 = 32;
  while (1)
  {
    *(unsigned char *)(v0 + v2) = 0;
    *(unsigned char *)(v0 + v3) = 1;
    swift_getWitnessTable();
    uint64_t result = ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    if (*(unsigned char *)(v0 + v2) != 1) {
      break;
    }
    *(unsigned char *)(v0 + direct field offset for _ArchivedViewHost.ignoreUpdateRequests) = 0;
    if (!--v4) {
      return result;
    }
  }
  *(unsigned char *)(v0 + direct field offset for _ArchivedViewHost.ignoreUpdateRequests) = 0;
  return result;
}

uint64_t _ArchivedViewHost.archiveIfChanged()()
{
  mainThreadPrecondition()();
  _ArchivedViewHost.renderUntilStable()();
  type metadata accessor for Data?(0, (unint64_t *)&lazy cache variable for type metadata for Data?, MEMORY[0x1E4F277C0], MEMORY[0x1E4FBB718]);
  uint64_t result = static Update.ensure<A>(_:)();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t closure #1 in _ArchivedViewHost.archiveIfChanged()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v64 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v63 = type metadata accessor for ArchivedViewCore.Metadata();
  MEMORY[0x1F4188790](v63);
  double v65 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Badge, Spacer)(0, &lazy cache variable for type metadata for (DisplayList, DisplayList.Version));
  swift_getWitnessTable();
  ViewRendererHost.updateViewGraph<A>(body:)();
  uint64_t v10 = v68;
  if (*(void *)(a1 + direct field offset for _ArchivedViewHost.lastDisplayListVersion) >= v69)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a2 = xmmword_18835D590;
  }
  else
  {
    CGRect v58 = a2;
    CGRect v59 = v7;
    uint64_t v61 = v5;
    unint64_t v62 = v2;
    __int16 v11 = WORD4(v68);
    int v12 = BYTE10(v68);
    *(void *)(a1 + direct field offset for _ArchivedViewHost.lastDisplayListVersion) = v69;
    swift_beginAccess();
    char v13 = readEnvironment(_:_:)();
    swift_endAccess();
    if (v13)
    {
      type metadata accessor for Data?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      v15._countAndFlagsBits = 0x6E69766968637241;
      v15._object = (void *)0xEA00000000002067;
      String.append(_:)(v15);
      *(void *)&v67[0] = a1;
      _print_unlocked<A, B>(_:_:)();
      v16._countAndFlagsBits = 2618;
      v16._object = (void *)0xE200000000000000;
      String.append(_:)(v16);
      *(void *)&v67[0] = v10;
      WORD4(v67[0]) = v11;
      BYTE10(v67[0]) = v12;
      v17._countAndFlagsBits = DisplayList.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      long long v18 = v68;
      *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v14 + 32) = v18;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
    }
    type metadata accessor for DataArchiveWriter();
    swift_allocObject();
    uint64_t v19 = DataArchiveWriter.init()();
    UUID.init()();
    LOBYTE(v68) = *(unsigned char *)(a1 + direct field offset for _ArchivedViewHost.archiveOptions + 1);
    default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
    uint64_t v20 = (uint64_t)v65;
    ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
    uint64_t v60 = v19;
    uint64_t v21 = _ArchivedViewHost.makeUserInfo(writer:metadata:)(v19, v20);
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F95FF0]), sel_init);
    *(void *)&long long v68 = v10;
    WORD4(v68) = v11;
    BYTE10(v68) = v12;
    *(void *)(swift_allocObject() + 16) = v22;
    id v23 = v22;
    DisplayList.forEachRBDisplayList(_:)();
    swift_release();
    uint64_t v24 = (uint64_t)v59;
    static ArchivedViewCore.rbEncoderSetKey.getter();
    unint64_t v70 = type metadata accessor for RBEncoderSet();
    *(void *)&long long v68 = v23;
    outlined init with take of Any(&v68, v67);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v66 = v21;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v24, isUniquelyReferenced_nonNull_native);
    uint64_t v71 = v66;
    swift_bridgeObjectRelease();
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v24, v61);
    MEMORY[0x1F4188790](v26);
    *(&v57 - 4) = (uint64_t)&v71;
    *(&v57 - 3) = a1;
    *(&v57 - 2) = v10;
    *((_WORD *)&v57 - 4) = v11;
    *((unsigned char *)&v57 - 6) = v12;
    unint64_t v27 = v62;
    uint64_t v28 = static ProtobufEncoder.encoding(_:)();
    if (v27)
    {
      outlined destroy of ArchivedViewCore.Metadata(v20, MEMORY[0x1E4F3FC60]);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      uint64_t v31 = v28;
      unint64_t v32 = v29;
      LODWORD(v64) = v12;
      __int16 v33 = v11;
      uint64_t v34 = ArchiveWriter.addAttachment(data:)();
      unint64_t v62 = v32;
      long long v35 = (char *)*((void *)v65 + 1);
      char v36 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v61 = v31;
      if ((v36 & 1) == 0) {
        long long v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1, v35);
      }
      long long v37 = &unk_1EB2E7000;
      unint64_t v39 = *((void *)v35 + 2);
      unint64_t v38 = *((void *)v35 + 3);
      if (v39 >= v38 >> 1)
      {
        CGRect v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v35);
        long long v37 = (void *)&unk_1EB2E7000;
        long long v35 = v56;
      }
      *((void *)v35 + 2) = v39 + 1;
      *(void *)&v35[8 * v39 + 32] = v34;
      uint64_t v40 = (uint64_t)v65;
      *((void *)v65 + 1) = v35;
      if ((*(unsigned char *)(a1 + v37[18]) & 2) != 0)
      {
        _DisplayList_StableIdentityMap.init()();
        *(void *)&long long v68 = v10;
        WORD4(v68) = v33;
        BYTE10(v68) = v64;
        _DisplayList_StableIdentityMap.addIDs(from:root:)();
        swift_bridgeObjectRelease();
        *(void *)&long long v68 = *(void *)&v67[0];
        uint64_t v44 = static ProtobufEncoder.encoding<A>(_:)();
        unint64_t v46 = v45;
        swift_bridgeObjectRelease();
        uint64_t v47 = ArchiveWriter.addAttachment(data:)();
        outlined consume of Data._Representation(v44, v46);
        *(void *)(v40 + 16) = v47;
        *(unsigned char *)(v40 + 24) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v41 = a1 + *(void *)(*(void *)a1 + 240);
      swift_beginAccess();
      unint64_t v42 = *(void *)(v41 + 8);
      if (v42 >> 60 != 15)
      {
        uint64_t v43 = *(void *)v41;
        outlined copy of Data._Representation(*(void *)v41, *(void *)(v41 + 8));
        uint64_t v48 = ArchiveWriter.addAttachment(data:)();
        outlined consume of Data?(v43, v42);
        *(void *)(v40 + 32) = v48;
        *(unsigned char *)(v40 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
      }
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata and conformance ArchivedViewCore.Metadata, MEMORY[0x1E4F3FC60]);
      uint64_t v49 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v51 = v50;
      swift_release();
      ArchiveWriter.addAttachment(data:)();
      outlined consume of Data._Representation(v49, v51);
      uint64_t v52 = DataArchiveWriter.finalizeData()();
      uint64_t v54 = v53;
      outlined destroy of ArchivedViewCore.Metadata(v40, MEMORY[0x1E4F3FC60]);
      outlined consume of Data._Representation(v61, v62);
      swift_release();
      CGFloat v55 = v58;
      *CGRect v58 = v52;
      v55[1] = v54;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _ArchivedViewHost.makeUserInfo(writer:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for CodingUserInfoKey();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v34 - v12;
  uint64_t v38 = MEMORY[0x1E4FBC868];
  uint64_t v14 = type metadata accessor for ArchiveWriter();
  static ArchiveWriter.writerKey.getter();
  uint64_t v37 = v14;
  *(void *)&long long v36 = a1;
  outlined init with take of Any(&v36, v35);
  swift_retain();
  uint64_t v15 = v38;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = v15;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  uint64_t v38 = v34;
  swift_bridgeObjectRelease();
  Swift::String v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v13, v7);
  static ArchivedViewCore.archivedViewHostKey.getter();
  uint64_t v37 = v6;
  *(void *)&long long v36 = v3;
  outlined init with take of Any(&v36, v35);
  swift_retain();
  uint64_t v18 = v38;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = v18;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, (uint64_t)v13, v19);
  uint64_t v38 = v34;
  swift_bridgeObjectRelease();
  v17(v13, v7);
  static ArchivedViewCore.archiveOptionsKey.getter();
  __int16 v20 = *(_WORD *)((char *)v3 + direct field offset for _ArchivedViewHost.archiveOptions);
  uint64_t v37 = MEMORY[0x1E4F3FEA8];
  LOWORD(v36) = v20;
  outlined init with take of Any(&v36, v35);
  uint64_t v21 = v38;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = v21;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, (uint64_t)v13, v22);
  uint64_t v38 = v34;
  swift_bridgeObjectRelease();
  v17(v13, v7);
  static ArchivedViewCore.preferredBundleLanguageKey.getter();
  id v23 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 40));
  uint64_t v24 = v23[1];
  if (v24)
  {
    uint64_t v25 = *v23;
    uint64_t v37 = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v36 = v25;
    *((void *)&v36 + 1) = v24;
    outlined init with take of Any(&v36, v35);
    swift_bridgeObjectRetain();
    uint64_t v26 = v38;
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v34 = v26;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, (uint64_t)v10, v27);
    uint64_t v38 = v34;
    swift_bridgeObjectRelease();
    v17(v10, v7);
  }
  else
  {
    double v28 = specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v10, &v36);
    ((void (*)(char *, uint64_t, double))v17)(v10, v7, v28);
    _sypSgWOhTm_3((uint64_t)&v36, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Data?);
  }
  static ArchivedViewCore.preferredCompositionLanguage.getter();
  char v29 = ArchivedViewCore.Metadata.preferredCompositionLanguage.getter();
  type metadata accessor for CTCompositionLanguage(0);
  uint64_t v37 = v30;
  LOBYTE(v36) = v29;
  outlined init with take of Any(&v36, v35);
  uint64_t v31 = v38;
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = v31;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, (uint64_t)v13, v32);
  uint64_t v38 = v34;
  swift_bridgeObjectRelease();
  v17(v13, v7);
  return v38;
}

uint64_t closure #2 in closure #1 in _ArchivedViewHost.archiveIfChanged()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v4;
  swift_beginAccess();
  type metadata accessor for CGSize(0);
  swift_bridgeObjectRetain();
  ProtobufEncoder.messageField<A>(_:_:)();
  if (!v2) {
    ProtobufEncoder.messageField<A>(_:_:)();
  }
  return swift_bridgeObjectRelease();
}

uint64_t _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v135 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for ArchivedViewCore.Metadata();
  MEMORY[0x1F4188790](v110);
  uint64_t v133 = (uint64_t *)((char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v129 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v129 - 8);
  MEMORY[0x1F4188790](v129);
  uint64_t v15 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v110 - v17;
  double v20 = MEMORY[0x1F4188790](v19);
  char v22 = (char *)&v110 - v21;
  id v23 = *(uint64_t (**)(uint64_t, uint64_t, double))(a4 + 8);
  uint64_t v125 = a1;
  uint64_t v128 = v23(a3, a4, v20);
  uint64_t v134 = v5;
  uint64_t v24 = v5 + direct field offset for _ArchivedViewHost.signposter;
  OSSignposter.logHandle.getter();
  long long v126 = v22;
  OSSignpostID.init(log:)();
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
  static OSSignpostID.exclusive.getter();
  uint64_t v124 = v24;
  uint64_t v26 = OSSignposter.logHandle.getter();
  int v27 = static os_signpost_type_t.begin.getter();
  char v28 = OS_os_log.signpostsEnabled.getter();
  uint64_t v131 = a4;
  if (v28)
  {
    unint64_t v130 = v11;
    char v29 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    LODWORD(v127) = v27;
    unint64_t v30 = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v29(v15, v18, v129);
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 134217984;
    uint64_t v140 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_signpost_id_t v32 = OSSignpostID.rawValue.getter();
    __int16 v33 = v29;
    _os_signpost_emit_with_name_impl(&dword_1872C6000, v26, (os_signpost_type_t)v127, v32, "archiveStates", "statesCount=%{name=statesCount}ld", v31, 0xCu);
    uint64_t v34 = v31;
    a4 = v131;
    MEMORY[0x18C119C60](v34, -1, -1);

    uint64_t v35 = v129;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v129);
  }
  else
  {

    __int16 v33 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    unint64_t v30 = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v35 = v129;
  }
  uint64_t v121 = v33;
  unint64_t v120 = v30;
  v33(v15, v18, v35);
  uint64_t v123 = type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  unint64_t v122 = v15;
  uint64_t v111 = OSSignpostIntervalState.init(id:isOpen:)();
  long long v36 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v116 = v13 + 8;
  uint64_t v117 = v36;
  v36(v18, v35);
  UUID.init()();
  LOBYTE(v14outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(v134 + direct field offset for _ArchivedViewHost.archiveOptions + 1);
  default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
  uint64_t v37 = v133;
  ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
  uint64_t v127 = _ArchivedViewHost.makeUserInfo(writer:metadata:)(v135, (uint64_t)v37);
  uint64_t result = _DisplayList_StableIdentityMap.init()();
  uint64_t v39 = v128;
  if ((v128 & 0x8000000000000000) == 0)
  {
    uint64_t v40 = v35;
    if (v128)
    {
      char v118 = *(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 16);
      uint64_t v119 = a4 + 16;
      uint64_t v112 = direct field offset for _ArchivedViewHost.stableIDRoot;
      uint64_t result = swift_retain();
      uint64_t v41 = 0;
      uint64_t v115 = MEMORY[0x1E4FBC840] + 8;
      long long v114 = xmmword_18834BB80;
      uint64_t v113 = (void *)0x800000018832D8F0;
      uint64_t v136 = a3;
      while (v39 != v41)
      {
        unint64_t v42 = OSSignposter.logHandle.getter();
        os_signpost_type_t v43 = static os_signpost_type_t.begin.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          unint64_t v45 = v121;
          uint64_t v44 = v122;
          unint64_t v46 = v126;
          v121(v122, v126, v40);
          uint64_t v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v47 = 0;
          os_signpost_id_t v48 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_1872C6000, v42, v43, v48, "archiveState", "", v47, 2u);
          uint64_t v49 = v47;
          a4 = v131;
          MEMORY[0x18C119C60](v49, -1, -1);

          unint64_t v50 = v44;
          v117(v44, v40);
        }
        else
        {

          unint64_t v46 = v126;
          unint64_t v45 = v121;
          unint64_t v50 = v122;
        }
        v45(v50, v46, v40);
        swift_allocObject();
        uint64_t v51 = OSSignpostIntervalState.init(id:isOpen:)();
        a3 = v136;
        uint64_t v140 = v135;
        uint64_t v52 = v132;
        v118(v41, &v140, v136, a4);
        if (v52)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v94 = v134;
          $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v134, v51, a3, a4, "archiveState");
          swift_release();
          swift_release();
          outlined destroy of ArchivedViewCore.Metadata((uint64_t)v133, MEMORY[0x1E4F3FC60]);
LABEL_32:
          uint64_t v95 = v111;
          goto LABEL_38;
        }
        unint64_t v130 = (char *)v51;
        uint64_t v53 = v134;
        uint64_t v54 = _ArchivedViewHost.renderUntilStable()();
        MEMORY[0x1F4188790](v54);
        *(&v110 - 4) = a3;
        *(&v110 - 3) = a4;
        *(&v110 - 2) = v53;
        static Update.ensure<A>(_:)();
        uint64_t v132 = 0;
        uint64_t v55 = v140;
        uint64_t v56 = v53;
        __int16 v57 = v141;
        char v58 = BYTE2(v141);
        swift_beginAccess();
        char v59 = readEnvironment(_:_:)();
        uint64_t v60 = swift_endAccess();
        if (v59)
        {
          type metadata accessor for Data?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v115, MEMORY[0x1E4FBBE00]);
          uint64_t v61 = swift_allocObject();
          *(_OWORD *)(v61 + 16) = v114;
          uint64_t v140 = 0;
          unint64_t v141 = 0xE000000000000000;
          _StringGuts.grow(_:)(28);
          v62._countAndFlagsBits = 0xD000000000000010;
          v62._object = v113;
          String.append(_:)(v62);
          uint64_t v137 = v41;
          v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v63);
          swift_bridgeObjectRelease();
          v64._countAndFlagsBits = 543584032;
          v64._object = (void *)0xE400000000000000;
          String.append(_:)(v64);
          uint64_t v137 = v56;
          _print_unlocked<A, B>(_:_:)();
          v65._countAndFlagsBits = 2618;
          v65._object = (void *)0xE200000000000000;
          String.append(_:)(v65);
          uint64_t v137 = v55;
          __int16 v138 = v57;
          char v139 = v58;
          v66._countAndFlagsBits = DisplayList.description.getter();
          String.append(_:)(v66);
          a4 = v131;
          swift_bridgeObjectRelease();
          uint64_t v67 = v140;
          unint64_t v68 = v141;
          *(void *)(v61 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v61 + 32) = v67;
          *(void *)(v61 + 4outlined consume of Text?(0, 0, 0, 0) = v68;
          print(_:separator:terminator:)();
          uint64_t v60 = swift_bridgeObjectRelease();
        }
        uint64_t v69 = v41;
        MEMORY[0x1F4188790](v60);
        char v70 = v58;
        *(&v110 - 6) = a3;
        *(&v110 - 5) = a4;
        *(&v110 - 4) = v127;
        *(&v110 - 3) = v56;
        uint64_t v71 = v56;
        uint64_t v73 = v72;
        *(&v110 - 2) = v72;
        *((_WORD *)&v110 - 4) = v57;
        char v74 = v70;
        *((unsigned char *)&v110 - 6) = v70;
        uint64_t v75 = v132;
        uint64_t v76 = static ProtobufEncoder.encoding(_:)();
        if (v75)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a4 = v131;
          a3 = v136;
          $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v71, (uint64_t)v130, v136, v131, "archiveState");
          swift_release();
          swift_release();
          outlined destroy of ArchivedViewCore.Metadata((uint64_t)v133, MEMORY[0x1E4F3FC60]);
          uint64_t v94 = v71;
          uint64_t v40 = v129;
          unint64_t v46 = v126;
          goto LABEL_32;
        }
        uint64_t v78 = v76;
        unint64_t v79 = v77;
        if ((*(unsigned char *)(v71 + direct field offset for _ArchivedViewHost.archiveOptions) & 2) != 0)
        {
          uint64_t v140 = v73;
          LOWORD(v141) = v57;
          BYTE2(v141) = v74;
          _DisplayList_StableIdentityMap.addIDs(from:root:)();
        }
        swift_bridgeObjectRelease();
        uint64_t v80 = v69;
        uint64_t v81 = ArchiveWriter.addAttachment(data:)();
        uint64_t v132 = 0;
        uint64_t v82 = v81;
        uint64_t v83 = (char *)v133[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v83 + 2) + 1, 1, v83);
        }
        unint64_t v85 = *((void *)v83 + 2);
        unint64_t v84 = *((void *)v83 + 3);
        if (v85 >= v84 >> 1) {
          uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v85 + 1, 1, v83);
        }
        uint64_t v41 = v80 + 1;
        *((void *)v83 + 2) = v85 + 1;
        *(void *)&v83[8 * v85 + 32] = v82;
        outlined consume of Data._Representation(v78, v79);
        uint64_t v86 = v134;
        v133[1] = v83;
        a4 = v131;
        a3 = v136;
        $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v86, (uint64_t)v130, v136, v131, "archiveState");
        uint64_t result = swift_release();
        uint64_t v39 = v128;
        uint64_t v40 = v129;
        if (v128 == v41) {
          goto LABEL_24;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
    swift_retain();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v87 = v40;
    if ((*(unsigned char *)(v134 + direct field offset for _ArchivedViewHost.archiveOptions) & 2) != 0)
    {
      uint64_t v140 = v142;
      uint64_t v91 = v132;
      uint64_t v92 = static ProtobufEncoder.encoding<A>(_:)();
      if (v91)
      {
        swift_bridgeObjectRelease();
        swift_release();
        outlined destroy of ArchivedViewCore.Metadata((uint64_t)v133, MEMORY[0x1E4F3FC60]);
        goto LABEL_37;
      }
      uint64_t v98 = v92;
      unint64_t v99 = v93;
      swift_bridgeObjectRelease();
      uint64_t v100 = ArchiveWriter.addAttachment(data:)();
      uint64_t v132 = 0;
      uint64_t v101 = v100;
      outlined consume of Data._Representation(v98, v99);
      uint64_t v102 = v133;
      v133[2] = v101;
      *((unsigned char *)v102 + 24) = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v88 = v132;
    uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
    if (!v88)
    {
      unint64_t v96 = v90;
      if (v90 >> 60 != 15)
      {
        uint64_t v97 = v89;
        uint64_t v103 = ArchiveWriter.addAttachment(data:)();
        outlined consume of Data?(v97, v96);
        long long v104 = v133;
        v133[4] = v103;
        *((unsigned char *)v104 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
      }
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata and conformance ArchivedViewCore.Metadata, MEMORY[0x1E4F3FC60]);
      uint64_t v105 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v107 = v106;
      swift_release();
      ArchiveWriter.addAttachment(data:)();
      outlined consume of Data._Representation(v105, v107);
      dispatch thunk of ArchiveWriter.finalize()();
      outlined destroy of ArchivedViewCore.Metadata((uint64_t)v133, MEMORY[0x1E4F3FC60]);
      swift_release();
      $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v134, v111, a3, a4, "archiveStates");
      swift_release();
      long long v108 = v126;
      uint64_t v109 = v87;
      return ((uint64_t (*)(char *, uint64_t))v117)(v108, v109);
    }
    outlined destroy of ArchivedViewCore.Metadata((uint64_t)v133, MEMORY[0x1E4F3FC60]);
    swift_release();
LABEL_37:
    unint64_t v46 = v126;
    uint64_t v94 = v134;
    uint64_t v95 = v111;
    uint64_t v40 = v87;
LABEL_38:
    $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v94, v95, a3, a4, "archiveStates");
    swift_release();
    long long v108 = v46;
    uint64_t v109 = v40;
    return ((uint64_t (*)(char *, uint64_t))v117)(v108, v109);
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v16 - v12;
  mainThreadPrecondition()();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14(v13, a2, v7);
  if (URL.isFileURL.getter())
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    type metadata accessor for FileArchiveWriter();
    v14(v10, a2, v7);
    uint64_t result = FileArchiveWriter.__allocating_init(url:)();
    if (!v4)
    {
      _ArchivedViewHost.archiveStates<A>(_:to:)(a1, result, v16, v17);
      return swift_release();
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v24 = a5;
  uint64_t v5 = type metadata accessor for OSSignpostError();
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v16 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v17 = v23;
    if ((*(unsigned int (**)(char *, uint64_t))(v23 + 88))(v7, v5) == *MEMORY[0x1E4FBD340])
    {
      uint64_t v18 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v5);
      uint64_t v18 = "";
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    double v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v20 = 0;
    os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1872C6000, v15, v16, v21, v24, v18, v20, 2u);
    MEMORY[0x18C119C60](v20, -1, -1);

    char v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v14, v8);
    return ((uint64_t (*)(char *, uint64_t))v22)(v11, v8);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

uint64_t closure #1 in _ArchivedViewHost.archiveStates<A>(_:to:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for (Badge, Spacer)(0, &lazy cache variable for type metadata for (DisplayList, DisplayList.Version));
  swift_getWitnessTable();
  uint64_t result = ViewRendererHost.updateViewGraph<A>(body:)();
  *(void *)a1 = v3;
  *(_WORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 1outlined consume of Text?(0, 0, 0, 0) = v5;
  return result;
}

uint64_t closure #1 in closure #1 in _ArchivedViewHost.archiveStates<A>(_:to:)()
{
  return ViewGraph.displayList()();
}

uint64_t closure #2 in _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v25 = a4;
  unsigned int v10 = HIWORD(a5);
  uint64_t v26 = type metadata accessor for CodingUserInfoKey();
  uint64_t v11 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = objc_allocWithZone(MEMORY[0x1E4F95FF0]);
  swift_bridgeObjectRetain();
  id v15 = objc_msgSend(v14, sel_init);
  *(void *)&long long v29 = a4;
  unsigned int v23 = v10;
  unsigned int v24 = a5;
  WORD4(v29) = a5;
  BYTE10(v29) = v10;
  *(void *)(swift_allocObject() + 16) = v15;
  id v16 = v15;
  DisplayList.forEachRBDisplayList(_:)();
  swift_release();
  static ArchivedViewCore.rbEncoderSetKey.getter();
  unint64_t v30 = type metadata accessor for RBEncoderSet();
  *(void *)&long long v29 = v16;
  outlined init with take of Any(&v29, v28);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = a2;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  uint64_t v18 = v31;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v26);
  uint64_t v19 = v25;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v18;
  double v20 = (_OWORD *)(a3 + *(void *)(*(void *)a3 + 224));
  swift_beginAccess();
  v28[0] = *v20;
  type metadata accessor for CGSize(0);
  swift_bridgeObjectRetain();
  uint64_t v21 = v27;
  ProtobufEncoder.messageField<A>(_:_:)();
  if (!v21)
  {
    *(void *)&v28[0] = v19;
    WORD4(v28[0]) = v24;
    BYTE10(v28[0]) = v23;
    ProtobufEncoder.messageField<A>(_:_:)();
  }
  return swift_bridgeObjectRelease();
}

uint64_t _ArchivedViewHost.LegacyStates.updateState(at:proxy:)()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for ArchivedViewHostStates.updateState(at:proxy:) in conformance _ArchivedViewHost<A, B>.LegacyStates()
{
  return _ArchivedViewHost.LegacyStates.updateState(at:proxy:)();
}

uint64_t protocol witness for ArchivedViewHostStates.auxiliaryData() in conformance _ArchivedViewHost<A, B>.LegacyStates()
{
  uint64_t v2 = specialized _ArchivedViewHost.LegacyStates.auxiliaryData()(*v0, v0[1], v0[2], v0[3]);
  uint64_t v4 = v2;
  if (!v1) {
    outlined copy of Data?(v2, v3);
  }
  return v4;
}

uint64_t _ArchivedViewHost.archiveStates(to:count:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  closure #1 in _ArchivedViewHost.archiveStates(to:count:body:)((uint64_t)partial apply for thunk for @callee_guaranteed (@unowned Int) -> (), v10, a2, v4, a1);
  if (v5) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  id v16 = a3;
  uint64_t v17 = a4;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v16 - v12;
  mainThreadPrecondition()();
  id v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14(v13, a1, v7);
  if (URL.isFileURL.getter())
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    type metadata accessor for FileArchiveWriter();
    v14(v10, a1, v7);
    uint64_t result = FileArchiveWriter.__allocating_init(url:)();
    if (!v4)
    {
      _ArchivedViewHost.archiveStates(to:count:body:)(result, a2, v16, v17);
      return swift_release();
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in _ArchivedViewHost.archiveStates(to:count:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v8[3] = a4;
  v8[0] = a3;
  v8[1] = a1;
  _OWORD v8[2] = a2;
  swift_retain();
  swift_retain();
  uint64_t v6 = type metadata accessor for _ArchivedViewHost.LegacyStates();
  _ArchivedViewHost.archiveStates<A>(_:to:)((uint64_t)v8, a5, v6, (uint64_t)&protocol witness table for _ArchivedViewHost<A, B>.LegacyStates);
  swift_release();
  return swift_release();
}

uint64_t _ArchivedViewHost.archiveStates(count:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mainThreadPrecondition()();
  type metadata accessor for DataArchiveWriter();
  swift_allocObject();
  uint64_t v8 = DataArchiveWriter.init()();
  _ArchivedViewHost.archiveStates(to:count:body:)(v8, a1, a2, a3);
  if (!v4) {
    uint64_t v3 = DataArchiveWriter.finalizeData()();
  }
  swift_release();
  return v3;
}

uint64_t _ArchivedViewHost.archiveStates(to:count:body:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mainThreadPrecondition()();
  type metadata accessor for FileArchiveWriter();
  id v8 = a1;
  uint64_t v9 = FileArchiveWriter.__allocating_init(file:)();
  _ArchivedViewHost.archiveStates(to:count:body:)(v9, a2, a3, a4);
  return swift_release();
}

uint64_t _ArchivedViewHost.archiveStates<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mainThreadPrecondition()();
  type metadata accessor for DataArchiveWriter();
  swift_allocObject();
  uint64_t v8 = DataArchiveWriter.init()();
  _ArchivedViewHost.archiveStates<A>(_:to:)(a1, v8, a2, a3);
  if (!v4) {
    uint64_t v3 = DataArchiveWriter.finalizeData()();
  }
  swift_release();
  return v3;
}

uint64_t _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  mainThreadPrecondition()();
  type metadata accessor for FileArchiveWriter();
  id v8 = a2;
  uint64_t v9 = FileArchiveWriter.__allocating_init(file:)();
  _ArchivedViewHost.archiveStates<A>(_:to:)(a1, v9, a3, a4);
  return swift_release();
}

uint64_t _ArchivedViewHost.forEachIdentifiedView(body:)(void (*a1)(_OWORD *), uint64_t a2)
{
  mainThreadPrecondition()();
  swift_getWitnessTable();
  ViewRendererHost.preferenceValue<A>(_:)();
  _IdentifiedViewTree.forEach(_:)(a1, a2);
  return outlined destroy of _IdentifiedViewTree((uint64_t)v5);
}

uint64_t _ArchivedViewHost.applyMutation(_:)(long long *a1)
{
  long long v8 = *a1;
  uint64_t v1 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v3 = *((void *)a1 + 4);
  _ArchivedViewHost.renderUntilStable()();
  _ArchivedViewHost.preferenceValue<A>(for:)();
  uint64_t v4 = *(void *)(v9 + 16);
  if (v4)
  {
    uint64_t v5 = v9 + 40;
    do
    {
      uint64_t v6 = *(void (**)(long long *))(v5 - 8);
      long long v9 = v8;
      uint64_t v10 = v1;
      uint64_t v11 = v2;
      uint64_t v12 = v3;
      swift_retain();
      v6(&v9);
      swift_release();
      v5 += 16;
      --v4;
    }
    while (v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t _ArchivedViewHost.preferenceValue<A>(for:)()
{
  mainThreadPrecondition()();
  swift_getWitnessTable();

  return ViewRendererHost.preferenceValue<A>(_:)();
}

CGImageRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _ArchivedViewHost.filteredImage(_:)(CGImageRef a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = (CGImage *)(*(uint64_t (**)(CGImageRef, void))(*(void *)(v3 + 104) + 24))(a1, *(void *)(v3 + 88));
  swift_endAccess();
  return v4;
}

uint64_t _ArchivedViewHost.imageType(for:)@<X0>(CGImage *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v41 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v4 + 88);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v37 - v10;
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  id v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v37 - v16;
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v37 - v19;
  uint64_t v21 = (char *)v3 + *(void *)(v4 + 248);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v21, v7);
  uint64_t v22 = v4;
  unsigned int v23 = v40;
  (*(void (**)(CGImage *, uint64_t))(*(void *)(v22 + 104) + 32))(v40, v7);
  uint64_t v24 = v7;
  uint64_t v25 = v41;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v24);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v17, 1, v5) == 1)
  {
    CFStringRef v27 = (id)CGImageGetUTType(v23);
    if (v27)
    {
      char v28 = (__CFString *)v27;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      UTType.init(_:)();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v20, 1, 1, v5);
    }
    outlined destroy of UTType?((uint64_t)v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v20, v17, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v20, 0, 1, v5);
  }
  outlined init with copy of UTType?((uint64_t)v20, (uint64_t)v14);
  if (v26(v14, 1, v5) == 1)
  {
    outlined destroy of UTType?((uint64_t)v20);
    outlined destroy of UTType?((uint64_t)v14);
  }
  else
  {
    long long v29 = *(void (**)(void))(v25 + 32);
    uint64_t v30 = (uint64_t)v38;
    v29();
    uint64_t v31 = (void *)((char *)v3 + *(void *)(*v3 + 256));
    swift_beginAccess();
    uint64_t v32 = *v31;
    swift_bridgeObjectRetain();
    char v33 = specialized Set.contains(_:)(v30, v32);
    swift_bridgeObjectRelease();
    outlined destroy of UTType?((uint64_t)v20);
    if (v33)
    {
      uint64_t v34 = v39;
      ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v39, v30, v5);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v5);
    }
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v30, v5);
  }
  uint64_t v36 = (uint64_t)v3 + *(void *)(*v3 + 264);
  swift_beginAccess();
  return outlined init with copy of UTType?(v36, v39);
}

uint64_t _ArchivedViewHost.failedToEncodeView(type:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, void))(*(void *)(v3 + 104) + 16))(a1, *(void *)(v3 + 88));
  return swift_endAccess();
}

Swift::Void __swiftcall _ArchivedViewHost.reset()()
{
}

Swift::Void __swiftcall _ArchivedViewHost.updateRootView()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = *(void *)(v2 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v5 = (char *)&v7 - v4;
  uint64_t v6 = (uint64_t)v0 + *(void *)(v1 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Void __swiftcall _ArchivedViewHost.updateEnvironment()()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 216));
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = one-time initialization token for configuredForPlatform;
  swift_retain_n();
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = static EnvironmentValues.configuredForPlatform;
  if (v2)
  {
    swift_release();
    if (!v4 || v2 != v4) {
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
    }
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release_n();
  swift_release_n();
}

Swift::Void __swiftcall _ArchivedViewHost.updateSize()()
{
  uint64_t v1 = (CGSize *)(v0 + *(void *)(*(void *)v0 + 224));
  swift_beginAccess();
  ViewGraph.setProposedSize(_:)(*v1);
}

Swift::Void __swiftcall _ArchivedViewHost.updateSafeArea()()
{
}

Swift::Void __swiftcall _ArchivedViewHost.updateContainerSize()()
{
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance _ArchivedViewHost<A, B>.ArchiveHostViewGraph(uint64_t a1)
{
  return specialized _ArchivedViewHost.ArchiveHostViewGraph.modifyViewInputs(inputs:graph:)(a1);
}

uint64_t *_ArchivedViewHost.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  uint64_t v2 = (uint64_t)v0 + direct field offset for _ArchivedViewHost.signposter;
  uint64_t v3 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 208));
  swift_release();
  swift_release();
  outlined consume of Data?(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 240)), *(uint64_t *)((char *)v0 + *(void *)(*v0 + 240) + 8));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 248));
  swift_bridgeObjectRelease();
  outlined destroy of UTType?((uint64_t)v0 + *(void *)(*v0 + 264));
  return v0;
}

uint64_t _ArchivedViewHost.__deallocating_deinit()
{
  _ArchivedViewHost.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AnyArchivedViewHost.failedToEncodeView(type:) in conformance _ArchivedViewHost<A, B>(uint64_t a1)
{
  return _ArchivedViewHost.failedToEncodeView(type:)(a1);
}

CGImageRef protocol witness for AnyArchivedViewHost.filteredImage(_:) in conformance _ArchivedViewHost<A, B>(CGImage *a1)
{
  return _ArchivedViewHost.filteredImage(_:)(a1);
}

uint64_t protocol witness for AnyArchivedViewHost.allowedImageTypes.getter in conformance _ArchivedViewHost<A, B>()
{
  specialized _ArchivedViewHost.allowedImageTypes.getter();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AnyArchivedViewHost.imageType(for:) in conformance _ArchivedViewHost<A, B>@<X0>(CGImage *a1@<X0>, uint64_t a2@<X8>)
{
  return _ArchivedViewHost.imageType(for:)(a1, a2);
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance _ArchivedViewHost<A, B>()
{
  specialized _ArchivedViewHost.viewGraph.getter();

  return swift_retain();
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance _ArchivedViewHost<A, B>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return _ArchivedViewHost.currentTimestamp.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _ArchivedViewHost<A, B>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ArchivedViewHost.currentTimestamp.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.responderNode.getter in conformance _ArchivedViewHost<A, B>()
{
  return ViewRendererHost.responderNode.getter();
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance _ArchivedViewHost<A, B>(__int16 *a1)
{
  __int16 v2 = *a1;
  return _ArchivedViewHost.propertiesNeedingUpdate.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance _ArchivedViewHost<A, B>(void *a1))()
{
  __int16 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ArchivedViewHost.propertiesNeedingUpdate.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance _ArchivedViewHost<A, B>(char *a1)
{
  char v2 = *a1;
  return _ArchivedViewHost.renderingPhase.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance _ArchivedViewHost<A, B>(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ArchivedViewHost.renderingPhase.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance _ArchivedViewHost<A, B>(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ArchivedViewHost.externalUpdateCount.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ViewRendererHost.updateTransform() in conformance _ArchivedViewHost<A, B>()
{
}

uint64_t protocol witness for ViewGraphDelegate.as<A>(_:) in conformance _ArchivedViewHost<A, B>(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40FF430](a1, *v2, a2);
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for _ArchivedViewHost<A, B>, MEMORY[0x1E4F3FE08]);
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for _ArchivedViewHost<A, B>, MEMORY[0x1E4F401C0]);
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = *v7;
  uint64_t WitnessTable = swift_getWitnessTable();

  return a7(a1, a2, v11, a3, WitnessTable);
}

void protocol witness for GraphDelegate.graphDidChange() in conformance _ArchivedViewHost<A, B>()
{
  swift_getWitnessTable();

  ViewRendererHost.graphDidChange()();
}

void protocol witness for GraphDelegate.beginTransaction() in conformance _ArchivedViewHost<A, B>()
{
}

uint64_t _ArchivedViewHost.sizeThatFits(_:)()
{
  return ViewRendererHost.sizeThatFits(_:)();
}

uint64_t specialized _ArchivedViewHost.viewGraph.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t specialized _ArchivedViewHost.content.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 208);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v4, a1);
  swift_endAccess();
  return _ArchivedViewHost.content.didset();
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t specialized _ArchivedViewHost.allowedImageTypes.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 256);
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t outlined init with copy of UTType?(uint64_t a1, uint64_t a2)
{
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UTType?(uint64_t a1, uint64_t a2)
{
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

char *specialized _ArchivedViewHost.init(content:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)v2;
  static Signpost.archiving.getter();
  *(_WORD *)&v2[direct field offset for _ArchivedViewHost.propertiesNeedingUpdate] = 0;
  v2[direct field offset for _ArchivedViewHost.renderingPhase] = 0;
  *(void *)&v2[direct field offset for _ArchivedViewHost.currentTimestamp] = 0;
  *(void *)&v2[direct field offset for _ArchivedViewHost.externalUpdateCount] = 0;
  v2[direct field offset for _ArchivedViewHost.ignoreUpdateRequests] = 0;
  v2[direct field offset for _ArchivedViewHost.pendingIgnoredUpdates] = 0;
  *(void *)&v2[direct field offset for _ArchivedViewHost.lastDisplayListVersion] = 0;
  uint64_t v7 = direct field offset for _ArchivedViewHost.stableIDRoot;
  type metadata accessor for _DisplayList_StableIdentityRoot();
  *(void *)&v2[v7] = _DisplayList_StableIdentityRoot.__allocating_init()();
  static ArchivedViewInput.Value.isArchived.getter();
  *(_WORD *)&v2[direct field offset for _ArchivedViewHost.instantiatedArchiveOptions] = 512;
  EnvironmentValues.init()();
  uint64_t v8 = &v3[*(void *)(*(void *)v3 + 224)];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v9 = &v3[*(void *)(*(void *)v3 + 232)];
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *(_OWORD *)&v2[*(void *)(*(void *)v2 + 240)] = xmmword_18835D590;
  uint64_t v10 = *(void *)(*(void *)v2 + 256);
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBBE00]);
  uint64_t v11 = type metadata accessor for UTType();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18834BB70;
  static UTType.png.getter();
  static UTType.jpeg.getter();
  uint64_t v14 = specialized Set.init<A>(_:)(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)&v3[v10] = v14;
  uint64_t v15 = &v3[*(void *)(*(void *)v3 + 264)];
  static UTType.png.getter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  mainThreadPrecondition()();
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v6 + 80) - 8) + 16))(&v3[*(void *)(*(void *)v3 + 208)], a1, *(void *)(v6 + 80));
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)(*(void *)(v6 + 88) - 8) + 16))(&v3[*(void *)(*(void *)v3 + 248)], a2, *(void *)(v6 + 88));
  MEMORY[0x18C113CA0](v16);
  type metadata accessor for ViewGraph();
  *((void *)v3 + 2) = ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)();
  swift_retain();
  swift_weakInit();
  swift_release();
  uint64_t v17 = type metadata accessor for _ArchivedViewHost.ArchiveHostViewGraph();
  swift_getWitnessTable();
  ViewGraph.append<A>(feature:)();
  (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v20, v17);
  unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  ViewGraph.append<A>(feature:)();
  outlined consume of FocusStore?(0, v19);
  swift_retain();
  ViewGraph.setRootView<A>(_:)();
  swift_release();
  swift_getWitnessTable();
  ViewRendererHost.initializeViewGraph()();
  static Update.end()();
  return v3;
}

uint64_t partial apply for closure #1 in _ArchivedViewHost.archiveIfChanged()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _ArchivedViewHost.archiveIfChanged()(v1, a1);
}

uint64_t specialized _ArchivedViewHost.LegacyStates.auxiliaryData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + *(void *)(*(void *)a4 + 240);
  swift_beginAccess();
  return *(void *)v4;
}

uint64_t specialized _ArchivedViewHost.requestUpdate(after:)()
{
  if (*((unsigned char *)v0 + direct field offset for _ArchivedViewHost.ignoreUpdateRequests))
  {
    *((unsigned char *)v0 + direct field offset for _ArchivedViewHost.pendingIgnoredUpdates) = 1;
  }
  else
  {
    uint64_t v1 = *v0;
    swift_beginAccess();
    (*(void (**)(void))(*(void *)(v1 + 104) + 8))(*(void *)(v1 + 88));
    return swift_endAccess();
  }
  return result;
}

uint64_t base witness table accessor for ViewGraphDelegate in _ArchivedViewHost<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for GraphDelegate in _ArchivedViewHost<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187994798(uint64_t a1)
{
  return specialized _ArchivedViewHost.content.setter(a1);
}

uint64_t sub_1879947BC()
{
  return 32;
}

__n128 sub_1879947C8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1879947DC()
{
  return 32;
}

__n128 sub_1879947E8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_1879947F4@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  long long v3 = (__n128 *)(*(void *)a1 + *(void *)(**(void **)a1 + 224));
  swift_beginAccess();
  __n128 result = *v3;
  *a2 = *v3;
  return result;
}

uint64_t sub_187994854(double *a1)
{
  return _ArchivedViewHost.size.setter(*a1, a1[1]);
}

uint64_t sub_18799487C()
{
  return 32;
}

__n128 sub_187994888(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_187994894@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)a1 + *(void *)(**(void **)a1 + 232);
  swift_beginAccess();
  __n128 result = *(__n128 *)v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t sub_1879948F4(double *a1)
{
  return _ArchivedViewHost.safeAreaInsets.setter(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_187994920()
{
  return 32;
}

__n128 sub_18799492C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_187994938@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _ArchivedViewHost.encodesCustomFontsAsURLs.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187994968(unsigned __int8 *a1)
{
  return _ArchivedViewHost.encodesCustomFontsAsURLs.setter(*a1);
}

uint64_t sub_187994990()
{
  return 32;
}

__n128 sub_18799499C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1879949A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _ArchivedViewHost.encodesPreciseTextLayout.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1879949D8(unsigned __int8 *a1)
{
  return _ArchivedViewHost.encodesPreciseTextLayout.setter(*a1);
}

uint64_t sub_187994A00()
{
  return 32;
}

__n128 sub_187994A0C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_187994A20()
{
  return 32;
}

__n128 sub_187994A2C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_187994A38@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _ArchivedViewHost.encodesStableDisplayListIdentifiers.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187994A68(unsigned __int8 *a1)
{
  return _ArchivedViewHost.encodesStableDisplayListIdentifiers.setter(*a1);
}

uint64_t sub_187994A90()
{
  return 32;
}

__n128 sub_187994A9C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_187994AA8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _ArchivedViewHost.encodesAssetCatalogReferences.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187994AD8(unsigned __int8 *a1)
{
  return _ArchivedViewHost.encodesAssetCatalogReferences.setter(*a1);
}

uint64_t sub_187994B00()
{
  return 32;
}

__n128 sub_187994B0C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_187994B18(unsigned char *a1@<X8>)
{
}

unsigned char *sub_187994B3C(char *a1)
{
  char v2 = *a1;
  return _ArchivedViewHost.deploymentVersion.setter(&v2);
}

uint64_t sub_187994B74()
{
  return 32;
}

__n128 sub_187994B80(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void type metadata completion function for _ArchivedViewHost()
{
  type metadata accessor for OSSignposter();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      swift_checkMetadataState();
      if (v2 <= 0x3F)
      {
        _s22UniformTypeIdentifiers6UTTypeVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBB718]);
        if (v3 <= 0x3F) {
          swift_initClassMetadata2();
        }
      }
    }
  }
}

uint64_t type metadata accessor for _ArchivedViewHost()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for _ArchivedViewHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for _ArchivedViewHost);
}

uint64_t dispatch thunk of _ArchivedViewHost.__allocating_init(content:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t outlined destroy of ArchivedViewCore.Metadata(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in _ArchivedViewHost.archiveStates<A>(_:to:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in _ArchivedViewHost.archiveStates<A>(_:to:)(a1);
}

uint64_t partial apply for closure #2 in _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1)
{
  return closure #2 in _ArchivedViewHost.archiveStates<A>(_:to:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int16 *)(v1 + 56) | (*(unsigned __int8 *)(v1 + 58) << 16));
}

uint64_t sub_187994F08()
{
  return swift_deallocObject();
}

id partial apply for implicit closure #2 in implicit closure #1 in _ArchivedViewHost.addDisplayList(_:to:)(uint64_t a1)
{
  return objc_msgSend(*(id *)(v1 + 16), sel_addDisplayList_, a1);
}

unint64_t type metadata accessor for RBEncoderSet()
{
  unint64_t result = lazy cache variable for type metadata for RBEncoderSet;
  if (!lazy cache variable for type metadata for RBEncoderSet)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBEncoderSet);
  }
  return result;
}

uint64_t sub_187994F94()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t type metadata accessor for _ArchivedViewHost.LegacyStates()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #2 in closure #1 in _ArchivedViewHost.archiveIfChanged()(uint64_t a1)
{
  return closure #2 in closure #1 in _ArchivedViewHost.archiveIfChanged()(a1, *(uint64_t **)(v1 + 16));
}

uint64_t type metadata accessor for _ArchivedViewHost.ArchiveHostViewGraph()
{
  return swift_getGenericMetadata();
}

void *initializeWithCopy for _ArchivedViewHost.LegacyStates(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _ArchivedViewHost.LegacyStates(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ArchivedViewHost.LegacyStates(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t specialized _ArchivedViewHost.ArchiveHostViewGraph.modifyViewInputs(inputs:graph:)(uint64_t a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (char *)(result + direct field offset for _ArchivedViewHost.archiveOptions);
    PropertyList.subscript.setter();
    lazy protocol witness table accessor for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider();
    _ViewInputs.textAlwaysOnProvider.setter();
    char v5 = *v4;
    if ((*v4 & 2) != 0)
    {
      swift_retain();
      _ViewInputs.configureStableIDs(root:)();
      swift_release();
      char v5 = *v4;
    }
    char v6 = v4[1];
    uint64_t v7 = (unsigned char *)(v3 + direct field offset for _ArchivedViewHost.instantiatedArchiveOptions);
    *uint64_t v7 = v5;
    v7[1] = v6;
    *(_DWORD *)(a1 + 36) |= 1u;
    _ViewInputs.configureForArchivingAccessibility()();
    return swift_release();
  }
  return result;
}

uint64_t PasteHelper.validatedPasteHandler.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a3;
  CFStringRef v27 = (uint64_t (*)(unint64_t))a2;
  type metadata accessor for IndexSet?(0);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IndexSet();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay22UniformTypeIdentifiers6UTTypeVG_SSs5NeverOTg5055_s7SwiftUI11PasteHelperV09validatedC7HandleryycSgvgSS22de12Identifiers6G54Vcfu_33_464cb2da6335d584e794ab09e778cff4AHSSTf3nnnpk_nTf1cn_n(v14);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(self, sel_generalPasteboard);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v15, sel_itemSetWithPasteboardTypes_, isa);

  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_7;
  }
  static IndexSet._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v18(v6, v10, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_7:

    outlined destroy of UTType?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for IndexSet?);
    return 0;
  }
  uint64_t v19 = (uint64_t)v13;
  v18(v13, v6, v7);
  swift_bridgeObjectRetain();
  id v20 = v15;
  uint64_t v21 = v26;
  swift_retain();
  uint64_t v22 = v27;
  unint64_t v23 = specialized Sequence.compactMap<A>(_:)(v19, v20, a1, (uint64_t)v27, v21);

  swift_release();
  swift_bridgeObjectRelease();
  if (v23 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v19, v7);
    swift_bridgeObjectRelease();

    return 0;
  }
LABEL_5:
  uint64_t v24 = v22(v23);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v19, v7);
  return v24;
}

uint64_t closure #1 in PasteHelper.validatedPasteHandler.getter@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  char v74 = a5;
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v69 = a2;
  type metadata accessor for UTType?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v72 = (char *)v60 - v10;
  uint64_t v11 = type metadata accessor for UTType();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v68 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v78 = (char *)v60 - v15;
  MEMORY[0x1F4188790](v16);
  unint64_t v77 = (char *)v60 - v17;
  uint64_t v66 = v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v60 - v20;
  uint64_t v22 = type metadata accessor for IndexSet();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v67 = (char *)v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v24;
  MEMORY[0x1F4188790](v25);
  CFStringRef v27 = (char *)v60 - v26;
  IndexSet.init(integer:)();
  uint64_t v73 = v27;
  IndexSet._bridgeToObjectiveC()(v28);
  uint64_t v30 = v29;
  id v31 = objc_msgSend(a1, sel_pasteboardTypesForItemSet_, v29);

  if (!v31) {
    goto LABEL_15;
  }
  type metadata accessor for [String]();
  uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v32 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v73, v22);
    id v46 = 0;
LABEL_20:
    uint64_t v44 = v74;
    goto LABEL_21;
  }
  Swift::String v63 = a1;
  Swift::String v64 = v21;
  uint64_t v33 = *(void *)(v32 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(v33 + 16);
  if (v34)
  {
    uint64_t v61 = v23;
    uint64_t v62 = v22;
    uint64_t v35 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    uint64_t v76 = v12;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v12 + 32);
    swift_bridgeObjectRetain();
    v60[1] = v33;
    uint64_t v37 = v33 + 40;
    uint64_t v38 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v75 = v11;
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*v35)(v8, 1, v11) == 1)
      {
        outlined destroy of UTType?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UTType?);
      }
      else
      {
        uint64_t v39 = *v36;
        uint64_t v40 = v77;
        (*v36)(v77, v8, v11);
        v39(v78, v40, v11);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v38 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        }
        unint64_t v42 = v38[2];
        unint64_t v41 = v38[3];
        if (v42 >= v41 >> 1) {
          uint64_t v38 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, v38);
        }
        v38[2] = v42 + 1;
        unint64_t v43 = (unint64_t)v38
            + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80))
            + *(void *)(v76 + 72) * v42;
        uint64_t v11 = v75;
        v39((char *)v43, v78, v75);
      }
      v37 += 16;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
    uint64_t v44 = v74;
    uint64_t v12 = v76;
    uint64_t v23 = v61;
    uint64_t v22 = v62;
  }
  else
  {
    uint64_t v38 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v44 = v74;
  }
  swift_bridgeObjectRelease();
  uint64_t v47 = v72;
  PasteHelper.availableType(from:)((uint64_t)v38, v69, v72);
  swift_bridgeObjectRelease();
  int v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v47, 1, v11);
  uint64_t v49 = v63;
  if (v48 != 1)
  {
    unint64_t v77 = *(char **)(v12 + 32);
    uint64_t v78 = (char *)(v12 + 32);
    ((void (*)(char *, char *, uint64_t))v77)(v64, v47, v11);
    id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28D78]), sel_init);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v68, v64, v11);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v67, v73, v22);
    uint64_t v50 = v23;
    uint64_t v51 = v12;
    uint64_t v52 = v22;
    uint64_t v53 = v11;
    unint64_t v54 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    unint64_t v55 = (v66 + *(unsigned __int8 *)(v50 + 80) + v54) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v49;
    ((void (*)(unint64_t, char *, uint64_t))v77)(v56 + v54, v68, v53);
    uint64_t v57 = v52;
    (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v56 + v55, v67, v52);
    id v58 = v49;
    char v59 = v64;
    NSItemProvider.registerDataRepresentation(for:visibility:loadHandler:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v59, v53);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v73, v57);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v73, v22);
  uint64_t result = outlined destroy of UTType?((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for UTType?);
  id v46 = 0;
LABEL_21:
  *uint64_t v44 = v46;
  return result;
}

uint64_t PasteHelper.availableType(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  type metadata accessor for UTType?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v72 = (char *)&v59 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v59 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v75 = (char *)&v59 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v61 = (char *)&v59 - v21;
  uint64_t v62 = v12;
  uint64_t v71 = *(void *)(a2 + 16);
  uint64_t v64 = v10;
  uint64_t v65 = a3;
  uint64_t v63 = a2;
  uint64_t v69 = a1;
  if (!v71)
  {
    swift_bridgeObjectRetain();
LABEL_19:
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v39(v8, 1, 1, v9);
LABEL_20:
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      outlined destroy of UTType?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UTType?);
      if (v71)
      {
        uint64_t v40 = *(void *)(a1 + 16);
        uint64_t v41 = v10 + 16;
        unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
        unint64_t v43 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        uint64_t v44 = (char *)(a2 + v43);
        uint64_t v45 = *(void *)(v41 + 56);
        uint64_t v75 = (char *)v39;
        uint64_t v76 = (void (**)(char *, uint64_t))(a1 + v43);
        id v46 = (void (**)(char *, uint64_t))(v41 - 8);
        swift_bridgeObjectRetain();
        uint64_t v47 = 0;
        uint64_t v77 = (v41 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        int v48 = v72;
        uint64_t v73 = v44;
        uint64_t v74 = v40;
        while (1)
        {
          v42(v48, &v44[v45 * v47], v9);
          if (v40) {
            break;
          }
          uint64_t v52 = *v46;
LABEL_29:
          ++v47;
          v52(v48, v9);
          if (v47 == v71)
          {
            swift_bridgeObjectRelease();
            uint64_t v53 = 1;
            unint64_t v54 = v65;
            return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v75)(v54, v53, 1, v9);
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v49 = v76;
        uint64_t v50 = v40;
        uint64_t v51 = v62;
        while (1)
        {
          v42(v51, (char *)v49, v9);
          if (UTType.conforms(to:)()) {
            break;
          }
          uint64_t v52 = *v46;
          (*v46)(v51, v9);
          uint64_t v49 = (void (**)(char *, uint64_t))((char *)v49 + v45);
          if (!--v50)
          {
            swift_bridgeObjectRelease();
            int v48 = v72;
            uint64_t v44 = v73;
            uint64_t v40 = v74;
            goto LABEL_29;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v58 = v64;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v72, v9);
        swift_bridgeObjectRelease();
        unint64_t v54 = v65;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v65, v51, v9);
        uint64_t v53 = 0;
        return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v75)(v54, v53, 1, v9);
      }
      uint64_t v57 = 1;
    }
    else
    {
      unint64_t v55 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      uint64_t v56 = v61;
      v55(v61, v8, v9);
      v55(a3, v56, v9);
      uint64_t v57 = 0;
    }
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v39)(a3, v57, 1, v9);
  }
  char v59 = v8;
  uint64_t v24 = *(char **)(v10 + 16);
  uint64_t v23 = v10 + 16;
  uint64_t v22 = v24;
  unint64_t v25 = (*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64);
  uint64_t v70 = a2 + v25;
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(v23 + 56);
  uint64_t v76 = (void (**)(char *, uint64_t))(v23 - 8);
  uint64_t v77 = v26;
  uint64_t v68 = a1 + v25;
  uint64_t v66 = a1 + v25 + v27;
  swift_bridgeObjectRetain_n();
  uint64_t v28 = 0;
  uint64_t v73 = v24;
  uint64_t v74 = v27;
  uint64_t v60 = a1 + v25 + 2 * v27;
  long long v29 = v75;
  while (1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v22)(v29, v70 + v74 * v28, v9);
    if (v77) {
      break;
    }
    uint64_t v30 = *v76;
LABEL_4:
    ++v28;
    v30(v29, v9);
    if (v28 == v71)
    {
      a2 = v63;
      swift_bridgeObjectRelease();
      uint64_t v10 = v64;
      a3 = v65;
      uint64_t v8 = v59;
      goto LABEL_19;
    }
  }
  uint64_t v31 = v23;
  ((void (*)(char *, uint64_t, uint64_t))v22)(v17, v68, v9);
  lazy protocol witness table accessor for type UTType and conformance UTType((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  swift_bridgeObjectRetain();
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *v76;
  (*v76)(v17, v9);
  if (v32) {
    goto LABEL_16;
  }
  if (v77 == 1)
  {
    a1 = v69;
    swift_bridgeObjectRelease();
    long long v29 = v75;
    uint64_t v22 = v73;
    goto LABEL_4;
  }
  uint64_t v67 = (unint64_t)v76 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  ((void (*)(char *, uint64_t, uint64_t))v73)(v17, v66, v9);
  char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  v30(v17, v9);
  if (v33)
  {
LABEL_16:
    a2 = v63;
    swift_bridgeObjectRelease();
    a1 = v69;
    swift_bridgeObjectRelease();
    uint64_t v10 = v64;
    uint64_t v8 = v59;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v59, v75, v9);
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v39(v8, 0, 1, v9);
    a3 = v65;
    goto LABEL_20;
  }
  if (v77 == 2)
  {
LABEL_15:
    a1 = v69;
    swift_bridgeObjectRelease();
    long long v29 = v75;
    uint64_t v23 = v31;
    uint64_t v22 = v73;
    goto LABEL_4;
  }
  uint64_t v34 = v60;
  uint64_t v35 = 2;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v73)(v17, v34, v9);
    uint64_t v37 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30(v17, v9);
    if (v38) {
      goto LABEL_16;
    }
    ++v35;
    v34 += v74;
    if (v37 == v77) {
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in PasteHelper.validatedPasteHandler.getter(void (*a1)(id, unint64_t, void), uint64_t a2, void *a3)
{
  uint64_t v5 = UTType.identifier.getter();
  uint64_t v6 = (void *)MEMORY[0x18C115780](v5);
  swift_bridgeObjectRelease();
  IndexSet._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  id v10 = objc_msgSend(a3, sel_dataForPasteboardType_inItemSet_, v6, v8);

  if (v10)
  {
    uint64_t v11 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v11[2])
    {
      id v10 = (id)v11[4];
      unint64_t v12 = v11[5];
      outlined copy of Data._Representation((uint64_t)v10, v12);
    }
    else
    {
      id v10 = 0;
      unint64_t v12 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v12 = 0xF000000000000000;
  }
  a1(v10, v12, 0);
  outlined consume of Data?((uint64_t)v10, v12);
  return 0;
}

Swift::Bool __swiftcall PasteHelper.canPaste(_:)(Swift::OpaquePointer_optional a1)
{
  uint64_t v29 = v1;
  uint64_t v30 = v2;
  uint64_t v28 = *(void *)&a1.is_nil;
  rawuint64_t Value = (unint64_t)a1.value._rawValue;
  type metadata accessor for UTType?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v31 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (rawValue)
  {
    unint64_t v6 = rawValue;
    if (!(rawValue >> 62)) {
      goto LABEL_3;
    }
LABEL_25:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v7 = v8;
    if (v8) {
      goto LABEL_4;
    }
LABEL_26:
    id v10 = (void *)MEMORY[0x1E4FBC860];
LABEL_27:
    swift_bridgeObjectRelease_n();
    uint64_t v24 = v31;
    PasteHelper.availableType(from:)((uint64_t)v10, v28, v31);
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for UTType();
    BOOL v26 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25) != 1;
    outlined destroy of UTType?((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for UTType?);
    LOBYTE(v8) = v26;
    return v8;
  }
  id v22 = objc_msgSend(self, sel_generalPasteboard, v28, v29, v30);
  id v23 = objc_msgSend(v22, sel_itemProviders);

  type metadata accessor for NSItemProvider();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62) {
    goto LABEL_25;
  }
LABEL_3:
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  LOBYTE(v8) = swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_26;
  }
LABEL_4:
  if (v7 < 1) {
    goto LABEL_32;
  }
  uint64_t v9 = 0;
  id v10 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    id v11 = (v6 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](v9, v6) : *(id *)(v6 + 8 * v9 + 32);
    unint64_t v12 = v11;
    id v13 = objc_msgSend(v11, sel_registeredContentTypes, v28);
    type metadata accessor for UTType();
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v15 = *(void *)(v14 + 16);
    int64_t v16 = v10[2];
    int64_t v17 = v16 + v15;
    if (__OFADD__(v16, v15)) {
      break;
    }
    LODWORD(v8) = swift_isUniquelyReferenced_nonNull_native();
    if (v8 && v17 <= v10[3] >> 1)
    {
      if (*(void *)(v14 + 16)) {
        goto LABEL_20;
      }
    }
    else
    {
      if (v16 <= v17) {
        int64_t v18 = v16 + v15;
      }
      else {
        int64_t v18 = v16;
      }
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v18, 1, v10);
      id v10 = (void *)v8;
      if (*(void *)(v14 + 16))
      {
LABEL_20:
        if ((v10[3] >> 1) - v10[2] < v15) {
          goto LABEL_30;
        }
        LOBYTE(v8) = swift_arrayInitWithCopy();
        if (v15)
        {
          uint64_t v19 = v10[2];
          BOOL v20 = __OFADD__(v19, v15);
          uint64_t v21 = v19 + v15;
          if (v20) {
            goto LABEL_31;
          }
          void v10[2] = v21;
        }
        goto LABEL_7;
      }
    }
    if (v15) {
      goto LABEL_29;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    if (v7 == ++v9) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return v8;
}

uint64_t (*closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t v6[2] = a2;
  v6[3] = a3;
  void v6[4] = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:);
}

uint64_t PasteHelper.init<A>(onPaste:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = static Transferable.readableContentTypes.getter();
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = a3;
  v9[3] = a4;
  v9[4] = a1;
  v9[5] = a2;
  return v8;
}

uint64_t (*closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  id v10 = (void *)swift_allocObject();
  void v10[2] = a4;
  v10[3] = a5;
  v10[4] = a1;
  _OWORD v10[5] = a2;
  void v10[6] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  return partial apply for closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
}

uint64_t closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_1(0, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  unint64_t v12 = (char *)v17 - v11;
  v17[0] = a1;
  type metadata accessor for [NSItemProvider](0);
  swift_bridgeObjectRetain();
  AtomicBox.init(wrappedValue:)();
  uint64_t v13 = v17[1];
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = 0;
  v15[3] = 0;
  v15[4] = a4;
  v15[5] = a5;
  v15[6] = v13;
  v15[7] = a2;
  v15[8] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:), (uint64_t)v15);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  void v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  uint64_t v10 = type metadata accessor for Optional();
  v8[10] = v10;
  v8[11] = *(void *)(v10 - 8);
  v8[12] = swift_task_alloc();
  v8[13] = *(void *)(a7 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)()
{
  *(void *)(v0 + 16) = Array.init()();
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_1(0, &lazy cache variable for type metadata for AtomicBox<[NSItemProvider]>, (uint64_t (*)(uint64_t))type metadata accessor for [NSItemProvider], MEMORY[0x1E4F417E8]);
  uint64_t v1 = AtomicBox.wrappedValue.getter();
  unint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v0 + 128) = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v1 = swift_bridgeObjectRelease();
    *(void *)(v0 + 136) = v5;
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    *(void *)(v0 + 136) = v5;
    if (v5)
    {
LABEL_3:
      if (v5 < 1)
      {
        __break(1u);
      }
      else
      {
        *(void *)(v0 + 144) = 0;
        uint64_t v6 = *(void *)(v0 + 128);
        if ((v6 & 0xC000000000000001) != 0) {
          id v7 = (id)MEMORY[0x18C117680](0);
        }
        else {
          id v7 = *(id *)(v6 + 32);
        }
        id v8 = v7;
        *(void *)(v0 + 152) = v7;
        uint64_t v9 = swift_task_alloc();
        *(void *)(v0 + 16outlined consume of Text?(0, 0, 0, 0) = v9;
        *(void *)uint64_t v9 = v0;
        *(void *)(v9 + 8) = closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
        uint64_t v10 = *(void *)(v0 + 96);
        long long v11 = *(_OWORD *)(v0 + 64);
        *(void *)(v9 + 4outlined consume of Text?(0, 0, 0, 0) = v8;
        *(_OWORD *)(v9 + 24) = v11;
        *(void *)(v9 + 16) = v10;
        uint64_t v1 = (uint64_t)NSItemProvider.loadTransferable<A>(for:);
        uint64_t v2 = 0;
        uint64_t v3 = 0;
      }
      return MEMORY[0x1F4188298](v1, v2, v3);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v0 + 16);
  *(void *)(v0 + 32) = v12;
  type metadata accessor for Array();
  swift_getWitnessTable();
  if ((Collection.isEmpty.getter() & 1) == 0) {
    (*(void (**)(uint64_t))(v0 + 48))(v12);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

{
  void *v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
  }
  else
  {
    uint64_t v1 = closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;

  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  unint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 64);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v4, 0, 1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v4, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v6);
  type metadata accessor for Array();
  Array.append(_:)();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v6);
  id v7 = *(void *)(v0 + 144) + 1;
  if (v7 == *(void *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    id v8 = *(void *)(v0 + 16);
    *(void *)(v0 + 32) = v8;
    type metadata accessor for Array();
    swift_getWitnessTable();
    if ((Collection.isEmpty.getter() & 1) == 0) {
      (*(void (**)(uint64_t))(v0 + 48))(v8);
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    *(void *)(v0 + 144) = v7;
    long long v11 = *(void *)(v0 + 128);
    if ((v11 & 0xC000000000000001) != 0) {
      uint64_t v12 = (id)MEMORY[0x18C117680]();
    }
    else {
      uint64_t v12 = *(id *)(v11 + 8 * v7 + 32);
    }
    uint64_t v13 = v12;
    *(void *)(v0 + 152) = v12;
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 16outlined consume of Text?(0, 0, 0, 0) = v14;
    *(void *)uint64_t v14 = v0;
    *(void *)(v14 + 8) = closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
    uint64_t v15 = *(void *)(v0 + 96);
    int64_t v16 = *(_OWORD *)(v0 + 64);
    *(void *)(v14 + 4outlined consume of Text?(0, 0, 0, 0) = v13;
    *(_OWORD *)(v14 + 24) = v16;
    *(void *)(v14 + 16) = v15;
    return MEMORY[0x1F4188298](NSItemProvider.loadTransferable<A>(for:), 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  uint64_t v15;

  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  unint64_t v4 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 104) + 56))(v2, 1, 1, *(void *)(v0 + 64));

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v5 = *(void *)(v0 + 144) + 1;
  if (v5 == *(void *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 16);
    *(void *)(v0 + 32) = v6;
    type metadata accessor for Array();
    swift_getWitnessTable();
    if ((Collection.isEmpty.getter() & 1) == 0) {
      (*(void (**)(uint64_t))(v0 + 48))(v6);
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  else
  {
    *(void *)(v0 + 144) = v5;
    uint64_t v9 = *(void *)(v0 + 128);
    if ((v9 & 0xC000000000000001) != 0) {
      uint64_t v10 = (id)MEMORY[0x18C117680]();
    }
    else {
      uint64_t v10 = *(id *)(v9 + 8 * v5 + 32);
    }
    long long v11 = v10;
    *(void *)(v0 + 152) = v10;
    uint64_t v12 = swift_task_alloc();
    *(void *)(v0 + 16outlined consume of Text?(0, 0, 0, 0) = v12;
    *(void *)uint64_t v12 = v0;
    *(void *)(v12 + 8) = closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v14 = *(_OWORD *)(v0 + 64);
    *(void *)(v12 + 4outlined consume of Text?(0, 0, 0, 0) = v11;
    *(_OWORD *)(v12 + 24) = v14;
    *(void *)(v12 + 16) = v13;
    return MEMORY[0x1F4188298](NSItemProvider.loadTransferable<A>(for:), 0, 0);
  }
}

uint64_t NSItemProvider.loadTransferable<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a4;
  uint64_t v5[5] = v4;
  _OWORD v5[2] = a1;
  v5[3] = a3;
  return MEMORY[0x1F4188298](NSItemProvider.loadTransferable<A>(for:), 0, 0);
}

uint64_t NSItemProvider.loadTransferable<A>(for:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = NSItemProvider.loadTransferable<A>(for:);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  return MEMORY[0x1F4188160](v4, 0, 0, 0xD000000000000016, 0x800000018832D9D0, partial apply for closure #1 in NSItemProvider.loadTransferable<A>(for:), v2, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](NSItemProvider.loadTransferable<A>(for:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in NSItemProvider.loadTransferable<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Error();
  uint64_t v7 = type metadata accessor for CheckedContinuation();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  long long v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v15 - v10, a1, v7, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, v11, v7);
  uint64_t v14 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();
  swift_release();
}

uint64_t closure #1 in closure #1 in NSItemProvider.loadTransferable<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v17 - v9;
  type metadata accessor for Error();
  uint64_t v11 = type metadata accessor for Result();
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (void *)((char *)v17 - v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)v17 - v13, a1, v11, v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17[1] = *v14;
    type metadata accessor for CheckedContinuation();
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v5 + 32))(v10, v14, a3);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, a3);
    type metadata accessor for CheckedContinuation();
    CheckedContinuation.resume(returning:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, a3);
  }
}

void PasteHelper.ConfigurationSupport.pasteHelper.didset(uint64_t a1)
{
  uint64_t v30 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper);
  if (v6)
  {
    swift_bridgeObjectRetain();
    if (a1 && (specialized static Array<A>.== infix(_:_:)(v6, a1) & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      int64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        uint64_t v26 = v1;
        uint64_t v31 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
        uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
        uint64_t v8 = v3 + 16;
        uint64_t v10 = *(unsigned __int8 *)(v8 + 64);
        v25[1] = v6;
        uint64_t v11 = v6 + ((v10 + 32) & ~v10);
        uint64_t v27 = *(void *)(v8 + 56);
        uint64_t v28 = v9;
        uint64_t v29 = v8;
        double v12 = (void (**)(char *, uint64_t))(v8 - 8);
        do
        {
          uint64_t v13 = v30;
          v28(v5, v11, v30);
          uint64_t v14 = UTType.identifier.getter();
          uint64_t v16 = v15;
          (*v12)(v5, v13);
          uint64_t v17 = v31;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
            uint64_t v17 = v31;
          }
          unint64_t v19 = *(void *)(v17 + 16);
          unint64_t v18 = *(void *)(v17 + 24);
          if (v19 >= v18 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1);
            uint64_t v17 = v31;
          }
          *(void *)(v17 + 16) = v19 + 1;
          uint64_t v20 = v17 + 16 * v19;
          *(void *)(v20 + 32) = v14;
          *(void *)(v20 + 4outlined consume of Text?(0, 0, 0, 0) = v16;
          v11 += v27;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        uint64_t v1 = v26;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      id v21 = objc_allocWithZone(MEMORY[0x1E4FB1A60]);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = objc_msgSend(v21, sel_initWithAcceptableTypeIdentifiers_, isa);

      uint64_t v24 = *(void **)(v1 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteConfiguration);
      *(void *)(v1 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteConfiguration) = v23;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for PasteHelper.ConfigurationSupport()
{
  return self;
}

ValueMetadata *type metadata accessor for PasteHelper()
{
  return &type metadata for PasteHelper;
}

unint64_t type metadata accessor for NSItemProvider()
{
  unint64_t result = lazy cache variable for type metadata for NSItemProvider;
  if (!lazy cache variable for type metadata for NSItemProvider)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSItemProvider);
  }
  return result;
}

void type metadata accessor for IndexSet?(uint64_t a1)
{
}

uint64_t outlined destroy of UTType?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v40 = type metadata accessor for IndexSet.Index();
  uint64_t v6 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v44 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = (char *)&v32 - v9;
  uint64_t v10 = type metadata accessor for IndexSet();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexSet>();
  uint64_t v15 = v14 - 8;
  double v16 = MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = MEMORY[0x1E4FBC860];
  char v33 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v33(v13, a1, v10, v16);
  lazy protocol witness table accessor for type UTType and conformance UTType(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
  uint64_t v34 = v13;
  dispatch thunk of Sequence.makeIterator()();
  unint64_t v19 = &v18[*(int *)(v15 + 44)];
  unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  unint64_t v43 = v18;
  uint64_t v45 = v6 + 16;
  uint64_t v41 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v35 = v11 + 16;
  char v32 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v20 = v40;
  v42(v47, v19, v40);
  while (1)
  {
    lazy protocol witness table accessor for type UTType and conformance UTType(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
    id v21 = v19;
    id v22 = v44;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type UTType and conformance UTType((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x1E4F27CC8]);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v24 = *v41;
    (*v41)(v22, v20);
    v24(v47, v20);
    if (v23)
    {
      outlined destroy of UTType?((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for IndexingIterator<IndexSet>);
      return v50;
    }
    unint64_t v19 = v21;
    uint64_t v25 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v27 = *v26;
    v25(v49, 0);
    uint64_t v28 = v34;
    ((void (*)(char *, char *, uint64_t))v33)(v34, v18, v10);
    dispatch thunk of Collection.formIndex(after:)();
    (*v32)(v28, v10);
    v49[0] = v27;
    uint64_t v29 = v46;
    uint64_t v30 = closure #1 in PasteHelper.validatedPasteHandler.getter(v36, v37, v38, v39, &v48);
    if (v29) {
      break;
    }
    if (v48)
    {
      MEMORY[0x18C115B40](v30);
      if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v46 = 0;
    v42(v47, v21, v20);
  }
  outlined destroy of UTType?((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for IndexingIterator<IndexSet>);
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type UTType and conformance UTType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for [String]()
{
  if (!lazy cache variable for type metadata for [String])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [String]);
    }
  }
}

uint64_t sub_187998620()
{
  uint64_t v1 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for IndexSet();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in PasteHelper.validatedPasteHandler.getter(void (*a1)(id, unint64_t, void), uint64_t a2)
{
  type metadata accessor for UTType();
  type metadata accessor for IndexSet();
  uint64_t v5 = *(void **)(v2 + 16);

  return closure #2 in closure #1 in PasteHelper.validatedPasteHandler.getter(a1, a2, v5);
}

uint64_t sub_187998860()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t (*partial apply for closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1))()
{
  return closure #1 in PasteHelper.init<A>(onPaste:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_1879988A4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)()
{
  return closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

void type metadata accessor for [NSItemProvider](uint64_t a1)
{
}

uint64_t sub_187998928()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(a1, v6, v7, v8, v9, v10, v4, v5);
}

void partial apply for closure #1 in NSItemProvider.loadTransferable<A>(for:)(uint64_t a1)
{
  closure #1 in NSItemProvider.loadTransferable<A>(for:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_187998A58()
{
  type metadata accessor for Error();
  uint64_t v1 = type metadata accessor for CheckedContinuation();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.loadTransferable<A>(for:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  type metadata accessor for Error();
  uint64_t v4 = *(void *)(type metadata accessor for CheckedContinuation() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #1 in closure #1 in NSItemProvider.loadTransferable<A>(for:)(a1, v5, v3);
}

uint64_t sub_187998BA0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t assignWithCopy for NavigationSplitReader(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of HoverCallback();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of HoverCallback();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = a2[5];
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  *(_WORD *)(a1 + 5outlined consume of Text?(0, 0, 0, 0) = *((_WORD *)a2 + 25);
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *((unsigned char *)a2 + 80);
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  return a1;
}

uint64_t assignWithTake for NavigationSplitReader(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of HoverCallback();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_WORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_WORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitReader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 82)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitReader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 8outlined consume of Text?(0, 0, 0, 0) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4outlined consume of Text?(0, 0, 0, 0) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 82) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t specialized Location.update()(unsigned char *a1)
{
  Swift::UInt v3 = *(void *)(v1 + 24);
  unsigned __int8 v4 = *(unsigned char *)(v1 + 32);
  Swift::UInt v5 = *(void *)(v1 + 40);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_beginAccess();
    outlined init with take of NavigationAuthority?(Strong + 16, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of NavigationAuthority?((uint64_t)v9, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v10) == 1)
    {
      LOBYTE(Strong) = 0;
    }
    else
    {
      outlined init with take of NavigationAuthority?((uint64_t)v9, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      LOBYTE(Strong) = NavigationState.canDismissRoot(of:)(v3, v4, v5);
      outlined retain of NavigationState?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    }
  }
  *a1 = Strong & 1;
  return 1;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitReader()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double protocol witness for static StatefulRule.initialValue.getter in conformance _NavigationSplitReader.DerivedAttributes@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_18834FC50;
  return result;
}

unint64_t implicit closure #2 in _NavigationSplitReader.UpdatePreferredCompactColumn.updateValue()()
{
  return 0xD000000000000025;
}

uint64_t _NavigationSplitReader.PreparedColumn.authority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4FBB718];
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  return _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(Value, a1, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v2, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
}

void protocol witness for static Rule.initialValue.getter in conformance _NavigationSplitReader.CustomParameters(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t protocol witness for Rule.value.getter in conformance _NavigationSplitReader.CustomParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _NavigationSplitReader.CustomParameters.value.getter(*(void *)v1, *(_DWORD *)(v1 + 8));
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6 & 1;
  *(unsigned char *)(a1 + 25) = v7 & 1;
  *(unsigned char *)(a1 + 26) = v8 & 1;
  return result;
}

uint64_t _NavigationSplitReader.PreparedColumn.columnSeeds.getter()
{
  return StatefulRule.withObservation<A>(do:)();
}

uint64_t closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for _NavigationSplitReader.PreparedColumn();
  uint64_t result = _NavigationSplitReader.PreparedColumn.authority.getter((uint64_t)v14);
  if (v15 != 1)
  {
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t result = outlined destroy of NavigationAuthority((uint64_t)v14);
    if (Strong)
    {
      uint64_t v4 = *(void *)(Strong + 176);
      swift_retain();
      swift_release();
      Swift::UInt v5 = _NavigationSplitReader.PreparedColumn.key.getter();
      unsigned __int8 v7 = v6;
      Swift::UInt v9 = v8;
      swift_getKeyPath();
      lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost(&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, (void (*)(uint64_t))type metadata accessor for NavigationSelectionHost);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v10 = *(void *)(v4 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      if (*(void *)(v10 + 16))
      {
        unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7, v9);
        if (v12)
        {
          int v13 = *(_DWORD *)(*(void *)(v10 + 56) + 4 * v11);
          uint64_t result = swift_bridgeObjectRelease();
LABEL_8:
          *a1 = v13;
          return result;
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
    int v13 = 0;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t _NavigationSplitReader.PreparedColumn.key.getter()
{
  uint64_t v0 = *(void *)AGGraphGetValue();
  AGGraphGetValue();
  return v0;
}

uint64_t _NavigationSplitReader.PreparedColumn.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v80 = *(void *)(*(void *)(a1 + 16) - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v79 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = v5;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v84 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  Swift::UInt v8 = (char *)&v76 - v7;
  type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
  uint64_t v85 = v6;
  uint64_t v82 = v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v88 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v86 = (char *)&v76 - v11;
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, MEMORY[0x1E4F411E8]);
  uint64_t v89 = v10;
  uint64_t v83 = v12;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v90 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v87 = (char *)&v76 - v14;
  uint64_t v15 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = static SemanticFeature.isEnabled.getter();
  uint64_t v91 = v13;
  if ((v18 & 1) != 0 && !v2[4])
  {
    uint64_t v77 = v8;
    uint64_t v24 = *v2;
    char v25 = *((unsigned char *)v2 + 8);
    uint64_t v26 = *(uint64_t *)((char *)v2 + 12);
    int v27 = *((_DWORD *)v2 + 5);
    *(void *)&long long v19 = v2[3];
    long long v78 = v19;
    Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
    uint64_t v76 = v3;
    if (WeakValue) {
      uint64_t v29 = *WeakValue;
    }
    else {
      uint64_t v29 = 0;
    }
    if (WeakValue) {
      int v30 = v29;
    }
    else {
      int v30 = -1;
    }
    if (WeakValue) {
      int v31 = HIDWORD(v29);
    }
    else {
      int v31 = -1;
    }
    type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for MutableBox<NavigationState.Seeds>, (uint64_t)&type metadata for NavigationState.Seeds, MEMORY[0x1E4F3F398]);
    uint64_t v32 = swift_allocObject();
    *(_DWORD *)(v32 + 16) = v30;
    *(_DWORD *)(v32 + 2outlined consume of Text?(0, 0, 0, 0) = v31;
    swift_release();
    v2[5] = v32;
    uint64_t v117 = v24;
    char v118 = v25;
    uint64_t v119 = v26;
    int v120 = v27;
    long long v121 = (unint64_t)v78;
    uint64_t v122 = v32;
    uint64_t v33 = v76;
    uint64_t result = _NavigationSplitReader.PreparedColumn.authority.getter((uint64_t)v107);
    if (*((void *)&v107[0] + 1) == 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v35 = _NavigationSplitReader.PreparedColumn.key.getter();
    char v37 = v36;
    uint64_t v39 = v38;
    outlined init with take of NavigationAuthority((uint64_t)v107, (uint64_t)v17);
    *((void *)v17 + 3) = v35;
    v17[32] = v37;
    *((void *)v17 + 5) = v39;
    uint64_t v3 = v33;
    swift_retain();
    UUID.init()();
    *(void *)&v17[*(int *)(v15 + 28)] = v32;
    type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>();
    swift_allocObject();
    v2[4] = LocationBox.init(_:)();
    Swift::UInt v8 = v77;
  }
  else
  {
    uint64_t v20 = v2[5];
    if (v20)
    {
      id v21 = (int *)AGGraphGetWeakValue();
      if (v21)
      {
        int v23 = *v21;
        int v22 = v21[1];
        swift_beginAccess();
        if (*(_DWORD *)(v20 + 16) != v23 || *(_DWORD *)(v20 + 20) != v22)
        {
          *(_DWORD *)(v20 + 16) = v23;
          *(_DWORD *)(v20 + 2outlined consume of Text?(0, 0, 0, 0) = v22;
        }
      }
    }
  }
  long long v40 = *((_OWORD *)v2 + 1);
  long long v114 = *(_OWORD *)v2;
  long long v115 = v40;
  long long v116 = *((_OWORD *)v2 + 2);
  _NavigationSplitReader.PreparedColumn.authority.getter((uint64_t)v112);
  if (v113 == 1) {
    __break(1u);
  }
  uint64_t v41 = _NavigationSplitReader.PreparedColumn.key.getter();
  int v43 = v42;
  Swift::UInt v45 = v44;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    LODWORD(v77) = v43;
    *(void *)&long long v78 = v41;
    uint64_t v47 = Strong + 16;
    swift_beginAccess();
    outlined init with take of NavigationAuthority?(v47, (uint64_t)&v104, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)&v104, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of NavigationAuthority?((uint64_t)&v104, (uint64_t)v107, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v107) == 1)
    {
      LODWORD(v78) = 0;
    }
    else
    {
      outlined init with take of NavigationAuthority?((uint64_t)&v104, (uint64_t)v102, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      long long v98 = v102[6];
      long long v99 = v102[7];
      long long v100 = v102[8];
      __int16 v101 = v103;
      long long v94 = v102[2];
      long long v95 = v102[3];
      long long v96 = v102[4];
      long long v97 = v102[5];
      long long v92 = v102[0];
      long long v93 = v102[1];
      LODWORD(v78) = NavigationState.canDismissRoot(of:)(v78, v77, v45);
      outlined retain of NavigationState?((uint64_t)&v104, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    }
  }
  else
  {
    LODWORD(v78) = 0;
  }
  outlined destroy of NavigationAuthority((uint64_t)v112);
  long long v48 = *((_OWORD *)v2 + 1);
  v107[0] = *(_OWORD *)v2;
  v107[1] = v48;
  v107[2] = *((_OWORD *)v2 + 2);
  _NavigationSplitReader.PreparedColumn.key.getter();
  uint64_t v50 = v8;
  if (v49 == 1)
  {
    BOOL v51 = 1;
  }
  else
  {
    _NavigationSplitReader.PreparedColumn.key.getter();
    BOOL v51 = v52 == 2;
  }
  uint64_t v53 = v81;
  uint64_t Value = AGGraphGetValue();
  unint64_t v55 = v79;
  uint64_t v56 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, Value, v53);
  *(void *)&long long v104 = _NavigationSplitReader.PreparedColumn.key.getter();
  *((void *)&v104 + 1) = v57;
  *(void *)&long long v105 = v58;
  *((void *)&v105 + 1) = -1;
  uint64_t v59 = *(void *)(v3 + 24);
  MEMORY[0x18C113660](&v104, v53, &type metadata for InjectKeyModifier, v59);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v53);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v61 = v2[4];
  uint64_t v62 = swift_allocObject();
  *(unsigned char *)(v62 + 16) = v51;
  *(void *)(v62 + 24) = v61;
  *(unsigned char *)(v62 + 32) = v78 & 1;
  *(void *)&long long v104 = KeyPath;
  *((void *)&v104 + 1) = partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue();
  *(void *)&long long v105 = v62;
  uint64_t v110 = v59;
  uint64_t v111 = &protocol witness table for InjectKeyModifier;
  swift_retain();
  uint64_t v63 = v50;
  uint64_t v64 = v85;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v66 = v86;
  MEMORY[0x18C113660](&v104, v64, v82, WitnessTable);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v63, v64);
  uint64_t v67 = swift_getKeyPath();
  long long v68 = *((_OWORD *)v2 + 1);
  long long v104 = *(_OWORD *)v2;
  long long v105 = v68;
  long long v106 = *((_OWORD *)v2 + 2);
  _NavigationSplitReader.PreparedColumn.columnSeeds.getter();
  *(void *)&v102[0] = v67;
  unint64_t v69 = lazy protocol witness table accessor for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v108 = WitnessTable;
  unint64_t v109 = v69;
  uint64_t v70 = v89;
  uint64_t v71 = swift_getWitnessTable();
  uint64_t v72 = (uint64_t)v87;
  MEMORY[0x18C113660](v102, v70, v83, v71);
  swift_release();
  uint64_t v73 = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v66, v70);
  MEMORY[0x1F4188790](v73);
  *(&v76 - 2) = v3;
  *(&v76 - 1) = swift_getWitnessTable();
  uint64_t v74 = v91;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v72, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v76 - 4), v91, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v75);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(v72, v74);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance _NavigationSplitReader.PreparedColumn<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, MEMORY[0x1E4F411E8]);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t _NavigationSplitReader.SplitPresentationModeLocation.get()@<X0>(unsigned char *a1@<X8>)
{
  Swift::UInt v3 = *(void *)(v1 + 24);
  unsigned __int8 v4 = *(unsigned char *)(v1 + 32);
  Swift::UInt v5 = *(void *)(v1 + 40);
  uint64_t result = swift_weakLoadStrong();
  uint64_t v7 = result;
  if (result)
  {
    swift_beginAccess();
    outlined init with take of NavigationAuthority?(v7 + 16, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of NavigationAuthority?((uint64_t)v9, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    uint64_t result = getEnumTag for AccessibilityActionCategory.Category((uint64_t)v10);
    if (result == 1)
    {
      LOBYTE(v7) = 0;
    }
    else
    {
      outlined init with take of NavigationAuthority?((uint64_t)v9, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      LOBYTE(v7) = NavigationState.canDismissRoot(of:)(v3, v4, v5);
      uint64_t result = outlined retain of NavigationState?((uint64_t)v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    }
  }
  *a1 = v7 & 1;
  return result;
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance _NavigationSplitReader.SplitPresentationModeLocation(unsigned char *a1))(void, void, void, void)
{
  *a1 = 1;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for static Rule.initialValue.getter in conformance _NavigationSplitReader.Core@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _NavigationSplitReader.Core@<X0>(uint64_t a1@<X8>)
{
  return _NavigationSplitReader.Core.value.getter(a1);
}

void protocol witness for View.body.getter in conformance _NavigationSplitReader()
{
}

void protocol witness for ViewModifier.body(content:) in conformance InjectKeyModifier()
{
}

uint64_t assignWithCopy for _NavigationSplitReader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 58);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  swift_release();
  *(_OWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for InjectKeyModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 250);
  }
  if (*(unsigned __int8 *)(a1 + 8) <= 6u) {
    int v3 = 6;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 8);
  }
  int v4 = v3 - 7;
  if (*(unsigned __int8 *)(a1 + 8) < 6u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InjectKeyModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 6;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in InjectKeyModifier()
{
  return &protocol witness table for InjectKeyModifier;
}

_UNKNOWN **base witness table accessor for View in _NavigationSplitReader()
{
  return &protocol witness table for _NavigationSplitReader;
}

uint64_t partial apply for closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter(a1);
}

uint64_t sub_18799A440()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for Binding<NavigationSplitViewColumn>?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

char *keypath_get_selector_preferredSplitBehavior()
{
  return sel_preferredSplitBehavior;
}

id sub_18799A588@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_preferredSplitBehavior);
  *a2 = result;
  return result;
}

id sub_18799A5BC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPreferredSplitBehavior_, *a1);
}

uint64_t initializeBufferWithCopyOfBuffer for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    swift_weakCopyInit();
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = a2[5];
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v9, v10, v11);
    *(void *)(a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_weakCopyAssign();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_weakTakeAssign();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18799A8D4);
}

uint64_t sub_18799A8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18799A9AC);
}

uint64_t sub_18799A9AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.Core(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.Core(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 44) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _NavigationSplitReader.Core()
{
  return &type metadata for _NavigationSplitReader.Core;
}

uint64_t assignWithTake for _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_weakTakeAssign();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  if (*(void *)(a1 + 128)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  }
  long long v4 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = v4;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.ForestRoot(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.ForestRoot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _NavigationSplitReader.ForestRoot()
{
  return &type metadata for _NavigationSplitReader.ForestRoot;
}

uint64_t destroy for _NavigationSplitReader.PreparedColumn()
{
  swift_release();

  return swift_release();
}

uint64_t assignWithCopy for _NavigationSplitReader.PreparedColumn(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 2outlined consume of Text?(0, 0, 0, 0) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader.PreparedColumn(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

void *type metadata accessor for _NavigationSplitReader.CustomParameters()
{
  return &unk_1ED47C500;
}

void *type metadata accessor for _NavigationSplitReader.UpdateRequiredCompactColumn()
{
  return &unk_1ED43CC80;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.UpdateRequiredCompactColumn(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.UpdateRequiredCompactColumn(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for _NavigationSplitReader.UpdatePreferredCompactColumn()
{
  return &unk_1ED43CD10;
}

uint64_t assignWithCopy for _NavigationSplitReader.DerivedAttributes(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v4 = a1 + 16;
  int v5 = (long long *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *v5;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)uint64_t v4 = v7;
    }
    else
    {
      swift_weakCopyInit();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_retain();
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 16);
    uint64_t v8 = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 16) = v8;
  }
  else
  {
    swift_weakCopyAssign();
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_retain();
    swift_release();
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_retain();
    swift_release();
  }
  return a1;
}

_OWORD *initializeWithTake for _NavigationSplitReader.DerivedAttributes(_OWORD *a1, _OWORD *a2)
{
  long long v5 = *a2;
  uint64_t v4 = a2 + 1;
  *a1 = v5;
  uint64_t v6 = a1 + 1;
  *(void *)&long long v5 = *((void *)a2 + 3);
  long long v7 = (_OWORD *)((char *)a2 + 24);
  if ((void)v5 == 1)
  {
    *uint64_t v6 = *v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
  }
  else
  {
    swift_weakTakeInit();
    *(_OWORD *)((char *)a1 + 24) = *v7;
  }
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader.DerivedAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1 + 16;
  long long v5 = (_OWORD *)(a1 + 24);
  long long v7 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) != 1)
  {
    if (v6 != 1)
    {
      swift_weakTakeAssign();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_release();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_release();
      return a1;
    }
    outlined destroy of NavigationAuthority(a1 + 16);
    goto LABEL_6;
  }
  if (v6 == 1)
  {
LABEL_6:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
    *(void *)(v4 + 16) = *(void *)(v3 + 16);
    return a1;
  }
  swift_weakTakeInit();
  _OWORD *v5 = *v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.DerivedAttributes(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.DerivedAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for _NavigationSplitReader.DerivedAttributes()
{
  return &unk_1ED43CBF0;
}

uint64_t associated type witness table accessor for VariadicViewForestRoot.Body : View in _NavigationSplitReader.ForestRoot()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized _NavigationSplitReader.SplitPresentationModeLocation.set(_:transaction:)(unsigned char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1F4188790](v4 - 8);
  int v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *a1;
  outlined init with copy of _NavigationSplitReader.SplitPresentationModeLocation(v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  if (a1) {
    return outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  }
  Swift::UInt v7 = *((void *)v6 + 3);
  unsigned __int8 v8 = v6[32];
  Swift::UInt v9 = *((void *)v6 + 5);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  }
  uint64_t v11 = Strong + 16;
  swift_beginAccess();
  outlined init with take of NavigationAuthority?(v11, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  outlined retain of NavigationState?((uint64_t)v26, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
  swift_release();
  outlined init with take of NavigationAuthority?((uint64_t)v26, (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v27) == 1) {
    return outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  }
  outlined init with take of NavigationAuthority?((uint64_t)v26, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  long long v20 = v24[6];
  long long v21 = v24[7];
  long long v22 = v24[8];
  __int16 v23 = v25;
  void v17[2] = v24[2];
  v17[3] = v24[3];
  long long v18 = v24[4];
  long long v19 = v24[5];
  v17[0] = v24[0];
  v17[1] = v24[1];
  char v13 = NavigationState.canDismissRoot(of:)(v7, v8, v9);
  outlined retain of NavigationState?((uint64_t)v26, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
  uint64_t result = outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  if (v13)
  {
    uint64_t v14 = *(void *)(v2 + 24);
    uint64_t v15 = *(unsigned __int8 *)(v2 + 32);
    uint64_t v16 = *(void *)(v2 + 40);
    *(void *)&v17[0] = 2;
    *(long long *)((char *)v17 + 8) = 0u;
    *(long long *)((char *)&v17[1] + 8) = 0u;
    *(long long *)((char *)&v17[2] + 8) = 0u;
    *((void *)&v17[3] + 1) = 0;
    LOBYTE(v18) = 22;
    *((void *)&v18 + 1) = v14;
    *(void *)&long long v19 = v15;
    *((void *)&v19 + 1) = v16;
    long long v20 = 0uLL;
    *(void *)&long long v21 = 0;
    BYTE8(v21) = 0;
    *(void *)&long long v22 = 0;
    return NavigationAuthority.enqueueRequest(_:)(v17);
  }
  return result;
}

uint64_t destroy for ConfirmationDialog(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectWeakDestroy();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 168))
  {
    if (*(void *)(a1 + 152))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 128), *(void *)(a1 + 136), *(unsigned char *)(a1 + 144));
      swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_OWORD *)(a1 + 68) = v6;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 120);
  Swift::UInt v7 = (_OWORD *)(a1 + 128);
  unsigned __int8 v8 = (_OWORD *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 168);
  swift_retain();
  if (v9)
  {
    if (*(void *)(a2 + 152))
    {
      uint64_t v10 = *(void *)(a2 + 128);
      uint64_t v11 = *(void *)(a2 + 136);
      char v12 = *(unsigned char *)(a2 + 144);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 128) = v10;
      *(void *)(a1 + 136) = v11;
      *(unsigned char *)(a1 + 144) = v12;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      uint64_t v9 = *(void *)(a2 + 168);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v14 = *(_OWORD *)(a2 + 144);
      *Swift::UInt v7 = *v8;
      *(_OWORD *)(a1 + 144) = v14;
    }
    *(void *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = v9;
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 144);
    *Swift::UInt v7 = *v8;
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 160);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  }
  return a1;
}

uint64_t assignWithCopy for ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_OWORD *)(a1 + 68) = v4;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakCopyAssign();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 120);
  uint64_t v5 = (_OWORD *)(a1 + 128);
  long long v6 = (_OWORD *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 168);
  if (*(void *)(a1 + 168))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 152);
      if (*(void *)(a1 + 152))
      {
        if (v8)
        {
          uint64_t v9 = *(void *)(a2 + 128);
          uint64_t v10 = *(void *)(a2 + 136);
          char v11 = *(unsigned char *)(a2 + 144);
          outlined copy of Text.Storage(v9, v10, v11);
          uint64_t v12 = *(void *)(a1 + 128);
          uint64_t v13 = *(void *)(a1 + 136);
          char v14 = *(unsigned char *)(a1 + 144);
          *(void *)(a1 + 128) = v9;
          *(void *)(a1 + 136) = v10;
          *(unsigned char *)(a1 + 144) = v11;
          outlined consume of Text.Storage(v12, v13, v14);
          *(void *)(a1 + 152) = *(void *)(a2 + 152);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 128);
          long long v27 = *(_OWORD *)(a2 + 144);
          _OWORD *v5 = *v6;
          *(_OWORD *)(a1 + 144) = v27;
        }
      }
      else if (v8)
      {
        uint64_t v21 = *(void *)(a2 + 128);
        uint64_t v22 = *(void *)(a2 + 136);
        char v23 = *(unsigned char *)(a2 + 144);
        outlined copy of Text.Storage(v21, v22, v23);
        *(void *)(a1 + 128) = v21;
        *(void *)(a1 + 136) = v22;
        *(unsigned char *)(a1 + 144) = v23;
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v29 = *(_OWORD *)(a2 + 144);
        _OWORD *v5 = *v6;
        *(_OWORD *)(a1 + 144) = v29;
      }
      *(void *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 160);
      swift_retain();
      swift_release();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    }
    else
    {
      outlined destroy of DialogSuppressionConfiguration(a1 + 128);
      long long v19 = *(_OWORD *)(a2 + 144);
      long long v18 = *(_OWORD *)(a2 + 160);
      long long v20 = *v6;
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(_OWORD *)(a1 + 144) = v19;
      *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = v18;
      _OWORD *v5 = v20;
    }
  }
  else if (v7)
  {
    if (*(void *)(a2 + 152))
    {
      uint64_t v15 = *(void *)(a2 + 128);
      uint64_t v16 = *(void *)(a2 + 136);
      char v17 = *(unsigned char *)(a2 + 144);
      outlined copy of Text.Storage(v15, v16, v17);
      *(void *)(a1 + 128) = v15;
      *(void *)(a1 + 136) = v16;
      *(unsigned char *)(a1 + 144) = v17;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v28 = *(_OWORD *)(a2 + 144);
      _OWORD *v5 = *v6;
      *(_OWORD *)(a1 + 144) = v28;
    }
    *(void *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v24 = *v6;
    long long v25 = *(_OWORD *)(a2 + 144);
    long long v26 = *(_OWORD *)(a2 + 160);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(_OWORD *)(a1 + 144) = v25;
    *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = v26;
    _OWORD *v5 = v24;
  }
  return a1;
}

uint64_t outlined destroy of DialogSuppressionConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 68) = v4;
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 120);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t assignWithTake for ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  swift_unknownObjectWeakTakeAssign();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(unsigned char *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 120);
  long long v5 = (_OWORD *)(a1 + 128);
  long long v6 = (_OWORD *)(a2 + 128);
  if (*(void *)(a1 + 168))
  {
    if (*(void *)(a2 + 168))
    {
      if (*(void *)(a1 + 152))
      {
        if (*(void *)(a2 + 152))
        {
          char v7 = *(unsigned char *)(a2 + 144);
          uint64_t v8 = *(void *)(a1 + 128);
          uint64_t v9 = *(void *)(a1 + 136);
          char v10 = *(unsigned char *)(a1 + 144);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
          *(unsigned char *)(a1 + 144) = v7;
          outlined consume of Text.Storage(v8, v9, v10);
          *(void *)(a1 + 152) = *(void *)(a2 + 152);
          swift_bridgeObjectRelease();
LABEL_10:
          *(void *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 160);
          swift_release();
          *(void *)(a1 + 168) = *(void *)(a2 + 168);
          swift_release();
          *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
          return a1;
        }
        outlined destroy of Text(a1 + 128);
      }
      long long v12 = *(_OWORD *)(a2 + 144);
      _OWORD *v5 = *v6;
      *(_OWORD *)(a1 + 144) = v12;
      goto LABEL_10;
    }
    outlined destroy of DialogSuppressionConfiguration(a1 + 128);
  }
  long long v11 = *(_OWORD *)(a2 + 144);
  _OWORD *v5 = *v6;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ConfirmationDialog(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 177) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConfirmationDialogModifier()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ConfirmationDialogModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ConfirmationDialogModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v75 = a3;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v61 = v6;
  uint64_t v73 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v72 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v70 = *(void *)(v8 + 16);
  type metadata accessor for StyleContextWriter<DialogActionStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>, MEMORY[0x1E4F40D78], MEMORY[0x1E4F40D70], MEMORY[0x1E4F40318]);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v66 = v9;
  MEMORY[0x1F4188790](v9);
  long long v11 = &v47[-v10];
  uint64_t v62 = *(void *)(a2 + 32);
  uint64_t v12 = v62;
  unint64_t v13 = lazy protocol witness table accessor for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v86 = v12;
  unint64_t v87 = v13;
  uint64_t v74 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v64 = *(void *)(a2 + 40);
  uint64_t v82 = (ValueMetadata *)v9;
  uint64_t v83 = v6;
  uint64_t v84 = WitnessTable;
  uint64_t v85 = v64;
  uint64_t v14 = type metadata accessor for ConfirmationDialogModifierCore();
  uint64_t v59 = v14;
  uint64_t v71 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v58 = &v47[-v15];
  unint64_t v60 = lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  uint64_t v82 = &type metadata for AllowPresentationPredicate;
  uint64_t v83 = v14;
  uint64_t v84 = MEMORY[0x1E4F3F740];
  uint64_t v85 = v60;
  uint64_t v55 = type metadata accessor for StaticIf();
  uint64_t v69 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v53 = &v47[-v16];
  swift_getWitnessTable();
  uint64_t v54 = type metadata accessor for _ViewModifier_Content();
  uint64_t v56 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  BOOL v51 = &v47[-v17];
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  uint64_t v63 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  char v52 = &v47[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v19);
  unsigned __int8 v57 = &v47[-v20];
  int v50 = *v4;
  uint64_t v21 = *((void *)v4 + 1);
  uint64_t v22 = *((void *)v4 + 2);
  int v49 = v4[24];
  uint64_t v23 = *((void *)v4 + 4);
  uint64_t v24 = *((void *)v4 + 5);
  LOBYTE(v14) = v4[48];
  uint64_t v25 = *((void *)v4 + 7);
  int v48 = v4[64];
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v23, v24, v14);
  swift_bridgeObjectRetain();
  View.styleContext<A>(_:)();
  long long v26 = &v4[*(int *)(a2 + 68)];
  uint64_t v27 = (uint64_t)v72;
  uint64_t v28 = v61;
  (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v73 + 16))(v72, v26, v61);
  uint64_t v46 = v28;
  long long v29 = v58;
  ConfirmationDialogModifierCore.init(presentedValue:isPresented:title:titleVisibility:actions:message:)(v50, v21, v22, v49, v23, v24, v14, v25, (uint64_t)v58, v48, (uint64_t)v11, v27, v66, v46, WitnessTable, v64, (uint64_t (*)(void, void *))type metadata accessor for ConfirmationDialogModifierCore);
  int v30 = v53;
  uint64_t v31 = v59;
  ViewModifier.requiring<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v71 + 8))(v29, v31);
  uint64_t v32 = v54;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v34 = v51;
  uint64_t v35 = v32;
  uint64_t v36 = v55;
  MEMORY[0x18C113660](v30, v35, v55, v33);
  (*(void (**)(unsigned char *, uint64_t))(v69 + 8))(v30, v36);
  uint64_t v80 = &protocol witness table for ConfirmationDialogModifierCore<A, B>;
  uint64_t v81 = MEMORY[0x1E4F3F738];
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v78 = v33;
  uint64_t v79 = v37;
  uint64_t v38 = v56;
  uint64_t v39 = swift_getWitnessTable();
  long long v40 = v52;
  View.sharingPickerHost()(v38, v39);
  (*(void (**)(unsigned char *, uint64_t))(v67 + 8))(v34, v38);
  unint64_t IsSharingPicker = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v76 = v39;
  unint64_t v77 = IsSharingPicker;
  uint64_t v42 = v63;
  swift_getWitnessTable();
  int v43 = v57;
  static ViewBuilder.buildExpression<A>(_:)(v40);
  Swift::UInt v44 = *(void (**)(unsigned char *, uint64_t))(v68 + 8);
  v44(v40, v42);
  static ViewBuilder.buildExpression<A>(_:)(v43);
  return ((uint64_t (*)(unsigned char *, uint64_t))v44)(v43, v42);
}

uint64_t ConfirmationDialogModifier.init(presentedValue:isPresented:title:titleVisibility:actions:message:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return ConfirmationDialogModifierCore.init(presentedValue:isPresented:title:titleVisibility:actions:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t (*)(void, void *))type metadata accessor for ConfirmationDialogModifier);
}

uint64_t ConfirmationDialogModifierCore.init(presentedValue:isPresented:title:titleVisibility:actions:message:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(void, void *))
{
  *(unsigned char *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 4outlined consume of Text?(0, 0, 0, 0) = a6;
  *(unsigned char *)(a9 + 48) = a7 & 1;
  *(void *)(a9 + 56) = a8;
  *(unsigned char *)(a9 + 64) = a10;
  v20[0] = a13;
  v20[1] = a14;
  void v20[2] = a15;
  v20[3] = a16;
  uint64_t v18 = a17(0, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(a9 + *(int *)(v18 + 64), a11, a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(a9 + *(int *)(v18 + 68), a12, a14);
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>, MEMORY[0x1E4F40D78], MEMORY[0x1E4F40D70], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t type metadata accessor for ConfirmationDialogModifierCore()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for ConfirmationDialog.PreferenceKey()
{
  return &type metadata for ConfirmationDialog.PreferenceKey;
}

uint64_t type metadata completion function for ConfirmationDialogModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  if ((v10 | v7) > 7
    || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v8 + v10 + ((v7 + 65) & ~v7)) & ~v10) + *(void *)(*(void *)(v5 - 8) + 64) > 0x18)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v23 = v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16));
    swift_retain();
  }
  else
  {
    uint64_t v25 = v4;
    uint64_t v27 = ~v10;
    unint64_t v28 = a1;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    unint64_t v15 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v15 + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(void *)(v15 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    *(unsigned char *)(v15 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    uint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    char v19 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    uint64_t v26 = v5;
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v17, v18, v19);
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + 4outlined consume of Text?(0, 0, 0, 0) = v18;
    *(unsigned char *)(v15 + 48) = v19;
    *(void *)(v15 + 56) = *(void *)(v16 + 56);
    *(unsigned char *)(v15 + 64) = *(unsigned char *)(v16 + 64);
    uint64_t v20 = (v15 + v7 + 65) & ~v7;
    uint64_t v21 = (v16 + v7 + 65) & ~v7;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v22(v20, v21, v25);
    unint64_t v23 = v28;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))((v20 + v11) & v27, (v21 + v11) & v27, v26);
  }
  return v23;
}

uint64_t destroy for ConfirmationDialogModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(void *)(v3 + 32), *(void *)(v3 + 40), *(unsigned char *)(v3 + 48));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v8 = *(uint64_t (**)(unint64_t))(v7 + 8);
  unint64_t v9 = (v6 + *(void *)(v5 + 56) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);

  return v8(v9);
}

unint64_t initializeWithCopy for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v5 + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v5 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v5 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  char v9 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v7, v8, v9);
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 4outlined consume of Text?(0, 0, 0, 0) = v8;
  *(unsigned char *)(v5 + 48) = v9;
  *(void *)(v5 + 56) = *(void *)(v6 + 56);
  *(unsigned char *)(v5 + 64) = *(unsigned char *)(v6 + 64);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  uint64_t v12 = *(void *)(v10 - 8) + 16;
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(v10 - 8) + 80);
  uint64_t v14 = (v13 + 65 + v5) & ~v13;
  uint64_t v15 = (v13 + 65 + v6) & ~v13;
  swift_bridgeObjectRetain();
  v11(v14, v15, v10);
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 16))((*(void *)(v12 + 48) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v12 + 48) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

unint64_t assignWithCopy for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(v5 + 24) = *(unsigned char *)(v6 + 24);
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(v6 + 40);
  char v9 = *(unsigned char *)(v6 + 48);
  outlined copy of Text.Storage(v7, v8, v9);
  uint64_t v10 = *(void *)(v5 + 32);
  uint64_t v11 = *(void *)(v5 + 40);
  char v12 = *(unsigned char *)(v5 + 48);
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 4outlined consume of Text?(0, 0, 0, 0) = v8;
  *(unsigned char *)(v5 + 48) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(void *)(v5 + 56) = *(void *)(v6 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v5 + 64) = *(unsigned char *)(v6 + 64);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 65 + v5) & ~v15;
  uint64_t v17 = (v15 + 65 + v6) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))((*(void *)(v14 + 40) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(void *)(v14 + 40) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

unint64_t initializeWithTake for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v5 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v5 + 8) = v6;
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)(v5 + 48) = v7;
  *(unsigned char *)(v5 + 64) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v11 = (v10 + 65 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  unint64_t v12 = (v10 + 65 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))((*(void *)(v9 + 32) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v9 + 32) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

unint64_t assignWithTake for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  swift_release();
  *(unsigned char *)(v5 + 24) = *(unsigned char *)(v6 + 24);
  char v7 = *(unsigned char *)(v6 + 48);
  uint64_t v8 = *(void *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 40);
  char v10 = *(unsigned char *)(v5 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
  *(unsigned char *)(v5 + 48) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(void *)(v5 + 56) = *(void *)(v6 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v5 + 64) = *(unsigned char *)(v6 + 64);
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 65 + v5) & ~v13;
  uint64_t v15 = (v13 + 65 + v6) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v14, v15);
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))((*(void *)(v12 + 24) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(void *)(v12 + 24) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationDialogModifier(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  int v14 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v10 + v11 + ((v9 + 65) & ~v9)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)(a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      unint64_t v23 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 0x80000000) != 0)
      {
        uint64_t v25 = (v23 + v9 + 65) & ~v9;
        if (v5 == v13) {
          return (*(uint64_t (**)(uint64_t))(v4 + 48))(v25);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v25 + v10 + v11) & ~v11, v8, v6);
        }
      }
      else
      {
        unint64_t v24 = *(void *)(v23 + 16);
        if (v24 >= 0xFFFFFFFF) {
          LODWORD(v24) = -1;
        }
        return (v24 + 1);
      }
    }
  }
  int v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(unsigned char *)(a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *(unsigned __int16 *)a1;
        break;
      case 3:
        int v22 = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v13 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for ConfirmationDialogModifier(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((v11 + v12 + ((v10 + 65) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v16 = a3 >= v14;
  unsigned int v17 = a3 - v14;
  if (v17 != 0 && v16)
  {
    if (v15 <= 3)
    {
      unsigned int v21 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v21))
      {
        int v18 = 4;
      }
      else if (v21 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v21 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v19 = ~v14 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v22 = v19 & ~(-1 << (8 * v15));
        bzero((void *)a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v22;
          *(unsigned char *)(a1 + 2) = BYTE2(v22);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *(unsigned char *)a1 = v22;
        }
      }
    }
    else
    {
      bzero((void *)a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        *(unsigned char *)(a1 + v15) = v20;
        return;
      case 2:
        *(_WORD *)(a1 + v15) = v20;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)(a1 + v15) = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      *(unsigned char *)(a1 + v15) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)(a1 + v15) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x18799D43CLL);
    case 4:
      *(_DWORD *)(a1 + v15) = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        unint64_t v23 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((v13 & 0x80000000) != 0)
        {
          uint64_t v24 = (v23 + v10 + 65) & ~v10;
          if (v7 == v14)
          {
            uint64_t v25 = *(void (**)(uint64_t))(v6 + 56);
            v25(v24);
          }
          else
          {
            uint64_t v26 = (v24 + v11 + v12) & ~v12;
            uint64_t v27 = *(void (**)(uint64_t))(v9 + 56);
            v27(v26);
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(unsigned char *)(v23 + 24) = 0;
          *(void *)(v23 + 8) = a2 ^ 0x80000000;
          *(void *)(v23 + 16) = 0;
        }
        else
        {
          *(void *)(v23 + 16) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_18799D464()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in ConfirmationDialogModifierCore<A, B>()
{
  return &protocol witness table for ConfirmationDialogModifierCore<A, B>;
}

double static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, double *a8@<X8>)
{
  unint64_t v77 = a8;
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  int v12 = *a1;
  uint64_t v13 = *(void *)a2;
  int v14 = *(_DWORD *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  unsigned int v16 = *(_DWORD *)(a2 + 24);
  unsigned int v17 = *(_DWORD *)(a2 + 28);
  unsigned int v18 = *(_DWORD *)(a2 + 32);
  unsigned int v19 = *(_DWORD *)(a2 + 36);
  uint64_t v20 = *(void *)(a2 + 40);
  uint64_t v21 = *(void *)(a2 + 48);
  unsigned int v22 = *(_DWORD *)(a2 + 56);
  unsigned int v23 = *(_DWORD *)(a2 + 60);
  unsigned int v25 = *(_DWORD *)(a2 + 64);
  unsigned int v24 = *(_DWORD *)(a2 + 68);
  unsigned int v26 = *(_DWORD *)(a2 + 72);
  unsigned int v27 = *(_DWORD *)(a2 + 76);
  int v28 = *(_DWORD *)(a2 + 80);
  uint64_t v86 = v13;
  uint64_t v117 = (void *)v13;
  int v85 = v14;
  LODWORD(v118) = v14;
  uint64_t v119 = v15;
  unsigned int v91 = v19;
  unsigned int v92 = v16;
  unint64_t v120 = __PAIR64__(v17, v16);
  unsigned int v96 = v18;
  unsigned int v97 = v17;
  unint64_t v121 = __PAIR64__(v19, v18);
  uint64_t v95 = v20;
  *(void *)&long long v122 = v20;
  *((void *)&v122 + 1) = v21;
  unsigned int v98 = v22;
  *(void *)&long long v123 = __PAIR64__(v23, v22);
  unsigned int v89 = v25;
  unsigned int v90 = v23;
  *((void *)&v123 + 1) = __PAIR64__(v24, v25);
  int v93 = v28;
  unsigned int v94 = v24;
  unsigned int v87 = v27;
  unsigned int v88 = v26;
  *(void *)&long long v124 = __PAIR64__(v27, v26);
  DWORD2(v124) = v28;
  a3(&v100);
  int v82 = v12;
  LODWORD(v104) = v12;
  uint64_t v117 = (void *)a4;
  uint64_t v118 = a5;
  uint64_t v119 = a6;
  unint64_t v120 = a7;
  type metadata accessor for ConfirmationDialogModifierCore();
  uint64_t v81 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v29 = *(void *)(*(void *)(a4 - 8) + 64);
  uint64_t v83 = a7;
  uint64_t v80 = a5;
  if (v29) {
    closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(1, a4, a5, a6, a7);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  long long v104 = (void *)v86;
  int v105 = v85;
  uint64_t v106 = v15;
  int v107 = v92;
  unsigned int v108 = v97;
  unint64_t v109 = __PAIR64__(v91, v96);
  *(void *)&long long v110 = v95;
  *((void *)&v110 + 1) = v21;
  *(void *)&long long v111 = __PAIR64__(v90, v98);
  *((void *)&v111 + 1) = __PAIR64__(v94, v89);
  *(void *)&long long v112 = __PAIR64__(v87, v88);
  DWORD2(v112) = v93;
  id v31 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v104, 1, (uint64_t)&v117);
  uint64_t v74 = &v70;
  long long v104 = v117;
  int v105 = v118;
  uint64_t v106 = v119;
  int v107 = v120;
  unint64_t v109 = v121;
  long long v110 = v122;
  long long v111 = v123;
  long long v112 = v124;
  uint64_t v113 = v125;
  int v114 = v126;
  char v115 = v127;
  int v116 = v128;
  MEMORY[0x1F4188790](v31);
  *(void *)&long long v129 = &type metadata for AllPlatformItemListFlags;
  *((void *)&v129 + 1) = a4;
  uint64_t v78 = a4;
  *(void *)&long long v130 = &protocol witness table for AllPlatformItemListFlags;
  *((void *)&v130 + 1) = a6;
  uint64_t v68 = type metadata accessor for PlatformItemListGenerator();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v33 = v32;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v75 = v33;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v104, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v67, v68, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v34);
  uint64_t v73 = 0;
  uint64_t v35 = v104;
  uint64_t v36 = a6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  LODWORD(v74) = v129;
  LODWORD(v117) = v82;
  _GraphValue.value.getter();
  uint64_t v37 = v80;
  uint64_t v38 = *(void *)(*(void *)(v80 - 8) + 64);
  uint64_t v76 = v36;
  uint64_t v39 = v83;
  if (v38) {
    closure #2 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(1, v78, v80, v36, v83);
  }
  int v40 = AGGraphCreateOffsetAttribute2();
  uint64_t v41 = v86;
  uint64_t v117 = (void *)v86;
  LODWORD(v118) = v85;
  uint64_t v119 = v15;
  unint64_t v120 = __PAIR64__(v97, v92);
  unint64_t v121 = __PAIR64__(v91, v96);
  *(void *)&long long v122 = v95;
  *((void *)&v122 + 1) = v21;
  uint64_t v84 = v21;
  *(void *)&long long v123 = __PAIR64__(v90, v98);
  *((void *)&v123 + 1) = __PAIR64__(v94, v89);
  *(void *)&long long v124 = __PAIR64__(v87, v88);
  DWORD2(v124) = v93;
  id v42 = PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(v40, (uint64_t *)&v117, 1, (uint64_t)&v104);
  uint64_t v72 = v67;
  uint64_t v117 = v104;
  LODWORD(v118) = v105;
  uint64_t v119 = v106;
  LODWORD(v12outlined consume of Text?(0, 0, 0, 0) = v107;
  unint64_t v121 = v109;
  long long v122 = v110;
  long long v123 = v111;
  long long v124 = v112;
  uint64_t v125 = v113;
  int v126 = v114;
  char v127 = v115;
  int v128 = v116;
  MEMORY[0x1F4188790](v42);
  *(void *)&long long v129 = &type metadata for TextPlatformItemListFlags;
  *((void *)&v129 + 1) = v37;
  *(void *)&long long v130 = &protocol witness table for TextPlatformItemListFlags;
  *((void *)&v130 + 1) = v39;
  uint64_t v65 = type metadata accessor for PlatformItemListGenerator();
  uint64_t v66 = swift_getWitnessTable();
  swift_retain();
  swift_retain();
  uint64_t v43 = v95;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v117, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v64, v65, MEMORY[0x1E4FBC248], v75, MEMORY[0x1E4FBC278], v44);
  Swift::UInt v45 = v117;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  LODWORD(v73) = v129;
  uint64_t v117 = (void *)v41;
  int v46 = v85;
  LODWORD(v118) = v85;
  uint64_t v119 = v15;
  unsigned int v47 = v91;
  LODWORD(v45) = v92;
  unsigned int v48 = v98;
  unint64_t v120 = __PAIR64__(v97, v92);
  unint64_t v121 = __PAIR64__(v91, v96);
  *(void *)&long long v122 = v43;
  *((void *)&v122 + 1) = v84;
  *(void *)&long long v123 = __PAIR64__(v90, v98);
  *((void *)&v123 + 1) = __PAIR64__(v94, v89);
  *(void *)&long long v124 = __PAIR64__(v87, v88);
  DWORD2(v124) = v93;
  LODWORD(v75) = _ViewInputs.environment.getter();
  LODWORD(v117) = v82;
  int v82 = _GraphValue.value.getter();
  uint64_t v81 = AGCreateWeakAttribute();
  uint64_t v74 = (uint64_t *)AGCreateWeakAttribute();
  uint64_t v49 = v41;
  uint64_t v117 = (void *)v41;
  LODWORD(v118) = v46;
  uint64_t v79 = v15;
  uint64_t v119 = v15;
  unint64_t v120 = __PAIR64__(v97, v45);
  LODWORD(v41) = v45;
  LODWORD(v45) = v97;
  unint64_t v121 = __PAIR64__(v47, v96);
  *(void *)&long long v122 = v95;
  *((void *)&v122 + 1) = v84;
  unsigned int v50 = v90;
  *(void *)&long long v123 = __PAIR64__(v90, v48);
  unsigned int v51 = v89;
  *((void *)&v123 + 1) = __PAIR64__(v94, v89);
  *(void *)&long long v124 = __PAIR64__(v87, v88);
  DWORD2(v124) = v93;
  LODWORD(v73) = _ViewInputs.viewPhase.getter();
  uint64_t v117 = (void *)v49;
  LODWORD(v118) = v46;
  uint64_t v119 = v15;
  unint64_t v120 = __PAIR64__(v45, v41);
  unsigned int v52 = v96;
  LODWORD(v41) = v91;
  unint64_t v121 = __PAIR64__(v91, v96);
  uint64_t v53 = v95;
  *(void *)&long long v122 = v95;
  *((void *)&v122 + 1) = v84;
  *(void *)&long long v123 = __PAIR64__(v50, v98);
  unsigned int v54 = v94;
  *((void *)&v123 + 1) = __PAIR64__(v94, v51);
  unsigned int v55 = v87;
  LODWORD(v45) = v88;
  *(void *)&long long v124 = __PAIR64__(v87, v88);
  DWORD2(v124) = v93;
  LODWORD(v72) = _ViewInputs.animatedPosition()();
  uint64_t v117 = (void *)v86;
  LODWORD(v118) = v46;
  uint64_t v119 = v79;
  unsigned int v56 = v98;
  unint64_t v120 = __PAIR64__(v97, v92);
  unint64_t v121 = __PAIR64__(v41, v52);
  *(void *)&long long v122 = v53;
  uint64_t v57 = v84;
  *((void *)&v122 + 1) = v84;
  LODWORD(v41) = v89;
  unsigned int v58 = v90;
  *(void *)&long long v123 = __PAIR64__(v90, v98);
  *((void *)&v123 + 1) = __PAIR64__(v54, v89);
  *(void *)&long long v124 = __PAIR64__(v55, v45);
  int v59 = v93;
  DWORD2(v124) = v93;
  int v71 = _ViewInputs.animatedCGSize()();
  uint64_t v117 = (void *)v86;
  LODWORD(v118) = v85;
  uint64_t v119 = v79;
  unint64_t v120 = __PAIR64__(v97, v92);
  unint64_t v121 = __PAIR64__(v91, v96);
  *(void *)&long long v122 = v95;
  *((void *)&v122 + 1) = v57;
  *(void *)&long long v123 = __PAIR64__(v58, v56);
  *((void *)&v123 + 1) = __PAIR64__(v94, v41);
  *(void *)&long long v124 = __PAIR64__(v55, v45);
  DWORD2(v124) = v59;
  int v60 = _ViewInputs.transform.getter();
  LOBYTE(v102) = 2;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  char v132 = 0;
  v99[0] = 1;
  uint64_t v66 = v83;
  uint64_t v65 = v76;
  v64[1] = v80;
  v64[0] = v78;
  uint64_t v61 = MakeConfirmationDialog.init(environment:modifier:actionsItemList:messageItemList:phase:position:size:transform:identityTracker:lastTitle:lastColorScheme:lastIcon:lastTintColor:lastSeverity:lastSuppressionConfiguration:)(v75, v82, v81, (uint64_t)v74, v73, (int)v72, v71, v60, (uint64_t)&v117, 0, 0, 0, (char *)&v102, 0, 0, 1, v99, (uint64_t)&v129);
  uint64_t v102 = v57;
  unsigned int v103 = v98;
  MEMORY[0x1F4188790](v61);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  outlined release of MakeConfirmationDialog<A, B>(&v117);
  uint64_t v62 = v77;
  *(void *)unint64_t v77 = v100;
  double result = v101;
  v62[1] = v101;
  return result;
}

uint64_t closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for ConfirmationDialogModifierCore();
  uint64_t v8 = a1 + *(int *)(v7 + 64);
  void v12[2] = v7;
  _OWORD v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a2, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t closure #2 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for ConfirmationDialogModifierCore();
  uint64_t v8 = a1 + *(int *)(v7 + 68);
  void v12[2] = v7;
  _OWORD v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t MakeConfirmationDialog.init(environment:modifier:actionsItemList:messageItemList:phase:position:size:transform:identityTracker:lastTitle:lastColorScheme:lastIcon:lastTintColor:lastSeverity:lastSuppressionConfiguration:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, long long a14, uint64_t a15, char a16, char *a17, uint64_t a18)
{
  char v19 = *a13;
  char v20 = *a17;
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(_DWORD *)(a9 + 24) = a5;
  *(_DWORD *)(a9 + 28) = a6;
  *(_DWORD *)(a9 + 32) = a7;
  *(_DWORD *)(a9 + 36) = a8;
  *(void *)(a9 + 4outlined consume of Text?(0, 0, 0, 0) = a10;
  type metadata accessor for PropertyList.Tracker();
  *(void *)(a9 + 48) = PropertyList.Tracker.__allocating_init()();
  *(void *)(a9 + 56) = a11;
  *(void *)(a9 + 64) = a12;
  *(unsigned char *)(a9 + 72) = v19;
  *(_OWORD *)(a9 + 8outlined consume of Text?(0, 0, 0, 0) = a14;
  *(void *)(a9 + 96) = a15;
  *(unsigned char *)(a9 + 104) = a16 & 1;
  *(unsigned char *)(a9 + 105) = v20;

  return outlined init with take of DialogSuppressionConfiguration?(a18, a9 + 112);
}

uint64_t implicit closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long long v6 = a1[9];
  long long v26 = a1[8];
  long long v27 = v6;
  char v28 = *((unsigned char *)a1 + 160);
  long long v7 = a1[5];
  long long v22 = a1[4];
  long long v23 = v7;
  long long v8 = a1[7];
  long long v24 = a1[6];
  long long v25 = v8;
  long long v9 = a1[1];
  long long v18 = *a1;
  long long v19 = v9;
  long long v10 = a1[3];
  long long v20 = a1[2];
  long long v21 = v10;
  *(void *)&long long v29 = a2;
  *((void *)&v29 + 1) = a3;
  *(void *)&long long v30 = a4;
  *((void *)&v30 + 1) = a5;
  uint64_t ConfirmationDialog = type metadata accessor for MakeConfirmationDialog();
  uint64_t WitnessTable = swift_getWitnessTable();
  outlined retain of MakeConfirmationDialog<A, B>(a1);
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v18, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v15, ConfirmationDialog, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  long long v37 = v26;
  long long v38 = v27;
  char v39 = v28;
  long long v33 = v22;
  long long v34 = v23;
  long long v35 = v24;
  long long v36 = v25;
  long long v29 = v18;
  long long v30 = v19;
  long long v31 = v20;
  long long v32 = v21;
  outlined release of MakeConfirmationDialog<A, B>(&v29);
  return v14;
}

uint64_t MakeConfirmationDialog.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ConfirmationDialogModifierCore();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ConfirmationDialogModifierCore<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t *a4@<X4>, double *a5@<X8>)
{
  return static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ConfirmationDialogModifierCore<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t MakeConfirmationDialog.resolveTitle()(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 32);
  long long v26 = *(_OWORD *)(a1 + 16);
  long long v27 = v2;
  uint64_t v15 = type metadata accessor for ConfirmationDialogModifierCore();
  uint64_t v3 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unsigned int v5 = (char *)&v15 - v4;
  long long v6 = v1[1];
  long long v16 = *v1;
  long long v17 = v6;
  long long v18 = v1[2];
  uint64_t v7 = *((void *)v1 + 6);
  long long v23 = *(long long *)((char *)v1 + 104);
  long long v24 = *(long long *)((char *)v1 + 120);
  v25[0] = *(long long *)((char *)v1 + 136);
  *(_OWORD *)((char *)v25 + 9) = *(long long *)((char *)v1 + 145);
  long long v20 = *(long long *)((char *)v1 + 56);
  long long v21 = *(long long *)((char *)v1 + 72);
  long long v22 = *(long long *)((char *)v1 + 88);
  PropertyList.Tracker.reset()();
  long long v8 = v1[1];
  long long v26 = *v1;
  long long v27 = v8;
  long long v28 = v1[2];
  uint64_t v29 = v7;
  long long v33 = *(long long *)((char *)v1 + 104);
  long long v34 = *(long long *)((char *)v1 + 120);
  v35[0] = *(long long *)((char *)v1 + 136);
  *(_OWORD *)((char *)v35 + 9) = *(long long *)((char *)v1 + 145);
  long long v30 = *(long long *)((char *)v1 + 56);
  long long v31 = *(long long *)((char *)v1 + 72);
  long long v32 = *(long long *)((char *)v1 + 88);
  MakeConfirmationDialog.environment.getter(&v36);
  swift_release();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  long long v9 = v26;
  uint64_t v19 = v7;
  MakeConfirmationDialog.modifier.getter((uint64_t)v5);
  uint64_t v10 = *((void *)v5 + 4);
  uint64_t v11 = *((void *)v5 + 5);
  LOBYTE(v7) = v5[48];
  outlined copy of Text.Storage(v10, v11, v7);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain();
  v12(v5, v15);
  long long v26 = v9;
  long long v16 = 0uLL;
  uint64_t v36 = 0;
  uint64_t v13 = Text.resolveString(in:with:idiom:)();
  outlined consume of Text.Storage(v10, v11, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v13;
}

unint64_t MakeConfirmationDialog.resolveTintColor()()
{
  long long v1 = v0[1];
  void v18[2] = *v0;
  v18[3] = v1;
  long long v2 = *v0;
  void v18[4] = v0[2];
  long long v3 = *(_OWORD *)((char *)v0 + 104);
  long long v4 = *(_OWORD *)((char *)v0 + 136);
  long long v17 = *(_OWORD *)((char *)v0 + 120);
  v18[0] = v4;
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v0 + 145);
  long long v5 = *(_OWORD *)((char *)v0 + 72);
  long long v13 = *(_OWORD *)((char *)v0 + 56);
  long long v14 = v5;
  long long v15 = *(_OWORD *)((char *)v0 + 88);
  long long v16 = v3;
  uint64_t v11 = v2;
  MakeConfirmationDialog.environment.getter(v12);
  if (v12[1])
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  swift_release();
  swift_release();
  if (!v11) {
    return 0;
  }
  PropertyList.Tracker.reset()();
  MakeConfirmationDialog.environment.getter(v12);
  swift_release();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  dispatch thunk of AnyColorBox.resolve(in:)();
  unsigned int v7 = v6;
  unsigned int v9 = v8;
  swift_release();
  swift_release();
  swift_release();
  return v7 | ((unint64_t)v9 << 32);
}

uint64_t MakeConfirmationDialog.updateValue()(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t)a1;
  uint64_t v265 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[4];
  unint64_t v6 = a1[5];
  unint64_t v196 = a1[3];
  unint64_t v197 = v4;
  unint64_t v240 = v4;
  unint64_t v241 = v196;
  unint64_t v194 = v6;
  unint64_t v195 = v5;
  unint64_t v242 = v5;
  unint64_t v243 = v6;
  uint64_t v200 = type metadata accessor for ConfirmationDialogModifierCore();
  uint64_t v202 = *(void *)(v200 - 8);
  MEMORY[0x1F4188790](v200);
  v193 = &v173[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v186 = v7;
  MEMORY[0x1F4188790](v8);
  long long v201 = &v173[-v9];
  unint64_t v187 = type metadata accessor for (_:)();
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v198 = v3;
  uint64_t v192 = v1;
  if (!OutputValue)
  {
    unint64_t v178 = 0;
    unint64_t v179 = 0;
    unint64_t v183 = 0;
    unint64_t v184 = 0;
    unint64_t v182 = 0;
    unint64_t v185 = 0;
    int v181 = 0;
    uint64_t v190 = 0;
    unint64_t v191 = 0;
    unint64_t v188 = 0;
    uint64_t Confirmation = 0;
    uint64_t v24 = 0;
    goto LABEL_5;
  }
  int v11 = *(_DWORD *)v1;
  HIDWORD(v228) = *(_DWORD *)(v1 + 4);
  LODWORD(v228) = *(_DWORD *)(v1 + 8);
  LODWORD(v227) = *(_DWORD *)(v1 + 12);
  unsigned int v226 = *(_DWORD *)(v1 + 16);
  LODWORD(v225) = *(_DWORD *)(v1 + 20);
  LODWORD(v224) = *(_DWORD *)(v1 + 24);
  LODWORD(v223) = *(_DWORD *)(v1 + 28);
  unsigned int v222 = *(_DWORD *)(v1 + 32);
  LODWORD(v221) = *(_DWORD *)(v1 + 36);
  LODWORD(v22outlined consume of Text?(0, 0, 0, 0) = *(_DWORD *)(v1 + 40);
  LODWORD(v219) = *(_DWORD *)(v1 + 44);
  uint64_t v12 = *(void *)(v1 + 56);
  uint64_t v217 = *(void *)(v1 + 48);
  uint64_t v218 = v12;
  uint64_t v229 = *(void *)(v1 + 64);
  int v13 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v15 = *(void *)(v1 + 80);
  uint64_t v14 = *(void *)(v1 + 88);
  uint64_t v16 = *(void *)(v1 + 96);
  int v17 = *(unsigned __int8 *)(v1 + 104);
  unsigned int v18 = *(unsigned __int8 *)(v2 + 105);
  uint64_t v19 = *(void *)(v2 + 120);
  uint64_t v211 = *(void *)(v2 + 112);
  uint64_t v212 = v19;
  uint64_t v20 = *(void *)(v2 + 128);
  uint64_t v214 = *(void *)(v2 + 136);
  uint64_t v21 = *(void *)(v2 + 152);
  uint64_t v215 = *(void *)(v2 + 144);
  uint64_t v216 = v20;
  LODWORD(v213) = *(unsigned __int8 *)(v2 + 160);
  LODWORD(v24outlined consume of Text?(0, 0, 0, 0) = v11;
  char v22 = AGGraphAnyInputsChanged();
  unsigned int v23 = v240;
  *(_DWORD *)uint64_t v2 = v240;
  if ((v22 & 1) == 0)
  {
    LODWORD(v177) = v17;
    unsigned __int8 v232 = v17 & 1;
    unint64_t v240 = __PAIR64__(HIDWORD(v228), v23);
    unint64_t v241 = __PAIR64__(v227, v228);
    unint64_t v242 = __PAIR64__(v225, v226);
    unint64_t v243 = __PAIR64__(v223, v224);
    unint64_t v244 = __PAIR64__(v221, v222);
    unint64_t v245 = __PAIR64__(v219, v220);
    uint64_t v209 = v15;
    unint64_t v246 = v217;
    uint64_t v247 = v218;
    uint64_t v248 = v229;
    char v249 = v13;
    uint64_t v251 = v15;
    uint64_t v252 = v14;
    uint64_t v253 = v16;
    LODWORD(v21outlined consume of Text?(0, 0, 0, 0) = v13;
    int v43 = v17 & 1;
    char v254 = v17 & 1;
    char v255 = v18;
    uint64_t v258 = v211;
    uint64_t v259 = v212;
    uint64_t v260 = v216;
    uint64_t v261 = v214;
    uint64_t v262 = v215;
    uint64_t v263 = v21;
    char v264 = v213;
    uint64_t v206 = v21;
    uint64_t v207 = v16;
    uint64_t v208 = v14;
    uint64_t v44 = v198;
    unsigned int v45 = v23;
    MakeConfirmationDialog.environment.getter(&v236);
    swift_release();
    char v46 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    uint64_t result = swift_release();
    if ((v46 & 1) == 0) {
      return result;
    }
    LODWORD(v205) = v45;
    unint64_t v240 = __PAIR64__(HIDWORD(v228), v45);
    unint64_t v241 = __PAIR64__(v227, v228);
    unint64_t v242 = __PAIR64__(v225, v226);
    unint64_t v243 = __PAIR64__(v223, v224);
    unint64_t v244 = __PAIR64__(v221, v222);
    unint64_t v245 = __PAIR64__(v219, v220);
    uint64_t v48 = v218;
    unint64_t v246 = v217;
    uint64_t v247 = v218;
    uint64_t v49 = v44;
    uint64_t v50 = v229;
    uint64_t v248 = v229;
    char v249 = v210;
    uint64_t v251 = v209;
    uint64_t v252 = v208;
    uint64_t v253 = v207;
    char v254 = v43;
    char v255 = v18;
    int v199 = v43;
    uint64_t v51 = v212;
    uint64_t v258 = v211;
    uint64_t v259 = v212;
    uint64_t v52 = v215;
    uint64_t v53 = v216;
    uint64_t v54 = v214;
    uint64_t v260 = v216;
    uint64_t v261 = v214;
    uint64_t v262 = v215;
    uint64_t v263 = v206;
    unsigned int v203 = v18;
    char v55 = v213;
    char v264 = v213;
    uint64_t Confirmation = MakeConfirmationDialog.resolveTitle()(v49);
    uint64_t v189 = v56;
    unint64_t v240 = __PAIR64__(HIDWORD(v228), v205);
    unint64_t v241 = __PAIR64__(v227, v228);
    unint64_t v242 = __PAIR64__(v225, v226);
    unint64_t v243 = __PAIR64__(v223, v224);
    unint64_t v244 = __PAIR64__(v221, v222);
    unint64_t v245 = __PAIR64__(v219, v220);
    unint64_t v246 = v217;
    uint64_t v247 = v48;
    uint64_t v248 = v50;
    char v249 = v210;
    uint64_t v251 = v209;
    uint64_t v252 = v208;
    uint64_t v253 = v207;
    char v254 = v199;
    char v255 = v203;
    uint64_t v57 = v211;
    uint64_t v258 = v211;
    uint64_t v259 = v51;
    uint64_t v260 = v53;
    uint64_t v261 = v54;
    uint64_t v262 = v52;
    uint64_t v263 = v206;
    char v264 = v55;
    MakeConfirmationDialog.environment.getter(&v236);
    uint64_t v58 = v57;
    if (v237)
    {
      type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>, (uint64_t)&type metadata for DialogColorSchemeKey, (uint64_t)&protocol witness table for DialogColorSchemeKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>, (uint64_t)&type metadata for DialogColorSchemeKey, (uint64_t)&protocol witness table for DialogColorSchemeKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    char v132 = v210;
    if (v230 == 2)
    {
      unint64_t v240 = __PAIR64__(HIDWORD(v228), v205);
      unint64_t v241 = __PAIR64__(v227, v228);
      unint64_t v242 = __PAIR64__(v225, v226);
      unint64_t v243 = __PAIR64__(v223, v224);
      unint64_t v244 = __PAIR64__(v221, v222);
      unint64_t v245 = __PAIR64__(v219, v220);
      uint64_t v133 = v217;
      unint64_t v246 = v217;
      uint64_t v247 = v218;
      uint64_t v248 = v229;
      char v249 = v210;
      *(_DWORD *)v250 = v235[0];
      *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
      uint64_t v251 = v209;
      uint64_t v252 = v208;
      uint64_t v134 = v206;
      uint64_t v253 = v207;
      int v199 = v232;
      char v254 = v232;
      char v255 = v203;
      __int16 v257 = v234;
      int v256 = v233;
      uint64_t v258 = v57;
      uint64_t v259 = v212;
      uint64_t v135 = v214;
      uint64_t v260 = v216;
      uint64_t v261 = v214;
      uint64_t v262 = v215;
      uint64_t v263 = v206;
      char v136 = v213;
      char v264 = v213;
      MakeConfirmationDialog.environment.getter(&v238);
      unint64_t v240 = v238;
      unint64_t v241 = v239;
      EnvironmentValues.explicitPreferredColorScheme.getter();
      unint64_t v137 = v133;
      swift_release();
      uint64_t v138 = v209;
      char v132 = v210;
      swift_release();
      uint64_t v139 = v216;
      char v140 = v203;
      uint64_t v141 = v134;
      uint64_t v142 = v207;
      uint64_t v143 = v208;
      uint64_t v144 = v212;
      unsigned int v145 = v219;
      unsigned int v146 = v220;
      unsigned int v147 = v221;
      unsigned int v148 = v222;
      unsigned int v149 = v223;
      unsigned int v150 = v224;
      unsigned int v151 = v225;
      unsigned int v152 = v226;
      unsigned int v153 = v227;
      unsigned int v154 = v228;
      unsigned int v155 = HIDWORD(v228);
      uint64_t v156 = v229;
      uint64_t v157 = v218;
      LODWORD(v176) = v231;
      char v158 = v199;
    }
    else
    {
      LODWORD(v176) = v230;
      char v158 = v232;
      uint64_t v141 = v206;
      uint64_t v142 = v207;
      char v140 = v203;
      uint64_t v143 = v208;
      uint64_t v138 = v209;
      unint64_t v137 = v217;
      uint64_t v157 = v218;
      uint64_t v156 = v229;
      uint64_t v144 = v212;
      uint64_t v139 = v216;
      uint64_t v135 = v214;
      char v136 = v213;
      unsigned int v155 = HIDWORD(v228);
      unsigned int v154 = v228;
      unsigned int v153 = v227;
      unsigned int v152 = v226;
      unsigned int v151 = v225;
      unsigned int v150 = v224;
      unsigned int v149 = v223;
      unsigned int v148 = v222;
      unsigned int v147 = v221;
      unsigned int v146 = v220;
      unsigned int v145 = v219;
    }
    unint64_t v240 = __PAIR64__(v155, v205);
    unint64_t v241 = __PAIR64__(v153, v154);
    unint64_t v242 = __PAIR64__(v151, v152);
    unint64_t v243 = __PAIR64__(v149, v150);
    unint64_t v244 = __PAIR64__(v147, v148);
    unint64_t v245 = __PAIR64__(v145, v146);
    unint64_t v246 = v137;
    uint64_t v247 = v157;
    uint64_t v248 = v156;
    char v249 = v132;
    *(_DWORD *)v250 = v235[0];
    *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
    uint64_t v251 = v138;
    uint64_t v252 = v143;
    uint64_t v253 = v142;
    char v254 = v158;
    char v255 = v140;
    __int16 v257 = v234;
    int v256 = v233;
    uint64_t v258 = v58;
    uint64_t v259 = v144;
    uint64_t v260 = v139;
    uint64_t v261 = v135;
    uint64_t v262 = v215;
    uint64_t v263 = v141;
    char v264 = v136;
    MakeConfirmationDialog.environment.getter(&v236);
    if (v237)
    {
      type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    unint64_t v159 = v240;
    unint64_t v240 = __PAIR64__(HIDWORD(v228), v205);
    unint64_t v241 = __PAIR64__(v227, v228);
    unint64_t v242 = __PAIR64__(v225, v226);
    unint64_t v243 = __PAIR64__(v223, v224);
    unint64_t v244 = __PAIR64__(v221, v222);
    unint64_t v245 = __PAIR64__(v219, v220);
    unint64_t v246 = v217;
    uint64_t v247 = v218;
    uint64_t v248 = v229;
    char v249 = v210;
    *(_DWORD *)v250 = v235[0];
    *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
    uint64_t v251 = v209;
    uint64_t v252 = v208;
    uint64_t v160 = v206;
    uint64_t v253 = v207;
    __int16 v257 = v234;
    int v256 = v233;
    unsigned __int8 v161 = v232;
    char v254 = v232;
    char v162 = v203;
    char v255 = v203;
    uint64_t v163 = v211;
    uint64_t v164 = v212;
    uint64_t v258 = v211;
    uint64_t v259 = v212;
    uint64_t v260 = v216;
    uint64_t v261 = v135;
    uint64_t v262 = v215;
    uint64_t v263 = v206;
    char v165 = v213;
    char v264 = v213;
    unint64_t v188 = v159;
    swift_retain();
    unint64_t v166 = MakeConfirmationDialog.resolveTintColor()();
    uint64_t v190 = v167;
    unint64_t v191 = v166;
    int v199 = v168;
    *(_DWORD *)v250 = v235[0];
    *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
    char v254 = v161;
    __int16 v257 = v234;
    int v256 = v233;
    unint64_t v240 = __PAIR64__(HIDWORD(v228), v205);
    unint64_t v241 = __PAIR64__(v227, v228);
    unint64_t v242 = __PAIR64__(v225, v226);
    unint64_t v243 = __PAIR64__(v223, v224);
    unint64_t v244 = __PAIR64__(v221, v222);
    unint64_t v245 = __PAIR64__(v219, v220);
    unint64_t v246 = v217;
    uint64_t v247 = v218;
    uint64_t v248 = v229;
    char v249 = v210;
    uint64_t v251 = v209;
    uint64_t v252 = v208;
    uint64_t v253 = v207;
    char v255 = v162;
    uint64_t v258 = v163;
    uint64_t v259 = v164;
    uint64_t v260 = v216;
    uint64_t v261 = v214;
    uint64_t v262 = v215;
    uint64_t v263 = v160;
    char v264 = v165;
    MakeConfirmationDialog.environment.getter(&v236);
    if (v237)
    {
      type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, (uint64_t)&type metadata for EnvironmentValues.DialogSeverityKey, (uint64_t)&protocol witness table for EnvironmentValues.DialogSeverityKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, (uint64_t)&type metadata for EnvironmentValues.DialogSeverityKey, (uint64_t)&protocol witness table for EnvironmentValues.DialogSeverityKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    uint64_t v169 = v199 & 1;
    swift_release_n();
    LODWORD(v175) = v240;
    unint64_t v240 = __PAIR64__(HIDWORD(v228), v205);
    unint64_t v241 = __PAIR64__(v227, v228);
    unint64_t v242 = __PAIR64__(v225, v226);
    unint64_t v243 = __PAIR64__(v223, v224);
    unint64_t v244 = __PAIR64__(v221, v222);
    unint64_t v245 = __PAIR64__(v219, v220);
    unint64_t v246 = v217;
    uint64_t v247 = v218;
    uint64_t v248 = v229;
    char v249 = v210;
    *(_DWORD *)v250 = v235[0];
    *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
    uint64_t v251 = v209;
    uint64_t v252 = v208;
    uint64_t v253 = v207;
    char v254 = v232;
    char v255 = v203;
    __int16 v257 = v234;
    int v256 = v233;
    uint64_t v258 = v163;
    uint64_t v259 = v164;
    uint64_t v260 = v216;
    uint64_t v261 = v214;
    uint64_t v262 = v215;
    uint64_t v263 = v206;
    char v264 = v213;
    uint64_t v3 = v198;
    MakeConfirmationDialog.environment.getter(&v236);
    uint64_t v180 = v169;
    if (v237)
    {
      type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, (uint64_t)&type metadata for DialogSuppressionConfiguration.Key, (uint64_t)&protocol witness table for DialogSuppressionConfiguration.Key, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, (uint64_t)&type metadata for DialogSuppressionConfiguration.Key, (uint64_t)&protocol witness table for DialogSuppressionConfiguration.Key, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    uint64_t v24 = v189;
    uint64_t v170 = Confirmation;
    swift_release_n();
    uint64_t v171 = v240;
    uint64_t v172 = v241;
    unint64_t v183 = v243;
    unint64_t v184 = v242;
    unint64_t v182 = v244;
    unint64_t v185 = v245;
    int v181 = v246;
    unint64_t v178 = v241;
    unint64_t v179 = v240;
    if (!v229)
    {
      swift_release();
      uint64_t v2 = v192;
      goto LABEL_6;
    }
    uint64_t v2 = v192;
    if (v170 == v218 && v229 == v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (v176 == 2)
      {
        if (v210 != 2) {
          goto LABEL_67;
        }
      }
      else if v210 == 2 || ((v176 ^ v210))
      {
        goto LABEL_67;
      }
      if (!v188)
      {
        if (v209)
        {
          unint64_t v188 = 0;
          goto LABEL_6;
        }
LABEL_70:
        if ((v199 & 1) == 0)
        {
          if ((v177 & 1) != 0
            || *(float *)&v191 != *(float *)&v208
            || *((float *)&v191 + 1) != *((float *)&v208 + 1)
            || *(float *)&v190 != *(float *)&v207
            || *((float *)&v190 + 1) != *((float *)&v207 + 1))
          {
            uint64_t v180 = 0;
            goto LABEL_6;
          }
LABEL_72:
          if (v175 == v203 && !v185)
          {
            if (!v206)
            {
              swift_bridgeObjectRelease();
              return swift_release();
            }
            unint64_t v185 = 0;
          }
          goto LABEL_6;
        }
        if (v177) {
          goto LABEL_72;
        }
LABEL_5:
        uint64_t v180 = 1;
        goto LABEL_6;
      }
      if (v209)
      {
        swift_retain();
        outlined copy of DialogSuppressionConfiguration?(v171, v172, v184, v183, v182, v185);
        swift_retain();
        LODWORD(v229) = static Image.== infix(_:_:)();
        swift_release_n();
        swift_release();
        outlined consume of DialogSuppressionConfiguration?(v171, v172, v184, v183, v182, v185);
        if ((v229 & 1) == 0) {
          goto LABEL_6;
        }
        goto LABEL_70;
      }
    }
LABEL_67:
    swift_release();
    goto LABEL_6;
  }
  unint64_t v179 = 0;
  uint64_t v180 = 1;
  unint64_t v178 = 0;
  unint64_t v183 = 0;
  unint64_t v184 = 0;
  unint64_t v182 = 0;
  unint64_t v185 = 0;
  int v181 = 0;
  uint64_t v190 = 0;
  unint64_t v191 = 0;
  unint64_t v188 = 0;
  uint64_t Confirmation = 0;
  uint64_t v24 = 0;
  uint64_t v3 = v198;
LABEL_6:
  int v25 = *(_DWORD *)(v2 + 4);
  LODWORD(v224) = *(_DWORD *)v2;
  unint64_t v228 = *(void *)(v2 + 8);
  LODWORD(v207) = *(_DWORD *)(v2 + 16);
  LODWORD(v229) = *(_DWORD *)(v2 + 20);
  int v26 = *(_DWORD *)(v2 + 28);
  LODWORD(v206) = *(_DWORD *)(v2 + 24);
  unsigned int v27 = *(_DWORD *)(v2 + 32);
  LODWORD(v216) = *(_DWORD *)(v2 + 36);
  LODWORD(v227) = *(_DWORD *)(v2 + 40);
  unsigned int v226 = *(_DWORD *)(v2 + 44);
  unint64_t v223 = *(void *)(v2 + 48);
  uint64_t v28 = *(void *)(v2 + 64);
  uint64_t v217 = *(void *)(v2 + 56);
  unsigned int v222 = *(unsigned __int8 *)(v2 + 72);
  int v29 = *(_DWORD *)(v2 + 73);
  *(_DWORD *)((char *)v235 + 3) = *(_DWORD *)(v2 + 76);
  v235[0] = v29;
  uint64_t v205 = *(void *)(v2 + 80);
  uint64_t v30 = *(void *)(v2 + 88);
  uint64_t v220 = *(void *)(v2 + 96);
  uint64_t v221 = v30;
  LODWORD(v215) = *(unsigned __int8 *)(v2 + 104);
  LODWORD(v214) = *(unsigned __int8 *)(v2 + 105);
  __int16 v234 = *(_WORD *)(v2 + 110);
  int v233 = *(_DWORD *)(v2 + 106);
  uint64_t v31 = *(void *)(v2 + 112);
  uint64_t v32 = *(void *)(v2 + 120);
  uint64_t v218 = *(void *)(v2 + 128);
  uint64_t v219 = v32;
  uint64_t v212 = *(void *)(v2 + 136);
  uint64_t v213 = v31;
  uint64_t v33 = *(void *)(v2 + 144);
  uint64_t v210 = *(void *)(v2 + 152);
  uint64_t v211 = v33;
  LODWORD(v209) = *(unsigned __int8 *)(v2 + 160);
  LODWORD(v225) = v25;
  uint64_t v34 = v200;
  uint64_t Value = AGGraphGetValue();
  char v37 = v36;
  uint64_t v175 = *(void (**)(void))(v202 + 16);
  uint64_t v176 = v202 + 16;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v175)(v201, Value, v34);
  uint64_t v208 = v28;
  if (v24)
  {
    int v38 = v180;
    unsigned int v39 = v207;
    uint64_t v40 = v28;
    uint64_t v41 = v217;
    uint64_t v42 = Confirmation;
  }
  else if (!v28 || (v37 & 1) != 0)
  {
    unint64_t v240 = __PAIR64__(v225, v224);
    unint64_t v241 = v228;
    unsigned int v39 = v207;
    unint64_t v242 = __PAIR64__(v229, v207);
    unint64_t v243 = __PAIR64__(v26, v206);
    unint64_t v244 = __PAIR64__(v216, v27);
    unint64_t v245 = __PAIR64__(v226, v227);
    uint64_t v59 = v217;
    unint64_t v246 = v223;
    uint64_t v247 = v217;
    uint64_t v248 = v28;
    char v249 = v222;
    *(_DWORD *)v250 = v235[0];
    *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
    uint64_t v251 = v205;
    uint64_t v252 = v221;
    uint64_t v253 = v220;
    char v254 = v215;
    char v255 = v214;
    __int16 v257 = v234;
    int v256 = v233;
    uint64_t v258 = v213;
    uint64_t v259 = v219;
    uint64_t v260 = v218;
    uint64_t v261 = v212;
    uint64_t v262 = v211;
    uint64_t v263 = v210;
    char v264 = v209;
    uint64_t v42 = MakeConfirmationDialog.resolveTitle()(v3);
    uint64_t v41 = v59;
    uint64_t v40 = v208;
    uint64_t v24 = v60;
    int v38 = v180;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = v208;
    uint64_t v41 = v217;
    uint64_t v42 = v217;
    uint64_t v24 = v208;
    int v38 = v180;
    unsigned int v39 = v207;
  }
  uint64_t Confirmation = v42;
  uint64_t v189 = v24;
  unint64_t v240 = __PAIR64__(v225, v224);
  unsigned int v61 = v228;
  unint64_t v241 = v228;
  unint64_t v242 = __PAIR64__(v229, v39);
  unsigned int v62 = v206;
  unint64_t v243 = __PAIR64__(v26, v206);
  unint64_t v244 = __PAIR64__(v216, v27);
  unint64_t v245 = __PAIR64__(v226, v227);
  unint64_t v246 = v223;
  uint64_t v247 = v41;
  uint64_t v248 = v40;
  char v249 = v222;
  *(_DWORD *)v250 = v235[0];
  *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
  uint64_t v251 = v205;
  uint64_t v252 = v221;
  uint64_t v253 = v220;
  char v254 = v215;
  char v255 = v214;
  __int16 v257 = v234;
  int v256 = v233;
  uint64_t v258 = v213;
  uint64_t v259 = v219;
  uint64_t v260 = v218;
  uint64_t v261 = v212;
  uint64_t v262 = v211;
  uint64_t v263 = v210;
  char v264 = v209;
  MakeConfirmationDialog.environment.getter(&v236);
  unsigned int v203 = v27;
  if (v237)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>, (uint64_t)&type metadata for DialogColorSchemeKey, (uint64_t)&protocol witness table for DialogColorSchemeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    unsigned int v62 = v206;
    unsigned int v61 = v228;
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>, (uint64_t)&type metadata for DialogColorSchemeKey, (uint64_t)&protocol witness table for DialogColorSchemeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    unsigned int v27 = v203;
    PropertyList.subscript.getter();
  }
  swift_release_n();
  int v63 = v231;
  unsigned int v64 = v207;
  unsigned int v65 = HIDWORD(v228);
  if (v231 == 2)
  {
    unint64_t v240 = __PAIR64__(v225, v224);
    unint64_t v241 = __PAIR64__(HIDWORD(v228), v61);
    unint64_t v242 = __PAIR64__(v229, v207);
    unint64_t v243 = __PAIR64__(v26, v62);
    unint64_t v244 = __PAIR64__(v216, v27);
    unint64_t v245 = __PAIR64__(v226, v227);
    unint64_t v246 = v223;
    uint64_t v247 = v217;
    uint64_t v248 = v208;
    char v249 = v222;
    *(_DWORD *)v250 = v235[0];
    *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
    uint64_t v251 = v205;
    uint64_t v252 = v221;
    uint64_t v253 = v220;
    char v254 = v215;
    char v255 = v214;
    __int16 v257 = v234;
    int v256 = v233;
    uint64_t v258 = v213;
    uint64_t v259 = v219;
    uint64_t v260 = v218;
    uint64_t v261 = v212;
    uint64_t v262 = v211;
    uint64_t v263 = v210;
    char v264 = v209;
    MakeConfirmationDialog.environment.getter(&v238);
    unint64_t v240 = v238;
    unint64_t v241 = v239;
    EnvironmentValues.explicitPreferredColorScheme.getter();
    unsigned int v65 = HIDWORD(v228);
    swift_release();
    unsigned int v62 = v206;
    unsigned int v61 = v228;
    swift_release();
    int v63 = v232;
  }
  LODWORD(v18outlined consume of Text?(0, 0, 0, 0) = v63;
  unint64_t v240 = __PAIR64__(v225, v224);
  unint64_t v241 = __PAIR64__(v65, v61);
  unint64_t v242 = __PAIR64__(v229, v64);
  unint64_t v243 = __PAIR64__(v26, v62);
  unint64_t v244 = __PAIR64__(v216, v27);
  unint64_t v245 = __PAIR64__(v226, v227);
  unint64_t v246 = v223;
  uint64_t v247 = v217;
  uint64_t v248 = v208;
  char v249 = v222;
  *(_DWORD *)v250 = v235[0];
  *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
  uint64_t v251 = v205;
  uint64_t v252 = v221;
  uint64_t v253 = v220;
  char v254 = v215;
  char v255 = v214;
  __int16 v257 = v234;
  int v256 = v233;
  uint64_t v258 = v213;
  uint64_t v259 = v219;
  uint64_t v260 = v218;
  uint64_t v261 = v212;
  uint64_t v262 = v211;
  uint64_t v263 = v210;
  char v264 = v209;
  MakeConfirmationDialog.environment.getter(&v236);
  if (v237)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    unsigned int v62 = v206;
    unsigned int v61 = v228;
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    unsigned int v27 = v203;
    PropertyList.subscript.getter();
  }
  swift_release_n();
  unsigned int v66 = HIDWORD(v228);
  int v199 = v26;
  unint64_t v177 = v240;
  if (v38)
  {
    unint64_t v240 = __PAIR64__(v225, v224);
    unint64_t v241 = __PAIR64__(HIDWORD(v228), v61);
    unint64_t v242 = __PAIR64__(v229, v207);
    unint64_t v243 = __PAIR64__(v26, v62);
    unint64_t v244 = __PAIR64__(v216, v27);
    unint64_t v245 = __PAIR64__(v226, v227);
    unint64_t v246 = v223;
    uint64_t v247 = v217;
    uint64_t v248 = v208;
    char v249 = v222;
    *(_DWORD *)v250 = v235[0];
    *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
    uint64_t v251 = v205;
    uint64_t v252 = v221;
    uint64_t v253 = v220;
    char v67 = v215;
    char v254 = v215;
    char v68 = v214;
    char v255 = v214;
    int v256 = v233;
    __int16 v257 = v234;
    uint64_t v69 = v212;
    uint64_t v70 = v213;
    uint64_t v258 = v213;
    uint64_t v259 = v219;
    uint64_t v260 = v218;
    uint64_t v261 = v212;
    uint64_t v72 = v210;
    uint64_t v71 = v211;
    uint64_t v262 = v211;
    uint64_t v263 = v210;
    char v73 = v209;
    char v264 = v209;
    unint64_t v74 = MakeConfirmationDialog.resolveTintColor()();
    int v75 = v199;
    unsigned int v66 = HIDWORD(v228);
    unsigned int v76 = v229;
    char v77 = v73;
    unsigned int v78 = v216;
    uint64_t v79 = v72;
    uint64_t v80 = v205;
    uint64_t v81 = v71;
    unsigned int v82 = v226;
    uint64_t v83 = v69;
    char v84 = v68;
    unsigned int v61 = v228;
    char v85 = v67;
    unsigned int v86 = v207;
    uint64_t v88 = v220;
    uint64_t v87 = v221;
    char v89 = v222;
    unint64_t v90 = v223;
    unsigned int v91 = v224;
    uint64_t v190 = v92;
    unint64_t v191 = v74;
    uint64_t v93 = v70;
    unsigned int v62 = v206;
    uint64_t v94 = v208;
    unsigned int v95 = v225;
    uint64_t v96 = v219;
    int v174 = v97 & 1;
    uint64_t v99 = v217;
    uint64_t v98 = v218;
  }
  else
  {
    int v174 = 0;
    unsigned int v86 = v207;
    unsigned int v76 = v229;
    int v75 = v26;
    unsigned int v78 = v216;
    unsigned int v82 = v226;
    unsigned int v95 = v225;
    unsigned int v91 = v224;
    uint64_t v94 = v208;
    unint64_t v90 = v223;
    uint64_t v99 = v217;
    uint64_t v98 = v218;
    char v89 = v222;
    uint64_t v80 = v205;
    uint64_t v88 = v220;
    uint64_t v87 = v221;
    char v85 = v215;
    char v84 = v214;
    uint64_t v83 = v212;
    uint64_t v93 = v213;
    uint64_t v96 = v219;
    uint64_t v79 = v210;
    uint64_t v81 = v211;
    char v77 = v209;
  }
  unint64_t v240 = __PAIR64__(v95, v91);
  unint64_t v241 = __PAIR64__(v66, v61);
  unint64_t v242 = __PAIR64__(v76, v86);
  unint64_t v243 = __PAIR64__(v75, v62);
  unint64_t v244 = __PAIR64__(v78, v203);
  unint64_t v245 = __PAIR64__(v82, v227);
  unint64_t v246 = v90;
  uint64_t v247 = v99;
  uint64_t v248 = v94;
  char v249 = v89;
  *(_DWORD *)v250 = v235[0];
  *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
  uint64_t v251 = v80;
  uint64_t v252 = v87;
  uint64_t v253 = v88;
  char v254 = v85;
  char v255 = v84;
  __int16 v257 = v234;
  int v256 = v233;
  uint64_t v258 = v93;
  uint64_t v259 = v96;
  uint64_t v260 = v98;
  uint64_t v261 = v83;
  uint64_t v262 = v81;
  uint64_t v263 = v79;
  char v264 = v77;
  MakeConfirmationDialog.environment.getter(&v236);
  if (v237)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, (uint64_t)&type metadata for EnvironmentValues.DialogSeverityKey, (uint64_t)&protocol witness table for EnvironmentValues.DialogSeverityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    unsigned int v78 = v216;
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, (uint64_t)&type metadata for EnvironmentValues.DialogSeverityKey, (uint64_t)&protocol witness table for EnvironmentValues.DialogSeverityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  LODWORD(v216) = v240;
  unint64_t v240 = __PAIR64__(v225, v224);
  unint64_t v241 = v228;
  unint64_t v242 = __PAIR64__(v229, v86);
  unint64_t v243 = __PAIR64__(v199, v206);
  unint64_t v244 = __PAIR64__(v78, v203);
  int v100 = v227;
  unint64_t v245 = __PAIR64__(v82, v227);
  unint64_t v246 = v223;
  uint64_t v247 = v217;
  uint64_t v248 = v208;
  char v249 = v222;
  *(_DWORD *)v250 = v235[0];
  *(_DWORD *)&v250[3] = *(_DWORD *)((char *)v235 + 3);
  uint64_t v251 = v80;
  uint64_t v252 = v221;
  uint64_t v253 = v220;
  char v254 = v215;
  char v255 = v214;
  __int16 v257 = v234;
  int v256 = v233;
  uint64_t v258 = v213;
  uint64_t v259 = v219;
  uint64_t v260 = v218;
  uint64_t v261 = v212;
  uint64_t v262 = v211;
  uint64_t v263 = v210;
  char v264 = v209;
  MakeConfirmationDialog.environment.getter(&v238);
  if (v239)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, (uint64_t)&type metadata for DialogSuppressionConfiguration.Key, (uint64_t)&protocol witness table for DialogSuppressionConfiguration.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, (uint64_t)&type metadata for DialogSuppressionConfiguration.Key, (uint64_t)&protocol witness table for DialogSuppressionConfiguration.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t v101 = v186;
  uint64_t v102 = (void (*)(unsigned char *))v175;
  swift_release_n();
  outlined init with take of DialogSuppressionConfiguration?((uint64_t)&v236, (uint64_t)&v240);
  int v103 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v103 != v226 || !v100)
  {
    int v100 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v104 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v104 = 1;
    }
    static ViewIdentity.nextSeed = v104;
    uint64_t v105 = v192;
    *(_DWORD *)(v192 + 4outlined consume of Text?(0, 0, 0, 0) = v100;
    *(_DWORD *)(v105 + 44) = v103;
  }
  AnchorGeometry.init(position:size:transform:)();
  int v106 = v237;
  int v107 = v236;
  static Anchor.Source<A>.bounds.getter();
  v236 = v107;
  LODWORD(v237) = v106;
  type metadata accessor for CGRect(0);
  uint64_t v227 = Anchor.Source.prepare(geometry:)();
  swift_release();
  uint64_t v108 = v200;
  unsigned int v226 = v201[64];
  v102(v193);
  uint64_t v109 = v202;
  unint64_t v110 = (*(unsigned __int8 *)(v202 + 80) + 52) & ~(unint64_t)*(unsigned __int8 *)(v202 + 80);
  unint64_t v111 = (v101 + v110 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v112 = (v111 + 11) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v223 = (v112 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v224 = (v112 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v113 = (v112 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v114 = v108;
  unint64_t v115 = (v113 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v225 = (v115 + 25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v116 = swift_allocObject();
  unint64_t v117 = v196;
  *(void *)(v116 + 16) = v197;
  *(void *)(v116 + 24) = v117;
  uint64_t v118 = v193;
  unint64_t v119 = v194;
  *(void *)(v116 + 32) = v195;
  *(void *)(v116 + 4outlined consume of Text?(0, 0, 0, 0) = v119;
  *(_DWORD *)(v116 + 48) = v100;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v109 + 32))(v116 + v110, v118, v114);
  unint64_t v120 = (_DWORD *)(v116 + v111);
  int v121 = HIDWORD(v228);
  *unint64_t v120 = v228;
  v120[1] = v121;
  long long v122 = (_DWORD *)(v116 + v112);
  int v123 = v229;
  *long long v122 = v207;
  v122[1] = v123;
  unint64_t v124 = v116 + v223;
  uint64_t v125 = v189;
  uint64_t v126 = v190;
  *(void *)unint64_t v124 = Confirmation;
  *(void *)(v124 + 8) = v125;
  *(unsigned char *)(v124 + 16) = v226;
  unint64_t v127 = v116 + v224;
  *(void *)unint64_t v127 = v227;
  LOBYTE(v112) = v180;
  *(unsigned char *)(v127 + 8) = v180;
  uint64_t v128 = v177;
  *(void *)(v116 + v113) = v177;
  unint64_t v129 = v116 + v115;
  uint64_t v130 = v191;
  *(void *)unint64_t v129 = v191;
  *(void *)(v129 + 8) = v126;
  LOBYTE(v115) = v174;
  *(unsigned char *)(v129 + 16) = v174;
  uint64_t v131 = v116 + v225;
  LOBYTE(v114) = v216;
  *(unsigned char *)(v129 + 17) = v216;
  outlined init with take of DialogSuppressionConfiguration?((uint64_t)&v240, v131);
  v236 = partial apply for closure #2 in MakeConfirmationDialog.updateValue();
  uint64_t v237 = v116;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of DialogSuppressionConfiguration?((uint64_t)&v240, (void (*)(void, void, void, void, void, void, void))outlined copy of DialogSuppressionConfiguration?);
  AGGraphSetOutputValue();
  swift_release();
  $defer #1 <A, B>() in MakeConfirmationDialog.updateValue()(v192, Confirmation, v125, v112, v128, v130, v126, v115, v114, (uint64_t)&v240);
  outlined retain of DialogSuppressionConfiguration?((uint64_t)&v240, (void (*)(void, void, void, void, void, void, void))outlined consume of DialogSuppressionConfiguration?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of DialogSuppressionConfiguration?(v179, v178, v184, v183, v182, v185);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v202 + 8))(v201, v200);
}

uint64_t $defer #1 <A, B>() in MakeConfirmationDialog.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  uint64_t v15 = a1;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v15 + 72) = a4;
  *(void *)(v15 + 8outlined consume of Text?(0, 0, 0, 0) = a5;
  swift_retain();
  swift_release();
  uint64_t v16 = *(void *)(v15 + 112);
  v15 += 112;
  *(void *)(v15 - 24) = a6;
  *(void *)(v15 - 16) = a7;
  *(unsigned char *)(v15 - 8) = a8 & 1;
  *(unsigned char *)(v15 - 7) = a9;
  uint64_t v17 = *(void *)(v15 + 8);
  uint64_t v18 = *(void *)(v15 + 16);
  uint64_t v19 = *(void *)(v15 + 24);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = *(void *)(v15 + 40);
  outlined init with take of DialogSuppressionConfiguration?(a10, v15);
  outlined retain of DialogSuppressionConfiguration?(a10, (void (*)(void, void, void, void, void, void, void))outlined copy of DialogSuppressionConfiguration?);
  uint64_t v22 = v16;

  return outlined consume of DialogSuppressionConfiguration?(v22, v17, v18, v19, v20, v21);
}

uint64_t closure #2 in MakeConfirmationDialog.updateValue()(uint64_t *a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  uint64_t v20 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v22 & 1) != 0))
  {
    outlined init with copy of ConfirmationDialog(*(void *)(v20 + 56) + 184 * v21, (uint64_t)v31);
    outlined destroy of ConfirmationDialog?((uint64_t)v31);
    MEMORY[0x18C112B90](0xD000000000000084, 0x800000018832DB00);
  }
  else
  {
    long long v35 = 0u;
    memset(v36, 0, 49);
    long long v34 = 0u;
    long long v32 = 0u;
    memset(v33, 0, sizeof(v33));
    memset(v31, 0, sizeof(v31));
    outlined destroy of ConfirmationDialog?((uint64_t)v31);
  }
  uint64_t v23 = *(void *)(a3 + 8);
  uint64_t v24 = *(void *)(a3 + 16);
  char v25 = *(unsigned char *)(a3 + 24);
  LOBYTE(v31[0]) = *(unsigned char *)a3;
  v31[1] = v23;
  v31[2] = v24;
  LOBYTE(v31[3]) = v25;
  *(void *)((char *)&v31[3] + 4) = a4;
  *(void *)((char *)&v31[4] + 4) = a5;
  *(void *)&long long v32 = a6;
  *((void *)&v32 + 1) = a7;
  LOBYTE(v33[0]) = a8;
  v33[3] = a9;
  swift_unknownObjectWeakInit();
  BYTE8(v34) = a10;
  *(void *)&long long v35 = a11;
  *(void *)((char *)v33 + 4) = a12;
  *(void *)((char *)&v33[1] + 4) = a13;
  BYTE4(v33[2]) = a14 & 1;
  BYTE8(v35) = a15;
  outlined init with take of DialogSuppressionConfiguration?(a16, (uint64_t)v36);
  outlined init with copy of ConfirmationDialog((uint64_t)v31, (uint64_t)v30);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of DialogSuppressionConfiguration?(a16, (void (*)(void, void, void, void, void, void, void))outlined copy of DialogSuppressionConfiguration?);
  specialized Dictionary.subscript.setter((uint64_t)v30, a2);
  return outlined destroy of ConfirmationDialog((uint64_t)v31);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(int *a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = *a1;
  uint64_t result = outlined init with copy of ConfirmationDialog((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v3;
  return result;
}

{
  int v3;
  uint64_t result;

  int v3 = *a1;
  uint64_t result = outlined init with copy of InspectorStorage((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v3;
  return result;
}

uint64_t partial apply for implicit closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(*(long long **)(v0 + 48), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void *outlined release of MakeConfirmationDialog<A, B>(void *a1)
{
  uint64_t v2 = a1[14];
  uint64_t v3 = a1[15];
  uint64_t v4 = a1[16];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[18];
  uint64_t v7 = a1[19];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of DialogSuppressionConfiguration?(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t type metadata accessor for MakeConfirmationDialog()
{
  return swift_getGenericMetadata();
}

void *outlined retain of MakeConfirmationDialog<A, B>(void *a1)
{
  uint64_t v2 = a1[14];
  uint64_t v3 = a1[15];
  uint64_t v4 = a1[16];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[18];
  uint64_t v7 = a1[19];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of DialogSuppressionConfiguration?(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t outlined init with take of DialogSuppressionConfiguration?(uint64_t a1, uint64_t a2)
{
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static ConfirmationDialog.PreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of ConfirmationDialog(uint64_t a1)
{
  return a1;
}

uint64_t destroy for MakeConfirmationDialog(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 152))
  {
    if (*(void *)(a1 + 136))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned char *)(a1 + 128));
      swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for MakeConfirmationDialog(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v6;
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  uint64_t v7 = (_OWORD *)(a1 + 112);
  uint64_t v8 = a2 + 112;
  uint64_t v9 = *(void *)(a2 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 136);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 112);
      uint64_t v12 = *(void *)(a2 + 120);
      char v13 = *(unsigned char *)(a2 + 128);
      outlined copy of Text.Storage(v11, v12, v13);
      *(void *)(a1 + 112) = v11;
      *(void *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = v12;
      *(unsigned char *)(a1 + 128) = v13;
      *(void *)(a1 + 136) = v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v15 = *(_OWORD *)(v8 + 16);
      *uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 128) = v15;
    }
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v9;
    *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v14 = *(_OWORD *)(v8 + 16);
    *uint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 128) = v14;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(v8 + 32);
    *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(v8 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for MakeConfirmationDialog(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 2outlined consume of Text?(0, 0, 0, 0) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 4outlined consume of Text?(0, 0, 0, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  uint64_t v5 = (_OWORD *)(a1 + 112);
  long long v6 = (_OWORD *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 152);
  if (*(void *)(a1 + 152))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 136);
      if (*(void *)(a1 + 136))
      {
        if (v8)
        {
          uint64_t v9 = *(void *)(a2 + 112);
          uint64_t v10 = *(void *)(a2 + 120);
          char v11 = *(unsigned char *)(a2 + 128);
          outlined copy of Text.Storage(v9, v10, v11);
          uint64_t v12 = *(void *)(a1 + 112);
          uint64_t v13 = *(void *)(a1 + 120);
          char v14 = *(unsigned char *)(a1 + 128);
          *(void *)(a1 + 112) = v9;
          *(void *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = v10;
          *(unsigned char *)(a1 + 128) = v11;
          outlined consume of Text.Storage(v12, v13, v14);
          *(void *)(a1 + 136) = *(void *)(a2 + 136);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 112);
          long long v27 = *(_OWORD *)(a2 + 128);
          _OWORD *v5 = *v6;
          *(_OWORD *)(a1 + 128) = v27;
        }
      }
      else if (v8)
      {
        uint64_t v21 = *(void *)(a2 + 112);
        uint64_t v22 = *(void *)(a2 + 120);
        char v23 = *(unsigned char *)(a2 + 128);
        outlined copy of Text.Storage(v21, v22, v23);
        *(void *)(a1 + 112) = v21;
        *(void *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = v22;
        *(unsigned char *)(a1 + 128) = v23;
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v29 = *(_OWORD *)(a2 + 128);
        _OWORD *v5 = *v6;
        *(_OWORD *)(a1 + 128) = v29;
      }
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_retain();
      swift_release();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
    }
    else
    {
      outlined destroy of DialogSuppressionConfiguration(a1 + 112);
      long long v19 = *(_OWORD *)(a2 + 128);
      long long v18 = *(_OWORD *)(a2 + 144);
      long long v20 = *v6;
      *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v19;
      *(_OWORD *)(a1 + 144) = v18;
      _OWORD *v5 = v20;
    }
  }
  else if (v7)
  {
    if (*(void *)(a2 + 136))
    {
      uint64_t v15 = *(void *)(a2 + 112);
      uint64_t v16 = *(void *)(a2 + 120);
      char v17 = *(unsigned char *)(a2 + 128);
      outlined copy of Text.Storage(v15, v16, v17);
      *(void *)(a1 + 112) = v15;
      *(void *)(a1 + 12outlined consume of Text?(0, 0, 0, 0) = v16;
      *(unsigned char *)(a1 + 128) = v17;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v28 = *(_OWORD *)(a2 + 128);
      _OWORD *v5 = *v6;
      *(_OWORD *)(a1 + 128) = v28;
    }
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v24 = *v6;
    long long v25 = *(_OWORD *)(a2 + 128);
    long long v26 = *(_OWORD *)(a2 + 144);
    *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v25;
    *(_OWORD *)(a1 + 144) = v26;
    _OWORD *v5 = v24;
  }
  return a1;
}

__n128 __swift_memcpy161_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *((unsigned char *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for MakeConfirmationDialog(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 8outlined consume of Text?(0, 0, 0, 0) = *(void *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  long long v6 = (_OWORD *)(a1 + 112);
  uint64_t v7 = (_OWORD *)(a2 + 112);
  if (*(void *)(a1 + 152))
  {
    uint64_t v8 = *(void *)(a2 + 152);
    if (v8)
    {
      if (*(void *)(a1 + 136))
      {
        uint64_t v9 = *(void *)(a2 + 136);
        if (v9)
        {
          char v10 = *(unsigned char *)(a2 + 128);
          uint64_t v11 = *(void *)(a1 + 112);
          uint64_t v12 = *(void *)(a1 + 120);
          char v13 = *(unsigned char *)(a1 + 128);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
          *(unsigned char *)(a1 + 128) = v10;
          outlined consume of Text.Storage(v11, v12, v13);
          *(void *)(a1 + 136) = v9;
          swift_bridgeObjectRelease();
LABEL_10:
          *(void *)(a1 + 144) = *(void *)(a2 + 144);
          swift_release();
          *(void *)(a1 + 152) = v8;
          swift_release();
          *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
          return a1;
        }
        outlined destroy of Text(a1 + 112);
      }
      long long v15 = *(_OWORD *)(a2 + 128);
      *long long v6 = *v7;
      *(_OWORD *)(a1 + 128) = v15;
      goto LABEL_10;
    }
    outlined destroy of DialogSuppressionConfiguration(a1 + 112);
  }
  long long v14 = *(_OWORD *)(a2 + 128);
  *long long v6 = *v7;
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 16outlined consume of Text?(0, 0, 0, 0) = *(unsigned char *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeConfirmationDialog(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeConfirmationDialog(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 16outlined consume of Text?(0, 0, 0, 0) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in MakeConfirmationDialog<A, B>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>, (uint64_t)&type metadata for DialogColorSchemeKey, (uint64_t)&protocol witness table for DialogColorSchemeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, (uint64_t)&type metadata for EnvironmentValues.DialogSeverityKey, (uint64_t)&protocol witness table for EnvironmentValues.DialogSeverityKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, (uint64_t)&type metadata for DialogSuppressionConfiguration.Key, (uint64_t)&protocol witness table for DialogSuppressionConfiguration.Key, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_1879A1D2C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v8 = *(_OWORD *)(v0 + 24);
  unint64_t v2 = (int *)(type metadata accessor for ConfirmationDialogModifierCore() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 52) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  unint64_t v4 = (((((((((*(void *)(*(void *)v2 + 64) + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 55) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8)
      + 25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(void *)(v5 + 32), *(void *)(v5 + 40), *(unsigned char *)(v5 + 48));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v5 + v2[18], v1);
  (*(void (**)(uint64_t))(*(void *)(v8 - 8) + 8))(v5 + v2[19]);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  if (*(void *)(v0 + v4 + 40))
  {
    if (*(void *)(v6 + 24))
    {
      outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in MakeConfirmationDialog.updateValue()(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ConfirmationDialogModifierCore() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 52) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v6 = (v5 + 11) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v1 + v5);
  unint64_t v10 = (v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in MakeConfirmationDialog.updateValue()(a1, *(_DWORD *)(v1 + 48), v1 + v4, v9, *(void *)(v1 + v6), *(void *)(v1 + v7), *(void *)(v1 + v7 + 8), *(unsigned char *)(v1 + v7 + 16), *(void *)(v1 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8)), *(unsigned char *)(v1 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + v8), *(void *)(v1 + v10), *(void *)(v1 + v10 + 8), *(unsigned char *)(v1 + v10 + 16), *(unsigned char *)(v1 + v10 + 17), v1 + ((v10 + 25) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t outlined destroy of ConfirmationDialog?(uint64_t a1)
{
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1(0, &lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for StyleContextWriter<DialogActionStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for TokenFieldStyle.Body : View in AutomaticTokenFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AutomaticTokenFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v31 = (uint64_t)&v29 - v12;
  outlined init with copy of TokenFieldConfiguration(a1, (uint64_t)v6, type metadata accessor for TokenFieldConfiguration);
  char v13 = &v10[*(int *)(v8 + 80)];
  *(_OWORD *)char v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  outlined init with copy of TokenFieldConfiguration((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  long long v14 = &v6[*(int *)(v4 + 36)];
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *((void *)v14 + 1);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  *(void *)(v17 + 24) = v16;
  long long v18 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v10[*(int *)(v8 + 76)];
  *long long v18 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Binding<AnyToken>) -> (@owned AnyView);
  v18[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v17;
  long long v19 = (uint64_t *)&v6[*(int *)(v4 + 32)];
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = v19[2];
  uint64_t v23 = v19[3];
  uint64_t v25 = *(void *)v13;
  uint64_t v24 = *((void *)v13 + 1);
  uint64_t v26 = *((void *)v13 + 2);
  uint64_t v29 = *((void *)v13 + 3);
  uint64_t v30 = v24;
  swift_retain();
  outlined copy of Text?(v20, v21, v22, v23);
  outlined consume of Text?(v25, v30, v26, v29);
  *(void *)char v13 = v20;
  *((void *)v13 + 1) = v21;
  *((void *)v13 + 2) = v22;
  *((void *)v13 + 3) = v23;
  outlined destroy of TokenFieldConfiguration((uint64_t)v6, type metadata accessor for TokenFieldConfiguration);
  uint64_t v27 = v31;
  outlined init with take of TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>((uint64_t)v10, v31);
  outlined init with copy of TokenFieldConfiguration(v27, v32, (uint64_t (*)(void))type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>);
  return outlined destroy of TokenFieldConfiguration(v27, (uint64_t (*)(void))type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>);
}

void type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>()
{
  if (!lazy cache variable for type metadata for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>)
  {
    lazy protocol witness table accessor for type AnyToken and conformance AnyToken();
    unint64_t v0 = type metadata accessor for TokenField();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyToken and conformance AnyToken()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyToken and conformance AnyToken;
  if (!lazy protocol witness table cache variable for type AnyToken and conformance AnyToken)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyToken and conformance AnyToken);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyToken and conformance AnyToken;
  if (!lazy protocol witness table cache variable for type AnyToken and conformance AnyToken)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyToken and conformance AnyToken);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyToken and conformance AnyToken;
  if (!lazy protocol witness table cache variable for type AnyToken and conformance AnyToken)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyToken and conformance AnyToken);
  }
  return result;
}

uint64_t sub_1879A2514()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Binding<AnyToken>) -> (@owned AnyView)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t outlined init with take of TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TokenFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for AutomaticTokenFieldStyle()
{
  return &type metadata for AutomaticTokenFieldStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>>();
    lazy protocol witness table accessor for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>>)
  {
    type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>();
    type metadata accessor for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>>);
    }
  }
}

void type metadata accessor for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>()
{
  if (!lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>)
  {
    lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle();
    unint64_t v0 = type metadata accessor for TokenFieldStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>;
  if (!lazy protocol witness table cache variable for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>)
  {
    type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>);
  }
  return result;
}

uint64_t TabContent.customizationBehavior(_:for:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v5[0] = *a1;
  uint64_t v6 = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for CustomizationBehaviorModifier, a4);
}

{
  unsigned char v5[8];
  uint64_t v6;

  v5[0] = *a1;
  uint64_t v6 = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for CustomizationBehaviorModifier, a4);
}

uint64_t TabContent.customizationID(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&unk_1ED43E538, a4);
}

void static TabCustomizationBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static TabCustomizationBehavior.reorderable.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static TabCustomizationBehavior.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static TabCustomizationBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for TabCustomizationBehavior()
{
  return &type metadata for TabCustomizationBehavior;
}

uint64_t sub_1879A28F0(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for CustomizationBehaviorModifier, (void (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier);
}

unint64_t lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier;
  if (!lazy protocol witness table cache variable for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier);
  }
  return result;
}

uint64_t sub_1879A2964(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&unk_1ED43E538, (void (*)(void))lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier);
}

uint64_t get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomizationIDModifier and conformance CustomizationIDModifier;
  if (!lazy protocol witness table cache variable for type CustomizationIDModifier and conformance CustomizationIDModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomizationIDModifier and conformance CustomizationIDModifier);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomizationBehaviorModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CustomizationBehaviorModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CustomizationBehaviorModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CustomizationBehaviorModifier()
{
  return &type metadata for CustomizationBehaviorModifier;
}

{
  return &type metadata for CustomizationBehaviorModifier;
}

unsigned char *storeEnumTagSinglePayload for TabCustomizationBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1879A2BE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabCustomizationBehavior.Role()
{
  return &type metadata for TabCustomizationBehavior.Role;
}

void *type metadata accessor for CustomizationIDModifier()
{
  return &unk_1ED43E538;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationBehavior.Role and conformance TabCustomizationBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationBehavior.Role and conformance TabCustomizationBehavior.Role;
  if (!lazy protocol witness table cache variable for type TabCustomizationBehavior.Role and conformance TabCustomizationBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationBehavior.Role and conformance TabCustomizationBehavior.Role);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CustomizationIDModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in CustomizationBehaviorModifier.body(content:)(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a3 + 32;
    while (*(unsigned char *)(v5 + v4) == 1)
    {
      if (v3 == ++v4) {
        goto LABEL_7;
      }
    }
    *(unsigned char *)(result + 26) = a2;
LABEL_7:
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v7 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if (*(unsigned char *)(v5 + i))
      {
        *(unsigned char *)(result + 25) = a2;
        return result;
      }
      if (v7 == v3) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance CustomizationBehaviorModifier()
{
  char v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationBehaviorModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationBehaviorModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier);
  swift_bridgeObjectRetain();
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance CustomizationIDModifier()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationIDModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>((unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<CustomizationIDModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationIDModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier);
  swift_bridgeObjectRetain();
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CustomizationBehaviorModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1879A2F34()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CustomizationBehaviorModifier.body(content:)(uint64_t a1)
{
  return closure #1 in CustomizationBehaviorModifier.body(content:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CustomizationIDModifier.body(content:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = outlined consume of TabCustomizationID?(v5, v6, v7);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ViewModifier_Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1879A3084(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA021CustomizationBehaviorH033_0BD63AC3193ED2016BE9565DB357DE28LLVG_AA10TabOptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationBehaviorModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier, (uint64_t)&type metadata for CustomizationBehaviorModifier, &lazy protocol witness table cache variable for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t sub_1879A30B4(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA021CustomizationBehaviorH033_0BD63AC3193ED2016BE9565DB357DE28LLVG_AA10TabOptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationIDModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier, (uint64_t)&unk_1ED43E538, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<CustomizationIDModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA021CustomizationBehaviorH033_0BD63AC3193ED2016BE9565DB357DE28LLVG_AA10TabOptionsV0eG0VQo_HOTm(uint64_t a1, unint64_t *a2, void (*a3)(void), uint64_t a4, unint64_t *a5)
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t dispatch thunk of ControlWidget.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ControlWidget.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t PageViewWrapper.body.getter@<X0>(uint64_t a1@<X8>)
{
  v6[0] = static Alignment.bottom.getter();
  v6[1] = v3;
  closure #1 in PageViewWrapper.body.getter(v1, (uint64_t)&v7);
  PageViewWrapper.toolbarModifier.getter((uint64_t)&v8);
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>);
  *(void *)(a1 + 496) = KeyPath;
  *(unsigned char *)(a1 + 504) = 4;
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>);
}

uint64_t closure #1 in PageViewWrapper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PageViewWrapper();
  uint64_t v5 = PageViewWrapper.selectedIndex.getter(v4);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  outlined init with copy of _VariadicView_Children(a1 + 48, (uint64_t)&v15);
  v14[0] = v5;
  v14[1] = v7;
  _OWORD v14[2] = v9;
  closure #1 in closure #1 in PageViewWrapper.body.getter(a1, v13);
  outlined init with copy of UIKitPagingView((uint64_t)v14, (uint64_t)v12);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
  outlined init with copy of UIKitPagingView((uint64_t)v12, a2);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v11, a2 + 80, (uint64_t (*)(void))type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
  outlined destroy of UIKitPagingView((uint64_t)v14);
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
  return outlined destroy of UIKitPagingView((uint64_t)v12);
}

uint64_t PageViewWrapper.selectedIndex.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  uint64_t v8 = *(void *)(v7 + 16);
  type metadata accessor for Binding();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  char v13 = &v31[-v12 - 16];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(&v31[-v12 - 16], v2 + *(int *)(a1 + 40), v9, v11);
  uint64_t v14 = *(void *)(a1 + 24);
  outlined init with copy of _VariadicView_Children(v2 + 48, (uint64_t)v42);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v14;
  long long v16 = *(_OWORD *)&v42[16];
  *(_OWORD *)(v15 + 32) = *(_OWORD *)v42;
  *(_OWORD *)(v15 + 48) = v16;
  *(_OWORD *)(v15 + 64) = v43;
  *(void *)(v15 + 8outlined consume of Text?(0, 0, 0, 0) = v44;
  uint64_t v32 = v8;
  uint64_t v33 = v14;
  long long v34 = partial apply for implicit closure #2 in implicit closure #1 in SystemTabView.BodyContent.body.getter;
  uint64_t v35 = v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>), (uint64_t)v31, MEMORY[0x1E4FBC248], v17, v18, (uint64_t)&v38);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_release();
  uint64_t v20 = v38;
  uint64_t v19 = v39;
  uint64_t v21 = v40;
  char v22 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if (!v19)
  {
    uint64_t v23 = MEMORY[0x1E4FBB960];
    _s7SwiftUI7BindingVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    outlined init with copy of _VariadicView_Children((uint64_t)(v6 + 48), (uint64_t)v36);
    type metadata accessor for ChildIndexProjection();
    uint64_t v24 = swift_allocObject();
    long long v25 = v36[1];
    *(_OWORD *)(v24 + 16) = v36[0];
    *(_OWORD *)(v24 + 32) = v25;
    *(_OWORD *)(v24 + 48) = v36[2];
    *(void *)(v24 + 64) = v37;
    uint64_t v20 = specialized Binding.projecting<A>(_:)(v24);
    uint64_t v21 = v26;
    char v22 = v27;
    swift_release();
    _s7SwiftUI7BindingVys11AnyHashableVGWOhTm_0((uint64_t)v42, (uint64_t)&lazy cache variable for type metadata for Binding<AnyHashable>, v23, MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI7BindingVySiGMaTm_0);
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&v36[0] = 0;
  swift_retain();
  swift_retain();
  BindingOperations.NilCoalescing.init(defaultValue:)();
  long long v30 = *(_OWORD *)v42;
  *(void *)uint64_t v42 = KeyPath;
  *(_OWORD *)&v42[8] = v30;
  uint64_t v38 = v21;
  LOBYTE(v39) = v22 & 1;
  swift_retain();
  swift_getAtKeyPath();
  type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>();
  lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>> and conformance ComposedProjection<A, B>, (void (*)(uint64_t))type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>);
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release_n();
  swift_release_n();
  return v20;
}

uint64_t closure #1 in closure #1 in PageViewWrapper.body.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = type metadata accessor for PageViewWrapper();
  if (*(unsigned char *)(a1 + *(int *)(result + 44)) == 2)
  {
    *(_OWORD *)((char *)a2 + 153) = 0u;
    a2[8] = 0u;
    a2[9] = 0u;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  else
  {
    PageViewWrapper.indexView.getter(result, (uint64_t)v18);
    EdgeInsets.init(_all:)();
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v18, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>);
    LOBYTE(v2outlined consume of Text?(0, 0, 0, 0) = 4;
    *((void *)&v20 + 1) = v6;
    *(void *)uint64_t v21 = v8;
    *(void *)&v21[8] = v10;
    *(void *)&v21[16] = v12;
    v21[24] = 0;
    uint64_t result = outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>);
    long long v13 = *(_OWORD *)v21;
    a2[8] = v20;
    a2[9] = v13;
    *(_OWORD *)((char *)a2 + 153) = *(_OWORD *)&v21[9];
    long long v14 = v19[5];
    a2[4] = v19[4];
    a2[5] = v14;
    long long v15 = v19[7];
    a2[6] = v19[6];
    a2[7] = v15;
    long long v16 = v19[1];
    *a2 = v19[0];
    a2[1] = v16;
    long long v17 = v19[3];
    a2[2] = v19[2];
    a2[3] = v17;
  }
  return result;
}

uint64_t PageViewWrapper.indexView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = PageViewWrapper.selectedIndex.getter(a1);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  outlined init with copy of _VariadicView_Children(v2 + 48, (uint64_t)v16);
  v15[0] = v5;
  v15[1] = v7;
  _OWORD v15[2] = v9;
  uint64_t KeyPath = swift_getKeyPath();
  char v11 = *(unsigned char *)(v2 + *(int *)(a1 + 44));
  outlined init with copy of IndexView((uint64_t)v15, (uint64_t)v13);
  v13[10] = KeyPath;
  char v14 = v11;
  outlined destroy of IndexView((uint64_t)v15);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>);
  v16[9] = -1;
  char v17 = 4;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>);
  specialized View.accessibility<A>(_:_:isEnabled:)(0xBFF0000000000000, 0, 1, a2);
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>);
}

uint64_t PageViewWrapper.toolbarModifier.getter@<X0>(uint64_t a1@<X8>)
{
  v4[0] = 0;
  v4[1] = 0;
  memset(&v5[184], 0, 24);
  closure #1 in PageViewWrapper.toolbarModifier.getter(v1, (uint64_t)v5);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v4, a1, (uint64_t (*)(void))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>);
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>);
}

double closure #1 in PageViewWrapper.toolbarModifier.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for status != -1) {
    swift_once();
  }
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement.status, (uint64_t)v14);
  outlined init with copy of ToolbarItemPlacement((uint64_t)v14, (uint64_t)v13);
  outlined init with copy of ToolbarItemPlacement((uint64_t)v13, (uint64_t)v10);
  char v12 = 0;
  closure #1 in closure #1 in PageViewWrapper.toolbarModifier.getter(a1, &v15);
  outlined destroy of ToolbarItemPlacement((uint64_t)v13);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?((uint64_t)&v15, (uint64_t)v11);
  long long v23 = v11[5];
  long long v24 = v11[6];
  long long v25 = v11[7];
  char v26 = v12;
  long long v19 = v11[1];
  long long v20 = v11[2];
  long long v21 = v11[3];
  long long v22 = v11[4];
  long long v15 = v10[0];
  long long v16 = v10[1];
  long long v17 = v10[2];
  long long v18 = v11[0];
  outlined destroy of ToolbarItemPlacement((uint64_t)v14);
  long long v4 = v24;
  *(_OWORD *)(a2 + 128) = v23;
  *(_OWORD *)(a2 + 144) = v4;
  *(_OWORD *)(a2 + 16outlined consume of Text?(0, 0, 0, 0) = v25;
  *(unsigned char *)(a2 + 176) = v26;
  long long v5 = v20;
  *(_OWORD *)(a2 + 64) = v19;
  *(_OWORD *)(a2 + 8outlined consume of Text?(0, 0, 0, 0) = v5;
  long long v6 = v22;
  *(_OWORD *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 112) = v6;
  long long v7 = v16;
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v7;
  double result = *(double *)&v17;
  long long v9 = v18;
  *(_OWORD *)(a2 + 32) = v17;
  *(_OWORD *)(a2 + 48) = v9;
  return result;
}

uint64_t closure #1 in closure #1 in PageViewWrapper.toolbarModifier.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = type metadata accessor for PageViewWrapper();
  if (*(unsigned char *)(a1 + *(int *)(result + 44)) != 2) {
    return PageViewWrapper.indexView.getter(result, (uint64_t)a2);
  }
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t PageViewWrapper.init(children:selection:displayMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a3;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable((uint64_t)v13, a4);
  *(void *)(a4 + 4outlined consume of Text?(0, 0, 0, 0) = 0;
  outlined destroy of AnyHashable((uint64_t)v13);
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 64) = v8;
  *(_OWORD *)(a4 + 8outlined consume of Text?(0, 0, 0, 0) = *(_OWORD *)(a1 + 32);
  *(void *)(a4 + 96) = *(void *)(a1 + 48);
  uint64_t v9 = type metadata accessor for PageViewWrapper();
  uint64_t v10 = a4 + *(int *)(v9 + 40);
  type metadata accessor for Binding();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  *(unsigned char *)(a4 + *(int *)(v9 + 44)) = v7;
  return result;
}

id UIKitPagingView.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PagingLayout()), sel_init);
  id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PagingCollectionView()), sel_initWithFrame_collectionViewLayout_, v2, 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v3, sel__setShouldSkipForcedLayoutBeforeBatchUpdates_, 1);
  long long v4 = self;
  id v5 = v3;
  id v6 = objc_msgSend(v4, sel_clearColor);
  objc_msgSend(v5, sel_setBackgroundColor_, v6);

  objc_msgSend(v5, sel_setShowsHorizontalScrollIndicator_, 0);
  objc_msgSend(v5, sel_setDataSource_, v1);
  objc_msgSend(v5, sel_setDelegate_, v1);
  objc_msgSend(v5, sel_setPagingEnabled_, 1);
  type metadata accessor for UIKitPagingCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  long long v8 = (void *)MEMORY[0x18C115780](0xD00000000000001CLL, 0x800000018832DE90);
  objc_msgSend(v5, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v8);

  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_collectionView);
  *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_collectionView) = v5;
  id v10 = v5;

  return v10;
}

void UIKitPagingView.updateUIView(_:context:)(char *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned __int8 **)(a2 + 40);
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    MEMORY[0x1F4188790](a1);
    swift_retain();
    long long v8 = v7;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    uint64_t v9 = v8;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
  }
  else
  {
    v19[0] = *(void *)(a2 + 16);
    v19[1] = v6;
    id v10 = v7;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 0);
  }
  EnvironmentValues.layoutDirection.getter();
  swift_release();
  swift_release();
  int v11 = v20;
  int v12 = v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection];
  v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection] = v20;
  if (v11 != v12)
  {
    long long v13 = &v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex];
    *(void *)long long v13 = 0;
    v13[8] = 1;
    char v14 = &v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex];
    *(void *)char v14 = 0;
    unsigned char v14[8] = 1;
    *(void *)&v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex] = -1;
  }
  outlined init with copy of _VariadicView_Children((uint64_t)(v2 + 3), (uint64_t)v19);
  uint64_t v15 = (uint64_t)&v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children];
  swift_beginAccess();
  outlined assign with take of _VariadicView_Children((uint64_t)v19, v15);
  swift_endAccess();
  Coordinator.updateDataSourceIfNeeded(_:)();
  uint64_t v16 = v3[1];
  uint64_t v17 = v3[2];
  long long v18 = &v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex];
  *(void *)long long v18 = *v3;
  *((void *)v18 + 1) = v16;
  *((void *)v18 + 2) = v17;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_retain();
  LOBYTE(v16) = Transaction.isPageScrollAnimated.getter();
  swift_release();
  Coordinator.scroll(_:isAnimated:)(a1, v16 & 1);
}

void UIKitPagingView._identifiedViewTree(in:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *((void *)v2 + 2);
  long long v26 = *v2;
  uint64_t v27 = v9;
  _s7SwiftUI7BindingVySiGMaTm_0(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v24);
  MEMORY[0x18C10A8A0](v24[0].i64[0], 0);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id v11 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v11)
  {
    type metadata accessor for UIKitPagingCell();
    uint64_t v12 = swift_dynamicCastClass();
    if (v12
      && (long long v13 = *(void **)(v12 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host)) != 0)
    {
      type metadata accessor for _UIHostingView<_ViewList_View>();
      lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>);
      id v14 = v13;
      ViewRendererHost.preferenceValue<A>(_:)();
      outlined init with copy of _IdentifiedViewTree((uint64_t)&v26, (uint64_t)v24);
      if (v25 != 2
        || (int8x16_t v15 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v24[2], v24[6]), vorrq_s8(v24[4], v24[8])), vorrq_s8(vorrq_s8(v24[3], v24[7]), vorrq_s8(v24[5], v24[9]))), vorrq_s8(v24[0], v24[1])), *(void *)&vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL))))
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v24);
        outlined init with copy of _IdentifiedViewTree((uint64_t)&v26, (uint64_t)v24);
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
        unint64_t v18 = *((void *)v16 + 2);
        unint64_t v17 = *((void *)v16 + 3);
        unint64_t v19 = v18 + 1;
        if (v18 >= v17 >> 1)
        {
          unint64_t v23 = v18 + 1;
          long long v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v16);
          unint64_t v19 = v23;
          uint64_t v16 = v21;
        }
        *((void *)v16 + 2) = v19;
        outlined init with take of _IdentifiedViewTree((uint64_t)v24, (uint64_t)&v16[168 * v18 + 32]);

        outlined destroy of _IdentifiedViewTree((uint64_t)&v26);
        if (!*((void *)v16 + 2)) {
          goto LABEL_9;
        }
LABEL_12:
        char v20 = 1;
        goto LABEL_13;
      }
      outlined destroy of _IdentifiedViewTree((uint64_t)&v26);

      outlined destroy of _IdentifiedViewTree((uint64_t)v24);
    }
    else
    {
    }
  }
  uint64_t v16 = (char *)MEMORY[0x1E4FBC860];
  if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_12;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  uint64_t v16 = 0;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 12outlined consume of Text?(0, 0, 0, 0) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 4outlined consume of Text?(0, 0, 0, 0) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  char v20 = 2;
  *(_OWORD *)(a2 + 8) = 0u;
LABEL_13:
  *(void *)a2 = v16;
  *(unsigned char *)(a2 + 16outlined consume of Text?(0, 0, 0, 0) = v20;
}

void UIKitPagingView._overrideSizeThatFits(_:in:uiView:)(double *a1, uint64_t a2, void *a3)
{
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    uint64_t v5 = UIKitPagingView.layoutTraitsHost(for:)(a3);
    if (v5)
    {
      uint64_t v6 = v5;
      type metadata accessor for _UIHostingView<_ViewList_View>();
      lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>);
      ViewRendererHost.sizeThatFits(_:)();
      double v8 = v7;
      double v10 = v9;
      double v11 = COERCE_DOUBLE(_ProposedSize.width.getter());
      if (v12) {
        double v11 = 0.0;
      }
      if (v8 > v11) {
        double v11 = v8;
      }
      *a1 = v11;
      *(double *)&uint64_t v13 = COERCE_DOUBLE(_ProposedSize.height.getter());
      char v15 = v14;

      double v16 = *(double *)&v13;
      if (v15) {
        double v16 = 0.0;
      }
      if (v10 > v16) {
        double v16 = v10;
      }
      a1[1] = v16;
    }
  }
}

void *UIKitPagingView.layoutTraitsHost(for:)(void *a1)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *((void *)v1 + 2);
  long long v18 = *v1;
  uint64_t v19 = v7;
  _s7SwiftUI7BindingVySiGMaTm_0(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v17);
  MEMORY[0x18C10A8A0](v17[0], 0);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v9 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v9)
  {
    type metadata accessor for UIKitPagingCell();
    uint64_t v10 = swift_dynamicCastClass();
    if (v10)
    {
      double v11 = *(void **)(v10 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host);
      id v12 = v11;

      if (v11) {
        return v11;
      }
    }
    else
    {
    }
  }
  if (!_VariadicView_Children.endIndex.getter()) {
    return 0;
  }
  _VariadicView_Children.subscript.getter();
  outlined init with copy of _ViewList_View((uint64_t)&v18, (uint64_t)v17);
  type metadata accessor for _UIHostingView<_ViewList_View>();
  id v14 = objc_allocWithZone(v13);
  double v11 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v17);
  outlined destroy of _VariadicView_Children.Element((uint64_t)&v18);
  return v11;
}

void UIKitPagingView._overrideLayoutTraits(_:for:)(uint64_t a1, void *a2)
{
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    uint64_t v3 = UIKitPagingView.layoutTraitsHost(for:)(a2);
    if (v3)
    {
      id v4 = v3;
      static _ProposedSize.unspecified.getter();
      type metadata accessor for _UIHostingView<_ViewList_View>();
      lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>);
      ViewRendererHost.sizeThatFits(_:)();
      _LayoutTraits.minSize.setter();
      _LayoutTraits.maxSize.setter();
      _LayoutTraits.idealSize.setter();
    }
  }
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitPagingView@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  outlined init with copy of _VariadicView_Children((uint64_t)(v1 + 3), (uint64_t)v10);
  char v9 = 0;
  id v6 = objc_allocWithZone((Class)type metadata accessor for Coordinator());
  swift_retain();
  swift_retain();
  id v7 = specialized Coordinator.init(selectedIndex:children:layoutDirection:)(v3, v4, v5, (uint64_t)v10, &v9);
  swift_release();
  uint64_t result = swift_release();
  *a1 = v7;
  return result;
}

uint64_t PagingLayout.layoutAttributesForElements(in:)(double a1, double a2, double a3, double a4)
{
  v15.receiver = v4;
  v15.super_class = (Class)swift_getObjectType();
  id v9 = objc_msgSendSuper2(&v15, sel_layoutAttributesForElementsInRect_, a1, a2, a3, a4);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  type metadata accessor for UICollectionViewLayoutAttributes();
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return v11;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v12 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_4:
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        MEMORY[0x18C117680](i, v11);
        swift_unknownObjectRelease();
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PagingLayout()
{
  return self;
}

uint64_t Coordinator.updateDataSourceIfNeeded(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children;
  swift_beginAccess();
  outlined init with copy of _VariadicView_Children(v2, (uint64_t)v9);
  uint64_t v3 = _ViewList_Backing.ids.getter();
  outlined destroy of _ViewList_Backing((uint64_t)v9);
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs;
  uint64_t v5 = swift_bridgeObjectRetain();
  char v6 = specialized static Array<A>.== infix(_:_:)(v5, v3);
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = *(void *)(v1 + v4);
    v9[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized CollectionChanges.formChanges<A, B>(from:to:)(v7, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    PagingCollectionView.apply(changes:newIDs:)(v9[0], v3);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t Coordinator.updateContents(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexPath?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  double v7 = MEMORY[0x1F4188790](v6 - 8);
  id v9 = (char *)v22 - v8;
  id v28 = a1;
  id v10 = objc_msgSend(a1, sel_indexPathsForVisibleItems, v7);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = *(void *)(v11 + 16);
  void v22[2] = v11;
  if (v12)
  {
    id v14 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    unint64_t v15 = v11 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v16 = *(void *)(v13 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 40);
    long long v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v27 = v14;
    long long v24 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v25 = v16;
    unint64_t v23 = (void (**)(char *, uint64_t))(v13 - 8);
    v22[1] = (v13 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v14(v9, v15, v2);
    while (1)
    {
      long long v18 = *v17;
      (*v17)(v9, 0, 1, v2);
      if ((*v26)(v9, 1, v2) == 1) {
        break;
      }
      (*v24)(v5, v9, v2);
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v20 = objc_msgSend(v28, sel_cellForItemAtIndexPath_, isa);

      if (v20)
      {
        Coordinator.configureCell(_:at:)(v20);
      }
      (*v23)(v5, v2);
      v15 += v25;
      if (!--v12)
      {
        v18(v9, 1, 1, v2);
        return swift_bridgeObjectRelease();
      }
      v27(v9, v15, v2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t Coordinator.scroll(_:isAnimated:)(char *a1, int a2)
{
  uint64_t v3 = v2;
  int v44 = a2;
  unsigned int v45 = a1;
  type metadata accessor for IndexPath?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v40 - v5;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex);
  uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex);
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex + 8) == 1)
  {
    uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex + 16);
    long long v46 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex);
    uint64_t v47 = v13;
    _s7SwiftUI7BindingVySiGMaTm_0(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
    uint64_t v12 = &v48;
    MEMORY[0x18C113DA0](&v48);
  }
  MEMORY[0x18C10A8A0](*v12, 0);
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v42(v6, v10, v7);
  long long v43 = *(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
  v43(v6, 0, 1, v7);
  id v14 = &v45[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastScrolledIndexPath];
  swift_beginAccess();
  outlined assign with take of IndexPath?((uint64_t)v6, (uint64_t)v14);
  swift_endAccess();
  unint64_t v15 = v11;
  if (*((unsigned char *)v11 + 8) == 1)
  {
    uint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex + 16);
    long long v46 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex);
    uint64_t v47 = v16;
    _s7SwiftUI7BindingVySiGMaTm_0(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
    unint64_t v15 = &v48;
    MEMORY[0x18C113DA0](&v48);
  }
  uint64_t v17 = *v15;
  uint64_t v41 = OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex;
  if (v17 != *(void *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex))
  {
    if (*((unsigned char *)v11 + 8) == 1)
    {
      uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex + 16);
      long long v46 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex);
      uint64_t v47 = v18;
      _s7SwiftUI7BindingVySiGMaTm_0(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
      uint64_t v11 = &v48;
      MEMORY[0x18C113DA0](&v48);
    }
    uint64_t v19 = v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex;
    *(void *)uint64_t v19 = *v11;
    uint64_t v40 = v19;
    *(unsigned char *)(v19 + 8) = 0;
    id v20 = v45;
    objc_msgSend(v45, sel_contentOffset, v40);
    double v22 = v21;
    double v24 = v23;
    id v25 = objc_msgSend(v20, sel_window);

    if (v25)
    {
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v20, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, isa, 16, v44 & 1);
    }
    else
    {
      v42(v6, v10, v7);
      v43(v6, 0, 1, v7);
      uint64_t v27 = (uint64_t)v20
          + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_pendingIndexPath;
      swift_beginAccess();
      outlined assign with take of IndexPath?((uint64_t)v6, v27);
      swift_endAccess();
    }
    objc_msgSend(v20, sel_contentOffset);
    if (v29 == v22 && v28 == v24)
    {
      id v30 = v45;
      objc_msgSend(v45, sel_contentOffset);
      double v32 = v31;
      double v34 = v33;
      objc_msgSend(v30, sel_bounds);
      Coordinator.index(at:in:)(v32, v34, v35);
      if ((v37 & 1) == 0)
      {
        uint64_t v38 = v40;
        *(void *)(v3 + v41) = v36;
        if ((*(unsigned char *)(v38 + 8) & 1) == 0 && *(void **)v38 == v36)
        {
          *(void *)uint64_t v38 = 0;
          *(unsigned char *)(v38 + 8) = 1;
        }
        Coordinator.updateSelectedIndex(newIndex:)(v36);
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void Coordinator.index(at:in:)(double a1, double a2, double a3)
{
  if (a3 > 0.0)
  {
    double v4 = round(a1 / a3);
    if ((~*(void *)&v4 & 0x7FF0000000000000) != 0)
    {
      if (v4 > -9.22337204e18)
      {
        if (v4 < 9.22337204e18)
        {
          uint64_t v5 = (uint64_t)v4;
          if (*(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection) != 1) {
            return;
          }
          uint64_t v6 = v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children;
          swift_beginAccess();
          outlined init with copy of _VariadicView_Children(v6, (uint64_t)v9);
          uint64_t v7 = _VariadicView_Children.endIndex.getter();
          if ((_VariadicView_Children.endIndex.getter() & 0x8000000000000000) == 0)
          {
            uint64_t v8 = _VariadicView_Children.endIndex.getter();
            if ((v7 & 0x8000000000000000) == 0 && v8 >= v7)
            {
              outlined destroy of _VariadicView_Children((uint64_t)v9);
              if (!__OFSUB__(v7 - 1, v5)) {
                return;
              }
LABEL_16:
              __break(1u);
              return;
            }
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t @objc Coordinator.collectionView(_:willDisplay:forItemAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, char *))
{
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = a3;
  id v15 = a4;
  id v16 = a1;
  a6(v15, v13);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void Coordinator.scrollViewDidScroll(_:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_collectionView);
  if (v2)
  {
    uint64_t v3 = v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize;
    if ((*(unsigned char *)(v3 + 16) & 1) == 0)
    {
      double v5 = *(double *)v3;
      objc_msgSend(a1, sel_bounds);
      if (v5 == CGRectGetWidth(v15))
      {
        objc_msgSend(a1, sel_contentOffset);
        double v7 = v6;
        double v9 = v8;
        objc_msgSend(a1, sel_bounds);
        Coordinator.index(at:in:)(v7, v9, v10);
        if ((v12 & 1) == 0)
        {
          *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex) = v11;
          uint64_t v13 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex;
          if ((*(unsigned char *)(v1
                         + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex
                         + 8) & 1) == 0
            && *(void **)v13 == v11)
          {
            *(void *)uint64_t v13 = 0;
            *(unsigned char *)(v13 + 8) = 1;
          }
          Coordinator.updateSelectedIndex(newIndex:)(v11);
        }
      }
    }
  }
}

void Coordinator.configureCell(_:at:)(void *a1)
{
  type metadata accessor for UIKitPagingCell();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3) {
    return;
  }
  double v4 = (char *)v3;
  uint64_t v5 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children;
  swift_beginAccess();
  outlined init with copy of _VariadicView_Children(v5, (uint64_t)v40);
  id v6 = a1;
  uint64_t v7 = _VariadicView_Children.endIndex.getter();
  if (_VariadicView_Children.endIndex.getter() < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v8 = _VariadicView_Children.endIndex.getter();
  if (v7 < 0 || v8 < v7) {
    goto LABEL_16;
  }
  outlined destroy of _VariadicView_Children((uint64_t)v40);
  unint64_t v9 = IndexPath.item.getter();
  if ((v9 & 0x8000000000000000) != 0 || v9 >= v7)
  {
  }
  else
  {
    outlined init with copy of _VariadicView_Children(v5, (uint64_t)v39);
    IndexPath.item.getter();
    _VariadicView_Children.subscript.getter();
    outlined destroy of _VariadicView_Children((uint64_t)v39);
    outlined init with copy of _ViewList_View((uint64_t)v40, (uint64_t)v41);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v40);
    uint64_t v10 = OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host;
    uint64_t v11 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host];
    if (v11)
    {
      char v12 = v11;
      id v13 = objc_msgSend(v4, sel_contentView);
      objc_msgSend(v13, sel_bounds);
      double v15 = v14;
      double v17 = v16;
      double v19 = v18;
      double v21 = v20;

      objc_msgSend(v12, sel_setFrame_, v15, v17, v19, v21);
      outlined init with copy of _ViewList_View((uint64_t)v41, (uint64_t)v40);
      outlined init with copy of _ViewList_View((uint64_t)v40, (uint64_t)v39);
      uint64_t v22 = (uint64_t)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x60);
      swift_beginAccess();
      outlined assign with take of _ViewList_View((uint64_t)v39, v22);
      swift_endAccess();
      v39[0] = 1;
      type metadata accessor for _UIHostingView<_ViewList_View>();
      lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of _ViewList_View((uint64_t)v40);
    }
    else
    {
      outlined init with copy of _ViewList_View((uint64_t)v41, (uint64_t)v40);
      type metadata accessor for _UIHostingView<_ViewList_View>();
      id v24 = objc_allocWithZone(v23);
      id v25 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v40);
      long long v26 = *(void **)&v4[v10];
      *(void *)&v4[v10] = v25;
      id v27 = v25;

      double v28 = *(void **)&v4[v10];
      if (v28)
      {
        *(void *)((char *)v28 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v28) + 0x198) + 8) = &protocol witness table for UIKitPagingCell;
        swift_unknownObjectWeakAssign();
      }
      id v29 = objc_msgSend(v4, sel_contentView);
      objc_msgSend(v29, sel_bounds);
      double v31 = v30;
      double v33 = v32;
      double v35 = v34;
      double v37 = v36;

      objc_msgSend(v27, sel_setFrame_, v31, v33, v35, v37);
      objc_msgSend(v27, sel_setAutoresizingMask_, 18);
      id v38 = objc_msgSend(v4, sel_contentView);
      objc_msgSend(v38, sel_addSubview_, v27);
    }
    outlined destroy of _ViewList_View((uint64_t)v41);
  }
}

void *Coordinator.updateSelectedIndex(newIndex:)(void *result)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex + 8) == 1)
  {
    uint64_t v2 = result;
    _s7SwiftUI7BindingVySiGMaTm_0(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
    uint64_t result = MEMORY[0x18C113DA0](&v4);
    if (v4 != v2)
    {
      uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex;
      if ((*(unsigned char *)(v1
                     + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex
                     + 8) & 1) != 0)
      {
        *(void *)uint64_t v3 = v2;
        *(unsigned char *)(v3 + 8) = 0;
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        static Update.enqueueAction(_:)();
        return (void *)swift_release_n();
      }
      else if (*(void **)v3 != v2)
      {
        *(void *)uint64_t v3 = v2;
        *(unsigned char *)(v3 + 8) = 0;
      }
    }
  }
  return result;
}

void closure #1 in Coordinator.updateSelectedIndex(newIndex:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (unsigned char *)MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    char v3 = v2[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex + 8];

    if ((v3 & 1) == 0)
    {
      swift_beginAccess();
      uint64_t v4 = MEMORY[0x18C119DF0](v1);
      if (v4)
      {
        uint64_t v5 = (void *)v4;
        swift_retain();
        swift_retain();

        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
      }
    }
  }
  swift_beginAccess();
  id v6 = (char *)MEMORY[0x18C119DF0](v1);
  if (v6)
  {
    uint64_t v7 = &v6[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex];
    *(void *)uint64_t v7 = 0;
    v7[8] = 1;
  }
}

id UIKitPagingCell.__deallocating_deinit()
{
  return Coordinator.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for UIKitPagingCell);
}

uint64_t type metadata accessor for UIKitPagingCell()
{
  return self;
}

uint64_t PagingCollectionView.apply(changes:newIDs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v6 = (void *)swift_allocObject();
  void v6[2] = v5;
  v6[3] = a2;
  void v6[4] = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in PagingCollectionView.apply(changes:newIDs:);
  *(void *)(v7 + 24) = v6;
  double v17 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v18 = v7;
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 1107296256;
  double v15 = thunk for @escaping @callee_guaranteed () -> ();
  double v16 = &block_descriptor_17;
  uint64_t v8 = _Block_copy(&v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  double v17 = partial apply for closure #2 in PagingCollectionView.apply(changes:newIDs:);
  uint64_t v18 = v9;
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 1107296256;
  double v15 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  double v16 = &block_descriptor_66;
  uint64_t v10 = _Block_copy(&v13);
  swift_release();
  objc_msgSend(v2, sel_performBatchUpdates_completion_, v8, v10);
  _Block_release(v10);
  _Block_release(v8);
  swift_release();
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}