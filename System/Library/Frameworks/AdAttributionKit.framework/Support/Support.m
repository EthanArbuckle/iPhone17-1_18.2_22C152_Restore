int main(int argc, const char **argv, const char **envp)
{
  main()();
}

void sub_100003BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100003C10(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    v5 = objc_opt_class();
    [v5 databaseTable];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000059EC;
    v10[3] = &unk_1001BF178;
    v13 = v5;
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    id v6 = v4;
    id v12 = v6;
    id v7 = v11;
    [v3 enumerateKeysAndObjectsUsingBlock:v10];

    v8 = v12;
    id v2 = v6;
  }
  return v2;
}

uint64_t sub_100003D0C(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100003DB4;
  v7[3] = &unk_1001BEF50;
  uint64_t v10 = *(void *)(a1 + 56);
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);

  return v5;
}

uint64_t sub_100003DB4(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t result = sub_100003E10((uint64_t)SQLiteEntity, a3, a2, *(void *)(a1 + 48), *(void **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_100003E10(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = self;
  id v11 = [objc_alloc((Class)NSMutableString) initWithString:@"INSERT OR REPLACE INTO "];
  [v11 appendString:v8];
  objc_msgSend(v11, "appendString:", @" (");
  uint64_t v30 = (uint64_t)v10;
  uint64_t v12 = [v10 foreignKeyColumnForTable:v8];
  v13 = (void *)v12;
  if (v12) {
    CFStringRef v14 = (const __CFString *)v12;
  }
  else {
    CFStringRef v14 = @"ROWID";
  }
  [v11 appendString:v14];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  id v15 = v7;
  id v16 = [v15 countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v41;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v41 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v40 + 1) + 8 * i);
        [v11 appendString:@", "];
        [v11 appendString:v20];
      }
      id v17 = [v15 countByEnumeratingWithState:&v40 objects:v45 count:16];
    }
    while (v17);
  }

  [v11 appendString:@") VALUES (?"];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v21 = v15;
  v22 = (char *)[v21 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v22)
  {
    v23 = v22;
    uint64_t v24 = *(void *)v37;
    while (1)
    {
      if (*(void *)v37 != v24) {
        objc_enumerationMutation(v21);
      }
      [v11 appendString:@", ?"];
      if (!--v23)
      {
        v23 = (char *)[v21 countByEnumeratingWithState:&v36 objects:v44 count:16];
        if (!v23) {
          break;
        }
      }
    }
  }

  [v11 appendString:@";"]);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1000058A8;
  v32[3] = &unk_1001BF150;
  uint64_t v34 = a4;
  id v35 = 0;
  id v25 = v21;
  id v33 = v25;
  uint64_t v26 = sub_1000094A0((uint64_t)v9, v11, &v35, v32);
  id v27 = v35;
  if (v27)
  {
    v28 = os_log_create("com.apple.AdAttributionKit", "SQL");
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_100005EAC(v30, (uint64_t)v27, v28);
    }
  }
  return v26;
}

void sub_1000043B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1000043D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [(id)objc_opt_class() databaseTable];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1000045A4(v2, v3, @"ROWID");

  [(id)objc_opt_class() foreignDatabaseTablesToDelete];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v16;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend((id)objc_opt_class(), "foreignKeyColumnForTable:", v9, (void)v15);
        if (v10)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1000045A4(*(void *)(a1 + 32), v9, v10);
          if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
          {

            goto LABEL_12;
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 8);
    *(void *)(v11 + 8) = 0;

    BOOL v13 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 0;
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

uint64_t sub_1000045A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"DELETE FROM %@ WHERE %@ = ?;",
           v6,
           v5);

    uint64_t v8 = *(void *)(v3 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100005B00;
    v10[3] = &unk_1001BF1A0;
    void v10[4] = v3;
    uint64_t v3 = sub_1000094A0(v8, v7, 0, v10);
  }
  return v3;
}

void sub_100004680(uint64_t a1)
{
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  CFStringRef v5 = @"SQLiteUserInfoKeyPersistentID";
  uint64_t v3 = +[NSNumber numberWithLongLong:*(void *)(a1 + 32)];
  id v6 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v2 postNotificationName:@"SQLiteDidDeleteEntityNotification" object:0 userInfo:v4];
}

void sub_100004864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000487C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = sub_100006404((uint64_t)v4);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

void sub_100004C58(id *a1, void *a2, uint64_t a3)
{
  id v5 = a1[6];
  id v6 = a2;
  id v8 = [v5 disambiguatedSQLForProperty:v6];
  if (a3) {
    [a1[4] appendString:@", "];
  }
  [a1[4] appendString:v8];
  id v7 = [a1[6] joinClauseForProperty:v6];

  if (v7) {
    [a1[5] addObject:v7];
  }
}

void sub_100004D0C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100004DD4;
  v5[3] = &unk_1001BF060;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  sub_100005FCC((uint64_t)v4, v5);
}

void sub_100004DD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100004EB0;
    v9[3] = &unk_1001BF038;
    id v8 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v5;
    [v8 enumerateObjectsUsingBlock:v9];
  }
}

void sub_100004EB0(uint64_t a1, void *a2, int a3)
{
  id v5 = *(void **)(a1 + 40);
  id v6 = a2;
  SQLiteCopyFoundationValue(v5, a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

void sub_100005110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000512C(uint64_t a1)
{
  id v2 = sub_100003C10(*(void **)(a1 + 32), *(void **)(a1 + 40));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000051F0;
  v7[3] = &unk_1001BF100;
  uint64_t v11 = *(void *)(a1 + 64);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = *(void *)(a1 + 56);
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  return v5;
}

void sub_1000051F0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [*(id *)(a1 + 56) foreignKeyColumnForTable:v7];
  if (v9) {
    uint64_t v10 = (__CFString *)v9;
  }
  else {
    uint64_t v10 = @"ROWID";
  }
  uint64_t v31 = 0;
  v32 = &v31;
  uint64_t v33 = 0x2020000000;
  char v34 = 1;
  if (([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
  {
    id v11 = [objc_alloc((Class)NSMutableString) initWithString:@"SELECT 1 FROM "];
    [v11 appendString:v7];
    [v11 appendString:@" WHERE "];
    [v11 appendString:v10];
    [v11 appendString:@" =  ? LIMIT 1;"];
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(v12 + 8);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100005594;
    v30[3] = &unk_1001BEFE8;
    v30[4] = v12;
    v30[5] = &v31;
    sub_1000091D4(v13, v11, v30);
  }
  if (*((unsigned char *)v32 + 24))
  {
    id v14 = objc_alloc_init((Class)NSMutableArray);
    id v15 = [objc_alloc((Class)NSMutableString) initWithString:@"UPDATE "];
    [v15 appendString:v7];
    [v15 appendString:@" SET "];
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x2020000000;
    char v29 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1000055F4;
    v24[3] = &unk_1001BF0B0;
    id v27 = v28;
    id v16 = v15;
    id v25 = v16;
    id v17 = v14;
    id v26 = v17;
    [v8 enumerateKeysAndObjectsUsingBlock:v24];
    [v16 appendString:@" WHERE "];
    [v16 appendString:v7];
    [v16 appendString:@"."];
    [v16 appendString:v10];
    [v16 appendString:@" = ?;"];
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000056A0;
    v21[3] = &unk_1001BF0D8;
    id v19 = v17;
    uint64_t v20 = *(void *)(a1 + 40);
    id v22 = v19;
    uint64_t v23 = v20;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sub_1000094A0(v18, v16, 0, v21);

    _Block_object_dispose(v28, 8);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sub_100003E10((uint64_t)SQLiteEntity, v8, v7, *(void *)(*(void *)(a1 + 40) + 16), *(void **)(*(void *)(a1 + 40) + 8));
  }
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) ^ 1;
  _Block_object_dispose(&v31, 8);
}

void sub_10000555C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100005594(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = sub_100006404((uint64_t)v4);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

void sub_1000055F4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    [*(id *)(a1 + 32) appendString:@", "];
  }
  [*(id *)(a1 + 32) appendString:v6];
  [*(id *)(a1 + 32) appendString:@" = ?"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  [*(id *)(a1 + 40) addObject:v5];
}

void sub_1000056A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    uint64_t v8 = 1;
    do
    {
      uint64_t v9 = 0;
      uint64_t v10 = v8;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        SQLiteBindFoundationValue(v3, (uint64_t)v9 + v10, *(void **)(*((void *)&v12 + 1) + 8 * (void)v9));
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v8 = (v10 + v9);
    }
    while (v6);
    uint64_t v11 = (v10 + v9);
  }
  else
  {
    uint64_t v11 = 1;
  }

  objc_msgSend(v3, "bindInt64:atPosition:", *(void *)(*(void *)(a1 + 40) + 16), v11, (void)v12);
}

void sub_1000058A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindInt64:*(void *)(a1 + 40) atPosition:1];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    uint64_t v8 = 2;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *(void *)(*((void *)&v11 + 1) + 8 * (void)v9), (void)v11);
        SQLiteBindFoundationValue(v3, (uint64_t)v9 + v8, v10);

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      uint64_t v8 = (v8 + v9);
    }
    while (v6);
  }
}

void sub_1000059EC(id *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (([v10 isEqualToString:@"ROWID"] & 1) == 0)
  {
    uint64_t v6 = [a1[6] foreignDatabaseTableForProperty:v10];
    if (v6)
    {
      id v7 = (id)v6;
      id v8 = [a1[6] foreignDatabaseColumnForProperty:v10];
    }
    else
    {
      id v8 = v10;
      id v7 = a1[4];
    }
    id v9 = [a1[5] objectForKey:v7];
    if (!v9)
    {
      id v9 = objc_alloc_init((Class)NSMutableDictionary);
      [a1[5] setObject:v9 forKey:v7];
    }
    [v9 setObject:v5 forKey:v8];
  }
}

id sub_100005B00(uint64_t a1, void *a2)
{
  return [a2 bindInt64:*(void *)(*(void *)(a1 + 32) + 16) atPosition:1];
}

id sub_100005B30(id result, uint64_t a2)
{
  if (result)
  {
    id v2 = sub_100005B70(result, a2);
    id v3 = [v2 BOOLValue];

    return v3;
  }
  return result;
}

id sub_100005B70(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_100005BE8(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_100005C60(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v2 error:0];
    }
    else
    {
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_100005D04(id result, uint64_t a2)
{
  if (result)
  {
    id v2 = sub_100005B70(result, a2);
    id v3 = [v2 integerValue];

    return v3;
  }
  return result;
}

id sub_100005D44(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_100005DBC(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_100005E34(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_100005EAC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v6 = 138543618;
  id v7 = (id)objc_opt_class();
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  id v5 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "[%{public}@] Error: %@", (uint8_t *)&v6, 0x16u);
}

id *sub_100005F54(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)SQLiteQueryResults;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

void sub_100005FCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = sub_10000F444((int *)[SQLiteCursor alloc], *(void **)(a1 + 8));
    uint64_t v5 = sub_100006FA0(*(void *)(a1 + 8));
    int v6 = sub_10000C390(*(void *)(a1 + 8));
    uint64_t v15 = v5;
    id v16 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10000611C;
    v12[3] = &unk_1001BF1C8;
    id v7 = v3;
    id v14 = v7;
    __int16 v8 = v4;
    long long v13 = v8;
    int v9 = sub_100009F5C((uint64_t)v6, &v16, v12);
    id v10 = v16;

    if (v9)
    {
      sub_10000BBB4(*(void *)(a1 + 8));
    }
    else
    {
      char v11 = 0;
      (*((void (**)(id, void, id, char *))v7 + 2))(v7, 0, v10, &v11);
    }
  }
}

uint64_t sub_10000611C(uint64_t a1)
{
  uint64_t v2 = sqlite3_step(*(sqlite3_stmt **)(a1 + 48));
  if (v2 == 100) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  return v2;
}

uint64_t sub_10000617C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100006244;
  v3[3] = &unk_1001BF1F0;
  v3[4] = &v4;
  sub_100005FCC(a1, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10000622C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

sqlite3_int64 sub_100006244(sqlite3_int64 result, sqlite3_int64 a2, uint64_t a3, unsigned char *a4)
{
  if (a2)
  {
    sqlite3_int64 v5 = result;
    uint64_t result = sub_10000FA54(a2, 0);
    *(void *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = result;
  }
  *a4 = 1;
  return result;
}

id sub_10000628C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v4 = 0;
    sqlite3_int64 v5 = &v4;
    uint64_t v6 = 0x3032000000;
    uint64_t v7 = sub_100006398;
    __int16 v8 = sub_1000063A8;
    id v9 = 0;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000063B0;
    v3[3] = &unk_1001BF1F0;
    v3[4] = &v4;
    sub_100005FCC(a1, v3);
    id v1 = (id)v5[5];
    _Block_object_dispose(&v4, 8);
  }
  else
  {
    id v1 = 0;
  }

  return v1;
}

void sub_100006380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100006398(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000063A8(uint64_t a1)
{
}

void sub_1000063B0(uint64_t a1, sqlite3_stmt **a2, uint64_t a3, unsigned char *a4)
{
  if (a2)
  {
    uint64_t v6 = sub_10000FC30(a2, 0);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    __int16 v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  *a4 = 1;
}

BOOL sub_100006404(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  sqlite3_int64 v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000064D4;
  v3[3] = &unk_1001BF1F0;
  v3[4] = &v4;
  sub_100005FCC(a1, v3);
  BOOL v1 = *((unsigned char *)v5 + 24) != 0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000064BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000064D4(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  *a4 = 1;
  return result;
}

id *sub_10000660C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)SQLiteDatabaseStoreSchema;
    __int16 v8 = (id *)objc_msgSendSuper2(&v13, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      uint64_t v9 = (uint64_t)a1[1];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100006710;
      v11[3] = &unk_1001BF218;
      a1 = a1;
      long long v12 = a1;
      sub_1000099D0(v9, v11);
    }
  }

  return a1;
}

uint64_t sub_100006710(uint64_t a1)
{
  sub_100009490(*(void *)(*(void *)(a1 + 32) + 8), @"PRAGMA user_version = 1;", 0);
  sub_100009490(*(void *)(*(void *)(a1 + 32) + 8), @"CREATE TABLE IF NOT EXISTS schema_version (schema_name TEXT, schema_version INTEGER DEFAULT 0, PRIMARY KEY(schema_name));",
    0);
  return 1;
}

uint64_t sub_100006764(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10000683C;
  v4[3] = &unk_1001BEFE8;
  v4[4] = a1;
  v4[5] = &v5;
  sub_1000091D4(v1, @"SELECT schema_version FROM schema_version WHERE schema_name = ?", v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100006824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000683C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  uint64_t v5 = sub_10000617C((uint64_t)v4);

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v5;
}

uint64_t sub_10000689C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v13 = 0;
    id v14 = &v13;
    uint64_t v15 = 0x2020000000;
    char v16 = 0;
    uint64_t v7 = +[NSString stringWithFormat:@"PRAGMA table_info(%@)", v6];
    uint64_t v8 = *(void *)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000069D4;
    v10[3] = &unk_1001BF268;
    long long v12 = &v13;
    id v11 = v5;
    sub_1000091D4(v8, v7, v10);
    a1 = *((unsigned char *)v14 + 24) != 0;

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

void sub_1000069BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000069D4(uint64_t a1, uint64_t a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100006A6C;
  v5[3] = &unk_1001BF240;
  long long v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  long long v6 = v4;
  sub_100005FCC(a2, v5);
}

void sub_100006A6C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  sub_10000FDE4(a2, @"name");
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  unsigned __int8 v6 = [v7 isEqualToString:*(void *)(a1 + 32)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  *a4 = v6;
}

uint64_t sub_100006AE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned __int8 v6 = v5;
  if (a1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100006B9C;
    v10[3] = &unk_1001BF290;
    void v10[4] = a1;
    id v11 = v5;
    uint64_t v12 = a2;
    uint64_t v8 = sub_10000980C(v7, v10);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t sub_100006B9C(void *a1)
{
  uint64_t v2 = sub_10000B5B0([SQLiteDatabaseStoreMigrator alloc], *(void **)(a1[4] + 8));
  (*(void (**)(void))(a1[5] + 16))();
  if (sub_10000B91C((uint64_t)v2))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void *)(v3 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100006C7C;
    v8[3] = &unk_1001BF150;
    uint64_t v5 = a1[6];
    v8[4] = v3;
    v8[5] = v5;
    uint64_t v6 = sub_1000094A0(v4, @"INSERT OR REPLACE INTO schema_version (schema_name, schema_version) VALUES (?, ?)", 0, v8);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_100006C7C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  [v4 bindInt64:*(void *)(a1 + 40) atPosition:2];
}

uint64_t sub_100006CE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100006DE0;
    v7[3] = &unk_1001BEFE8;
    id v8 = v3;
    uint64_t v9 = &v10;
    sub_1000091D4(v5, @"SELECT name FROM sqlite_master where name = ?", v7);
    a1 = *((unsigned char *)v11 + 24) != 0;

    _Block_object_dispose(&v10, 8);
  }

  return a1;
}

void sub_100006DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006DE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = sub_100006404((uint64_t)v4);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

void *sub_100006E80(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)SQLiteConnectionOptions;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      uint64_t v5 = (void *)a1[3];
      a1[3] = v4;

      a1[2] = -64;
    }
  }

  return a1;
}

uint64_t sub_100006EFC(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 16) = -a2;
  }
  return result;
}

uint64_t sub_100006F0C(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_100006FA0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

id sub_100006FAC(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 24, 1);
  }
  return result;
}

uint64_t sub_100006FC0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

void sub_100006FCC(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 32);
  }
}

uint64_t sub_100006FE0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

void sub_100006FEC(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 40);
  }
}

BOOL sub_100007000(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 8) != 0;
  }
  return result;
}

uint64_t sub_100007014(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 8) = a2;
  }
  return result;
}

__CFString *sub_10000761C(__CFString *result)
{
  if (result)
  {
    uint64_t v1 = (char *)[(__CFString *)result comparisonType];
    if ((unint64_t)(v1 - 1) > 6) {
      return 0;
    }
    else {
      return off_1001BF2B0[(void)(v1 - 1)];
    }
  }
  return result;
}

void *sub_100008B1C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)SQLiteConnection;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      uint64_t v5 = (void *)a1[7];
      a1[7] = v4;

      uint64_t v6 = +[NSMapTable strongToStrongObjectsMapTable];
      objc_super v7 = (void *)a1[4];
      a1[4] = v6;
    }
  }

  return a1;
}

uint64_t sub_100008C38(uint64_t result)
{
  if (result) {
    return sub_100008C44(result);
  }
  return result;
}

uint64_t sub_100008C44(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 16))
    {
      sub_10000A15C((sqlite3_stmt *)result);
      if (sqlite3_close(*(sqlite3 **)(v1 + 16)))
      {
        return 0;
      }
      else
      {
        uint64_t v2 = *(void **)(v1 + 8);
        *(void *)(v1 + 8) = 0;

        *(void *)(v1 + 16) = 0;
        *(void *)(v1 + 40) = 0;
        uint64_t result = 1;
        *(unsigned char *)(v1 + 48) = 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_100008CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v9 = v3;
    if (*(void *)(a1 + 40))
    {
      if (!*(void *)(a1 + 8))
      {
        id v4 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v5 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v4;
      }
      id v6 = [v9 copy];
      objc_super v7 = *(void **)(a1 + 8);
      id v8 = objc_retainBlock(v6);
      [v7 addObject:v8];
    }
    else
    {
      v3[2](v3);
    }
    id v3 = (void (**)(void))v9;
  }
}

void sub_100008D6C(BOOL *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v10 = 0;
    objc_super v7 = sub_100008E80(a1, v5, &v10);
    id v8 = v10;
    if (v7) {
      id v9 = sub_100005F54((id *)[SQLiteQueryResults alloc], v7);
    }
    else {
      id v9 = 0;
    }
    v6[2](v6, v9, v8);
    [v7 clearBindings];
    sub_10000BBB4((uint64_t)v7);
  }
}

void sub_100008E54(_Unwind_Exception *a1)
{
}

BOOL *sub_100008E80(BOOL *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if ((BOOL *)sub_10000C390((uint64_t)v5) == a1)
    {
      if (sub_100009718((uint64_t)a1))
      {
        id v11 = 0;
        id v8 = sub_10000A70C((uint64_t)a1, v6, &v11);
        id v7 = v11;
        if (v8)
        {
          if (sub_100007000(a1[7]) && (sub_10000BB5C((uint64_t)v8) & 1) == 0)
          {
            uint64_t v10 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7701 userInfo:0];

            a1 = 0;
            id v7 = (id)v10;
          }
          else
          {
            a1 = v8;
          }
        }
        else
        {
          a1 = 0;
        }

        if (a3)
        {
LABEL_11:
          if (!a1) {
            *a3 = v7;
          }
        }
LABEL_13:

        goto LABEL_14;
      }
      id v7 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7700 userInfo:0];
    }
    else
    {
      +[NSException raise:NSInvalidArgumentException format:@"Statement from a different connection"];
      id v7 = 0;
    }
    a1 = 0;
    if (a3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_14:

  return a1;
}

uint64_t sub_100009000(uint64_t result, void *a2, void *a3)
{
  if (result) {
    return sub_100009010(result, a2, a3, 0);
  }
  return result;
}

uint64_t sub_100009010(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  if (a1)
  {
    id v13 = 0;
    id v8 = sub_100008E80((BOOL *)a1, a2, &v13);
    id v9 = v13;
    if (v8)
    {
      if (v7) {
        v7[2](v7, v8);
      }
      id v12 = v9;
      a1 = sub_10000910C(a1, v8, &v12);
      id v10 = v12;

      if (v7) {
        [v8 clearBindings];
      }
      id v9 = v10;
    }
    else
    {
      a1 = 0;
    }
    sub_10000BBB4((uint64_t)v8);
    if (a3 && (a1 & 1) == 0) {
      *a3 = v9;
    }
  }
  return a1;
}

uint64_t sub_10000910C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10000A28C;
    v10[3] = &unk_1001BF2F0;
    id v7 = v5;
    id v11 = v7;
    uint64_t v8 = sub_100009F68(a1, a3, v10);
    if (v8) {
      sub_10000BBB4((uint64_t)v7);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_1000091D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v11 = 0;
    id v7 = sub_100009340((BOOL *)a1, v5, &v11);
    id v8 = v11;
    id v9 = sub_100010BD8([SQLitePreparedStatement alloc], *(void *)(a1 + 16), v5);
    if (v9) {
      [*(id *)(a1 + 32) setObject:v7 forKey:v9];
    }
    if (v7) {
      id v10 = sub_100005F54((id *)[SQLiteQueryResults alloc], v7);
    }
    else {
      id v10 = 0;
    }
    v6[2](v6, v10, v8);
    sub_10000BB10((uint64_t)v7);
    if (v9) {
      [*(id *)(a1 + 32) removeObjectForKey:v9];
    }
  }
}

void sub_100009300(_Unwind_Exception *a1)
{
}

BOOL *sub_100009340(BOOL *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    if (sub_100009718((uint64_t)a1))
    {
      id v10 = 0;
      id v6 = sub_100009CC8((uint64_t)a1, v5, &v10);
      id v7 = v10;
      if (v6)
      {
        if (sub_100007000(a1[7]) && (sub_10000BB5C((uint64_t)v6) & 1) == 0)
        {
          uint64_t v8 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7701 userInfo:0];

          sub_10000BB10((uint64_t)v6);
          a1 = 0;
          id v7 = (id)v8;
        }
        else
        {
          a1 = v6;
        }
      }
      else
      {
        a1 = 0;
      }

      if (a3)
      {
LABEL_12:
        if (!a1) {
          *a3 = v7;
        }
      }
    }
    else
    {
      id v7 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7700 userInfo:0];
      a1 = 0;
      if (a3) {
        goto LABEL_12;
      }
    }
  }

  return a1;
}

uint64_t sub_100009490(uint64_t result, void *a2, void *a3)
{
  if (result) {
    return sub_1000094A0(result, a2, a3, 0);
  }
  return result;
}

uint64_t sub_1000094A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  if (!a1)
  {
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  id v16 = 0;
  id v8 = a2;
  id v9 = sub_100009340((BOOL *)a1, v8, &v16);
  id v10 = v16;
  id v11 = sub_100010BD8([SQLitePreparedStatement alloc], *(void *)(a1 + 16), v8);

  if (v11) {
    [*(id *)(a1 + 32) setObject:v9 forKey:v11];
  }
  if (v9)
  {
    if (v7) {
      v7[2](v7, v9);
    }
    id v15 = v10;
    uint64_t v12 = sub_10000910C(a1, v9, &v15);
    id v13 = v15;

    sub_10000BB10((uint64_t)v9);
    if (v11) {
      [*(id *)(a1 + 32) removeObjectForKey:v11];
    }
    id v10 = v13;
    if (!a3) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint64_t v12 = 0;
  if (a3)
  {
LABEL_12:
    if ((v12 & 1) == 0) {
      *a3 = v10;
    }
  }
LABEL_14:

LABEL_15:
  return v12;
}

BOOL sub_1000095F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1)
  {
    BOOL v10 = 0;
    goto LABEL_6;
  }
  id v12 = 0;
  id v6 = sub_100008E80((BOOL *)a1, v5, &v12);
  id v7 = v12;
  if (!v6)
  {
    BOOL v10 = 0;
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  int v8 = sub_10000BB10((uint64_t)v6);
  uint64_t v9 = SQLiteCreateErrorForResultCode(v8);

  BOOL v10 = v9 == 0;
  [*(id *)(a1 + 32) removeObjectForKey:v5];
  id v7 = (id)v9;
  if (a3) {
LABEL_4:
  }
    *a3 = v7;
LABEL_5:

LABEL_6:
  return v10;
}

uint64_t sub_1000096D4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (sub_100009718(result)) {
      return sqlite3_changes(*(sqlite3 **)(v1 + 16));
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL sub_100009718(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  BOOL v2 = 1;
  if (!*(void *)(a1 + 16))
  {
    db = 0;
    char v3 = 1;
    while (1)
    {
      int v4 = SQLiteOpenDatabaseAndApplyOptions(&db, *(void **)(a1 + 56));
      BOOL v2 = v4 == 0;
      if (!v4) {
        break;
      }
      if (v4 <= 0x1Au && ((1 << v4) & 0x4000C02) != 0)
      {
        char v6 = sub_10000A294(a1) & v3;
        char v3 = 0;
        if (v6) {
          continue;
        }
      }
      return v2;
    }
    id v7 = db;
    *(void *)(a1 + 16) = db;
    sqlite3_create_function(v7, "timestamp", 0, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_10000A620, 0, 0);
  }
  return v2;
}

uint64_t sub_100009800(uint64_t a1)
{
  if (a1) {
    return sub_100009718(a1);
  }
  return a1;
}

uint64_t sub_10000980C(uint64_t a1, void *a2)
{
  char v3 = a2;
  if (a1)
  {
    int v4 = +[NSUUID UUID];
    id v5 = [v4 UUIDString];
    char v6 = [v5 stringByReplacingOccurrencesOfString:@"-" withString:&stru_1001D00C8];
    id v7 = +[NSString stringWithFormat:@"SP_%@", v6];

    int v8 = +[NSString stringWithFormat:@"SAVEPOINT %@", v7];
    LODWORD(v5) = sub_1000094A0(a1, v8, 0, 0);

    if (v5)
    {
      if (v3[2](v3))
      {
        uint64_t v9 = +[NSString stringWithFormat:@"RELEASE SAVEPOINT %@", v7];
        a1 = sub_1000094A0(a1, v9, 0, 0);

LABEL_7:
        goto LABEL_8;
      }
      BOOL v10 = +[NSString stringWithFormat:@"ROLLBACK TRANSACTION TO SAVEPOINT %@", v7];
      sub_1000094A0(a1, v10, 0, 0);
    }
    a1 = 0;
    goto LABEL_7;
  }
LABEL_8:

  return a1;
}

void sub_1000099A4(_Unwind_Exception *a1)
{
}

void sub_1000099D0(uint64_t a1, void *a2)
{
  char v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4 < 1)
    {
      if (!sub_1000094A0(a1, @"BEGIN DEFERRED TRANSACTION", 0, 0)) {
        goto LABEL_13;
      }
      *(void *)(a1 + 40) = 1;
      *(unsigned char *)(a1 + 48) = 0;
    }
    else
    {
      *(void *)(a1 + 40) = v4 + 1;
    }
    os_variant_has_internal_content();
    int v5 = v3[2](v3);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = v5 ^ 1;
    if (*(unsigned char *)(a1 + 48)) {
      int v7 = 1;
    }
    *(unsigned char *)(a1 + 48) = v7;
    uint64_t v8 = v6 - 1;
    *(void *)(a1 + 40) = v8;
    if (!v8)
    {
      if (v7) {
        uint64_t v9 = @"ROLLBACK TRANSACTION";
      }
      else {
        uint64_t v9 = @"COMMIT TRANSACTION";
      }
      sub_1000094A0(a1, v9, 0, 0);
      sub_100009AD8(a1);
    }
  }
LABEL_13:
}

void sub_100009AD8(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = *(void **)(a1 + 8);
    if (v2)
    {
      id v3 = [v2 copy];
      uint64_t v4 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = 0;

      int v5 = dispatch_get_global_queue(0, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10000A52C;
      block[3] = &unk_1001BF318;
      id v8 = v3;
      id v6 = v3;
      dispatch_async(v5, block);
    }
  }
}

void *sub_100009BA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    if (sub_100009718(a1))
    {
      id v10 = 0;
      id v6 = sub_100009CC8(a1, v5, &v10);
      id v7 = v10;
      if (v6)
      {
        id v8 = sub_100010BD8([SQLitePreparedStatement alloc], a1, v5);
        [*(id *)(a1 + 32) setObject:v6 forKey:v8];
      }
      else
      {
        id v8 = 0;
      }

      if (a3)
      {
LABEL_9:
        if (!v8) {
          *a3 = v7;
        }
      }
    }
    else
    {
      id v7 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7700 userInfo:0];
      id v8 = 0;
      if (a3) {
        goto LABEL_9;
      }
    }

    goto LABEL_12;
  }
  id v8 = 0;
LABEL_12:

  return v8;
}

id sub_100009CC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x3032000000;
    id v13 = sub_10000A664;
    id v14 = sub_10000A674;
    id v15 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10000A67C;
    v9[3] = &unk_1001BF340;
    v9[5] = &v10;
    v9[6] = [v5 UTF8String];
    void v9[4] = a1;
    sub_100009F68(a1, a3, v9);
    id v7 = (id)v11[5];
    _Block_object_dispose(&v10, 8);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_100009DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100009E08(BOOL a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x2020000000;
    char v12 = 0;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100009F00;
    v6[3] = &unk_1001BEFE8;
    id v7 = v3;
    id v8 = &v9;
    sub_1000091D4(a1, @"SELECT name FROM sqlite_master where name = ?", v6);
    a1 = *((unsigned char *)v10 + 24) != 0;

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_100009EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100009F00(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = sub_100006404((uint64_t)v4);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
}

uint64_t sub_100009F5C(uint64_t a1, void *a2, void *a3)
{
  if (a1) {
    return sub_100009F68(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_100009F68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (!a1)
  {
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  uint64_t v6 = 0;
  char v7 = 0;
  do
  {
    unsigned __int8 v15 = 0;
    int v9 = v5[2](v5, &v15);
    if (v9 <= 0x19u)
    {
      switch((char)v9)
      {
        case 0:
          goto LABEL_13;
        case 5:
        case 6:
          if (v6 < 10)
          {
            usleep(0xF4240u);
            ++v6;
            goto LABEL_9;
          }
          uint64_t v12 = +[NSError errorWithDomain:@"SQLiteErrorDomain" code:-7702 userInfo:0];
          break;
        case 10:
          uint64_t v11 = SQLiteCreateErrorForResultCode(v9);
          sub_10000A3BC(a1);
          goto LABEL_20;
        case 11:
          goto LABEL_14;
        default:
          goto LABEL_17;
      }
      goto LABEL_18;
    }
    if (v9 != 100)
    {
      if (v9 == 26)
      {
LABEL_14:
        uint64_t v11 = SQLiteCreateErrorForResultCode(v9);
        sub_10000A294(a1);
        goto LABEL_20;
      }
      if (v9 == 101)
      {
LABEL_13:
        uint64_t v11 = 0;
        char v7 = 1;
LABEL_19:
        goto LABEL_20;
      }
LABEL_17:
      uint64_t v12 = SQLiteCreateErrorForResultCode(v9);
LABEL_18:
      uint64_t v11 = (void *)v12;
      goto LABEL_19;
    }
    char v7 = 1;
LABEL_9:
    int v10 = v15;
  }
  while (!v10);
  uint64_t v11 = 0;
LABEL_20:
  if (a2 && (v7 & 1) == 0) {
    *a2 = v11;
  }
  unsigned __int8 v16 = v7;

  uint64_t v13 = v16;
LABEL_24:

  return v13;
}

sqlite3_stmt *sub_10000A15C(sqlite3_stmt *result)
{
  if (result)
  {
    uint64_t v1 = result;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    BOOL v2 = objc_msgSend(*((id *)result + 4), "objectEnumerator", 0);
    id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v9;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v2);
          }
          sub_10000BB10(*(void *)(*((void *)&v8 + 1) + 8 * (void)v6));
          uint64_t v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v4);
    }

    [*((id *)v1 + 4) removeAllObjects];
    uint64_t result = sqlite3_next_stmt(*((sqlite3 **)v1 + 2), 0);
    if (result)
    {
      char v7 = result;
      do
      {
        sqlite3_finalize(v7);
        uint64_t result = sqlite3_next_stmt(*((sqlite3 **)v1 + 2), v7);
        char v7 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_10000A28C(uint64_t a1)
{
  return sub_10000BC40(*(void *)(a1 + 32));
}

uint64_t sub_10000A294(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    char v3 = objc_opt_respondsToSelector();

    if (v3)
    {
      id v4 = os_log_create("com.apple.AdAttributionKit", "SQL");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_10000AB18();
      }

      uint64_t v5 = objc_loadWeakRetained((id *)(v1 + 24));
      id v6 = [v5 connectionNeedsResetForCorruption:v1];
LABEL_11:
      uint64_t v1 = (uint64_t)v6;

      return v1;
    }
    if (!sub_100007000(*(void *)(v1 + 56)))
    {
      char v7 = os_log_create("com.apple.AdAttributionKit", "SQL");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10000ABC0();
      }

      uint64_t v5 = sub_100006FAC(*(id *)(v1 + 56), v8);
      sub_100008C44(v1);
      id v6 = SQLiteDeleteDatabase(v5, 0);
      goto LABEL_11;
    }
    return 0;
  }
  return v1;
}

uint64_t sub_10000A3BC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    BOOL v2 = os_log_create("com.apple.AdAttributionKit", "SQL");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10000AD10();
    }

    char v3 = *(void **)(v1 + 8);
    id v4 = v3;
    uint64_t v5 = *(void *)(v1 + 40);
    if (!sub_100008C44(v1) || !sub_100009718(v1)) {
      goto LABEL_8;
    }
    if (v5)
    {
      if (sqlite3_exec(*(sqlite3 **)(v1 + 16), "BEGIN DEFERRED TRANSACTION", 0, 0, 0))
      {
LABEL_8:
        uint64_t v1 = sub_10000A294(v1);
LABEL_9:

        return v1;
      }
      objc_storeStrong((id *)(v1 + 8), v3);
      *(void *)(v1 + 40) = v5;
      *(unsigned char *)(v1 + 48) = 1;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
    char v8 = objc_opt_respondsToSelector();

    if (v8)
    {
      long long v9 = os_log_create("com.apple.AdAttributionKit", "SQL");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10000AC68();
      }

      id v10 = objc_loadWeakRetained((id *)(v1 + 24));
      uint64_t v1 = (uint64_t)[v10 connectionNeedsResetForReopen:v1];
    }
    else
    {
      uint64_t v1 = 1;
    }
    goto LABEL_9;
  }
  return v1;
}

void sub_10000A52C(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_10000A620(sqlite3_context *a1)
{
  +[NSDate timeIntervalSinceReferenceDate];

  sqlite3_result_int64(a1, (uint64_t)v2);
}

uint64_t sub_10000A664(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000A674(uint64_t a1)
{
}

uint64_t sub_10000A67C(uint64_t a1)
{
  ppStmt = 0;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 16), *(const char **)(a1 + 48), -1, &ppStmt, 0);
  if (SQLiteResultIsSuccess(v2))
  {
    id v3 = [SQLiteStatement alloc];
    uint64_t v4 = sub_10000B970((id *)&v3->super.isa, ppStmt, *(void **)(a1 + 32));
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    long long v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  else
  {
    sqlite3_finalize(ppStmt);
  }
  return v2;
}

id sub_10000A70C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v6 = [*(id *)(a1 + 32) objectForKey:v5];
    if (v6)
    {
      long long v7 = (void *)v6;
      id v8 = 0;
    }
    else
    {
      long long v9 = sub_100006FA0((uint64_t)v5);
      id v11 = 0;
      long long v7 = sub_100009CC8(a1, v9, &v11);
      id v8 = v11;

      if (v7)
      {
        [*(id *)(a1 + 32) setObject:v7 forKey:v5];
      }
      else if (a3)
      {
        id v8 = v8;
        long long v7 = 0;
        *a3 = v8;
      }
      else
      {
        long long v7 = 0;
      }
    }
  }
  else
  {
    long long v7 = 0;
  }

  return v7;
}

id *sub_10000A80C(id *WeakRetained)
{
  if (WeakRetained)
  {
    id WeakRetained = (id *)objc_loadWeakRetained(WeakRetained + 3);
    uint64_t v1 = vars8;
  }
  return WeakRetained;
}

id *sub_10000A83C(id *result, void *a2)
{
  if (result) {
    return (id *)objc_storeWeak(result + 3, a2);
  }
  return result;
}

uint64_t sub_10000A84C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

void sub_10000A8C8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_10000A8E8()
{
  return v0;
}

void sub_10000A908(uint64_t a1, char *a2)
{
  id v3 = sub_100006FAC(*(id *)(a1 + 56), a2);
  int v4 = 138543362;
  id v5 = v3;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)a2, OS_LOG_TYPE_FAULT, "Connection taken down HARD, please call close before deallocating: %{public}@", (uint8_t *)&v4, 0xCu);
}

void sub_10000A9A4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = os_log_create("com.apple.AdAttributionKit", "SQL");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    sub_10000A8F4();
    _os_log_fault_impl(v3, v4, v5, v6, v7, v8);
  }

  objc_end_catch();
}

void sub_10000AA5C(void *a1)
{
  id v1 = objc_begin_catch(a1);
  uint64_t v2 = os_log_create("com.apple.AdAttributionKit", "SQL");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    sub_10000A8F4();
    _os_log_impl(v3, v4, v5, v6, v7, v8);
  }

  objc_end_catch();
}

void sub_10000AB18()
{
  id v1 = (id)objc_opt_class();
  uint64_t v2 = (void *)sub_10000A8E8();
  os_log_t v4 = sub_100006FAC(v2, v3);
  sub_10000A8B0();
  sub_10000A8C8((void *)&_mh_execute_header, v5, v6, "[%@]: Asking delegate to reset database after corruption: %{public}@", v7, v8, v9, v10, v11);
}

void sub_10000ABC0()
{
  id v1 = (id)objc_opt_class();
  uint64_t v2 = (void *)sub_10000A8E8();
  os_log_t v4 = sub_100006FAC(v2, v3);
  sub_10000A8B0();
  sub_10000A8C8((void *)&_mh_execute_header, v5, v6, "[%@]: Deleting database after corruption: %{public}@", v7, v8, v9, v10, v11);
}

void sub_10000AC68()
{
  id v1 = (id)objc_opt_class();
  uint64_t v2 = (void *)sub_10000A8E8();
  os_log_t v4 = sub_100006FAC(v2, v3);
  sub_10000A8B0();
  sub_10000A8C8((void *)&_mh_execute_header, v5, v6, "[%@]: Asking delegate to reset database after reopen: %{public}@", v7, v8, v9, v10, v11);
}

void sub_10000AD10()
{
  id v1 = (id)objc_opt_class();
  uint64_t v2 = (void *)sub_10000A8E8();
  os_log_t v4 = sub_100006FAC(v2, v3);
  sub_10000A8B0();
  sub_10000A8C8((void *)&_mh_execute_header, v5, v6, "[%@]: Reopening database after IO error: %{public}@", v7, v8, v9, v10, v11);
}

id sub_10000AFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 16);
  if (a3) {
    return [v3 setObject:a3 forKey:a2];
  }
  else {
    return [v3 removeObjectForKey:a2];
  }
}

id sub_10000B3FC(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_10000B474(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = [a1 valueForProperty:a2];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

unsigned char *sub_10000B5B0(unsigned char *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)SQLiteDatabaseStoreMigrator;
    id v5 = objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      a1[24] = 1;
    }
  }

  return a1;
}

id *sub_10000B630(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[1];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_10000B660(uint64_t a1, void *a2)
{
  if (a1) {
    sub_10000B674(a1, a2, 0, 0);
  }
}

void sub_10000B674(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      id v14 = 0;
      char v10 = sub_1000094A0(v9, v7, &v14, v8);
      id v11 = v14;
      id v12 = v14;
      if (a3)
      {
        if (*(unsigned char *)(a1 + 24)) {
          char v13 = v10;
        }
        else {
          char v13 = 0;
        }
        *(unsigned char *)(a1 + 24) = v13;
      }
      if ((v10 & 1) == 0) {
        objc_storeStrong((id *)(a1 + 16), v11);
      }
    }
    else
    {
      id v12 = 0;
    }
  }
}

void sub_10000B738(uint64_t a1, void *a2, void *a3)
{
  if (a1) {
    sub_10000B674(a1, a2, 0, a3);
  }
}

void sub_10000B74C(uint64_t a1, void *a2)
{
  if (a1) {
    sub_10000B674(a1, a2, 1, 0);
  }
}

void sub_10000B760(uint64_t a1, void *a2, void *a3)
{
  if (a1) {
    sub_10000B674(a1, a2, 1, a3);
  }
}

void sub_10000B774(uint64_t a1, void *a2, void *a3)
{
  if (a1) {
    sub_10000B788(a1, a2, 0, a3);
  }
}

void sub_10000B788(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a1 && *(unsigned char *)(a1 + 24))
  {
    uint64_t v10 = *(void *)(a1 + 8);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10000B870;
    v11[3] = &unk_1001BF398;
    char v13 = a3;
    void v11[4] = a1;
    id v12 = v8;
    sub_1000091D4(v10, v7, v11);
  }
}

void sub_10000B85C(uint64_t a1, void *a2, void *a3)
{
  if (a1) {
    sub_10000B788(a1, a2, 1, a3);
  }
}

void sub_10000B870(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5 && *(unsigned char *)(a1 + 48))
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), a3);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10000B908(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 16, 1);
  }
  return result;
}

uint64_t sub_10000B91C(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 24) & 1;
  }
  return result;
}

id *sub_10000B970(id *a1, void *a2, void *a3)
{
  id v6 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)SQLiteStatement;
    id v7 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v7;
    if (v7)
    {
      objc_storeStrong(v7 + 1, a3);
      a1[2] = a2;
      objc_storeStrong(a1 + 3, a1);
    }
  }

  return a1;
}

id sub_10000B9FC(uint64_t a1)
{
  if (!a1) {
    goto LABEL_8;
  }
  uint64_t v2 = *(sqlite3_stmt **)(a1 + 16);
  if (!v2)
  {
    +[NSException raise:NSInternalInconsistencyException format:@"Statement already finalized"];
LABEL_8:
    id v4 = 0;
    goto LABEL_9;
  }
  int v3 = sqlite3_column_count(v2);
  id v4 = +[NSMutableDictionary dictionaryWithCapacity:v3];
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      id v6 = [objc_alloc((Class)NSNumber) initWithInt:v5];
      id v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", sqlite3_column_name(*(sqlite3_stmt **)(a1 + 16), v5));
      [v4 setObject:v6 forKey:v7];

      uint64_t v5 = (v5 + 1);
    }
    while (v3 != v5);
  }
LABEL_9:

  return v4;
}

uint64_t sub_10000BB10(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(sqlite3_stmt **)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = sqlite3_finalize(v2);
  id v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;

  return v3;
}

uint64_t sub_10000BB5C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(sqlite3_stmt **)(result + 16);
    if (v1)
    {
      return sqlite3_stmt_readonly(v1) != 0;
    }
    else
    {
      +[NSException raise:NSInternalInconsistencyException format:@"Statement already finalized"];
      return 1;
    }
  }
  return result;
}

uint64_t sub_10000BBB4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(sqlite3_stmt **)(result + 16);
    if (v1) {
      return sqlite3_reset(v1);
    }
    else {
      return 21;
    }
  }
  return result;
}

__CFString *sub_10000BBCC(__CFString *a1)
{
  if (a1)
  {
    data = (sqlite3_stmt *)a1->data;
    if (data)
    {
      a1 = +[NSString stringWithUTF8String:sqlite3_sql(data)];
    }
    else
    {
      +[NSException raise:NSInternalInconsistencyException format:@"Statement already finalized"];
      a1 = &stru_1001D00C8;
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_10000BC40(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(sqlite3_stmt **)(result + 16);
    if (v1)
    {
      return sqlite3_step(v1);
    }
    else
    {
      +[NSException raise:NSInternalInconsistencyException format:@"Statement already finalized"];
      return 21;
    }
  }
  return result;
}

uint64_t sub_10000C390(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void SQLiteBindFoundationValue(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindArray:v5 atPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindDictionary:v5 atPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindString:v5 atPosition:a2];
    goto LABEL_10;
  }
  if (!v5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    [v9 bindNullAtPosition:a2];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v5 timeIntervalSinceReferenceDate];
LABEL_15:
    objc_msgSend(v9, "bindDouble:atPosition:", a2);
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v9 bindData:v5 atPosition:a2];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v9 bindUUID:v5 atPosition:a2];
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v6 = [v5 absoluteString];
        [v9 bindString:v6 atPosition:a2];
      }
      else
      {
        id v7 = v5;
        id v8 = (const char *)[v7 objCType];
        if (!strcmp(v8, "d") || !strcmp(v8, "f"))
        {
          [v7 doubleValue];
          goto LABEL_15;
        }
        objc_msgSend(v9, "bindInt64:atPosition:", objc_msgSend(v7, "longLongValue"), a2);
      }
    }
  }
LABEL_10:
}

__CFString *SQLitePlaceholderGenerator(uint64_t a1)
{
  if (a1)
  {
    id v2 = [objc_alloc((Class)NSMutableString) initWithCapacity:3 * a1 + 1];
    [v2 appendString:@"?"];
    uint64_t v3 = a1 - 1;
    if (a1 != 1)
    {
      do
      {
        [v2 appendString:@", ?"];
        --v3;
      }
      while (v3);
    }
    id v4 = (__CFString *)[v2 copy];
  }
  else
  {
    id v4 = &stru_1001D00C8;
  }

  return v4;
}

uint64_t sub_10000C824(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t sub_10000C830(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

void sub_10000C8E0(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void sub_10000CB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000CB60(uint64_t result)
{
  return result;
}

void sub_10000CDF4(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 48);
  }
}

void sub_10000CE08(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 56);
  }
}

id sub_10000CE1C(uint64_t a1, uint64_t a2)
{
  int v5 = 1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 64);
  }
  else {
    id v3 = 0;
  }
  return [v3 applyBinding:a2 atIndex:&v5];
}

void sub_10000CF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000CF28(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[2];
  if (v3) {
    uint64_t v3 = *(void *)(v3 + 8);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000CFC4;
  v6[3] = &unk_1001BF420;
  v6[6] = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  void v6[4] = v2;
  v6[5] = v4;
  [v2 enumeratePersistentIDsUsingBlock:v6];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_10000CFC4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(*(void *)(a1 + 32) + 8)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v6 deleteFromDatabase];
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) ^ 1;
}

void sub_10000D218(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(*(Class *)(a1 + 40));
  [v4 setDatabaseID:a2];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000D298(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *(objc_class **)(a1 + 40);
  id v6 = a3;
  id v7 = objc_alloc_init(v5);
  [v7 setDatabaseID:a2];
  [v7 setValuesWithDictionary:v6];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10000D3D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000D4D4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v14 = 1;
  [a1[4] applyBinding:v5 atIndex:&v14];
  id v7 = [a1[5] count];
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2020000000;
  v13[3] = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10000D5F8;
  v8[3] = &unk_1001BF4E8;
  id v12 = v7;
  id v9 = a1[5];
  id v10 = a1[6];
  id v11 = v13;
  sub_100005FCC((uint64_t)v5, v8);

  _Block_object_dispose(v13, 8);
}

void sub_10000D5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000D5F8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = +[NSMutableDictionary dictionaryWithCapacity:a1[7]];
  id v9 = v8;
  if (v5)
  {
    id v10 = (void *)a1[4];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10000D74C;
    v15[3] = &unk_1001BF038;
    id v11 = v8;
    id v16 = v11;
    id v12 = v5;
    id v17 = v12;
    [v10 enumerateObjectsUsingBlock:v15];
    uint64_t v13 = a1[5];
    sqlite3_int64 v14 = sub_10000FA54((sqlite3_int64)v12, 0);
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
    (*(void (**)(uint64_t, sqlite3_int64, id))(v13 + 16))(v13, v14, v11);
  }
}

void sub_10000D74C(uint64_t a1, void *a2, int a3)
{
  id v4 = *(void **)(a1 + 40);
  int v5 = a3 + 1;
  id v6 = a2;
  SQLiteCopyFoundationValue(v4, v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

void *sub_10000DA20(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    v5.receiver = result;
    v5.super_class = (Class)SQLiteQueryDescriptor;
    uint64_t result = objc_msgSendSuper2(&v5, "init");
    if (result)
    {
      result[1] = a2;
      result[4] = a3;
    }
  }
  return result;
}

uint64_t sub_10000DF98(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_10000DFA4(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_10000DFB0(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  }
  return result;
}

uint64_t sub_10000DFBC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

BOOL sub_10000DFC8(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 72) != 0;
  }
  return result;
}

uint64_t sub_10000DFDC(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 72) = a2;
  }
  return result;
}

void sub_10000DFE8(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 64);
  }
}

id sub_10000E058(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x3032000000;
  uint64_t v18 = sub_10000E1C4;
  id v19 = sub_10000E1D4;
  id v20 = 0;
  id v7 = sub_10000E1DC(v6, v4, v5);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10000E260;
  v11[3] = &unk_1001BF538;
  uint64_t v13 = &v15;
  uint64_t v14 = v6;
  id v8 = v4;
  id v12 = v8;
  [v7 enumeratePersistentIDsUsingBlock:v11];
  id v9 = (id)v16[5];

  _Block_object_dispose(&v15, 8);

  return v9;
}

void sub_10000E1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E1C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000E1D4(uint64_t a1)
{
}

id sub_10000E1DC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  id v7 = sub_10000E99C(v6, v5, v4, 0, 0, 0, 0);

  return v7;
}

void sub_10000E260(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

id sub_10000E2C0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x3032000000;
  uint64_t v18 = sub_10000E1C4;
  id v19 = sub_10000E1D4;
  id v20 = (id)objc_opt_new();
  uint64_t v7 = sub_10000E1DC(v6, v4, v5);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10000E440;
  v11[3] = &unk_1001BF560;
  uint64_t v14 = v6;
  id v8 = v4;
  id v12 = v8;
  uint64_t v13 = &v15;
  [v7 enumeratePersistentIDsUsingBlock:v11];
  id v9 = (id)v16[5];

  _Block_object_dispose(&v15, 8);

  return v9;
}

void sub_10000E428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000E440(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v3];
}

id sub_10000E4AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  id v10 = sub_10000E53C(v9, v8, @"COUNT", v7, v6);

  return v10;
}

id sub_10000E53C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = self;
  uint64_t v28 = 0;
  char v29 = &v28;
  uint64_t v30 = 0x3032000000;
  uint64_t v31 = sub_10000E1C4;
  v32 = sub_10000E1D4;
  id v33 = 0;
  uint64_t v13 = [[SQLiteQueryDescriptor alloc] initWithEntityClass:v12];
  uint64_t v15 = v13;
  if (v13) {
    objc_setProperty_nonatomic_copy(v13, v14, v10, 64);
  }
  id v16 = objc_alloc((Class)NSString);
  uint64_t v17 = [v12 disambiguatedSQLForProperty:v8];
  id v18 = [v16 initWithFormat:@"%@(%@)", v9, v17];

  id v34 = v8;
  id v19 = +[NSArray arrayWithObjects:&v34 count:1];
  id v20 = +[NSArray arrayWithObject:v18];
  id v21 = [(SQLiteQueryDescriptor *)v15 _newSelectSQLWithProperties:v19 columns:v20];

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10000F028;
  v25[3] = &unk_1001BEFE8;
  id v22 = v15;
  id v26 = v22;
  id v27 = &v28;
  sub_1000091D4((uint64_t)v11, v21, v25);
  id v23 = (id)v29[5];

  _Block_object_dispose(&v28, 8);

  return v23;
}

void sub_10000E7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000E7C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  id v10 = sub_10000E53C(v9, v8, @"MAX", v7, v6);

  return v10;
}

id sub_10000E858(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  id v10 = sub_10000E53C(v9, v8, @"MIN", v7, v6);

  return v10;
}

_UNKNOWN **sub_10000E8E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  sub_10000E53C(v9, v8, @"SUM", v7, v6);
  id v10 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v11 = v10;
  }
  else {
    id v11 = &off_1001D0928;
  }
  id v12 = v11;

  return v12;
}

id sub_10000E99C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v12 = a5;
  id v13 = a4;
  id v14 = a3;
  id v15 = a2;
  id v16 = self;
  uint64_t v17 = sub_10000EC4C((uint64_t)v16, v15, v14, v13, v12, a6, a7, v16);

  return v17;
}

id sub_10000EA5C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = self;
  id v10 = sub_10000E99C(v9, v8, v7, v6, 0, 0, 0);

  return v10;
}

id sub_10000EAF0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  id v11 = a2;
  uint64_t v12 = self;
  id v13 = sub_10000E99C(v12, v11, v10, v9, v8, 0, 0);

  return v13;
}

id sub_10000EB9C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  uint64_t v14 = self;
  id v15 = sub_10000E99C(v14, v13, v12, v11, v10, a6, 0);

  return v15;
}

id sub_10000EC4C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a2;
  self;
  id v18 = [SQLiteQueryDescriptor alloc];
  id v19 = [a8 memoryEntityClass];
  if (v18
    && (id v20 = v19,
        v28.receiver = v18,
        v28.super_class = (Class)SQLiteQueryDescriptor,
        (id v21 = objc_msgSendSuper2(&v28, "init")) != 0))
  {
    id v23 = v21;
    v21[1] = a8;
    void v21[4] = v20;
    objc_setProperty_nonatomic_copy(v21, v22, v15, 56);
    objc_setProperty_nonatomic_copy(v23, v24, v16, 48);
    objc_setProperty_nonatomic_copy(v23, v25, v14, 64);
    v23[2] = a6;
    v23[3] = a7;
  }
  else
  {
    id v23 = 0;
  }
  id v26 = [[SQLiteQuery alloc] initOnConnection:v17 descriptor:v23];

  return v26;
}

id sub_10000ED9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = self;
  id v9 = sub_10000EC4C(v8, v7, v6, 0, 0, 0, 0, a4);

  return v9;
}

id sub_10000EE28(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  uint64_t v11 = self;
  id v12 = sub_10000EC4C(v11, v10, v9, v8, 0, 0, 0, a5);

  return v12;
}

id sub_10000EECC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  uint64_t v14 = self;
  id v15 = sub_10000EC4C(v14, v13, v12, v11, v10, 0, 0, a6);

  return v15;
}

id sub_10000EF80(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  id v11 = a5;
  id v12 = a3;
  id v13 = a2;
  uint64_t v14 = self;
  id v15 = sub_10000EC4C(v14, v13, v12, v11, v11, a6, 0, a7);

  return v15;
}

void sub_10000F028(uint64_t a1, void *a2)
{
  int v7 = 1;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    id v4 = *(void **)(v3 + 64);
  }
  else {
    id v4 = 0;
  }
  id v5 = a2;
  [v4 applyBinding:v5 atIndex:&v7];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000F0E8;
  v6[3] = &unk_1001BF1F0;
  void v6[4] = *(void *)(a1 + 40);
  sub_100005FCC((uint64_t)v5, v6);
}

void sub_10000F0E8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = SQLiteCopyFoundationValue(a2, 0);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

id sub_10000F138(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = sub_10000E1C4;
  id v15 = sub_10000E1D4;
  id v16 = 0;
  uint64_t v7 = sub_10000F280(v6, v4, v5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10000F2F8;
  v10[3] = &unk_1001BF588;
  void v10[4] = &v11;
  [v7 enumerateMemoryEntitiesUsingBlock:v10];
  id v8 = (id)v12[5];

  _Block_object_dispose(&v11, 8);

  return v8;
}

void sub_10000F268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000F280(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  uint64_t v7 = sub_10000F330(v6, v5, v4, 0);

  return v7;
}

void sub_10000F2F8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

id sub_10000F330(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a2;
  id v9 = self;
  id v10 = [SQLiteQueryDescriptor alloc];
  id v11 = [v9 databaseEntityClass];
  if (v10
    && (id v12 = v11,
        v19.receiver = v10,
        v19.super_class = (Class)SQLiteQueryDescriptor,
        (uint64_t v13 = objc_msgSendSuper2(&v19, "init")) != 0))
  {
    id v15 = v13;
    v13[1] = v12;
    void v13[4] = v9;
    objc_setProperty_nonatomic_copy(v13, v14, v7, 56);
    objc_setProperty_nonatomic_copy(v15, v16, v6, 64);
  }
  else
  {
    id v15 = 0;
  }
  id v17 = [[SQLiteQuery alloc] initOnConnection:v8 descriptor:v15];

  return v17;
}

int *sub_10000F444(int *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)SQLiteCursor;
    a1 = (int *)objc_msgSendSuper2(&v17, "init");
    if (a1)
    {
      *((void *)a1 + 6) = sub_100006FA0((uint64_t)v4);
      objc_storeStrong((id *)a1 + 7, a2);
      int v5 = sqlite3_column_count(*((sqlite3_stmt **)a1 + 6));
      a1[2] = v5;
      uint64_t v6 = +[NSMutableArray arrayWithCapacity:v5];
      id v7 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v6;

      *((void *)a1 + 2) = malloc_type_calloc(a1[2], 1uLL, 0x100004077774924uLL);
      if (a1[2] >= 1)
      {
        for (uint64_t i = 0; i < a1[2]; ++i)
        {
          id v9 = (void *)*((void *)a1 + 5);
          id v10 = +[NSString stringWithUTF8String:sqlite3_column_name(*((sqlite3_stmt **)a1 + 6), i)];
          [v9 addObject:v10];

          id v11 = sqlite3_column_decltype(*((sqlite3_stmt **)a1 + 6), i);
          if (v11)
          {
            id v12 = v11;
            if (!strcmp(v11, "DATETIME"))
            {
              *(unsigned char *)(*((void *)a1 + 2) + i) = 1;
              continue;
            }
            if (!strcmp(v12, "JSON"))
            {
              uint64_t v14 = *((void *)a1 + 2);
              char v15 = 2;
              goto LABEL_20;
            }
            if (!strcmp(v12, "UUID"))
            {
              uint64_t v14 = *((void *)a1 + 2);
              char v15 = 3;
              goto LABEL_20;
            }
            if (!strcmp(v12, "URL"))
            {
              uint64_t v14 = *((void *)a1 + 2);
              char v15 = 4;
              goto LABEL_20;
            }
            if (!strcmp(v12, "STRING"))
            {
              uint64_t v14 = *((void *)a1 + 2);
              char v15 = 5;
              goto LABEL_20;
            }
            int v13 = strcmp(v12, "BOOLEAN");
            uint64_t v14 = *((void *)a1 + 2);
            if (!v13)
            {
              char v15 = 6;
LABEL_20:
              *(unsigned char *)(v14 + i) = v15;
              continue;
            }
          }
          else
          {
            uint64_t v14 = *((void *)a1 + 2);
          }
          *(unsigned char *)(v14 + i) = 0;
        }
      }
    }
  }

  return a1;
}

sqlite3_stmt **sub_10000F6C0(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    id v4 = a1;
    if (sqlite3_column_type(a1[6], a2) == 1)
    {
      +[NSNumber numberWithBool:sqlite3_column_int64(v4[6], a2) != 0];
      a1 = (sqlite3_stmt **)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      a1 = 0;
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

sqlite3_stmt **sub_10000F740(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    id v4 = a1;
    if (sqlite3_column_type(a1[6], a2) == 5)
    {
      a1 = 0;
    }
    else
    {
      int v5 = sqlite3_column_blob(v4[6], a2);
      a1 = +[NSData dataWithBytes:v5 length:sqlite3_column_bytes(v4[6], a2)];
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_10000F7D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_10000F740((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

id *sub_10000F840(id *result, uint64_t a2)
{
  if (result) {
    return (id *)[result[5] indexOfObject:a2];
  }
  return result;
}

sqlite3_stmt **sub_10000F868(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    int v4 = a1;
    int v5 = sqlite3_column_type(a1[6], a2);
    if (v5 == 1)
    {
      double v6 = (double)sqlite3_column_int64(v4[6], a2);
    }
    else
    {
      if (v5 != 2)
      {
        a1 = 0;
        goto LABEL_8;
      }
      double v6 = sqlite3_column_double(v4[6], a2);
    }
    a1 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v6];
LABEL_8:
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_10000F904(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_10000F868((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

double sub_10000F974(uint64_t a1, int a2)
{
  if (a1) {
    return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 48), a2);
  }
  else {
    return 0.0;
  }
}

double sub_10000F988(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = 0.0;
  if (a1)
  {
    int v5 = [*(id *)(a1 + 40) indexOfObject:v3];
    if ((v5 & 0x80000000) == 0) {
      double v4 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 48), v5);
    }
  }

  return v4;
}

uint64_t sub_10000F9E8(uint64_t result, int a2)
{
  if (result) {
    return sqlite3_column_int(*(sqlite3_stmt **)(result + 48), a2);
  }
  return result;
}

uint64_t sub_10000F9F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0) {
      a1 = 0;
    }
    else {
      a1 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 48), v4);
    }
  }

  return a1;
}

sqlite3_int64 sub_10000FA54(sqlite3_int64 result, int a2)
{
  if (result) {
    return sqlite3_column_int64(*(sqlite3_stmt **)(result + 48), a2);
  }
  return result;
}

sqlite3_int64 sub_10000FA64(sqlite3_int64 a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0) {
      a1 = 0;
    }
    else {
      a1 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 48), v4);
    }
  }

  return a1;
}

id sub_10000FAC0(uint64_t a1, int a2)
{
  if (a1)
  {
    int v4 = sub_10000F740((sqlite3_stmt **)a1, a2);
    if (v4)
    {
      id v11 = 0;
      int v5 = +[NSJSONSerialization JSONObjectWithData:v4 options:0 error:&v11];
      id v6 = v11;
      if (v5)
      {
LABEL_9:
        id v8 = v5;

        goto LABEL_10;
      }
      id v7 = os_log_create("com.apple.AdAttributionKit", "SQL");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        id v10 = [*(id *)(a1 + 40) objectAtIndexedSubscript:a2];
        *(_DWORD *)buf = 138543618;
        int v13 = v10;
        __int16 v14 = 2114;
        id v15 = v6;
      }
    }
    else
    {
      id v6 = 0;
    }
    int v5 = 0;
    goto LABEL_9;
  }
  id v8 = 0;
LABEL_10:

  return v8;
}

sqlite3_stmt **sub_10000FC30(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    int v4 = a1;
    int v5 = sqlite3_column_type(a1[6], a2);
    if (v5 == 1)
    {
      a1 = +[NSNumber numberWithLongLong:sqlite3_column_int64(v4[6], a2)];
    }
    else if (v5 == 2)
    {
      a1 = +[NSNumber numberWithDouble:sqlite3_column_double(v4[6], a2)];
    }
    else
    {
      a1 = 0;
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_10000FCD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_10000FC30((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

uint64_t sub_10000FD48(uint64_t result)
{
  if (result) {
    return sqlite3_column_count(*(sqlite3_stmt **)(result + 48));
  }
  return result;
}

sqlite3_stmt **sub_10000FD70(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    int v4 = a1;
    if (sqlite3_column_type(a1[6], a2) == 5)
    {
      a1 = 0;
    }
    else
    {
      a1 = (sqlite3_stmt **)sqlite3_column_text(v4[6], a2);
      if (a1)
      {
        a1 = +[NSString stringWithUTF8String:a1];
      }
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_10000FDE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_10000FD70((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

id sub_10000FE54(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = sub_10000FD70(a1, a2);
    if (v2) {
      id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:v2];
    }
    else {
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_10000FEC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_10000FE54((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

id sub_10000FF34(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = sub_10000FD70(a1, a2);
    if (v2)
    {
      id v3 = +[NSURL URLWithString:v2];
    }
    else
    {
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_10000FFA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0;
    }
    else
    {
      a1 = sub_10000FF34((sqlite3_stmt **)a1, v4);
    }
  }

  return (id)a1;
}

void *sub_100010014(void *a1)
{
  if (a1)
  {
    a1 = sub_100010048(a1, 0);
    uint64_t v1 = vars8;
  }
  return a1;
}

void *sub_100010048(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = a1[4];
    if (!v4)
    {
      uint64_t v5 = +[NSDictionary sharedKeySetForKeys:a1[5]];
      id v6 = (void *)a1[4];
      a1[4] = v5;

      uint64_t v4 = a1[4];
    }
    id v7 = +[NSMutableDictionary dictionaryWithSharedKeySet:v4];
    id v8 = (void *)a1[5];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100010164;
    v11[3] = &unk_1001BF5B0;
    id v12 = v3;
    id v13 = v7;
    __int16 v14 = a1;
    id v9 = v7;
    [v8 enumerateObjectsUsingBlock:v11];
    a1 = [v9 copy];
  }

  return a1;
}

void sub_100010164(uint64_t a1, void *a2, int a3)
{
  id v7 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  if (!v5 || [v5 containsObject:v7])
  {
    id v6 = SQLiteCopyFoundationValue(*(void **)(a1 + 48), a3);
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v7];
  }
}

id SQLiteCopyFoundationValue(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3 || a2 < 0)
  {
    if (!v3)
    {
LABEL_11:
      uint64_t v5 = sub_10000F740(v4, a2);
LABEL_12:
      id v6 = (void *)v5;
      goto LABEL_13;
    }
LABEL_7:
    id v6 = 0;
    switch(sqlite3_column_type(v3[6], a2))
    {
      case 1:
        uint64_t v5 = +[NSNumber numberWithLongLong:sqlite3_column_int64(v4[6], a2)];
        goto LABEL_12;
      case 2:
        uint64_t v5 = +[NSNumber numberWithDouble:sqlite3_column_double(v4[6], a2)];
        goto LABEL_12;
      case 3:
        goto LABEL_9;
      case 5:
        goto LABEL_13;
      default:
        goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (*((_DWORD *)v3 + 2) <= a2) {
    goto LABEL_7;
  }
  switch(*((unsigned char *)v3[2] + a2))
  {
    case 0:
      goto LABEL_7;
    case 1:
      uint64_t v5 = sub_10000F868(v3, a2);
      goto LABEL_12;
    case 2:
      uint64_t v5 = sub_10000FAC0((uint64_t)v3, a2);
      goto LABEL_12;
    case 3:
      uint64_t v5 = sub_10000FE54(v3, a2);
      goto LABEL_12;
    case 4:
      uint64_t v5 = sub_10000FF34(v3, a2);
      goto LABEL_12;
    case 5:
LABEL_9:
      uint64_t v5 = sub_10000FD70(v4, a2);
      goto LABEL_12;
    case 6:
      uint64_t v5 = sub_10000F6C0(v3, a2);
      goto LABEL_12;
    default:
      id v6 = 0;
      break;
  }
LABEL_13:

  return v6;
}

uint64_t sub_1000103C4(uint64_t result, int a2)
{
  if (result) {
    return sqlite3_column_type(*(sqlite3_stmt **)(result + 48), a2);
  }
  return result;
}

uint64_t sub_1000103D4(uint64_t a1, unsigned int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) <= (signed int)a2) {
      return 0;
    }
    else {
      return *(unsigned __int8 *)(*(void *)(a1 + 16) + a2);
    }
  }
  return result;
}

uint64_t SQLiteApplyConnectionOptions(sqlite3 *a1, void *a2)
{
  id v3 = a2;
  sqlite3_extended_result_codes(a1, 1);
  uint64_t v4 = sub_100006FC0((uint64_t)v3);

  if (v4)
  {
    sub_100006FC0((uint64_t)v3);
  }
  uint64_t v5 = sqlite3_exec(a1, "PRAGMA journal_mode=WAL", 0, 0, 0);
  if (!v5)
  {
    id v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"PRAGMA cache_size=%ld", sub_100006FA0((uint64_t)v3));
    uint64_t v5 = sqlite3_exec(a1, (const char *)[v6 UTF8String], 0, 0, 0);
  }
  return v5;
}

uint64_t SQLiteEncryptDatabase()
{
  return 0;
}

id SQLiteCreateErrorForResultCode(int a1)
{
  if (a1 - 100 < 2 || a1 == 0)
  {
    id v2 = 0;
  }
  else
  {
    uint64_t v4 = sqlite3_errstr(a1);
    if (v4 && *v4)
    {
      NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
      uint64_t v5 = +[NSString stringWithUTF8String:v4];
      id v9 = v5;
      id v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    }
    else
    {
      id v6 = 0;
    }
    id v2 = [objc_alloc((Class)NSError) initWithDomain:@"SQLiteErrorDomain" code:a1 userInfo:v6];
  }

  return v2;
}

BOOL SQLiteResultIsSuccess(unsigned __int8 a1)
{
  return a1 - 100 < 2 || a1 == 0;
}

void SQLiteTrashDatabaseName(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSUUID UUID];
  uint64_t v5 = [v4 UUIDString];
  id v6 = [v5 substringToIndex:8];

  id v7 = SQLiteGetRelatedFilePath(v3, 0);
  NSErrorUserInfoKey v8 = SQLiteGetRelatedFilePath(v3, 1);
  id v9 = +[NSFileManager defaultManager];
  id v10 = [v7 stringByAppendingString:v6];
  id v20 = 0;
  [v9 moveItemAtPath:v7 toPath:v10 error:&v20];
  id v11 = v20;

  id v12 = +[NSFileManager defaultManager];
  id v13 = [v8 stringByAppendingString:v6];
  id v19 = v11;
  [v12 moveItemAtPath:v8 toPath:v13 error:&v19];
  id v14 = v19;

  id v15 = +[NSFileManager defaultManager];
  SEL v16 = [v3 stringByAppendingString:v6];
  id v18 = v14;
  [v15 moveItemAtPath:v3 toPath:v16 error:&v18];

  id v17 = v18;
  if (v17) {
    *a2 = v17;
  }
}

id SQLiteGetRelatedFilePath(void *a1, uint64_t a2)
{
  id v4 = a1;
  uint64_t v5 = v4;
  if (a2)
  {
    if (a2 != 1) {
      goto LABEL_6;
    }
    CFStringRef v6 = @"-wal";
  }
  else
  {
    CFStringRef v6 = @"-shm";
  }
  id v2 = [v4 stringByAppendingString:v6];
LABEL_6:

  return v2;
}

id SQLiteDeleteDatabase(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = objc_alloc_init((Class)NSFileManager);
  uint64_t v5 = SQLiteGetRelatedFilePath(v3, 0);
  id v14 = 0;
  [v4 removeItemAtPath:v5 error:&v14];
  id v6 = v14;

  id v7 = SQLiteGetRelatedFilePath(v3, 1);
  id v13 = v6;
  [v4 removeItemAtPath:v7 error:&v13];
  id v8 = v13;

  id v12 = v8;
  id v9 = [v4 removeItemAtPath:v3 error:&v12];

  id v10 = v12;
  if (a2 && v10) {
    *a2 = v10;
  }

  return v9;
}

uint64_t SQLiteOpenDatabaseAndApplyOptions(sqlite3 **a1, void *a2)
{
  id v3 = a2;
  ppDb = 0;
  uint64_t v5 = sub_100006FAC(v3, v4);
  if (sub_100007000((BOOL)v3))
  {
    int v6 = 2;
  }
  else
  {
    id v7 = objc_alloc_init((Class)NSFileManager);
    id v8 = [v5 stringByDeletingLastPathComponent];
    [v7 createDirectoryAtPath:v8 withIntermediateDirectories:1 attributes:0 error:0];

    int v6 = 6;
  }
  id v9 = sub_100006FE0((uint64_t)v3);
  id v10 = v9;
  if (v9) {
    v6 |= SQLiteOpenFlagForProtectionType(v9);
  }
  id v11 = v5;
  uint64_t v12 = sqlite3_open_v2((const char *)[v11 fileSystemRepresentation], &ppDb, v6, 0);
  if (v12 || (uint64_t v12 = SQLiteApplyConnectionOptions(ppDb, v3), v12))
  {
    if (ppDb) {
      sqlite3_close(ppDb);
    }
  }
  else
  {
    *a1 = ppDb;
  }

  return v12;
}

uint64_t SQLiteOpenFlagForProtectionType(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:NSFileProtectionNone])
    {
      uint64_t v3 = 0x400000;
    }
    else if ([v2 isEqualToString:NSFileProtectionComplete])
    {
      uint64_t v3 = 0x100000;
    }
    else if ([v2 isEqualToString:NSFileProtectionCompleteUnlessOpen])
    {
      uint64_t v3 = 0x200000;
    }
    else if ([v2 isEqualToString:NSFileProtectionCompleteUntilFirstUserAuthentication])
    {
      uint64_t v3 = 3145728;
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void *sub_100010BD8(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)SQLitePreparedStatement;
    int v6 = objc_msgSendSuper2(&v10, "init");
    a1 = v6;
    if (v6)
    {
      v6[1] = a2;
      id v7 = [v5 copy];
      id v8 = (void *)a1[2];
      a1[2] = v7;
    }
  }

  return a1;
}

id AKErrorWithDescription(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  id v8 = v7;
  if (v6) {
    [v7 setObject:v6 forKeyedSubscript:NSDebugDescriptionErrorKey];
  }
  id v9 = +[NSError errorWithDomain:v5 code:a2 userInfo:v8];

  return v9;
}

uint64_t sub_100010D10()
{
  type metadata accessor for TaskGreyhound();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100010D50();
  qword_1001E5F50 = v0;
  return result;
}

uint64_t sub_100010D50()
{
  uint64_t v0 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v0 - 8);
  id v33 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100012960(&qword_1001E0AF0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100012960(&qword_1001E0AF8);
  uint64_t v7 = v6 - 8;
  uint64_t v8 = __chkstk_darwin(v6);
  objc_super v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  swift_defaultActor_initialize();
  uint64_t v31 = &v12[*(int *)(v7 + 56)];
  id v13 = v12;
  sub_100012960(&qword_1001E09D0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v2);
  id v34 = v12;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_super v28 = &v10[*(int *)(v7 + 56)];
  id v14 = v28;
  uint64_t v15 = sub_100012960(&qword_1001E0B00);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v30(v10, v13, v15);
  uint64_t v17 = sub_100012960(&qword_1001E0B08);
  uint64_t v18 = *(void *)(v17 - 8);
  char v29 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  id v19 = v14;
  id v20 = v31;
  v29(v19, v31, v17);
  uint64_t v21 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v32 + OBJC_IVAR____TtC20AttributionKitDaemon13TaskGreyhound_taskStream, v10, v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v28, v17);
  id v22 = &v10[*(int *)(v7 + 56)];
  v30(v10, v34, v15);
  v29(v22, v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v21 + OBJC_IVAR____TtC20AttributionKitDaemon13TaskGreyhound_taskScheduler, v22, v17);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v15);
  uint64_t v23 = type metadata accessor for TaskPriority();
  uint64_t v24 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v33, 1, 1, v23);
  SEL v25 = (void *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  void v25[4] = v21;
  swift_retain();
  sub_100017E98(v24, (uint64_t)&unk_1001E0B18, (uint64_t)v25);
  swift_release();
  sub_100012BAC((uint64_t)v34);
  return v21;
}

uint64_t sub_100011180()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100013480;
  return sub_100011210();
}

uint64_t sub_100011210()
{
  v1[21] = v0;
  uint64_t v2 = sub_100012960(&qword_1001E0B20);
  v1[22] = v2;
  v1[23] = *(void *)(v2 - 8);
  v1[24] = swift_task_alloc();
  return _swift_task_switch(sub_1000112D4, v0, 0);
}

uint64_t sub_1000112D4()
{
  sub_100012960(&qword_1001E0B00);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = sub_100012FBC(&qword_1001E0B28, (void (*)(uint64_t))type metadata accessor for TaskGreyhound);
  v0[25] = v1;
  uint64_t v2 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[26] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000113F0;
  uint64_t v4 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v2, v1, v4);
}

uint64_t sub_1000113F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  return _swift_task_switch(sub_100011500, v1, 0);
}

uint64_t sub_100011500()
{
  if (*(void *)(v0 + 40))
  {
    sub_100012D60((long long *)(v0 + 16), v0 + 56);
    type metadata accessor for Transaction();
    *(void *)(v0 + 216) = swift_initStackObject();
    *(void *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_1001469B4(0xD000000000000013, 0x8000000100185460);
    uint64_t v1 = *(void *)(v0 + 80);
    uint64_t v2 = *(void *)(v0 + 88);
    sub_100012D78((void *)(v0 + 56), v1);
    uint64_t v3 = *(int **)(v2 + 16);
    *(void *)(v0 + 160) = swift_getAssociatedTypeWitness();
    uint64_t v4 = sub_100012DBC((uint64_t *)(v0 + 136));
    uint64_t v8 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))((char *)v3 + *v3);
    id v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v5;
    void *v5 = v0;
    v5[1] = sub_100011700;
    return v8(v4, v1, v2);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100011700()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v4 = sub_100011A60;
  }
  else {
    uint64_t v4 = sub_10001182C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10001182C()
{
  uint64_t v15 = v0;
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 17));
  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E5FC8);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[28];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v7 = *(void *)(v5 + 24);
    unint64_t v8 = *(void *)(v5 + 32);
    swift_bridgeObjectRetain();
    *(void *)(v6 + 4) = sub_100147668(v7, v8, &v14);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Transaction %s out of scope", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {
    swift_release_n();
  }
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 7));
  uint64_t v9 = v0[25];
  uint64_t v10 = v0[21];
  uint64_t v11 = (void *)swift_task_alloc();
  v0[26] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000113F0;
  uint64_t v12 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v10, v9, v12);
}

uint64_t sub_100011A60()
{
  swift_release();
  sub_100012E20((uint64_t)(v0 + 17));
  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E5FC8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v4 + 4) = v6;
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Task failed with error: %@", (uint8_t *)v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 7));
  uint64_t v7 = v0[25];
  uint64_t v8 = v0[21];
  uint64_t v9 = (void *)swift_task_alloc();
  v0[26] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000113F0;
  uint64_t v10 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v8, v7, v10);
}

uint64_t sub_100011CA4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20AttributionKitDaemon13TaskGreyhound_taskStream;
  uint64_t v2 = sub_100012960(&qword_1001E0B00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC20AttributionKitDaemon13TaskGreyhound_taskScheduler;
  uint64_t v4 = sub_100012960(&qword_1001E0B08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100011D6C()
{
  return type metadata accessor for TaskGreyhound();
}

uint64_t type metadata accessor for TaskGreyhound()
{
  uint64_t result = qword_1001E09B0;
  if (!qword_1001E09B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100011DC0()
{
  sub_100011F14(319, &qword_1001E09C8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_100011F14(319, (unint64_t *)&unk_1001E09D8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_100011ECC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void sub_100011F14(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_100011ECC(&qword_1001E09D0);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

__n128 initializeWithTake for UserDefaultsKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100011F88(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100011FA8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

uint64_t sub_100011FE4()
{
  return v0;
}

uint64_t sub_100011FF0(uint64_t a1, uint64_t a2)
{
  return sub_1000120E8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100012008()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001205C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000120D0(uint64_t a1, uint64_t a2)
{
  return sub_1000120E8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000120E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10001212C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000121A4(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100012224@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_100012268(void *a1@<X8>)
{
  *a1 = 0;
}

id sub_100012270()
{
  return *v0;
}

uint64_t sub_100012278@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100012280(uint64_t a1)
{
  uint64_t v2 = sub_100012FBC(&qword_1001E0BA0, type metadata accessor for AKSQLError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000122EC(uint64_t a1)
{
  uint64_t v2 = sub_100012FBC(&qword_1001E0BA0, type metadata accessor for AKSQLError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001235C(uint64_t a1)
{
  uint64_t v2 = sub_100012FBC((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000123C8()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100012414()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10001246C()
{
  return Hasher._finalize()();
}

void *sub_1000124D4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000124E8(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100012518(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10001252C(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_100012540()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void *sub_1000125CC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000125D8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000125E8(uint64_t a1)
{
  uint64_t v2 = sub_100012FBC((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100012654(uint64_t a1)
{
  uint64_t v2 = sub_100012FBC((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000126C0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100012FBC((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100012750()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100012788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012FBC((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100012804()
{
  return Hasher._finalize()();
}

void *sub_100012864@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100012874(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100012880(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000128EC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100012934@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100012960(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000129A4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000129E4()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *id v1 = v0;
  v1[1] = sub_100012AB8;
  NSString v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *NSString v2 = v1;
  v2[1] = sub_100013480;
  return sub_100011210();
}

uint64_t sub_100012AB8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100012BAC(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E0AF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100012C0C(uint64_t a1)
{
  uint64_t v2 = sub_100012FBC((unint64_t *)&qword_1001E0BE0, type metadata accessor for _ASCLockupKey);
  uint64_t v3 = sub_100012FBC(&qword_1001E0BE8, type metadata accessor for _ASCLockupKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100012CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100012FBC((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100012D4C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100012D60(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *sub_100012D78(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t *sub_100012DBC(uint64_t *a1)
{
  id v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100012E20(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100012E74(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void type metadata accessor for AuthChallengeDisposition(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for BKSHIDEventAuthenticationStatus(uint64_t a1)
{
}

void type metadata accessor for _ASCLockupKey(uint64_t a1)
{
}

void type metadata accessor for AKSQLError(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_100012F74()
{
  return sub_100012FBC(&qword_1001E0B68, type metadata accessor for AKSQLError);
}

uint64_t sub_100012FBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100013004()
{
  return sub_100012FBC(&qword_1001E0B70, type metadata accessor for AKSQLError);
}

uint64_t sub_10001304C()
{
  return sub_100012FBC(&qword_1001E0B78, type metadata accessor for _ASCLockupKey);
}

uint64_t sub_100013094()
{
  return sub_100012FBC((unint64_t *)&unk_1001E0B80, type metadata accessor for _ASCLockupKey);
}

uint64_t sub_1000130DC()
{
  return sub_100012FBC(&qword_1001E26B0, type metadata accessor for CFString);
}

uint64_t sub_100013124()
{
  return sub_100012FBC(&qword_1001E0B90, type metadata accessor for CFString);
}

uint64_t sub_10001316C()
{
  return sub_100012FBC(&qword_1001E0B98, type metadata accessor for _ASCLockupKey);
}

uint64_t sub_1000131B4()
{
  return sub_100012FBC(&qword_1001E0BA0, type metadata accessor for AKSQLError);
}

uint64_t sub_1000131FC()
{
  return sub_100012FBC(&qword_1001E0BA8, type metadata accessor for AKSQLError);
}

uint64_t sub_100013244()
{
  return sub_100012FBC(&qword_1001E0BB0, type metadata accessor for AKSQLError);
}

uint64_t sub_10001328C()
{
  return sub_100012FBC(&qword_1001E0BB8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_1000132E8()
{
  return sub_100012FBC(&qword_1001E0BC0, type metadata accessor for Code);
}

unint64_t sub_100013334()
{
  unint64_t result = qword_1001E0BC8;
  if (!qword_1001E0BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0BC8);
  }
  return result;
}

uint64_t sub_100013388()
{
  return sub_100012FBC((unint64_t *)&unk_1001E0BD0, type metadata accessor for Code);
}

uint64_t sub_1000133D0()
{
  return sub_100012FBC((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
}

void type metadata accessor for BGSystemTaskPriority(uint64_t a1)
{
}

void sub_10001342C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void *sub_100013484(uint64_t a1, uint64_t a2)
{
  uint64_t v103 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  v102 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    unint64_t result = &_swiftEmptyDictionarySingleton;
    uint64_t v34 = *(void *)(a2 + 16);
    if (!v34) {
      return result;
    }
LABEL_17:
    v106 = result;
    swift_bridgeObjectRetain();
    long long v35 = *(_OWORD *)(a2 + 208);
    long long v122 = *(_OWORD *)(a2 + 192);
    long long v123 = v35;
    v124[0] = *(_OWORD *)(a2 + 224);
    *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)(a2 + 233);
    long long v36 = *(_OWORD *)(a2 + 144);
    long long v118 = *(_OWORD *)(a2 + 128);
    long long v119 = v36;
    long long v37 = *(_OWORD *)(a2 + 176);
    long long v120 = *(_OWORD *)(a2 + 160);
    long long v121 = v37;
    long long v38 = *(_OWORD *)(a2 + 80);
    long long v114 = *(_OWORD *)(a2 + 64);
    long long v115 = v38;
    long long v39 = *(_OWORD *)(a2 + 112);
    long long v116 = *(_OWORD *)(a2 + 96);
    long long v117 = v39;
    long long v40 = *(_OWORD *)(a2 + 32);
    long long v41 = *(_OWORD *)(a2 + 48);
    v107 = (void (**)(char *, uint64_t))(v4 + 8);
    v108 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v42 = v34 - 1;
    long long v112 = v40;
    long long v113 = v41;
    uint64_t v43 = 256;
    uint64_t v44 = *(void *)&v124[0];
    v45 = &_swiftEmptyDictionarySingleton;
    if ((BYTE8(v124[0]) & 1) == 0) {
      goto LABEL_22;
    }
LABEL_18:
    uint64_t v46 = Logger.impression.unsafeMutableAddressor();
    (*v108)(v102, v46, v103);
    v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Missing ordering index for skan impression", v49, 2u);
      swift_slowDealloc();
    }

    (*v107)(v102, v103);
    if (!v42)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      return v106;
    }
    while (1)
    {
      long long v93 = *(_OWORD *)(a2 + v43 + 176);
      long long v122 = *(_OWORD *)(a2 + v43 + 160);
      long long v123 = v93;
      v124[0] = *(_OWORD *)(a2 + v43 + 192);
      *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)(a2 + v43 + 201);
      long long v94 = *(_OWORD *)(a2 + v43 + 112);
      long long v118 = *(_OWORD *)(a2 + v43 + 96);
      long long v119 = v94;
      long long v95 = *(_OWORD *)(a2 + v43 + 144);
      long long v120 = *(_OWORD *)(a2 + v43 + 128);
      long long v121 = v95;
      long long v96 = *(_OWORD *)(a2 + v43 + 48);
      long long v114 = *(_OWORD *)(a2 + v43 + 32);
      long long v115 = v96;
      long long v97 = *(_OWORD *)(a2 + v43 + 80);
      long long v116 = *(_OWORD *)(a2 + v43 + 64);
      long long v117 = v97;
      long long v98 = *(_OWORD *)(a2 + v43 + 16);
      long long v112 = *(_OWORD *)(a2 + v43);
      long long v113 = v98;
      v43 += 224;
      --v42;
      uint64_t v44 = *(void *)&v124[0];
      if (BYTE8(v124[0])) {
        goto LABEL_18;
      }
LABEL_22:
      sub_100013AE8((uint64_t)&v112);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v111 = v45;
      unint64_t v52 = sub_1000AF084(v44);
      uint64_t v53 = v45[2];
      BOOL v54 = (v51 & 1) == 0;
      uint64_t v55 = v53 + v54;
      if (__OFADD__(v53, v54)) {
        goto LABEL_41;
      }
      char v56 = v51;
      if (v45[3] >= v55)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v51 & 1) == 0) {
            goto LABEL_31;
          }
        }
        else
        {
          sub_1000B0794();
          if ((v56 & 1) == 0) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        sub_1000AF308(v55, isUniquelyReferenced_nonNull_native);
        unint64_t v57 = sub_1000AF084(v44);
        if ((v56 & 1) != (v58 & 1)) {
          goto LABEL_43;
        }
        unint64_t v52 = v57;
        if ((v56 & 1) == 0)
        {
LABEL_31:
          v45 = v111;
          v111[(v52 >> 6) + 8] |= 1 << v52;
          *(void *)(v45[6] + 8 * v52) = v44;
          v80 = (_OWORD *)(v45[7] + 224 * v52);
          long long v81 = v113;
          _OWORD *v80 = v112;
          v80[1] = v81;
          long long v82 = v117;
          long long v84 = v114;
          long long v83 = v115;
          v80[4] = v116;
          v80[5] = v82;
          v80[2] = v84;
          v80[3] = v83;
          long long v85 = v121;
          long long v87 = v118;
          long long v86 = v119;
          v80[8] = v120;
          v80[9] = v85;
          v80[6] = v87;
          v80[7] = v86;
          long long v88 = v122;
          long long v89 = v123;
          long long v90 = v124[0];
          *(_OWORD *)((char *)v80 + 201) = *(_OWORD *)((char *)v124 + 9);
          v80[11] = v89;
          v80[12] = v90;
          v80[10] = v88;
          uint64_t v91 = v45[2];
          BOOL v31 = __OFADD__(v91, 1);
          uint64_t v92 = v91 + 1;
          if (v31) {
            goto LABEL_42;
          }
          v45[2] = v92;
          goto LABEL_33;
        }
      }
      v45 = v111;
      v59 = (_OWORD *)(v111[7] + 224 * v52);
      long long v60 = v59[1];
      v109[0] = *v59;
      v109[1] = v60;
      long long v61 = v59[5];
      long long v63 = v59[2];
      long long v62 = v59[3];
      v109[4] = v59[4];
      v109[5] = v61;
      v109[2] = v63;
      v109[3] = v62;
      long long v64 = v59[9];
      long long v66 = v59[6];
      long long v65 = v59[7];
      v109[8] = v59[8];
      v109[9] = v64;
      v109[6] = v66;
      v109[7] = v65;
      long long v68 = v59[11];
      long long v67 = v59[12];
      long long v69 = v59[10];
      *(_OWORD *)((char *)v110 + 9) = *(_OWORD *)((char *)v59 + 201);
      v109[11] = v68;
      v110[0] = v67;
      v109[10] = v69;
      sub_100013B74((uint64_t)v109);
      long long v70 = v113;
      _OWORD *v59 = v112;
      v59[1] = v70;
      long long v71 = v117;
      long long v73 = v114;
      long long v72 = v115;
      v59[4] = v116;
      v59[5] = v71;
      v59[2] = v73;
      v59[3] = v72;
      long long v74 = v121;
      long long v76 = v118;
      long long v75 = v119;
      v59[8] = v120;
      v59[9] = v74;
      v59[6] = v76;
      v59[7] = v75;
      long long v78 = v123;
      long long v77 = v124[0];
      long long v79 = v122;
      *(_OWORD *)((char *)v59 + 201) = *(_OWORD *)((char *)v124 + 9);
      v59[11] = v78;
      v59[12] = v77;
      v59[10] = v79;
LABEL_33:
      swift_bridgeObjectRelease();
      if (!v42) {
        goto LABEL_36;
      }
    }
  }
  uint64_t v99 = v4;
  uint64_t v100 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  uint64_t v8 = &_swiftEmptyDictionarySingleton;
  uint64_t v101 = a1;
  do
  {
    uint64_t v12 = *(void *)(a1 + v7 + 40);
    uint64_t v104 = *(void *)(a1 + v7 + 32);
    int v105 = *(unsigned __int8 *)(a1 + v7 + 48);
    uint64_t v13 = *(void *)(a1 + v7 + 56);
    uint64_t v15 = *(void *)(a1 + v7 + 72);
    uint64_t v14 = *(void (***)(char *, uint64_t))(a1 + v7 + 80);
    v106 = *(void **)(a1 + v7 + 64);
    v107 = v14;
    LODWORD(v108) = *(unsigned __int8 *)(a1 + v7 + 88);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = v8;
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v112 = v16;
    unint64_t v19 = sub_1000AF084(v13);
    uint64_t v20 = v16[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      unint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    char v23 = v18;
    if (v16[3] >= v22)
    {
      if (v17)
      {
        id v26 = (void *)v112;
        if (v18) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_1000B09DC();
        id v26 = (void *)v112;
        if (v23) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_1000AF7E0(v22, v17);
      unint64_t v24 = sub_1000AF084(v13);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_43;
      }
      unint64_t v19 = v24;
      id v26 = (void *)v112;
      if (v23)
      {
LABEL_3:
        uint64_t v8 = v26;
        unint64_t v9 = v26[7] + (v19 << 6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)unint64_t v9 = v104;
        *(void *)(v9 + 8) = v12;
        *(unsigned char *)(v9 + 16) = v105;
        uint64_t v10 = v106;
        *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
        *(void *)(v9 + 32) = v10;
        uint64_t v11 = v107;
        *(void *)(v9 + 40) = v15;
        *(void *)(v9 + 48) = v11;
        *(unsigned char *)(v9 + 56) = (_BYTE)v108;
        goto LABEL_4;
      }
    }
    v26[(v19 >> 6) + 8] |= 1 << v19;
    *(void *)(v26[6] + 8 * v19) = v13;
    unint64_t v27 = v26[7] + (v19 << 6);
    *(void *)unint64_t v27 = v104;
    *(void *)(v27 + 8) = v12;
    *(unsigned char *)(v27 + 16) = v105;
    objc_super v28 = v106;
    *(void *)(v27 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
    *(void *)(v27 + 32) = v28;
    char v29 = v107;
    *(void *)(v27 + 40) = v15;
    *(void *)(v27 + 48) = v29;
    *(unsigned char *)(v27 + 56) = (_BYTE)v108;
    uint64_t v30 = v26[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_40;
    }
    uint64_t v8 = v26;
    v26[2] = v32;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 += 64;
    --v6;
    a1 = v101;
  }
  while (v6);
  swift_bridgeObjectRelease();
  uint64_t v4 = v99;
  a2 = v100;
  unint64_t result = v8;
  uint64_t v34 = *(void *)(v100 + 16);
  if (v34) {
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_100013AE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100013B74(uint64_t a1)
{
  return a1;
}

unint64_t sub_100013C04()
{
  unint64_t result = qword_1001E0C60;
  if (!qword_1001E0C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0C60);
  }
  return result;
}

unint64_t sub_100013C5C()
{
  unint64_t result = qword_1001E0C68;
  if (!qword_1001E0C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0C68);
  }
  return result;
}

uint64_t sub_100013CB0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100015370(&qword_1001E0CB8, (void (*)(uint64_t))type metadata accessor for SnoutStoryModel);
  uint64_t result = sub_100015370(&qword_1001E0CC0, (void (*)(uint64_t))type metadata accessor for SnoutStoryModel);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for SnoutStoryModel()
{
  uint64_t result = qword_1001E0D88;
  if (!qword_1001E0D88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100013D80(char a1)
{
  unint64_t result = 0x64695F79726F7473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x69737265766E6F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x5F676E69646E6570;
      break;
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100013E9C(char a1)
{
  unint64_t result = 0x64695F79726F7473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x69737265766E6F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x5F676E69646E6570;
      break;
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100013FB8(unsigned __int8 *a1, char *a2)
{
  return sub_100106B00(*a1, *a2);
}

Swift::Int sub_100013FC4()
{
  return sub_10010B028();
}

uint64_t sub_100013FD0()
{
  return sub_10010A1F8();
}

Swift::Int sub_100013FD8()
{
  return sub_10010B028();
}

unint64_t sub_100013FE0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100015210(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100014010@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100013D80(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10001403C()
{
  return sub_100013E9C(*v0);
}

unint64_t sub_100014044@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100015210(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001406C()
{
  return 0;
}

void sub_100014078(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void sub_100014084(void *a1@<X8>)
{
  *a1 = &off_1001BF8B8;
}

uint64_t sub_100014094(uint64_t a1)
{
  unint64_t v2 = sub_100013C5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000140D0(uint64_t a1)
{
  unint64_t v2 = sub_100013C5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001410C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a4 = 0;
  *(unsigned char *)(a4 + 8) = 1;
  uint64_t v12 = (int *)type metadata accessor for SnoutStoryModel();
  uint64_t v13 = (void *)(a4 + v12[7]);
  UUID.init()();
  *(void *)(a4 + v12[6]) = a1;
  void *v13 = 0;
  v13[1] = 0;
  uint64_t v14 = v12[8];
  *(unsigned char *)(a4 + v14) = a2;
  *(unsigned char *)(a4 + v12[9]) = 0;
  uint64_t v15 = v12[10];
  *(void *)(a4 + v15) = _swiftEmptyArrayStorage;
  uint64_t v16 = v12[11];
  *(void *)(a4 + v16) = 0;
  static Date.now.getter();
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v19 = v18 * 1000.0;
  if ((~*(void *)&v19 & 0x7FF0000000000000) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v19 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v19 < 1.84467441e19)
  {
    unint64_t v20 = (unint64_t)v19;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(void *)(a4 + v12[12]) = v20;
    if (*(unsigned char *)(a4 + v14) != 1) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v21 = *(void *)(a3 + 16);
    if (!v21) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v63 = v16;
    uint64_t v22 = *(void *)(a4 + v16);
    uint64_t v64 = v15;
    char v23 = *(void **)(a4 + v15);
    uint64_t result = swift_bridgeObjectRetain();
    long long v24 = *(_OWORD *)(a3 + 176);
    long long v84 = *(_OWORD *)(a3 + 160);
    long long v85 = v24;
    *(_OWORD *)long long v86 = *(_OWORD *)(a3 + 192);
    *(_OWORD *)&v86[9] = *(_OWORD *)(a3 + 201);
    long long v25 = *(_OWORD *)(a3 + 112);
    long long v80 = *(_OWORD *)(a3 + 96);
    long long v81 = v25;
    long long v26 = *(_OWORD *)(a3 + 144);
    long long v82 = *(_OWORD *)(a3 + 128);
    long long v83 = v26;
    long long v27 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)long long v79 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)&v79[16] = v27;
    long long v28 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)&v79[32] = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&v79[48] = v28;
    uint64_t v29 = *((void *)&v28 + 1) + v22;
    if (!__CFADD__(*((void *)&v28 + 1), v22))
    {
      uint64_t v30 = v22 + 1;
      uint64_t v31 = v21 - 1;
      uint64_t v32 = 224;
      while (v30)
      {
        sub_10001547C((uint64_t)v79);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v23 = sub_1001392A0(0, v23[2] + 1, 1, v23);
        }
        unint64_t v34 = v23[2];
        unint64_t v33 = v23[3];
        if (v34 >= v33 >> 1) {
          char v23 = sub_1001392A0((void *)(v33 > 1), v34 + 1, 1, v23);
        }
        char v35 = v86[24];
        uint64_t v36 = *((void *)&v85 + 1);
        __int16 v37 = *(_WORD *)((char *)&v85 + 1);
        uint64_t v38 = *((void *)&v84 + 1);
        uint64_t v39 = *((void *)&v83 + 1);
        char v40 = BYTE1(v83);
        uint64_t v41 = *((void *)&v82 + 1);
        uint64_t v42 = *((void *)&v81 + 1);
        __int16 v43 = WORD2(v81);
        long long v44 = v80;
        __int16 v45 = *(_WORD *)v79;
        char v76 = v82;
        char v74 = v83;
        char v71 = v84;
        char v69 = v85;
        char v66 = v86[0];
        uint64_t v46 = &v23[24 * v34];
        long long v47 = *(_OWORD *)&v79[8];
        long long v48 = *(_OWORD *)&v79[24];
        long long v49 = *(_OWORD *)&v79[40];
        long long v50 = *(_OWORD *)&v86[8];
        int v51 = v81;
        v23[2] = v34 + 1;
        *((_WORD *)v46 + 16) = v45;
        __int16 v52 = v78;
        uint64_t result = v77;
        *(_DWORD *)((char *)v46 + 34) = v77;
        *((_WORD *)v46 + 19) = v52;
        *(_OWORD *)(v46 + 5) = v47;
        *(_OWORD *)(v46 + 7) = v48;
        *(_OWORD *)(v46 + 9) = v49;
        v46[11] = v29;
        *((_OWORD *)v46 + 6) = v44;
        *((_DWORD *)v46 + 28) = v51;
        *((_WORD *)v46 + 58) = v43;
        v46[15] = v42;
        *((unsigned char *)v46 + 128) = v76;
        int v53 = *(_DWORD *)v75;
        *((_DWORD *)v46 + 33) = *(_DWORD *)&v75[3];
        *(_DWORD *)((char *)v46 + 129) = v53;
        v46[17] = v41;
        *((unsigned char *)v46 + 144) = v74;
        *((unsigned char *)v46 + 145) = v40;
        LOWORD(v53) = v73;
        *(_DWORD *)((char *)v46 + 146) = v72;
        *((_WORD *)v46 + 75) = v53;
        v46[19] = v39;
        *((unsigned char *)v46 + 160) = v71;
        int v54 = *(_DWORD *)v70;
        *((_DWORD *)v46 + 41) = *(_DWORD *)&v70[3];
        *(_DWORD *)((char *)v46 + 161) = v54;
        v46[21] = v38;
        *((unsigned char *)v46 + 176) = v69;
        *(_WORD *)((char *)v46 + 177) = v37;
        int v55 = v67;
        *((unsigned char *)v46 + 183) = v68;
        *(_DWORD *)((char *)v46 + 179) = v55;
        v46[23] = v36;
        *((unsigned char *)v46 + 192) = v66;
        LODWORD(v36) = *(_DWORD *)v65;
        *((_DWORD *)v46 + 49) = *(_DWORD *)&v65[3];
        *(_DWORD *)((char *)v46 + 193) = v36;
        *(_OWORD *)(v46 + 25) = v50;
        *((unsigned char *)v46 + 216) = v35;
        if (!v31)
        {
          uint64_t result = swift_bridgeObjectRelease_n();
          *(void *)(a4 + v64) = v23;
          *(void *)(a4 + v63) = v30;
          return result;
        }
        long long v56 = *(_OWORD *)(a3 + v32 + 144);
        long long v84 = *(_OWORD *)(a3 + v32 + 128);
        long long v85 = v56;
        *(_OWORD *)long long v86 = *(_OWORD *)(a3 + v32 + 160);
        *(_OWORD *)&v86[9] = *(_OWORD *)(a3 + v32 + 169);
        long long v57 = *(_OWORD *)(a3 + v32 + 80);
        long long v80 = *(_OWORD *)(a3 + v32 + 64);
        long long v81 = v57;
        long long v58 = *(_OWORD *)(a3 + v32 + 112);
        long long v82 = *(_OWORD *)(a3 + v32 + 96);
        long long v83 = v58;
        long long v59 = *(_OWORD *)(a3 + v32 + 16);
        *(_OWORD *)long long v79 = *(_OWORD *)(a3 + v32);
        *(_OWORD *)&v79[16] = v59;
        long long v60 = *(_OWORD *)(a3 + v32 + 32);
        long long v61 = *(_OWORD *)(a3 + v32 + 48);
        v32 += 192;
        --v31;
        *(_OWORD *)&v79[32] = v60;
        *(_OWORD *)&v79[48] = v61;
        BOOL v62 = __CFADD__(*((void *)&v61 + 1), v30);
        uint64_t v29 = *((void *)&v61 + 1) + v30++;
        if (v62) {
          goto LABEL_20;
        }
      }
      __break(1u);
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000145F0(uint64_t a1)
{
  uint64_t result = type metadata accessor for SnoutStoryModel();
  if (*(unsigned char *)(v1 + *(int *)(result + 32)) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      uint64_t v43 = *(int *)(result + 44);
      uint64_t v5 = *(void *)(v1 + v43);
      uint64_t v42 = *(int *)(result + 40);
      uint64_t v6 = *(void **)(v1 + v42);
      uint64_t result = swift_bridgeObjectRetain();
      long long v7 = *(_OWORD *)(a1 + 176);
      long long v63 = *(_OWORD *)(a1 + 160);
      long long v64 = v7;
      *(_OWORD *)long long v65 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v65[9] = *(_OWORD *)(a1 + 201);
      long long v8 = *(_OWORD *)(a1 + 112);
      long long v59 = *(_OWORD *)(a1 + 96);
      long long v60 = v8;
      long long v9 = *(_OWORD *)(a1 + 144);
      long long v61 = *(_OWORD *)(a1 + 128);
      long long v62 = v9;
      long long v10 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)long long v58 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)&v58[16] = v10;
      long long v11 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)&v58[32] = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v58[48] = v11;
      uint64_t v12 = *((void *)&v11 + 1) + v5;
      if (!__CFADD__(*((void *)&v11 + 1), v5))
      {
        uint64_t v13 = v5 + 1;
        uint64_t v14 = v4 - 1;
        uint64_t v15 = 224;
        while (v13)
        {
          sub_10001547C((uint64_t)v58);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_1001392A0(0, v6[2] + 1, 1, v6);
          }
          unint64_t v17 = v6[2];
          unint64_t v16 = v6[3];
          if (v17 >= v16 >> 1) {
            uint64_t v6 = sub_1001392A0((void *)(v16 > 1), v17 + 1, 1, v6);
          }
          char v18 = v65[24];
          uint64_t v19 = *((void *)&v64 + 1);
          __int16 v20 = *(_WORD *)((char *)&v64 + 1);
          uint64_t v21 = *((void *)&v63 + 1);
          uint64_t v22 = *((void *)&v62 + 1);
          char v23 = BYTE1(v62);
          uint64_t v24 = *((void *)&v61 + 1);
          uint64_t v25 = *((void *)&v60 + 1);
          __int16 v26 = WORD2(v60);
          long long v27 = v59;
          __int16 v28 = *(_WORD *)v58;
          char v55 = v61;
          char v53 = v62;
          char v50 = v63;
          char v48 = v64;
          char v45 = v65[0];
          uint64_t v29 = &v6[24 * v17];
          long long v30 = *(_OWORD *)&v58[8];
          long long v31 = *(_OWORD *)&v58[24];
          long long v32 = *(_OWORD *)&v58[40];
          long long v33 = *(_OWORD *)&v65[8];
          int v34 = v60;
          v6[2] = v17 + 1;
          *((_WORD *)v29 + 16) = v28;
          uint64_t result = v56;
          *(_DWORD *)((char *)v29 + 34) = v56;
          *((_WORD *)v29 + 19) = v57;
          *(_OWORD *)(v29 + 5) = v30;
          *(_OWORD *)(v29 + 7) = v31;
          *(_OWORD *)(v29 + 9) = v32;
          v29[11] = v12;
          *((_OWORD *)v29 + 6) = v27;
          *((_DWORD *)v29 + 28) = v34;
          *((_WORD *)v29 + 58) = v26;
          v29[15] = v25;
          *((unsigned char *)v29 + 128) = v55;
          *((_DWORD *)v29 + 33) = *(_DWORD *)&v54[3];
          *(_DWORD *)((char *)v29 + 129) = *(_DWORD *)v54;
          v29[17] = v24;
          *((unsigned char *)v29 + 144) = v53;
          *((unsigned char *)v29 + 145) = v23;
          *(_DWORD *)((char *)v29 + 146) = v51;
          *((_WORD *)v29 + 75) = v52;
          v29[19] = v22;
          *((unsigned char *)v29 + 160) = v50;
          *((_DWORD *)v29 + 41) = *(_DWORD *)&v49[3];
          *(_DWORD *)((char *)v29 + 161) = *(_DWORD *)v49;
          v29[21] = v21;
          *((unsigned char *)v29 + 176) = v48;
          *(_WORD *)((char *)v29 + 177) = v20;
          *((unsigned char *)v29 + 183) = v47;
          *(_DWORD *)((char *)v29 + 179) = v46;
          v29[23] = v19;
          *((unsigned char *)v29 + 192) = v45;
          *((_DWORD *)v29 + 49) = *(_DWORD *)&v44[3];
          *(_DWORD *)((char *)v29 + 193) = *(_DWORD *)v44;
          *(_OWORD *)(v29 + 25) = v33;
          *((unsigned char *)v29 + 216) = v18;
          if (!v14)
          {
            uint64_t result = swift_bridgeObjectRelease();
            *(void *)(v1 + v42) = v6;
            *(void *)(v1 + v43) = v13;
            return result;
          }
          long long v35 = *(_OWORD *)(a1 + v15 + 144);
          long long v63 = *(_OWORD *)(a1 + v15 + 128);
          long long v64 = v35;
          *(_OWORD *)long long v65 = *(_OWORD *)(a1 + v15 + 160);
          *(_OWORD *)&v65[9] = *(_OWORD *)(a1 + v15 + 169);
          long long v36 = *(_OWORD *)(a1 + v15 + 80);
          long long v59 = *(_OWORD *)(a1 + v15 + 64);
          long long v60 = v36;
          long long v37 = *(_OWORD *)(a1 + v15 + 112);
          long long v61 = *(_OWORD *)(a1 + v15 + 96);
          long long v62 = v37;
          long long v38 = *(_OWORD *)(a1 + v15 + 16);
          *(_OWORD *)long long v58 = *(_OWORD *)(a1 + v15);
          *(_OWORD *)&v58[16] = v38;
          long long v39 = *(_OWORD *)(a1 + v15 + 32);
          long long v40 = *(_OWORD *)(a1 + v15 + 48);
          v15 += 192;
          --v14;
          *(_OWORD *)&v58[32] = v39;
          *(_OWORD *)&v58[48] = v40;
          BOOL v41 = __CFADD__(*((void *)&v40 + 1), v13);
          uint64_t v12 = *((void *)&v40 + 1) + v13++;
          if (v41) {
            goto LABEL_17;
          }
        }
        __break(1u);
      }
LABEL_17:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000148F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E0D10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  long long v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_100013C5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = type metadata accessor for SnoutStoryModel();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_100015370(&qword_1001E0D18, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 40));
    v11[7] = 5;
    sub_100012960(&qword_1001E0CF8);
    sub_1000153B8(&qword_1001E0D20, (void (*)(void))sub_100015428);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100014C10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100012960(&qword_1001E0CE8);
  uint64_t v19 = *(void *)(v23 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for SnoutStoryModel();
  uint64_t v8 = __chkstk_darwin();
  long long v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)long long v10 = 0;
  v10[8] = 1;
  long long v11 = (uint64_t *)&v10[*(int *)(v8 + 28)];
  *long long v11 = 0;
  v11[1] = 0;
  sub_100012D78(a1, a1[3]);
  sub_100013C5C();
  uint64_t v22 = v6;
  uint64_t v12 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = v19;
    uint64_t v13 = v20;
    LOBYTE(v26) = 0;
    sub_100015370((unint64_t *)&qword_1001E0CF0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v10[v7[5]], v21, v3);
    LOBYTE(v26) = 1;
    *(void *)&v10[v7[6]] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 2;
    *long long v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v11[1] = v15;
    LOBYTE(v26) = 3;
    v10[v7[8]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v26) = 4;
    v10[v7[9]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    sub_100012960(&qword_1001E0CF8);
    char v25 = 5;
    sub_1000153B8(&qword_1001E0D00, (void (*)(void))sub_10001525C);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v10[v7[10]] = v26;
    LOBYTE(v26) = 6;
    *(void *)&v10[v7[11]] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 7;
    uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v23);
    *(void *)&v10[v7[12]] = v16;
    sub_1000152B0((uint64_t)v10, v18);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
    return sub_100015314((uint64_t)v10);
  }
}

uint64_t sub_1000150D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100014C10(a1, a2);
}

uint64_t sub_1000150E8(void *a1)
{
  return sub_1000148F0(a1);
}

unint64_t sub_100015104()
{
  unint64_t result = qword_1001E0CC8;
  if (!qword_1001E0CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0CC8);
  }
  return result;
}

unint64_t sub_10001515C()
{
  unint64_t result = qword_1001E0CD0;
  if (!qword_1001E0CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0CD0);
  }
  return result;
}

unint64_t sub_1000151B4()
{
  unint64_t result = qword_1001E0CD8;
  if (!qword_1001E0CD8)
  {
    sub_100011ECC(&qword_1001E0CE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0CD8);
  }
  return result;
}

unint64_t sub_100015210(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BF7D8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

unint64_t sub_10001525C()
{
  unint64_t result = qword_1001E0D08;
  if (!qword_1001E0D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0D08);
  }
  return result;
}

uint64_t sub_1000152B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnoutStoryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015314(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SnoutStoryModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100015370(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000153B8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100011ECC(&qword_1001E0CF8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100015428()
{
  unint64_t result = qword_1001E0D28;
  if (!qword_1001E0D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0D28);
  }
  return result;
}

uint64_t sub_10001547C(uint64_t a1)
{
  return a1;
}

unsigned char *initializeBufferWithCopyOfBuffer for SnoutEvent.EventType(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SnoutEvent.ResultType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SnoutStoryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100015650);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_100015678(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100015684(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SnoutStoryModel.CodingKeys()
{
  return &type metadata for SnoutStoryModel.CodingKeys;
}

void *sub_10001569C(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a3[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v12 = (void *)((char *)v4 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)v4 + v15) = *((unsigned char *)a2 + v15);
    uint64_t v16 = a3[11];
    *(void *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(void *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    *(void *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000157DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100015870(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100015960(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t sub_100015A78(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100015B54(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  return a1;
}

uint64_t sub_100015C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015C5C);
}

uint64_t sub_100015C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 40));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100015D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015D34);
}

uint64_t sub_100015D34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100015DF4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100015EC4()
{
  unint64_t result = qword_1001E0DE0;
  if (!qword_1001E0DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0DE0);
  }
  return result;
}

unint64_t sub_100015F1C()
{
  unint64_t result = qword_1001E0DE8;
  if (!qword_1001E0DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0DE8);
  }
  return result;
}

unint64_t sub_100015F74()
{
  unint64_t result = qword_1001E0DF0;
  if (!qword_1001E0DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0DF0);
  }
  return result;
}

unint64_t sub_100015FC8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100015FF8();
  unint64_t result = sub_10001604C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100015FF8()
{
  unint64_t result = qword_1001E0E40;
  if (!qword_1001E0E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0E40);
  }
  return result;
}

unint64_t sub_10001604C()
{
  unint64_t result = qword_1001E1260;
  if (!qword_1001E1260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1260);
  }
  return result;
}

uint64_t sub_1000160A0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E0E78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_100015F74();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = *(unsigned char *)(v3 + 32);
    v10[13] = 1;
    sub_100016A3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[12] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[11] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100016268(unsigned __int8 *a1, char *a2)
{
  return sub_100106D80(*a1, *a2);
}

Swift::Int sub_100016274()
{
  return sub_100108A2C();
}

uint64_t sub_10001627C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100016358()
{
  return sub_10010AF38();
}

unint64_t sub_100016360@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100016720(*a1);
  *a2 = result;
  return result;
}

void sub_100016390(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000007265;
  uint64_t v3 = 0x696669746E656469;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = 0x616E5F70756F7267;
      unint64_t v2 = 0xEA0000000000656DLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x6F635F7972746572;
      a1[1] = 0xEB00000000746E75;
      break;
    case 3:
      *a1 = 0xD000000000000016;
      a1[1] = 0x8000000100184840;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t sub_100016444()
{
  unint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x616E5F70756F7267;
      break;
    case 2:
      unint64_t result = 0x6F635F7972746572;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000164EC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100016720(a1);
  *a2 = result;
  return result;
}

void sub_100016514(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void sub_100016520(void *a1@<X8>)
{
  *a1 = &off_1001BF960;
}

uint64_t sub_100016530(uint64_t a1)
{
  unint64_t v2 = sub_100015F74();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001656C(uint64_t a1)
{
  unint64_t v2 = sub_100015F74();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000165A8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001676C(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1000165F8(void *a1)
{
  return sub_1000160A0(a1);
}

unint64_t sub_100016614()
{
  unint64_t result = qword_1001E0E48;
  if (!qword_1001E0E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0E48);
  }
  return result;
}

unint64_t sub_10001666C()
{
  unint64_t result = qword_1001E0E50;
  if (!qword_1001E0E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0E50);
  }
  return result;
}

unint64_t sub_1000166C4()
{
  unint64_t result = qword_1001E0E58;
  if (!qword_1001E0E58)
  {
    sub_100011ECC(&qword_1001E0E60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0E58);
  }
  return result;
}

unint64_t sub_100016720(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BF8E0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10001676C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E0E68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_100015F74();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v20 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v18 = 1;
  sub_1000169E8();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v15 = v19;
  char v17 = 2;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  char v16 = 3;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  *(unsigned char *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v12;
  return result;
}

unint64_t sub_1000169E8()
{
  unint64_t result = qword_1001E0E70;
  if (!qword_1001E0E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0E70);
  }
  return result;
}

unint64_t sub_100016A3C()
{
  unint64_t result = qword_1001E0E80;
  if (!qword_1001E0E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0E80);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SnoutEvent.AdType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RetryCountModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100016BECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RetryCountModel.CodingKeys()
{
  return &type metadata for RetryCountModel.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for SnoutEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for RetryCountModel()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RetryCountModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RetryCountModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  return a1;
}

__n128 initializeWithTake for RetryCountModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RetryCountModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for RetryCountModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RetryCountModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RetryCountModel()
{
  return &type metadata for RetryCountModel;
}

unint64_t sub_100016E44()
{
  unint64_t result = qword_1001E0E88;
  if (!qword_1001E0E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E0E88);
  }
  return result;
}

uint64_t sub_100016E98()
{
  *(void *)(v1 + 1336) = v0;
  return _swift_task_switch(sub_100016EB8, 0, 0);
}

uint64_t sub_100016EB8()
{
  uint64_t v1 = *(void *)(v0 + 1336);
  swift_asyncLet_begin();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 1344) = v2;
  *(void *)(v2 + 16) = v1;
  swift_asyncLet_begin();
  return _swift_asyncLet_get(v0 + 656, v0 + 1353, sub_100016FBC, v0 + 1296);
}

uint64_t sub_100016FBC()
{
  *(unsigned char *)(v0 + 1354) = *(unsigned char *)(v0 + 1353);
  return _swift_asyncLet_get(v0 + 16, v0 + 1352, sub_100016FE4, v0 + 1296);
}

uint64_t sub_100016FE4()
{
  *(unsigned char *)(v0 + 1355) = *(unsigned char *)(v0 + 1352);
  return _swift_asyncLet_finish(v0 + 16, v0 + 1352, sub_10001700C, v0 + 1296);
}

uint64_t sub_10001700C()
{
  return _swift_task_switch(sub_100017028, 0, 0);
}

uint64_t sub_100017028()
{
  swift_task_dealloc();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1353, sub_1000170A8, v0 + 16);
}

uint64_t sub_1000170A8()
{
  return _swift_task_switch(sub_1000170C4, 0, 0);
}

uint64_t sub_1000170C4()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned char *)(v0 + 1354) & *(unsigned char *)(v0 + 1355) & 1);
}

uint64_t sub_1000170EC(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return _swift_task_switch(sub_10001710C, 0, 0);
}

uint64_t sub_10001710C()
{
  if (qword_1001E0930 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1001E60D0;
  *(void *)(v0 + 88) = qword_1001E60D0;
  return _swift_task_switch(sub_1000171A4, v1, 0);
}

uint64_t sub_1000171A4()
{
  int v1 = *(unsigned __int8 *)(*(void *)(v0 + 88) + 112);
  if (v1 == 2)
  {
    sub_100017A90();
    swift_getObjectType();
    uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v4 = v3;
    uint64_t v5 = sub_100017258;
    uint64_t v6 = v2;
    uint64_t v7 = v4;
  }
  else
  {
    *(unsigned char *)(v0 + 98) = v1 & 1;
    uint64_t v5 = sub_100017484;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100017258()
{
  int v1 = v0 + 2;
  v0[2] = v0;
  v0[7] = v0 + 12;
  v0[3] = sub_10001735C;
  uint64_t v2 = swift_continuation_init();
  id v3 = [self sharedConnection];
  if (v3)
  {
    uint64_t v4 = v3;
    unsigned __int8 v5 = [v3 isDiagnosticSubmissionAllowed];

    **(unsigned char **)(*(void *)(v2 + 64) + 40) = v5;
    swift_continuation_resume();
    id v3 = v1;
  }
  else
  {
    __break(1u);
  }
  return _swift_continuation_await(v3);
}

uint64_t sub_10001735C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  *(unsigned char *)(*(void *)v0 + 97) = *(unsigned char *)(*(void *)v0 + 96);
  return _swift_task_switch(sub_100017458, v1, 0);
}

uint64_t sub_100017458()
{
  char v1 = *(unsigned char *)(v0 + 97);
  *(unsigned char *)(*(void *)(v0 + 88) + 112) = v1;
  *(unsigned char *)(v0 + 98) = v1;
  return _swift_task_switch(sub_100017484, 0, 0);
}

uint64_t sub_100017484()
{
  **(unsigned char **)(v0 + 80) = *(unsigned char *)(v0 + 98);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000174A8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E4070 + dword_1001E4070);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100017550;
  return v4(1);
}

uint64_t sub_100017550(char a1)
{
  *(unsigned char *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100017650, 0, 0);
}

uint64_t sub_100017650()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 32) & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017678(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100012AB8;
  v3[2] = a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E4070 + dword_1001E4070);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100017550;
  return v6(1);
}

uint64_t sub_100017768()
{
  return _swift_task_switch(sub_100017784, 0, 0);
}

uint64_t sub_100017784()
{
  if (sub_100017AE8())
  {
    uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v1(1);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E4078 + dword_1001E4078);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 16) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100017864;
    return v4(2);
  }
}

uint64_t sub_100017864(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  *(unsigned char *)(v3 + 32) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100017968, 0, 0);
}

uint64_t sub_100017968()
{
  if (*(unsigned char *)(v0 + 32)) {
    double v1 = 0.1;
  }
  else {
    double v1 = *(double *)(v0 + 24);
  }
  BOOL v2 = (double)sub_100017A04(0x20000000000001uLL) * 1.11022302e-16 + 0.0 <= v1;
  uint64_t v3 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v3(v2);
}

unint64_t sub_100017A04(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    unint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100017A90()
{
  unint64_t result = qword_1001E0EB0;
  if (!qword_1001E0EB0)
  {
    type metadata accessor for Restrictions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E0EB0);
  }
  return result;
}

uint64_t sub_100017AE8()
{
  return os_variant_has_internal_content();
}

uint64_t initializeWithCopy for SnoutStoryMetrics(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for SnoutStoryMetrics(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *sub_100017B78(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for SnoutStoryMetrics(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SnoutStoryMetrics(uint64_t a1, uint64_t a2)
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SnoutStoryMetrics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SnoutStoryMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutStoryMetrics()
{
  return &type metadata for SnoutStoryMetrics;
}

uint64_t sub_100017E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100019960(a1, &qword_1001E0EC0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  return swift_task_create();
}

void main()()
{
  sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin();
  unint64_t v1 = (char *)&v4 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  sub_100017E98((uint64_t)v1, (uint64_t)&unk_1001E0ED0, v3);
  swift_release();
  dispatch_main();
}

uint64_t sub_10001811C()
{
  sub_100012960(&qword_1001E0EE0);
  *(void *)(v0 + 16) = swift_task_alloc();
  return _swift_task_switch(sub_1000181AC, 0, 0);
}

uint64_t sub_1000181AC()
{
  uint64_t v11 = v0;
  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100012E74(v2, (uint64_t)qword_1001E5FC8);
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v3, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v2);
  sub_100029F88("Starting attributionkitd", 24, 2, 0, 0, 255, 1, v1, v9, (void *)&_mh_execute_header);
  long long v5 = v9[1];
  *(_OWORD *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9[0];
  *(_OWORD *)(v0 + 40) = v5;
  long long v6 = v9[3];
  *(_OWORD *)(v0 + 56) = v9[2];
  *(_OWORD *)(v0 + 72) = v6;
  *(_OWORD *)(v0 + 88) = v9[4];
  *(void *)(v0 + 104) = v10;
  sub_100019960(v1, &qword_1001E0EE0);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000183B4;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000183B4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000184B0, 0, 0);
}

uint64_t sub_1000184B0()
{
  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v11 = *(void **)(v0 + 96);
  uint64_t v3 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 80);
  long long v5 = *(void **)(v0 + 56);
  uint64_t v4 = *(void **)(v0 + 64);
  long long v6 = *(void **)(v0 + 40);
  uint64_t v7 = *(void **)(v0 + 48);
  uint64_t v8 = *(void **)(v0 + 32);

  swift_release();
  swift_task_dealloc();
  int v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100018584()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000185BC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100012AB8;
  return sub_10001811C();
}

uint64_t sub_100018668(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v107 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v104 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  v106 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  v124[7] = sub_100012E74(v4, (uint64_t)qword_1001E5FC8);
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Configuring UserDefaults", v7, 2u);
    swift_slowDealloc();
  }

  _CFPreferencesSetBackupDisabled();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Registering DAS activities", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v11 = self;
  id v12 = [v11 sharedScheduler];
  _OWORD v124[3] = &type metadata for BackgroundSystemTaskScheduler;
  v124[4] = &off_1001C30C8;
  v124[0] = v12;
  uint64_t v13 = sub_10008D51C();
  sub_10008A5D4(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_10008D6B8();
  sub_10008A7D4(v14);
  swift_bridgeObjectRelease();
  sub_10004A8B0((uint64_t)v123);
  sub_100019BC0((uint64_t)v123, (uint64_t)v122);
  int v15 = (objc_class *)type metadata accessor for ServiceXPCBridge();
  id v16 = objc_allocWithZone(v15);
  sub_100019BC0((uint64_t)v122, (uint64_t)v16 + OBJC_IVAR____TtC20AttributionKitDaemon16ServiceXPCBridge_service);
  v121.receiver = v16;
  v121.super_class = v15;
  id v17 = objc_msgSendSuper2(&v121, "init");
  sub_100019C1C((uint64_t)v122);
  char v18 = (objc_class *)type metadata accessor for ServiceListenerDelegate();
  unsigned __int8 v19 = (char *)objc_allocWithZone(v18);
  *(void *)&v19[OBJC_IVAR____TtC20AttributionKitDaemon23ServiceListenerDelegate_serviceBridge] = v17;
  v120.receiver = v19;
  v120.super_class = v18;
  id v102 = v17;
  id v20 = objc_msgSendSuper2(&v120, "init");
  ServiceMachName.unsafeMutableAddressor();
  id v21 = objc_allocWithZone((Class)NSXPCListener);
  swift_bridgeObjectRetain();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v23 = [v21 initWithMachServiceName:v22];

  id v105 = v20;
  [v23 setDelegate:v20];
  id v103 = v23;
  [v23 activate];
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "API service listener setup complete", v26, 2u);
    swift_slowDealloc();
  }

  sub_1000C6F50(v119);
  sub_100019C70((uint64_t)v119, (uint64_t)v122);
  long long v27 = (objc_class *)type metadata accessor for ImpressionIntakeServiceXPCBridge();
  id v28 = objc_allocWithZone(v27);
  sub_100019C70((uint64_t)v122, (uint64_t)v28 + OBJC_IVAR____TtC20AttributionKitDaemon32ImpressionIntakeServiceXPCBridge_service);
  v118.receiver = v28;
  v118.super_class = v27;
  id v29 = objc_msgSendSuper2(&v118, "init");
  sub_100019CCC((uint64_t)v122);
  long long v30 = (objc_class *)type metadata accessor for ImpressionIntakeServiceListenerDelegate();
  long long v31 = (char *)objc_allocWithZone(v30);
  *(void *)&v31[OBJC_IVAR____TtC20AttributionKitDaemon39ImpressionIntakeServiceListenerDelegate_serviceBridge] = v29;
  v117.receiver = v31;
  v117.super_class = v30;
  id v99 = v29;
  id v32 = objc_msgSendSuper2(&v117, "init");
  ImpressionIntakeServiceMachName.unsafeMutableAddressor();
  id v33 = objc_allocWithZone((Class)NSXPCListener);
  swift_bridgeObjectRetain();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v35 = [v33 initWithMachServiceName:v34];

  id v101 = v32;
  [v35 setDelegate:v32];
  id v100 = v35;
  [v35 activate];
  long long v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    long long v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Impression intake service listener setup complete", v38, 2u);
    swift_slowDealloc();
  }

  sub_100070370(v116);
  sub_100019D20((uint64_t)v116, (uint64_t)v122);
  long long v39 = (objc_class *)type metadata accessor for TokenHandoffServiceXPCBridge();
  id v40 = objc_allocWithZone(v39);
  sub_100019D20((uint64_t)v122, (uint64_t)v40 + OBJC_IVAR____TtC20AttributionKitDaemon28TokenHandoffServiceXPCBridge_service);
  v115.receiver = v40;
  v115.super_class = v39;
  id v41 = objc_msgSendSuper2(&v115, "init");
  sub_100019D7C((uint64_t)v122);
  uint64_t v42 = (objc_class *)type metadata accessor for TokenHandoffServiceListenerDelegate();
  uint64_t v43 = (char *)objc_allocWithZone(v42);
  *(void *)&v43[OBJC_IVAR____TtC20AttributionKitDaemon35TokenHandoffServiceListenerDelegate_serviceBridge] = v41;
  v114.receiver = v43;
  v114.super_class = v42;
  id v97 = v41;
  id v44 = objc_msgSendSuper2(&v114, "init");
  TokenHandoffServiceMachName.unsafeMutableAddressor();
  id v45 = objc_allocWithZone((Class)NSXPCListener);
  swift_bridgeObjectRetain();
  NSString v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v47 = [v45 initWithMachServiceName:v46];

  id v98 = v44;
  [v47 setDelegate:v44];
  id v96 = v47;
  [v47 activate];
  char v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    char v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Token handoff service listener setup complete", v50, 2u);
    swift_slowDealloc();
  }

  id v51 = [v11 sharedScheduler];
  v122[3] = &type metadata for ActivityManager;
  v122[4] = &off_1001CCE58;
  __int16 v52 = (void *)swift_allocObject();
  v122[0] = v52;
  v52[5] = &type metadata for BackgroundSystemTaskScheduler;
  v52[6] = &off_1001C30C8;
  v52[2] = v51;
  sub_100087C5C((uint64_t)v122, (uint64_t)v113);
  sub_100019E08((uint64_t)v113, (uint64_t)v122);
  char v53 = (objc_class *)type metadata accessor for DeveloperModeServiceXPCBridge();
  id v54 = objc_allocWithZone(v53);
  sub_100019E08((uint64_t)v122, (uint64_t)v54 + OBJC_IVAR____TtC20AttributionKitDaemon29DeveloperModeServiceXPCBridge_service);
  v112.receiver = v54;
  v112.super_class = v53;
  id v55 = objc_msgSendSuper2(&v112, "init");
  sub_100019E64((uint64_t)v122);
  unsigned int v56 = (objc_class *)type metadata accessor for DeveloperModeServiceListenerDelegate();
  __int16 v57 = (char *)objc_allocWithZone(v56);
  *(void *)&v57[OBJC_IVAR____TtC20AttributionKitDaemon36DeveloperModeServiceListenerDelegate_serviceBridge] = v55;
  v111.receiver = v57;
  v111.super_class = v56;
  id v94 = v55;
  id v58 = objc_msgSendSuper2(&v111, "init");
  DeveloperModeServiceMachName.unsafeMutableAddressor();
  id v59 = objc_allocWithZone((Class)NSXPCListener);
  swift_bridgeObjectRetain();
  NSString v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v61 = [v59 initWithMachServiceName:v60];

  id v95 = v58;
  [v61 setDelegate:v58];
  id v93 = v61;
  [v61 activate];
  long long v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    long long v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Developer mode service listener setup complete", v64, 2u);
    swift_slowDealloc();
  }

  sub_1000CE438((uint64_t)v122);
  sub_100019EB8((uint64_t)v122, (uint64_t)v110);
  updated = (objc_class *)type metadata accessor for PostbackUpdateTestingServiceXPCBridge();
  id v66 = objc_allocWithZone(updated);
  sub_100019EB8((uint64_t)v110, (uint64_t)v66 + OBJC_IVAR____TtC20AttributionKitDaemon37PostbackUpdateTestingServiceXPCBridge_service);
  v109.receiver = v66;
  v109.super_class = updated;
  id v67 = objc_msgSendSuper2(&v109, "init");
  sub_100019F14((uint64_t)v110);
  char v68 = (objc_class *)type metadata accessor for PostbackUpdateTestingServiceListenerDelegate();
  char v69 = (char *)objc_allocWithZone(v68);
  *(void *)&v69[OBJC_IVAR____TtC20AttributionKitDaemon44PostbackUpdateTestingServiceListenerDelegate_serviceBridge] = v67;
  v108.receiver = v69;
  v108.super_class = v68;
  id v92 = v67;
  id v70 = objc_msgSendSuper2(&v108, "init");
  PostbackUpdateTestingServiceMachName.unsafeMutableAddressor();
  id v71 = objc_allocWithZone((Class)NSXPCListener);
  swift_bridgeObjectRetain();
  NSString v72 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v73 = [v71 initWithMachServiceName:v72];

  [v73 setDelegate:v70];
  [v73 activate];
  char v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    char v76 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v76 = 0;
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Postback update testing service listener setup complete", v76, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for LaunchServicesObserver();
  swift_allocObject();
  uint64_t v77 = sub_100082638();
  sub_100019F68(0, (unint64_t *)&qword_1001E0F70);
  uint64_t v78 = v104;
  long long v79 = v106;
  uint64_t v80 = v107;
  (*(void (**)(char *, void, uint64_t))(v104 + 104))(v106, enum case for DispatchQoS.QoSClass.default(_:), v107);
  long long v81 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v80);
  v110[4] = sub_1001407CC;
  v110[5] = 0;
  v110[0] = _NSConcreteStackBlock;
  v110[1] = 1107296256;
  _OWORD v110[2] = sub_100019810;
  v110[3] = &unk_1001C2918;
  long long v82 = _Block_copy(v110);
  swift_release();
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v81, v82);
  _Block_release(v82);

  long long v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v84))
  {
    long long v85 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v85 = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Launch completed", v85, 2u);
    swift_slowDealloc();
  }

  sub_100019F14((uint64_t)v122);
  sub_100019E64((uint64_t)v113);
  sub_100019D7C((uint64_t)v116);
  sub_100019CCC((uint64_t)v119);
  sub_100019C1C((uint64_t)v123);
  uint64_t result = sub_100019FA4((uint64_t)v124);
  id v87 = v105;
  *uint64_t v2 = v103;
  v2[1] = v87;
  id v88 = v101;
  v2[2] = v100;
  v2[3] = v88;
  id v89 = v98;
  v2[4] = v96;
  v2[5] = v89;
  id v90 = v95;
  v2[6] = v93;
  v2[7] = v90;
  v2[8] = v73;
  v2[9] = v70;
  v2[10] = v77;
  return result;
}

uint64_t sub_100019350(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v2 - 8);
  uint64_t v20 = v2;
  __chkstk_darwin();
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v17 = *(void *)(v5 - 8);
  uint64_t v18 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100012960(&qword_1001E0EE8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin();
  uint64_t v11 = (void (__cdecl *)(int))SIG_IGN.getter();
  signal(15, v11);
  sub_100019F68(0, &qword_1001E0EF0);
  uint64_t v12 = static OS_dispatch_source.makeSignalSource(signal:queue:)();
  swift_getObjectType();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v12;
  aBlock[4] = sub_100019A64;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002437C;
  aBlock[3] = &unk_1001C28C8;
  int v15 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_100019790();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v20);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v18);
  swift_release();
  OS_dispatch_source.activate()();
  return swift_unknownObjectRelease();
}

void sub_100019694()
{
  sub_100012960(&qword_1001E0EE8);
  CheckedContinuation.resume(returning:)();
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100012E74(v0, (uint64_t)qword_1001E5FC8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received SIGTERM; shutting down", v3, 2u);
    swift_slowDealloc();
  }

  exit(0);
}

uint64_t sub_100019790()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100019810(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100019870()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000198A8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100012AB8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001E34B0 + dword_1001E34B0);
  return v6(a1, v4);
}

uint64_t sub_100019960(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100012960(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000199BC()
{
  uint64_t v1 = sub_100012960(&qword_1001E0EE8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100019A64()
{
  sub_100012960(&qword_1001E0EE8);

  sub_100019694();
}

uint64_t sub_100019AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100019B04()
{
  return swift_release();
}

unint64_t sub_100019B0C()
{
  unint64_t result = qword_1001E3050;
  if (!qword_1001E3050)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3050);
  }
  return result;
}

unint64_t sub_100019B64()
{
  unint64_t result = qword_1001E3060;
  if (!qword_1001E3060)
  {
    sub_100011ECC((uint64_t *)&unk_1001E0F60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3060);
  }
  return result;
}

uint64_t sub_100019BC0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100019C1C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019C70(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100019CCC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019D20(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100019D7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019DD0()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100019E08(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100019E64(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019EB8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100019F14(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019F68(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100019FA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001A000(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a3;
  uint64_t v8 = sub_100012960(&qword_1001E1070);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10001D290();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  sub_100012960(&qword_1001E1000);
  sub_10001E6AC(&qword_1001E1078, &qword_1001E1000, (void (*)(void))sub_10001E604);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = v13;
    char v14 = 1;
    sub_100012960(&qword_1001E1018);
    sub_10001E6AC(&qword_1001E1088, &qword_1001E1018, (void (*)(void))sub_10001E658);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v15 = a4;
    char v14 = 2;
    sub_100012960(&qword_1001E1030);
    sub_10001E6AC(&qword_1001E1098, &qword_1001E1030, (void (*)(void))sub_10001E718);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10001A2A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100105900(*a1, *a2);
}

Swift::Int sub_10001A2B4()
{
  return Hasher._finalize()();
}

uint64_t sub_10001A370()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001A418()
{
  return Hasher._finalize()();
}

unint64_t sub_10001A4D0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001BF988;
  unint64_t result = sub_10001D488(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10001A508(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC0000007365736ELL;
  unint64_t v4 = 0x8000000100184870;
  unint64_t v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    unint64_t v5 = 0x65722D726F727265;
    unint64_t v4 = 0xEF7365736E6F7073;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6F707365722D6163;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10001A580()
{
  unint64_t v1 = 0xD000000000000015;
  if (*v0 != 1) {
    unint64_t v1 = 0x65722D726F727265;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F707365722D6163;
  }
}

unint64_t sub_10001A5F4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001BF988;
  unint64_t result = sub_10001D488(a1, v3);
  *a2 = result;
  return result;
}

void sub_10001A624(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10001A630(uint64_t a1)
{
  unint64_t v2 = sub_10001D290();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001A66C(uint64_t a1)
{
  unint64_t v2 = sub_10001D290();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001A6A8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10001C26C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10001A6D8(void *a1)
{
  return sub_10001A000(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10001A6F8(char *a1, char *a2)
{
  return sub_100105868(*a1, *a2);
}

Swift::Int sub_10001A704()
{
  return Hasher._finalize()();
}

uint64_t sub_10001A778()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001A7D8()
{
  return Hasher._finalize()();
}

uint64_t sub_10001A848@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1001BF9F0;
  return sub_10001AC54(v2, a1, a2);
}

void sub_10001A854(uint64_t *a1@<X8>)
{
  uint64_t v2 = 19279;
  if (*v1) {
    uint64_t v2 = 0x524F525245;
  }
  unint64_t v3 = 0xE200000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10001A884()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10001A8E4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10001A934(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E1110);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10001F004();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[3];
  long long v16 = v3[2];
  long long v17 = v9;
  uint64_t v18 = *((void *)v3 + 8);
  long long v10 = v3[1];
  long long v14 = *v3;
  long long v15 = v10;
  char v13 = 0;
  sub_10001F154();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = *((unsigned char *)v3 + 72);
    char v13 = 1;
    sub_10001D434();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001AAD4(char *a1, char *a2)
{
  return sub_1001057C4(*a1, *a2);
}

Swift::Int sub_10001AAE0()
{
  return Hasher._finalize()();
}

uint64_t sub_10001AB60()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001ABCC()
{
  return Hasher._finalize()();
}

uint64_t sub_10001AC48@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1001BFA40;
  return sub_10001AC54(v2, a1, a2);
}

uint64_t sub_10001AC54@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_10001ACB0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6B63616274736F70;
  if (*v1) {
    uint64_t v2 = 0x737574617473;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10001ACEC()
{
  if (*v0) {
    return 0x737574617473;
  }
  else {
    return 0x6B63616274736F70;
  }
}

uint64_t sub_10001AD24@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BFA40, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10001AD88(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10001AD94(uint64_t a1)
{
  unint64_t v2 = sub_10001F004();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001ADD0(uint64_t a1)
{
  unint64_t v2 = sub_10001F004();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10001AE0C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001C5E4(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 57) = *(_OWORD *)((char *)v7 + 9);
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10001AE58(void *a1)
{
  return sub_10001A934(a1);
}

uint64_t sub_10001AE70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001054E0(*a1, *a2);
}

Swift::Int sub_10001AE7C()
{
  return Hasher._finalize()();
}

uint64_t sub_10001AF24()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001AFB8()
{
  return Hasher._finalize()();
}

unint64_t sub_10001B05C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001BFB10;
  unint64_t result = sub_10001D488(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10001B094(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x726F727265;
  if (v2 != 1)
  {
    uint64_t v5 = 0x676E69726564726FLL;
    unint64_t v4 = 0xEE007865646E692DLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x737574617473;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10001B0F8()
{
  uint64_t v1 = 0x726F727265;
  if (*v0 != 1) {
    uint64_t v1 = 0x676E69726564726FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x737574617473;
  }
}

unint64_t sub_10001B158@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001BFB10;
  unint64_t result = sub_10001D488(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10001B188(uint64_t a1)
{
  unint64_t v2 = sub_10001F0AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001B1C4(uint64_t a1)
{
  unint64_t v2 = sub_10001F0AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001B200(unsigned __int8 *a1, char *a2)
{
  return sub_100105604(*a1, *a2);
}

Swift::Int sub_10001B20C()
{
  return sub_100108B20();
}

uint64_t sub_10001B214()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001B2F0()
{
  return sub_10010B690();
}

unint64_t sub_10001B2F8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10001C8B4(*a1);
  *a2 = result;
  return result;
}

void sub_10001B328(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6E776F6E6B6E75;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEE00726F72726520;
      uint64_t v3 = 0x7265747369676572;
      goto LABEL_3;
    case 2:
      *a1 = 0x7265206E656B6F74;
      a1[1] = 0xEB00000000726F72;
      break;
    case 3:
      *a1 = 0xD000000000000010;
      a1[1] = 0x80000001001848E0;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10001B3E8(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  char v6 = a2 & 1;
  uint64_t v7 = sub_100012960(&qword_1001E1120);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10001F0AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = v6;
  char v15 = 0;
  sub_10001D434();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_10001B594(char a1)
{
  unint64_t result = 0x727574616E676973;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x642D656372756F73;
      break;
    case 4:
      unint64_t result = 0x6E676961706D6163;
      break;
    case 5:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 6:
      unint64_t result = 7107189;
      break;
    case 7:
      unint64_t result = 0x746361736E617274;
      break;
    case 8:
      unint64_t result = 0x64692D6D616461;
      break;
    case 9:
      unint64_t result = 0x6F6C6E776F646572;
      break;
    case 10:
      unint64_t result = 0x612D6E696769726FLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 13:
      unint64_t result = 0x7974696C65646966;
      break;
    case 14:
      unint64_t result = 0x6E69772D646964;
      break;
    case 15:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 16:
      unint64_t result = 0x737574617473;
      break;
    case 17:
      unint64_t result = 0x6F7774656E2D6461;
      break;
    case 18:
      unint64_t result = 0x676E69726564726FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10001B824(char a1)
{
  unint64_t result = 0x727574616E676973;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x642D656372756F73;
      break;
    case 4:
      unint64_t result = 0x6E676961706D6163;
      break;
    case 5:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 6:
      unint64_t result = 7107189;
      break;
    case 7:
      unint64_t result = 0x746361736E617274;
      break;
    case 8:
      unint64_t result = 0x64692D6D616461;
      break;
    case 9:
      unint64_t result = 0x6F6C6E776F646572;
      break;
    case 10:
      unint64_t result = 0x612D6E696769726FLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 13:
      unint64_t result = 0x7974696C65646966;
      break;
    case 14:
      unint64_t result = 0x6E69772D646964;
      break;
    case 15:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 16:
      unint64_t result = 0x737574617473;
      break;
    case 17:
      unint64_t result = 0x6F7774656E2D6461;
      break;
    case 18:
      unint64_t result = 0x676E69726564726FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10001BAB4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E1048);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_10001D3E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v11 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = *(unsigned char *)(v3 + 194);
    v10[14] = 16;
    sub_10001D434();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v11 = 17;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001BED8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10001D4D0(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  }
  return result;
}

uint64_t sub_10001BF10(void *a1)
{
  return sub_10001B3E8(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_10001BF34(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10001B594(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10001B594(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10001BFC0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10001B594(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10001C024()
{
  sub_10001B594(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001C078()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10001B594(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10001C0D8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10001D704();
  *a1 = result;
  return result;
}

unint64_t sub_10001C108@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10001B594(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10001C134()
{
  return sub_10001B824(*v0);
}

uint64_t sub_10001C13C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10001D704();
  *a1 = result;
  return result;
}

void sub_10001C164(unsigned char *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_10001C170(uint64_t a1)
{
  unint64_t v2 = sub_10001D3E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001C1AC(uint64_t a1)
{
  unint64_t v2 = sub_10001D3E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10001C1E8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001D758(a1, v12);
  if (!v2)
  {
    long long v5 = v12[11];
    a2[10] = v12[10];
    a2[11] = v5;
    long long v6 = v12[13];
    a2[12] = v12[12];
    a2[13] = v6;
    long long v7 = v12[7];
    a2[6] = v12[6];
    a2[7] = v7;
    long long v8 = v12[9];
    a2[8] = v12[8];
    a2[9] = v8;
    long long v9 = v12[3];
    a2[2] = v12[2];
    a2[3] = v9;
    long long v10 = v12[5];
    a2[4] = v12[4];
    a2[5] = v10;
    double result = *(double *)v12;
    long long v11 = v12[1];
    *a2 = v12[0];
    a2[1] = v11;
  }
  return result;
}

uint64_t sub_10001C254(void *a1)
{
  return sub_10001BAB4(a1);
}

uint64_t sub_10001C26C(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E0FF0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_100012D78(a1, v7);
  sub_10001D290();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100012960(&qword_1001E1000);
    char v10 = 0;
    sub_10001E6AC(&qword_1001E1008, &qword_1001E1000, (void (*)(void))sub_10001D2E4);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v11;
    sub_100012960(&qword_1001E1018);
    char v10 = 1;
    sub_10001E6AC(&qword_1001E1020, &qword_1001E1018, (void (*)(void))sub_10001D338);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100012960(&qword_1001E1030);
    char v10 = 2;
    sub_10001E6AC(&qword_1001E1038, &qword_1001E1030, (void (*)(void))sub_10001D38C);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10001C5E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E10E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10001F004();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v34 = 0;
  sub_10001F058();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v26;
  uint64_t v10 = v28;
  uint64_t v20 = v27;
  uint64_t v21 = v25;
  uint64_t v22 = v30;
  uint64_t v11 = v32;
  uint64_t v18 = v31;
  uint64_t v19 = v29;
  uint64_t v17 = v33;
  char v34 = 1;
  sub_10001E410();
  uint64_t v24 = v9;
  swift_bridgeObjectRetain();
  uint64_t v23 = v10;
  uint64_t v12 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v9) = v25;
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v23;
  swift_bridgeObjectRelease();
  uint64_t v14 = v24;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v11;
  *(void *)(a2 + 64) = v17;
  *(unsigned char *)(a2 + 72) = v9;
  return result;
}

unint64_t sub_10001C8B4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BFA90, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unsigned char *storeEnumTagSinglePayload for PostbackFetchErrorResponse.ImpressionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001C9CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackFetchErrorResponse.ImpressionError()
{
  return &type metadata for PostbackFetchErrorResponse.ImpressionError;
}

uint64_t destroy for SKANPostback()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SKANPostback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  uint64_t v13 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v13;
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SKANPostback(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  return a1;
}

__n128 initializeWithTake for SKANPostback(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for SKANPostback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v12;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  uint64_t v14 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for SKANPostback(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKANPostback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKANPostback()
{
  return &type metadata for SKANPostback;
}

uint64_t destroy for PostbackFetchResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s20AttributionKitDaemon21PostbackFetchResponseVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PostbackFetchResponse(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for RetryCountDatabaseStore(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PostbackFetchResponse(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackFetchResponse(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackFetchResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackFetchResponse()
{
  return &type metadata for PostbackFetchResponse;
}

unint64_t sub_10001D1BC(uint64_t a1)
{
  unint64_t result = sub_10001D1E4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10001D1E4()
{
  unint64_t result = qword_1001E0FE0;
  if (!qword_1001E0FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0FE0);
  }
  return result;
}

unint64_t sub_10001D23C()
{
  unint64_t result = qword_1001E0FE8;
  if (!qword_1001E0FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0FE8);
  }
  return result;
}

unint64_t sub_10001D290()
{
  unint64_t result = qword_1001E0FF8;
  if (!qword_1001E0FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0FF8);
  }
  return result;
}

unint64_t sub_10001D2E4()
{
  unint64_t result = qword_1001E1010;
  if (!qword_1001E1010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1010);
  }
  return result;
}

unint64_t sub_10001D338()
{
  unint64_t result = qword_1001E1028;
  if (!qword_1001E1028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1028);
  }
  return result;
}

unint64_t sub_10001D38C()
{
  unint64_t result = qword_1001E1040;
  if (!qword_1001E1040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1040);
  }
  return result;
}

unint64_t sub_10001D3E0()
{
  unint64_t result = qword_1001E1050;
  if (!qword_1001E1050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1050);
  }
  return result;
}

unint64_t sub_10001D434()
{
  unint64_t result = qword_1001E1058;
  if (!qword_1001E1058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1058);
  }
  return result;
}

unint64_t sub_10001D488(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

uint64_t sub_10001D4D0(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E10F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_100012D78(a1, a1[3]);
  sub_10001F0AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    sub_10001E410();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v13;
    char v11 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 2;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10001D704()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x13) {
    return 19;
  }
  else {
    return v0;
  }
}

uint64_t sub_10001D758@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E1060);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  v138 = a1;
  sub_100012D78(a1, v9);
  sub_10001D3E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v138);
  }
  char v74 = a2;
  LOBYTE(v96[0]) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  LOBYTE(v96[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v137 = v13 & 1;
  LOBYTE(v96[0]) = 2;
  int v14 = v13;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v70 = v14;
  uint64_t v71 = v15;
  uint64_t v72 = v10;
  LOBYTE(v96[0]) = 3;
  uint64_t v17 = v16;
  swift_bridgeObjectRetain();
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v81 = v17;
  uint64_t v69 = v18;
  LOBYTE(v96[0]) = 4;
  uint64_t v20 = v19;
  swift_bridgeObjectRetain();
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v80 = v20;
  uint64_t v68 = v21;
  LOBYTE(v96[0]) = 5;
  uint64_t v23 = v22;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v79 = v23;
  uint64_t v67 = v24;
  LOBYTE(v96[0]) = 6;
  uint64_t v26 = v25;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v78 = v26;
  uint64_t v28 = v27;
  LOBYTE(v96[0]) = 7;
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v77 = v30;
  uint64_t v66 = v31;
  LOBYTE(v96[0]) = 8;
  uint64_t v33 = v32;
  swift_bridgeObjectRetain();
  uint64_t v65 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v76 = v33;
  LOBYTE(v96[0]) = 9;
  uint64_t v75 = v34;
  swift_bridgeObjectRetain();
  int v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v96[0]) = 10;
  uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v63 = v35;
  LOBYTE(v96[0]) = 11;
  swift_bridgeObjectRetain();
  int v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v96[0]) = 12;
  int v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v96[0]) = 13;
  *(void *)&long long v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)&v59 + 1) = v36;
  LOBYTE(v96[0]) = 14;
  swift_bridgeObjectRetain();
  int v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v96[0]) = 15;
  int v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v82) = 16;
  sub_10001E410();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v56 = LOBYTE(v96[0]);
  LOBYTE(v96[0]) = 17;
  uint64_t v55 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v38 = v37;
  char v130 = 18;
  swift_bridgeObjectRetain();
  uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)&long long v82 = v72;
  *((void *)&v82 + 1) = v12;
  *(void *)&long long v83 = v73;
  BYTE8(v83) = v70 & 1;
  *(void *)&long long v84 = v71;
  *((void *)&v84 + 1) = v81;
  *(void *)&long long v85 = v69;
  *((void *)&v85 + 1) = v80;
  uint64_t v40 = v79;
  *(void *)&long long v86 = v68;
  *((void *)&v86 + 1) = v79;
  *(void *)&long long v87 = v67;
  *((void *)&v87 + 1) = v78;
  *(void *)&long long v88 = v28;
  *((void *)&v88 + 1) = v77;
  *(void *)&long long v89 = v66;
  *((void *)&v89 + 1) = v76;
  *(void *)&long long v90 = v65;
  *((void *)&v90 + 1) = v75;
  LOBYTE(v91) = v64;
  *((void *)&v91 + 1) = v62;
  *(void *)&long long v92 = v63;
  BYTE8(v92) = v61;
  BYTE9(v92) = v60;
  long long v93 = v59;
  LOBYTE(v94) = v58;
  BYTE1(v94) = v57;
  BYTE2(v94) = v56;
  *((void *)&v94 + 1) = v55;
  *(void *)&long long v95 = v38;
  uint64_t v54 = v39;
  *((void *)&v95 + 1) = v39;
  sub_10001E464((uint64_t)&v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = v78;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = v75;
  swift_bridgeObjectRelease();
  uint64_t v43 = v63;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v138);
  v96[0] = v72;
  v96[1] = v12;
  v96[2] = v73;
  char v97 = v137;
  *(_DWORD *)id v98 = *(_DWORD *)v136;
  *(_DWORD *)&v98[3] = *(_DWORD *)&v136[3];
  uint64_t v99 = v71;
  uint64_t v100 = v81;
  uint64_t v101 = v69;
  uint64_t v102 = v80;
  uint64_t v103 = v68;
  uint64_t v104 = v40;
  uint64_t v105 = v67;
  uint64_t v106 = v41;
  uint64_t v107 = v28;
  uint64_t v108 = v77;
  uint64_t v109 = v66;
  uint64_t v110 = v76;
  uint64_t v111 = v65;
  uint64_t v112 = v42;
  char v113 = v64;
  *(_DWORD *)objc_super v114 = *(_DWORD *)v135;
  *(_DWORD *)&v114[3] = *(_DWORD *)&v135[3];
  uint64_t v115 = v62;
  uint64_t v116 = v43;
  char v117 = v61;
  char v118 = v60;
  int v119 = v133;
  __int16 v120 = v134;
  long long v121 = v59;
  char v122 = v58;
  char v123 = v57;
  char v124 = v56;
  char v126 = v132;
  int v125 = v131;
  uint64_t v127 = v55;
  uint64_t v128 = v38;
  uint64_t v129 = v54;
  uint64_t result = sub_10001E534((uint64_t)v96);
  long long v45 = v93;
  NSString v46 = v74;
  v74[10] = v92;
  v46[11] = v45;
  long long v47 = v95;
  v46[12] = v94;
  v46[13] = v47;
  long long v48 = v89;
  v46[6] = v88;
  v46[7] = v48;
  long long v49 = v91;
  v46[8] = v90;
  v46[9] = v49;
  long long v50 = v85;
  v46[2] = v84;
  v46[3] = v50;
  long long v51 = v87;
  v46[4] = v86;
  v46[5] = v51;
  long long v52 = v83;
  *NSString v46 = v82;
  v46[1] = v52;
  return result;
}

unint64_t sub_10001E410()
{
  unint64_t result = qword_1001E1068;
  if (!qword_1001E1068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1068);
  }
  return result;
}

uint64_t sub_10001E464(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001E534(uint64_t a1)
{
  return a1;
}

unint64_t sub_10001E604()
{
  unint64_t result = qword_1001E1080;
  if (!qword_1001E1080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1080);
  }
  return result;
}

unint64_t sub_10001E658()
{
  unint64_t result = qword_1001E1090;
  if (!qword_1001E1090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1090);
  }
  return result;
}

uint64_t sub_10001E6AC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100011ECC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001E718()
{
  unint64_t result = qword_1001E10A0;
  if (!qword_1001E10A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10A0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SKANPostback.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SKANPostback.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001E8C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKANPostback.CodingKeys()
{
  return &type metadata for SKANPostback.CodingKeys;
}

ValueMetadata *type metadata accessor for PostbackFetchResponse.CodingKeys()
{
  return &type metadata for PostbackFetchResponse.CodingKeys;
}

uint64_t destroy for PostbackFetchErrorResponse()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PostbackFetchErrorResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PostbackFetchErrorResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for PostbackFetchErrorResponse(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for PostbackFetchErrorResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackFetchErrorResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackFetchErrorResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackFetchErrorResponse()
{
  return &type metadata for PostbackFetchErrorResponse;
}

uint64_t destroy for PostbackResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PostbackResponseContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PostbackResponseContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for PostbackResponseContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PostbackResponseContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackResponseContainer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackResponseContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackResponseContainer()
{
  return &type metadata for PostbackResponseContainer;
}

unsigned char *sub_10001ED80(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PostbackResponseStatus()
{
  return &type metadata for PostbackResponseStatus;
}

unint64_t sub_10001EDA0()
{
  unint64_t result = qword_1001E10A8;
  if (!qword_1001E10A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10A8);
  }
  return result;
}

unint64_t sub_10001EDF8()
{
  unint64_t result = qword_1001E10B0;
  if (!qword_1001E10B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10B0);
  }
  return result;
}

unint64_t sub_10001EE50()
{
  unint64_t result = qword_1001E10B8;
  if (!qword_1001E10B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10B8);
  }
  return result;
}

unint64_t sub_10001EEA8()
{
  unint64_t result = qword_1001E10C0;
  if (!qword_1001E10C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10C0);
  }
  return result;
}

unint64_t sub_10001EF00()
{
  unint64_t result = qword_1001E10C8;
  if (!qword_1001E10C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10C8);
  }
  return result;
}

unint64_t sub_10001EF58()
{
  unint64_t result = qword_1001E10D0;
  if (!qword_1001E10D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10D0);
  }
  return result;
}

unint64_t sub_10001EFB0()
{
  unint64_t result = qword_1001E10D8;
  if (!qword_1001E10D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10D8);
  }
  return result;
}

unint64_t sub_10001F004()
{
  unint64_t result = qword_1001E10E8;
  if (!qword_1001E10E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10E8);
  }
  return result;
}

unint64_t sub_10001F058()
{
  unint64_t result = qword_1001E10F0;
  if (!qword_1001E10F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E10F0);
  }
  return result;
}

unint64_t sub_10001F0AC()
{
  unint64_t result = qword_1001E1100;
  if (!qword_1001E1100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1100);
  }
  return result;
}

unint64_t sub_10001F100()
{
  unint64_t result = qword_1001E1108;
  if (!qword_1001E1108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1108);
  }
  return result;
}

unint64_t sub_10001F154()
{
  unint64_t result = qword_1001E1118;
  if (!qword_1001E1118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1118);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConversionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s20AttributionKitDaemon21PostbackFetchResponseV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001F304);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackFetchErrorResponse.CodingKeys()
{
  return &type metadata for PostbackFetchErrorResponse.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SystemEnvironment(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s20AttributionKitDaemon22PostbackResponseStatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001F498);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackResponseContainer.CodingKeys()
{
  return &type metadata for PostbackResponseContainer.CodingKeys;
}

unint64_t sub_10001F4D4()
{
  unint64_t result = qword_1001E1128;
  if (!qword_1001E1128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1128);
  }
  return result;
}

unint64_t sub_10001F52C()
{
  unint64_t result = qword_1001E1130;
  if (!qword_1001E1130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1130);
  }
  return result;
}

unint64_t sub_10001F584()
{
  unint64_t result = qword_1001E1138;
  if (!qword_1001E1138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1138);
  }
  return result;
}

unint64_t sub_10001F5DC()
{
  unint64_t result = qword_1001E1140;
  if (!qword_1001E1140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1140);
  }
  return result;
}

unint64_t sub_10001F634()
{
  unint64_t result = qword_1001E1148;
  if (!qword_1001E1148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1148);
  }
  return result;
}

unint64_t sub_10001F68C()
{
  unint64_t result = qword_1001E1150;
  if (!qword_1001E1150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1150);
  }
  return result;
}

uint64_t sub_10001F6F0(unsigned __int8 *a1, char *a2)
{
  return sub_1001087D8(*a1, *a2);
}

Swift::Int sub_10001F6FC()
{
  return sub_100108C14();
}

uint64_t sub_10001F704()
{
  return sub_10010A624();
}

Swift::Int sub_10001F70C()
{
  return sub_10010A748();
}

unint64_t sub_10001F714@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10001FAE0(*a1);
  *a2 = result;
  return result;
}

void sub_10001F744(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xED00006E6F697461;
  uint64_t v3 = 0x7A69726F68747541;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC00000065707954;
      uint64_t v3 = 0x2D746E65746E6F43;
      goto LABEL_3;
    case 2:
      *a1 = 0x6567412D72657355;
      a1[1] = 0xEA0000000000746ELL;
      break;
    case 3:
      *a1 = 0x65676E6152;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 0xD000000000000013;
      a1[1] = 0x8000000100184A60;
      break;
    case 5:
      *a1 = 0x4C2D747065636341;
      a1[1] = 0xEF65676175676E61;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t getEnumTagSinglePayload for HTTPHeader(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HTTPHeader(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001F9A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPHeader()
{
  return &type metadata for HTTPHeader;
}

uint64_t sub_10001F9D8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10001FA38()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_10001FA8C()
{
  unint64_t result = qword_1001E1158;
  if (!qword_1001E1158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1158);
  }
  return result;
}

unint64_t sub_10001FAE0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BFD60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t sub_10001FB2C()
{
  unint64_t result = qword_1001E1160;
  if (!qword_1001E1160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E1160);
  }
  return result;
}

uint64_t sub_10001FB80()
{
  v1[5] = v0;
  v1[6] = type metadata accessor for PostbackFetchTask();
  v1[7] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for URL();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  sub_100012960(&qword_1001E1170);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_10001FCBC, 0, 0);
}

uint64_t sub_10001FCBC()
{
  sub_100012D78((void *)(v0[5] + 152), *(void *)(v0[5] + 176));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001FD64;
  uint64_t v2 = v0[12];
  return sub_100112540(v2, 10);
}

uint64_t sub_10001FD64()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10001FE60, 0, 0);
}

uint64_t sub_10001FE60()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  int v5 = v4(v1, 1, v2);
  uint64_t v6 = v0[13];
  if (v5 == 1)
  {
    URL.init(string:)();
    sub_100020764(v1);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[13], v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[8];
  sub_1000207C4(v0[13], v7);
  if (v4(v7, 1, v8) == 1)
  {
    uint64_t v9 = v0[13];
    sub_100020764(v0[11]);
    sub_10002082C();
    swift_allocError();
    *uint64_t v10 = 0;
    swift_willThrow();
    sub_100020764(v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    uint64_t v13 = v0[10];
    uint64_t v14 = v0[8];
    uint64_t v15 = v0[9];
    uint64_t v17 = (int *)v0[6];
    uint64_t v16 = v0[7];
    uint64_t v18 = v0[5];
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v13, v0[11], v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v16, v13, v14);
    char v19 = *(unsigned char *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v20 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(v18 + 48);
    uint64_t v22 = *(void *)(v18 + 56);
    uint64_t v24 = *(void *)(v18 + 64);
    uint64_t v25 = *(void *)(v18 + 88);
    char v26 = *(unsigned char *)(v18 + 96);
    char v27 = *(unsigned char *)(v18 + 97);
    char v28 = *(unsigned char *)(v18 + 98);
    uint64_t v29 = *(void *)(v18 + 104);
    uint64_t v30 = *(void *)(v18 + 112);
    uint64_t v31 = *(void *)(v18 + 120);
    uint64_t v32 = *(void *)(v18 + 128);
    uint64_t v33 = v16 + v17[5];
    long long v34 = *(_OWORD *)(v18 + 136);
    long long v35 = *(_OWORD *)(v18 + 32);
    long long v36 = *(_OWORD *)(v18 + 72);
    *(void *)uint64_t v33 = *(void *)v18;
    *(unsigned char *)(v33 + 8) = v19;
    *(void *)(v33 + 16) = v21;
    *(void *)(v33 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
    *(_OWORD *)(v33 + 32) = v35;
    *(void *)(v33 + 48) = v23;
    *(void *)(v33 + 56) = v22;
    *(void *)(v33 + 64) = v24;
    *(_OWORD *)(v33 + 72) = v36;
    *(void *)(v33 + 88) = v25;
    *(unsigned char *)(v33 + 96) = v26;
    *(unsigned char *)(v33 + 97) = v27;
    *(unsigned char *)(v33 + 98) = v28;
    *(void *)(v16 + v17[6]) = v29;
    *(void *)(v16 + v17[7]) = v30;
    uint64_t v37 = (void *)(v16 + v17[8]);
    *uint64_t v37 = v31;
    v37[1] = v32;
    *(_OWORD *)(v16 + v17[9]) = v34;
    *(unsigned char *)(v16 + v17[10]) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v38 = (void *)swift_task_alloc();
    v0[15] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_1000201B0;
    return sub_1000630C4();
  }
}

uint64_t sub_1000201B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = v2;
  swift_task_dealloc();
  if (v2) {
    int v5 = sub_1000204E4;
  }
  else {
    int v5 = sub_1000202C8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000202C8()
{
  uint64_t v1 = v0[18];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1000208DC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v3 = v0[16];
  unint64_t v2 = v0[17];
  uint64_t v4 = v0[13];
  if (v1)
  {
    uint64_t v6 = v0[9];
    uint64_t v5 = v0[10];
    uint64_t v8 = v0[7];
    uint64_t v7 = v0[8];
    swift_release();
    sub_100020930(v3, v2);
    sub_100020880(v8);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    sub_100020764(v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v11 = v0[9];
    uint64_t v12 = v0[10];
    uint64_t v14 = v0[7];
    uint64_t v13 = v0[8];
    swift_release();
    sub_100020930(v3, v2);
    sub_100020880(v14);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    sub_100020764(v4);
    uint64_t v15 = v0[2];
    uint64_t v16 = v0[3];
    uint64_t v17 = v0[4];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v18(v15, v16, v17);
  }
}

uint64_t sub_1000204E4()
{
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  sub_100020880(v0[7]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100020764(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000205B0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100020640;
  return sub_10001FB80();
}

uint64_t sub_100020640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  swift_task_dealloc();
  if (!v3)
  {
    uint64_t v10 = *(void **)(v8 + 16);
    *uint64_t v10 = a1;
    v10[1] = a2;
    v10[2] = a3;
  }
  uint64_t v11 = *(uint64_t (**)(void))(v9 + 8);
  return v11();
}

uint64_t sub_100020764(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E1170);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000207C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002082C()
{
  unint64_t result = qword_1001E1178;
  if (!qword_1001E1178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1178);
  }
  return result;
}

uint64_t sub_100020880(uint64_t a1)
{
  uint64_t Task = type metadata accessor for PostbackFetchTask();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Task - 8) + 8))(a1, Task);
  return a1;
}

unint64_t sub_1000208DC()
{
  unint64_t result = qword_1001E1180;
  if (!qword_1001E1180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1180);
  }
  return result;
}

uint64_t sub_100020930(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t destroy for InstallPostbackFetchTask(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 152);
}

uint64_t initializeWithCopy for InstallPostbackFetchTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v6 = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = v6;
  uint64_t v7 = a2 + 152;
  long long v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 176) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(a1 + 152, v7, v9);
  return a1;
}

uint64_t assignWithCopy for InstallPostbackFetchTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(unsigned char *)(a1 + 97) = *((unsigned char *)a2 + 97);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = a2[15];
  *(void *)(a1 + 128) = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  sub_100017B78((uint64_t *)(a1 + 152), a2 + 19);
  return a1;
}

__n128 initializeWithTake for InstallPostbackFetchTask(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for InstallPostbackFetchTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 152);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for InstallPostbackFetchTask(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InstallPostbackFetchTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstallPostbackFetchTask()
{
  return &type metadata for InstallPostbackFetchTask;
}

id sub_100020F1C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RetryCountDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RetryCountDatabaseSession()
{
  return self;
}

void sub_100020F74(uint64_t a1)
{
  long long v3 = v1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SnoutStoryModel();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000152B0(a1, (uint64_t)v11);
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  double v13 = v12 * 1000.0;
  if ((~*(void *)&v13 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v13 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v13 >= 1.84467441e19)
  {
LABEL_10:
    __break(1u);
    return;
  }
  unint64_t v14 = (unint64_t)v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)&v11[*(int *)(v9 + 48)] = v14;
  id v15 = [v3 connection];
  id v16 = sub_100021158((uint64_t)v11, v15);
  if (v2)
  {
    sub_100015314((uint64_t)v11);
  }
  else
  {

    sub_100015314((uint64_t)v11);
  }
}

id sub_100021158(uint64_t a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  sub_1000233F8(a1, v5, (void (*)(void))type metadata accessor for SnoutStoryModel, &qword_1001E0CC0, (void (*)(uint64_t))type metadata accessor for SnoutStoryModel);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      if (*(unsigned char *)(a1 + 8))
      {
        type metadata accessor for SnoutStoryEntity();
        id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v7 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v6 initWithPropertyValues:isa onConnection:v7];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v9 = *(void *)a1;
        type metadata accessor for SnoutStoryEntity();
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v9 onConnection:a2];
        Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v11 = [a2 setValuesWithDictionary:v10];

        if ((v11 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_100021470(long long *a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100023274(a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      sub_10002402C((uint64_t)a1, (uint64_t)v12);
      sub_10002402C((uint64_t)v12, (uint64_t)&v13);
      if (v14)
      {
        type metadata accessor for SoloEventEntity();
        id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v6 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v5 initWithPropertyValues:isa onConnection:v6];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v8 = v13;
        type metadata accessor for SoloEventEntity();
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v8 onConnection:a2];
        Class v9 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v10 = [a2 setValuesWithDictionary:v9];

        if ((v10 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_10002175C(uint64_t a1, void *a2)
{
  return sub_100021788(a1, a2, (void (*)(void))type metadata accessor for PendingImpressionEntity);
}

id sub_100021788(uint64_t a1, id a2, void (*a3)(void))
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v7 = JSONEncoder.init()();
  sub_1000233F8(a1, v7, (void (*)(void))type metadata accessor for ImpressionModel, &qword_1001E1248, (void (*)(uint64_t))type metadata accessor for ImpressionModel);
  swift_release();
  if (!v3)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      if (*(unsigned char *)(a1 + 8))
      {
        a3(0);
        id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v9 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v8 initWithPropertyValues:isa onConnection:v9];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v11 = *(void *)a1;
        a3(0);
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v11 onConnection:a2];
        Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v13 = [a2 setValuesWithDictionary:v12];

        if ((v13 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_100021AAC(uint64_t a1, void *a2)
{
  return sub_100021788(a1, a2, (void (*)(void))type metadata accessor for ImpressionEntity);
}

id sub_100021AD8(void *a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10002356C(v12, a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      sub_10002402C((uint64_t)a1, (uint64_t)v13);
      sub_10002402C((uint64_t)v13, (uint64_t)&v14);
      if (v15)
      {
        type metadata accessor for PostbackEntity();
        id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v6 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v5 initWithPropertyValues:isa onConnection:v6];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v8 = v14;
        type metadata accessor for PostbackEntity();
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v8 onConnection:a2];
        Class v9 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v10 = [a2 setValuesWithDictionary:v9];

        if ((v10 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_100021DC4(long long *a1, id a2)
{
  sub_10002402C((uint64_t)a1, (uint64_t)v12);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000236C4(a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      sub_10002402C((uint64_t)v12, (uint64_t)&v13);
      if (v14)
      {
        type metadata accessor for AppDistributorMetadataEntity();
        id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v6 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v5 initWithPropertyValues:isa onConnection:v6];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v8 = v13;
        type metadata accessor for AppDistributorMetadataEntity();
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v8 onConnection:a2];
        Class v9 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v10 = [a2 setValuesWithDictionary:v9];

        if ((v10 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_1000220AC(uint64_t a1, void *a2)
{
  return sub_100022418(a1, a2, (void (*)(void *__return_ptr, uint64_t, uint64_t))sub_100023814, (void (*)(void))type metadata accessor for RetryCountEntity);
}

id sub_1000220EC(long long *a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10002396C(a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      sub_10002402C((uint64_t)a1, (uint64_t)v12);
      sub_10002402C((uint64_t)v12, (uint64_t)&v13);
      if (v14)
      {
        type metadata accessor for FinalizedTokenEntity();
        id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v6 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v5 initWithPropertyValues:isa onConnection:v6];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v8 = v13;
        type metadata accessor for FinalizedTokenEntity();
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v8 onConnection:a2];
        Class v9 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v10 = [a2 setValuesWithDictionary:v9];

        if ((v10 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_1000223D8(uint64_t a1, void *a2)
{
  return sub_100022418(a1, a2, (void (*)(void *__return_ptr, uint64_t, uint64_t))sub_100023ACC, (void (*)(void))type metadata accessor for AllocatedTokenMetadataEntity);
}

id sub_100022418(uint64_t a1, id a2, void (*a3)(void *__return_ptr, uint64_t, uint64_t), void (*a4)(void))
{
  sub_10002402C(a1, (uint64_t)v18);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v9 = JSONEncoder.init()();
  a3(v17, a1, v9);
  swift_release();
  if (!v4)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      sub_10002402C((uint64_t)v18, (uint64_t)&v19);
      if (v20)
      {
        a4(0);
        id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v11 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v10 initWithPropertyValues:isa onConnection:v11];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v13 = v19;
        a4(0);
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v13 onConnection:a2];
        Class v14 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v15 = [a2 setValuesWithDictionary:v14];

        if ((v15 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_100022714(long long *a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100023C24(a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      sub_10002402C((uint64_t)a1, (uint64_t)v12);
      sub_10002402C((uint64_t)v12, (uint64_t)&v13);
      if (v14)
      {
        type metadata accessor for FrozenImpressionEntity();
        id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v6 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v5 initWithPropertyValues:isa onConnection:v6];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v8 = v13;
        type metadata accessor for FrozenImpressionEntity();
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v8 onConnection:a2];
        Class v9 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v10 = [a2 setValuesWithDictionary:v9];

        if ((v10 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_100022A00(long long *a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100023D7C(a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      sub_10002402C((uint64_t)a1, (uint64_t)v12);
      sub_10002402C((uint64_t)v12, (uint64_t)&v13);
      if (v14)
      {
        type metadata accessor for GhostbackEntity();
        id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v6 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v5 initWithPropertyValues:isa onConnection:v6];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v8 = v13;
        type metadata accessor for GhostbackEntity();
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v8 onConnection:a2];
        Class v9 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v10 = [a2 setValuesWithDictionary:v9];

        if ((v10 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_100022CEC(long long *a1, id a2)
{
  sub_10002402C((uint64_t)a1, (uint64_t)v12);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100023EDC(a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      sub_10002402C((uint64_t)v12, (uint64_t)&v13);
      if (v14)
      {
        type metadata accessor for ItemIdentifierBundleIDMapEntity();
        id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        id v6 = a2;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        a2 = [v5 initWithPropertyValues:isa onConnection:v6];

        if (([a2 existsInDatabase] & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v8 = v13;
        type metadata accessor for ItemIdentifierBundleIDMapEntity();
        a2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPersistentID:v8 onConnection:a2];
        Class v9 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unsigned __int8 v10 = [a2 setValuesWithDictionary:v9];

        if ((v10 & 1) == 0)
        {
LABEL_8:
          type metadata accessor for AKSQLError(0);
          sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
          sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

void sub_100022FD4()
{
  id v1 = [v0 connection];
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v4 = [self predicateWithProperty:v2 equalToValue:v3];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v5 = sub_10011C244(v1, v4, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v5 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_10002428C((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

id XPCClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SnoutDatabaseTransaction()
{
  return self;
}

uint64_t sub_100023274(long long *a1)
{
  long long v2 = a1[11];
  long long v28 = a1[10];
  v29[0] = v2;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a1 + 185);
  long long v3 = a1[7];
  long long v24 = a1[6];
  long long v25 = v3;
  long long v4 = a1[9];
  long long v26 = a1[8];
  long long v27 = v4;
  long long v5 = a1[3];
  long long v20 = a1[2];
  long long v21 = v5;
  long long v6 = a1[5];
  long long v22 = a1[4];
  long long v23 = v6;
  long long v7 = a1[1];
  long long v18 = *a1;
  long long v19 = v7;
  sub_100024094();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v10 = result;
    unint64_t v11 = v9;
    Class v12 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v17 = 0;
    id v14 = [v12 JSONObjectWithData:isa options:4 error:&v17];

    id v15 = v17;
    if (v14)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v10, v11);
      return swift_unknownObjectRelease();
    }
    else
    {
      id v16 = v15;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v10, v11);
    }
  }
  return result;
}

uint64_t sub_1000233F8(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  a3(0);
  sub_10002428C(a4, a5);
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = v9;
    Class v12 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v17 = 0;
    id v14 = [v12 JSONObjectWithData:isa options:4 error:&v17];

    id v15 = v17;
    if (v14)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v10, v11);
      return swift_unknownObjectRelease();
    }
    else
    {
      id v16 = v15;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v10, v11);
    }
  }
  return result;
}

uint64_t sub_10002356C(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  sub_100024238();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v4 = result;
    unint64_t v5 = v3;
    long long v6 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v11 = 0;
    id v8 = [v6 JSONObjectWithData:isa options:4 error:&v11];

    id v9 = v11;
    if (v8)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v4, v5);
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = v9;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v4, v5);
    }
  }
  return result;
}

uint64_t sub_1000236C4(long long *a1)
{
  long long v2 = a1[1];
  long long v14 = *a1;
  long long v15 = v2;
  long long v3 = a1[3];
  long long v16 = a1[2];
  long long v17 = v3;
  sub_1000242D4();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    id v8 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v13 = 0;
    id v10 = [v8 JSONObjectWithData:isa options:4 error:&v13];

    id v11 = v13;
    if (v10)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v6, v7);
      return swift_unknownObjectRelease();
    }
    else
    {
      Class v12 = v11;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v6, v7);
    }
  }
  return result;
}

uint64_t sub_100023814(long long *a1)
{
  long long v2 = a1[1];
  long long v13 = *a1;
  long long v14 = v2;
  long long v15 = a1[2];
  uint64_t v16 = *((void *)a1 + 6);
  sub_10001604C();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4;
    unint64_t v7 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v12 = 0;
    id v9 = [v7 JSONObjectWithData:isa options:4 error:&v12];

    id v10 = v12;
    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v5, v6);
      return swift_unknownObjectRelease();
    }
    else
    {
      id v11 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v5, v6);
    }
  }
  return result;
}

uint64_t sub_10002396C(long long *a1)
{
  long long v2 = a1[5];
  long long v19 = a1[4];
  *(_OWORD *)long long v20 = v2;
  *(_DWORD *)&v20[15] = *(_DWORD *)((char *)a1 + 95);
  long long v3 = a1[1];
  long long v15 = *a1;
  long long v16 = v3;
  long long v4 = a1[3];
  long long v17 = a1[2];
  long long v18 = v4;
  sub_1000241E4();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    id v9 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v14 = 0;
    id v11 = [v9 JSONObjectWithData:isa options:4 error:&v14];

    id v12 = v14;
    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v7, v8);
      return swift_unknownObjectRelease();
    }
    else
    {
      long long v13 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v7, v8);
    }
  }
  return result;
}

uint64_t sub_100023ACC(long long *a1)
{
  long long v2 = a1[1];
  long long v13 = *a1;
  long long v14 = v2;
  long long v15 = a1[2];
  uint64_t v16 = *((void *)a1 + 6);
  sub_1000240E8();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4;
    uint64_t v7 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v12 = 0;
    id v9 = [v7 JSONObjectWithData:isa options:4 error:&v12];

    id v10 = v12;
    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v5, v6);
      return swift_unknownObjectRelease();
    }
    else
    {
      id v11 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v5, v6);
    }
  }
  return result;
}

uint64_t sub_100023C24(long long *a1)
{
  long long v2 = a1[3];
  long long v16 = a1[2];
  long long v17 = v2;
  uint64_t v18 = *((void *)a1 + 8);
  long long v3 = a1[1];
  long long v14 = *a1;
  long long v15 = v3;
  sub_10002413C();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    unint64_t v8 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v13 = 0;
    id v10 = [v8 JSONObjectWithData:isa options:4 error:&v13];

    id v11 = v13;
    if (v10)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v6, v7);
      return swift_unknownObjectRelease();
    }
    else
    {
      id v12 = v11;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v6, v7);
    }
  }
  return result;
}

uint64_t sub_100023D7C(long long *a1)
{
  long long v2 = a1[5];
  long long v20 = a1[4];
  long long v21 = v2;
  long long v3 = a1[7];
  long long v22 = a1[6];
  long long v23 = v3;
  long long v4 = a1[1];
  long long v16 = *a1;
  long long v17 = v4;
  long long v5 = a1[3];
  long long v18 = a1[2];
  long long v19 = v5;
  sub_100024190();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v8 = result;
    unint64_t v9 = v7;
    id v10 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v15 = 0;
    id v12 = [v10 JSONObjectWithData:isa options:4 error:&v15];

    id v13 = v15;
    if (v12)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v8, v9);
      return swift_unknownObjectRelease();
    }
    else
    {
      long long v14 = v13;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v8, v9);
    }
  }
  return result;
}

uint64_t sub_100023EDC(long long *a1)
{
  long long v2 = a1[1];
  long long v13 = *a1;
  long long v14 = v2;
  uint64_t v15 = *((void *)a1 + 4);
  sub_100024328();
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4;
    unint64_t v7 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v12 = 0;
    id v9 = [v7 JSONObjectWithData:isa options:4 error:&v12];

    id v10 = v12;
    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100020930(v5, v6);
      return swift_unknownObjectRelease();
    }
    else
    {
      id v11 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100020930(v5, v6);
    }
  }
  return result;
}

uint64_t sub_10002402C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100024094()
{
  unint64_t result = qword_1001E1218;
  if (!qword_1001E1218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1218);
  }
  return result;
}

unint64_t sub_1000240E8()
{
  unint64_t result = qword_1001E1220;
  if (!qword_1001E1220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1220);
  }
  return result;
}

unint64_t sub_10002413C()
{
  unint64_t result = qword_1001E1228;
  if (!qword_1001E1228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1228);
  }
  return result;
}

unint64_t sub_100024190()
{
  unint64_t result = qword_1001E1230;
  if (!qword_1001E1230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1230);
  }
  return result;
}

unint64_t sub_1000241E4()
{
  unint64_t result = qword_1001E1238;
  if (!qword_1001E1238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1238);
  }
  return result;
}

unint64_t sub_100024238()
{
  unint64_t result = qword_1001E1240;
  if (!qword_1001E1240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1240);
  }
  return result;
}

uint64_t sub_10002428C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000242D4()
{
  unint64_t result = qword_1001E1250;
  if (!qword_1001E1250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1250);
  }
  return result;
}

unint64_t sub_100024328()
{
  unint64_t result = qword_1001E1258;
  if (!qword_1001E1258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1258);
  }
  return result;
}

uint64_t sub_10002437C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1000243C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  long long v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  v14[5] = a3;
  v14[6] = a4;
  v14[7] = a5;
  v14[8] = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  id v15 = a1;
  uint64_t v16 = sub_100017E98((uint64_t)v12, (uint64_t)&unk_1001E12D8, (uint64_t)v14);
  long long v17 = (void *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  void v17[4] = v16;
  aBlock[4] = sub_100024E14;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002437C;
  aBlock[3] = &unk_1001C3078;
  long long v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v15 setExpirationHandler:v18];
  _Block_release(v18);
  return swift_release();
}

uint64_t sub_1000245BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  void v8[6] = a6;
  void v8[4] = a4;
  return _swift_task_switch(sub_1000245E4, 0, 0);
}

uint64_t sub_1000245E4()
{
  id v12 = v0;
  if (qword_1001E0920 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[9] = sub_100012E74(v1, (uint64_t)qword_1001E6088);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[5];
  if (v4)
  {
    uint64_t v6 = v0[4];
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[3] = sub_100147668(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Begin task for identifier: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = (uint64_t (*)(void))(v0[6] + *(int *)v0[6]);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  void *v8 = v0;
  v8[1] = sub_10002484C;
  return v10();
}

uint64_t sub_10002484C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100024948, 0, 0);
}

uint64_t sub_100024948()
{
  uint64_t v9 = v0;
  [*(id *)(v0 + 64) setTaskCompleted];
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = *(void *)(v0 + 32);
    unint64_t v3 = *(void *)(v0 + 40);
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = sub_100147668(v4, v3, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Task completed for identifier: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100024AF0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100024B40()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 40);
  long long v5 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100012AB8;
  *(_OWORD *)(v3 + 56) = v5;
  *(_OWORD *)(v3 + 40) = v4;
  *(void *)(v3 + 32) = v2;
  return _swift_task_switch(sub_1000245E4, 0, 0);
}

void sub_100024BFC(uint64_t a1, unint64_t a2)
{
  if (qword_1001E0920 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100012E74(v4, (uint64_t)qword_1001E6088);
  swift_bridgeObjectRetain_n();
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_100147668(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "System requested task expiration for identifier: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Task.cancel()();
}

uint64_t sub_100024DD4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100024E14()
{
  sub_100024BFC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100024E20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100024E30()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for BackgroundSystemTaskScheduler()
{
  return &type metadata for BackgroundSystemTaskScheduler;
}

uint64_t sub_100024E48(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  type metadata accessor for MainActor();
  v3[19] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[20] = v5;
  v3[21] = v4;
  return _swift_task_switch(sub_100024EE4, v5, v4);
}

uint64_t sub_100024EE4()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = v0[16];
  type metadata accessor for _ASCLockupKey(0);
  sub_100025244();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v0[22] = isa;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100025028;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10002529C;
  v0[13] = &unk_1001C3110;
  v0[14] = v4;
  [v1 _lockupDictionaryForRequest:v2 includingKeys:isa withCompletionBlock:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100025028()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 184) = v2;
  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 160);
  if (v2) {
    uint64_t v5 = sub_1000251CC;
  }
  else {
    uint64_t v5 = sub_100025158;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100025158()
{
  uint64_t v1 = (void *)v0[22];
  swift_release();
  uint64_t v2 = v0[15];

  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_1000251CC()
{
  uint64_t v1 = *(void **)(v0 + 176);
  swift_release();
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

unint64_t sub_100025244()
{
  unint64_t result = qword_1001E0BE0;
  if (!qword_1001E0BE0)
  {
    type metadata accessor for _ASCLockupKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E0BE0);
  }
  return result;
}

uint64_t sub_10002529C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100012960(&qword_1001E12E8);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    type metadata accessor for _ASCLockupKey(0);
    sub_100025244();
    **(void **)(*(void *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100025380(uint64_t a1)
{
  *(void *)(v1 + 592) = a1;
  return _swift_task_switch(sub_100025410, 0, 0);
}

uint64_t sub_100025410()
{
  uint64_t v71 = v0;
  uint64_t v1 = v0 + 10;
  uint64_t v2 = v0 + 63;
  uint64_t v66 = v0 + 68;
  uint64_t v3 = v0[74];
  unint64_t v4 = (unint64_t)_swiftEmptyArrayStorage;
  v0[72] = _swiftEmptyArrayStorage;
  uint64_t v5 = (void *)&unk_1001E0000;
  uint64_t v69 = *(void *)(v3 + 16);
  if (v69)
  {
    uint64_t v65 = v0 + 72;
    uint64_t v67 = (id *)(v0 + 73);
    uint64_t v68 = v3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    uint64_t v62 = v0 + 10;
    uint64_t v63 = v0;
    while (1)
    {
      sub_100029CD8(v68 + 40 * v6, (uint64_t)v2);
      uint64_t v10 = sub_100012D78(v2, v0[66]);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      memcpy(__dst, v10, sizeof(__dst));
      memcpy(v1, __dst, 0x1A1uLL);
      sub_100029D3C();
      uint64_t v14 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v16 = v15;
      long long v17 = self;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      *uint64_t v67 = 0;
      id v19 = [v17 JSONObjectWithData:isa options:4 error:v67];

      id v20 = *v67;
      if (v19) {
        break;
      }
      long long v34 = v20;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100020930(v14, v16);
      uint64_t v5 = &unk_1001E0000;
      swift_release();
      if (qword_1001E0918 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_100012E74(v11, (uint64_t)qword_1001E6070);
      swift_errorRetain();
      swift_errorRetain();
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v12, v13))
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
LABEL_10:

        goto LABEL_4;
      }
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v7 + 4) = v9;
      void *v8 = v9;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error encoding metrics event: %@", (uint8_t *)v7, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
LABEL_4:
      ++v6;
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v2);
      if (v6 == v69)
      {
        swift_bridgeObjectRelease();
        unint64_t v4 = v0[72];
        goto LABEL_44;
      }
    }
    _bridgeAnyObjectToAny(_:)();
    sub_100020930(v14, v16);
    swift_unknownObjectRelease();
    swift_release();
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      id v21 = objc_allocWithZone((Class)AMSMetricsEvent);
      Class v22 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v21 initWithUnderlyingDictionary:v22];

      uint64_t v5 = (void *)&unk_1001E0000;
      if (sub_100012D78(v2, v0[66])[3]) {
        objc_msgSend(v23, "setEventTime:");
      }
      if (sub_100012D78(v2, v0[66])[1])
      {
        swift_bridgeObjectRetain();
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v23 setDiagnosticsSubmissionBugType:v24];
      }
      int v25 = *((unsigned __int8 *)sub_100012D78(v2, v0[66]) + 16);
      if (v25 != 2) {
        [v23 setPreventSampling:v25 & 1];
      }
      [v23 setAnonymous:1];
      uint64_t v26 = sub_100012D78(v2, v0[66])[4];
      if (v26)
      {
        int64_t v27 = *(void *)(v26 + 16);
        if (v27)
        {
          id v64 = v23;
          swift_bridgeObjectRetain();
          sub_10013A5D0(0, v27, 0);
          uint64_t v28 = 0;
          do
          {
            unint64_t v29 = 0xE300000000000000;
            uint64_t v30 = 7368801;
            switch(*(unsigned char *)(v26 + v28 + 32))
            {
              case 1:
                unint64_t v29 = 0xEA00000000006E6FLL;
                uint64_t v30 = 0x6973726556707061;
                break;
              case 2:
                unint64_t v29 = 0xEB000000006E6F69;
                uint64_t v30 = 0x7372655665736162;
                break;
              case 3:
                unint64_t v29 = 0xEC0000006E6F6973;
                uint64_t v30 = 0x726556746E657665;
                break;
              case 4:
                unint64_t v29 = 0xEE006E6F69737265;
                uint64_t v30 = 0x56646C697542736FLL;
                break;
              case 5:
                unint64_t v29 = 0xE600000000000000;
                uint64_t v30 = 0x656D614E736FLL;
                break;
              case 6:
                unint64_t v29 = 0xE90000000000006ELL;
                uint64_t v30 = 0x6F6973726556736FLL;
                break;
              case 7:
                unint64_t v29 = 0xEE0074657366664FLL;
                uint64_t v30 = 0x656E6F7A656D6974;
                break;
              default:
                break;
            }
            unint64_t v32 = _swiftEmptyArrayStorage[2];
            unint64_t v31 = _swiftEmptyArrayStorage[3];
            if (v32 >= v31 >> 1) {
              sub_10013A5D0(v31 > 1, v32 + 1, 1);
            }
            ++v28;
            _swiftEmptyArrayStorage[2] = v32 + 1;
            uint64_t v33 = &_swiftEmptyArrayStorage[2 * v32];
            v33[4] = v30;
            v33[5] = v29;
          }
          while (v27 != v28);
          swift_bridgeObjectRelease();
          uint64_t v1 = v62;
          uint64_t v0 = v63;
          uint64_t v5 = (void *)&unk_1001E0000;
          id v23 = v64;
        }
        sub_10011E858((uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
        Class v38 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v23 removePropertiesForKeys:v38];
      }
      id v39 = v23;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_4;
    }
    uint64_t v5 = &unk_1001E0000;
    if (qword_1001E0918 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100012E74(v35, (uint64_t)qword_1001E6070);
    id v12 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v36, "Failed to get dictionary for event", v37, 2u);
      swift_slowDealloc();
    }
    goto LABEL_10;
  }
LABEL_44:
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v55) {
      goto LABEL_46;
    }
  }
  else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_46:
    if (v5[291] != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    v0[75] = sub_100012E74(v40, (uint64_t)qword_1001E6070);
    unint64_t v41 = v0[72];
    swift_bridgeObjectRetain_n();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v44 = 134217984;
      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v45 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v0[10] = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Enqueueing %ld events", v44, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    NSString v46 = String._bridgeToObjectiveC()();
    NSString v47 = String._bridgeToObjectiveC()();
    id v48 = [self bagForProfile:v46 profileVersion:v47];

    id v49 = objc_allocWithZone((Class)AMSMetrics);
    NSString v50 = String._bridgeToObjectiveC()();
    id v51 = [v49 initWithContainerID:v50 bag:v48];
    v0[76] = v51;

    swift_beginAccess();
    sub_100029D90();
    Class v52 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v53 = [v51 promiseForEnqueueingEvents:v52];
    v0[77] = v53;

    v0[2] = v0;
    v0[7] = v66;
    v0[3] = sub_1000260BC;
    uint64_t v54 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100026CA4;
    v0[13] = &unk_1001C3128;
    v0[14] = v54;
    [v53 resultWithCompletion:v1];
    return _swift_continuation_await(v0 + 2);
  }
  swift_bridgeObjectRelease();
  if (v5[291] != -1) {
    swift_once();
  }
  uint64_t v56 = type metadata accessor for Logger();
  sub_100012E74(v56, (uint64_t)qword_1001E6070);
  int v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    long long v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "No events to flush", v59, 2u);
    swift_slowDealloc();
  }

  int v60 = (uint64_t (*)(void))v0[1];
  return v60();
}

uint64_t sub_1000260BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 6++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1;
  if (v1) {
    uint64_t v2 = sub_10002628C;
  }
  else {
    uint64_t v2 = sub_1000261F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000261F8()
{
  uint64_t v1 = *(void **)(v0 + 616);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10002628C()
{
  uint64_t v1 = *(void **)(v0 + 616);
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 608);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to enqueue events to AMS: %@", v5, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100026494(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return _swift_task_switch(sub_1000264B4, 0, 0);
}

uint64_t sub_1000264B4()
{
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self bagForProfile:v1 profileVersion:v2];

  id v4 = objc_allocWithZone((Class)AMSMetrics);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithContainerID:v5 bag:v3];
  v0[18] = v6;

  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 flushTopic:v7];
  v0[19] = v8;

  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000266C0;
  uint64_t v9 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100026D58;
  v0[13] = &unk_1001C3140;
  v0[14] = v9;
  [v8 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000266C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    NSString v2 = sub_100026A80;
  }
  else {
    NSString v2 = sub_1000267D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000267D0()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void **)(v0 + 120);

  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E6070);
  id v3 = v1;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  NSString v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v9 = *(void *)(v0 + 136);
  id v8 = *(void **)(v0 + 144);
  if (v7)
  {
    uint64_t v15 = *(void *)(v0 + 128);
    unint64_t v16 = *(void **)(v0 + 144);
    uint64_t v10 = swift_slowAlloc();
    os_log_type_t v13 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412546;
    *(void *)(v0 + 80) = v4;
    log = v5;
    NSString v5 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v4;

    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = sub_100147668(v15, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v6, "Flushed %@ events to %s", (uint8_t *)v10, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100026A80()
{
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E6070);
  swift_errorRetain();
  swift_errorRetain();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v10 = *(void **)(v0 + 144);
    NSString v5 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)NSString v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to enqueue events to AMS: %@", v5, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  id v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100026CA4(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100012960(&qword_1001E12E8);
    uint64_t v5 = swift_allocError();
    *os_log_type_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100026D58(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100012960(&qword_1001E12E8);
    uint64_t v5 = swift_allocError();
    *os_log_type_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_100026E18(unsigned __int8 *a1, char *a2)
{
  return sub_100104CA8(*a1, *a2);
}

Swift::Int sub_100026E24()
{
  return sub_10010BA40();
}

uint64_t sub_100026E30()
{
  return sub_1001097E4();
}

Swift::Int sub_100026E38()
{
  return sub_10010BA40();
}

unint64_t sub_100026E40@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100029F3C(*a1);
  *a2 = result;
  return result;
}

void sub_100026E70(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7368801;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006E6FLL;
      uint64_t v3 = 0x6973726556707061;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x7372655665736162;
      *(void *)(a1 + 8) = 0xEB000000006E6F69;
      break;
    case 3:
      strcpy((char *)a1, "eventVersion");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 4:
      strcpy((char *)a1, "osBuildVersion");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 5:
      *(void *)a1 = 0x656D614E736FLL;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 6:
      *(void *)a1 = 0x6F6973726556736FLL;
      *(void *)(a1 + 8) = 0xE90000000000006ELL;
      break;
    case 7:
      strcpy((char *)a1, "timezoneOffset");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_100026FB0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100026FE0(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    id v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100028058(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100027190(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Calendar.Component();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100029C94(&qword_1001E1300);
  swift_bridgeObjectRetain();
  long long v34 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v33 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    unint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v12;
    uint64_t v28 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v32 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v27[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v32 * v13;
      unint64_t v20 = *(void *)(v10 + 48) + v32 * v13;
      uint64_t v21 = v14;
      v14(v9, v20, v6);
      sub_100029C94(&qword_1001E1308);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v23 = *v17;
      (*v17)(v9, v6);
      if (v22) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v31;
      uint64_t v14 = v21;
      uint64_t v10 = v18;
      if (((*(void *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v25 = v34;
    v14(v9, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000281F4((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_10002748C(unsigned char *a1, char a2)
{
  unint64_t v4 = 0xEA00000000006E6FLL;
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  unsigned int v18 = a2 & 1;
  if (a2) {
    uint64_t v6 = 0x69746375646F7270;
  }
  else {
    uint64_t v6 = 0x6D706F6C65766564;
  }
  if ((a2 & 1) == 0) {
    unint64_t v4 = 0xEB00000000746E65;
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      uint64_t v11 = *(unsigned char *)(*(void *)(v5 + 48) + v9) ? 0x69746375646F7270 : 0x6D706F6C65766564;
      unint64_t v12 = *(unsigned char *)(*(void *)(v5 + 48) + v9) ? 0xEA00000000006E6FLL : 0xEB00000000746E65;
      if (v11 == v6 && v12 == v4) {
        break;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_22;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v16 = *(unsigned char *)(*(void *)(*v19 + 48) + v9);
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v19;
    *unint64_t v19 = 0x8000000000000000;
    char v16 = v18;
    sub_10002846C(v18, v9, isUniquelyReferenced_nonNull_native);
    *unint64_t v19 = v21;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = v16;
  return result;
}

uint64_t sub_10002768C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100012960(&qword_1001E1338);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10002796C()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Calendar.Component();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100012960(&qword_1001E1310);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100029C94(&qword_1001E1300);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100027D54()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100012960(&qword_1001E1340);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      char v19 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v4 + 48) + v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_100028058(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10002768C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100028690();
      goto LABEL_22;
    }
    sub_100028C7C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1000281F4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Calendar.Component();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10002796C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100028844();
      goto LABEL_12;
    }
    sub_100028F2C();
  }
  uint64_t v12 = *v3;
  sub_100029C94(&qword_1001E1300);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100029C94(&qword_1001E1308);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10002846C(Swift::Int result, unint64_t a2, char a3)
{
  int v5 = result & 1;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  char v22 = result & 1;
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_25;
  }
  if (a3)
  {
    sub_100027D54();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100028AE8();
      goto LABEL_25;
    }
    sub_1000292C8();
  }
  uint64_t v8 = 0x6D706F6C65766564;
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  if (v5)
  {
    uint64_t v8 = 0x69746375646F7270;
    unint64_t v10 = 0xEA00000000006E6FLL;
  }
  else
  {
    unint64_t v10 = 0xEB00000000746E65;
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = ~v11;
    do
    {
      uint64_t v13 = *(unsigned char *)(*(void *)(v9 + 48) + a2) ? 0x69746375646F7270 : 0x6D706F6C65766564;
      unint64_t v14 = *(unsigned char *)(*(void *)(v9 + 48) + a2) ? 0xEA00000000006E6FLL : 0xEB00000000746E65;
      if (v13 == v8 && v14 == v10) {
        goto LABEL_28;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_29;
      }
      a2 = (a2 + 1) & v12;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_25:
  uint64_t v17 = *v21;
  *(void *)(*v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v17 + 48) + a2) = v22;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v17 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_28:
  swift_bridgeObjectRelease_n();
LABEL_29:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100028690()
{
  uint64_t v1 = v0;
  sub_100012960(&qword_1001E1338);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100028844()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012960(&qword_1001E1310);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100028AE8()
{
  uint64_t v1 = v0;
  sub_100012960(&qword_1001E1340);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100028C7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100012960(&qword_1001E1338);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100028F2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100012960(&qword_1001E1310);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100029C94(&qword_1001E1300);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000292C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100012960(&qword_1001E1340);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    char v19 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(unsigned char *)(*(void *)(v4 + 48) + v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100029598(uint64_t a1)
{
  v24[1] = a1;
  uint64_t v1 = type metadata accessor for Calendar.Component();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  v24[0] = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v24 - v6;
  __chkstk_darwin(v5);
  int64_t v9 = (char *)v24 - v8;
  sub_100012960(&qword_1001E12F8);
  uint64_t v10 = *(void *)(v2 + 72);
  unint64_t v11 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100177610;
  uint64_t v25 = v12;
  unint64_t v13 = v12 + v11;
  unint64_t v14 = *(void (**)(unint64_t, void, uint64_t))(v2 + 104);
  v14(v12 + v11, enum case for Calendar.Component.year(_:), v1);
  v14(v13 + v10, enum case for Calendar.Component.month(_:), v1);
  v14(v13 + 2 * v10, enum case for Calendar.Component.day(_:), v1);
  v14(v13 + 3 * v10, enum case for Calendar.Component.hour(_:), v1);
  v14(v13 + 4 * v10, enum case for Calendar.Component.minute(_:), v1);
  v14(v13 + 5 * v10, enum case for Calendar.Component.second(_:), v1);
  uint64_t v15 = v10;
  uint64_t result = ((uint64_t (*)(unint64_t, void, uint64_t))v14)(v13 + 6 * v10, enum case for Calendar.Component.nanosecond(_:), v1);
  unint64_t v17 = 0;
  uint64_t v26 = &_swiftEmptySetSingleton;
  int64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  char v19 = (void (**)(char *, uint64_t))(v2 + 8);
  while (v17 < *(void *)(v25 + 16))
  {
    uint64_t v20 = *v18;
    (*v18)(v9, v13, v1);
    unint64_t v21 = (char *)v24[0];
    v20((char *)v24[0], (unint64_t)v9, v1);
    sub_100027190((uint64_t)v7, v21);
    unint64_t v22 = *v19;
    (*v19)(v7, v1);
    LOBYTE(v20) = static Calendar.Component.== infix(_:_:)();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v9, v1);
    if ((v20 & 1) == 0)
    {
      v13 += v15;
      if (v17++ != 6) {
        continue;
      }
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v26;
  }
  __break(1u);
  return result;
}

id sub_1000298BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100012960(&qword_1001E12F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v23 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Calendar();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DateComponents();
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  sub_100029598(a2);
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  int64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, v9);
  static Calendar.current.getter();
  Calendar.date(from:)();
  v16(v12, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
    sub_100029C34((uint64_t)v5);
    return 0;
  }
  else
  {
    int64_t v18 = v23;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v5, v6);
    char v19 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v21 = [v19 serverTimeFromDate:isa];

    id v17 = [v21 unsignedLongLongValue];
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  }
  return v17;
}

uint64_t sub_100029C34(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E12F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100029C94(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Calendar.Component();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100029CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100029D3C()
{
  unint64_t result = qword_1001E1320;
  if (!qword_1001E1320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1320);
  }
  return result;
}

unint64_t sub_100029D90()
{
  unint64_t result = qword_1001E1328;
  if (!qword_1001E1328)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1001E1328);
  }
  return result;
}

ValueMetadata *type metadata accessor for Metrics()
{
  return &type metadata for Metrics;
}

unsigned char *storeEnumTagSinglePayload for Metrics.AMSBaseProperties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100029EACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Metrics.AMSBaseProperties()
{
  return &type metadata for Metrics.AMSBaseProperties;
}

unint64_t sub_100029EE8()
{
  unint64_t result = qword_1001E1348;
  if (!qword_1001E1348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1348);
  }
  return result;
}

unint64_t sub_100029F3C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BFE88, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

double sub_100029F88@<D0>(const char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, void *a10)
{
  LODWORD(v34) = a7;
  uint64_t v42 = a9;
  uint64_t v17 = sub_100012960(&qword_1001E0EE0);
  __chkstk_darwin(v17 - 8);
  char v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002AE38(a8, (uint64_t)v19);
  sub_10002AE10(a4, a5, a6);
  uint64_t v20 = sub_10002A4A8(a1, a2, a3, a4, a5, a6, v34, (uint64_t)v19, a10);
  unint64_t v22 = v21;
  uint64_t v24 = v23;
  if (qword_1001E0888 != -1) {
    swift_once();
  }
  *(void *)&long long v36 = v20;
  *((void *)&v36 + 1) = v22;
  *(void *)&long long v37 = v24;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100012960(&qword_1001E1360);
  swift_task_localValuePush();
  uint64_t v25 = v35;
  sub_10002AF80(a4, a5, a6, v22, (uint64_t)&v36);
  if (v25)
  {
    swift_task_localValuePop();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    long long v34 = v37;
    long long v35 = v36;
    long long v32 = v39;
    long long v33 = v38;
    long long v31 = v40;
    uint64_t v27 = v41;
    swift_task_localValuePop();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v28 = v42;
    long long v29 = v34;
    *uint64_t v42 = v35;
    v28[1] = v29;
    long long v30 = v32;
    v28[2] = v33;
    void v28[3] = v30;
    double result = *(double *)&v31;
    v28[4] = v31;
    *((void *)v28 + 10) = v27;
  }
  return result;
}

uint64_t sub_10002A1B8()
{
  sub_100012960(&qword_1001E1350);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  qword_1001E5F58 = result;
  return result;
}

uint64_t sub_10002A210()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002ADAC(v0, qword_1001E5F60);
  sub_100012E74(v0, (uint64_t)qword_1001E5F60);
  Logger.aakSubsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

void sub_10002A290(uint64_t a1, unint64_t a2)
{
  sub_10002A88C((uint64_t)"No activity to associate LogKey with", 36, 2);
  if (qword_1001E0890 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100012E74(v4, (uint64_t)qword_1001E5F60);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_100147668(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Activity associated with %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10002A44C()
{
  return 0;
}

uint64_t sub_10002A454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002A46C(a1, a2);
}

uint64_t sub_10002A46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a2 + 16) = v4;
  return sub_10002AE10(v3, v2, v4);
}

os_activity_scope_state_s *sub_10002A4A8(const char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t a8, void *a9)
{
  uint64_t v36 = a2;
  uint64_t v37 = a5;
  int v39 = a3;
  long long v38 = a1;
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v40 - 8);
  uint64_t v14 = __chkstk_darwin(v40);
  long long v35 = &v31[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v17 = &v31[-v16];
  uint64_t v18 = sub_100012960(&qword_1001E0EE0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = &v31[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v21 = 0;
  if (a7)
  {
    type metadata accessor for LogActivity();
    id v21 = (os_activity_scope_state_s *)swift_allocObject();
    unint64_t v22 = sub_100110668(v38, v39, a9);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    os_activity_scope_enter(v22, &state);
    swift_unknownObjectRelease();
    v21[1] = state;
  }
  if (qword_1001E0888 != -1) {
    swift_once();
  }
  TaskLocal.get()();
  uint64_t v23 = (os_unfair_lock_s *)state.opaque[1];
  if (state.opaque[1])
  {
    swift_release();
    uint64_t v24 = swift_release();
    if ((_BYTE)a6 != 0xFF)
    {
      long long v33 = v31;
      __chkstk_darwin(v24);
      uint64_t v25 = v37;
      *(void *)&v31[-32] = a4;
      *(void *)&v31[-24] = v25;
      v31[-16] = a6 & 1;
      int v32 = a6;
      uint64_t v34 = v13;
      swift_retain();
      os_unfair_lock_lock(v23 + 9);
      sub_10002AF00((uint64_t)&v23[4]);
      uint64_t v13 = v34;
      os_unfair_lock_unlock(v23 + 9);
      swift_release();
      sub_10002AF68(a4, v25, v32);
    }
  }
  else
  {
    sub_100012960(&qword_1001E1358);
    uint64_t v26 = swift_allocObject();
    *(_DWORD *)(v26 + 36) = 0;
    uint64_t v27 = v37;
    *(void *)(v26 + 16) = a4;
    *(void *)(v26 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v27;
    *(unsigned char *)(v26 + 32) = a6;
  }
  sub_10002AE38(a8, (uint64_t)v20);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v20, 1, v40) != 1)
  {
    uint64_t v28 = v40;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v17, v20, v40);
    uint64_t v29 = (uint64_t)v35;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 16))(v35, v17, v28);
    type metadata accessor for SignpostInterval();
    swift_allocObject();
    sub_1000C4A54((const char *)v38, v36, v39, v29);
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v17, v28);
  }
  sub_10002AEA0(a8);
  return v21;
}

uint64_t sub_10002A88C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001E0888 != -1) {
    swift_once();
  }
  TaskLocal.get()();
  if (v18[1])
  {
    uint64_t v8 = v18[0];
    swift_release();
    swift_release();
    if (v8) {
      return swift_release();
    }
  }
  uint64_t v10 = Logger.general.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v16[3] = a3;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v14 = StaticString.description.getter();
    uint64_t v17 = sub_100147668(v14, v15, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10002AB04(uint64_t a1, unint64_t a2, char a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    sub_10002A290(a1, a2);
    sub_10002AD9C(a1, a2, 1);
  }
  else
  {
    sub_10002A88C((uint64_t)"No activity to associate LogKey with", 36, 2);
    if (qword_1001E0890 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100012E74(v4, (uint64_t)qword_1001E5F60);
    sub_10002A44C();
    sub_10002A44C();
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315650;
      if ((_BYTE)a1)
      {
        if (a1 == 1) {
          uint64_t v7 = 4931905;
        }
        else {
          uint64_t v7 = 1162891086;
        }
        if (a1 == 1) {
          unint64_t v8 = 0xE300000000000000;
        }
        else {
          unint64_t v8 = 0xE400000000000000;
        }
      }
      else
      {
        unint64_t v8 = 0xE300000000000000;
        uint64_t v7 = 5129543;
      }
      sub_100147668(v7, v8, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 1040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 18) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Activity associated with %s%.*X", (uint8_t *)v6, 0x18u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_10002AD9C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_10002ADAC(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10002AE10(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10002AE28(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10002AE28(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10002AE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E0EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002AEA0(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E0EE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002AF00(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  char v5 = *(unsigned char *)(v1 + 32);
  sub_10002AF68(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return sub_10002AE28(v3, v4, v5);
}

uint64_t sub_10002AF68(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10002AD9C(result, a2, a3 & 1);
  }
  return result;
}

void sub_10002AF80(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, os_unfair_lock_s *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  if (a3 != 0xFF)
  {
    uint64_t v11 = a1;
    unint64_t v12 = a2;
    unsigned __int8 v13 = a3;
LABEL_6:
    sub_10002AE10(a1, a2, a3);
    sub_10002AB04(v11, v12, v13 & 1);
    uint64_t v16 = sub_10002AD9C(v11, v12, v13 & 1);
    goto LABEL_7;
  }
  uint64_t v14 = (uint64_t)&a4[4];
  unint64_t v15 = a4 + 9;
  os_unfair_lock_lock(a4 + 9);
  sub_10002A454(v14, (uint64_t)v22);
  if (v5)
  {
    os_unfair_lock_unlock(v15);
    __break(1u);
    return;
  }
  uint64_t v6 = 0;
  os_unfair_lock_unlock(v15);
  unsigned __int8 v13 = v23;
  if (v23 != 255)
  {
    uint64_t v11 = v22[0];
    unint64_t v12 = v22[1];
    goto LABEL_6;
  }
LABEL_7:
  sub_100018668(v16);
  if (!v6)
  {
    uint64_t v17 = v29;
    long long v18 = v25;
    long long v19 = v26;
    long long v20 = v27;
    long long v21 = v28;
    *(_OWORD *)a5 = v24;
    *(_OWORD *)(a5 + 16) = v18;
    *(_OWORD *)(a5 + 32) = v19;
    *(_OWORD *)(a5 + 48) = v20;
    *(_OWORD *)(a5 + 64) = v21;
    *(void *)(a5 + 80) = v17;
  }
}

uint64_t destroy for TaskLocalContext()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *_s20AttributionKitDaemon16TaskLocalContextVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for TaskLocalContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TaskLocalContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RetryCountDatabaseStore(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RetryCountDatabaseStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskLocalContext()
{
  return &type metadata for TaskLocalContext;
}

uint64_t destroy for DeveloperModeManager(uint64_t a1)
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DeveloperModeManager(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for DeveloperModeManager(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DeveloperModeManager(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DeveloperModeManager(uint64_t a1, uint64_t a2)
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeveloperModeManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeveloperModeManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeveloperModeService()
{
  return &type metadata for DeveloperModeService;
}

uint64_t sub_10002B478()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  long long v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Logger.developerMode.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[DeveloperModeService] Get developer mode", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v8 = [self standardUserDefaults];
  uint64_t v9 = swift_bridgeObjectRetain();
  char v10 = sub_10008A018(v9, v8);
  swift_bridgeObjectRelease();

  return v10 & 1;
}

void sub_10002B630(char a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.developerMode.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109120;
    v10[3] = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[DeveloperModeService] Set developer mode to: %{BOOL}d", v9, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100087D78(a1 & 1);
}

uint64_t sub_10002B7D4(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_10002B800(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002B828@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

BOOL sub_10002B858(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10002B86C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002B8B4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10002B8E0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002B924()
{
  qword_1001E5F78 = (uint64_t)&off_1001BFF68;
}

void sub_10002B938()
{
  qword_1001E5F80 = (uint64_t)&off_1001BFFA8;
}

uint64_t sub_10002B94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[503] = v5;
  v6[497] = a5;
  v6[491] = a4;
  v6[485] = a3;
  v6[479] = a2;
  v6[473] = a1;
  uint64_t v7 = sub_100012960(&qword_1001E1370);
  v6[509] = v7;
  v6[515] = *(void *)(v7 - 8);
  v6[521] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[527] = v8;
  v6[533] = *(void *)(v8 - 8);
  v6[539] = swift_task_alloc();
  v6[540] = swift_task_alloc();
  v6[541] = swift_task_alloc();
  v6[542] = swift_task_alloc();
  v6[543] = swift_task_alloc();
  return _swift_task_switch(sub_10002BAB4, 0, 0);
}

uint64_t sub_10002BAB4()
{
  uint64_t v1 = *(void *)(v0 + 4024);
  sub_1000370C8(v1, v0 + 3160);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 4352) = v2;
  long long v3 = *(_OWORD *)(v0 + 3240);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(v0 + 3224);
  *(_OWORD *)(v2 + 96) = v3;
  *(void *)(v2 + 112) = *(void *)(v0 + 3256);
  long long v4 = *(_OWORD *)(v0 + 3176);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 3160);
  *(_OWORD *)(v2 + 32) = v4;
  long long v5 = *(_OWORD *)(v0 + 3208);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v0 + 3192);
  *(_OWORD *)(v2 + 64) = v5;
  swift_retain();
  swift_asyncLet_begin();
  sub_1000370C8(v1, v0 + 2872);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 4360) = v6;
  long long v7 = *(_OWORD *)(v0 + 2952);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v0 + 2936);
  *(_OWORD *)(v6 + 96) = v7;
  *(void *)(v6 + 112) = *(void *)(v0 + 2968);
  long long v8 = *(_OWORD *)(v0 + 2888);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v0 + 2872);
  *(_OWORD *)(v6 + 32) = v8;
  long long v9 = *(_OWORD *)(v0 + 2920);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v0 + 2904);
  *(_OWORD *)(v6 + 64) = v9;
  swift_retain();
  sub_100011ECC(&qword_1001E26C0);
  swift_asyncLet_begin();
  sub_1000370C8(v1, v0 + 3016);
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 4368) = v10;
  long long v11 = *(_OWORD *)(v0 + 3096);
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(v0 + 3080);
  *(_OWORD *)(v10 + 96) = v11;
  *(void *)(v10 + 112) = *(void *)(v0 + 3112);
  long long v12 = *(_OWORD *)(v0 + 3032);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 3016);
  *(_OWORD *)(v10 + 32) = v12;
  long long v13 = *(_OWORD *)(v0 + 3064);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(v0 + 3048);
  *(_OWORD *)(v10 + 64) = v13;
  swift_retain();
  swift_asyncLet_begin();
  return _swift_asyncLet_get(v0 + 656, v0 + 2186, sub_10002BCE4, v0 + 3264);
}

uint64_t sub_10002BCE4()
{
  *(unsigned char *)(v0 + 2187) = *(unsigned char *)(v0 + 2186);
  return _swift_asyncLet_get(v0 + 1296, v0 + 3592, sub_10002BD10, v0 + 4176);
}

uint64_t sub_10002BD10()
{
  *(void *)(v0 + 4376) = *(void *)(v0 + 3592);
  swift_bridgeObjectRetain();
  return _swift_asyncLet_get(v0 + 16, v0 + 3688, sub_10002BD98, v0 + 4128);
}

uint64_t sub_10002BD98()
{
  return _swift_task_switch(sub_10002BDB4, 0, 0);
}

uint64_t sub_10002BDB4()
{
  uint64_t v86 = v0;
  uint64_t v1 = v0 + 16;
  uint64_t v2 = v0 + 3688;
  if (*(unsigned char *)(v0 + 2187) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 3688);
    unint64_t v4 = *(void *)(v0 + 3832);
    uint64_t v5 = *(void *)(v0 + 3784);
    swift_bridgeObjectRetain();
    int64_t v6 = 0;
    uint64_t v7 = static JWS.headerDictionary(fromJWS:)(v5, v4);
    *(void *)(v0 + 4384) = 0;
    uint64_t v23 = v7;
    uint64_t v81 = v7 + 64;
    uint64_t v24 = -1;
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    if (-v25 < 64) {
      uint64_t v24 = ~(-1 << -(char)v25);
    }
    unint64_t v26 = v24 & *(void *)(v7 + 64);
    int64_t v82 = (unint64_t)(63 - v25) >> 6;
    while (1)
    {
      if (v26)
      {
        unint64_t v27 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        unint64_t v28 = v27 | (v6 << 6);
      }
      else
      {
        int64_t v32 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          return _swift_asyncLet_finish(v7, v8, v9, v10);
        }
        if (v32 >= v82) {
          goto LABEL_29;
        }
        unint64_t v33 = *(void *)(v81 + 8 * v32);
        ++v6;
        if (!v33)
        {
          int64_t v6 = v32 + 1;
          if (v32 + 1 >= v82) {
            goto LABEL_29;
          }
          unint64_t v33 = *(void *)(v81 + 8 * v6);
          if (!v33)
          {
            int64_t v6 = v32 + 2;
            if (v32 + 2 >= v82) {
              goto LABEL_29;
            }
            unint64_t v33 = *(void *)(v81 + 8 * v6);
            if (!v33)
            {
              int64_t v34 = v32 + 3;
              if (v34 >= v82)
              {
LABEL_29:
                uint64_t v35 = *(void *)(v0 + 4376);
                swift_release();
                char v36 = sub_10002E448(v35, (uint64_t)&_swiftEmptySetSingleton);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v36)
                {
                  uint64_t v37 = static JWS.payloadDictionary(fromJWS:)(*(void *)(v0 + 3784), *(void *)(v0 + 3832));
                  *(void *)(v0 + 4392) = 0;
                  uint64_t v7 = v3;
                  int64_t v49 = 0;
                  uint64_t v83 = v37 + 64;
                  uint64_t v50 = -1;
                  uint64_t v51 = -1 << *(unsigned char *)(v37 + 32);
                  if (-v51 < 64) {
                    uint64_t v50 = ~(-1 << -(char)v51);
                  }
                  unint64_t v52 = v50 & *(void *)(v37 + 64);
                  int64_t v84 = (unint64_t)(63 - v51) >> 6;
                  while (1)
                  {
                    if (v52)
                    {
                      unint64_t v53 = __clz(__rbit64(v52));
                      v52 &= v52 - 1;
                      unint64_t v54 = v53 | (v49 << 6);
                    }
                    else
                    {
                      int64_t v58 = v49 + 1;
                      if (__OFADD__(v49, 1)) {
                        goto LABEL_63;
                      }
                      if (v58 >= v84)
                      {
LABEL_54:
                        uint64_t v61 = *(void *)(v0 + 4264);
                        swift_release();
                        char v62 = sub_10002E448(v3, (uint64_t)&_swiftEmptySetSingleton);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v63 = Logger.impression.unsafeMutableAddressor();
                        id v64 = *(void (**)(void, uint64_t, uint64_t))(v61 + 16);
                        uint64_t v65 = *(void *)(v0 + 4216);
                        if (v62)
                        {
                          v64(*(void *)(v0 + 4344), v63, v65);
                          uint64_t v66 = Logger.logObject.getter();
                          os_log_type_t v67 = static os_log_type_t.default.getter();
                          uint64_t v1 = v0 + 16;
                          uint64_t v2 = v0 + 3688;
                          if (os_log_type_enabled(v66, v67))
                          {
                            uint64_t v68 = *(void *)(v0 + 3880);
                            uint64_t v69 = (uint8_t *)swift_slowAlloc();
                            *(_DWORD *)uint64_t v69 = 134217984;
                            *(void *)(v0 + 3736) = v68;
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            _os_log_impl((void *)&_mh_execute_header, v66, v67, "Validated impression for advertised app: %llu", v69, 0xCu);
                            swift_slowDealloc();
                          }
                          uint64_t v18 = v0 + 3600;
                          uint64_t v70 = *(void *)(v0 + 4344);
                          uint64_t v71 = *(void *)(v0 + 4264);
                          uint64_t v72 = *(void *)(v0 + 4216);

                          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
                          unint64_t v22 = sub_10002C6E0;
                        }
                        else
                        {
                          v64(*(void *)(v0 + 4336), v63, v65);
                          uint64_t v73 = Logger.logObject.getter();
                          os_log_type_t v74 = static os_log_type_t.error.getter();
                          uint64_t v1 = v0 + 16;
                          uint64_t v2 = v0 + 3688;
                          if (os_log_type_enabled(v73, v74))
                          {
                            uint64_t v75 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)uint64_t v75 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v73, v74, "Payload is not a subset of allowed header properties", v75, 2u);
                            swift_slowDealloc();
                          }
                          uint64_t v18 = v0 + 4224;
                          uint64_t v76 = *(void *)(v0 + 4336);
                          uint64_t v77 = *(void *)(v0 + 4264);
                          uint64_t v78 = *(void *)(v0 + 4216);

                          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
                          sub_100036890();
                          *(void *)(v0 + 4400) = swift_allocError();
                          *uint64_t v79 = 3;
                          swift_willThrow();
                          unint64_t v22 = sub_10002C914;
                        }
                        goto LABEL_6;
                      }
                      unint64_t v59 = *(void *)(v83 + 8 * v58);
                      ++v49;
                      if (!v59)
                      {
                        int64_t v49 = v58 + 1;
                        if (v58 + 1 >= v84) {
                          goto LABEL_54;
                        }
                        unint64_t v59 = *(void *)(v83 + 8 * v49);
                        if (!v59)
                        {
                          int64_t v49 = v58 + 2;
                          if (v58 + 2 >= v84) {
                            goto LABEL_54;
                          }
                          unint64_t v59 = *(void *)(v83 + 8 * v49);
                          if (!v59)
                          {
                            int64_t v60 = v58 + 3;
                            if (v60 >= v84) {
                              goto LABEL_54;
                            }
                            unint64_t v59 = *(void *)(v83 + 8 * v60);
                            if (!v59)
                            {
                              while (1)
                              {
                                int64_t v49 = v60 + 1;
                                if (__OFADD__(v60, 1)) {
                                  goto LABEL_64;
                                }
                                if (v49 >= v84) {
                                  goto LABEL_54;
                                }
                                unint64_t v59 = *(void *)(v83 + 8 * v49);
                                ++v60;
                                if (v59) {
                                  goto LABEL_53;
                                }
                              }
                            }
                            int64_t v49 = v60;
                          }
                        }
                      }
LABEL_53:
                      unint64_t v52 = (v59 - 1) & v59;
                      unint64_t v54 = __clz(__rbit64(v59)) + (v49 << 6);
                    }
                    uint64_t v55 = (Swift::Int *)(*(void *)(v37 + 48) + 16 * v54);
                    Swift::Int v56 = *v55;
                    Swift::Int v57 = v55[1];
                    *(void *)(v0 + 3448) = *v55;
                    *(void *)(v0 + 3456) = v57;
                    sub_10003742C(*(void *)(v37 + 56) + 32 * v54, v0 + 3464);
                    *(void *)(v0 + 3400) = v56;
                    *(void *)(v0 + 3408) = v57;
                    sub_100037488((_OWORD *)(v0 + 3464), (_OWORD *)(v0 + 3416));
                    *(void *)(v0 + 3352) = v56;
                    *(void *)(v0 + 3360) = v57;
                    sub_10003742C(v0 + 3416, v0 + 3368);
                    swift_bridgeObjectRetain_n();
                    sub_100026FE0(&v85, v56, v57);
                    swift_bridgeObjectRelease();
                    sub_100019960(v0 + 3400, &qword_1001E1408);
                    uint64_t v7 = _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 3368);
                  }
                }
                uint64_t v38 = *(void *)(v0 + 4328);
                uint64_t v39 = *(void *)(v0 + 4264);
                uint64_t v40 = *(void *)(v0 + 4216);
                swift_bridgeObjectRelease();
                uint64_t v41 = Logger.impression.unsafeMutableAddressor();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v41, v40);
                uint64_t v42 = Logger.logObject.getter();
                os_log_type_t v43 = static os_log_type_t.error.getter();
                uint64_t v1 = v0 + 16;
                uint64_t v2 = v0 + 3688;
                if (os_log_type_enabled(v42, v43))
                {
                  id v44 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)id v44 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v42, v43, "Header is not a subset of allowed header properties", v44, 2u);
                  swift_slowDealloc();
                }
                uint64_t v18 = v0 + 3792;
                uint64_t v45 = *(void *)(v0 + 4328);
                uint64_t v46 = *(void *)(v0 + 4264);
                uint64_t v47 = *(void *)(v0 + 4216);

                (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
                sub_100036890();
                *(void *)(v0 + 4408) = swift_allocError();
                *id v48 = 2;
                swift_willThrow();
                unint64_t v22 = sub_10002CD5C;
                goto LABEL_6;
              }
              unint64_t v33 = *(void *)(v81 + 8 * v34);
              if (!v33)
              {
                while (1)
                {
                  int64_t v6 = v34 + 1;
                  if (__OFADD__(v34, 1)) {
                    goto LABEL_62;
                  }
                  if (v6 >= v82) {
                    goto LABEL_29;
                  }
                  unint64_t v33 = *(void *)(v81 + 8 * v6);
                  ++v34;
                  if (v33) {
                    goto LABEL_28;
                  }
                }
              }
              int64_t v6 = v34;
            }
          }
        }
LABEL_28:
        unint64_t v26 = (v33 - 1) & v33;
        unint64_t v28 = __clz(__rbit64(v33)) + (v6 << 6);
      }
      uint64_t v29 = (Swift::Int *)(*(void *)(v23 + 48) + 16 * v28);
      Swift::Int v31 = *v29;
      Swift::Int v30 = v29[1];
      *(void *)(v0 + 3544) = *v29;
      *(void *)(v0 + 3552) = v30;
      sub_10003742C(*(void *)(v23 + 56) + 32 * v28, v0 + 3560);
      *(void *)(v0 + 3304) = v31;
      *(void *)(v0 + 3312) = v30;
      sub_100037488((_OWORD *)(v0 + 3560), (_OWORD *)(v0 + 3320));
      *(void *)(v0 + 3496) = v31;
      *(void *)(v0 + 3504) = v30;
      sub_10003742C(v0 + 3320, v0 + 3512);
      swift_bridgeObjectRetain_n();
      sub_100026FE0(&v85, v31, v30);
      swift_bridgeObjectRelease();
      sub_100019960(v0 + 3304, &qword_1001E1408);
      uint64_t v7 = _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 3512);
    }
  }
  uint64_t v11 = *(void *)(v0 + 4320);
  uint64_t v12 = *(void *)(v0 + 4264);
  uint64_t v13 = *(void *)(v0 + 4216);
  swift_bridgeObjectRelease();
  uint64_t v14 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Strict impression decoding is disabled", v17, 2u);
    swift_slowDealloc();
  }
  uint64_t v18 = v0 + 4080;
  uint64_t v19 = *(void *)(v0 + 4320);
  uint64_t v20 = *(void *)(v0 + 4264);
  uint64_t v21 = *(void *)(v0 + 4216);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  unint64_t v22 = sub_10002D1A0;
LABEL_6:
  long long v9 = v22;
  uint64_t v7 = v1;
  uint64_t v8 = v2;
  uint64_t v10 = v18;
  return _swift_asyncLet_finish(v7, v8, v9, v10);
}

uint64_t sub_10002C6E0()
{
  return _swift_task_switch(sub_10002C6FC, 0, 0);
}

uint64_t sub_10002C6FC()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3592, sub_10002C77C, v0 + 2976);
}

uint64_t sub_10002C77C()
{
  return _swift_task_switch(sub_10002C798, 0, 0);
}

uint64_t sub_10002C798()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 2186, sub_10002C818, v0 + 3120);
}

uint64_t sub_10002C818()
{
  return _swift_task_switch(sub_10002C834, 0, 0);
}

uint64_t sub_10002C834()
{
  swift_release_n();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002C914()
{
  return _swift_task_switch(sub_10002C930, 0, 0);
}

uint64_t sub_10002C930()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3592, sub_10002C9B4, v0 + 4272);
}

uint64_t sub_10002C9B4()
{
  return _swift_task_switch(sub_10002C9D0, 0, 0);
}

uint64_t sub_10002C9D0()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 2186, sub_10002CA50, v0 + 3696);
}

uint64_t sub_10002CA50()
{
  return _swift_task_switch(sub_10002CA6C, 0, 0);
}

uint64_t sub_10002CA6C()
{
  uint64_t v1 = *(void *)(v0 + 4400);
  *(void *)(v0 + 4416) = v1;
  uint64_t v2 = *(void *)(v0 + 4312);
  uint64_t v3 = *(void *)(v0 + 4264);
  uint64_t v4 = *(void *)(v0 + 4216);
  swift_release();
  uint64_t v5 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  int64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    long long v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3640) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Encountered failure while validating impression JWS: %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v6;
  uint64_t v12 = *(void *)(v0 + 4312);
  uint64_t v13 = *(void *)(v0 + 4264);
  uint64_t v14 = *(void *)(v0 + 4216);
  uint64_t v15 = *(void *)(v0 + 4024);
  uint64_t v16 = *(void *)(v0 + 3976);
  uint64_t v17 = *(void *)(v0 + 3928);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(0, 0, v1, v17, v16, 0, 2, 2, (_OWORD *)(v0 + 2488), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v18 = *(_OWORD *)(v0 + 2632);
  *(_OWORD *)(v0 + 2808) = *(_OWORD *)(v0 + 2616);
  *(_OWORD *)(v0 + 28++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
  *(_OWORD *)(v0 + 2840) = *(_OWORD *)(v0 + 2648);
  *(_OWORD *)(v0 + 2849) = *(_OWORD *)(v0 + 2657);
  long long v19 = *(_OWORD *)(v0 + 2568);
  *(_OWORD *)(v0 + 2744) = *(_OWORD *)(v0 + 2552);
  *(_OWORD *)(v0 + 2760) = v19;
  long long v20 = *(_OWORD *)(v0 + 2600);
  *(_OWORD *)(v0 + 2776) = *(_OWORD *)(v0 + 2584);
  *(_OWORD *)(v0 + 2792) = v20;
  long long v21 = *(_OWORD *)(v0 + 2504);
  *(_OWORD *)(v0 + 2680) = *(_OWORD *)(v0 + 2488);
  *(_OWORD *)(v0 + 2696) = v21;
  long long v22 = *(_OWORD *)(v0 + 2536);
  *(_OWORD *)(v0 + 2712) = *(_OWORD *)(v0 + 2520);
  *(_OWORD *)(v0 + 2728) = v22;
  uint64_t v23 = sub_100012D78((void *)(v15 + 24), *(void *)(v15 + 48));
  uint64_t v24 = *v23;
  *(void *)(v0 + 44++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *v23;
  return _swift_task_switch(sub_10002D2F4, v24, 0);
}

uint64_t sub_10002CD5C()
{
  return _swift_task_switch(sub_10002CD78, 0, 0);
}

uint64_t sub_10002CD78()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3592, sub_10002CDF8, v0 + 3840);
}

uint64_t sub_10002CDF8()
{
  return _swift_task_switch(sub_10002CE14, 0, 0);
}

uint64_t sub_10002CE14()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 2186, sub_10002CE94, v0 + 3888);
}

uint64_t sub_10002CE94()
{
  return _swift_task_switch(sub_10002CEB0, 0, 0);
}

uint64_t sub_10002CEB0()
{
  uint64_t v1 = *(void *)(v0 + 4408);
  *(void *)(v0 + 4416) = v1;
  uint64_t v2 = *(void *)(v0 + 4312);
  uint64_t v3 = *(void *)(v0 + 4264);
  uint64_t v4 = *(void *)(v0 + 4216);
  swift_release();
  uint64_t v5 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  int64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    long long v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3640) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Encountered failure while validating impression JWS: %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v6;
  uint64_t v12 = *(void *)(v0 + 4312);
  uint64_t v13 = *(void *)(v0 + 4264);
  uint64_t v14 = *(void *)(v0 + 4216);
  uint64_t v15 = *(void *)(v0 + 4024);
  uint64_t v16 = *(void *)(v0 + 3976);
  uint64_t v17 = *(void *)(v0 + 3928);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(0, 0, v1, v17, v16, 0, 2, 2, (_OWORD *)(v0 + 2488), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v18 = *(_OWORD *)(v0 + 2632);
  *(_OWORD *)(v0 + 2808) = *(_OWORD *)(v0 + 2616);
  *(_OWORD *)(v0 + 28++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
  *(_OWORD *)(v0 + 2840) = *(_OWORD *)(v0 + 2648);
  *(_OWORD *)(v0 + 2849) = *(_OWORD *)(v0 + 2657);
  long long v19 = *(_OWORD *)(v0 + 2568);
  *(_OWORD *)(v0 + 2744) = *(_OWORD *)(v0 + 2552);
  *(_OWORD *)(v0 + 2760) = v19;
  long long v20 = *(_OWORD *)(v0 + 2600);
  *(_OWORD *)(v0 + 2776) = *(_OWORD *)(v0 + 2584);
  *(_OWORD *)(v0 + 2792) = v20;
  long long v21 = *(_OWORD *)(v0 + 2504);
  *(_OWORD *)(v0 + 2680) = *(_OWORD *)(v0 + 2488);
  *(_OWORD *)(v0 + 2696) = v21;
  long long v22 = *(_OWORD *)(v0 + 2536);
  *(_OWORD *)(v0 + 2712) = *(_OWORD *)(v0 + 2520);
  *(_OWORD *)(v0 + 2728) = v22;
  uint64_t v23 = sub_100012D78((void *)(v15 + 24), *(void *)(v15 + 48));
  uint64_t v24 = *v23;
  *(void *)(v0 + 44++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *v23;
  return _swift_task_switch(sub_10002D2F4, v24, 0);
}

uint64_t sub_10002D1A0()
{
  return _swift_task_switch(sub_10002D1BC, 0, 0);
}

uint64_t sub_10002D1BC()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3592, sub_10002D23C, v0 + 3744);
}

uint64_t sub_10002D23C()
{
  return _swift_task_switch(sub_10002D258, 0, 0);
}

uint64_t sub_10002D258()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 2186, sub_10002D2D8, v0 + 3648);
}

uint64_t sub_10002D2D8()
{
  return _swift_task_switch(sub_100037E2C, 0, 0);
}

uint64_t sub_10002D2F4()
{
  uint64_t v1 = *(void *)(v0 + 4168);
  uint64_t v2 = *(void *)(v0 + 4120);
  uint64_t v3 = *(void *)(v0 + 4072);
  uint64_t v4 = *(void *)(v0 + 3880);
  long long v5 = *(_OWORD *)(v0 + 2824);
  *(_OWORD *)(v0 + 2360) = *(_OWORD *)(v0 + 2808);
  *(_OWORD *)(v0 + 2376) = v5;
  *(_OWORD *)(v0 + 2392) = *(_OWORD *)(v0 + 2840);
  *(_OWORD *)(v0 + 2401) = *(_OWORD *)(v0 + 2849);
  long long v6 = *(_OWORD *)(v0 + 2760);
  *(_OWORD *)(v0 + 2296) = *(_OWORD *)(v0 + 2744);
  *(_OWORD *)(v0 + 2312) = v6;
  long long v7 = *(_OWORD *)(v0 + 2792);
  *(_OWORD *)(v0 + 2328) = *(_OWORD *)(v0 + 2776);
  *(_OWORD *)(v0 + 2344) = v7;
  long long v8 = *(_OWORD *)(v0 + 2696);
  *(_OWORD *)(v0 + 2232) = *(_OWORD *)(v0 + 2680);
  *(_OWORD *)(v0 + 2248) = v8;
  long long v9 = *(_OWORD *)(v0 + 2728);
  *(_OWORD *)(v0 + 2264) = *(_OWORD *)(v0 + 2712);
  *(_OWORD *)(v0 + 2280) = v9;
  *(void *)(v0 + 24++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(v0 + 2432) = 0;
  *(_WORD *)(v0 + 2440) = 256;
  sub_10003675C(v0 + 2232);
  sub_1000367C8(v0 + 2232, v0 + 1976);
  sub_10001547C(v0 + 2488);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 2488);
  return _swift_task_switch(sub_10002D43C, 0, 0);
}

uint64_t sub_10002D43C()
{
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002D530()
{
  return _swift_task_switch(sub_10002D54C, 0, 0);
}

uint64_t sub_10002D54C()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3592, sub_10002D5CC, v0 + 2192);
}

uint64_t sub_10002D5CC()
{
  return _swift_task_switch(sub_10002D5E8, 0, 0);
}

uint64_t sub_10002D5E8()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 2186, sub_10002D668, v0 + 2448);
}

uint64_t sub_10002D668()
{
  return _swift_task_switch(sub_10002D684, 0, 0);
}

uint64_t sub_10002D684()
{
  uint64_t v1 = *(void *)(v0 + 4384);
  *(void *)(v0 + 4416) = v1;
  uint64_t v2 = *(void *)(v0 + 4312);
  uint64_t v3 = *(void *)(v0 + 4264);
  uint64_t v4 = *(void *)(v0 + 4216);
  swift_release();
  uint64_t v5 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  long long v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    long long v8 = (uint8_t *)swift_slowAlloc();
    long long v9 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3640) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Encountered failure while validating impression JWS: %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v6;
  uint64_t v12 = *(void *)(v0 + 4312);
  uint64_t v13 = *(void *)(v0 + 4264);
  uint64_t v14 = *(void *)(v0 + 4216);
  uint64_t v15 = *(void *)(v0 + 4024);
  uint64_t v16 = *(void *)(v0 + 3976);
  uint64_t v17 = *(void *)(v0 + 3928);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(0, 0, v1, v17, v16, 0, 2, 2, (_OWORD *)(v0 + 2488), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v18 = *(_OWORD *)(v0 + 2632);
  *(_OWORD *)(v0 + 2808) = *(_OWORD *)(v0 + 2616);
  *(_OWORD *)(v0 + 28++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
  *(_OWORD *)(v0 + 2840) = *(_OWORD *)(v0 + 2648);
  *(_OWORD *)(v0 + 2849) = *(_OWORD *)(v0 + 2657);
  long long v19 = *(_OWORD *)(v0 + 2568);
  *(_OWORD *)(v0 + 2744) = *(_OWORD *)(v0 + 2552);
  *(_OWORD *)(v0 + 2760) = v19;
  long long v20 = *(_OWORD *)(v0 + 2600);
  *(_OWORD *)(v0 + 2776) = *(_OWORD *)(v0 + 2584);
  *(_OWORD *)(v0 + 2792) = v20;
  long long v21 = *(_OWORD *)(v0 + 2504);
  *(_OWORD *)(v0 + 2680) = *(_OWORD *)(v0 + 2488);
  *(_OWORD *)(v0 + 2696) = v21;
  long long v22 = *(_OWORD *)(v0 + 2536);
  *(_OWORD *)(v0 + 2712) = *(_OWORD *)(v0 + 2520);
  *(_OWORD *)(v0 + 2728) = v22;
  uint64_t v23 = sub_100012D78((void *)(v15 + 24), *(void *)(v15 + 48));
  uint64_t v24 = *v23;
  *(void *)(v0 + 44++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *v23;
  return _swift_task_switch(sub_10002D2F4, v24, 0);
}

uint64_t sub_10002D974()
{
  return _swift_task_switch(sub_10002D990, 0, 0);
}

uint64_t sub_10002D990()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3592, sub_10002DA10, v0 + 3984);
}

uint64_t sub_10002DA10()
{
  return _swift_task_switch(sub_10002DA2C, 0, 0);
}

uint64_t sub_10002DA2C()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 2186, sub_10002DAAC, v0 + 4032);
}

uint64_t sub_10002DAAC()
{
  return _swift_task_switch(sub_10002DAC8, 0, 0);
}

uint64_t sub_10002DAC8()
{
  uint64_t v1 = *(void *)(v0 + 4392);
  *(void *)(v0 + 4416) = v1;
  uint64_t v2 = *(void *)(v0 + 4312);
  uint64_t v3 = *(void *)(v0 + 4264);
  uint64_t v4 = *(void *)(v0 + 4216);
  swift_release();
  uint64_t v5 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  long long v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    long long v8 = (uint8_t *)swift_slowAlloc();
    long long v9 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3640) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Encountered failure while validating impression JWS: %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v6;
  uint64_t v12 = *(void *)(v0 + 4312);
  uint64_t v13 = *(void *)(v0 + 4264);
  uint64_t v14 = *(void *)(v0 + 4216);
  uint64_t v15 = *(void *)(v0 + 4024);
  uint64_t v16 = *(void *)(v0 + 3976);
  uint64_t v17 = *(void *)(v0 + 3928);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(0, 0, v1, v17, v16, 0, 2, 2, (_OWORD *)(v0 + 2488), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v18 = *(_OWORD *)(v0 + 2632);
  *(_OWORD *)(v0 + 2808) = *(_OWORD *)(v0 + 2616);
  *(_OWORD *)(v0 + 28++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
  *(_OWORD *)(v0 + 2840) = *(_OWORD *)(v0 + 2648);
  *(_OWORD *)(v0 + 2849) = *(_OWORD *)(v0 + 2657);
  long long v19 = *(_OWORD *)(v0 + 2568);
  *(_OWORD *)(v0 + 2744) = *(_OWORD *)(v0 + 2552);
  *(_OWORD *)(v0 + 2760) = v19;
  long long v20 = *(_OWORD *)(v0 + 2600);
  *(_OWORD *)(v0 + 2776) = *(_OWORD *)(v0 + 2584);
  *(_OWORD *)(v0 + 2792) = v20;
  long long v21 = *(_OWORD *)(v0 + 2504);
  *(_OWORD *)(v0 + 2680) = *(_OWORD *)(v0 + 2488);
  *(_OWORD *)(v0 + 2696) = v21;
  long long v22 = *(_OWORD *)(v0 + 2536);
  *(_OWORD *)(v0 + 2712) = *(_OWORD *)(v0 + 2520);
  *(_OWORD *)(v0 + 2728) = v22;
  uint64_t v23 = sub_100012D78((void *)(v15 + 24), *(void *)(v15 + 48));
  uint64_t v24 = *v23;
  *(void *)(v0 + 44++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *v23;
  return _swift_task_switch(sub_10002D2F4, v24, 0);
}

uint64_t sub_10002DDB8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E4070 + dword_1001E4070);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10002DE60;
  return v4(4);
}

uint64_t sub_10002DE60(char a1)
{
  *(unsigned char *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10002DF60, 0, 0);
}

uint64_t sub_10002DF60()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 == 2) {
    char v2 = 1;
  }
  else {
    char v2 = v1 & 1;
  }
  **(unsigned char **)(v0 + 16) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002DF90(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E1EE0 + dword_1001E1EE0);
  char v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *char v2 = v1;
  v2[1] = sub_10002E038;
  return v4(5);
}

uint64_t sub_10002E038(uint64_t a1)
{
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10002E138, 0, 0);
}

uint64_t sub_10002E138()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    **(void **)(v0 + 16) = v1;
  }
  else
  {
    if (qword_1001E0898 != -1) {
      swift_once();
    }
    **(void **)(v0 + 16) = qword_1001E5F78;
    swift_bridgeObjectRetain();
  }
  char v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10002E1EC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E1EE0 + dword_1001E1EE0);
  char v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *char v2 = v1;
  v2[1] = sub_10002E294;
  return v4(6);
}

uint64_t sub_10002E294(uint64_t a1)
{
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10002E394, 0, 0);
}

uint64_t sub_10002E394()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    **(void **)(v0 + 16) = v1;
  }
  else
  {
    if (qword_1001E08A0 != -1) {
      swift_once();
    }
    **(void **)(v0 + 16) = qword_1001E5F80;
    swift_bridgeObjectRetain();
  }
  char v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10002E448(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2)
  {
    char v12 = 1;
    return v12 & 1;
  }
  if (v2 != 1)
  {
    swift_bridgeObjectRetain();
    char v12 = sub_1000362EC(a1, a2);
LABEL_16:
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
  uint64_t result = sub_10003626C(a2);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v9 = result;
      uint64_t v10 = (void *)(a1 + 40);
      while (1)
      {
        BOOL v11 = *(v10 - 1) == v9 && v7 == *v10;
        if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v10 += 2;
        if (!--v8) {
          goto LABEL_12;
        }
      }
      char v12 = 1;
    }
    else
    {
LABEL_12:
      char v12 = 0;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002E514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 880) = v5;
  *(unsigned char *)(v6 + 226) = a5;
  *(void *)(v6 + 872) = a4;
  *(void *)(v6 + 864) = a3;
  *(void *)(v6 + 856) = a2;
  *(void *)(v6 + 848) = a1;
  uint64_t v7 = sub_100012960(&qword_1001E1370);
  *(void *)(v6 + 888) = v7;
  *(void *)(v6 + 896) = *(void *)(v7 - 8);
  *(void *)(v6 + 904) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 912) = v8;
  *(void *)(v6 + 920) = *(void *)(v8 - 8);
  *(void *)(v6 + 928) = swift_task_alloc();
  return _swift_task_switch(sub_10002E648, 0, 0);
}

uint64_t sub_10002E648()
{
  unint64_t v1 = v0[108];
  uint64_t v2 = v0[107];
  uint64_t v3 = v0[106];
  unint64_t v4 = type metadata accessor for AppImpressionPayload();
  unint64_t v5 = sub_100036B14();
  uint64_t v6 = sub_100036B68(&qword_1001E13C0, (void (*)(uint64_t))type metadata accessor for AppImpressionPayload);
  swift_bridgeObjectRetain();
  JWS.init(compactJWS:)(v2, v1, v4, v5, v6, v3);
  v0[117] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10002EA24()
{
  uint64_t v1 = *(void *)(v0 + 904);
  uint64_t v2 = *(void *)(v0 + 896);
  uint64_t v3 = *(void *)(v0 + 888);
  uint64_t v4 = *(void *)(v0 + 872);
  long long v5 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 160) = v5;
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 800);
  long long v6 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 96) = v6;
  long long v7 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 128) = v7;
  long long v8 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 32) = v8;
  long long v9 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 64) = v9;
  *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 809);
  *(void *)(v0 + 208) = v4;
  *(void *)(v0 + 216) = 0;
  *(_WORD *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 256;
  sub_10003675C(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 232);
  sub_10001547C(v0 + 448);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 448);
  return _swift_task_switch(sub_10002EB68, 0, 0);
}

uint64_t sub_10002EB68()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002EBEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(void *)(v6 + 1688) = v5;
  *(unsigned char *)(v6 + 1457) = a5;
  *(unsigned char *)(v6 + 1271) = a4;
  *(void *)(v6 + 1680) = a3;
  *(void *)(v6 + 1672) = a2;
  *(void *)(v6 + 1664) = a1;
  uint64_t v7 = sub_100012960(&qword_1001E1370);
  *(void *)(v6 + 1696) = v7;
  *(void *)(v6 + 1704) = *(void *)(v7 - 8);
  *(void *)(v6 + 1712) = swift_task_alloc();
  sub_100012960(&qword_1001E1378);
  *(void *)(v6 + 1720) = swift_task_alloc();
  *(void *)(v6 + 1728) = swift_task_alloc();
  *(void *)(v6 + 1736) = swift_task_alloc();
  *(void *)(v6 + 1744) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 1752) = v8;
  *(void *)(v6 + 1760) = *(void *)(v8 - 8);
  *(void *)(v6 + 1768) = swift_task_alloc();
  *(void *)(v6 + 1776) = swift_task_alloc();
  *(void *)(v6 + 1784) = swift_task_alloc();
  *(void *)(v6 + 1792) = swift_task_alloc();
  *(void *)(v6 + 1800) = swift_task_alloc();
  *(void *)(v6 + 1808) = swift_task_alloc();
  *(void *)(v6 + 1816) = sub_100012960(&qword_1001E1380);
  *(void *)(v6 + 18++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ImpressionModel();
  *(void *)(v6 + 1832) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 1840) = v10;
  *(void *)(v6 + 1848) = *(void *)(v10 + 64);
  *(void *)(v6 + 1856) = swift_task_alloc();
  *(void *)(v6 + 1864) = swift_task_alloc();
  *(void *)(v6 + 1872) = swift_task_alloc();
  *(void *)(v6 + 1880) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  *(void *)(v6 + 1888) = v11;
  *(void *)(v6 + 1896) = *(void *)(v11 - 8);
  *(void *)(v6 + 1904) = swift_task_alloc();
  return _swift_task_switch(sub_10002EED4, 0, 0);
}

uint64_t sub_10002EED4()
{
  uint64_t v1 = *(void *)(v0 + 1904);
  uint64_t v2 = *(void **)(v0 + 1680);
  uint64_t v3 = (char *)v2 + *(int *)(*(void *)(v0 + 1816) + 52);
  os_log_type_t v43 = (int *)type metadata accessor for AppImpressionPayload();
  id v44 = v3;
  uint64_t v4 = (uint64_t *)&v3[v43[10]];
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  LOBYTE(v3) = v3[v43[11]];
  swift_bridgeObjectRetain();
  sub_10009485C(0, 0, 0, v6, v5, 0, 2, 0, (_OWORD *)(v0 + 1272), v3, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_WORD *)(v0 + 1458) = *(_WORD *)(v0 + 1272);
  *(_DWORD *)(v0 + 442) = *(_DWORD *)(v0 + 1274);
  *(_WORD *)(v0 + 446) = *(_WORD *)(v0 + 1278);
  long long v7 = *(_OWORD *)(v0 + 1296);
  *(_OWORD *)(v0 + 1912) = *(_OWORD *)(v0 + 1280);
  *(_OWORD *)(v0 + 1928) = v7;
  long long v8 = *(_OWORD *)(v0 + 1328);
  *(_OWORD *)(v0 + 1944) = *(_OWORD *)(v0 + 1312);
  *(_OWORD *)(v0 + 1960) = v8;
  *(void *)(v0 + 1976) = *(void *)(v0 + 1344);
  *(_DWORD *)(v0 + 1460) = *(_DWORD *)(v0 + 1352);
  *(_WORD *)(v0 + 1649) = *(_WORD *)(v0 + 1356);
  *(_WORD *)(v0 + 658) = *(_WORD *)(v0 + 1358);
  *(void *)(v0 + 1984) = *(void *)(v0 + 1360);
  char v9 = *(unsigned char *)(v0 + 1368);
  *(unsigned char *)(v0 + 1651) = v9;
  *(unsigned char *)(v0 + 2280) = v9;
  *(_DWORD *)(v0 + 881) = *(_DWORD *)(v0 + 1369);
  *(_DWORD *)(v0 + 884) = *(_DWORD *)(v0 + 1372);
  *(void *)(v0 + 1992) = *(void *)(v0 + 1376);
  char v10 = *(unsigned char *)(v0 + 1384);
  *(unsigned char *)(v0 + 1652) = v10;
  *(unsigned char *)(v0 + 2288) = v10;
  *(unsigned char *)(v0 + 1653) = *(unsigned char *)(v0 + 1385);
  *(_DWORD *)(v0 + 226) = *(_DWORD *)(v0 + 1386);
  *(_WORD *)(v0 + 230) = *(_WORD *)(v0 + 1390);
  *(void *)(v0 + 2000) = *(void *)(v0 + 1392);
  char v11 = *(unsigned char *)(v0 + 1400);
  *(unsigned char *)(v0 + 1654) = v11;
  *(unsigned char *)(v0 + 2304) = v11;
  *(_DWORD *)(v0 + 874) = *(_DWORD *)(v0 + 1401);
  *(_DWORD *)(v0 + 877) = *(_DWORD *)(v0 + 1404);
  *(void *)(v0 + 2008) = *(void *)(v0 + 1408);
  char v12 = *(unsigned char *)(v0 + 1416);
  *(unsigned char *)(v0 + 1655) = v12;
  *(unsigned char *)(v0 + 2296) = v12;
  *(_WORD *)(v0 + 2281) = *(_WORD *)(v0 + 1417);
  *(unsigned char *)(v0 + 1269) = *(unsigned char *)(v0 + 1423);
  *(_DWORD *)(v0 + 1265) = *(_DWORD *)(v0 + 1419);
  *(void *)(v0 + 2016) = *(void *)(v0 + 1424);
  char v13 = *(unsigned char *)(v0 + 1432);
  *(unsigned char *)(v0 + 2283) = v13;
  *(unsigned char *)(v0 + 2312) = v13;
  *(_DWORD *)(v0 + 1073) = *(_DWORD *)(v0 + 1433);
  *(_DWORD *)(v0 + 1076) = *(_DWORD *)(v0 + 1436);
  *(_OWORD *)(v0 + 20++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 1440);
  *(unsigned char *)(v0 + 2284) = *(unsigned char *)(v0 + 1456);
  Date.init(timeIntervalSinceNow:)();
  sub_100032880(v2, v1);
  uint64_t v14 = *(void *)&v44[v43[5]];
  sub_100033438(v14, v6, v5, *(void *)(v0 + 1664));
  uint64_t v15 = *(void *)(v0 + 1880);
  uint64_t v16 = *(void *)(v0 + 1824);
  LOBYTE(v3) = *(unsigned char *)(v0 + 1271);
  sub_100036994(*(void *)(v0 + 1680), v16, &qword_1001E1380);
  sub_10004FAD0(v16, v14, *(void *)&v44[v43[6]], 0, v14 != 0, v15);
  if (v3)
  {
    uint64_t v26 = *(void *)(v0 + 1880);
    uint64_t v27 = *(void *)(v0 + 1872);
    uint64_t v28 = *(void *)(v0 + 1840);
    uint64_t v29 = *(uint64_t **)(v0 + 1688);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    if (*(unsigned char *)(v0 + 1457) == 1)
    {
      *(void *)(v0 + 2080) = v30;
      int64_t v32 = (void *)v29[2];
      *(void *)(v0 + 2088) = v32;
      sub_100036A4C(v26, v27, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
      unint64_t v33 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      uint64_t v34 = swift_allocObject();
      *(void *)(v0 + 2096) = v34;
      sub_1000368E8(v27, v34 + v33);
      uint64_t v46 = (uint64_t (*)(uint64_t, void (*)(uint64_t@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4910 + dword_1001E4910);
      swift_bridgeObjectRetain();
      id v35 = v32;
      char v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 2104) = v36;
      *char v36 = v0;
      v36[1] = sub_10002FD40;
      uint64_t v37 = *(void *)(v0 + 1744);
      uint64_t v38 = sub_100036E84;
    }
    else
    {
      *(void *)(v0 + 2120) = v30;
      uint64_t v39 = (void *)v29[2];
      *(void *)(v0 + 2128) = v39;
      sub_100036A4C(v26, v27, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
      int v40 = *(_DWORD *)(v28 + 80);
      *(_DWORD *)(v0 + 660) = v40;
      unint64_t v41 = (v40 + 16) & ~(unint64_t)v40;
      uint64_t v34 = swift_allocObject();
      *(void *)(v0 + 2136) = v34;
      sub_1000368E8(v27, v34 + v41);
      uint64_t v46 = (uint64_t (*)(uint64_t, void (*)(uint64_t@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4910 + dword_1001E4910);
      swift_bridgeObjectRetain();
      id v35 = v39;
      uint64_t v42 = (void *)swift_task_alloc();
      *(void *)(v0 + 2144) = v42;
      *uint64_t v42 = v0;
      v42[1] = sub_100030620;
      uint64_t v37 = *(void *)(v0 + 1728);
      uint64_t v38 = sub_10003694C;
    }
    return v46(v37, v38, v34, v31, v30, v35);
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 1880);
    uint64_t v18 = *(void *)(v0 + 1872);
    uint64_t v19 = *(void *)(v0 + 1840);
    uint64_t v20 = *(void *)(v0 + 1688);
    *(void *)(v0 + 2040) = *(void *)(v20 + 8);
    long long v21 = *(void **)(v20 + 16);
    *(void *)(v0 + 2048) = v21;
    sub_100036A4C(v17, v18, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
    unint64_t v22 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v23 = swift_allocObject();
    *(void *)(v0 + 2056) = v23;
    sub_1000368E8(v18, v23 + v22);
    uint64_t v45 = (uint64_t (*)(void))((char *)&dword_1001E4838 + dword_1001E4838);
    swift_bridgeObjectRetain();
    v21;
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 2064) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_10002F760;
    return v45();
  }
}

uint64_t sub_10002F760()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2072) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void **)(v2 + 2048);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v4 = sub_100031D2C;
  }
  else
  {
    uint64_t v17 = *(void **)(v2 + 2048);
    char v31 = *(unsigned char *)(v2 + 2284);
    uint64_t v29 = *(void *)(v2 + 2024);
    uint64_t v30 = *(void *)(v2 + 2032);
    char v28 = *(unsigned char *)(v2 + 2283);
    uint64_t v27 = *(void *)(v2 + 2016);
    char v25 = *(unsigned char *)(v2 + 2281);
    char v26 = *(unsigned char *)(v2 + 2282);
    char v24 = *(unsigned char *)(v2 + 1655);
    uint64_t v23 = *(void *)(v2 + 2008);
    char v22 = *(unsigned char *)(v2 + 1654);
    uint64_t v21 = *(void *)(v2 + 2000);
    __int16 v20 = *(_WORD *)(v2 + 1652);
    uint64_t v19 = *(void *)(v2 + 1992);
    char v18 = *(unsigned char *)(v2 + 1651);
    uint64_t v16 = *(void *)(v2 + 1984);
    __int16 v14 = *(_WORD *)(v2 + 1649);
    __int16 v15 = *(_WORD *)(v2 + 658);
    uint64_t v5 = *(void *)(v2 + 1976);
    long long v12 = *(_OWORD *)(v2 + 1944);
    long long v13 = *(_OWORD *)(v2 + 1960);
    long long v10 = *(_OWORD *)(v2 + 1912);
    long long v11 = *(_OWORD *)(v2 + 1928);
    __int16 v6 = *(_WORD *)(v2 + 1458);
    int v7 = *(_DWORD *)(v2 + 1460);
    swift_release();
    swift_bridgeObjectRelease();

    *(_WORD *)(v2 + 888) = v6;
    *(_DWORD *)(v2 + 890) = *(_DWORD *)(v2 + 1274);
    *(_WORD *)(v2 + 894) = *(_WORD *)(v2 + 1278);
    *(_OWORD *)(v2 + 896) = v10;
    *(_OWORD *)(v2 + 912) = v11;
    *(_OWORD *)(v2 + 928) = v12;
    *(_OWORD *)(v2 + 944) = v13;
    *(void *)(v2 + 960) = v5;
    *(_DWORD *)(v2 + 968) = v7;
    *(_WORD *)(v2 + 972) = v14;
    *(_WORD *)(v2 + 974) = v15;
    *(void *)(v2 + 976) = v16;
    *(unsigned char *)(v2 + 984) = v18;
    *(_DWORD *)(v2 + 988) = *(_DWORD *)(v2 + 1372);
    *(_DWORD *)(v2 + 985) = *(_DWORD *)(v2 + 1369);
    *(void *)(v2 + 992) = v19;
    *(_WORD *)(v2 + 1000) = v20;
    *(_DWORD *)(v2 + 1002) = *(_DWORD *)(v2 + 1386);
    *(_WORD *)(v2 + 1006) = *(_WORD *)(v2 + 1390);
    *(void *)(v2 + 1008) = v21;
    *(unsigned char *)(v2 + 1016) = v22;
    *(_DWORD *)(v2 + 1017) = *(_DWORD *)(v2 + 1401);
    *(_DWORD *)(v2 + 1020) = *(_DWORD *)(v2 + 1404);
    *(void *)(v2 + 10++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v23;
    *(unsigned char *)(v2 + 1032) = v24;
    *(unsigned char *)(v2 + 1033) = v25;
    *(unsigned char *)(v2 + 1034) = v26;
    int v8 = *(_DWORD *)(v2 + 1419);
    *(unsigned char *)(v2 + 1039) = *(unsigned char *)(v2 + 1423);
    *(_DWORD *)(v2 + 1035) = v8;
    *(void *)(v2 + 1040) = v27;
    *(unsigned char *)(v2 + 1048) = v28;
    *(_DWORD *)(v2 + 1052) = *(_DWORD *)(v2 + 1436);
    *(_DWORD *)(v2 + 1049) = *(_DWORD *)(v2 + 1433);
    *(void *)(v2 + 1056) = v29;
    *(void *)(v2 + 1064) = v30;
    *(unsigned char *)(v2 + 1072) = v31;
    sub_100036824(v2 + 888);
    uint64_t v4 = sub_10002FAEC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10002FAEC()
{
  uint64_t v1 = v0[226];
  uint64_t v2 = v0[220];
  uint64_t v3 = v0[219];
  uint64_t v4 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully added pending impression", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = v0[238];
  uint64_t v9 = v0[237];
  uint64_t v10 = v0[236];
  uint64_t v11 = v0[235];
  uint64_t v12 = v0[226];
  uint64_t v13 = v0[220];
  uint64_t v14 = v0[219];

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  sub_100036AB4(v11, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  __int16 v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10002FD40()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 2088);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_100031F68;
  }
  else {
    uint64_t v4 = sub_10002FEA8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10002FEA8()
{
  uint64_t v1 = *(void *)(v0 + 1840);
  uint64_t v2 = *(void *)(v0 + 1832);
  uint64_t v3 = *(void *)(v0 + 1736);
  sub_100036994(*(void *)(v0 + 1744), v3, &qword_1001E1378);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 1784);
    uint64_t v5 = *(void *)(v0 + 1760);
    uint64_t v6 = *(void *)(v0 + 1752);
    sub_100019960(*(void *)(v0 + 1736), &qword_1001E1378);
    uint64_t v7 = Logger.impression.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No pending impression found during finalization", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 1880);
    uint64_t v12 = *(void *)(v0 + 1784);
    uint64_t v13 = *(void *)(v0 + 1760);
    uint64_t v14 = *(void *)(v0 + 1752);
    uint64_t v15 = *(void *)(v0 + 1744);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_100036890();
    uint64_t v16 = swift_allocError();
    *uint64_t v17 = 10;
    swift_willThrow();
    goto LABEL_23;
  }
  uint64_t v18 = *(void *)(v0 + 1880);
  uint64_t v19 = *(void *)(v0 + 1864);
  uint64_t v20 = *(void *)(v0 + 1832);
  sub_1000368E8(*(void *)(v0 + 1736), v19);
  uint64_t v21 = *(int *)(v20 + 44);
  uint64_t v22 = *(void *)(v19 + v21);
  uint64_t v23 = *(void *)(v19 + v21 + 8);
  char v24 = (uint64_t *)(v18 + v21);
  uint64_t v25 = *v24;
  BOOL v26 = v22 == *v24 && v23 == v24[1];
  if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v61 = *(void *)(v0 + 1792);
    uint64_t v62 = *(void *)(v0 + 1760);
    uint64_t v63 = *(void *)(v0 + 1752);
    uint64_t v64 = Logger.impression.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v61, v64, v63);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      os_log_type_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Intake JWS doesn't match pending JWS", v67, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 1880);
    uint64_t v55 = *(void *)(v0 + 1864);
    uint64_t v68 = *(void *)(v0 + 1792);
    uint64_t v69 = *(void *)(v0 + 1760);
    uint64_t v70 = *(void *)(v0 + 1752);
    uint64_t v15 = *(void *)(v0 + 1744);

    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    sub_100036890();
    uint64_t v16 = swift_allocError();
    char v60 = 11;
    goto LABEL_22;
  }
  uint64_t v27 = *(uint64_t (**)())(v0 + 1864);
  uint64_t v28 = *(int *)(*(void *)(v0 + 1832) + 48);
  unint64_t v29 = *(void *)(*(void *)(v0 + 1880) + v28);
  unint64_t v30 = *(void *)((char *)v27 + v28);
  BOOL v31 = v29 >= v30;
  unint64_t v32 = v29 - v30;
  if (!v31)
  {
    __break(1u);
    return _swift_task_switch(v27, v23, v25);
  }
  if (v32 < 0x7D1)
  {
    uint64_t v48 = *(void *)(v0 + 1800);
    uint64_t v49 = *(void *)(v0 + 1760);
    uint64_t v50 = *(void *)(v0 + 1752);
    uint64_t v51 = Logger.impression.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v48, v51, v50);
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Impression ended too soon", v54, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 1880);
    uint64_t v55 = *(void *)(v0 + 1864);
    uint64_t v56 = *(void *)(v0 + 1800);
    uint64_t v57 = *(void *)(v0 + 1760);
    uint64_t v58 = *(void *)(v0 + 1752);
    uint64_t v15 = *(void *)(v0 + 1744);

    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    sub_100036890();
    uint64_t v16 = swift_allocError();
    char v60 = 12;
LABEL_22:
    char *v59 = v60;
    swift_willThrow();
    sub_100036AB4(v55, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
LABEL_23:
    sub_100019960(v15, &qword_1001E1378);
    sub_100036AB4(v11, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
    *(void *)(v0 + 2264) = v16;
    char v101 = *(unsigned char *)(v0 + 2284);
    uint64_t v98 = *(void *)(v0 + 2024);
    uint64_t v99 = *(void *)(v0 + 2032);
    uint64_t v97 = *(void *)(v0 + 2016);
    __int16 v96 = *(_WORD *)(v0 + 2281);
    uint64_t v94 = *(void *)(v0 + 2000);
    uint64_t v95 = *(void *)(v0 + 2008);
    char v93 = *(unsigned char *)(v0 + 1653);
    uint64_t v91 = *(void *)(v0 + 1984);
    uint64_t v92 = *(void *)(v0 + 1992);
    __int16 v90 = *(_WORD *)(v0 + 1649);
    uint64_t v89 = *(void *)(v0 + 1976);
    long long v87 = *(_OWORD *)(v0 + 1944);
    long long v88 = *(_OWORD *)(v0 + 1960);
    __int16 v86 = *(_WORD *)(v0 + 1458);
    uint64_t v71 = *(void *)(v0 + 1688);
    int v85 = *(_DWORD *)(v0 + 1460);
    (*(void (**)(void, void))(*(void *)(v0 + 1896) + 8))(*(void *)(v0 + 1904), *(void *)(v0 + 1888));
    uint64_t v72 = sub_100094708(v16);
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v79 = sub_100012D78((void *)(v71 + 24), *(void *)(v71 + 48));
    char v80 = *(unsigned char *)(v0 + 2280);
    char v81 = *(unsigned char *)(v0 + 2288);
    char v82 = *(unsigned char *)(v0 + 2304);
    char v83 = *(unsigned char *)(v0 + 2296);
    char v84 = *(unsigned char *)(v0 + 2312);
    *(_WORD *)(v0 + 1080) = v86;
    *(void *)(v0 + 1088) = v72;
    *(void *)(v0 + 1096) = v74;
    *(void *)(v0 + 1104) = v76;
    *(void *)(v0 + 1112) = v78;
    *(_OWORD *)(v0 + 1120) = v87;
    *(_OWORD *)(v0 + 1136) = v88;
    *(void *)(v0 + 1152) = v89;
    *(_DWORD *)(v0 + 1160) = v85;
    *(_WORD *)(v0 + 1164) = v90;
    *(void *)(v0 + 1168) = v91;
    *(unsigned char *)(v0 + 1176) = v80;
    *(void *)(v0 + 1184) = v92;
    *(unsigned char *)(v0 + 1192) = v81;
    *(unsigned char *)(v0 + 1193) = v93;
    *(void *)(v0 + 1200) = v94;
    *(unsigned char *)(v0 + 1208) = v82;
    *(void *)(v0 + 1216) = v95;
    *(unsigned char *)(v0 + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v83;
    *(_WORD *)(v0 + 1225) = v96;
    *(void *)(v0 + 1232) = v97;
    *(unsigned char *)(v0 + 1240) = v84;
    *(void *)(v0 + 1248) = v98;
    *(void *)(v0 + 1256) = v99;
    *(unsigned char *)(v0 + 1264) = v101;
    uint64_t v23 = *v79;
    *(void *)(v0 + 2272) = *v79;
    uint64_t v27 = sub_10003190C;
    uint64_t v25 = 0;
    return _swift_task_switch(v27, v23, v25);
  }
  uint64_t v33 = *(void *)(v0 + 1744);
  sub_100036AB4((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  sub_100019960(v33, &qword_1001E1378);
  uint64_t v34 = *(void *)(v0 + 1880);
  uint64_t v35 = *(void *)(v0 + 1872);
  uint64_t v36 = *(void *)(v0 + 1840);
  uint64_t v37 = *(uint64_t **)(v0 + 1688);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *(void *)(v0 + 2120) = v38;
  int v40 = (void *)v37[2];
  *(void *)(v0 + 2128) = v40;
  sub_100036A4C(v34, v35, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  int v41 = *(_DWORD *)(v36 + 80);
  *(_DWORD *)(v0 + 660) = v41;
  unint64_t v42 = (v41 + 16) & ~(unint64_t)v41;
  uint64_t v43 = swift_allocObject();
  *(void *)(v0 + 2136) = v43;
  sub_1000368E8(v35, v43 + v42);
  uint64_t v100 = (uint64_t (*)(uint64_t, void (*)(uint64_t@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4910 + dword_1001E4910);
  swift_bridgeObjectRetain();
  id v44 = v40;
  uint64_t v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 2144) = v45;
  void *v45 = v0;
  v45[1] = sub_100030620;
  uint64_t v46 = *(void *)(v0 + 1728);
  return v100(v46, sub_10003694C, v43, v39, v38, v44);
}

uint64_t sub_100030620()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 2128);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000321A4;
  }
  else {
    uint64_t v4 = sub_100030788;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100030788()
{
  uint64_t v1 = *(void *)(v0 + 1840);
  uint64_t v2 = *(void *)(v0 + 1832);
  uint64_t v3 = *(void *)(v0 + 1720);
  sub_100036994(*(void *)(v0 + 1728), v3, &qword_1001E1378);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_100019960(*(void *)(v0 + 1720), &qword_1001E1378);
LABEL_8:
    uint64_t v11 = *(void *)(v0 + 1880);
    uint64_t v12 = *(void *)(v0 + 1872);
    uint64_t v13 = *(void *)(v0 + 1688);
    unint64_t v14 = (*(unsigned __int8 *)(v0 + 660) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 660);
    *(void *)(v0 + 2160) = *(void *)(v13 + 8);
    uint64_t v15 = *(void **)(v13 + 16);
    *(void *)(v0 + 2168) = v15;
    sub_100036A4C(v11, v12, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
    uint64_t v16 = swift_allocObject();
    *(void *)(v0 + 2176) = v16;
    sub_1000368E8(v12, v16 + v14);
    uint64_t v64 = (uint64_t (*)(void))((char *)&dword_1001E4838 + dword_1001E4838);
    swift_bridgeObjectRetain();
    v15;
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 2184) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100030CC0;
    return v64();
  }
  uint64_t v4 = *(void *)(v0 + 1880);
  uint64_t v5 = *(void *)(v0 + 1856);
  uint64_t v6 = *(void *)(v0 + 1832);
  sub_1000368E8(*(void *)(v0 + 1720), v5);
  uint64_t v7 = *(int *)(v6 + 40);
  int v8 = *(unsigned __int8 *)(v5 + v7);
  int v9 = *(unsigned __int8 *)(v4 + v7);
  if (v8 != 1 || v9 != 0)
  {
    sub_100036AB4(*(void *)(v0 + 1856), (uint64_t (*)(void))type metadata accessor for ImpressionModel);
    goto LABEL_8;
  }
  uint64_t v19 = *(void *)(v0 + 1776);
  uint64_t v20 = *(void *)(v0 + 1760);
  uint64_t v21 = *(void *)(v0 + 1752);
  uint64_t v22 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v22, v21);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Finalized impression with higher interaction type already exists", v25, 2u);
    swift_slowDealloc();
  }
  uint64_t v26 = *(void *)(v0 + 1880);
  uint64_t v27 = *(void *)(v0 + 1856);
  uint64_t v28 = *(void *)(v0 + 1776);
  uint64_t v29 = *(void *)(v0 + 1760);
  uint64_t v30 = *(void *)(v0 + 1752);
  uint64_t v31 = *(void *)(v0 + 1728);

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  sub_100036890();
  uint64_t v32 = swift_allocError();
  *uint64_t v33 = 13;
  swift_willThrow();
  sub_100036AB4(v27, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  sub_100019960(v31, &qword_1001E1378);
  sub_100036AB4(v26, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  *(void *)(v0 + 2264) = v32;
  char v65 = *(unsigned char *)(v0 + 2284);
  uint64_t v62 = *(void *)(v0 + 2024);
  uint64_t v63 = *(void *)(v0 + 2032);
  uint64_t v61 = *(void *)(v0 + 2016);
  __int16 v60 = *(_WORD *)(v0 + 2281);
  uint64_t v58 = *(void *)(v0 + 2000);
  uint64_t v59 = *(void *)(v0 + 2008);
  char v57 = *(unsigned char *)(v0 + 1653);
  uint64_t v55 = *(void *)(v0 + 1984);
  uint64_t v56 = *(void *)(v0 + 1992);
  __int16 v54 = *(_WORD *)(v0 + 1649);
  uint64_t v53 = *(void *)(v0 + 1976);
  long long v51 = *(_OWORD *)(v0 + 1944);
  long long v52 = *(_OWORD *)(v0 + 1960);
  __int16 v50 = *(_WORD *)(v0 + 1458);
  uint64_t v34 = *(void *)(v0 + 1688);
  int v49 = *(_DWORD *)(v0 + 1460);
  (*(void (**)(void, void))(*(void *)(v0 + 1896) + 8))(*(void *)(v0 + 1904), *(void *)(v0 + 1888));
  uint64_t v35 = sub_100094708(v32);
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v42 = sub_100012D78((void *)(v34 + 24), *(void *)(v34 + 48));
  char v43 = *(unsigned char *)(v0 + 2280);
  char v44 = *(unsigned char *)(v0 + 2288);
  char v45 = *(unsigned char *)(v0 + 2304);
  char v46 = *(unsigned char *)(v0 + 2296);
  char v47 = *(unsigned char *)(v0 + 2312);
  *(_WORD *)(v0 + 1080) = v50;
  *(void *)(v0 + 1088) = v35;
  *(void *)(v0 + 1096) = v37;
  *(void *)(v0 + 1104) = v39;
  *(void *)(v0 + 1112) = v41;
  *(_OWORD *)(v0 + 1120) = v51;
  *(_OWORD *)(v0 + 1136) = v52;
  *(void *)(v0 + 1152) = v53;
  *(_DWORD *)(v0 + 1160) = v49;
  *(_WORD *)(v0 + 1164) = v54;
  *(void *)(v0 + 1168) = v55;
  *(unsigned char *)(v0 + 1176) = v43;
  *(void *)(v0 + 1184) = v56;
  *(unsigned char *)(v0 + 1192) = v44;
  *(unsigned char *)(v0 + 1193) = v57;
  *(void *)(v0 + 1200) = v58;
  *(unsigned char *)(v0 + 1208) = v45;
  *(void *)(v0 + 1216) = v59;
  *(unsigned char *)(v0 + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v46;
  *(_WORD *)(v0 + 1225) = v60;
  *(void *)(v0 + 1232) = v61;
  *(unsigned char *)(v0 + 1240) = v47;
  *(void *)(v0 + 1248) = v62;
  *(void *)(v0 + 1256) = v63;
  *(unsigned char *)(v0 + 1264) = v65;
  uint64_t v48 = *v42;
  *(void *)(v0 + 2272) = *v42;
  return _swift_task_switch(sub_10003190C, v48, 0);
}

uint64_t sub_100030CC0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 2168);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000323E0;
  }
  else {
    uint64_t v4 = sub_100030E28;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100030E28()
{
  uint64_t v3 = (uint64_t (*)(char))((char *)&dword_1001E4088 + dword_1001E4088);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 2200) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100030ECC;
  return v3(7);
}

uint64_t sub_100030ECC(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 2208) = a1;
  *(unsigned char *)(v3 + 2285) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100030FD0, 0, 0);
}

uint64_t sub_100030FD0()
{
  uint64_t v1 = *(void *)(v0 + 1880);
  uint64_t v2 = *(void *)(v0 + 1872);
  uint64_t v3 = *(void *)(v0 + 1848);
  uint64_t v4 = *(void *)(v0 + 1688);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 660) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 660);
  if (*(unsigned char *)(v0 + 2285)) {
    uint64_t v6 = 15;
  }
  else {
    uint64_t v6 = *(void *)(v0 + 2208);
  }
  *(void *)(v0 + 2216) = *(void *)(v4 + 8);
  uint64_t v7 = *(void **)(v4 + 16);
  *(void *)(v0 + 22++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  sub_100036A4C(v1, v2, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 2232) = v8;
  sub_1000368E8(v2, v8 + v5);
  *(void *)(v8 + ((v3 + v5 + 7) & 0xFFFFFFFFFFFFFFF8)) = v6;
  uint64_t v11 = (uint64_t (*)(void))((char *)&dword_1001E4838 + dword_1001E4838);
  swift_bridgeObjectRetain();
  v7;
  int v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 2240) = v9;
  *int v9 = v0;
  v9[1] = sub_10003115C;
  return v11();
}

uint64_t sub_10003115C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2248) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 2224);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_100032630;
  }
  else {
    uint64_t v4 = sub_1000312C4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000312C4()
{
  uint64_t v1 = *(void *)(v0 + 1768);
  uint64_t v2 = *(void *)(v0 + 1760);
  uint64_t v3 = *(void *)(v0 + 1752);
  uint64_t v4 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully finalized view through impression", v7, 2u);
    swift_slowDealloc();
  }
  char v34 = *(unsigned char *)(v0 + 2284);
  uint64_t v33 = *(void *)(v0 + 2032);
  uint64_t v32 = *(void *)(v0 + 2024);
  uint64_t v31 = *(void *)(v0 + 2016);
  __int16 v30 = *(_WORD *)(v0 + 2281);
  uint64_t v29 = *(void *)(v0 + 2008);
  uint64_t v28 = *(void *)(v0 + 2000);
  char v27 = *(unsigned char *)(v0 + 1653);
  uint64_t v25 = *(void *)(v0 + 1984);
  uint64_t v26 = *(void *)(v0 + 1992);
  __int16 v24 = *(_WORD *)(v0 + 658);
  __int16 v23 = *(_WORD *)(v0 + 1649);
  uint64_t v22 = *(void *)(v0 + 1976);
  long long v20 = *(_OWORD *)(v0 + 1944);
  long long v21 = *(_OWORD *)(v0 + 1960);
  long long v18 = *(_OWORD *)(v0 + 1912);
  long long v19 = *(_OWORD *)(v0 + 1928);
  __int16 v8 = *(_WORD *)(v0 + 1458);
  uint64_t v9 = *(void *)(v0 + 1768);
  uint64_t v10 = *(void *)(v0 + 1760);
  uint64_t v11 = *(void *)(v0 + 1752);
  uint64_t v12 = *(void *)(v0 + 1688);
  int v13 = *(_DWORD *)(v0 + 1460);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  unint64_t v14 = sub_100012D78((void *)(v12 + 24), *(void *)(v12 + 48));
  *(_WORD *)(v0 + 1464) = v8;
  *(_DWORD *)(v0 + 1466) = *(_DWORD *)(v0 + 442);
  *(_WORD *)(v0 + 1470) = *(_WORD *)(v0 + 446);
  *(_OWORD *)(v0 + 1472) = v18;
  *(_OWORD *)(v0 + 1488) = v19;
  *(_OWORD *)(v0 + 1504) = v20;
  *(_OWORD *)(v0 + 1520) = v21;
  *(void *)(v0 + 1536) = v22;
  *(_DWORD *)(v0 + 1544) = v13;
  *(_WORD *)(v0 + 1548) = v23;
  *(_WORD *)(v0 + 1550) = v24;
  *(void *)(v0 + 1552) = v25;
  *(unsigned char *)(v0 + 1560) = *(unsigned char *)(v0 + 2280);
  int v15 = *(_DWORD *)(v0 + 881);
  *(_DWORD *)(v0 + 1564) = *(_DWORD *)(v0 + 884);
  *(_DWORD *)(v0 + 1561) = v15;
  *(void *)(v0 + 1568) = v26;
  *(unsigned char *)(v0 + 1576) = *(unsigned char *)(v0 + 2288);
  *(unsigned char *)(v0 + 1577) = v27;
  *(_DWORD *)(v0 + 1578) = *(_DWORD *)(v0 + 226);
  *(_WORD *)(v0 + 1582) = *(_WORD *)(v0 + 230);
  *(void *)(v0 + 1584) = v28;
  *(unsigned char *)(v0 + 1592) = *(unsigned char *)(v0 + 2304);
  *(_DWORD *)(v0 + 1593) = *(_DWORD *)(v0 + 874);
  *(_DWORD *)(v0 + 1596) = *(_DWORD *)(v0 + 877);
  *(void *)(v0 + 1600) = v29;
  *(unsigned char *)(v0 + 1608) = *(unsigned char *)(v0 + 2296);
  *(_WORD *)(v0 + 1609) = v30;
  *(unsigned char *)(v0 + 1615) = *(unsigned char *)(v0 + 1269);
  *(_DWORD *)(v0 + 1611) = *(_DWORD *)(v0 + 1265);
  *(void *)(v0 + 1616) = v31;
  *(unsigned char *)(v0 + 16++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v0 + 2312);
  *(_DWORD *)(v0 + 1628) = *(_DWORD *)(v0 + 1076);
  *(_DWORD *)(v0 + 1625) = *(_DWORD *)(v0 + 1073);
  *(void *)(v0 + 1632) = v32;
  *(void *)(v0 + 1640) = v33;
  *(unsigned char *)(v0 + 1648) = v34;
  uint64_t v16 = *v14;
  *(void *)(v0 + 2256) = *v14;
  return _swift_task_switch(sub_100031620, v16, 0);
}

uint64_t sub_100031620()
{
  uint64_t v1 = *(void *)(v0 + 1712);
  uint64_t v2 = *(void *)(v0 + 1704);
  uint64_t v3 = *(void *)(v0 + 1696);
  uint64_t v4 = *(void *)(v0 + 1672);
  long long v5 = *(_OWORD *)(v0 + 1608);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 1592);
  *(_OWORD *)(v0 + 376) = v5;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 1624);
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 1633);
  long long v6 = *(_OWORD *)(v0 + 1544);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 1528);
  *(_OWORD *)(v0 + 312) = v6;
  long long v7 = *(_OWORD *)(v0 + 1576);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 1560);
  *(_OWORD *)(v0 + 344) = v7;
  long long v8 = *(_OWORD *)(v0 + 1480);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 1464);
  *(_OWORD *)(v0 + 248) = v8;
  long long v9 = *(_OWORD *)(v0 + 1512);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 1496);
  *(_OWORD *)(v0 + 280) = v9;
  *(void *)(v0 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(v0 + 432) = 0;
  *(_WORD *)(v0 + 440) = 256;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 16);
  sub_10001547C(v0 + 1464);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1464);
  return _swift_task_switch(sub_100031764, 0, 0);
}

uint64_t sub_100031764()
{
  uint64_t v1 = v0[238];
  uint64_t v2 = v0[237];
  uint64_t v3 = v0[236];
  uint64_t v4 = v0[235];
  sub_100019960(v0[216], &qword_1001E1378);
  sub_100036AB4(v4, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10003190C()
{
  uint64_t v1 = *(void *)(v0 + 1712);
  uint64_t v2 = *(void *)(v0 + 1704);
  uint64_t v3 = *(void *)(v0 + 1696);
  uint64_t v4 = *(void *)(v0 + 1672);
  long long v5 = *(_OWORD *)(v0 + 1224);
  *(_OWORD *)(v0 + 792) = *(_OWORD *)(v0 + 1208);
  *(_OWORD *)(v0 + 808) = v5;
  *(_OWORD *)(v0 + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 1240);
  *(_OWORD *)(v0 + 833) = *(_OWORD *)(v0 + 1249);
  long long v6 = *(_OWORD *)(v0 + 1160);
  *(_OWORD *)(v0 + 728) = *(_OWORD *)(v0 + 1144);
  *(_OWORD *)(v0 + 744) = v6;
  long long v7 = *(_OWORD *)(v0 + 1192);
  *(_OWORD *)(v0 + 760) = *(_OWORD *)(v0 + 1176);
  *(_OWORD *)(v0 + 776) = v7;
  long long v8 = *(_OWORD *)(v0 + 1096);
  *(_OWORD *)(v0 + 664) = *(_OWORD *)(v0 + 1080);
  *(_OWORD *)(v0 + 680) = v8;
  long long v9 = *(_OWORD *)(v0 + 1128);
  *(_OWORD *)(v0 + 696) = *(_OWORD *)(v0 + 1112);
  *(_OWORD *)(v0 + 712) = v9;
  *(void *)(v0 + 856) = v4;
  *(void *)(v0 + 864) = 0;
  *(_WORD *)(v0 + 872) = 256;
  sub_10003675C(v0 + 664);
  sub_1000367C8(v0 + 664, v0 + 448);
  sub_10001547C(v0 + 1080);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1080);
  return _swift_task_switch(sub_100031A50, 0, 0);
}

uint64_t sub_100031A50()
{
  *(void *)(v0 + 1656) = *(void *)(v0 + 2264);
  swift_errorRetain();
  sub_100012960(&qword_1001E12E8);
  if (swift_dynamicCast())
  {
    int v1 = *(unsigned __int8 *)(v0 + 1270);
    if (v1 == 13)
    {
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_7;
    }
    sub_100036890();
    swift_allocError();
    *uint64_t v3 = v1;
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
  return v2();
}

uint64_t sub_100031D2C()
{
  sub_100036AB4(*(void *)(v0 + 1880), (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  uint64_t v1 = *(void *)(v0 + 2072);
  *(void *)(v0 + 2264) = v1;
  char v33 = *(unsigned char *)(v0 + 2284);
  uint64_t v31 = *(void *)(v0 + 2024);
  uint64_t v32 = *(void *)(v0 + 2032);
  uint64_t v30 = *(void *)(v0 + 2016);
  __int16 v29 = *(_WORD *)(v0 + 2281);
  uint64_t v27 = *(void *)(v0 + 2000);
  uint64_t v28 = *(void *)(v0 + 2008);
  char v26 = *(unsigned char *)(v0 + 1653);
  uint64_t v24 = *(void *)(v0 + 1984);
  uint64_t v25 = *(void *)(v0 + 1992);
  __int16 v23 = *(_WORD *)(v0 + 1649);
  uint64_t v22 = *(void *)(v0 + 1976);
  long long v20 = *(_OWORD *)(v0 + 1944);
  long long v21 = *(_OWORD *)(v0 + 1960);
  __int16 v2 = *(_WORD *)(v0 + 1458);
  uint64_t v3 = *(void *)(v0 + 1688);
  int v19 = *(_DWORD *)(v0 + 1460);
  (*(void (**)(void, void))(*(void *)(v0 + 1896) + 8))(*(void *)(v0 + 1904), *(void *)(v0 + 1888));
  uint64_t v4 = sub_100094708(v1);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_100012D78((void *)(v3 + 24), *(void *)(v3 + 48));
  char v12 = *(unsigned char *)(v0 + 2280);
  char v13 = *(unsigned char *)(v0 + 2288);
  char v14 = *(unsigned char *)(v0 + 2304);
  char v15 = *(unsigned char *)(v0 + 2296);
  char v16 = *(unsigned char *)(v0 + 2312);
  *(_WORD *)(v0 + 1080) = v2;
  *(void *)(v0 + 1088) = v4;
  *(void *)(v0 + 1096) = v6;
  *(void *)(v0 + 1104) = v8;
  *(void *)(v0 + 1112) = v10;
  *(_OWORD *)(v0 + 1120) = v20;
  *(_OWORD *)(v0 + 1136) = v21;
  *(void *)(v0 + 1152) = v22;
  *(_DWORD *)(v0 + 1160) = v19;
  *(_WORD *)(v0 + 1164) = v23;
  *(void *)(v0 + 1168) = v24;
  *(unsigned char *)(v0 + 1176) = v12;
  *(void *)(v0 + 1184) = v25;
  *(unsigned char *)(v0 + 1192) = v13;
  *(unsigned char *)(v0 + 1193) = v26;
  *(void *)(v0 + 1200) = v27;
  *(unsigned char *)(v0 + 1208) = v14;
  *(void *)(v0 + 1216) = v28;
  *(unsigned char *)(v0 + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
  *(_WORD *)(v0 + 1225) = v29;
  *(void *)(v0 + 1232) = v30;
  *(unsigned char *)(v0 + 1240) = v16;
  *(void *)(v0 + 1248) = v31;
  *(void *)(v0 + 1256) = v32;
  *(unsigned char *)(v0 + 1264) = v33;
  uint64_t v17 = *v11;
  *(void *)(v0 + 2272) = *v11;
  return _swift_task_switch(sub_10003190C, v17, 0);
}

uint64_t sub_100031F68()
{
  sub_100036AB4(*(void *)(v0 + 1880), (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  uint64_t v1 = *(void *)(v0 + 2112);
  *(void *)(v0 + 2264) = v1;
  char v33 = *(unsigned char *)(v0 + 2284);
  uint64_t v31 = *(void *)(v0 + 2024);
  uint64_t v32 = *(void *)(v0 + 2032);
  uint64_t v30 = *(void *)(v0 + 2016);
  __int16 v29 = *(_WORD *)(v0 + 2281);
  uint64_t v27 = *(void *)(v0 + 2000);
  uint64_t v28 = *(void *)(v0 + 2008);
  char v26 = *(unsigned char *)(v0 + 1653);
  uint64_t v24 = *(void *)(v0 + 1984);
  uint64_t v25 = *(void *)(v0 + 1992);
  __int16 v23 = *(_WORD *)(v0 + 1649);
  uint64_t v22 = *(void *)(v0 + 1976);
  long long v20 = *(_OWORD *)(v0 + 1944);
  long long v21 = *(_OWORD *)(v0 + 1960);
  __int16 v2 = *(_WORD *)(v0 + 1458);
  uint64_t v3 = *(void *)(v0 + 1688);
  int v19 = *(_DWORD *)(v0 + 1460);
  (*(void (**)(void, void))(*(void *)(v0 + 1896) + 8))(*(void *)(v0 + 1904), *(void *)(v0 + 1888));
  uint64_t v4 = sub_100094708(v1);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_100012D78((void *)(v3 + 24), *(void *)(v3 + 48));
  char v12 = *(unsigned char *)(v0 + 2280);
  char v13 = *(unsigned char *)(v0 + 2288);
  char v14 = *(unsigned char *)(v0 + 2304);
  char v15 = *(unsigned char *)(v0 + 2296);
  char v16 = *(unsigned char *)(v0 + 2312);
  *(_WORD *)(v0 + 1080) = v2;
  *(void *)(v0 + 1088) = v4;
  *(void *)(v0 + 1096) = v6;
  *(void *)(v0 + 1104) = v8;
  *(void *)(v0 + 1112) = v10;
  *(_OWORD *)(v0 + 1120) = v20;
  *(_OWORD *)(v0 + 1136) = v21;
  *(void *)(v0 + 1152) = v22;
  *(_DWORD *)(v0 + 1160) = v19;
  *(_WORD *)(v0 + 1164) = v23;
  *(void *)(v0 + 1168) = v24;
  *(unsigned char *)(v0 + 1176) = v12;
  *(void *)(v0 + 1184) = v25;
  *(unsigned char *)(v0 + 1192) = v13;
  *(unsigned char *)(v0 + 1193) = v26;
  *(void *)(v0 + 1200) = v27;
  *(unsigned char *)(v0 + 1208) = v14;
  *(void *)(v0 + 1216) = v28;
  *(unsigned char *)(v0 + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
  *(_WORD *)(v0 + 1225) = v29;
  *(void *)(v0 + 1232) = v30;
  *(unsigned char *)(v0 + 1240) = v16;
  *(void *)(v0 + 1248) = v31;
  *(void *)(v0 + 1256) = v32;
  *(unsigned char *)(v0 + 1264) = v33;
  uint64_t v17 = *v11;
  *(void *)(v0 + 2272) = *v11;
  return _swift_task_switch(sub_10003190C, v17, 0);
}

uint64_t sub_1000321A4()
{
  sub_100036AB4(*(void *)(v0 + 1880), (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  uint64_t v1 = *(void *)(v0 + 2152);
  *(void *)(v0 + 2264) = v1;
  char v33 = *(unsigned char *)(v0 + 2284);
  uint64_t v31 = *(void *)(v0 + 2024);
  uint64_t v32 = *(void *)(v0 + 2032);
  uint64_t v30 = *(void *)(v0 + 2016);
  __int16 v29 = *(_WORD *)(v0 + 2281);
  uint64_t v27 = *(void *)(v0 + 2000);
  uint64_t v28 = *(void *)(v0 + 2008);
  char v26 = *(unsigned char *)(v0 + 1653);
  uint64_t v24 = *(void *)(v0 + 1984);
  uint64_t v25 = *(void *)(v0 + 1992);
  __int16 v23 = *(_WORD *)(v0 + 1649);
  uint64_t v22 = *(void *)(v0 + 1976);
  long long v20 = *(_OWORD *)(v0 + 1944);
  long long v21 = *(_OWORD *)(v0 + 1960);
  __int16 v2 = *(_WORD *)(v0 + 1458);
  uint64_t v3 = *(void *)(v0 + 1688);
  int v19 = *(_DWORD *)(v0 + 1460);
  (*(void (**)(void, void))(*(void *)(v0 + 1896) + 8))(*(void *)(v0 + 1904), *(void *)(v0 + 1888));
  uint64_t v4 = sub_100094708(v1);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_100012D78((void *)(v3 + 24), *(void *)(v3 + 48));
  char v12 = *(unsigned char *)(v0 + 2280);
  char v13 = *(unsigned char *)(v0 + 2288);
  char v14 = *(unsigned char *)(v0 + 2304);
  char v15 = *(unsigned char *)(v0 + 2296);
  char v16 = *(unsigned char *)(v0 + 2312);
  *(_WORD *)(v0 + 1080) = v2;
  *(void *)(v0 + 1088) = v4;
  *(void *)(v0 + 1096) = v6;
  *(void *)(v0 + 1104) = v8;
  *(void *)(v0 + 1112) = v10;
  *(_OWORD *)(v0 + 1120) = v20;
  *(_OWORD *)(v0 + 1136) = v21;
  *(void *)(v0 + 1152) = v22;
  *(_DWORD *)(v0 + 1160) = v19;
  *(_WORD *)(v0 + 1164) = v23;
  *(void *)(v0 + 1168) = v24;
  *(unsigned char *)(v0 + 1176) = v12;
  *(void *)(v0 + 1184) = v25;
  *(unsigned char *)(v0 + 1192) = v13;
  *(unsigned char *)(v0 + 1193) = v26;
  *(void *)(v0 + 1200) = v27;
  *(unsigned char *)(v0 + 1208) = v14;
  *(void *)(v0 + 1216) = v28;
  *(unsigned char *)(v0 + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
  *(_WORD *)(v0 + 1225) = v29;
  *(void *)(v0 + 1232) = v30;
  *(unsigned char *)(v0 + 1240) = v16;
  *(void *)(v0 + 1248) = v31;
  *(void *)(v0 + 1256) = v32;
  *(unsigned char *)(v0 + 1264) = v33;
  uint64_t v17 = *v11;
  *(void *)(v0 + 2272) = *v11;
  return _swift_task_switch(sub_10003190C, v17, 0);
}

uint64_t sub_1000323E0()
{
  uint64_t v1 = *(void *)(v0 + 1880);
  sub_100019960(*(void *)(v0 + 1728), &qword_1001E1378);
  sub_100036AB4(v1, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  uint64_t v2 = *(void *)(v0 + 2192);
  *(void *)(v0 + 2264) = v2;
  char v34 = *(unsigned char *)(v0 + 2284);
  uint64_t v32 = *(void *)(v0 + 2024);
  uint64_t v33 = *(void *)(v0 + 2032);
  uint64_t v31 = *(void *)(v0 + 2016);
  __int16 v30 = *(_WORD *)(v0 + 2281);
  uint64_t v28 = *(void *)(v0 + 2000);
  uint64_t v29 = *(void *)(v0 + 2008);
  char v27 = *(unsigned char *)(v0 + 1653);
  uint64_t v25 = *(void *)(v0 + 1984);
  uint64_t v26 = *(void *)(v0 + 1992);
  __int16 v24 = *(_WORD *)(v0 + 1649);
  uint64_t v23 = *(void *)(v0 + 1976);
  long long v21 = *(_OWORD *)(v0 + 1944);
  long long v22 = *(_OWORD *)(v0 + 1960);
  __int16 v3 = *(_WORD *)(v0 + 1458);
  uint64_t v4 = *(void *)(v0 + 1688);
  int v20 = *(_DWORD *)(v0 + 1460);
  (*(void (**)(void, void))(*(void *)(v0 + 1896) + 8))(*(void *)(v0 + 1904), *(void *)(v0 + 1888));
  uint64_t v5 = sub_100094708(v2);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v12 = sub_100012D78((void *)(v4 + 24), *(void *)(v4 + 48));
  char v13 = *(unsigned char *)(v0 + 2280);
  char v14 = *(unsigned char *)(v0 + 2288);
  char v15 = *(unsigned char *)(v0 + 2304);
  char v16 = *(unsigned char *)(v0 + 2296);
  char v17 = *(unsigned char *)(v0 + 2312);
  *(_WORD *)(v0 + 1080) = v3;
  *(void *)(v0 + 1088) = v5;
  *(void *)(v0 + 1096) = v7;
  *(void *)(v0 + 1104) = v9;
  *(void *)(v0 + 1112) = v11;
  *(_OWORD *)(v0 + 1120) = v21;
  *(_OWORD *)(v0 + 1136) = v22;
  *(void *)(v0 + 1152) = v23;
  *(_DWORD *)(v0 + 1160) = v20;
  *(_WORD *)(v0 + 1164) = v24;
  *(void *)(v0 + 1168) = v25;
  *(unsigned char *)(v0 + 1176) = v13;
  *(void *)(v0 + 1184) = v26;
  *(unsigned char *)(v0 + 1192) = v14;
  *(unsigned char *)(v0 + 1193) = v27;
  *(void *)(v0 + 1200) = v28;
  *(unsigned char *)(v0 + 1208) = v15;
  *(void *)(v0 + 1216) = v29;
  *(unsigned char *)(v0 + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v16;
  *(_WORD *)(v0 + 1225) = v30;
  *(void *)(v0 + 1232) = v31;
  *(unsigned char *)(v0 + 1240) = v17;
  *(void *)(v0 + 1248) = v32;
  *(void *)(v0 + 1256) = v33;
  *(unsigned char *)(v0 + 1264) = v34;
  uint64_t v18 = *v12;
  *(void *)(v0 + 2272) = *v12;
  return _swift_task_switch(sub_10003190C, v18, 0);
}

uint64_t sub_100032630()
{
  uint64_t v1 = *(void *)(v0 + 1880);
  sub_100019960(*(void *)(v0 + 1728), &qword_1001E1378);
  sub_100036AB4(v1, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  uint64_t v2 = *(void *)(v0 + 2248);
  *(void *)(v0 + 2264) = v2;
  char v34 = *(unsigned char *)(v0 + 2284);
  uint64_t v32 = *(void *)(v0 + 2024);
  uint64_t v33 = *(void *)(v0 + 2032);
  uint64_t v31 = *(void *)(v0 + 2016);
  __int16 v30 = *(_WORD *)(v0 + 2281);
  uint64_t v28 = *(void *)(v0 + 2000);
  uint64_t v29 = *(void *)(v0 + 2008);
  char v27 = *(unsigned char *)(v0 + 1653);
  uint64_t v25 = *(void *)(v0 + 1984);
  uint64_t v26 = *(void *)(v0 + 1992);
  __int16 v24 = *(_WORD *)(v0 + 1649);
  uint64_t v23 = *(void *)(v0 + 1976);
  long long v21 = *(_OWORD *)(v0 + 1944);
  long long v22 = *(_OWORD *)(v0 + 1960);
  __int16 v3 = *(_WORD *)(v0 + 1458);
  uint64_t v4 = *(void *)(v0 + 1688);
  int v20 = *(_DWORD *)(v0 + 1460);
  (*(void (**)(void, void))(*(void *)(v0 + 1896) + 8))(*(void *)(v0 + 1904), *(void *)(v0 + 1888));
  uint64_t v5 = sub_100094708(v2);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v12 = sub_100012D78((void *)(v4 + 24), *(void *)(v4 + 48));
  char v13 = *(unsigned char *)(v0 + 2280);
  char v14 = *(unsigned char *)(v0 + 2288);
  char v15 = *(unsigned char *)(v0 + 2304);
  char v16 = *(unsigned char *)(v0 + 2296);
  char v17 = *(unsigned char *)(v0 + 2312);
  *(_WORD *)(v0 + 1080) = v3;
  *(void *)(v0 + 1088) = v5;
  *(void *)(v0 + 1096) = v7;
  *(void *)(v0 + 1104) = v9;
  *(void *)(v0 + 1112) = v11;
  *(_OWORD *)(v0 + 1120) = v21;
  *(_OWORD *)(v0 + 1136) = v22;
  *(void *)(v0 + 1152) = v23;
  *(_DWORD *)(v0 + 1160) = v20;
  *(_WORD *)(v0 + 1164) = v24;
  *(void *)(v0 + 1168) = v25;
  *(unsigned char *)(v0 + 1176) = v13;
  *(void *)(v0 + 1184) = v26;
  *(unsigned char *)(v0 + 1192) = v14;
  *(unsigned char *)(v0 + 1193) = v27;
  *(void *)(v0 + 1200) = v28;
  *(unsigned char *)(v0 + 1208) = v15;
  *(void *)(v0 + 1216) = v29;
  *(unsigned char *)(v0 + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v16;
  *(_WORD *)(v0 + 1225) = v30;
  *(void *)(v0 + 1232) = v31;
  *(unsigned char *)(v0 + 1240) = v17;
  *(void *)(v0 + 1248) = v32;
  *(void *)(v0 + 1256) = v33;
  *(unsigned char *)(v0 + 1264) = v34;
  uint64_t v18 = *v12;
  *(void *)(v0 + 2272) = *v12;
  return _swift_task_switch(sub_10003190C, v18, 0);
}

uint64_t sub_100032880(void *a1, uint64_t a2)
{
  uint64_t v102 = a2;
  uint64_t v106 = type metadata accessor for Logger();
  uint64_t v103 = *(void *)(v106 - 8);
  uint64_t v4 = __chkstk_darwin(v106);
  uint64_t v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  char v101 = (char *)&v97 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v97 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v100 = (char *)&v97 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v99 = (char *)&v97 - v15;
  __chkstk_darwin(v14);
  uint64_t v98 = (char *)&v97 - v16;
  uint64_t v105 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v105 - 8);
  uint64_t v18 = __chkstk_darwin(v105);
  int v20 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v97 - v22;
  __chkstk_darwin(v21);
  uint64_t v107 = (char *)&v97 - v24;
  uint64_t v25 = (int *)type metadata accessor for AppImpressionPayload();
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v104 = (uint64_t)&v97 - v29;
  if (*a1 == 0x3635325345 && a1[1] == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v97 = v2;
    __int16 v30 = v11;
    uint64_t v31 = (uint64_t)a1 + *(int *)(sub_100012960(&qword_1001E1380) + 52);
    uint64_t v32 = v104;
    sub_100036A4C(v31, v104, (uint64_t (*)(void))type metadata accessor for AppImpressionPayload);
    Date.init(timeIntervalSince1970:)();
    uint64_t v33 = v102;
    if (static Date.> infix(_:_:)())
    {
      static Date.now.getter();
      char v34 = static Date.< infix(_:_:)();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v17 + 8);
      uint64_t v36 = v105;
      uint64_t v102 = v17 + 8;
      v35(v23, v105);
      if (v34)
      {
        if (*(void *)(v32 + v25[6]))
        {
          uint64_t v37 = (uint64_t *)(v32 + v25[10]);
          uint64_t v39 = *v37;
          unint64_t v38 = v37[1];
          uint64_t v40 = v39 & 0xFFFFFFFFFFFFLL;
          if ((v38 & 0x2000000000000000) != 0) {
            uint64_t v41 = HIBYTE(v38) & 0xF;
          }
          else {
            uint64_t v41 = v40;
          }
          if (v41)
          {
            if (*(void *)(v32 + v25[7]) >> 4 < 0x271uLL)
            {
              v35(v107, v36);
              return sub_100036AB4(v32, (uint64_t (*)(void))type metadata accessor for AppImpressionPayload);
            }
            uint64_t v73 = v35;
            uint64_t v90 = Logger.impression.unsafeMutableAddressor();
            uint64_t v91 = v103;
            uint64_t v92 = v98;
            uint64_t v93 = v106;
            (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v98, v90, v106);
            uint64_t v94 = Logger.logObject.getter();
            os_log_type_t v95 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v94, v95))
            {
              __int16 v96 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)__int16 v96 = 0;
              _os_log_impl((void *)&_mh_execute_header, v94, v95, "Invalid source identifier found in impression", v96, 2u);
              swift_slowDealloc();
            }

            (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
            sub_100036890();
            swift_allocError();
            char v82 = 6;
          }
          else
          {
            uint64_t v73 = v35;
            uint64_t v83 = Logger.impression.unsafeMutableAddressor();
            uint64_t v84 = v103;
            int v85 = v99;
            uint64_t v86 = v106;
            (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v99, v83, v106);
            long long v87 = Logger.logObject.getter();
            os_log_type_t v88 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v87, v88))
            {
              uint64_t v89 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v89 = 0;
              _os_log_impl((void *)&_mh_execute_header, v87, v88, "Invalid ad network ID found in impression", v89, 2u);
              swift_slowDealloc();
            }

            (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v86);
            sub_100036890();
            swift_allocError();
            char v82 = 7;
          }
        }
        else
        {
          uint64_t v73 = v35;
          uint64_t v74 = Logger.impression.unsafeMutableAddressor();
          uint64_t v75 = v103;
          uint64_t v76 = v100;
          uint64_t v77 = v106;
          (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v100, v74, v106);
          uint64_t v78 = Logger.logObject.getter();
          os_log_type_t v79 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v78, v79))
          {
            char v80 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)char v80 = 0;
            _os_log_impl((void *)&_mh_execute_header, v78, v79, "Invalid advertiser item id found in impression", v80, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
          sub_100036890();
          swift_allocError();
          char v82 = 5;
        }
        *char v81 = v82;
        swift_willThrow();
        v73(v107, v36);
      }
      else
      {
        uint64_t v61 = v35;
        uint64_t v62 = Logger.impression.unsafeMutableAddressor();
        uint64_t v63 = v103;
        uint64_t v64 = v30;
        char v65 = v30;
        uint64_t v66 = v106;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v65, v62, v106);
        os_log_type_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v69 = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Impression is from the future", v69, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v66);
        sub_100036890();
        swift_allocError();
        *uint64_t v70 = 9;
        swift_willThrow();
        v61(v107, v36);
      }
      uint64_t v72 = v32;
    }
    else
    {
      uint64_t v43 = Logger.impression.unsafeMutableAddressor();
      uint64_t v44 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v43, v106);
      sub_100036A4C(v32, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for AppImpressionPayload);
      uint64_t v45 = v105;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v33, v105);
      char v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = v17;
        uint64_t v49 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        uint64_t v109 = v102;
        *(_DWORD *)uint64_t v49 = 134218242;
        uint64_t v50 = *(void *)&v28[v25[8]];
        sub_100036AB4((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for AppImpressionPayload);
        uint64_t v108 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 12) = 2080;
        sub_100036B68(&qword_1001E13A8, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v108 = sub_100147668(v51, v52, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v53 = *(void (**)(char *, uint64_t))(v48 + 8);
        v53(v20, v105);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Impression age too old to process %llu %s", (uint8_t *)v49, 0x16u);
        swift_arrayDestroy();
        uint64_t v45 = v105;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100036AB4((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for AppImpressionPayload);
        uint64_t v53 = *(void (**)(char *, uint64_t))(v17 + 8);
        v53(v20, v45);
      }

      (*(void (**)(char *, uint64_t))(v44 + 8))(v101, v106);
      sub_100036890();
      swift_allocError();
      *uint64_t v71 = 8;
      swift_willThrow();
      v53(v107, v45);
      uint64_t v72 = v104;
    }
    return sub_100036AB4(v72, (uint64_t (*)(void))type metadata accessor for AppImpressionPayload);
  }
  else
  {
    uint64_t v54 = Logger.impression.unsafeMutableAddressor();
    uint64_t v55 = v103;
    uint64_t v56 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v6, v54, v106);
    char v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unsupported signing algorithm used in impression", v59, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v55 + 8))(v6, v56);
    sub_100036890();
    swift_allocError();
    *__int16 v60 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_100033438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v71 = a3;
  uint64_t v72 = a2;
  uint64_t v69 = a1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v70 = (char *)&v63 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v68 = (char *)&v63 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v63 - v15;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  int v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100036994(a4, (uint64_t)&v73, &qword_1001E1398);
  if (v74)
  {
    uint64_t v66 = v7;
    uint64_t v67 = v6;
    sub_100012D60(&v73, (uint64_t)v76);
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    uint64_t v22 = v77;
    uint64_t v21 = v78;
    sub_100012D78(v76, v77);
    (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v22, v21);
    uint64_t v23 = Data.init(contentsOf:options:)();
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    }
    else
    {
      uint64_t v30 = v23;
      unint64_t v31 = v24;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      sub_1000369F8();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      uint64_t v65 = v30;
      unint64_t v32 = v71;
      char v33 = sub_10004017C(v72, v71, v73);
      swift_bridgeObjectRelease();
      unint64_t v64 = v31;
      if (v33)
      {
        uint64_t v34 = v77;
        uint64_t v35 = v78;
        sub_100012D78(v76, v77);
        uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
        uint64_t v37 = Logger.impression.unsafeMutableAddressor();
        uint64_t v38 = v66;
        uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
        if (v36 == v69)
        {
          uint64_t v40 = v67;
          v39(v16, v37, v67);
          uint64_t v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v43 = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "Successfully validated publisher application", v43, 2u);
            uint64_t v40 = v67;
            swift_slowDealloc();
          }
          sub_100020930(v65, v64);
          swift_release();

          (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v40);
          return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v76);
        }
        uint64_t v51 = v67;
        v39(v68, v37, v67);
        sub_100029CD8((uint64_t)v76, (uint64_t)&v73);
        unint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 134218240;
          uint64_t v55 = v74;
          uint64_t v56 = v75;
          sub_100012D78(&v73, v74);
          uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 16))(v55, v56);
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v73);
          *(void *)&long long v73 = v57;
          uint64_t v51 = v67;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v54 + 12) = 2048;
          *(void *)&long long v73 = v69;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Application record item ID %llu does not match impression publisher item ID %llu", (uint8_t *)v54, 0x16u);
          swift_slowDealloc();
        }
        else
        {
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v73);
        }

        (*(void (**)(char *, uint64_t))(v38 + 8))(v68, v51);
        sub_100036890();
        swift_allocError();
        *uint64_t v62 = 15;
        swift_willThrow();
        unint64_t v61 = v64;
        uint64_t v60 = v65;
      }
      else
      {
        uint64_t v44 = Logger.impression.unsafeMutableAddressor();
        uint64_t v46 = v66;
        uint64_t v45 = v67;
        os_log_type_t v47 = v70;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v70, v44, v67);
        swift_bridgeObjectRetain_n();
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v73 = swift_slowAlloc();
          *(_DWORD *)uint64_t v50 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v79 = sub_100147668(v72, v32, (uint64_t *)&v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Ad network '%s' not found in publisher app Info.plist", v50, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v46 + 8))(v70, v67);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
        }
        unint64_t v58 = v64;
        sub_100036890();
        swift_allocError();
        unsigned char *v59 = 14;
        swift_willThrow();
        uint64_t v60 = v65;
        unint64_t v61 = v58;
      }
      sub_100020930(v60, v61);
    }
    swift_release();
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v76);
  }
  sub_100019960((uint64_t)&v73, &qword_1001E1398);
  uint64_t v25 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v25, v6);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Skipping publisher app plist validation", v28, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_100033C40(void *a1, uint64_t a2)
{
  id v4 = [a1 connection];
  id v5 = sub_100021AAC(a2, v4);

  if (!v2)
  {

    uint64_t v6 = type metadata accessor for ImpressionModel();
    sub_1000C0E94(a2 + *(int *)(v6 + 20));
  }
}

void *sub_100033CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ImpressionModel();
  uint64_t v29 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(int *)(v6 + 24);
  v26[5] = a2;
  uint64_t v14 = v31;
  uint64_t result = sub_10008E578(*(void *)(a2 + v13), 0, 263, a3);
  if (!v14)
  {
    uint64_t v30 = v12;
    uint64_t v31 = v9;
    v26[3] = v13;
    v26[4] = 0;
    int64_t v16 = result[2];
    if (v16)
    {
      v26[2] = a1;
      unint64_t v32 = _swiftEmptyArrayStorage;
      uint64_t v17 = result;
      sub_10013A650(0, v16, 0);
      uint64_t v18 = v30;
      unint64_t v19 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      v26[1] = v17;
      uint64_t v20 = (uint64_t)v17 + v19;
      uint64_t v21 = *(void *)(v29 + 72);
      os_log_type_t v27 = (void (**)(char *, char *, uint64_t))(v10 + 16);
      uint64_t v28 = v21;
      v26[6] = v10 + 32;
      uint64_t v29 = v6;
      uint64_t v22 = v31;
      do
      {
        sub_100036A4C(v20, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
        (*v27)(v18, &v8[*(int *)(v6 + 20)], v22);
        sub_100036AB4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
        uint64_t v23 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10013A650(0, v23[2] + 1, 1);
          uint64_t v23 = v32;
        }
        unint64_t v25 = v23[2];
        unint64_t v24 = v23[3];
        if (v25 >= v24 >> 1)
        {
          sub_10013A650(v24 > 1, v25 + 1, 1);
          uint64_t v23 = v32;
        }
        v23[2] = v25 + 1;
        uint64_t v18 = v30;
        uint64_t v22 = v31;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))((unint64_t)v23+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v25, v30, v31);
        unint64_t v32 = v23;
        uint64_t v6 = v29;
        v20 += v28;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    sub_1000C1098();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100033FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[187] = v3;
  v4[186] = a3;
  v4[185] = a2;
  v4[184] = a1;
  uint64_t v5 = sub_100012960(&qword_1001E1370);
  v4[188] = v5;
  v4[189] = *(void *)(v5 - 8);
  v4[190] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[191] = v6;
  v4[192] = *(void *)(v6 - 8);
  v4[193] = swift_task_alloc();
  v4[194] = swift_task_alloc();
  sub_100012960(&qword_1001E1378);
  v4[195] = swift_task_alloc();
  v4[196] = swift_task_alloc();
  v4[197] = sub_100012960(&qword_1001E1380);
  v4[198] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ImpressionModel();
  v4[199] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[200] = v8;
  v4[201] = *(void *)(v8 + 64);
  v4[202] = swift_task_alloc();
  v4[203] = swift_task_alloc();
  v4[204] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v4[205] = v9;
  v4[206] = *(void *)(v9 - 8);
  v4[207] = swift_task_alloc();
  return _swift_task_switch(sub_100034288, 0, 0);
}

uint64_t sub_100034288()
{
  uint64_t v1 = *(void *)(v0 + 1656);
  uint64_t v2 = *(void **)(v0 + 1488);
  uint64_t v3 = (char *)v2 + *(int *)(*(void *)(v0 + 1576) + 52);
  uint64_t v29 = (int *)type metadata accessor for AppImpressionPayload();
  id v4 = (uint64_t *)&v3[v29[10]];
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v30 = v3;
  LOBYTE(v3) = v3[v29[11]];
  swift_bridgeObjectRetain();
  sub_10009485C(0, 0, 0, v6, v5, 0, 2, 1, (_OWORD *)(v0 + 888), v3, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v7 = *(_OWORD *)(v0 + 912);
  *(_OWORD *)(v0 + 1664) = *(_OWORD *)(v0 + 896);
  *(_OWORD *)(v0 + 1680) = v7;
  long long v8 = *(_OWORD *)(v0 + 944);
  *(_OWORD *)(v0 + 1696) = *(_OWORD *)(v0 + 928);
  *(unsigned char *)(v0 + 1271) = *(unsigned char *)(v0 + 888);
  *(unsigned char *)(v0 + 1457) = *(unsigned char *)(v0 + 889);
  *(_DWORD *)(v0 + 442) = *(_DWORD *)(v0 + 890);
  *(_WORD *)(v0 + 446) = *(_WORD *)(v0 + 894);
  *(_OWORD *)(v0 + 1712) = v8;
  *(void *)(v0 + 1728) = *(void *)(v0 + 960);
  *(_DWORD *)(v0 + 1458) = *(_DWORD *)(v0 + 968);
  *(_WORD *)(v0 + 1462) = *(_WORD *)(v0 + 972);
  *(_WORD *)(v0 + 658) = *(_WORD *)(v0 + 974);
  *(void *)(v0 + 1736) = *(void *)(v0 + 976);
  LOBYTE(v3) = *(unsigned char *)(v0 + 984);
  *(unsigned char *)(v0 + 1897) = (_BYTE)v3;
  *(unsigned char *)(v0 + 1896) = (_BYTE)v3;
  *(_DWORD *)(v0 + 874) = *(_DWORD *)(v0 + 985);
  *(_DWORD *)(v0 + 877) = *(_DWORD *)(v0 + 988);
  *(void *)(v0 + 1744) = *(void *)(v0 + 992);
  char v9 = *(unsigned char *)(v0 + 1000);
  *(unsigned char *)(v0 + 1898) = v9;
  *(unsigned char *)(v0 + 1912) = v9;
  *(unsigned char *)(v0 + 1899) = *(unsigned char *)(v0 + 1001);
  *(_WORD *)(v0 + 230) = *(_WORD *)(v0 + 1006);
  *(_DWORD *)(v0 + 226) = *(_DWORD *)(v0 + 1002);
  *(void *)(v0 + 1752) = *(void *)(v0 + 1008);
  char v10 = *(unsigned char *)(v0 + 1016);
  *(unsigned char *)(v0 + 1900) = v10;
  *(unsigned char *)(v0 + 1920) = v10;
  *(_DWORD *)(v0 + 884) = *(_DWORD *)(v0 + 1020);
  *(_DWORD *)(v0 + 881) = *(_DWORD *)(v0 + 1017);
  *(void *)(v0 + 1760) = *(void *)(v0 + 1024);
  char v11 = *(unsigned char *)(v0 + 1032);
  *(unsigned char *)(v0 + 1901) = v11;
  *(unsigned char *)(v0 + 1904) = v11;
  *(_WORD *)(v0 + 1902) = *(_WORD *)(v0 + 1033);
  *(unsigned char *)(v0 + 1269) = *(unsigned char *)(v0 + 1039);
  *(_DWORD *)(v0 + 1265) = *(_DWORD *)(v0 + 1035);
  *(void *)(v0 + 1768) = *(void *)(v0 + 1040);
  char v12 = *(unsigned char *)(v0 + 1048);
  *(unsigned char *)(v0 + 1905) = v12;
  *(unsigned char *)(v0 + 1928) = v12;
  *(_DWORD *)(v0 + 1076) = *(_DWORD *)(v0 + 1052);
  *(_DWORD *)(v0 + 1073) = *(_DWORD *)(v0 + 1049);
  *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 1056);
  *(unsigned char *)(v0 + 1906) = *(unsigned char *)(v0 + 1072);
  Date.init(timeIntervalSinceNow:)();
  sub_100032880(v2, v1);
  uint64_t v13 = *(void *)&v30[v29[5]];
  sub_100033438(v13, v6, v5, *(void *)(v0 + 1472));
  uint64_t v14 = *(void *)(v0 + 1632);
  uint64_t v15 = *(void *)(v0 + 1624);
  uint64_t v16 = *(void *)(v0 + 1600);
  uint64_t v17 = *(void *)(v0 + 1584);
  uint64_t v18 = *(uint64_t **)(v0 + 1496);
  sub_100036994(*(void *)(v0 + 1488), v17, &qword_1001E1380);
  sub_10004FAD0(v17, v13, *(void *)&v30[v29[6]], 1, v13 != 0, v14);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *(void *)(v0 + 1792) = v19;
  uint64_t v21 = (void *)v18[2];
  *(void *)(v0 + 1800) = v21;
  sub_100036A4C(v14, v15, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  int v22 = *(_DWORD *)(v16 + 80);
  *(_DWORD *)(v0 + 660) = v22;
  unint64_t v23 = (v22 + 16) & ~(unint64_t)v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v0 + 1808) = v24;
  sub_1000368E8(v15, v24 + v23);
  uint64_t v31 = (uint64_t (*)(uint64_t, void (*)(uint64_t@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4910 + dword_1001E4910);
  swift_bridgeObjectRetain();
  id v25 = v21;
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 1816) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1000348F0;
  uint64_t v27 = *(void *)(v0 + 1568);
  return v31(v27, sub_10003694C, v24, v20, v19, v25);
}

uint64_t sub_1000348F0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 18++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 1800);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    id v4 = sub_100035A74;
  }
  else {
    id v4 = sub_100034A58;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100034A58()
{
  uint64_t v1 = *(void *)(v0 + 1600);
  uint64_t v2 = *(void *)(v0 + 1592);
  uint64_t v3 = *(void *)(v0 + 1560);
  sub_100036994(*(void *)(v0 + 1568), v3, &qword_1001E1378);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_100019960(*(void *)(v0 + 1560), &qword_1001E1378);
LABEL_8:
    uint64_t v11 = *(void *)(v0 + 1632);
    uint64_t v12 = *(void *)(v0 + 1624);
    uint64_t v13 = *(void *)(v0 + 1496);
    unint64_t v14 = (*(unsigned __int8 *)(v0 + 660) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 660);
    *(void *)(v0 + 1832) = *(void *)(v13 + 8);
    uint64_t v15 = *(void **)(v13 + 16);
    *(void *)(v0 + 1840) = v15;
    sub_100036A4C(v11, v12, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
    uint64_t v16 = swift_allocObject();
    *(void *)(v0 + 1848) = v16;
    sub_1000368E8(v12, v16 + v14);
    uint64_t v66 = (uint64_t (*)(void))((char *)&dword_1001E4838 + dword_1001E4838);
    swift_bridgeObjectRetain();
    v15;
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 1856) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100034FBC;
    return v66();
  }
  uint64_t v4 = *(void *)(v0 + 1632);
  uint64_t v5 = *(void *)(v0 + 1616);
  uint64_t v6 = *(void *)(v0 + 1592);
  sub_1000368E8(*(void *)(v0 + 1560), v5);
  uint64_t v7 = *(int *)(v6 + 40);
  int v8 = *(unsigned __int8 *)(v5 + v7);
  int v9 = *(unsigned __int8 *)(v4 + v7);
  if (v8 != 1 || v9 != 0)
  {
    sub_100036AB4(*(void *)(v0 + 1616), (uint64_t (*)(void))type metadata accessor for ImpressionModel);
    goto LABEL_8;
  }
  uint64_t v19 = *(void *)(v0 + 1552);
  uint64_t v20 = *(void *)(v0 + 1536);
  uint64_t v21 = *(void *)(v0 + 1528);
  uint64_t v22 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v22, v21);
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    id v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Finalized impression with higher interaction type already exists", v25, 2u);
    swift_slowDealloc();
  }
  uint64_t v26 = *(void *)(v0 + 1648);
  uint64_t v65 = *(void *)(v0 + 1640);
  uint64_t v67 = *(void *)(v0 + 1656);
  uint64_t v27 = *(void *)(v0 + 1632);
  uint64_t v28 = *(void *)(v0 + 1616);
  uint64_t v29 = *(void *)(v0 + 1568);
  uint64_t v30 = *(void *)(v0 + 1552);
  uint64_t v31 = *(void *)(v0 + 1536);
  uint64_t v32 = *(void *)(v0 + 1528);

  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  sub_100036890();
  uint64_t v33 = swift_allocError();
  *uint64_t v34 = 13;
  swift_willThrow();
  sub_100036AB4(v28, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  sub_100019960(v29, &qword_1001E1378);
  sub_100036AB4(v27, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v67, v65);
  char v58 = *(unsigned char *)(v0 + 1896);
  char v60 = *(unsigned char *)(v0 + 1912);
  char v61 = *(unsigned char *)(v0 + 1920);
  char v63 = *(unsigned char *)(v0 + 1904);
  LOBYTE(v65) = *(unsigned char *)(v0 + 1928);
  *(void *)(v0 + 1880) = v33;
  LOBYTE(v67) = *(unsigned char *)(v0 + 1906);
  uint64_t v64 = *(void *)(v0 + 1784);
  uint64_t v62 = *(void *)(v0 + 1776);
  uint64_t v59 = *(void *)(v0 + 1768);
  __int16 v57 = *(_WORD *)(v0 + 1902);
  uint64_t v55 = *(void *)(v0 + 1752);
  uint64_t v56 = *(void *)(v0 + 1760);
  char v54 = *(unsigned char *)(v0 + 1899);
  uint64_t v52 = *(void *)(v0 + 1736);
  uint64_t v53 = *(void *)(v0 + 1744);
  __int16 v51 = *(_WORD *)(v0 + 1462);
  uint64_t v50 = *(void *)(v0 + 1728);
  long long v48 = *(_OWORD *)(v0 + 1696);
  long long v49 = *(_OWORD *)(v0 + 1712);
  char v45 = *(unsigned char *)(v0 + 1271);
  char v46 = *(unsigned char *)(v0 + 1457);
  uint64_t v35 = *(void *)(v0 + 1496);
  int v47 = *(_DWORD *)(v0 + 1458);
  uint64_t v36 = sub_100094708(v33);
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = sub_100012D78((void *)(v35 + 24), *(void *)(v35 + 48));
  *(unsigned char *)(v0 + 1272) = v45;
  *(unsigned char *)(v0 + 1273) = v46;
  *(void *)(v0 + 1280) = v36;
  *(void *)(v0 + 1288) = v38;
  *(void *)(v0 + 1296) = v40;
  *(void *)(v0 + 1304) = v42;
  *(_OWORD *)(v0 + 1312) = v48;
  *(_OWORD *)(v0 + 1328) = v49;
  *(void *)(v0 + 1344) = v50;
  *(_DWORD *)(v0 + 1352) = v47;
  *(_WORD *)(v0 + 1356) = v51;
  *(void *)(v0 + 1360) = v52;
  *(unsigned char *)(v0 + 1368) = v58;
  *(void *)(v0 + 1376) = v53;
  *(unsigned char *)(v0 + 1384) = v60;
  *(unsigned char *)(v0 + 1385) = v54;
  *(void *)(v0 + 1392) = v55;
  *(unsigned char *)(v0 + 1400) = v61;
  *(void *)(v0 + 1408) = v56;
  *(unsigned char *)(v0 + 1416) = v63;
  *(_WORD *)(v0 + 1417) = v57;
  *(void *)(v0 + 14++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v59;
  *(unsigned char *)(v0 + 1432) = v65;
  *(void *)(v0 + 1440) = v62;
  *(void *)(v0 + 1448) = v64;
  *(unsigned char *)(v0 + 1456) = v67;
  uint64_t v44 = *v43;
  *(void *)(v0 + 1888) = *v43;
  return _swift_task_switch(sub_10003571C, v44, 0);
}

uint64_t sub_100034FBC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1864) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 1840);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_100035CF8;
  }
  else {
    uint64_t v4 = sub_100035124;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100035124()
{
  uint64_t v1 = *(void *)(v0 + 1544);
  uint64_t v2 = *(void *)(v0 + 1536);
  uint64_t v3 = *(void *)(v0 + 1528);
  uint64_t v4 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully finalized click through impression", v7, 2u);
    swift_slowDealloc();
  }
  char v40 = *(unsigned char *)(v0 + 1906);
  uint64_t v39 = *(void *)(v0 + 1784);
  uint64_t v38 = *(void *)(v0 + 1776);
  char v37 = *(unsigned char *)(v0 + 1905);
  uint64_t v36 = *(void *)(v0 + 1768);
  char v35 = *(unsigned char *)(v0 + 1903);
  __int16 v34 = *(_WORD *)(v0 + 1901);
  uint64_t v33 = *(void *)(v0 + 1760);
  char v32 = *(unsigned char *)(v0 + 1900);
  uint64_t v31 = *(void *)(v0 + 1752);
  __int16 v30 = *(_WORD *)(v0 + 1898);
  uint64_t v29 = *(void *)(v0 + 1744);
  char v28 = *(unsigned char *)(v0 + 1897);
  uint64_t v27 = *(void *)(v0 + 1736);
  __int16 v25 = *(_WORD *)(v0 + 1462);
  __int16 v26 = *(_WORD *)(v0 + 658);
  uint64_t v24 = *(void *)(v0 + 1728);
  long long v22 = *(_OWORD *)(v0 + 1696);
  long long v23 = *(_OWORD *)(v0 + 1712);
  long long v20 = *(_OWORD *)(v0 + 1664);
  long long v21 = *(_OWORD *)(v0 + 1680);
  char v8 = *(unsigned char *)(v0 + 1457);
  char v9 = *(unsigned char *)(v0 + 1271);
  uint64_t v10 = *(void *)(v0 + 1544);
  uint64_t v11 = *(void *)(v0 + 1536);
  uint64_t v12 = *(void *)(v0 + 1528);
  uint64_t v13 = *(void *)(v0 + 1496);
  int v14 = *(_DWORD *)(v0 + 1458);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  uint64_t v15 = sub_100012D78((void *)(v13 + 24), *(void *)(v13 + 48));
  *(unsigned char *)(v0 + 1080) = v9;
  *(unsigned char *)(v0 + 1081) = v8;
  *(_DWORD *)(v0 + 1082) = *(_DWORD *)(v0 + 442);
  *(_WORD *)(v0 + 1086) = *(_WORD *)(v0 + 446);
  *(_OWORD *)(v0 + 1088) = v20;
  *(_OWORD *)(v0 + 1104) = v21;
  *(_OWORD *)(v0 + 1120) = v22;
  *(_OWORD *)(v0 + 1136) = v23;
  *(void *)(v0 + 1152) = v24;
  *(_DWORD *)(v0 + 1160) = v14;
  *(_WORD *)(v0 + 1164) = v25;
  *(_WORD *)(v0 + 1166) = v26;
  *(void *)(v0 + 1168) = v27;
  *(unsigned char *)(v0 + 1176) = v28;
  int v16 = *(_DWORD *)(v0 + 874);
  *(_DWORD *)(v0 + 1180) = *(_DWORD *)(v0 + 877);
  *(_DWORD *)(v0 + 1177) = v16;
  *(void *)(v0 + 1184) = v29;
  *(_WORD *)(v0 + 1192) = v30;
  *(_DWORD *)(v0 + 1194) = *(_DWORD *)(v0 + 226);
  *(_WORD *)(v0 + 1198) = *(_WORD *)(v0 + 230);
  *(void *)(v0 + 1200) = v31;
  *(unsigned char *)(v0 + 1208) = v32;
  *(_DWORD *)(v0 + 1209) = *(_DWORD *)(v0 + 881);
  *(_DWORD *)(v0 + 1212) = *(_DWORD *)(v0 + 884);
  *(void *)(v0 + 1216) = v33;
  *(_WORD *)(v0 + 12++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v34;
  *(unsigned char *)(v0 + 1226) = v35;
  int v17 = *(_DWORD *)(v0 + 1265);
  *(unsigned char *)(v0 + 1231) = *(unsigned char *)(v0 + 1269);
  *(_DWORD *)(v0 + 1227) = v17;
  *(void *)(v0 + 1232) = v36;
  *(unsigned char *)(v0 + 1240) = v37;
  *(_DWORD *)(v0 + 1244) = *(_DWORD *)(v0 + 1076);
  *(_DWORD *)(v0 + 1241) = *(_DWORD *)(v0 + 1073);
  *(void *)(v0 + 1248) = v38;
  *(void *)(v0 + 1256) = v39;
  *(unsigned char *)(v0 + 1264) = v40;
  uint64_t v18 = *v15;
  *(void *)(v0 + 1872) = *v15;
  return _swift_task_switch(sub_100035494, v18, 0);
}

uint64_t sub_100035494()
{
  uint64_t v1 = *(void *)(v0 + 1520);
  uint64_t v2 = *(void *)(v0 + 1512);
  uint64_t v3 = *(void *)(v0 + 1504);
  uint64_t v4 = *(void *)(v0 + 1480);
  long long v5 = *(_OWORD *)(v0 + 1224);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 1208);
  *(_OWORD *)(v0 + 376) = v5;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 1240);
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 1249);
  long long v6 = *(_OWORD *)(v0 + 1160);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 1144);
  *(_OWORD *)(v0 + 312) = v6;
  long long v7 = *(_OWORD *)(v0 + 1192);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 1176);
  *(_OWORD *)(v0 + 344) = v7;
  long long v8 = *(_OWORD *)(v0 + 1096);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 1080);
  *(_OWORD *)(v0 + 248) = v8;
  long long v9 = *(_OWORD *)(v0 + 1128);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 1112);
  *(_OWORD *)(v0 + 280) = v9;
  *(void *)(v0 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(v0 + 432) = 0;
  *(_WORD *)(v0 + 440) = 256;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 16);
  sub_10001547C(v0 + 1080);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1080);
  return _swift_task_switch(sub_1000355D8, 0, 0);
}

uint64_t sub_1000355D8()
{
  uint64_t v1 = v0[207];
  uint64_t v2 = v0[206];
  uint64_t v3 = v0[205];
  uint64_t v4 = v0[204];
  sub_100019960(v0[196], &qword_1001E1378);
  sub_100036AB4(v4, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10003571C()
{
  uint64_t v1 = *(void *)(v0 + 1520);
  uint64_t v2 = *(void *)(v0 + 1512);
  uint64_t v3 = *(void *)(v0 + 1504);
  uint64_t v4 = *(void *)(v0 + 1480);
  long long v5 = *(_OWORD *)(v0 + 1416);
  *(_OWORD *)(v0 + 792) = *(_OWORD *)(v0 + 1400);
  *(_OWORD *)(v0 + 808) = v5;
  *(_OWORD *)(v0 + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 1432);
  *(_OWORD *)(v0 + 833) = *(_OWORD *)(v0 + 1441);
  long long v6 = *(_OWORD *)(v0 + 1352);
  *(_OWORD *)(v0 + 728) = *(_OWORD *)(v0 + 1336);
  *(_OWORD *)(v0 + 744) = v6;
  long long v7 = *(_OWORD *)(v0 + 1384);
  *(_OWORD *)(v0 + 760) = *(_OWORD *)(v0 + 1368);
  *(_OWORD *)(v0 + 776) = v7;
  long long v8 = *(_OWORD *)(v0 + 1288);
  *(_OWORD *)(v0 + 664) = *(_OWORD *)(v0 + 1272);
  *(_OWORD *)(v0 + 680) = v8;
  long long v9 = *(_OWORD *)(v0 + 1320);
  *(_OWORD *)(v0 + 696) = *(_OWORD *)(v0 + 1304);
  *(_OWORD *)(v0 + 712) = v9;
  *(void *)(v0 + 856) = v4;
  *(void *)(v0 + 864) = 0;
  *(_WORD *)(v0 + 872) = 256;
  sub_10003675C(v0 + 664);
  sub_1000367C8(v0 + 664, v0 + 448);
  sub_10001547C(v0 + 1272);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1272);
  return _swift_task_switch(sub_100035860, 0, 0);
}

uint64_t sub_100035860()
{
  *(void *)(v0 + 1464) = *(void *)(v0 + 1880);
  swift_errorRetain();
  sub_100012960(&qword_1001E12E8);
  if (swift_dynamicCast())
  {
    int v1 = *(unsigned __int8 *)(v0 + 1270);
    if (v1 == 13)
    {
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_7;
    }
    sub_100036890();
    swift_allocError();
    *uint64_t v3 = v1;
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
  return v2();
}

uint64_t sub_100035A74()
{
  uint64_t v1 = *(void *)(v0 + 1656);
  uint64_t v2 = *(void *)(v0 + 1648);
  uint64_t v3 = *(void *)(v0 + 1640);
  sub_100036AB4(*(void *)(v0 + 1632), (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 1824);
  char v37 = *(unsigned char *)(v0 + 1905);
  char v34 = *(unsigned char *)(v0 + 1901);
  char v32 = *(unsigned char *)(v0 + 1900);
  char v29 = *(unsigned char *)(v0 + 1898);
  char v27 = *(unsigned char *)(v0 + 1897);
  *(void *)(v0 + 1880) = v4;
  char v36 = *(unsigned char *)(v0 + 1906);
  uint64_t v35 = *(void *)(v0 + 1784);
  uint64_t v33 = *(void *)(v0 + 1776);
  uint64_t v31 = *(void *)(v0 + 1768);
  __int16 v30 = *(_WORD *)(v0 + 1902);
  uint64_t v28 = *(void *)(v0 + 1760);
  uint64_t v26 = *(void *)(v0 + 1752);
  char v25 = *(unsigned char *)(v0 + 1899);
  uint64_t v23 = *(void *)(v0 + 1736);
  uint64_t v24 = *(void *)(v0 + 1744);
  __int16 v22 = *(_WORD *)(v0 + 1462);
  uint64_t v21 = *(void *)(v0 + 1728);
  long long v19 = *(_OWORD *)(v0 + 1696);
  long long v20 = *(_OWORD *)(v0 + 1712);
  char v17 = *(unsigned char *)(v0 + 1457);
  char v5 = *(unsigned char *)(v0 + 1271);
  uint64_t v6 = *(void *)(v0 + 1496);
  int v18 = *(_DWORD *)(v0 + 1458);
  uint64_t v7 = sub_100094708(v4);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v14 = sub_100012D78((void *)(v6 + 24), *(void *)(v6 + 48));
  *(unsigned char *)(v0 + 1272) = v5;
  *(unsigned char *)(v0 + 1273) = v17;
  *(void *)(v0 + 1280) = v7;
  *(void *)(v0 + 1288) = v9;
  *(void *)(v0 + 1296) = v11;
  *(void *)(v0 + 1304) = v13;
  *(_OWORD *)(v0 + 1312) = v19;
  *(_OWORD *)(v0 + 1328) = v20;
  *(void *)(v0 + 1344) = v21;
  *(_DWORD *)(v0 + 1352) = v18;
  *(_WORD *)(v0 + 1356) = v22;
  *(void *)(v0 + 1360) = v23;
  *(unsigned char *)(v0 + 1368) = v27 & 1;
  *(void *)(v0 + 1376) = v24;
  *(unsigned char *)(v0 + 1384) = v29 & 1;
  *(unsigned char *)(v0 + 1385) = v25;
  *(void *)(v0 + 1392) = v26;
  *(unsigned char *)(v0 + 1400) = v32 & 1;
  *(void *)(v0 + 1408) = v28;
  *(unsigned char *)(v0 + 1416) = v34 & 1;
  *(_WORD *)(v0 + 1417) = v30;
  *(void *)(v0 + 14++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v31;
  *(unsigned char *)(v0 + 1432) = v37 & 1;
  *(void *)(v0 + 1440) = v33;
  *(void *)(v0 + 1448) = v35;
  *(unsigned char *)(v0 + 1456) = v36;
  uint64_t v15 = *v14;
  *(void *)(v0 + 1888) = *v14;
  return _swift_task_switch(sub_10003571C, v15, 0);
}

uint64_t sub_100035CF8()
{
  uint64_t v1 = *(void *)(v0 + 1656);
  uint64_t v2 = *(void *)(v0 + 1648);
  uint64_t v3 = *(void *)(v0 + 1640);
  uint64_t v4 = *(void *)(v0 + 1632);
  sub_100019960(*(void *)(v0 + 1568), &qword_1001E1378);
  sub_100036AB4(v4, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *(void *)(v0 + 1864);
  char v38 = *(unsigned char *)(v0 + 1905);
  char v35 = *(unsigned char *)(v0 + 1901);
  char v33 = *(unsigned char *)(v0 + 1900);
  char v30 = *(unsigned char *)(v0 + 1898);
  char v28 = *(unsigned char *)(v0 + 1897);
  *(void *)(v0 + 1880) = v5;
  char v37 = *(unsigned char *)(v0 + 1906);
  uint64_t v36 = *(void *)(v0 + 1784);
  uint64_t v34 = *(void *)(v0 + 1776);
  uint64_t v32 = *(void *)(v0 + 1768);
  __int16 v31 = *(_WORD *)(v0 + 1902);
  uint64_t v29 = *(void *)(v0 + 1760);
  uint64_t v27 = *(void *)(v0 + 1752);
  char v26 = *(unsigned char *)(v0 + 1899);
  uint64_t v24 = *(void *)(v0 + 1736);
  uint64_t v25 = *(void *)(v0 + 1744);
  __int16 v23 = *(_WORD *)(v0 + 1462);
  uint64_t v22 = *(void *)(v0 + 1728);
  long long v20 = *(_OWORD *)(v0 + 1696);
  long long v21 = *(_OWORD *)(v0 + 1712);
  char v18 = *(unsigned char *)(v0 + 1457);
  char v6 = *(unsigned char *)(v0 + 1271);
  uint64_t v7 = *(void *)(v0 + 1496);
  int v19 = *(_DWORD *)(v0 + 1458);
  uint64_t v8 = sub_100094708(v5);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_100012D78((void *)(v7 + 24), *(void *)(v7 + 48));
  *(unsigned char *)(v0 + 1272) = v6;
  *(unsigned char *)(v0 + 1273) = v18;
  *(void *)(v0 + 1280) = v8;
  *(void *)(v0 + 1288) = v10;
  *(void *)(v0 + 1296) = v12;
  *(void *)(v0 + 1304) = v14;
  *(_OWORD *)(v0 + 1312) = v20;
  *(_OWORD *)(v0 + 1328) = v21;
  *(void *)(v0 + 1344) = v22;
  *(_DWORD *)(v0 + 1352) = v19;
  *(_WORD *)(v0 + 1356) = v23;
  *(void *)(v0 + 1360) = v24;
  *(unsigned char *)(v0 + 1368) = v28 & 1;
  *(void *)(v0 + 1376) = v25;
  *(unsigned char *)(v0 + 1384) = v30 & 1;
  *(unsigned char *)(v0 + 1385) = v26;
  *(void *)(v0 + 1392) = v27;
  *(unsigned char *)(v0 + 1400) = v33 & 1;
  *(void *)(v0 + 1408) = v29;
  *(unsigned char *)(v0 + 1416) = v35 & 1;
  *(_WORD *)(v0 + 1417) = v31;
  *(void *)(v0 + 14++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v32;
  *(unsigned char *)(v0 + 1432) = v38 & 1;
  *(void *)(v0 + 1440) = v34;
  *(void *)(v0 + 1448) = v36;
  *(unsigned char *)(v0 + 1456) = v37;
  uint64_t v16 = *v15;
  *(void *)(v0 + 1888) = *v15;
  return _swift_task_switch(sub_10003571C, v16, 0);
}

void sub_100035F90(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, id))
{
  id v6 = [a1 connection];
  uint64_t v7 = (void *)a3(a2, v6);

  if (!v3) {
}
  }

uint64_t static MessageRegistration.__derived_enum_equals(_:_:)()
{
  return 1;
}

Swift::Int sub_10003600C()
{
  return Hasher._finalize()();
}

uint64_t sub_100036064()
{
  return String.hash(into:)();
}

Swift::Int sub_100036080()
{
  return Hasher._finalize()();
}

uint64_t sub_1000360D4@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0078, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100036128(void *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x8000000100184B80;
}

unint64_t sub_100036148()
{
  return 0xD000000000000014;
}

uint64_t sub_100036164@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C00B0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void sub_1000361BC(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000361C8(uint64_t a1)
{
  unint64_t v2 = sub_100037B3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100036204(uint64_t a1)
{
  unint64_t v2 = sub_100037B3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100036240@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000379C4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10003626C(uint64_t a1)
{
  uint64_t result = sub_100036460(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_100036500(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1000362EC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  size_t v5 = ((unint64_t)((1 << v4) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    char v6 = sub_100036554((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v3, a2);
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    char v6 = sub_100036554((uint64_t)v7, v3, a2);
    swift_slowDealloc();
  }
  return v6 & 1;
}

uint64_t sub_100036460(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100036500(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100036554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *(void *)(a2 + 16);
  if (v27)
  {
    uint64_t v28 = a3 + 56;
    uint64_t v26 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      char v5 = (uint64_t *)(v26 + 16 * v4);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v10 = v8 & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = 1 << v10;
      if (((1 << v10) & *(void *)(v28 + 8 * (v10 >> 6))) == 0) {
        goto LABEL_3;
      }
      uint64_t v13 = *(void *)(a3 + 48);
      uint64_t v14 = (void *)(v13 + 16 * v10);
      BOOL v15 = *v14 == v7 && v14[1] == v6;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
      uint64_t v17 = *(void *)(a1 + 8 * v11);
      *(void *)(a1 + 8 * v11) = v12 | v17;
      if ((v12 & v17) == 0)
      {
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          return result;
        }
        if (++v25 == *(void *)(a3 + 16))
        {
          uint64_t v23 = 1;
LABEL_26:
          swift_bridgeObjectRelease();
          return v23;
        }
      }
LABEL_4:
      if (++v4 == v27)
      {
        uint64_t v23 = 0;
        goto LABEL_26;
      }
    }
    uint64_t v18 = ~v9;
    for (unint64_t i = v10 + 1; ; unint64_t i = v20 + 1)
    {
      unint64_t v20 = i & v18;
      if (((*(void *)(v28 + (((i & v18) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v18)) & 1) == 0) {
        break;
      }
      long long v21 = (void *)(v13 + 16 * v20);
      BOOL v22 = *v21 == v7 && v21[1] == v6;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v20 >> 6;
        uint64_t v12 = 1 << v20;
        goto LABEL_12;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  return 0;
}

uint64_t sub_10003675C(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 184);
  uint64_t v2 = *(void *)(result + 96) & 1;
  uint64_t v3 = *(void *)(result + 112) & 0xFF01;
  uint64_t v4 = *(void *)(result + 128) & 1;
  uint64_t v5 = *(void *)(result + 144) & 0xFFFF01;
  uint64_t v6 = *(void *)(result + 160) & 1;
  __int16 v7 = *(_WORD *)(result + 208) & 0x103;
  *(void *)(result + 80) &= 0xFFFFFFFFFFFFuLL;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(void *)(result + 128) = v4;
  *(void *)(result + 144) = v5;
  *(void *)(result + 160) = v6;
  *(void *)(result + 184) = v1;
  *(_WORD *)(result + 208) = v7;
  return result;
}

uint64_t sub_1000367C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100036824(uint64_t a1)
{
  return a1;
}

unint64_t sub_100036890()
{
  unint64_t result = qword_1001E1390;
  if (!qword_1001E1390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1390);
  }
  return result;
}

uint64_t sub_1000368E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImpressionModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10003694C(uint64_t a1@<X8>)
{
}

void sub_100036968(void *a1)
{
}

uint64_t sub_100036994(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100012960(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000369F8()
{
  unint64_t result = qword_1001E13A0;
  if (!qword_1001E13A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E13A0);
  }
  return result;
}

uint64_t sub_100036A4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100036AB4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100036B14()
{
  unint64_t result = qword_1001E13B8;
  if (!qword_1001E13B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E13B8);
  }
  return result;
}

uint64_t sub_100036B68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100036BB4(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ImpressionModel();
  uint64_t v4 = v1
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));
  sub_10008EC44(*(void *)(v4 + *(int *)(v3 + 28)), *(void *)(v4 + *(int *)(v3 + 32)), *(void *)(v4 + *(int *)(v3 + 32) + 8), a1);
}

void sub_100036C44(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ImpressionModel() - 8);
  sub_100033C40(a1, v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_100036CC0()
{
  uint64_t v1 = type metadata accessor for ImpressionModel();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)(v1 - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

void *sub_100036DD8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ImpressionModel() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100033CD4(a1, v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

void sub_100036E84(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ImpressionModel();
  sub_10008E2F8(v1+ *(int *)(v3 + 20)+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), a1);
}

uint64_t sub_100036F0C()
{
  uint64_t v1 = type metadata accessor for ImpressionModel();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_100037018(void *a1)
{
}

void sub_100037044(void *a1, uint64_t (*a2)(uint64_t, id))
{
  uint64_t v5 = *(void *)(type metadata accessor for ImpressionModel() - 8);
  sub_100035F90(a1, v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t sub_1000370C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100037104(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013480;
  v3[2] = a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E4070 + dword_1001E4070);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10002DE60;
  return v6(4);
}

uint64_t sub_1000371F8()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100037248(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100012AB8;
  v3[2] = a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E1EE0 + dword_1001E1EE0);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10002E038;
  return v6(5);
}

uint64_t sub_10003733C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013480;
  v3[2] = a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E1EE0 + dword_1001E1EE0);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10002E294;
  return v6(6);
}

uint64_t sub_10003742C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_100037488(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

ValueMetadata *type metadata accessor for ImpressionIntakeManager.PublisherAppInfoPlist()
{
  return &type metadata for ImpressionIntakeManager.PublisherAppInfoPlist;
}

uint64_t getEnumTagSinglePayload for ImpressionIntakeError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ImpressionIntakeError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100037604);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpressionIntakeError()
{
  return &type metadata for ImpressionIntakeError;
}

uint64_t destroy for ImpressionIntakeManager(uint64_t a1)
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 24);
  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 64);
}

uint64_t initializeWithCopy for ImpressionIntakeManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2 + 24;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  id v10 = v5;
  v9(a1 + 24, v6, v8);
  long long v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
  return a1;
}

void *assignWithCopy for ImpressionIntakeManager(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  sub_100017B78(a1 + 3, a2 + 3);
  sub_100017B78(a1 + 8, a2 + 8);
  return a1;
}

__n128 initializeWithTake for ImpressionIntakeManager(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ImpressionIntakeManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 24);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImpressionIntakeManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImpressionIntakeManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpressionIntakeManager()
{
  return &type metadata for ImpressionIntakeManager;
}

unint64_t sub_100037944(uint64_t a1)
{
  unint64_t result = sub_100036890();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100037970()
{
  unint64_t result = qword_1001E1410;
  if (!qword_1001E1410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1410);
  }
  return result;
}

void *sub_1000379C4(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E1418);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = sub_100012D78(a1, a1[3]);
  sub_100037B3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100012960(&qword_1001E1428);
    sub_100037B90();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    long long v7 = (void *)v9[1];
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_100037B3C()
{
  unint64_t result = qword_1001E1420;
  if (!qword_1001E1420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1420);
  }
  return result;
}

unint64_t sub_100037B90()
{
  unint64_t result = qword_1001E1430;
  if (!qword_1001E1430)
  {
    sub_100011ECC(&qword_1001E1428);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1430);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ImpressionIntakeManager.PublisherAppInfoPlist.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ImpressionIntakeManager.PublisherAppInfoPlist.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100037CECLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpressionIntakeManager.PublisherAppInfoPlist.CodingKeys()
{
  return &type metadata for ImpressionIntakeManager.PublisherAppInfoPlist.CodingKeys;
}

unint64_t sub_100037D28()
{
  unint64_t result = qword_1001E1438;
  if (!qword_1001E1438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1438);
  }
  return result;
}

unint64_t sub_100037D80()
{
  unint64_t result = qword_1001E1440;
  if (!qword_1001E1440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1440);
  }
  return result;
}

unint64_t sub_100037DD8()
{
  unint64_t result = qword_1001E1448;
  if (!qword_1001E1448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1448);
  }
  return result;
}

void destroy for RetryCountDatabaseStore(uint64_t a1)
{
  swift_bridgeObjectRelease();
  int v2 = *(void **)(a1 + 16);
}

void *_s20AttributionKitDaemon23RetryCountDatabaseStoreVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  unsigned int v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for RetryCountDatabaseStore(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for RetryCountDatabaseStore(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  unsigned int v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for PostbackDatabaseStore()
{
  return &type metadata for PostbackDatabaseStore;
}

uint64_t sub_100037F68(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  if (sub_100006764((uint64_t)a1) > 18000) {
    return 1;
  }
  uint64_t v28 = v3;
  uint64_t v29 = v2;
  while (1)
  {
    uint64_t v9 = sub_100006764((uint64_t)a1);
    if (v9 <= 17999) {
      break;
    }
    if (v9 == 18000)
    {
      uint64_t v34 = sub_100038548;
      uint64_t v35 = 0;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v31 = 1107296256;
      uint64_t v32 = sub_1000399B4;
      char v33 = &unk_1001C3760;
      uint64_t v13 = _Block_copy(&aBlock);
      swift_release();
      int v14 = sub_100006AE0((uint64_t)a1, 18001, v13);
      _Block_release(v13);
      if (!v14) {
        goto LABEL_14;
      }
    }
    else if (v9 != 18001)
    {
      goto LABEL_20;
    }
LABEL_5:
    if (sub_100006764((uint64_t)a1) >= 18001) {
      return 1;
    }
  }
  if (v9)
  {
    if (v9 != 17400)
    {
LABEL_20:
      uint64_t v24 = Logger.postback.unsafeMutableAddressor();
      uint64_t v18 = v28;
      uint64_t v17 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v8, v24, v29);
      uint64_t v25 = a1;
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134218240;
        uint64_t aBlock = sub_100006764((uint64_t)v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v27 + 12) = 2048;
        uint64_t aBlock = 18001;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v20, v26, "Error: No database migration for %lld to %lld", (uint8_t *)v27, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        unint64_t v20 = v25;
      }
      goto LABEL_19;
    }
    uint64_t v34 = sub_100038564;
    uint64_t v35 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    uint64_t v32 = sub_1000399B4;
    char v33 = &unk_1001C3788;
    id v10 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v11 = (uint64_t)a1;
    uint64_t v12 = 18000;
  }
  else
  {
    uint64_t v34 = sub_100038568;
    uint64_t v35 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    uint64_t v32 = sub_1000399B4;
    char v33 = &unk_1001C37B0;
    id v10 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v11 = (uint64_t)a1;
    uint64_t v12 = 17400;
  }
  char v15 = sub_100006AE0(v11, v12, v10);
  _Block_release(v10);
  if (v15) {
    goto LABEL_5;
  }
LABEL_14:
  uint64_t v16 = Logger.postback.unsafeMutableAddressor();
  uint64_t v18 = v28;
  uint64_t v17 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v6, v16, v29);
  int v19 = a1;
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134218240;
    uint64_t aBlock = sub_100006764((uint64_t)v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v22 + 12) = 2048;
    uint64_t aBlock = 18001;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Migration failed for current schema version: %lld while trying to migrate to %lld", (uint8_t *)v22, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    unint64_t v20 = v19;
  }
  uint64_t v8 = v6;
LABEL_19:

  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v17);
  return 0;
}

void sub_100038460(uint64_t a1)
{
  id v2 = [(id)type metadata accessor for PostbackEntity() databaseTable];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  sub_10003856C(v3, v5);
  swift_bridgeObjectRelease();
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v6);
}

uint64_t Postback.interactionType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10003854C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003855C()
{
  return swift_release();
}

uint64_t sub_10003856C(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(313);
  v4._countAndFlagsBits = 0xD00000000000001BLL;
  v4._object = (void *)0x8000000100185720;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 665632;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x6C7074656B72616DLL;
  v7._object = (void *)0xEE0064695F656361;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xA2C5458455420;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x6B63616274736F70;
  v9._object = (void *)0xEB0000000064695FLL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xA2C5458455420;
  v10._object = (void *)0xE700000000000000;
  String.append(_:)(v10);
  v11._object = (void *)0x8000000100184CB0;
  v11._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x52454745544E4920;
  v12._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0xD000000000000012;
  v13._object = (void *)0x8000000100184760;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x52454745544E4920;
  v14._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v14);
  v15._object = (void *)0x8000000100184F40;
  v15._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xA2C5458455420;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6F7774656E5F6461;
  v17._object = (void *)0xED000064695F6B72;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xA2C5458455420;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x69737265766E6F63;
  v19._object = (void *)0xEF657079745F6E6FLL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xA2C5458455420;
  v20._object = (void *)0xE700000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x6E69775F646964;
  v21._object = (void *)0xE700000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x52454745544E4920;
  v22._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x65636E6575716573;
  v23._object = (void *)0xEE007865646E695FLL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x52454745544E4920;
  v24._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x5F746361706D6F63;
  v25._object = (void *)0xEB0000000073776ALL;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xA2C5458455420;
  v26._object = (void *)0xE700000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x6B63616274736F70;
  v27._object = (void *)0xEC0000006C72755FLL;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xA2C5458455420;
  v28._object = (void *)0xE700000000000000;
  String.append(_:)(v28);
  v29._object = (void *)0x8000000100184CD0;
  v29._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0xA2C5458455420;
  v30._object = (void *)0xE700000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0x8000000100184F20;
  v31._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0xA2C5458455420;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  v33._object = (void *)0x8000000100184D10;
  v33._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x52454745544E4920;
  v34._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD000000000000017;
  v35._object = (void *)0x8000000100184D30;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0xA2C5458455420;
  v36._object = (void *)0xE700000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x7265747369676572;
  v37._object = (void *)0xEA00000000006465;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x52454745544E4920;
  v38._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x656B636F6C5F7369;
  v39._object = (void *)0xE900000000000064;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x52454745544E4920;
  v40._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0xD000000000000014;
  v41._object = (void *)0x8000000100184F90;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0xA2C5458455420;
  v42._object = (void *)0xE700000000000000;
  String.append(_:)(v42);
  v43._object = (void *)0xED000064695F6E6FLL;
  v43._countAndFlagsBits = 0x69737265766E6F63;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0xA2C5458455420;
  v44._object = (void *)0xE700000000000000;
  String.append(_:)(v44);
  v45._object = (void *)0x8000000100184CF0;
  v45._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0x52454745544E4920;
  v46._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v46);
  v47._object = (void *)0x8000000100184D60;
  v47._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0x52454745544E4920;
  v48._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 0x6D69745F6B636F6CLL;
  v49._object = (void *)0xEE00706D61747365;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 0x52454745544E4920;
  v50._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v50);
  v51._countAndFlagsBits = 0xD000000000000016;
  v51._object = (void *)0x8000000100184F60;
  String.append(_:)(v51);
  v52._object = (void *)0x8000000100185740;
  v52._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v52);
  v53._countAndFlagsBits = 0xD000000000000012;
  v53._object = (void *)0x8000000100184760;
  String.append(_:)(v53);
  v54._countAndFlagsBits = 8236;
  v54._object = (void *)0xE200000000000000;
  String.append(_:)(v54);
  v55._countAndFlagsBits = 0x6B63616274736F70;
  v55._object = (void *)0xEB0000000064695FLL;
  String.append(_:)(v55);
  v56._countAndFlagsBits = 8236;
  v56._object = (void *)0xE200000000000000;
  String.append(_:)(v56);
  v57._countAndFlagsBits = 0xD000000000000014;
  v57._object = (void *)0x8000000100184F90;
  String.append(_:)(v57);
  v58._countAndFlagsBits = 0xD000000000000018;
  v58._object = (void *)0x8000000100185760;
  String.append(_:)(v58);
  return 0;
}

void sub_100038C5C(uint64_t a1)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)type metadata accessor for PostbackEntity();
  id v3 = [v2 databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4C4F432044444120;
  v8._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x6D6E6F7269766E65;
  v9._object = (void *)0xEB00000000746E65;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3B5458455420;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v11);

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  id v12 = [v2 databaseTable];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x205445530ALL;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x6D6E6F7269766E65;
  v18._object = (void *)0xEB00000000746E65;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 656424224;
  v19._object = (void *)0xE400000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x69746375646F7270;
  v20._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 15143;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  id v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v22);
}

void sub_100038ED4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[0] = 0;
  v31[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  strcpy((char *)v31, "ALTER TABLE ");
  BYTE5(v31[1]) = 0;
  HIWORD(v31[1]) = -5120;
  Swift::String v6 = (void *)type metadata accessor for PostbackEntity();
  id v7 = [v6 databaseTable];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x4C4F432044444120;
  v12._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0xD000000000000014;
  v13._object = (void *)0x8000000100184FB0;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x52454745544E4920;
  v14._object = (void *)0xE90000000000003BLL;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v15);

  v31[0] = 0;
  v31[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  strcpy((char *)v31, "UPDATE ");
  v31[1] = 0xE700000000000000;
  id v16 = [v6 databaseTable];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v19 = v18;

  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x205445530ALL;
  v21._object = (void *)0xE500000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD000000000000014;
  v22._object = (void *)0x8000000100184FB0;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 656424224;
  v23._object = (void *)0xE400000000000000;
  String.append(_:)(v23);
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  double v25 = v24 * 1000.0;
  if ((~*(void *)&v25 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v25 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v25 < 1.84467441e19)
  {
    unint64_t v26 = (unint64_t)v25;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v30[1] = v26;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 15143;
    v28._object = (void *)0xE200000000000000;
    String.append(_:)(v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_10000B74C(a1, v29);

    return;
  }
LABEL_7:
  __break(1u);
}

char *sub_10003922C()
{
  unint64_t result = sub_10003924C();
  qword_1001E5F88 = (uint64_t)result;
  return result;
}

char *sub_10003924C()
{
  uint64_t v0 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100012960(&qword_1001E1170);
  __chkstk_darwin(v4 - 8);
  Swift::String v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::String v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  Swift::String v13 = (char *)v27 - v12;
  sub_100119180(v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100020764((uint64_t)v6);
    if (qword_1001E08E0 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100012E74(v23, (uint64_t)qword_1001E5FC8);
    double v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to get cached data url", v26, 2u);
      swift_slowDealloc();
    }

    exit(0);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  strcpy((char *)v27, "storeUser.db");
  HIBYTE(v27[6]) = 0;
  v27[7] = -5120;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for URL.DirectoryHint.inferFromPath(_:), v0);
  sub_10003985C();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  URL.absoluteString.getter();
  Swift::String v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v11, v7);
  NSString v15 = objc_allocWithZone((Class)SQLiteConnectionOptions);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_100006E80(v15, v16);

  Swift::String v18 = sub_100008B1C(objc_allocWithZone((Class)SQLiteConnection), v17);
  Swift::String v19 = (void *)sub_100039644();
  id v20 = objc_allocWithZone((Class)type metadata accessor for SQLiteDatabase());
  Swift::String v21 = sub_100051DE4(v18, v19);

  v14(v13, v7);
  return v21;
}

uint64_t sub_100039644()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_1000398B0();
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v7[0] = &_swiftEmptyArrayStorage;
  sub_1000398F0();
  sub_100012960(&qword_1001E1490);
  sub_100039948();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t sub_10003985C()
{
  unint64_t result = qword_1001E1480;
  if (!qword_1001E1480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1480);
  }
  return result;
}

unint64_t sub_1000398B0()
{
  unint64_t result = qword_1001E0F70;
  if (!qword_1001E0F70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001E0F70);
  }
  return result;
}

unint64_t sub_1000398F0()
{
  unint64_t result = qword_1001E1488;
  if (!qword_1001E1488)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1488);
  }
  return result;
}

unint64_t sub_100039948()
{
  unint64_t result = qword_1001E1498;
  if (!qword_1001E1498)
  {
    sub_100011ECC(&qword_1001E1490);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1498);
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutDatabaseStore()
{
  return &type metadata for SnoutDatabaseStore;
}

void sub_1000399B4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100039A1C(void *a1)
{
  if (sub_100006764((uint64_t)a1) > 17999) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = sub_100006764((uint64_t)a1);
    if (!v4)
    {
      Swift::String v19 = sub_100039F30;
      uint64_t v20 = 0;
      uint64_t v15 = (uint64_t)_NSConcreteStackBlock;
      uint64_t v16 = 1107296256;
      uint64_t v17 = sub_1000399B4;
      Swift::String v18 = &unk_1001C3880;
      uint64_t v2 = _Block_copy(&v15);
      swift_release();
      char v3 = sub_100006AE0((uint64_t)a1, 17400, v2);
      _Block_release(v2);
      if ((v3 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_4;
    }
    if (v4 == 18000) {
      goto LABEL_4;
    }
    if (v4 != 17400) {
      break;
    }
    Swift::String v19 = sub_100039F14;
    uint64_t v20 = 0;
    uint64_t v15 = (uint64_t)_NSConcreteStackBlock;
    uint64_t v16 = 1107296256;
    uint64_t v17 = sub_1000399B4;
    Swift::String v18 = &unk_1001C3858;
    uint64_t v5 = _Block_copy(&v15);
    swift_release();
    int v6 = sub_100006AE0((uint64_t)a1, 18000, v5);
    _Block_release(v5);
    if (!v6)
    {
LABEL_9:
      if (qword_1001E0918 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100012E74(v7, (uint64_t)qword_1001E6070);
      uint64_t v8 = a1;
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 134218240;
        uint64_t v15 = sub_100006764((uint64_t)v8);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v11 + 12) = 2048;
        uint64_t v15 = 18000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v12 = "Migration failed for current schema version: %lld while trying to migrate to %lld";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, (uint8_t *)v11, 0x16u);
        swift_slowDealloc();
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_4:
    if (sub_100006764((uint64_t)a1) >= 18000) {
      return 1;
    }
  }
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100012E74(v14, (uint64_t)qword_1001E6070);
  uint64_t v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134218240;
    uint64_t v15 = sub_100006764((uint64_t)v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v11 + 12) = 2048;
    uint64_t v15 = 18000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v12 = "Error: No database migration for %lld to %lld";
    goto LABEL_18;
  }
LABEL_19:

  uint64_t v9 = v8;
LABEL_20:

  return 0;
}

uint64_t sub_100039DE4(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100039DF4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void *sub_100039E30(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

unsigned char **sub_100039ED4(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *unint64_t result = v4 + 1;
  return result;
}

uint64_t sub_100039EE4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100039F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100039F28()
{
  return swift_release();
}

void sub_100039F34(uint64_t a1)
{
  _StringGuts.grow(_:)(152);
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  v2._object = (void *)0x8000000100185720;
  String.append(_:)(v2);
  id v3 = [(id)type metadata accessor for SnoutStoryEntity() databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 665632;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x64695F79726F7473;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xA2C5458455420;
  v10._object = (void *)0xE700000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000012;
  v11._object = (void *)0x8000000100184760;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x52454745544E4920;
  v12._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x69737265766E6F63;
  v13._object = (void *)0xED000064695F6E6FLL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xA2C5458455420;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000010;
  v15._object = (void *)0x8000000100184790;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x4E41454C4F4F4220;
  v16._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v16);
  v17._object = (void *)0x80000001001847B0;
  v17._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x4E41454C4F4F4220;
  v18._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x5F676E69646E6570;
  v19._object = (void *)0xEE0073746E657665;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xA2C4E4F534A20;
  v20._object = (void *)0xE700000000000000;
  String.append(_:)(v20);
  v21._object = (void *)0x80000001001847E0;
  v21._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x52454745544E4920;
  v22._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000017;
  v23._object = (void *)0x8000000100184800;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000100185740;
  v24._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x64695F79726F7473;
  v25._object = (void *)0xE800000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xD000000000000018;
  v26._object = (void *)0x8000000100185760;
  String.append(_:)(v26);
  id v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v27);
}

void sub_10003A270(uint64_t a1)
{
  _StringGuts.grow(_:)(67);
  v2._object = (void *)0x8000000100185720;
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v2);
  id v3 = [(id)type metadata accessor for SoloEventEntity() databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD00000000000001CLL;
  v8._object = (void *)0x80000001001857B0;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x76655F74756F6E73;
  v9._object = (void *)0xEB00000000746E65;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3B290A4E4F534A20;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  id v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v11);
}

uint64_t sub_10003A3D8()
{
  v1[19] = v0;
  uint64_t v2 = type metadata accessor for URLRequest();
  v1[20] = v2;
  v1[21] = *(void *)(v2 - 8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[24] = v3;
  v1[25] = *(void *)(v3 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  sub_100012960(&qword_1001E1170);
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  int v6 = (uint64_t (*)(char))((char *)&dword_1001E4070 + dword_1001E4070);
  uint64_t v4 = (void *)swift_task_alloc();
  v1[32] = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10003A5B0;
  return v6(8);
}

uint64_t sub_10003A5B0(char a1)
{
  *(unsigned char *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10003A6B0, 0, 0);
}

uint64_t sub_10003A6B0()
{
  if (*(unsigned char *)(v0 + 360))
  {
    sub_100012D78((void *)(*(void *)(v0 + 152) + 8), *(void *)(*(void *)(v0 + 152) + 32));
    Swift::String v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v8;
    void *v8 = v0;
    v8[1] = sub_10003A8EC;
    uint64_t v9 = *(void *)(v0 + 240);
    return sub_100112540(v9, 9);
  }
  else
  {
    if (qword_1001E08E8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100012E74(v1, (uint64_t)qword_1001E5FE0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Reengagement fetch is disabled", v4, 2u);
      swift_slowDealloc();
    }

    sub_10003CE88();
    swift_allocError();
    unsigned char *v5 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_10003A8EC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10003A9E8, 0, 0);
}

uint64_t sub_10003A9E8()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  int v5 = v4(v1, 1, v2);
  uint64_t v6 = v0[31];
  if (v5 == 1)
  {
    URL.init(string:)();
    sub_100020764(v1);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[31], v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  uint64_t v7 = v0[29];
  uint64_t v8 = v0[24];
  sub_1000207C4(v0[31], v7);
  if (v4(v7, 1, v8) == 1)
  {
    sub_100020764(v0[29]);
    if (qword_1001E08E8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100012E74(v9, (uint64_t)qword_1001E5FE0);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      Swift::String v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalid URL for token fetch task", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = v0[31];

    sub_10003CE88();
    swift_allocError();
    *Swift::String v14 = 1;
    swift_willThrow();
    sub_100020764(v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  else
  {
    Swift::String v15 = (void *)v0[19];
    (*(void (**)(void, void, void))(v0[25] + 32))(v0[28], v0[29], v0[24]);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v0[15] = *v15;
    sub_10003CEDC();
    swift_bridgeObjectRetain();
    uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v0[34] = 0;
    v0[35] = v16;
    v0[36] = v17;
    uint64_t v20 = v16;
    unint64_t v21 = v17;
    uint64_t v22 = v0[27];
    uint64_t v24 = v0[25];
    uint64_t v23 = v0[26];
    uint64_t v25 = v0[24];
    uint64_t v26 = v0[22];
    uint64_t v51 = v0[28];
    uint64_t v52 = v0[21];
    uint64_t v53 = v0[20];
    uint64_t v54 = v0[23];
    swift_bridgeObjectRelease();
    swift_release();
    id v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
    v27(v22, v51, v25);
    v27(v23, v22, v25);
    sub_10003CF30(v20, v21);
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    URLRequest.httpMethod.setter();
    sub_10003CF30(v20, v21);
    URLRequest.httpBody.setter();
    v28.value._object = (void *)0x80000001001858A0;
    v28.value._countAndFlagsBits = 0xD000000000000010;
    v29._countAndFlagsBits = 0x2D746E65746E6F43;
    v29._object = (void *)0xEC00000065707954;
    URLRequest.setValue(_:forHTTPHeaderField:)(v28, v29);
    sub_100020930(v20, v21);
    Swift::String v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v0[37] = v30;
    v0[38] = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v30(v22, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v54, v26, v53);
    id v31 = [self deviceGUID];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v34 = v33;

    v35.value._countAndFlagsBits = v32;
    v35.value._object = v34;
    v36._countAndFlagsBits = 0x646975472D58;
    v36._object = (void *)0xE600000000000000;
    URLRequest.setValue(_:forHTTPHeaderField:)(v35, v36);
    swift_bridgeObjectRelease();
    NSString v37 = String._bridgeToObjectiveC()();
    NSString v38 = String._bridgeToObjectiveC()();
    id v39 = [self bagForProfile:v37 profileVersion:v38];

    id v40 = [objc_allocWithZone((Class)AMSURLRequestEncoder) initWithBag:v39];
    v0[39] = v40;

    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    id v42 = [v40 requestByEncodingRequest:isa parameters:0];
    v0[40] = v42;

    if (qword_1001E08E8 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    v0[41] = sub_100012E74(v43, (uint64_t)qword_1001E5FE0);
    Swift::String v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      Swift::String v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Starting fetch token request...", v46, 2u);
      swift_slowDealloc();
    }

    id v47 = [self defaultSessionConfiguration];
    id v48 = [objc_allocWithZone((Class)AMSURLSession) initWithConfiguration:v47];
    v0[42] = v48;

    id v49 = [v48 dataTaskPromiseWithRequestPromise:v42];
    v0[43] = v49;
    v0[2] = v0;
    v0[7] = v0 + 16;
    v0[3] = sub_10003B1A4;
    uint64_t v50 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100026D58;
    v0[13] = &unk_1001C38A8;
    v0[14] = v50;
    [v49 resultWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_10003B1A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 352) = v1;
  if (v1) {
    uint64_t v2 = sub_10003B9C8;
  }
  else {
    uint64_t v2 = sub_10003B2B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10003B2B4()
{
  uint64_t v1 = (void *)v0[16];
  id v2 = [v1 response];
  if (!v2) {
    goto LABEL_7;
  }
  uint64_t v3 = v2;
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {

LABEL_7:
    uint64_t v90 = v1;
    Swift::String v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "HTTP URL response is missing", v17, 2u);
      swift_slowDealloc();
    }
    Swift::String v18 = (void *)v0[42];
    Swift::String v19 = (void *)v0[43];
    uint64_t v20 = (void *)v0[39];
    unint64_t v21 = (void *)v0[40];
    unint64_t v22 = v0[36];
    uint64_t v84 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v23 = v0[35];
    uint64_t v77 = v0[28];
    uint64_t v80 = v0[31];
    uint64_t v69 = v0[23];
    uint64_t v73 = v0[24];
    uint64_t v24 = v0[21];
    uint64_t v66 = v0[20];

    sub_10003CE88();
    swift_allocError();
    *uint64_t v25 = 2;
    swift_willThrow();

    sub_100020930(v23, v22);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v69, v66);
    v84(v77, v73);
    uint64_t v14 = v80;
    goto LABEL_15;
  }
  int v5 = v4;
  if ([v4 statusCode] != (id)200)
  {
    uint64_t v91 = v1;
    id v88 = v3;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      Swift::String_optional v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::String_optional v28 = 134217984;
      v0[17] = [v5 statusCode];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Token fetch call has failed with status code: %ld", v28, 0xCu);
      swift_slowDealloc();
    }
    else
    {
    }
    Swift::String v30 = (void *)v0[42];
    Swift::String v29 = (void *)v0[43];
    id v31 = (void *)v0[39];
    uint64_t v32 = (void *)v0[40];
    char v81 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v33 = v0[35];
    uint64_t v74 = v0[28];
    uint64_t v78 = v0[31];
    uint64_t v70 = v0[24];
    unint64_t v62 = v0[36];
    uint64_t v67 = v0[23];
    uint64_t v35 = v0[20];
    uint64_t v34 = v0[21];
    sub_10003CE88();
    swift_allocError();
    *Swift::String v36 = 3;
    swift_willThrow();

    sub_100020930(v33, v62);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v67, v35);
    v81(v74, v70);
    goto LABEL_14;
  }
  uint64_t v6 = v0[34];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  id v7 = [v1 data];
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  sub_10003CF88();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v6)
  {
    os_log_type_t v11 = (void *)v0[42];
    Swift::String v12 = (void *)v0[43];
    Swift::String v57 = (void *)v0[40];
    uint64_t v59 = (void *)v0[39];
    long long v87 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v79 = v0[28];
    uint64_t v83 = v0[31];
    uint64_t v76 = v0[24];
    unint64_t v68 = v0[36];
    uint64_t v72 = v0[23];
    uint64_t v13 = v0[21];
    uint64_t v61 = v0[35];
    uint64_t v65 = v0[20];
    sub_100020930(v8, v10);
    swift_release();

    sub_100020930(v61, v68);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v72, v65);
    v87(v79, v76);
    uint64_t v14 = v83;
LABEL_15:
    sub_100020764(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    NSString v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
  sub_100020930(v8, v10);
  swift_release();
  id v39 = (void *)v0[39];
  uint64_t v41 = v0[35];
  unint64_t v40 = v0[36];
  uint64_t v42 = v0[31];
  uint64_t v89 = (void (*)(uint64_t, uint64_t))v0[37];
  if (!*(void *)(v0[18] + 16))
  {
    uint64_t v82 = v0[24];
    uint64_t v86 = v0[28];
    uint64_t v49 = v0[21];
    uint64_t v50 = v1;
    uint64_t v71 = v0[20];
    uint64_t v75 = v0[23];
    uint64_t v78 = v0[31];
    unint64_t v64 = v0[36];
    uint64_t v51 = (void *)v0[39];
    uint64_t v52 = (void *)v0[40];
    uint64_t v53 = (void *)v0[42];
    uint64_t v54 = (void *)v0[43];
    swift_bridgeObjectRelease();
    sub_10003CE88();
    swift_allocError();
    *uint64_t v55 = 4;
    swift_willThrow();

    sub_100020930(v41, v64);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v75, v71);
    v89(v86, v82);
LABEL_14:
    uint64_t v14 = v78;
    goto LABEL_15;
  }
  uint64_t v43 = v1;
  uint64_t v63 = v0[28];
  uint64_t v60 = v0[24];
  Swift::String v44 = (void *)v0[43];
  uint64_t v45 = v0[21];
  uint64_t v85 = v0[18];
  uint64_t v56 = v0[20];
  uint64_t v58 = v0[23];
  Swift::String v46 = (void *)v0[40];
  id v47 = (void *)v0[42];

  sub_100020930(v41, v40);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v58, v56);
  v89(v63, v60);
  sub_100020764(v42);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v48 = (uint64_t (*)(uint64_t))v0[1];
  return v48(v85);
}

uint64_t sub_10003B9C8()
{
  uint64_t v1 = (void *)v0[43];
  id v2 = (void *)v0[42];
  uint64_t v4 = (void *)v0[39];
  uint64_t v3 = (void *)v0[40];
  unint64_t v5 = v0[36];
  Swift::String v15 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v6 = v0[35];
  uint64_t v13 = v0[28];
  uint64_t v14 = v0[31];
  uint64_t v11 = v0[23];
  uint64_t v12 = v0[24];
  uint64_t v8 = v0[20];
  uint64_t v7 = v0[21];
  swift_willThrow();

  sub_100020930(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v8);
  v15(v13, v12);
  sub_100020764(v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10003BB14(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1518);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10003D444();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_100012960(&qword_1001E1528);
  sub_10003DC2C(&qword_1001E1530, &qword_1001E1528, (void (*)(void))sub_10003D498);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10003BC9C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E15B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_10003DCEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  unsigned char v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[11] = *(unsigned char *)(v3 + 40);
    v10[10] = 4;
    sub_10003DD94();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10003BE8C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1568);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10003DB30();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_100012960(&qword_1001E1550);
  sub_10003DC2C(&qword_1001E1570, &qword_1001E1550, (void (*)(void))sub_10003DBD8);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10003C014(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E1618);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_10003EA50();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10003C1EC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10003C27C;
  return sub_10003A3D8();
}

uint64_t sub_10003C27C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_10003C390()
{
  return String.hash(into:)();
}

uint64_t sub_10003C3B0@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1001C0180;
  return sub_10003CB6C(v2, a1, a2);
}

void sub_10003C3BC(void *a1@<X8>)
{
  *a1 = 0x6E692D6E656B6F74;
  a1[1] = 0xEA00000000006F66;
}

uint64_t sub_10003C3DC()
{
  return 0x6E692D6E656B6F74;
}

uint64_t sub_10003C3F8@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1001C01B8;
  return sub_10003CBC8(a1, v2, a2);
}

uint64_t sub_10003C404(uint64_t a1)
{
  unint64_t v2 = sub_10003D444();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003C440(uint64_t a1)
{
  unint64_t v2 = sub_10003D444();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10003C47C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10003D4EC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10003C4A8(void *a1)
{
  return sub_10003BB14(a1, *v1);
}

uint64_t sub_10003C4C4(char *a1, char *a2)
{
  return sub_100105D40(*a1, *a2);
}

Swift::Int sub_10003C4D0()
{
  return Hasher._finalize()();
}

uint64_t sub_10003C5E0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10003C6D8()
{
  return Hasher._finalize()();
}

unint64_t sub_10003C7E4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10003D69C(*a1);
  *a2 = result;
  return result;
}

void sub_10003C814(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEF746E656D656C65;
      uint64_t v3 = 0x2D6465646E696C62;
      goto LABEL_3;
    case 2:
      *a1 = 0x6D617473656D6974;
      a1[1] = 0xE900000000000070;
      break;
    case 3:
      *a1 = 0x6564692D6D657469;
      a1[1] = 0xEF7265696669746ELL;
      break;
    case 4:
      *a1 = 0x6D6E6F7269766E65;
      a1[1] = 0xEB00000000746E65;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10003C8E8()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x2D6465646E696C62;
      break;
    case 2:
      uint64_t result = 0x6D617473656D6974;
      break;
    case 3:
      uint64_t result = 0x6564692D6D657469;
      break;
    case 4:
      uint64_t result = 0x6D6E6F7269766E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10003C9AC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10003D69C(a1);
  *a2 = result;
  return result;
}

void sub_10003C9D4(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10003C9E0(uint64_t a1)
{
  unint64_t v2 = sub_10003DCEC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003CA1C(uint64_t a1)
{
  unint64_t v2 = sub_10003DCEC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10003CA58@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10003D6E8(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_10003CA9C(void *a1)
{
  return sub_10003BC9C(a1);
}

Swift::Int sub_10003CAB4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10003CB0C()
{
  return Hasher._finalize()();
}

uint64_t sub_10003CB60@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1001C01F0;
  return sub_10003CB6C(v2, a1, a2);
}

uint64_t sub_10003CB6C@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

uint64_t sub_10003CBBC@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1001C0228;
  return sub_10003CBC8(a1, v2, a2);
}

uint64_t sub_10003CBC8@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

uint64_t sub_10003CC1C(uint64_t a1)
{
  unint64_t v2 = sub_10003DB30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003CC58(uint64_t a1)
{
  unint64_t v2 = sub_10003DB30();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10003CC94@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10003D980(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10003CCC0(void *a1)
{
  return sub_10003BE8C(a1, *v1);
}

uint64_t sub_10003CCDC()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746E656D656C65;
      break;
    case 2:
      uint64_t result = 0x666F6F7270;
      break;
    case 3:
      uint64_t result = 0x6369666974726563;
      break;
    case 4:
      uint64_t result = 0x726F727265;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003CD7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10003E4D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003CDA4(uint64_t a1)
{
  unint64_t v2 = sub_10003EA50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003CDE0(uint64_t a1)
{
  unint64_t v2 = sub_10003EA50();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10003CE1C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10003E6E4(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10003CE70(void *a1)
{
  return sub_10003C014(a1);
}

unint64_t sub_10003CE88()
{
  unint64_t result = qword_1001E14D8;
  if (!qword_1001E14D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E14D8);
  }
  return result;
}

unint64_t sub_10003CEDC()
{
  unint64_t result = qword_1001E14E0;
  if (!qword_1001E14E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E14E0);
  }
  return result;
}

uint64_t sub_10003CF30(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

unint64_t sub_10003CF88()
{
  unint64_t result = qword_1001E14E8;
  if (!qword_1001E14E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E14E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenFetchResponse()
{
  return &type metadata for TokenFetchResponse;
}

ValueMetadata *type metadata accessor for TokenFetchRequest()
{
  return &type metadata for TokenFetchRequest;
}

{
  return &type metadata for TokenFetchRequest;
}

ValueMetadata *type metadata accessor for ReengagementTokenFetchTaskError()
{
  return &type metadata for ReengagementTokenFetchTaskError;
}

uint64_t initializeWithCopy for TokenFetchBlindInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenFetchBlindInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for TokenFetchBlindInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TokenFetchBlindInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenFetchBlindInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenFetchBlindInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenFetchBlindInfo()
{
  return &type metadata for TokenFetchBlindInfo;
}

uint64_t destroy for ReengagementTokenFetchTask(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_bridgeObjectRelease();

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v1);
}

uint64_t initializeWithCopy for ReengagementTokenFetchTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  Swift::Int v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *assignWithCopy for ReengagementTokenFetchTask(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100017B78(a1 + 1, v3);
  return a1;
}

uint64_t assignWithTake for ReengagementTokenFetchTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReengagementTokenFetchTask(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReengagementTokenFetchTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReengagementTokenFetchTask()
{
  return &type metadata for ReengagementTokenFetchTask;
}

unint64_t sub_10003D3F0()
{
  unint64_t result = qword_1001E1510;
  if (!qword_1001E1510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1510);
  }
  return result;
}

unint64_t sub_10003D444()
{
  unint64_t result = qword_1001E1520;
  if (!qword_1001E1520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1520);
  }
  return result;
}

unint64_t sub_10003D498()
{
  unint64_t result = qword_1001E1538;
  if (!qword_1001E1538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1538);
  }
  return result;
}

void *sub_10003D4EC(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E1580);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100012D78(a1, a1[3]);
  sub_10003D444();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100012960(&qword_1001E1528);
    sub_10003DC2C(&qword_1001E1588, &qword_1001E1528, (void (*)(void))sub_10003DC98);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10003D69C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C00E8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_10003D6E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E1598);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10003DCEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v26 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v20 = v10;
  char v24 = 2;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  char v23 = 3;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  char v21 = 4;
  sub_10003DD40();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v13 = v22;
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = v20;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v15;
  uint64_t v16 = v19;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v16;
  *(void *)(a2 + 32) = v18;
  *(unsigned char *)(a2 + 40) = v13;
  return result;
}

void *sub_10003D980(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E1540);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100012D78(a1, a1[3]);
  sub_10003DB30();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100012960(&qword_1001E1550);
    sub_10003DC2C(&qword_1001E1558, &qword_1001E1550, (void (*)(void))sub_10003DB84);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10003DB30()
{
  unint64_t result = qword_1001E1548;
  if (!qword_1001E1548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1548);
  }
  return result;
}

unint64_t sub_10003DB84()
{
  unint64_t result = qword_1001E1560;
  if (!qword_1001E1560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1560);
  }
  return result;
}

unint64_t sub_10003DBD8()
{
  unint64_t result = qword_1001E1578;
  if (!qword_1001E1578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1578);
  }
  return result;
}

uint64_t sub_10003DC2C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100011ECC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003DC98()
{
  unint64_t result = qword_1001E1590;
  if (!qword_1001E1590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1590);
  }
  return result;
}

unint64_t sub_10003DCEC()
{
  unint64_t result = qword_1001E15A0;
  if (!qword_1001E15A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15A0);
  }
  return result;
}

unint64_t sub_10003DD40()
{
  unint64_t result = qword_1001E15A8;
  if (!qword_1001E15A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15A8);
  }
  return result;
}

unint64_t sub_10003DD94()
{
  unint64_t result = qword_1001E15B8;
  if (!qword_1001E15B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenFetchBlindInfo.CodingKeys()
{
  return &type metadata for TokenFetchBlindInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for TokenFetchResponse.CodingKeys()
{
  return &type metadata for TokenFetchResponse.CodingKeys;
}

unsigned char *_s20AttributionKitDaemon18TokenFetchResponseV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10003DEACLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenFetchRequest.CodingKeys()
{
  return &type metadata for TokenFetchRequest.CodingKeys;
}

{
  return &type metadata for TokenFetchRequest.CodingKeys;
}

uint64_t destroy for TokenFetchEvaluatedInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenFetchEvaluatedInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TokenFetchEvaluatedInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PostbackResponse(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TokenFetchEvaluatedInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenFetchEvaluatedInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenFetchEvaluatedInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenFetchEvaluatedInfo()
{
  return &type metadata for TokenFetchEvaluatedInfo;
}

unint64_t sub_10003E1C0()
{
  unint64_t result = qword_1001E15C0;
  if (!qword_1001E15C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15C0);
  }
  return result;
}

unint64_t sub_10003E218()
{
  unint64_t result = qword_1001E15C8;
  if (!qword_1001E15C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15C8);
  }
  return result;
}

unint64_t sub_10003E270()
{
  unint64_t result = qword_1001E15D0;
  if (!qword_1001E15D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15D0);
  }
  return result;
}

unint64_t sub_10003E2C8()
{
  unint64_t result = qword_1001E15D8;
  if (!qword_1001E15D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15D8);
  }
  return result;
}

unint64_t sub_10003E320()
{
  unint64_t result = qword_1001E15E0;
  if (!qword_1001E15E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15E0);
  }
  return result;
}

unint64_t sub_10003E378()
{
  unint64_t result = qword_1001E15E8;
  if (!qword_1001E15E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15E8);
  }
  return result;
}

unint64_t sub_10003E3D0()
{
  unint64_t result = qword_1001E15F0;
  if (!qword_1001E15F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15F0);
  }
  return result;
}

unint64_t sub_10003E428()
{
  unint64_t result = qword_1001E15F8;
  if (!qword_1001E15F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E15F8);
  }
  return result;
}

unint64_t sub_10003E480()
{
  unint64_t result = qword_1001E1600;
  if (!qword_1001E1600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1600);
  }
  return result;
}

uint64_t sub_10003E4D4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D656C65 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x666F6F7270 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6369666974726563 && a2 == 0xEB00000000657461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10003E6E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E1608);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10003EA50();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v38 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v37 = 1;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v33 = v10;
  char v36 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v30 = v13;
  char v35 = 3;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  uint64_t v32 = v15;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v34 = 4;
  uint64_t v31 = v16;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v28 = v17;
  v20(v8, v5);
  swift_bridgeObjectRetain();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v21 = v31;
  swift_bridgeObjectRelease();
  uint64_t v22 = v32;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v24 = v33;
  *a2 = v9;
  a2[1] = v24;
  uint64_t v25 = v30;
  a2[2] = v12;
  a2[3] = v25;
  uint64_t v26 = v29;
  a2[4] = v22;
  a2[5] = v26;
  uint64_t v27 = v28;
  a2[6] = v21;
  a2[7] = v27;
  a2[8] = v19;
  return result;
}

unint64_t sub_10003EA50()
{
  unint64_t result = qword_1001E1610;
  if (!qword_1001E1610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1610);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BlueDogImpression.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s20AttributionKitDaemon31ReengagementTokenFetchTaskErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003EC00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenFetchEvaluatedInfo.CodingKeys()
{
  return &type metadata for TokenFetchEvaluatedInfo.CodingKeys;
}

unint64_t sub_10003EC3C()
{
  unint64_t result = qword_1001E1620;
  if (!qword_1001E1620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1620);
  }
  return result;
}

unint64_t sub_10003EC94()
{
  unint64_t result = qword_1001E1628;
  if (!qword_1001E1628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1628);
  }
  return result;
}

unint64_t sub_10003ECEC()
{
  unint64_t result = qword_1001E1630;
  if (!qword_1001E1630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1630);
  }
  return result;
}

id sub_10003ED4C()
{
  return [*v0 originIdentifier];
}

id sub_10003ED5C()
{
  return [*v0 context];
}

id sub_10003ED6C()
{
  return [*v0 timestamp];
}

uint64_t sub_10003ED7C(uint64_t a1, void *a2)
{
  uint64_t v22 = a1;
  char v23 = a2;
  uint64_t v25 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v24 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100012960(&qword_1001E1658);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019F68(0, (unint64_t *)&qword_1001E0F70);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  uint64_t v13 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v22, v6);
  unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v23;
  *(void *)(v15 + 16) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v14, (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_10003F750;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002437C;
  aBlock[3] = &unk_1001C3DC8;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v16;
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_100019B0C();
  sub_100012960((uint64_t *)&unk_1001E0F60);
  sub_100019B64();
  uint64_t v20 = v24;
  uint64_t v19 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v27);
  return swift_release();
}

uint64_t sub_10003F194(uint64_t a1)
{
  id v2 = [self sharedInstance];
  [v2 authenticateMessage:a1];

  sub_100012960(&qword_1001E1658);
  return CheckedContinuation.resume(returning:)();
}

Swift::Int MessageRegistration.hashValue.getter()
{
  return Hasher._finalize()();
}

void MessageRegistration.hash(into:)()
{
}

Swift::Int sub_10003F28C()
{
  return Hasher._finalize()();
}

uint64_t sub_10003F2CC(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return _swift_task_switch(sub_10003F2EC, 0, 0);
}

uint64_t sub_10003F2EC()
{
  sub_100029CD8(v0[9], (uint64_t)(v0 + 2));
  sub_100012960(&qword_1001E1640);
  sub_100019F68(0, &qword_1001E1648);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[7];
    v0[10] = v1;
    uint64_t v2 = swift_task_alloc();
    v0[11] = v2;
    *(void *)(v2 + 16) = v1;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[12] = v3;
    type metadata accessor for BKSHIDEventAuthenticationStatus(0);
    *uint64_t v3 = v0;
    v3[1] = sub_10003F4A4;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 8, 0, 0, 0xD000000000000017, 0x80000001001858F0, sub_10003F678, v2, v4);
  }
  else
  {
    sub_10003F624();
    swift_allocError();
    swift_willThrow();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10003F4A4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10003F5BC, 0, 0);
}

uint64_t sub_10003F5BC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

unint64_t sub_10003F624()
{
  unint64_t result = qword_1001E1650;
  if (!qword_1001E1650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1650);
  }
  return result;
}

uint64_t sub_10003F678(uint64_t a1)
{
  return sub_10003ED7C(a1, *(void **)(v1 + 16));
}

uint64_t sub_10003F680()
{
  uint64_t v1 = sub_100012960(&qword_1001E1658);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003F750()
{
  sub_100012960(&qword_1001E1658);
  uint64_t v1 = *(void *)(v0 + 16);

  return sub_10003F194(v1);
}

uint64_t sub_10003F7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003F7C8()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for BackBoardEventDeliveryManager()
{
  return &type metadata for BackBoardEventDeliveryManager;
}

unsigned char *storeEnumTagSinglePayload for BackBoardEventDeliveryManager.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10003F87CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackBoardEventDeliveryManager.Error()
{
  return &type metadata for BackBoardEventDeliveryManager.Error;
}

unint64_t sub_10003F8B4(uint64_t a1)
{
  unint64_t result = sub_10003F624();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003F8E0()
{
  unint64_t result = qword_1001E1660;
  if (!qword_1001E1660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1660);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TokenVendingFetchRepeatingActivity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for TokenVendingFetchRepeatingActivity()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for TokenVendingFetchRepeatingActivity(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TokenVendingFetchRepeatingActivity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenVendingFetchRepeatingActivity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenVendingFetchRepeatingActivity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenVendingFetchRepeatingActivity()
{
  return &type metadata for TokenVendingFetchRepeatingActivity;
}

uint64_t sub_10003FA78()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1001E1670 + dword_1001E1670);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100012AB8;
  return v3();
}

uint64_t sub_10003FB18()
{
  return _swift_task_switch(sub_10003FB34, 0, 0);
}

uint64_t sub_10003FB34()
{
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1001E5F88;
  sub_1000CE908(v0 + 8);
  v0[16] = &type metadata for LaunchServicesRecordFactory;
  v0[17] = &off_1001C6D08;
  uint64_t v2 = qword_1001E0880;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1001E5F50;
  v0[24] = type metadata accessor for TaskGreyhound();
  v0[25] = &off_1001C2490;
  v0[21] = v4;
  v0[29] = &type metadata for AMSDogBag;
  v0[30] = &off_1001CAA18;
  uint64_t v5 = qword_1001E0940;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1001E60E8;
  v0[34] = type metadata accessor for SnoutManager();
  v0[35] = &off_1001CB0F8;
  v0[31] = v6;
  v0[2] = 0x74735F6E656B6F74;
  v0[3] = 0xEB0000000065726FLL;
  v0[4] = v3;
  v0[5] = 0xD000000000000010;
  v0[6] = 0x8000000100185910;
  v0[7] = v3;
  v0[18] = 0xD000000000000012;
  v0[19] = 0x8000000100185930;
  v0[20] = v3;
  uint64_t v7 = qword_1001E08E0;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100012E74(v8, (uint64_t)qword_1001E5FC8);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Begin token vending fetches", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = (void *)swift_task_alloc();
  v0[36] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10003FE10;
  return sub_10009A2AC();
}

uint64_t sub_10003FE10()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10003FF0C, 0, 0);
}

uint64_t sub_10003FF0C()
{
  sub_10003FF6C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003FF6C(uint64_t a1)
{
  return a1;
}

unsigned char *storeEnumTagSinglePayload for DictionaryDecoder.DictionaryDecoderError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100040060);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.DictionaryDecoderError()
{
  return &type metadata for DictionaryDecoder.DictionaryDecoderError;
}

unint64_t sub_100040098(uint64_t a1)
{
  unint64_t result = sub_1000400C0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000400C0()
{
  unint64_t result = qword_1001E1678;
  if (!qword_1001E1678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1678);
  }
  return result;
}

unint64_t sub_100040118()
{
  unint64_t result = qword_1001E1680;
  if (!qword_1001E1680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1680);
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributionKitCanineArbiter()
{
  return &type metadata for AttributionKitCanineArbiter;
}

uint64_t sub_10004017C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_1000402B4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100040380(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100040398(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  int v3 = sub_100139D3C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  sub_100012960(&qword_1001E1690);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100040504(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  int v3 = sub_100139D50(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[33 * v8 + 4];
  if (a1 + 32 < v9 + 264 * v2 && v9 < a1 + 32 + 264 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_100040660(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for ImpressionModel() - 8);
  int v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = (void *)sub_100043D0C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100041AD0(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_100040708(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10006111C(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_1000424B8(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_100040778(char a1)
{
  unint64_t result = 0x697274732D73776ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x676E69726564726FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100040844(char a1)
{
  unint64_t result = 0x697274732D73776ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x676E69726564726FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100040910(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E16C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000462A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  unsigned char v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = *(unsigned char *)(v3 + 16);
    v10[13] = 1;
    sub_1000462F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[12] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[11] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[10] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100040B04(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48));
}

uint64_t sub_100040B10(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100040B48(unsigned __int8 *a1, char *a2)
{
  return sub_100106708(*a1, *a2);
}

Swift::Int sub_100040B54()
{
  return sub_100108D4C();
}

uint64_t sub_100040B5C()
{
  return sub_100109FF0();
}

Swift::Int sub_100040B64()
{
  return sub_10010B2A0();
}

unint64_t sub_100040B6C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10004645C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100040B9C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100040778(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100040BC8()
{
  return sub_100040844(*v0);
}

unint64_t sub_100040BD0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10004645C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100040BF8(uint64_t a1)
{
  unint64_t v2 = sub_1000462A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040C34(uint64_t a1)
{
  unint64_t v2 = sub_1000462A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100040C70@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000464A8(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_100040CBC(void *a1)
{
  return sub_100040910(a1);
}

unint64_t sub_100040CD4(char a1)
{
  unint64_t result = 0x642D656372756F73;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64692D6D616461;
      break;
    case 2:
      unint64_t result = 0x6F7774656E2D6461;
      break;
    case 3:
      unint64_t result = 0x6E676961706D6163;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x6973736572706D69;
      break;
    case 7:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 8:
      unint64_t result = 0x727574616E676973;
      break;
    case 9:
      unint64_t result = 0x612D6E696769726FLL;
      break;
    case 10:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 11:
      unint64_t result = 0x7974696C65646966;
      break;
    case 12:
      unint64_t result = 0xD000000000000010;
      break;
    case 13:
      unint64_t result = 0x676E69726564726FLL;
      break;
    case 14:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    case 15:
      unint64_t result = 0x69742D6C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100040F2C(char a1)
{
  unint64_t result = 0x642D656372756F73;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64692D6D616461;
      break;
    case 2:
      unint64_t result = 0x6F7774656E2D6461;
      break;
    case 3:
      unint64_t result = 0x6E676961706D6163;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x6973736572706D69;
      break;
    case 7:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 8:
      unint64_t result = 0x727574616E676973;
      break;
    case 9:
      unint64_t result = 0x612D6E696769726FLL;
      break;
    case 10:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 11:
      unint64_t result = 0x7974696C65646966;
      break;
    case 12:
      unint64_t result = 0xD000000000000010;
      break;
    case 13:
      unint64_t result = 0x676E69726564726FLL;
      break;
    case 14:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    case 15:
      unint64_t result = 0x69742D6C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100041184(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E16D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_10004634C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000463A0(v3 + 201, (uint64_t)&v12);
    sub_1000463A0((uint64_t)&v12, (uint64_t)&v11);
    v10[13] = 14;
    sub_100046408();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v11 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100041554(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100040CD4(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100040CD4(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000415E0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100040CD4(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100041644()
{
  sub_100040CD4(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100041698()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100040CD4(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1000416F8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000467AC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100041728@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100040CD4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100041754()
{
  return sub_100040F2C(*v0);
}

unint64_t sub_10004175C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000467AC(a1);
  *a2 = result;
  return result;
}

void sub_100041784(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_100041790(uint64_t a1)
{
  unint64_t v2 = sub_10004634C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000417CC(uint64_t a1)
{
  unint64_t v2 = sub_10004634C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100041808@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000467F8(a1, v11);
  if (!v2)
  {
    long long v5 = v11[11];
    a2[10] = v11[10];
    a2[11] = v5;
    a2[12] = v12[0];
    *(_OWORD *)((char *)a2 + 201) = *(_OWORD *)((char *)v12 + 9);
    long long v6 = v11[7];
    a2[6] = v11[6];
    a2[7] = v6;
    long long v7 = v11[9];
    a2[8] = v11[8];
    a2[9] = v7;
    long long v8 = v11[3];
    a2[2] = v11[2];
    a2[3] = v8;
    long long v9 = v11[5];
    a2[4] = v11[4];
    a2[5] = v9;
    double result = *(double *)v11;
    long long v10 = v11[1];
    *a2 = v11[0];
    a2[1] = v10;
  }
  return result;
}

uint64_t sub_10004187C(void *a1)
{
  return sub_100041184(a1);
}

uint64_t sub_1000418E8()
{
  uint64_t v1 = 208;
  if (*(unsigned char *)(v0 + 216)) {
    uint64_t v1 = 104;
  }
  return *(void *)(v0 + v1);
}

uint64_t ImpressionIntakeRequest.clientBundleID.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_100041934(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    if (v5 <= 0)
    {
      long long v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        unint64_t v10 = a2 + 40 * a3;
        if (v10 < (unint64_t)&v8[5 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 40 * v5) {
          goto LABEL_17;
        }
        sub_100012960(&qword_1001E1690);
        swift_arrayInitWithCopy();
        return v8;
      }
    }
    else
    {
      sub_100012960(&qword_1001E16A0);
      long long v8 = (void *)swift_allocObject();
      size_t v9 = j__malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 40);
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  double result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_100041AD0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v136 = type metadata accessor for ImpressionModel();
  uint64_t v130 = *(void *)(v136 - 8);
  uint64_t v4 = __chkstk_darwin(v136);
  uint64_t v127 = (uint64_t)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v137 = (uint64_t)&v121 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v133 = (uint64_t)&v121 - v9;
  __chkstk_darwin(v8);
  uint64_t v132 = (uint64_t)&v121 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_141;
    }
    if (v11) {
      return sub_100042D58(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_149;
  }
  Swift::Int v123 = result;
  if (v11 < 2)
  {
    BOOL v17 = (char *)_swiftEmptyArrayStorage;
    unint64_t v129 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80));
    char v122 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      unint64_t v19 = _swiftEmptyArrayStorage[2];
LABEL_107:
      objc_super v114 = v17;
      if (v19 >= 2)
      {
        uint64_t v115 = *a1;
        do
        {
          unint64_t v116 = v19 - 2;
          if (v19 < 2) {
            goto LABEL_136;
          }
          if (!v115) {
            goto LABEL_148;
          }
          uint64_t v117 = *(void *)&v114[16 * v116 + 32];
          uint64_t v118 = *(void *)&v114[16 * v19 + 24];
          sub_100043138(v115 + *(void *)(v130 + 72) * v117, v115 + *(void *)(v130 + 72) * *(void *)&v114[16 * v19 + 16], v115 + *(void *)(v130 + 72) * v118, v129);
          if (v2) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            objc_super v114 = sub_100043CF8((uint64_t)v114);
          }
          if (v116 >= *((void *)v114 + 2)) {
            goto LABEL_138;
          }
          int v119 = &v114[16 * v116 + 32];
          *(void *)int v119 = v117;
          *((void *)v119 + 1) = v118;
          unint64_t v120 = *((void *)v114 + 2);
          if (v19 > v120) {
            goto LABEL_139;
          }
          memmove(&v114[16 * v19 + 16], &v114[16 * v19 + 32], 16 * (v120 - v19));
          *((void *)v114 + 2) = v120 - 1;
          unint64_t v19 = v120 - 1;
        }
        while (v120 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v122[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v130 + 80);
    char v122 = (void *)v15;
    unint64_t v129 = v15 + ((v16 + 32) & ~v16);
  }
  unint64_t v18 = 0;
  BOOL v17 = (char *)_swiftEmptyArrayStorage;
  v135 = a1;
  while (1)
  {
    Swift::Int v20 = v18;
    Swift::Int v21 = v18 + 1;
    Swift::Int v128 = v18;
    if ((uint64_t)(v18 + 1) >= v11) {
      goto LABEL_39;
    }
    uint64_t v125 = v2;
    uint64_t v22 = *a1;
    unint64_t v23 = *(void *)(v130 + 72);
    uint64_t v24 = v132;
    sub_100045848(*a1 + v23 * v21, v132);
    uint64_t v25 = v133;
    sub_100045848(v22 + v23 * v20, v133);
    uint64_t v26 = *(int *)(v136 + 48);
    unint64_t v138 = *(void *)(v24 + v26);
    unint64_t v134 = *(void *)(v25 + v26);
    sub_1000458AC(v25);
    sub_1000458AC(v24);
    uint64_t v131 = v22;
    unint64_t v139 = v23;
    if (v20 + 2 >= v11)
    {
      Swift::Int v29 = v20 + 2;
      unint64_t v36 = v23;
    }
    else
    {
      char v124 = v17;
      Swift::Int v27 = v23 * v21;
      uint64_t v28 = v22;
      Swift::Int v29 = v20 + 2;
      uint64_t v30 = v23 * (v20 + 2);
      while (1)
      {
        Swift::Int v31 = v11;
        int v32 = v134 < v138;
        uint64_t v33 = v132;
        sub_100045848(v28 + v30, v132);
        uint64_t v34 = v133;
        sub_100045848(v28 + v27, v133);
        int v35 = *(void *)(v34 + *(int *)(v136 + 48)) >= *(void *)(v33 + *(int *)(v136 + 48));
        sub_1000458AC(v34);
        sub_1000458AC(v33);
        if (v32 == v35) {
          break;
        }
        unint64_t v36 = v139;
        v28 += v139;
        ++v29;
        Swift::Int v11 = v31;
        if (v31 == v29)
        {
          Swift::Int v29 = v31;
          a1 = v135;
          BOOL v17 = v124;
          Swift::Int v20 = v128;
          goto LABEL_23;
        }
      }
      a1 = v135;
      BOOL v17 = v124;
      Swift::Int v20 = v128;
      Swift::Int v11 = v31;
      unint64_t v36 = v139;
    }
LABEL_23:
    if (v134 >= v138) {
      break;
    }
    if (v29 < v20) {
      goto LABEL_142;
    }
    Swift::Int v21 = v29;
    if (v20 >= v29)
    {
      uint64_t v2 = v125;
LABEL_39:
      if (v21 >= v11) {
        goto LABEL_59;
      }
      goto LABEL_40;
    }
    unint64_t v138 = v11;
    char v124 = v17;
    uint64_t v37 = 0;
    uint64_t v38 = v36 * (v29 - 1);
    Swift::Int v39 = v29 * v36;
    uint64_t v40 = v20 * v36;
    do
    {
      if (v20 != v21 + v37 - 1)
      {
        uint64_t v41 = v131;
        if (!v131) {
          goto LABEL_147;
        }
        unint64_t v42 = v131 + v40;
        sub_1000368E8(v131 + v40, v127);
        if (v40 < v38 || v42 >= v41 + v39)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v40 != v38)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        sub_1000368E8(v127, v41 + v38);
        Swift::Int v21 = v29;
        unint64_t v36 = v139;
      }
      ++v20;
      --v37;
      v38 -= v36;
      v39 -= v36;
      v40 += v36;
    }
    while (v20 < v21 + v37);
    a1 = v135;
    BOOL v17 = v124;
    uint64_t v2 = v125;
    Swift::Int v20 = v128;
    Swift::Int v11 = v138;
    if (v21 < (uint64_t)v138) {
      goto LABEL_40;
    }
LABEL_59:
    if (v21 < v20) {
      goto LABEL_135;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v134 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      BOOL v17 = sub_1000439F0(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    unint64_t v63 = *((void *)v17 + 2);
    unint64_t v62 = *((void *)v17 + 3);
    unint64_t v19 = v63 + 1;
    if (v63 >= v62 >> 1) {
      BOOL v17 = sub_1000439F0((char *)(v62 > 1), v63 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v19;
    unint64_t v64 = v17 + 32;
    uint64_t v65 = &v17[16 * v63 + 32];
    unint64_t v66 = v134;
    *(void *)uint64_t v65 = v128;
    *((void *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        unint64_t v67 = v19 - 1;
        if (v19 >= 4)
        {
          uint64_t v72 = &v64[16 * v19];
          uint64_t v73 = *((void *)v72 - 8);
          uint64_t v74 = *((void *)v72 - 7);
          BOOL v78 = __OFSUB__(v74, v73);
          uint64_t v75 = v74 - v73;
          if (v78) {
            goto LABEL_124;
          }
          uint64_t v77 = *((void *)v72 - 6);
          uint64_t v76 = *((void *)v72 - 5);
          BOOL v78 = __OFSUB__(v76, v77);
          uint64_t v70 = v76 - v77;
          char v71 = v78;
          if (v78) {
            goto LABEL_125;
          }
          unint64_t v79 = v19 - 2;
          uint64_t v80 = &v64[16 * v19 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          BOOL v78 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          if (v78) {
            goto LABEL_127;
          }
          BOOL v78 = __OFADD__(v70, v83);
          uint64_t v84 = v70 + v83;
          if (v78) {
            goto LABEL_130;
          }
          if (v84 >= v75)
          {
            uint64_t v102 = &v64[16 * v67];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            BOOL v78 = __OFSUB__(v103, v104);
            uint64_t v105 = v103 - v104;
            if (v78) {
              goto LABEL_134;
            }
            BOOL v95 = v70 < v105;
            goto LABEL_96;
          }
        }
        else
        {
          if (v19 != 3)
          {
            uint64_t v96 = *((void *)v17 + 4);
            uint64_t v97 = *((void *)v17 + 5);
            BOOL v78 = __OFSUB__(v97, v96);
            uint64_t v89 = v97 - v96;
            char v90 = v78;
            goto LABEL_90;
          }
          uint64_t v69 = *((void *)v17 + 4);
          uint64_t v68 = *((void *)v17 + 5);
          BOOL v78 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          char v71 = v78;
        }
        if (v71) {
          goto LABEL_126;
        }
        unint64_t v79 = v19 - 2;
        uint64_t v85 = &v64[16 * v19 - 32];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v88 = __OFSUB__(v86, v87);
        uint64_t v89 = v86 - v87;
        char v90 = v88;
        if (v88) {
          goto LABEL_129;
        }
        uint64_t v91 = &v64[16 * v67];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v78 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v78) {
          goto LABEL_132;
        }
        if (__OFADD__(v89, v94)) {
          goto LABEL_133;
        }
        if (v89 + v94 >= v70)
        {
          BOOL v95 = v70 < v94;
LABEL_96:
          if (v95) {
            unint64_t v67 = v79;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v90) {
          goto LABEL_128;
        }
        uint64_t v98 = &v64[16 * v67];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v78 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v78) {
          goto LABEL_131;
        }
        if (v101 < v89) {
          goto LABEL_14;
        }
LABEL_98:
        unint64_t v106 = v67 - 1;
        if (v67 - 1 >= v19)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        uint64_t v107 = *a1;
        if (!*a1) {
          goto LABEL_146;
        }
        uint64_t v108 = v17;
        uint64_t v109 = &v64[16 * v106];
        uint64_t v110 = *(void *)v109;
        uint64_t v111 = &v64[16 * v67];
        uint64_t v112 = *((void *)v111 + 1);
        sub_100043138(v107 + *(void *)(v130 + 72) * *(void *)v109, v107 + *(void *)(v130 + 72) * *(void *)v111, v107 + *(void *)(v130 + 72) * v112, v129);
        if (v2) {
          goto LABEL_118;
        }
        if (v112 < v110) {
          goto LABEL_121;
        }
        if (v67 > *((void *)v108 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v109 = v110;
        *(void *)&v64[16 * v106 + 8] = v112;
        unint64_t v113 = *((void *)v108 + 2);
        if (v67 >= v113) {
          goto LABEL_123;
        }
        BOOL v17 = v108;
        unint64_t v19 = v113 - 1;
        memmove(&v64[16 * v67], v111 + 16, 16 * (v113 - 1 - v67));
        *((void *)v108 + 2) = v113 - 1;
        a1 = v135;
        if (v113 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v19 = 1;
LABEL_14:
    Swift::Int v11 = a1[1];
    unint64_t v18 = v134;
    if ((uint64_t)v134 >= v11) {
      goto LABEL_107;
    }
  }
  Swift::Int v21 = v29;
  uint64_t v2 = v125;
  if (v21 >= v11) {
    goto LABEL_59;
  }
LABEL_40:
  if (__OFSUB__(v21, v20)) {
    goto LABEL_140;
  }
  if (v21 - v20 >= v123) {
    goto LABEL_59;
  }
  if (__OFADD__(v20, v123)) {
    goto LABEL_143;
  }
  if (v20 + v123 >= v11) {
    Swift::Int v43 = v11;
  }
  else {
    Swift::Int v43 = v20 + v123;
  }
  if (v43 >= v20)
  {
    if (v21 != v43)
    {
      char v124 = v17;
      uint64_t v125 = v2;
      uint64_t v44 = *(void *)(v130 + 72);
      uint64_t v45 = v44 * (v21 - 1);
      uint64_t v131 = v44;
      Swift::Int v46 = v21 * v44;
      Swift::Int v126 = v43;
      do
      {
        uint64_t v48 = 0;
        unint64_t v134 = v21;
        while (1)
        {
          unint64_t v138 = v20;
          uint64_t v49 = v135;
          uint64_t v50 = *v135;
          Swift::Int v51 = v46;
          uint64_t v52 = v46 + v48 + *v135;
          uint64_t v53 = v132;
          sub_100045848(v52, v132);
          uint64_t v54 = v45;
          uint64_t v55 = v45 + v48 + v50;
          uint64_t v56 = v133;
          sub_100045848(v55, v133);
          uint64_t v57 = *(int *)(v136 + 48);
          unint64_t v139 = *(void *)(v53 + v57);
          unint64_t v58 = *(void *)(v56 + v57);
          sub_1000458AC(v56);
          sub_1000458AC(v53);
          if (v58 >= v139) {
            break;
          }
          uint64_t v59 = *v49;
          if (!*v49) {
            goto LABEL_145;
          }
          Swift::Int v46 = v51;
          uint64_t v45 = v54;
          uint64_t v60 = v59 + v54 + v48;
          sub_1000368E8(v59 + v51 + v48, v137);
          swift_arrayInitWithTakeFrontToBack();
          sub_1000368E8(v137, v60);
          v48 -= v131;
          Swift::Int v20 = v138 + 1;
          unint64_t v47 = v134;
          if (v134 == v138 + 1) {
            goto LABEL_50;
          }
        }
        unint64_t v47 = v134;
        uint64_t v45 = v54;
        Swift::Int v46 = v51;
LABEL_50:
        Swift::Int v21 = v47 + 1;
        v45 += v131;
        v46 += v131;
        Swift::Int v20 = v128;
      }
      while (v21 != v126);
      Swift::Int v21 = v126;
      BOOL v17 = v124;
      uint64_t v2 = v125;
      a1 = v135;
    }
    goto LABEL_59;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1000424B8(uint64_t *a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_134;
    }
    if (v4) {
      return sub_100042FB8(0, v4, 1, v3);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_142;
  }
  Swift::Int v110 = result;
  if (v4 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    uint64_t v109 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      if (v11 < 2)
      {
LABEL_111:
        swift_bridgeObjectRelease();
        v109[2] = 0;
        return swift_bridgeObjectRelease();
      }
LABEL_99:
      uint64_t v101 = *v3;
      while (1)
      {
        unint64_t v102 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_129;
        }
        if (!v101) {
          goto LABEL_141;
        }
        uint64_t v103 = *(void *)&v9[16 * v102 + 32];
        uint64_t v104 = *(void *)&v9[16 * v11 + 24];
        sub_1000435E0((char *)(v101 + 40 * v103), (char *)(v101 + 40 * *(void *)&v9[16 * v11 + 16]), v101 + 40 * v104, __dst);
        if (v2) {
          goto LABEL_111;
        }
        if (v104 < v103) {
          goto LABEL_130;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_100043CF8((uint64_t)v9);
        }
        if (v102 >= *((void *)v9 + 2)) {
          goto LABEL_131;
        }
        uint64_t v105 = &v9[16 * v102 + 32];
        *(void *)uint64_t v105 = v103;
        *((void *)v105 + 1) = v104;
        unint64_t v106 = *((void *)v9 + 2);
        if (v11 > v106) {
          goto LABEL_132;
        }
        memmove(&v9[16 * v11 + 16], &v9[16 * v11 + 32], 16 * (v106 - v11));
        *((void *)v9 + 2) = v106 - 1;
        unint64_t v11 = v106 - 1;
        if (v106 <= 2) {
          goto LABEL_111;
        }
      }
    }
    uint64_t v125 = v1;
  }
  else
  {
    uint64_t v125 = v1;
    uint64_t v7 = v6 >> 1;
    sub_100012960(&qword_1001E1690);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v109 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v12 = v10++;
    Swift::Int v116 = v12;
    if (v10 < v4)
    {
      uint64_t v13 = *v3;
      sub_100029CD8(*v3 + 40 * v10, (uint64_t)&v122);
      sub_100029CD8(v13 + 40 * v12, (uint64_t)v119);
      uint64_t v14 = v123;
      uint64_t v15 = v124;
      sub_100012D78(&v122, v123);
      unint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
      uint64_t v16 = v120;
      uint64_t v17 = v121;
      sub_100012D78(v119, v120);
      unint64_t v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v119);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v122);
      Swift::Int v10 = v12 + 2;
      uint64_t v111 = v13;
      if (v12 + 2 < v4)
      {
        uint64_t v107 = v9;
        uint64_t v18 = v13 + 40 * v12 + 40;
        while (1)
        {
          uint64_t v19 = v18 + 40;
          sub_100029CD8(v18 + 40, (uint64_t)&v122);
          sub_100029CD8(v18, (uint64_t)v119);
          uint64_t v20 = v123;
          uint64_t v21 = v124;
          sub_100012D78(&v122, v123);
          unint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
          uint64_t v24 = v120;
          uint64_t v23 = v121;
          sub_100012D78(v119, v120);
          BOOL v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v24, v23) >= v22;
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v119);
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v122);
          if (v112 < v113 == v25) {
            break;
          }
          ++v10;
          uint64_t v18 = v19;
          if (v4 == v10)
          {
            Swift::Int v10 = v4;
            break;
          }
        }
        uint64_t v9 = v107;
        Swift::Int v12 = v116;
      }
      if (v112 < v113)
      {
        if (v10 < v12) {
          goto LABEL_135;
        }
        if (v12 < v10)
        {
          Swift::Int v114 = v4;
          uint64_t v26 = 40 * v10 - 40;
          Swift::Int v27 = v12;
          uint64_t v28 = 40 * v12;
          Swift::Int v29 = v10;
          do
          {
            if (v27 != --v29)
            {
              if (!v111) {
                goto LABEL_140;
              }
              uint64_t v30 = v111 + v28;
              sub_100012D60((long long *)(v111 + v28), (uint64_t)&v122);
              uint64_t v31 = *(void *)(v111 + v26 + 32);
              long long v32 = *(_OWORD *)(v111 + v26 + 16);
              *(_OWORD *)uint64_t v30 = *(_OWORD *)(v111 + v26);
              *(_OWORD *)(v30 + 16) = v32;
              *(void *)(v30 + 32) = v31;
              sub_100012D60(&v122, v111 + v26);
            }
            ++v27;
            v26 -= 40;
            v28 += 40;
          }
          while (v27 < v29);
          Swift::Int v4 = v114;
          Swift::Int v12 = v116;
        }
      }
    }
    if (v10 >= v4) {
      goto LABEL_49;
    }
    if (__OFSUB__(v10, v12)) {
      goto LABEL_133;
    }
    if (v10 - v12 >= v110) {
      goto LABEL_49;
    }
    if (__OFADD__(v12, v110)) {
      goto LABEL_136;
    }
    Swift::Int v33 = v12 + v110 >= v4 ? v4 : v12 + v110;
    if (v33 < v12) {
      break;
    }
    if (v10 != v33)
    {
      uint64_t v108 = v9;
      uint64_t v34 = 40 * v10 - 40;
      Swift::Int v115 = v33;
      do
      {
        Swift::Int v35 = v12;
        uint64_t v36 = v34;
        do
        {
          uint64_t v37 = *v3 + v36;
          sub_100029CD8(v37 + 40, (uint64_t)&v122);
          sub_100029CD8(v37, (uint64_t)v119);
          uint64_t v38 = v123;
          uint64_t v39 = v124;
          sub_100012D78(&v122, v123);
          unint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
          uint64_t v41 = v120;
          uint64_t v42 = v121;
          sub_100012D78(v119, v120);
          unint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v119);
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v122);
          if (v43 >= v40) {
            break;
          }
          uint64_t v44 = *v3;
          if (!*v3) {
            goto LABEL_138;
          }
          uint64_t v45 = v44 + v36;
          sub_100012D60((long long *)(v44 + v36 + 40), (uint64_t)&v122);
          long long v46 = *(_OWORD *)(v45 + 16);
          *(_OWORD *)(v45 + 40) = *(_OWORD *)v45;
          *(_OWORD *)(v45 + 56) = v46;
          *(void *)(v45 + 72) = *(void *)(v45 + 32);
          sub_100012D60(&v122, v45);
          v36 -= 40;
          ++v35;
        }
        while (v10 != v35);
        ++v10;
        v34 += 40;
        Swift::Int v12 = v116;
      }
      while (v10 != v115);
      Swift::Int v10 = v115;
      uint64_t v9 = v108;
    }
LABEL_49:
    if (v10 < v12) {
      goto LABEL_128;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_1000439F0(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v48 = *((void *)v9 + 2);
    unint64_t v47 = *((void *)v9 + 3);
    unint64_t v11 = v48 + 1;
    if (v48 >= v47 >> 1) {
      uint64_t v9 = sub_1000439F0((char *)(v47 > 1), v48 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v11;
    uint64_t v49 = v9 + 32;
    uint64_t v50 = &v9[16 * v48 + 32];
    *(void *)uint64_t v50 = v12;
    *((void *)v50 + 1) = v10;
    if (v48)
    {
      Swift::Int v117 = v10;
      while (1)
      {
        unint64_t v51 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v56 = &v49[16 * v11];
          uint64_t v57 = *((void *)v56 - 8);
          uint64_t v58 = *((void *)v56 - 7);
          BOOL v62 = __OFSUB__(v58, v57);
          uint64_t v59 = v58 - v57;
          if (v62) {
            goto LABEL_117;
          }
          uint64_t v61 = *((void *)v56 - 6);
          uint64_t v60 = *((void *)v56 - 5);
          BOOL v62 = __OFSUB__(v60, v61);
          uint64_t v54 = v60 - v61;
          char v55 = v62;
          if (v62) {
            goto LABEL_118;
          }
          unint64_t v63 = v11 - 2;
          unint64_t v64 = &v49[16 * v11 - 32];
          uint64_t v66 = *(void *)v64;
          uint64_t v65 = *((void *)v64 + 1);
          BOOL v62 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          if (v62) {
            goto LABEL_120;
          }
          BOOL v62 = __OFADD__(v54, v67);
          uint64_t v68 = v54 + v67;
          if (v62) {
            goto LABEL_123;
          }
          if (v68 >= v59)
          {
            uint64_t v86 = &v49[16 * v51];
            uint64_t v88 = *(void *)v86;
            uint64_t v87 = *((void *)v86 + 1);
            BOOL v62 = __OFSUB__(v87, v88);
            uint64_t v89 = v87 - v88;
            if (v62) {
              goto LABEL_127;
            }
            BOOL v79 = v54 < v89;
            goto LABEL_87;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v80 = *((void *)v9 + 4);
            uint64_t v81 = *((void *)v9 + 5);
            BOOL v62 = __OFSUB__(v81, v80);
            uint64_t v73 = v81 - v80;
            char v74 = v62;
            goto LABEL_81;
          }
          uint64_t v53 = *((void *)v9 + 4);
          uint64_t v52 = *((void *)v9 + 5);
          BOOL v62 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          char v55 = v62;
        }
        if (v55) {
          goto LABEL_119;
        }
        unint64_t v63 = v11 - 2;
        uint64_t v69 = &v49[16 * v11 - 32];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v72 = __OFSUB__(v70, v71);
        uint64_t v73 = v70 - v71;
        char v74 = v72;
        if (v72) {
          goto LABEL_122;
        }
        uint64_t v75 = &v49[16 * v51];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v62 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v62) {
          goto LABEL_125;
        }
        if (__OFADD__(v73, v78)) {
          goto LABEL_126;
        }
        if (v73 + v78 >= v54)
        {
          BOOL v79 = v54 < v78;
LABEL_87:
          if (v79) {
            unint64_t v51 = v63;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v74) {
          goto LABEL_121;
        }
        uint64_t v82 = &v49[16 * v51];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v62 = __OFSUB__(v83, v84);
        uint64_t v85 = v83 - v84;
        if (v62) {
          goto LABEL_124;
        }
        if (v85 < v73) {
          goto LABEL_15;
        }
LABEL_89:
        unint64_t v90 = v51 - 1;
        if (v51 - 1 >= v11)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        uint64_t v91 = v3;
        uint64_t v92 = *v3;
        if (!*v3) {
          goto LABEL_139;
        }
        uint64_t v93 = v9;
        uint64_t v94 = &v49[16 * v90];
        uint64_t v95 = *(void *)v94;
        unint64_t v96 = v51;
        uint64_t v97 = &v49[16 * v51];
        uint64_t v98 = *((void *)v97 + 1);
        uint64_t v99 = v125;
        sub_1000435E0((char *)(v92 + 40 * *(void *)v94), (char *)(v92 + 40 * *(void *)v97), v92 + 40 * v98, __dst);
        uint64_t v125 = v99;
        if (v99) {
          goto LABEL_111;
        }
        if (v98 < v95) {
          goto LABEL_114;
        }
        if (v96 > *((void *)v93 + 2)) {
          goto LABEL_115;
        }
        *(void *)uint64_t v94 = v95;
        *(void *)&v49[16 * v90 + 8] = v98;
        unint64_t v100 = *((void *)v93 + 2);
        if (v96 >= v100) {
          goto LABEL_116;
        }
        uint64_t v9 = v93;
        unint64_t v11 = v100 - 1;
        memmove(v97, v97 + 16, 16 * (v100 - 1 - v96));
        *((void *)v93 + 2) = v100 - 1;
        unint64_t v3 = v91;
        Swift::Int v10 = v117;
        if (v100 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    Swift::Int v4 = v3[1];
    if (v10 >= v4)
    {
      uint64_t v2 = v125;
      if (v11 < 2) {
        goto LABEL_111;
      }
      goto LABEL_99;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100042D58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v29 = a1;
  uint64_t v32 = type metadata accessor for ImpressionModel();
  uint64_t v7 = __chkstk_darwin(v32);
  uint64_t v33 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v27 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v31 = a3;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v35 = v16 * (v31 - 1);
    uint64_t v30 = v16;
    uint64_t v34 = v16 * v31;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v29;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_100045848(v34 + v17 + v20, (uint64_t)v15);
      sub_100045848(v35 + v17 + v20, (uint64_t)v11);
      uint64_t v21 = *(int *)(v32 + 48);
      unint64_t v22 = *(void *)&v15[v21];
      unint64_t v23 = *(void *)&v11[v21];
      sub_1000458AC((uint64_t)v11);
      uint64_t result = sub_1000458AC((uint64_t)v15);
      BOOL v24 = v23 >= v22;
      a4 = v19;
      if (v24)
      {
LABEL_4:
        v35 += v30;
        v34 += v30;
        if (++v31 == v28) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v25 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v26 = v25 + v35 + v17;
      sub_1000368E8(v25 + v34 + v17, v33);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1000368E8(v33, v26);
      v17 -= v30;
      ++v18;
      a4 = v19;
      if (v31 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100042FB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v26 = result;
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v6 = 40 * a3 - 40;
LABEL_5:
    uint64_t v7 = v26;
    uint64_t v8 = v6;
    while (1)
    {
      uint64_t v9 = *a4 + v8;
      sub_100029CD8(v9 + 40, (uint64_t)&v23);
      sub_100029CD8(v9, (uint64_t)v20);
      uint64_t v10 = v24;
      uint64_t v11 = v25;
      sub_100012D78(&v23, v24);
      unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
      uint64_t v13 = v21;
      uint64_t v14 = v22;
      sub_100012D78(v20, v21);
      unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v20);
      uint64_t result = _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v23);
      if (v15 >= v12)
      {
LABEL_4:
        ++v5;
        v6 += 40;
        if (v5 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v16 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v17 = v16 + v8;
      sub_100012D60((long long *)(v16 + v8 + 40), (uint64_t)&v23);
      long long v18 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)(v17 + 40) = *(_OWORD *)v17;
      *(_OWORD *)(v17 + 56) = v18;
      *(void *)(v17 + 72) = *(void *)(v17 + 32);
      uint64_t result = sub_100012D60(&v23, v17);
      v8 -= 40;
      if (v5 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100043138(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for ImpressionModel();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v49 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v45 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_71;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_72;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v52 = a1;
  unint64_t v51 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    unint64_t v48 = a1;
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v30 = a4 + v19;
      unint64_t v50 = a4 + v19;
      unint64_t v52 = a2;
      if (v19 >= 1 && v48 < a2)
      {
        uint64_t v32 = -v14;
        uint64_t v46 = v8;
        unint64_t v47 = a4;
        do
        {
          unint64_t v33 = a3 + v32;
          sub_100045848(v30 + v32, (uint64_t)v12);
          unint64_t v34 = a2 + v32;
          uint64_t v35 = (uint64_t)v12;
          uint64_t v36 = v49;
          sub_100045848(a2 + v32, v49);
          uint64_t v37 = *(int *)(v8 + 48);
          unint64_t v38 = *(void *)(v35 + v37);
          unint64_t v39 = *(void *)(v36 + v37);
          uint64_t v40 = v36;
          unint64_t v12 = (char *)v35;
          sub_1000458AC(v40);
          sub_1000458AC(v35);
          if (v39 >= v38)
          {
            unint64_t v42 = v50;
            v50 += v32;
            if (a3 < v42 || v33 >= v42)
            {
              uint64_t v8 = v46;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v34 = a2;
              unint64_t v41 = v47;
            }
            else
            {
              uint64_t v8 = v46;
              unint64_t v41 = v47;
              if (a3 != v42) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v34 = a2;
            }
          }
          else
          {
            if (a3 < a2 || v33 >= a2)
            {
              uint64_t v8 = v46;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v41 = v47;
            }
            else
            {
              uint64_t v8 = v46;
              unint64_t v41 = v47;
              if (a3 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v52 += v32;
          }
          unint64_t v30 = v50;
          if (v50 <= v41) {
            break;
          }
          a2 = v34;
          a3 += v32;
        }
        while (v34 > v48);
      }
      goto LABEL_69;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v48 = a4 + v18;
    unint64_t v50 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      uint64_t v21 = v49;
      do
      {
        sub_100045848(a2, (uint64_t)v12);
        sub_100045848(a4, v21);
        uint64_t v22 = *(int *)(v8 + 48);
        unint64_t v23 = *(void *)&v12[v22];
        unint64_t v24 = *(void *)(v21 + v22);
        sub_1000458AC(v21);
        sub_1000458AC((uint64_t)v12);
        unint64_t v25 = v52;
        if (v24 >= v23)
        {
          unint64_t v28 = v51 + v14;
          if (v52 < v51 || v52 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v52 != v51)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v51 = v28;
          unint64_t v26 = a2;
        }
        else
        {
          unint64_t v26 = a2 + v14;
          if (v52 < a2 || v52 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v52 == a2)
          {
            unint64_t v25 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v52 = v25 + v14;
        a4 = v51;
        if (v51 >= v48) {
          break;
        }
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_69:
    sub_100043AEC(&v52, &v51, (uint64_t *)&v50);
    return 1;
  }
LABEL_73:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000435E0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  Swift::Int v4 = __dst;
  uint64_t v6 = a2;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v54 = __src;
  uint64_t v53 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -39) {
      goto LABEL_42;
    }
    if (__dst != a2 || &a2[40 * v11] <= __dst) {
      memmove(__dst, a2, 40 * v11);
    }
    unint64_t v26 = &v4[40 * v11];
    unint64_t v52 = v26;
    uint64_t v54 = v6;
    if (__src >= v6 || v10 < 40) {
      goto LABEL_41;
    }
    unint64_t v27 = a3 - 40;
    uint64_t v45 = __src;
    while (1)
    {
      uint64_t v32 = (char *)(v27 + 40);
      sub_100029CD8((uint64_t)(v26 - 40), (uint64_t)v49);
      unint64_t v30 = v6 - 40;
      sub_100029CD8((uint64_t)(v6 - 40), (uint64_t)v46);
      uint64_t v33 = v50;
      uint64_t v34 = v51;
      sub_100012D78(v49, v50);
      unint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 16))(v33, v34);
      uint64_t v36 = v47;
      uint64_t v37 = v48;
      sub_100012D78(v46, v47);
      unint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v46);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v49);
      if (v38 < v35) {
        break;
      }
      unint64_t v41 = v52;
      unint64_t v26 = v52 - 40;
      v52 -= 40;
      if (v32 < v41 || v27 >= (unint64_t)v41)
      {
        long long v28 = *(_OWORD *)v26;
        long long v29 = *(_OWORD *)(v41 - 24);
        *(void *)(v27 + 32) = *((void *)v41 - 1);
        *(_OWORD *)unint64_t v27 = v28;
        *(_OWORD *)(v27 + 16) = v29;
        unint64_t v30 = v6;
        goto LABEL_29;
      }
      uint64_t v31 = v45;
      if (v32 != v41)
      {
        long long v42 = *(_OWORD *)v26;
        long long v43 = *(_OWORD *)(v41 - 24);
        *(void *)(v27 + 32) = *((void *)v41 - 1);
        *(_OWORD *)unint64_t v27 = v42;
        *(_OWORD *)(v27 + 16) = v43;
      }
      unint64_t v30 = v6;
      if (v26 <= v4) {
        goto LABEL_41;
      }
LABEL_30:
      v27 -= 40;
      uint64_t v6 = v30;
      if (v30 <= v31) {
        goto LABEL_41;
      }
    }
    if (v32 != v6 || v27 >= (unint64_t)v6)
    {
      long long v39 = *(_OWORD *)v30;
      long long v40 = *(_OWORD *)(v6 - 24);
      *(void *)(v27 + 32) = *((void *)v6 - 1);
      *(_OWORD *)unint64_t v27 = v39;
      *(_OWORD *)(v27 + 16) = v40;
    }
    v54 -= 40;
    unint64_t v26 = v52;
LABEL_29:
    uint64_t v31 = v45;
    if (v26 <= v4) {
      goto LABEL_41;
    }
    goto LABEL_30;
  }
  if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    unint64_t v12 = (unint64_t)&v4[40 * v9];
    unint64_t v52 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_100029CD8((uint64_t)v6, (uint64_t)v49);
        sub_100029CD8((uint64_t)v4, (uint64_t)v46);
        uint64_t v13 = v50;
        uint64_t v14 = v51;
        sub_100012D78(v49, v50);
        unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
        uint64_t v16 = v47;
        uint64_t v17 = v48;
        sub_100012D78(v46, v47);
        unint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
        _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v46);
        _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v49);
        uint64_t v19 = v54;
        if (v18 >= v15)
        {
          unint64_t v23 = v53 + 40;
          if (v54 != v53 || v54 >= v23)
          {
            long long v24 = *(_OWORD *)v53;
            long long v25 = *((_OWORD *)v53 + 1);
            *((void *)v54 + 4) = *((void *)v53 + 4);
            *uint64_t v19 = v24;
            v19[1] = v25;
          }
          uint64_t v53 = v23;
          unint64_t v20 = (unint64_t)v6;
        }
        else
        {
          unint64_t v20 = (unint64_t)(v6 + 40);
          if (v54 >= v6 && (unint64_t)v54 < v20 && v54 == v6)
          {
            uint64_t v19 = v6;
          }
          else
          {
            long long v21 = *(_OWORD *)v6;
            long long v22 = *((_OWORD *)v6 + 1);
            *((void *)v54 + 4) = *((void *)v6 + 4);
            *uint64_t v19 = v21;
            v19[1] = v22;
          }
        }
        uint64_t v54 = (char *)v19 + 40;
        Swift::Int v4 = v53;
        if ((unint64_t)v53 >= v12) {
          break;
        }
        uint64_t v6 = (char *)v20;
      }
      while (v20 < a3);
    }
LABEL_41:
    sub_100043C2C((void **)&v54, (const void **)&v53, &v52);
    return 1;
  }
LABEL_42:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000439F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E16A8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100043AEC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for ImpressionModel();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_100043C2C(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

char *sub_100043CF8(uint64_t a1)
{
  return sub_1000439F0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100043D0C(void *a1)
{
  return sub_10013ADFC(0, a1[2], 0, a1);
}

uint64_t sub_100043D20(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(unsigned char *)(v4 + 104) = a2;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = type metadata accessor for ImpressionModel();
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = *(void *)(v5 - 8);
  *(void *)(v4 + 56) = swift_task_alloc();
  *(void *)(v4 + 64) = swift_task_alloc();
  *(void *)(v4 + 72) = swift_task_alloc();
  *(void *)(v4 + 80) = swift_task_alloc();
  *(void *)(v4 + 88) = swift_task_alloc();
  *(void *)(v4 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_100043E28, 0, 0);
}

uint64_t sub_100043E28()
{
  uint64_t v76 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = ConversionType.isInstall.getter(*(unsigned char *)(v0 + 104));
  uint64_t v3 = 6;
  if ((v2 & 1) == 0) {
    uint64_t v3 = 1;
  }
  uint64_t v61 = v3;
  v75[0] = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = *(void *)(v5 + 72);
    uint64_t v9 = *(void *)(v0 + 16) + v7;
    uint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v11 = v4;
    while (1)
    {
      uint64_t v12 = *(void *)(v0 + 96);
      sub_100045848(v9, v12);
      if (*(unsigned char *)(v12 + *(int *)(v6 + 40)) == 1) {
        break;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_10;
      }
      sub_1000458AC(*(void *)(v0 + 96));
LABEL_6:
      v9 += v8;
      if (!--v11) {
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
LABEL_10:
    sub_1000368E8(*(void *)(v0 + 96), *(void *)(v0 + 88));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10013A68C(0, v10[2] + 1, 1);
      uint64_t v10 = v75[0];
    }
    unint64_t v15 = v10[2];
    unint64_t v14 = v10[3];
    if (v15 >= v14 >> 1)
    {
      sub_10013A68C(v14 > 1, v15 + 1, 1);
      uint64_t v10 = v75[0];
    }
    uint64_t v16 = *(void *)(v0 + 88);
    v10[2] = v15 + 1;
    sub_1000368E8(v16, (uint64_t)v10 + v7 + v15 * v8);
    goto LABEL_6;
  }
  uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_16:
  swift_bridgeObjectRelease();
  v75[0] = v10;
  swift_retain();
  sub_100040660(v75);
  swift_release();
  uint64_t v72 = v75[0][2];
  if (v72)
  {
    uint64_t v17 = 0;
    uint64_t v19 = *(int **)(v0 + 40);
    uint64_t v18 = *(void *)(v0 + 48);
    uint64_t v68 = v19[10];
    uint64_t v70 = *(void *)(v0 + 80);
    uint64_t v64 = v19[12];
    uint64_t v66 = (uint64_t *)(v70 + v19[11]);
    unint64_t v20 = (char *)v75[0] + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v62 = *(void *)(v18 + 72);
    char v74 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v21 = *(void *)(v0 + 80);
      sub_100045848((uint64_t)v20, v21);
      uint64_t v22 = *v66;
      uint64_t v23 = v66[1];
      char v24 = *(unsigned char *)(v70 + v68);
      uint64_t v25 = *(void *)(v70 + v64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000458AC(v21);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v74 = sub_100139B04(0, v74[2] + 1, 1, v74);
      }
      unint64_t v27 = v74[2];
      unint64_t v26 = v74[3];
      if (v27 >= v26 >> 1) {
        char v74 = sub_100139B04((void *)(v26 > 1), v27 + 1, 1, v74);
      }
      uint64_t v29 = *(void *)(v0 + 24);
      uint64_t v28 = *(void *)(v0 + 32);
      v74[2] = v27 + 1;
      unint64_t v30 = &v74[8 * v27];
      v30[4] = v22;
      v30[5] = v23;
      *((unsigned char *)v30 + 48) = v24;
      v30[7] = v17;
      v30[8] = v29;
      v30[9] = v28;
      v30[10] = v25;
      *((unsigned char *)v30 + 88) = 0;
      if (v61 - 1 == v17) {
        goto LABEL_48;
      }
      ++v17;
      v20 += v62;
    }
    while (v72 != v17);
    swift_release();
  }
  else
  {
    swift_release();
    char v74 = _swiftEmptyArrayStorage;
  }
  uint64_t v31 = _swiftEmptyArrayStorage;
  v75[0] = _swiftEmptyArrayStorage;
  uint64_t v32 = swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v34 = *(void *)(v0 + 40);
    uint64_t v33 = *(void *)(v0 + 48);
    unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v36 = *(void *)(v33 + 72);
    uint64_t v37 = v32 + v35;
    while (1)
    {
      uint64_t v38 = *(void *)(v0 + 72);
      sub_100045848(v37, v38);
      if ((*(unsigned char *)(v38 + *(int *)(v34 + 40)) & 1) == 0) {
        break;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v39) {
        goto LABEL_34;
      }
      sub_1000458AC(*(void *)(v0 + 72));
LABEL_29:
      v37 += v36;
      if (!--v4) {
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
LABEL_34:
    sub_1000368E8(*(void *)(v0 + 72), *(void *)(v0 + 64));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10013A68C(0, v31[2] + 1, 1);
      uint64_t v31 = v75[0];
    }
    unint64_t v41 = v31[2];
    unint64_t v40 = v31[3];
    if (v41 >= v40 >> 1)
    {
      sub_10013A68C(v40 > 1, v41 + 1, 1);
      uint64_t v31 = v75[0];
    }
    uint64_t v42 = *(void *)(v0 + 64);
    void v31[2] = v41 + 1;
    sub_1000368E8(v42, (uint64_t)v31 + v35 + v41 * v36);
    goto LABEL_29;
  }
LABEL_39:
  swift_bridgeObjectRelease();
  v75[0] = v31;
  swift_retain();
  sub_100040660(v75);
  swift_release();
  uint64_t v43 = v75[0][2];
  if (v43)
  {
    uint64_t v44 = *(void *)(v0 + 48);
    uint64_t v45 = *(int **)(v0 + 40);
    uint64_t v69 = v45[10];
    uint64_t v71 = *(void *)(v0 + 56);
    uint64_t v65 = v45[12];
    uint64_t v67 = (uint64_t *)(v71 + v45[11]);
    uint64_t v46 = (char *)v75[0] + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
    uint64_t v47 = v72;
    uint64_t v48 = v72 ^ 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v63 = *(void *)(v44 + 72);
    while (1)
    {
      uint64_t v73 = v47;
      uint64_t v49 = *(void *)(v0 + 56);
      sub_100045848((uint64_t)v46, v49);
      uint64_t v51 = *v67;
      uint64_t v50 = v67[1];
      char v52 = *(unsigned char *)(v71 + v69);
      uint64_t v53 = *(void *)(v71 + v65);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000458AC(v49);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100139B04(0, v74[2] + 1, 1, v74);
        char v74 = (void *)result;
      }
      unint64_t v56 = v74[2];
      unint64_t v55 = v74[3];
      if (v56 >= v55 >> 1)
      {
        uint64_t result = (uint64_t)sub_100139B04((void *)(v55 > 1), v56 + 1, 1, v74);
        char v74 = (void *)result;
      }
      uint64_t v58 = *(void *)(v0 + 24);
      uint64_t v57 = *(void *)(v0 + 32);
      v74[2] = v56 + 1;
      uint64_t v59 = &v74[8 * v56];
      v59[4] = v51;
      v59[5] = v50;
      *((unsigned char *)v59 + 48) = v52;
      v59[7] = v73;
      v59[8] = v58;
      v59[9] = v57;
      v59[10] = v53;
      *((unsigned char *)v59 + 88) = 0;
      if (!v48) {
        break;
      }
      if (v61 - 1 != v73)
      {
        --v48;
        v46 += v63;
        uint64_t v47 = v73 + 1;
        if (--v43) {
          continue;
        }
      }
      goto LABEL_48;
    }
    __break(1u);
  }
  else
  {
LABEL_48:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v60 = *(uint64_t (**)(void *))(v0 + 8);
    return v60(v74);
  }
  return result;
}

uint64_t sub_100044494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[114] = a4;
  v4[113] = a3;
  v4[112] = a2;
  v4[111] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v4[115] = v5;
  v4[116] = *(void *)(v5 - 8);
  v4[117] = swift_task_alloc();
  sub_100012960(&qword_1001E1378);
  v4[118] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ImpressionModel();
  v4[119] = v6;
  v4[120] = *(void *)(v6 - 8);
  v4[121] = swift_task_alloc();
  v4[122] = swift_task_alloc();
  v4[123] = swift_task_alloc();
  v4[124] = swift_task_alloc();
  v4[125] = swift_task_alloc();
  return _swift_task_switch(sub_100044620, 0, 0);
}

uint64_t sub_100044620()
{
  uint64_t v231 = v0;
  uint64_t v1 = *(void *)(v0 + 896);
  uint64_t v2 = *(void *)(*(void *)(v0 + 888) + 16);
  if (v1)
  {
    if (v2 | *(void *)(v1 + 16))
    {
      uint64_t v210 = *(void *)(v0 + 896);
      v219[0] = (Swift::Int)_swiftEmptyArrayStorage;
      uint64_t v3 = swift_bridgeObjectRetain();
      if (!v2)
      {
        swift_bridgeObjectRelease();
        char v4 = 1;
        uint64_t v5 = _swiftEmptyArrayStorage;
        goto LABEL_22;
      }
      goto LABEL_7;
    }
LABEL_18:
    sub_100045968();
    swift_allocError();
    *uint64_t v16 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  if (!v2) {
    goto LABEL_18;
  }
  uint64_t v210 = 0;
  v219[0] = (Swift::Int)_swiftEmptyArrayStorage;
  uint64_t v3 = swift_bridgeObjectRetain();
LABEL_7:
  uint64_t v6 = *(void *)(v0 + 960);
  uint64_t v7 = *(void *)(v0 + 952);
  uint64_t v8 = *(void *)(v6 + 72);
  unint64_t v212 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v3 + v212;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v10 = v2;
  do
  {
    uint64_t v11 = *(void *)(v0 + 1000);
    sub_100045848(v9, v11);
    if (*(unsigned char *)(v11 + *(int *)(v7 + 40)) == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        sub_1000458AC(*(void *)(v0 + 1000));
        goto LABEL_9;
      }
    }
    sub_1000368E8(*(void *)(v0 + 1000), *(void *)(v0 + 992));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10013A68C(0, v5[2] + 1, 1);
      uint64_t v5 = (void *)v219[0];
    }
    unint64_t v14 = v5[2];
    unint64_t v13 = v5[3];
    if (v14 >= v13 >> 1)
    {
      sub_10013A68C(v13 > 1, v14 + 1, 1);
      uint64_t v5 = (void *)v219[0];
    }
    uint64_t v15 = *(void *)(v0 + 992);
    uint64_t v5[2] = v14 + 1;
    sub_1000368E8(v15, (uint64_t)v5 + v212 + v14 * v8);
LABEL_9:
    v9 += v8;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  char v4 = 0;
  if (v210)
  {
LABEL_22:
    uint64_t v19 = *(void *)(v0 + 896);
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      char v207 = v4;
      uint64_t v21 = (_OWORD *)(v0 + 16);
      swift_bridgeObjectRetain();
      uint64_t v22 = v20 - 1;
      uint64_t v23 = _swiftEmptyArrayStorage;
      uint64_t v24 = 32;
      uint64_t v213 = v19;
      while (2)
      {
        long long v25 = *(_OWORD *)(v19 + v24 + 16);
        *uint64_t v21 = *(_OWORD *)(v19 + v24);
        *(_OWORD *)(v0 + 32) = v25;
        long long v26 = *(_OWORD *)(v19 + v24 + 32);
        long long v27 = *(_OWORD *)(v19 + v24 + 48);
        long long v28 = *(_OWORD *)(v19 + v24 + 80);
        *(_OWORD *)(v0 + 80) = *(_OWORD *)(v19 + v24 + 64);
        *(_OWORD *)(v0 + 96) = v28;
        *(_OWORD *)(v0 + 48) = v26;
        *(_OWORD *)(v0 + 64) = v27;
        long long v29 = *(_OWORD *)(v19 + v24 + 96);
        long long v30 = *(_OWORD *)(v19 + v24 + 112);
        long long v31 = *(_OWORD *)(v19 + v24 + 144);
        *(_OWORD *)(v0 + 144) = *(_OWORD *)(v19 + v24 + 128);
        *(_OWORD *)(v0 + 160) = v31;
        *(_OWORD *)(v0 + 112) = v29;
        *(_OWORD *)(v0 + 128) = v30;
        long long v32 = *(_OWORD *)(v19 + v24 + 160);
        long long v33 = *(_OWORD *)(v19 + v24 + 176);
        long long v34 = *(_OWORD *)(v19 + v24 + 192);
        *(_OWORD *)(v0 + 217) = *(_OWORD *)(v19 + v24 + 201);
        *(_OWORD *)(v0 + 192) = v33;
        *(_OWORD *)(v0 + 208) = v34;
        *(_OWORD *)(v0 + 176) = v32;
        if ((*(unsigned char *)(v0 + 184) & 1) == 0 && *(void *)(v0 + 176) == 1 && (unint64_t v35 = *(void **)(v0 + 200)) != 0)
        {
          uint64_t v36 = *(void *)(v0 + 192);
          sub_100013AE8(v0 + 16);
          swift_bridgeObjectRetain();
          v37._countAndFlagsBits = v36;
          v37._object = v35;
          Swift::Int v38 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0260, v37);
          swift_bridgeObjectRelease();
          if (v38 == 1)
          {
            swift_bridgeObjectRelease();
LABEL_31:
            v219[0] = (Swift::Int)v23;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_10013A6F8(0, v23[2] + 1, 1);
              uint64_t v23 = (void *)v219[0];
            }
            unint64_t v41 = v23[2];
            unint64_t v40 = v23[3];
            if (v41 >= v40 >> 1)
            {
              sub_10013A6F8(v40 > 1, v41 + 1, 1);
              uint64_t v23 = (void *)v219[0];
            }
            v23[2] = v41 + 1;
            uint64_t v42 = &v23[28 * v41];
            long long v43 = *(_OWORD *)(v0 + 32);
            v42[2] = *v21;
            v42[3] = v43;
            long long v44 = *(_OWORD *)(v0 + 48);
            long long v45 = *(_OWORD *)(v0 + 64);
            long long v46 = *(_OWORD *)(v0 + 96);
            v42[6] = *(_OWORD *)(v0 + 80);
            v42[7] = v46;
            v42[4] = v44;
            v42[5] = v45;
            long long v47 = *(_OWORD *)(v0 + 112);
            long long v48 = *(_OWORD *)(v0 + 128);
            long long v49 = *(_OWORD *)(v0 + 160);
            v42[10] = *(_OWORD *)(v0 + 144);
            v42[11] = v49;
            v42[8] = v47;
            v42[9] = v48;
            long long v50 = *(_OWORD *)(v0 + 176);
            long long v51 = *(_OWORD *)(v0 + 192);
            long long v52 = *(_OWORD *)(v0 + 208);
            *(_OWORD *)((char *)v42 + 233) = *(_OWORD *)(v0 + 217);
            v42[13] = v51;
            v42[14] = v52;
            v42[12] = v50;
            uint64_t v19 = v213;
            if (!v22)
            {
LABEL_39:
              swift_bridgeObjectRelease();
              char v4 = v207;
              goto LABEL_42;
            }
            goto LABEL_38;
          }
        }
        else
        {
          sub_100013AE8(v0 + 16);
        }
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v39) {
          goto LABEL_31;
        }
        sub_100013B74(v0 + 16);
        if (!v22) {
          goto LABEL_39;
        }
LABEL_38:
        --v22;
        v24 += 224;
        continue;
      }
    }
    uint64_t v23 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v23 = 0;
  }
LABEL_42:
  v216 = _swiftEmptyArrayStorage;
  uint64_t v53 = sub_10011EBE4((uint64_t)v5);
  swift_release();
  sub_100040398((uint64_t)v53);
  if (v23)
  {
    uint64_t v54 = sub_10011EDAC((uint64_t)v23);
    swift_bridgeObjectRelease();
    sub_100040398((uint64_t)v54);
  }
  sub_100040708(&v216);
  v219[0] = (Swift::Int)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  unint64_t v55 = _swiftEmptyArrayStorage;
  if ((v4 & 1) == 0)
  {
    uint64_t v91 = *(void *)(v0 + 960);
    uint64_t v92 = *(void *)(v0 + 952);
    unint64_t v93 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
    uint64_t v94 = *(void *)(v91 + 72);
    uint64_t v95 = *(void *)(v0 + 888) + v93;
    unint64_t v55 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v96 = *(void *)(v0 + 984);
      sub_100045848(v95, v96);
      if ((*(unsigned char *)(v96 + *(int *)(v92 + 40)) & 1) == 0) {
        break;
      }
      char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v97) {
        goto LABEL_70;
      }
      sub_1000458AC(*(void *)(v0 + 984));
LABEL_65:
      v95 += v94;
      if (!--v2) {
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease();
LABEL_70:
    sub_1000368E8(*(void *)(v0 + 984), *(void *)(v0 + 976));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10013A68C(0, v55[2] + 1, 1);
      unint64_t v55 = (void *)v219[0];
    }
    unint64_t v99 = v55[2];
    unint64_t v98 = v55[3];
    if (v99 >= v98 >> 1)
    {
      sub_10013A68C(v98 > 1, v99 + 1, 1);
      unint64_t v55 = (void *)v219[0];
    }
    uint64_t v100 = *(void *)(v0 + 976);
    v55[2] = v99 + 1;
    sub_1000368E8(v100, (uint64_t)v55 + v93 + v99 * v94);
    goto LABEL_65;
  }
LABEL_45:
  swift_bridgeObjectRelease();
  if (v210)
  {
    uint64_t v56 = *(void *)(v0 + 896);
    uint64_t v57 = *(void *)(v56 + 16);
    if (v57)
    {
      uint64_t v58 = (_OWORD *)(v0 + 240);
      swift_bridgeObjectRetain();
      uint64_t v59 = v57 - 1;
      uint64_t v60 = _swiftEmptyArrayStorage;
      for (uint64_t i = 32; ; i += 224)
      {
        long long v62 = *(_OWORD *)(v56 + i + 16);
        *uint64_t v58 = *(_OWORD *)(v56 + i);
        *(_OWORD *)(v0 + 256) = v62;
        long long v63 = *(_OWORD *)(v56 + i + 32);
        long long v64 = *(_OWORD *)(v56 + i + 48);
        long long v65 = *(_OWORD *)(v56 + i + 80);
        *(_OWORD *)(v0 + 304) = *(_OWORD *)(v56 + i + 64);
        *(_OWORD *)(v0 + 320) = v65;
        *(_OWORD *)(v0 + 272) = v63;
        *(_OWORD *)(v0 + 288) = v64;
        long long v66 = *(_OWORD *)(v56 + i + 96);
        long long v67 = *(_OWORD *)(v56 + i + 112);
        long long v68 = *(_OWORD *)(v56 + i + 144);
        *(_OWORD *)(v0 + 368) = *(_OWORD *)(v56 + i + 128);
        *(_OWORD *)(v0 + 384) = v68;
        *(_OWORD *)(v0 + 336) = v66;
        *(_OWORD *)(v0 + 352) = v67;
        long long v69 = *(_OWORD *)(v56 + i + 160);
        long long v70 = *(_OWORD *)(v56 + i + 176);
        long long v71 = *(_OWORD *)(v56 + i + 192);
        *(_OWORD *)(v0 + 441) = *(_OWORD *)(v56 + i + 201);
        *(_OWORD *)(v0 + 416) = v70;
        *(_OWORD *)(v0 + 432) = v71;
        *(_OWORD *)(v0 + 400) = v69;
        if (*(unsigned char *)(v0 + 408)) {
          break;
        }
        if (*(void *)(v0 + 400) != 1) {
          break;
        }
        uint64_t v72 = *(void **)(v0 + 424);
        if (!v72) {
          break;
        }
        uint64_t v73 = *(void *)(v0 + 416);
        sub_100013AE8(v0 + 240);
        swift_bridgeObjectRetain();
        v74._countAndFlagsBits = v73;
        v74._object = v72;
        Swift::Int v75 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C02B0, v74);
        swift_bridgeObjectRelease();
        if (v75 != 1) {
          goto LABEL_55;
        }
        char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v76 & 1) == 0)
        {
          sub_100013B74(v0 + 240);
          goto LABEL_61;
        }
LABEL_56:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v219[0] = (Swift::Int)v60;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10013A6F8(0, v60[2] + 1, 1);
          uint64_t v60 = (void *)v219[0];
        }
        unint64_t v79 = v60[2];
        unint64_t v78 = v60[3];
        if (v79 >= v78 >> 1)
        {
          sub_10013A6F8(v78 > 1, v79 + 1, 1);
          uint64_t v60 = (void *)v219[0];
        }
        v60[2] = v79 + 1;
        uint64_t v80 = &v60[28 * v79];
        long long v81 = *(_OWORD *)(v0 + 256);
        v80[2] = *v58;
        v80[3] = v81;
        long long v82 = *(_OWORD *)(v0 + 272);
        long long v83 = *(_OWORD *)(v0 + 288);
        long long v84 = *(_OWORD *)(v0 + 320);
        v80[6] = *(_OWORD *)(v0 + 304);
        v80[7] = v84;
        v80[4] = v82;
        v80[5] = v83;
        long long v85 = *(_OWORD *)(v0 + 336);
        long long v86 = *(_OWORD *)(v0 + 352);
        long long v87 = *(_OWORD *)(v0 + 384);
        v80[10] = *(_OWORD *)(v0 + 368);
        v80[11] = v87;
        v80[8] = v85;
        v80[9] = v86;
        long long v88 = *(_OWORD *)(v0 + 400);
        long long v89 = *(_OWORD *)(v0 + 416);
        long long v90 = *(_OWORD *)(v0 + 432);
        *(_OWORD *)((char *)v80 + 233) = *(_OWORD *)(v0 + 441);
        v80[13] = v89;
        v80[14] = v90;
        v80[12] = v88;
LABEL_61:
        if (!v59)
        {
          swift_bridgeObjectRelease();
          goto LABEL_78;
        }
        --v59;
      }
      sub_100013AE8(v0 + 240);
LABEL_55:
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    uint64_t v60 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v60 = 0;
  }
LABEL_78:
  v217 = _swiftEmptyArrayStorage;
  uint64_t v101 = sub_10011EBE4((uint64_t)v55);
  swift_release();
  sub_100040398((uint64_t)v101);
  if (v60)
  {
    unint64_t v102 = sub_10011EDAC((uint64_t)v60);
    swift_bridgeObjectRelease();
    sub_100040398((uint64_t)v102);
  }
  sub_100040708(&v217);
  sub_100040398((uint64_t)v216);
  sub_100040398((uint64_t)v217);
  v218 = &_swiftEmptySetSingleton;
  uint64_t v208 = _swiftEmptyArrayStorage[2];
  if (v208)
  {
    uint64_t v103 = 0;
    v211 = (long long *)(v0 + 808);
    uint64_t v104 = _swiftEmptyArrayStorage;
    while (1)
    {
      v214 = v104;
      sub_100029CD8((uint64_t)&_swiftEmptyArrayStorage[5 * v103 + 4], v0 + 728);
      uint64_t v105 = v218;
      uint64_t v106 = *(void *)(v0 + 752);
      uint64_t v107 = *(void *)(v0 + 760);
      sub_100012D78((void *)(v0 + 728), v106);
      uint64_t v108 = *(uint64_t (**)(uint64_t, uint64_t))(v107 + 24);
      swift_bridgeObjectRetain();
      uint64_t v109 = v108(v106, v107);
      uint64_t v111 = v110;
      if (!v105[2]) {
        goto LABEL_99;
      }
      uint64_t v112 = v109;
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v113 = Hasher._finalize()();
      uint64_t v114 = -1 << *((unsigned char *)v105 + 32);
      unint64_t v115 = v113 & ~v114;
      if (((*(void *)((char *)v105 + ((v115 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v115) & 1) == 0) {
        goto LABEL_99;
      }
      uint64_t v116 = v105[6];
      Swift::Int v117 = (void *)(v116 + 16 * v115);
      BOOL v118 = *v117 == v112 && v117[1] == v111;
      if (!v118 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_82:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v104 = v214;
LABEL_83:
      ++v103;
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 728);
      if (v103 == v208)
      {
        swift_bridgeObjectRelease();
        goto LABEL_106;
      }
    }
    uint64_t v119 = ~v114;
    while (1)
    {
      unint64_t v115 = (v115 + 1) & v119;
      if (((*(void *)((char *)v105 + ((v115 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v115) & 1) == 0) {
        break;
      }
      uint64_t v120 = (void *)(v116 + 16 * v115);
      BOOL v121 = *v120 == v112 && v120[1] == v111;
      if (v121 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_82;
      }
    }
LABEL_99:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v122 = *(void *)(v0 + 752);
    uint64_t v123 = *(void *)(v0 + 760);
    sub_100012D78((void *)(v0 + 728), v122);
    Swift::Int v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 24))(v122, v123);
    sub_100026FE0(v219, v124, v125);
    swift_bridgeObjectRelease();
    sub_100029CD8(v0 + 728, (uint64_t)v211);
    uint64_t v104 = v214;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v104 = sub_100139D3C(0, v214[2] + 1, 1, v214);
    }
    unint64_t v127 = v104[2];
    unint64_t v126 = v104[3];
    if (v127 >= v126 >> 1) {
      uint64_t v104 = sub_100139D3C((void *)(v126 > 1), v127 + 1, 1, v104);
    }
    v104[2] = v127 + 1;
    sub_100012D60(v211, (uint64_t)&v104[5 * v127 + 4]);
    goto LABEL_83;
  }
  swift_bridgeObjectRelease();
  uint64_t v104 = _swiftEmptyArrayStorage;
LABEL_106:
  swift_bridgeObjectRelease();
  unint64_t v128 = v104[2];
  if (v128 < 7)
  {
    uint64_t v132 = v104;
    uint64_t v133 = v104[2];
    if (v133) {
      goto LABEL_117;
    }
    goto LABEL_138;
  }
  if (v128 >= v128 - 6) {
    uint64_t v129 = 6;
  }
  else {
    uint64_t v129 = 0;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v130 = (void *)swift_dynamicCastClass();
  if (!v130)
  {
    swift_unknownObjectRelease();
    uint64_t v130 = _swiftEmptyArrayStorage;
  }
  uint64_t v131 = v130[2];
  swift_release();
  if (v131 == v129)
  {
    uint64_t v132 = (void *)swift_dynamicCastClass();
    swift_unknownObjectRelease();
    if (!v132)
    {
      uint64_t v132 = _swiftEmptyArrayStorage;
      goto LABEL_115;
    }
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v132 = sub_100041934((uint64_t)v104, (uint64_t)(v104 + 4), 0, (2 * v129) | 1);
LABEL_115:
    swift_unknownObjectRelease();
  }
  uint64_t v133 = v132[2];
  if (!v133)
  {
LABEL_138:
    swift_bridgeObjectRelease();
    unint64_t v138 = _swiftEmptyArrayStorage;
    v178 = _swiftEmptyArrayStorage;
    goto LABEL_139;
  }
LABEL_117:
  uint64_t v134 = 0;
  uint64_t v135 = v0 + 768;
  v205 = *(int **)(v0 + 952);
  uint64_t v136 = *(void *)(v0 + 928);
  uint64_t v137 = (uint64_t)(v132 + 4);
  v209 = (void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 960) + 56);
  v180 = (void (**)(uint64_t, uint64_t))(v136 + 8);
  v181 = (void (**)(uint64_t, uint64_t, uint64_t))(v136 + 16);
  unint64_t v138 = _swiftEmptyArrayStorage;
  v215 = _swiftEmptyArrayStorage;
  uint64_t v206 = v133;
  do
  {
    sub_100029CD8(v137, v135);
    sub_100029CD8(v135, v0 + 688);
    sub_100012960(&qword_1001E1690);
    int v141 = swift_dynamicCast();
    v142 = *v209;
    if (v141)
    {
      uint64_t v143 = *(void *)(v0 + 968);
      uint64_t v144 = *(void *)(v0 + 944);
      v142(v144, 0, 1, *(void *)(v0 + 952));
      sub_1000368E8(v144, v143);
      v145 = (uint64_t *)(v143 + v205[11]);
      uint64_t v147 = *v145;
      uint64_t v146 = v145[1];
      char v148 = *(unsigned char *)(v143 + v205[10]);
      uint64_t v149 = *(void *)(v143 + v205[12]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v150 = v138;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        v151 = v215;
      }
      else {
        v151 = sub_100139B04(0, v215[2] + 1, 1, v215);
      }
      unint64_t v153 = v151[2];
      unint64_t v152 = v151[3];
      if (v153 >= v152 >> 1) {
        v151 = sub_100139B04((void *)(v152 > 1), v153 + 1, 1, v151);
      }
      uint64_t v154 = *(void *)(v0 + 968);
      uint64_t v155 = *(void *)(v0 + 912);
      uint64_t v156 = *(void *)(v0 + 904);
      v151[2] = v153 + 1;
      v215 = v151;
      v157 = &v151[8 * v153];
      v157[4] = v147;
      v157[5] = v146;
      *((unsigned char *)v157 + 48) = v148;
      v157[7] = v134;
      v157[8] = v156;
      v157[9] = v155;
      v157[10] = v149;
      *((unsigned char *)v157 + 88) = 0;
      sub_1000458AC(v154);
      uint64_t v135 = v0 + 768;
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 768);
      unint64_t v138 = v150;
      uint64_t v133 = v206;
    }
    else
    {
      uint64_t v158 = *(void *)(v0 + 944);
      v142(v158, 1, 1, *(void *)(v0 + 952));
      sub_100045908(v158);
      sub_100029CD8(v135, v0 + 848);
      if (swift_dynamicCast())
      {
        uint64_t v187 = *(void *)(v0 + 472);
        uint64_t v188 = *(void *)(v0 + 464);
        uint64_t v185 = *(void *)(v0 + 488);
        uint64_t v186 = *(void *)(v0 + 480);
        uint64_t v183 = *(void *)(v0 + 504);
        uint64_t v184 = *(void *)(v0 + 496);
        char v182 = *(unsigned char *)(v0 + 512);
        char v159 = *(unsigned char *)(v0 + 528);
        uint64_t v196 = *(void *)(v0 + 544);
        uint64_t v197 = *(void *)(v0 + 536);
        uint64_t v194 = *(void *)(v0 + 560);
        uint64_t v195 = *(void *)(v0 + 552);
        uint64_t v192 = *(void *)(v0 + 576);
        uint64_t v193 = *(void *)(v0 + 568);
        uint64_t v191 = *(void *)(v0 + 584);
        uint64_t v189 = *(void *)(v0 + 520);
        uint64_t v190 = *(void *)(v0 + 592);
        char v160 = *(unsigned char *)(v0 + 600);
        uint64_t v199 = *(void *)(v0 + 616);
        uint64_t v200 = *(void *)(v0 + 608);
        uint64_t v198 = *(void *)(v0 + 624);
        char v161 = *(unsigned char *)(v0 + 632);
        uint64_t v201 = *(void *)(v0 + 648);
        uint64_t v202 = *(void *)(v0 + 640);
        char v203 = *(unsigned char *)(v0 + 665);
        uint64_t v204 = *(void *)(v0 + 672);
        char v162 = *(unsigned char *)(v0 + 680);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v138 = sub_100139C14(0, v138[2] + 1, 1, v138);
        }
        unint64_t v164 = v138[2];
        unint64_t v163 = v138[3];
        unint64_t v165 = v164 + 1;
        if (v164 >= v163 >> 1)
        {
          v177 = sub_100139C14((void *)(v163 > 1), v164 + 1, 1, v138);
          unint64_t v165 = v164 + 1;
          unint64_t v138 = v177;
        }
        char v220 = v182;
        char v222 = v159;
        char v224 = v160;
        char v226 = v161;
        char v230 = v162;
        char v227 = 0;
        v166 = &v138[28 * v164];
        v166[4] = v188;
        v166[5] = v187;
        v166[6] = v186;
        v166[7] = v185;
        v166[8] = v184;
        v166[9] = v183;
        *((unsigned char *)v166 + 80) = v220;
        int v167 = *(_DWORD *)v221;
        *((_DWORD *)v166 + 21) = *(_DWORD *)&v221[3];
        *(_DWORD *)((char *)v166 + 81) = v167;
        v166[11] = v189;
        *((unsigned char *)v166 + 96) = v222;
        int v168 = *(_DWORD *)v223;
        *((_DWORD *)v166 + 25) = *(_DWORD *)&v223[3];
        *(_DWORD *)((char *)v166 + 97) = v168;
        v166[13] = v197;
        v166[14] = v196;
        v166[15] = v195;
        v166[16] = v194;
        v166[17] = v193;
        v166[18] = v192;
        v166[19] = v191;
        v166[20] = v190;
        *((unsigned char *)v166 + 168) = v224;
        int v169 = *(_DWORD *)v225;
        *((_DWORD *)v166 + 43) = *(_DWORD *)&v225[3];
        *(_DWORD *)((char *)v166 + 169) = v169;
        v166[22] = v200;
        v166[23] = v199;
        v166[24] = v198;
        *((unsigned char *)v166 + 200) = v226;
        int v170 = v219[0];
        *((_DWORD *)v166 + 51) = *(_DWORD *)((char *)v219 + 3);
        *(_DWORD *)((char *)v166 + 201) = v170;
        v166[26] = v202;
        v166[27] = v201;
        v166[28] = v134;
        *((unsigned char *)v166 + 232) = v227;
        *((unsigned char *)v166 + 233) = v203;
        LOWORD(v170) = v229;
        *(_DWORD *)((char *)v166 + 234) = v228;
        *((_WORD *)v166 + 119) = v170;
        v166[30] = v204;
        *((unsigned char *)v166 + 248) = v230;
        v138[2] = v165;
        uint64_t v135 = v0 + 768;
      }
      else
      {
        uint64_t v171 = *(void *)(v0 + 936);
        uint64_t v172 = *(void *)(v0 + 920);
        uint64_t v173 = Logger.general.unsafeMutableAddressor();
        (*v181)(v171, v173, v172);
        v174 = Logger.logObject.getter();
        os_log_type_t v175 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v174, v175))
        {
          v176 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v176 = 0;
          _os_log_impl((void *)&_mh_execute_header, v174, v175, "Could not convert impression into either AK or SKAN Impression, wat?", v176, 2u);
          swift_slowDealloc();
        }
        uint64_t v139 = *(void *)(v0 + 936);
        uint64_t v140 = *(void *)(v0 + 920);

        (*v180)(v139, v140);
      }
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v135);
    }
    ++v134;
    v137 += 40;
  }
  while (v133 != v134);
  swift_bridgeObjectRelease();
  v178 = v215;
LABEL_139:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v179 = *(uint64_t (**)(void *, void *))(v0 + 8);
  return v179(v178, v138);
}

uint64_t sub_100045848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImpressionModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000458AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ImpressionModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100045908(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E1378);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100045968()
{
  unint64_t result = qword_1001E1698;
  if (!qword_1001E1698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1698);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CanineArbiterError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100045A8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanineArbiterError()
{
  return &type metadata for CanineArbiterError;
}

uint64_t destroy for BlueDogImpression()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BlueDogImpression(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BlueDogImpression(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  return a1;
}

__n128 initializeWithTake for BlueDogImpression(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BlueDogImpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlueDogImpression(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlueDogImpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlueDogImpression()
{
  return &type metadata for BlueDogImpression;
}

uint64_t destroy for SKAdNetworkImpression()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SKAdNetworkImpression(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v8;
  uint64_t v9 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v9;
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SKAdNetworkImpression(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v6;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v7;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v8;
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  uint64_t v9 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v9;
  return a1;
}

__n128 initializeWithTake for SKAdNetworkImpression(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for SKAdNetworkImpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v8 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for SKAdNetworkImpression(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 217)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKAdNetworkImpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 216) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 217) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 217) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKAdNetworkImpression()
{
  return &type metadata for SKAdNetworkImpression;
}

unint64_t sub_100046224(uint64_t a1)
{
  unint64_t result = sub_100045968();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100046250()
{
  unint64_t result = qword_1001E16B8;
  if (!qword_1001E16B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E16B8);
  }
  return result;
}

unint64_t sub_1000462A4()
{
  unint64_t result = qword_1001E16C8;
  if (!qword_1001E16C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E16C8);
  }
  return result;
}

unint64_t sub_1000462F8()
{
  unint64_t result = qword_1001E16D0;
  if (!qword_1001E16D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E16D0);
  }
  return result;
}

unint64_t sub_10004634C()
{
  unint64_t result = qword_1001E16E0;
  if (!qword_1001E16E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E16E0);
  }
  return result;
}

uint64_t sub_1000463A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E16E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100046408()
{
  unint64_t result = qword_1001E16F0;
  if (!qword_1001E16F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E16F0);
  }
  return result;
}

unint64_t sub_10004645C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0300, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000464A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E1708);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000462A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v29 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v27 = 1;
  sub_10004732C();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v23 = v28;
  char v26 = 2;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 3;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = v12;
  char v24 = 4;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unint64_t v14 = v8;
  char v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t v17 = v21;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v23;
  uint64_t v19 = v20;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v22;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 56) = v16 & 1;
  return result;
}

unint64_t sub_1000467AC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0398, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10) {
    return 16;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000467F8@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E16F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v123 = 1;
  uint64_t v9 = a1[3];
  uint64_t v132 = a1;
  sub_100012D78(a1, v9);
  sub_10004634C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v132);
  }
  uint64_t v10 = v6;
  LOBYTE(v89[0]) = 0;
  uint64_t v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v89[0]) = 1;
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v75 = v13;
  uint64_t v70 = v14;
  LOBYTE(v89[0]) = 2;
  uint64_t v69 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v89[0]) = 3;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v74 = v16;
  uint64_t v68 = v17;
  char v131 = v18 & 1;
  LOBYTE(v89[0]) = 4;
  int v19 = v18;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v67 = v19;
  char v129 = v21 & 1;
  LOBYTE(v89[0]) = 5;
  char v22 = v21;
  uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v66 = v20;
  LOBYTE(v89[0]) = 6;
  uint64_t v24 = v23;
  swift_bridgeObjectRetain();
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v73 = v24;
  uint64_t v64 = v25;
  LOBYTE(v89[0]) = 7;
  uint64_t v27 = v26;
  swift_bridgeObjectRetain();
  uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v72 = v27;
  uint64_t v63 = v28;
  LOBYTE(v89[0]) = 8;
  uint64_t v61 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v89[0]) = 9;
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v62 = v31;
  char v127 = v31 & 1;
  LOBYTE(v89[0]) = 10;
  *(void *)&long long v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)&v59 + 1) = v32;
  LOBYTE(v89[0]) = 11;
  swift_bridgeObjectRetain();
  uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v58 = v33;
  char v125 = v58 & 1;
  LOBYTE(v89[0]) = 12;
  *(void *)&long long v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)&v55 + 1) = v34;
  uint64_t v57 = 0;
  LOBYTE(v89[0]) = 13;
  swift_bridgeObjectRetain();
  uint64_t v35 = v57;
  uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v54 = v36;
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v132);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v57) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v123 = v54 & 1;
    LOBYTE(v76) = 14;
    sub_1000472D8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v52 = LOBYTE(v89[0]);
    char v119 = 15;
    uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v38 = v37;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
    char v39 = v38 & 1;
    char v120 = v38 & 1;
    uint64_t v40 = v74;
    uint64_t v41 = v75;
    *(void *)&long long v76 = v71;
    *((void *)&v76 + 1) = v75;
    *(void *)&long long v77 = v70;
    *((void *)&v77 + 1) = v69;
    *(void *)&long long v78 = v74;
    *((void *)&v78 + 1) = v68;
    LOBYTE(v79) = v67 & 1;
    *((void *)&v79 + 1) = v66;
    LOBYTE(v80) = v22 & 1;
    uint64_t v42 = v72;
    *((void *)&v80 + 1) = v65;
    *(void *)&long long v81 = v73;
    *((void *)&v81 + 1) = v64;
    *(void *)&long long v82 = v72;
    *((void *)&v82 + 1) = v63;
    *(void *)&long long v83 = v61;
    uint64_t v43 = *((void *)&v59 + 1);
    *((void *)&v83 + 1) = v30;
    *(void *)&long long v84 = v60;
    BYTE8(v84) = v62 & 1;
    long long v85 = v59;
    *(void *)&long long v86 = v56;
    BYTE8(v86) = v58 & 1;
    long long v87 = v55;
    *(void *)&v88[0] = v53;
    BYTE8(v88[0]) = v54 & 1;
    BYTE9(v88[0]) = v52;
    *(void *)&v88[1] = v51;
    BYTE8(v88[1]) = v39;
    sub_100013AE8((uint64_t)&v76);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v44 = *((void *)&v55 + 1);
    swift_bridgeObjectRelease();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v132);
    v89[0] = v71;
    v89[1] = v41;
    v89[2] = v70;
    v89[3] = v69;
    v89[4] = v40;
    v89[5] = v68;
    char v90 = v131;
    *(_DWORD *)uint64_t v91 = *(_DWORD *)v130;
    *(_DWORD *)&v91[3] = *(_DWORD *)&v130[3];
    uint64_t v92 = v66;
    char v93 = v129;
    *(_DWORD *)uint64_t v94 = *(_DWORD *)v128;
    *(_DWORD *)&v94[3] = *(_DWORD *)&v128[3];
    uint64_t v95 = v65;
    uint64_t v96 = v73;
    uint64_t v97 = v64;
    uint64_t v98 = v42;
    uint64_t v99 = v63;
    uint64_t v100 = v61;
    uint64_t v101 = v30;
    uint64_t v102 = v60;
    char v103 = v127;
    *(_DWORD *)uint64_t v104 = *(_DWORD *)v126;
    *(_DWORD *)&v104[3] = *(_DWORD *)&v126[3];
    uint64_t v105 = v59;
    uint64_t v106 = v43;
    uint64_t v107 = v56;
    char v108 = v125;
    *(_DWORD *)&v109[3] = *(_DWORD *)&v124[3];
    *(_DWORD *)uint64_t v109 = *(_DWORD *)v124;
    uint64_t v110 = v55;
    uint64_t v111 = v44;
    uint64_t v112 = v53;
    char v113 = v123;
    char v114 = v52;
    __int16 v116 = v122;
    int v115 = v121;
    uint64_t v117 = v51;
    char v118 = v120;
    uint64_t result = sub_100013B74((uint64_t)v89);
    long long v45 = v87;
    a2[10] = v86;
    a2[11] = v45;
    a2[12] = v88[0];
    *(_OWORD *)((char *)a2 + 201) = *(_OWORD *)((char *)v88 + 9);
    long long v46 = v83;
    a2[6] = v82;
    a2[7] = v46;
    long long v47 = v85;
    a2[8] = v84;
    a2[9] = v47;
    long long v48 = v79;
    a2[2] = v78;
    a2[3] = v48;
    long long v49 = v81;
    a2[4] = v80;
    a2[5] = v49;
    long long v50 = v77;
    *a2 = v76;
    a2[1] = v50;
  }
  return result;
}

unint64_t sub_1000472D8()
{
  unint64_t result = qword_1001E1700;
  if (!qword_1001E1700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1700);
  }
  return result;
}

unint64_t sub_10004732C()
{
  unint64_t result = qword_1001E1710;
  if (!qword_1001E1710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1710);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SKAdNetworkImpression.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004744CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKAdNetworkImpression.CodingKeys()
{
  return &type metadata for SKAdNetworkImpression.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BlueDogImpression.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100047550);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlueDogImpression.CodingKeys()
{
  return &type metadata for BlueDogImpression.CodingKeys;
}

unint64_t sub_10004758C()
{
  unint64_t result = qword_1001E1718;
  if (!qword_1001E1718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1718);
  }
  return result;
}

unint64_t sub_1000475E4()
{
  unint64_t result = qword_1001E1720;
  if (!qword_1001E1720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1720);
  }
  return result;
}

unint64_t sub_10004763C()
{
  unint64_t result = qword_1001E1728;
  if (!qword_1001E1728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1728);
  }
  return result;
}

unint64_t sub_100047694()
{
  unint64_t result = qword_1001E1730;
  if (!qword_1001E1730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1730);
  }
  return result;
}

unint64_t sub_1000476EC()
{
  unint64_t result = qword_1001E1738;
  if (!qword_1001E1738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1738);
  }
  return result;
}

unint64_t sub_100047744()
{
  unint64_t result = qword_1001E1740;
  if (!qword_1001E1740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1740);
  }
  return result;
}

id sub_100047940()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ItemIdentifierBundleIDMapEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ItemIdentifierBundleIDMapEntity()
{
  return self;
}

unint64_t sub_10004799C()
{
  unint64_t result = qword_1001E1770;
  if (!qword_1001E1770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1770);
  }
  return result;
}

uint64_t initializeWithCopy for DelayedWoof(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DelayedWoof(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for DelayedWoof(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DelayedWoof(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DelayedWoof(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DelayedWoof()
{
  return &type metadata for DelayedWoof;
}

uint64_t sub_100047BC4()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100047BCC()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_100047BD4()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t sub_100047BDC()
{
  return *(unsigned __int8 *)(v0 + 26);
}

double sub_100047BE4()
{
  return *(double *)(v0 + 32);
}

double sub_100047BEC()
{
  return *(double *)(v0 + 40);
}

uint64_t sub_100047BF4()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1001E1798 + dword_1001E1798);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100012AB8;
  return v3();
}

uint64_t sub_100047C94()
{
  return _swift_task_switch(sub_100047CB0, 0, 0);
}

uint64_t sub_100047CB0()
{
  uint64_t v19 = v0;
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_1001E5F88;
  unint64_t v2 = self;
  id v3 = v1;
  id v4 = [v2 sharedScheduler];
  *(void *)(v0 + 160) = &type metadata for ActivityManager;
  *(void *)(v0 + 168) = &off_1001CCE58;
  uint64_t v5 = (void *)swift_allocObject();
  *(void *)(v0 + 136) = v5;
  v5[5] = &type metadata for BackgroundSystemTaskScheduler;
  v5[6] = &off_1001C30C8;
  uint64_t v5[2] = v4;
  *(void *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &type metadata for AttributionKitCanineArbiter;
  *(void *)(v0 + 232) = &off_1001C3FF8;
  uint64_t v6 = qword_1001E0880;
  id v7 = v3;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1001E5F50;
  *(void *)(v0 + 264) = type metadata accessor for TaskGreyhound();
  *(void *)(v0 + 272) = &off_1001C2490;
  *(void *)(v0 + 240) = v8;
  *(void *)(v0 + 304) = &type metadata for LaunchServicesRecordFactory;
  *(void *)(v0 + 312) = &off_1001C6D08;
  *(void *)(v0 + 344) = &type metadata for AMSDogBag;
  *(void *)(v0 + 352) = &off_1001CAA18;
  swift_retain();
  id v9 = [v2 sharedScheduler];
  v18[3] = &type metadata for ActivityManager;
  v18[4] = &off_1001CCE58;
  uint64_t v10 = (void *)swift_allocObject();
  v18[0] = v10;
  void v10[5] = &type metadata for BackgroundSystemTaskScheduler;
  v10[6] = &off_1001C30C8;
  v10[2] = v9;
  sub_100087C5C((uint64_t)v18, v0 + 360);
  *(void *)(v0 + 432) = &type metadata for AppStoreDaemonSKANInterop;
  *(void *)(v0 + 440) = &off_1001CA740;
  uint64_t v11 = (void *)qword_1001E5F88;
  *(void *)(v0 + 472) = &type metadata for AggregatedReportingManager;
  *(void *)(v0 + 480) = &off_1001C7F28;
  uint64_t v12 = (void *)swift_allocObject();
  *(void *)(v0 + 448) = v12;
  v12[8] = &type metadata for AMSDogBag;
  v12[9] = &off_1001CAA18;
  v12[13] = &type metadata for BiomeEventStreamDog;
  _OWORD v12[14] = &off_1001C8C58;
  _OWORD v12[2] = 0x74735F6E656B6F74;
  v12[3] = 0xEB0000000065726FLL;
  uint64_t v12[4] = v11;
  uint64_t v13 = qword_1001E0940;
  id v14 = v11;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1001E60E8;
  *(void *)(v0 + 512) = type metadata accessor for SnoutManager();
  *(void *)(v0 + 520) = &off_1001CB0F8;
  *(void *)(v0 + 488) = v15;
  strcpy((char *)(v0 + 16), "postback_store");
  *(unsigned char *)(v0 + 31) = -18;
  *(void *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = 0x63616274736F6867;
  *(void *)(v0 + 48) = 0xEF65726F74735F6BLL;
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 64) = 0xD000000000000010;
  *(void *)(v0 + 72) = 0x8000000100185910;
  *(void *)(v0 + 80) = v7;
  *(void *)(v0 + 88) = 0x74735F6E656B6F74;
  *(void *)(v0 + 96) = 0xEB0000000065726FLL;
  *(void *)(v0 + 104) = v7;
  *(void *)(v0 + 112) = 0xD000000000000012;
  *(void *)(v0 + 120) = 0x8000000100185930;
  *(void *)(v0 + 128) = v7;
  *(void *)(v0 + 176) = 0xD000000000000011;
  *(void *)(v0 + 184) = 0x8000000100185AE0;
  *(void *)(v0 + 192) = v7;
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 528) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1000480A0;
  return sub_1000D5F08();
}

uint64_t sub_1000480A0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10004819C, 0, 0);
}

uint64_t sub_10004819C()
{
  sub_100048284(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000481FC()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100048234()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100048284(uint64_t a1)
{
  return a1;
}

void sub_1000482D8()
{
  sub_100012960((uint64_t *)&unk_1001E17C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v3 = self;
  id v4 = [v3 predicateWithProperty:v1 equalToValue:v2];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  id v6 = [v3 predicateWithProperty:v5 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v6;
  specialized Array._endMutation()();
  id v7 = sub_100048CC4(inited, (SEL *)&selRef_predicateMatchingAllPredicates_);
  swift_bridgeObjectRelease();
  id v8 = [v11 connection];
  id v9 = v7;
  id v10 = sub_10011CC88(v8, v7, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v10 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

id sub_1000485A4(uint64_t a1)
{
  return sub_100048CC4(a1, (SEL *)&selRef_predicateMatchingAllPredicates_);
}

void sub_1000485B0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v55 = sub_100012960((uint64_t *)&unk_1001E17C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B50;
  Date.timeIntervalSince1970.getter();
  double v7 = v6 * 1000.0;
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v7 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v7 >= 1.84467441e19)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = (unint64_t)v7;
  NSString v9 = String._bridgeToObjectiveC()();
  v52[0] = v8;
  uint64_t v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v11 = self;
  id v12 = [v11 predicateWithProperty:v9 value:v10 comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v12;
  uint64_t v53 = &type metadata for ConversionType;
  unint64_t v13 = sub_100049388();
  unint64_t v54 = v13;
  char v48 = a2;
  LOBYTE(v52[0]) = a2;
  id v14 = sub_100012D78(v52, (uint64_t)&type metadata for ConversionType);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = AssociatedTypeWitness;
  uint64_t v16 = sub_100012DBC(v50);
  id v49 = v3;
  if (*(unsigned char *)v14)
  {
    if (*(unsigned char *)v14 == 1)
    {
      uint64_t v17 = 0x6F6C6E776F646572;
      unint64_t v18 = 0xEA00000000006461;
    }
    else
    {
      uint64_t v17 = 0x6761676E652D6572;
      unint64_t v18 = 0xED0000746E656D65;
    }
  }
  else
  {
    unint64_t v18 = 0xE800000000000000;
    uint64_t v17 = 0x64616F6C6E776F64;
  }
  *uint64_t v16 = v17;
  v16[1] = v18;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v11 predicateWithProperty:v19 equalToValue:_bridgeAnythingToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v50);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v52);
  *(void *)(inited + 40) = v20;
  NSString v21 = String._bridgeToObjectiveC()();
  LOBYTE(v52[0]) = 0;
  id v22 = [v11 predicateWithProperty:v21 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  *(void *)(inited + 48) = v22;
  v52[0] = inited;
  specialized Array._endMutation()();
  id v23 = sub_100048CC4(v52[0], (SEL *)&selRef_predicateMatchingAllPredicates_);
  swift_bridgeObjectRelease();
  uint64_t v24 = swift_initStackObject();
  *(_OWORD *)(v24 + 16) = xmmword_100178B50;
  Date.timeIntervalSince1970.getter();
  double v26 = v25 * 1000.0;
  if ((~*(void *)&v26 & 0x7FF0000000000000) == 0) {
    goto LABEL_23;
  }
  if (v26 <= -1.0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v26 >= 1.84467441e19)
  {
LABEL_25:
    __break(1u);
    return;
  }
  unint64_t v27 = (unint64_t)v26;
  NSString v28 = String._bridgeToObjectiveC()();
  v52[0] = v27;
  id v29 = [v11 predicateWithProperty:v28 value:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(v24 + 32) = v29;
  uint64_t v53 = &type metadata for ConversionType;
  unint64_t v54 = v13;
  LOBYTE(v52[0]) = v48;
  uint64_t v30 = sub_100012D78(v52, (uint64_t)&type metadata for ConversionType);
  uint64_t v51 = AssociatedTypeWitness;
  int v31 = sub_100012DBC(v50);
  if (*(unsigned char *)v30)
  {
    uint64_t v32 = &selRef_SQLJoinClausesForEntityClass_;
    if (*(unsigned char *)v30 == 1)
    {
      uint64_t v33 = 0x6F6C6E776F646572;
      unint64_t v34 = 0xEA00000000006461;
    }
    else
    {
      uint64_t v33 = 0x6761676E652D6572;
      unint64_t v34 = 0xED0000746E656D65;
    }
  }
  else
  {
    unint64_t v34 = 0xE800000000000000;
    uint64_t v33 = 0x64616F6C6E776F64;
    uint64_t v32 = &selRef_SQLJoinClausesForEntityClass_;
  }
  *int v31 = v33;
  v31[1] = v34;
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = objc_msgSend(v11, v32[120], v35, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v50);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v52);
  *(void *)(v24 + 40) = v36;
  NSString v37 = String._bridgeToObjectiveC()();
  LOBYTE(v52[0]) = 0;
  id v38 = objc_msgSend(v11, v32[120], v37, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();

  *(void *)(v24 + 48) = v38;
  v52[0] = v24;
  specialized Array._endMutation()();
  id v39 = sub_100048CC4(v52[0], (SEL *)&selRef_predicateMatchingAllPredicates_);
  swift_bridgeObjectRelease();
  uint64_t v40 = swift_initStackObject();
  *(_OWORD *)(v40 + 16) = xmmword_100178B40;
  *(void *)(v40 + 32) = v23;
  *(void *)(v40 + 40) = v39;
  v52[0] = v40;
  specialized Array._endMutation()();
  uint64_t v41 = v52[0];
  id v42 = v23;
  id v43 = v39;
  id v44 = sub_100048CC4(v41, (SEL *)&selRef_predicateMatchingAnyPredicates_);
  swift_bridgeObjectRelease();
  id v45 = [v49 connection];
  id v46 = v44;
  id v47 = sub_10011CC88(v45, v44, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v47 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    v50[0] = 8;
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

id sub_100048CC4(uint64_t a1, SEL *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    NSString v5 = (void **)(a1 + 32);
    do
    {
      double v6 = *v5++;
      id v7 = v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v3;
    }
    while (v3);
  }
  sub_10011E980((unint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(self, *a2, isa);

  return v9;
}

void sub_100048DD0()
{
  NSString v1 = v0;
  sub_100012960((uint64_t *)&unk_1001E17C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  NSString v5 = self;
  id v6 = [v5 predicateWithProperty:v3 equalToValue:v4];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v6;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v5 predicateWithProperty:v7 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v8;
  specialized Array._endMutation()();
  id v9 = sub_100048CC4(inited, (SEL *)&selRef_predicateMatchingAllPredicates_);
  swift_bridgeObjectRelease();
  id v10 = [v1 connection];
  id v11 = v9;
  id v12 = sub_10011CC88(v10, v9, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v12 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_100049014(uint64_t a1, uint64_t a2)
{
  NSString v3 = v2;
  sub_100012960((uint64_t *)&unk_1001E17C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  uint64_t v17 = a1;
  swift_bridgeObjectRetain();
  uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v9 = self;
  id v10 = objc_msgSend(v9, "predicateWithProperty:equalToValue:", v7, v8, v17, a2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  LOBYTE(v18) = 0;
  id v12 = objc_msgSend(v9, "predicateWithProperty:equalToValue:", v11, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v18);
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v12;
  specialized Array._endMutation()();
  id v13 = sub_100048CC4(inited, (SEL *)&selRef_predicateMatchingAllPredicates_);
  swift_bridgeObjectRelease();
  id v14 = [v3 connection];
  id v15 = v13;
  id v16 = sub_10011CC88(v14, v13, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v16 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for PostbackDatabaseTransaction()
{
  return self;
}

unint64_t sub_100049330()
{
  unint64_t result = qword_1001E1200;
  if (!qword_1001E1200)
  {
    type metadata accessor for AKSQLError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1200);
  }
  return result;
}

unint64_t sub_100049388()
{
  unint64_t result = qword_1001E17D8;
  if (!qword_1001E17D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E17D8);
  }
  return result;
}

uint64_t destroy for Service(id *a1)
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 3));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 8));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 13));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 18));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 23));
  swift_release();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 32));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 37));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 57));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 65));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 70));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 75));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 80));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 85));
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 91));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 96));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 101));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 112));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 117));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 125));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 130));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 135));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 140));

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 145));
}

uint64_t initializeWithCopy for Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  NSString v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2 + 24;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = v7;
  id v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  id v10 = v5;
  v9(a1 + 24, v6, v8);
  long long v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 104, a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 168) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 144, a2 + 144);
  long long v14 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 208) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 184, a2 + 184);
  uint64_t v15 = *(void *)(a2 + 232);
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v15;
  id v16 = *(void **)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v16;
  uint64_t v18 = *(void *)(a2 + 280);
  uint64_t v17 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = v18;
  *(void *)(a1 + 288) = v17;
  NSString v19 = **(void (***)(uint64_t, uint64_t, uint64_t))(v18 - 8);
  swift_retain();
  swift_bridgeObjectRetain();
  id v20 = v16;
  v19(a1 + 256, a2 + 256, v18);
  long long v21 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 320) = v21;
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 296, a2 + 296);
  uint64_t v22 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v22;
  uint64_t v24 = *(void **)(a2 + 352);
  uint64_t v23 = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = v24;
  *(void *)(a1 + 360) = v23;
  double v25 = *(void **)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v25;
  uint64_t v26 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = v26;
  NSString v28 = *(void **)(a2 + 400);
  uint64_t v27 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = v28;
  *(void *)(a1 + 408) = v27;
  uint64_t v69 = *(void **)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v69;
  uint64_t v29 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v29;
  uint64_t v71 = *(void **)(a2 + 448);
  *(void *)(a1 + 448) = v71;
  long long v30 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 480) = v30;
  uint64_t v70 = v30;
  uint64_t v68 = **(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8);
  swift_bridgeObjectRetain();
  id v31 = v24;
  swift_bridgeObjectRetain();
  id v32 = v25;
  swift_bridgeObjectRetain();
  id v33 = v28;
  swift_bridgeObjectRetain();
  id v34 = v69;
  swift_bridgeObjectRetain();
  id v35 = v71;
  v68(a1 + 456, a2 + 456, v70);
  uint64_t v36 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v36;
  NSString v37 = *(void **)(a2 + 512);
  *(void *)(a1 + 512) = v37;
  long long v38 = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 544) = v38;
  uint64_t v39 = v38;
  uint64_t v40 = **(void (***)(uint64_t, uint64_t, uint64_t))(v38 - 8);
  swift_bridgeObjectRetain();
  id v41 = v37;
  v40(a1 + 520, a2 + 520, v39);
  uint64_t v42 = *(void *)(a2 + 584);
  *(void *)(a1 + 584) = v42;
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  (**(void (***)(uint64_t, uint64_t))(v42 - 8))(a1 + 560, a2 + 560);
  long long v43 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 6++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v43;
  (**(void (***)(uint64_t, uint64_t))(v43 - 8))(a1 + 600, a2 + 600);
  uint64_t v44 = *(void *)(a2 + 664);
  *(void *)(a1 + 664) = v44;
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  (**(void (***)(uint64_t, uint64_t))(v44 - 8))(a1 + 640, a2 + 640);
  long long v45 = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 704) = v45;
  (**(void (***)(uint64_t, uint64_t))(v45 - 8))(a1 + 680, a2 + 680);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  long long v46 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 752) = v46;
  uint64_t v47 = v46;
  char v48 = **(void (***)(uint64_t, uint64_t, uint64_t))(v46 - 8);
  swift_bridgeObjectRetain();
  v48(a1 + 728, a2 + 728, v47);
  uint64_t v49 = *(void *)(a2 + 792);
  *(void *)(a1 + 792) = v49;
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  (**(void (***)(uint64_t, uint64_t))(v49 - 8))(a1 + 768, a2 + 768);
  long long v50 = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 832) = v50;
  (**(void (***)(uint64_t, uint64_t))(v50 - 8))(a1 + 808, a2 + 808);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  uint64_t v51 = *(void **)(a2 + 864);
  *(void *)(a1 + 864) = v51;
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  int v52 = *(void **)(a2 + 888);
  *(void *)(a1 + 888) = v52;
  uint64_t v53 = *(void *)(a2 + 920);
  *(void *)(a1 + 920) = v53;
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  unint64_t v54 = **(void (***)(uint64_t, uint64_t, uint64_t))(v53 - 8);
  swift_bridgeObjectRetain();
  id v55 = v51;
  swift_bridgeObjectRetain();
  id v56 = v52;
  v54(a1 + 896, a2 + 896, v53);
  long long v57 = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 960) = v57;
  (**(void (***)(uint64_t, uint64_t))(v57 - 8))(a1 + 936, a2 + 936);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  int v58 = *(void **)(a2 + 992);
  *(void *)(a1 + 992) = v58;
  long long v59 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 10++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v59;
  uint64_t v60 = v59;
  uint64_t v61 = **(void (***)(uint64_t, uint64_t, uint64_t))(v59 - 8);
  swift_bridgeObjectRetain();
  id v62 = v58;
  v61(a1 + 1000, a2 + 1000, v60);
  uint64_t v63 = *(void *)(a2 + 1064);
  *(void *)(a1 + 1064) = v63;
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  (**(void (***)(uint64_t, uint64_t))(v63 - 8))(a1 + 1040, a2 + 1040);
  long long v64 = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1104) = v64;
  (**(void (***)(uint64_t, uint64_t))(v64 - 8))(a1 + 1080, a2 + 1080);
  uint64_t v65 = *(void *)(a2 + 1144);
  *(void *)(a1 + 1144) = v65;
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  (**(void (***)(uint64_t, uint64_t))(v65 - 8))(a1 + 1120, a2 + 1120);
  long long v66 = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1184) = v66;
  (**(void (***)(uint64_t, uint64_t))(v66 - 8))(a1 + 1160, a2 + 1160);
  return a1;
}

uint64_t *assignWithCopy for Service(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  NSString v5 = (void *)a1[2];
  a1[2] = (uint64_t)v4;
  id v6 = v4;

  sub_100017B78(a1 + 3, a2 + 3);
  sub_100017B78(a1 + 8, a2 + 8);
  sub_100017B78(a1 + 13, a2 + 13);
  sub_100017B78(a1 + 18, a2 + 18);
  sub_100017B78(a1 + 23, a2 + 23);
  a1[28] = a2[28];
  swift_retain();
  swift_release();
  a1[29] = a2[29];
  a1[30] = a2[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v7 = (void *)a2[31];
  uint64_t v8 = (void *)a1[31];
  a1[31] = (uint64_t)v7;
  id v9 = v7;

  sub_100017B78(a1 + 32, a2 + 32);
  sub_100017B78(a1 + 37, a2 + 37);
  a1[42] = a2[42];
  a1[43] = a2[43];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = (void *)a2[44];
  long long v11 = (void *)a1[44];
  a1[44] = (uint64_t)v10;
  id v12 = v10;

  a1[45] = a2[45];
  a1[46] = a2[46];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v13 = (void *)a2[47];
  long long v14 = (void *)a1[47];
  a1[47] = (uint64_t)v13;
  id v15 = v13;

  a1[48] = a2[48];
  a1[49] = a2[49];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v16 = (void *)a2[50];
  uint64_t v17 = (void *)a1[50];
  a1[50] = (uint64_t)v16;
  id v18 = v16;

  a1[51] = a2[51];
  a1[52] = a2[52];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  NSString v19 = (void *)a2[53];
  id v20 = (void *)a1[53];
  a1[53] = (uint64_t)v19;
  id v21 = v19;

  a1[54] = a2[54];
  a1[55] = a2[55];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = (void *)a2[56];
  uint64_t v23 = (void *)a1[56];
  a1[56] = (uint64_t)v22;
  id v24 = v22;

  sub_100017B78(a1 + 57, a2 + 57);
  a1[62] = a2[62];
  a1[63] = a2[63];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  double v25 = (void *)a2[64];
  uint64_t v26 = (void *)a1[64];
  a1[64] = (uint64_t)v25;
  id v27 = v25;

  sub_100017B78(a1 + 65, a2 + 65);
  sub_100017B78(a1 + 70, a2 + 70);
  sub_100017B78(a1 + 75, a2 + 75);
  sub_100017B78(a1 + 80, a2 + 80);
  sub_100017B78(a1 + 85, a2 + 85);
  a1[90] = a2[90];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100017B78(a1 + 91, a2 + 91);
  sub_100017B78(a1 + 96, a2 + 96);
  sub_100017B78(a1 + 101, a2 + 101);
  a1[106] = a2[106];
  a1[107] = a2[107];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  NSString v28 = (void *)a2[108];
  uint64_t v29 = (void *)a1[108];
  a1[108] = (uint64_t)v28;
  id v30 = v28;

  a1[109] = a2[109];
  a1[110] = a2[110];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v31 = (void *)a2[111];
  id v32 = (void *)a1[111];
  a1[111] = (uint64_t)v31;
  id v33 = v31;

  sub_100017B78(a1 + 112, a2 + 112);
  sub_100017B78(a1 + 117, a2 + 117);
  a1[122] = a2[122];
  a1[123] = a2[123];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v34 = (void *)a2[124];
  id v35 = (void *)a1[124];
  a1[124] = (uint64_t)v34;
  id v36 = v34;

  sub_100017B78(a1 + 125, a2 + 125);
  sub_100017B78(a1 + 130, a2 + 130);
  sub_100017B78(a1 + 135, a2 + 135);
  sub_100017B78(a1 + 140, a2 + 140);
  sub_100017B78(a1 + 145, a2 + 145);
  return a1;
}

void *initializeWithTake for Service(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x4B0uLL);
}

uint64_t assignWithTake for Service(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  NSString v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v2[2];

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 24);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v2 + 3);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v2 + 5);
  *(void *)(a1 + 56) = v2[7];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 64);
  long long v6 = *((_OWORD *)v2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)v2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 96) = v2[12];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 104);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v2 + 13);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(v2 + 15);
  *(void *)(a1 + 136) = v2[17];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 144);
  long long v7 = *((_OWORD *)v2 + 10);
  *(_OWORD *)(a1 + 144) = *((_OWORD *)v2 + 9);
  *(_OWORD *)(a1 + 160) = v7;
  *(void *)(a1 + 176) = v2[22];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 184);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v2 + 23);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(v2 + 25);
  uint64_t v8 = v2[28];
  *(void *)(a1 + 216) = v2[27];
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
  swift_release();
  uint64_t v9 = v2[29];
  v2 += 29;
  *(void *)(a1 + 232) = v9;
  *(void *)(a1 + 240) = v2[1];
  swift_bridgeObjectRelease();
  id v10 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = v2[2];

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 256);
  long long v11 = *(_OWORD *)(v2 + 5);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(v2 + 3);
  *(_OWORD *)(a1 + 272) = v11;
  *(void *)(a1 + 288) = v2[7];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 296);
  long long v12 = *((_OWORD *)v2 + 5);
  *(_OWORD *)(a1 + 296) = *((_OWORD *)v2 + 4);
  *(_OWORD *)(a1 + 312) = v12;
  *(_OWORD *)(a1 + 328) = *((_OWORD *)v2 + 6);
  *(void *)(a1 + 344) = v2[14];
  swift_bridgeObjectRelease();
  long long v13 = *(void **)(a1 + 352);
  *(void *)(a1 + 352) = v2[15];

  uint64_t v14 = v2[17];
  *(void *)(a1 + 360) = v2[16];
  *(void *)(a1 + 368) = v14;
  swift_bridgeObjectRelease();
  id v15 = *(void **)(a1 + 376);
  *(void *)(a1 + 376) = v2[18];

  uint64_t v16 = v2[20];
  *(void *)(a1 + 384) = v2[19];
  *(void *)(a1 + 392) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void **)(a1 + 400);
  *(void *)(a1 + 400) = v2[21];

  uint64_t v18 = v2[23];
  *(void *)(a1 + 408) = v2[22];
  *(void *)(a1 + 416) = v18;
  swift_bridgeObjectRelease();
  NSString v19 = *(void **)(a1 + 424);
  *(void *)(a1 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2[24];

  uint64_t v20 = v2[26];
  *(void *)(a1 + 432) = v2[25];
  *(void *)(a1 + 440) = v20;
  swift_bridgeObjectRelease();
  id v21 = *(void **)(a1 + 448);
  *(void *)(a1 + 448) = v2[27];

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 456);
  long long v22 = *((_OWORD *)v2 + 15);
  *(_OWORD *)(a1 + 456) = *((_OWORD *)v2 + 14);
  *(_OWORD *)(a1 + 472) = v22;
  *(_OWORD *)(a1 + 488) = *((_OWORD *)v2 + 16);
  *(void *)(a1 + 504) = v2[34];
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void **)(a1 + 512);
  *(void *)(a1 + 512) = v2[35];

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 520);
  long long v24 = *((_OWORD *)v2 + 19);
  *(_OWORD *)(a1 + 520) = *((_OWORD *)v2 + 18);
  *(_OWORD *)(a1 + 536) = v24;
  *(void *)(a1 + 552) = v2[40];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 560);
  long long v25 = *(_OWORD *)(v2 + 43);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(v2 + 41);
  *(_OWORD *)(a1 + 576) = v25;
  *(void *)(a1 + 592) = v2[45];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 600);
  long long v26 = *((_OWORD *)v2 + 24);
  *(_OWORD *)(a1 + 600) = *((_OWORD *)v2 + 23);
  *(_OWORD *)(a1 + 616) = v26;
  *(void *)(a1 + 632) = v2[50];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 640);
  long long v27 = *(_OWORD *)(v2 + 53);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(v2 + 51);
  *(_OWORD *)(a1 + 656) = v27;
  *(void *)(a1 + 672) = v2[55];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 680);
  long long v28 = *((_OWORD *)v2 + 29);
  *(_OWORD *)(a1 + 680) = *((_OWORD *)v2 + 28);
  *(_OWORD *)(a1 + 696) = v28;
  uint64_t v29 = v2[61];
  *(void *)(a1 + 712) = v2[60];
  *(void *)(a1 + 720) = v29;
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 728);
  long long v30 = *((_OWORD *)v2 + 32);
  *(_OWORD *)(a1 + 728) = *((_OWORD *)v2 + 31);
  *(_OWORD *)(a1 + 744) = v30;
  *(void *)(a1 + 760) = v2[66];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 768);
  long long v31 = *(_OWORD *)(v2 + 69);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(v2 + 67);
  *(_OWORD *)(a1 + 784) = v31;
  *(void *)(a1 + 800) = v2[71];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 808);
  long long v32 = *((_OWORD *)v2 + 37);
  *(_OWORD *)(a1 + 808) = *((_OWORD *)v2 + 36);
  *(_OWORD *)(a1 + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v32;
  *(_OWORD *)(a1 + 840) = *((_OWORD *)v2 + 38);
  *(void *)(a1 + 856) = v2[78];
  swift_bridgeObjectRelease();
  id v33 = *(void **)(a1 + 864);
  *(void *)(a1 + 864) = v2[79];

  *(void *)(a1 + 872) = v2[80];
  *(void *)(a1 + 880) = v2[81];
  swift_bridgeObjectRelease();
  id v34 = *(void **)(a1 + 888);
  *(void *)(a1 + 888) = v2[82];

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 896);
  long long v35 = *(_OWORD *)(v2 + 85);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(v2 + 83);
  *(_OWORD *)(a1 + 912) = v35;
  *(void *)(a1 + 928) = v2[87];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 936);
  long long v36 = *((_OWORD *)v2 + 45);
  *(_OWORD *)(a1 + 936) = *((_OWORD *)v2 + 44);
  *(_OWORD *)(a1 + 952) = v36;
  *(_OWORD *)(a1 + 968) = *((_OWORD *)v2 + 46);
  *(void *)(a1 + 984) = v2[94];
  swift_bridgeObjectRelease();
  NSString v37 = *(void **)(a1 + 992);
  *(void *)(a1 + 992) = v2[95];

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 1000);
  long long v38 = *((_OWORD *)v2 + 49);
  *(_OWORD *)(a1 + 1000) = *((_OWORD *)v2 + 48);
  *(_OWORD *)(a1 + 1016) = v38;
  *(void *)(a1 + 1032) = v2[100];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 1040);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(v2 + 101);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(v2 + 103);
  *(void *)(a1 + 1072) = v2[105];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 1080);
  long long v39 = *((_OWORD *)v2 + 54);
  *(_OWORD *)(a1 + 1080) = *((_OWORD *)v2 + 53);
  *(_OWORD *)(a1 + 1096) = v39;
  *(void *)(a1 + 1112) = v2[110];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 1120);
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(v2 + 111);
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(v2 + 113);
  *(void *)(a1 + 1152) = v2[115];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 1160);
  long long v40 = *((_OWORD *)v2 + 59);
  *(_OWORD *)(a1 + 1160) = *((_OWORD *)v2 + 58);
  *(_OWORD *)(a1 + 1176) = v40;
  *(void *)(a1 + 1192) = v2[120];
  return a1;
}

uint64_t getEnumTagSinglePayload for Service(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 1200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 1192) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 1200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 1200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Service()
{
  return &type metadata for Service;
}

id sub_10004A8B0@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  unint64_t v2 = (void *)qword_1001E5F88;
  id v3 = objc_allocWithZone((Class)ASCLockupViewGroup);
  id v4 = v2;
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 initWithName:v5];

  id v33 = (ValueMetadata *)sub_100019F68(0, &qword_1001E1810);
  id v34 = &off_1001C3100;
  *(void *)&long long v32 = v6;
  id result = [self defaultWorkspace];
  if (result)
  {
    long long v31 = &off_1001C8160;
    long long v30 = &type metadata for LaunchServicesWorkspace;
    *(void *)&long long v29 = result;
    *(void *)(a1 + 128) = &type metadata for DogDistributor;
    *(void *)(a1 + 136) = &off_1001C4AF0;
    *(void *)(a1 + 168) = &type metadata for LaunchServicesRecordFactory;
    *(void *)(a1 + 176) = &off_1001C6D08;
    if (qword_1001E0940 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_1001E60E8;
    uint64_t v9 = type metadata accessor for SnoutManager();
    *(void *)(a1 + 208) = v9;
    *(void *)(a1 + 216) = &off_1001CB0F8;
    *(void *)(a1 + 184) = v8;
    *(void *)a1 = 0xD000000000000010;
    *(void *)(a1 + 8) = 0x8000000100185B70;
    *(void *)(a1 + 16) = v4;
    sub_100012D60(&v32, a1 + 24);
    sub_100012D60(&v29, a1 + 64);
    uint64_t v10 = swift_retain_n();
    uint64_t v11 = sub_10004DB0C(v10);
    long long v12 = (void *)qword_1001E5F88;
    uint64_t v27 = v9;
    *(void *)(a1 + 280) = v9;
    *(void *)(a1 + 288) = &off_1001CB0F8;
    *(void *)(a1 + 256) = v8;
    *(void *)(a1 + 320) = &type metadata for AMSDogBag;
    *(void *)(a1 + 328) = &off_1001CAA18;
    *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
    *(void *)(a1 + 232) = 0xD000000000000010;
    *(void *)(a1 + 240) = 0x8000000100185910;
    *(void *)(a1 + 248) = v12;
    long long v13 = self;
    id v14 = v12;
    swift_retain();
    id v15 = v14;
    id v16 = [v13 sharedScheduler];
    *(void *)(a1 + 480) = &type metadata for ActivityManager;
    *(void *)(a1 + 488) = &off_1001CCE58;
    uint64_t v17 = (void *)swift_allocObject();
    *(void *)(a1 + 456) = v17;
    v17[5] = &type metadata for BackgroundSystemTaskScheduler;
    v17[6] = &off_1001C30C8;
    v17[2] = v16;
    *(void *)(a1 + 544) = &type metadata for AttributionKitCanineArbiter;
    *(void *)(a1 + 552) = &off_1001C3FF8;
    uint64_t v18 = qword_1001E0880;
    id v19 = v15;
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_1001E5F50;
    uint64_t v26 = type metadata accessor for TaskGreyhound();
    *(void *)(a1 + 584) = v26;
    *(void *)(a1 + 592) = &off_1001C2490;
    *(void *)(a1 + 560) = v20;
    *(void *)(a1 + 6++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &type metadata for LaunchServicesRecordFactory;
    *(void *)(a1 + 632) = &off_1001C6D08;
    *(void *)(a1 + 664) = &type metadata for AMSDogBag;
    *(void *)(a1 + 672) = &off_1001CAA18;
    swift_retain();
    id v21 = [v13 sharedScheduler];
    id v33 = &type metadata for ActivityManager;
    id v34 = &off_1001CCE58;
    long long v22 = (void *)swift_allocObject();
    *(void *)&long long v32 = v22;
    v22[5] = &type metadata for BackgroundSystemTaskScheduler;
    v22[6] = &off_1001C30C8;
    void v22[2] = v21;
    sub_100087C5C((uint64_t)&v32, a1 + 680);
    *(void *)(a1 + 752) = &type metadata for AppStoreDaemonSKANInterop;
    *(void *)(a1 + 760) = &off_1001CA740;
    uint64_t v23 = (void *)qword_1001E5F88;
    *(void *)(a1 + 792) = &type metadata for AggregatedReportingManager;
    *(void *)(a1 + 800) = &off_1001C7F28;
    long long v24 = (void *)swift_allocObject();
    *(void *)(a1 + 768) = v24;
    v24[8] = &type metadata for AMSDogBag;
    v24[9] = &off_1001CAA18;
    v24[13] = &type metadata for BiomeEventStreamDog;
    v24[14] = &off_1001C8C58;
    void v24[2] = 0x74735F6E656B6F74;
    v24[3] = 0xEB0000000065726FLL;
    void v24[4] = v23;
    uint64_t v25 = qword_1001E60E8;
    *(void *)(a1 + 832) = v27;
    *(void *)(a1 + 840) = &off_1001CB0F8;
    *(void *)(a1 + 808) = v25;
    strcpy((char *)(a1 + 336), "postback_store");
    *(unsigned char *)(a1 + 351) = -18;
    *(void *)(a1 + 352) = v19;
    *(void *)(a1 + 360) = 0x63616274736F6867;
    *(void *)(a1 + 368) = 0xEF65726F74735F6BLL;
    *(void *)(a1 + 376) = v19;
    *(void *)(a1 + 384) = 0xD000000000000010;
    *(void *)(a1 + 392) = 0x8000000100185910;
    *(void *)(a1 + 400) = v19;
    *(void *)(a1 + 408) = 0x74735F6E656B6F74;
    *(void *)(a1 + 416) = 0xEB0000000065726FLL;
    *(void *)(a1 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
    *(void *)(a1 + 432) = 0xD000000000000012;
    *(void *)(a1 + 440) = 0x8000000100185930;
    *(void *)(a1 + 448) = v19;
    *(void *)(a1 + 496) = 0xD000000000000011;
    *(void *)(a1 + 504) = 0x8000000100185AE0;
    *(void *)(a1 + 512) = v19;
    id v28 = v23;
    swift_retain();
    sub_1000CE908((uint64_t *)(a1 + 896));
    *(void *)(a1 + 960) = &type metadata for LaunchServicesRecordFactory;
    *(void *)(a1 + 968) = &off_1001C6D08;
    *(void *)(a1 + 10++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v26;
    *(void *)(a1 + 1032) = &off_1001C2490;
    *(void *)(a1 + 1000) = v20;
    *(void *)(a1 + 1064) = &type metadata for AMSDogBag;
    *(void *)(a1 + 1072) = &off_1001CAA18;
    *(void *)(a1 + 1104) = v27;
    *(void *)(a1 + 1112) = &off_1001CB0F8;
    *(void *)(a1 + 1080) = v25;
    *(void *)(a1 + 848) = 0x74735F6E656B6F74;
    *(void *)(a1 + 856) = 0xEB0000000065726FLL;
    *(void *)(a1 + 864) = v28;
    *(void *)(a1 + 872) = 0xD000000000000010;
    *(void *)(a1 + 880) = 0x8000000100185910;
    *(void *)(a1 + 888) = v28;
    *(void *)(a1 + 976) = 0xD000000000000012;
    *(void *)(a1 + 984) = 0x8000000100185930;
    *(void *)(a1 + 992) = v28;
    *(void *)(a1 + 1144) = v27;
    *(void *)(a1 + 1152) = &off_1001CB0F8;
    *(void *)(a1 + 1120) = v25;
    *(void *)(a1 + 1184) = &type metadata for AMSDogBag;
    *(void *)(a1 + 1192) = &off_1001CAA18;
    swift_retain_n();
    swift_retain();
    return v28;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004AEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  void v4[6] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_10004AFB8, 0, 0);
}

uint64_t sub_10004AFB8()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = Logger.xpc.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Updating postback", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10004DAB8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v11 = *(void *)(v0 + 16);
  char v12 = *(unsigned char *)(v0 + 25);
  uint64_t v13 = *(void *)(v0 + 32);
  *(void *)(v0 + 96) = v13;
  char v14 = *(unsigned char *)(v0 + 24);
  swift_bridgeObjectRetain();
  id v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v15;
  *id v15 = v0;
  v15[1] = sub_10004B1F8;
  uint64_t v16 = *(void *)(v0 + 40);
  return sub_1000D7968(v11, v14, v12, v13, v16);
}

uint64_t sub_10004B1F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_10004B36C, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10004B36C()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004B3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  void v7[4] = a3;
  uint64_t v8 = type metadata accessor for Logger();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  v7[12] = swift_task_alloc();
  return _swift_task_switch(sub_10004B4B0, 0, 0);
}

uint64_t sub_10004B4B0()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v4 = Logger.xpc.unsafeMutableAddressor();
  v0[13] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[14] = v5;
  v0[15] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Preflighting impression", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[9];
  uint64_t v11 = v0[10];

  char v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[16] = v12;
  v0[17] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v9, v10);
  uint64_t v13 = (void *)swift_task_alloc();
  v0[18] = v13;
  void *v13 = v0;
  v13[1] = sub_10004B634;
  uint64_t v14 = v0[6];
  uint64_t v15 = v0[7];
  uint64_t v17 = v0[4];
  uint64_t v16 = v0[5];
  uint64_t v18 = v0[3];
  return sub_10002B94C(v17, v16, v18, v14, v15);
}

uint64_t sub_10004B634()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v2[19] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10004B7C0;
    uint64_t v7 = v2[7];
    uint64_t v8 = v2[6];
    uint64_t v9 = v2[3];
    return sub_1000539F0(v9, v8, v7);
  }
}

uint64_t sub_10004B7C0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004B908, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10004B908()
{
  (*(void (**)(void, void, void))(v0 + 112))(*(void *)(v0 + 88), *(void *)(v0 + 104), *(void *)(v0 + 72));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to fetch distributor metadata: %@", v3, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 128))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10004BAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  uint64_t v5[2] = a1;
  sub_100012960(&qword_1001E1380);
  v5[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_10004BBF0, 0, 0);
}

uint64_t sub_10004BBF0()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = Logger.xpc.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Starting view", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[9];
  uint64_t v8 = v0[10];
  uint64_t v10 = v0[8];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[11] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10004BD5C;
  uint64_t v12 = v0[7];
  uint64_t v13 = v0[4];
  uint64_t v14 = v0[5];
  uint64_t v15 = v0[3];
  return sub_10002E514(v12, v13, v14, v15, 0);
}

uint64_t sub_10004BD5C()
{
  uint64_t v2 = (void *)*v1;
  v2[12] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004DDD8, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[13] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10004BEE0;
    uint64_t v4 = v2[7];
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[2];
    return sub_10002EBEC(v6, v5, v4, 0, 1);
  }
}

uint64_t sub_10004BEE0()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004DDD4;
  }
  else {
    uint64_t v2 = sub_10004DDD0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004BFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  uint64_t v5[2] = a1;
  sub_100012960(&qword_1001E1380);
  v5[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_10004C0EC, 0, 0);
}

uint64_t sub_10004C0EC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = Logger.xpc.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ending view", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[9];
  uint64_t v8 = v0[10];
  uint64_t v10 = v0[8];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[11] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10004C258;
  uint64_t v12 = v0[7];
  uint64_t v13 = v0[4];
  uint64_t v14 = v0[5];
  uint64_t v15 = v0[3];
  return sub_10002E514(v12, v13, v14, v15, 0);
}

uint64_t sub_10004C258()
{
  uint64_t v2 = (void *)*v1;
  v2[12] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004C574, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[13] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10004C3DC;
    uint64_t v4 = v2[7];
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[2];
    return sub_10002EBEC(v6, v5, v4, 1, 1);
  }
}

uint64_t sub_10004C3DC()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004C5E4;
  }
  else {
    uint64_t v2 = sub_10004C4F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004C4F0()
{
  sub_100019960(*(void *)(v0 + 56), &qword_1001E1380);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004C574()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004C5E4()
{
  sub_100019960(*(void *)(v0 + 56), &qword_1001E1380);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004C664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[12] = a6;
  v7[13] = v6;
  v7[10] = a4;
  v7[11] = a5;
  v7[8] = a2;
  v7[9] = a3;
  v7[7] = a1;
  uint64_t v8 = type metadata accessor for URL();
  v7[14] = v8;
  v7[15] = *(void *)(v8 - 8);
  v7[16] = swift_task_alloc();
  sub_100012960(&qword_1001E1170);
  v7[17] = swift_task_alloc();
  v7[18] = swift_task_alloc();
  v7[19] = swift_task_alloc();
  sub_100012960(&qword_1001E1380);
  v7[20] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v7[21] = v9;
  v7[22] = *(void *)(v9 - 8);
  v7[23] = swift_task_alloc();
  return _swift_task_switch(sub_10004C808, 0, 0);
}

uint64_t sub_10004C808()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = Logger.xpc.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Processing tap", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[22];
  uint64_t v8 = v0[23];
  uint64_t v10 = v0[21];
  uint64_t v11 = (void *)v0[11];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v0[5] = sub_100019F68(0, &qword_1001E1648);
  v0[6] = &off_1001C3D80;
  v0[2] = v11;
  id v12 = v11;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[24] = v13;
  void *v13 = v0;
  v13[1] = sub_10004C9A0;
  uint64_t v14 = v0[8];
  return sub_100114198((uint64_t)(v0 + 2), v14);
}

uint64_t sub_10004C9A0()
{
  uint64_t v2 = (void *)*v1;
  v2[25] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004D694, 0, 0);
  }
  else
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v2 + 2));
    uint64_t v3 = (void *)swift_task_alloc();
    v2[26] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10004CB1C;
    uint64_t v4 = v2[8];
    return sub_100054DA0(v4);
  }
}

uint64_t sub_10004CB1C()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v2[27] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10004CCE8;
    uint64_t v7 = v2[20];
    uint64_t v8 = v2[9];
    uint64_t v9 = v2[10];
    uint64_t v10 = v2[8];
    return sub_10002E514(v7, v8, v9, v10, 1);
  }
}

uint64_t sub_10004CCE8()
{
  uint64_t v2 = (void *)*v1;
  v2[28] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004D744, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[29] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10004CE64;
    uint64_t v4 = v2[20];
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[7];
    return sub_100033FFC(v6, v5, v4);
  }
}

uint64_t sub_10004CE64()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004D7EC;
  }
  else {
    uint64_t v2 = sub_10004CF78;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004CF78()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[12];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[31] = v6;
  v0[32] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v6(v1, 1, 1, v3);
  sub_1000207C4(v5, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100019960(v0[18], &qword_1001E1170);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[35] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10004D348;
    uint64_t v8 = v0[20];
    uint64_t v9 = v0[8];
    return sub_10009CC30(v9, v8);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[15] + 32))(v0[16], v0[18], v0[14]);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[33] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10004D130;
    uint64_t v13 = v0[16];
    uint64_t v12 = v0[17];
    uint64_t v14 = v0[8];
    return sub_10005F5B8(v12, v13, v14);
  }
}

uint64_t sub_10004D130()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004D8A4;
  }
  else {
    uint64_t v2 = sub_10004D244;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004D244()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[31];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[14];
  (*(void (**)(void, uint64_t))(v0[15] + 8))(v0[16], v4);
  sub_100019960(v2, &qword_1001E1170);
  v1(v3, 0, 1, v4);
  sub_10004DA50(v3, v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[35] = v5;
  void *v5 = v0;
  v5[1] = sub_10004D348;
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[8];
  return sub_10009CC30(v7, v6);
}

uint64_t sub_10004D348()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[36] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10004D4B4;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[8];
  return sub_100055A74(v5, v4);
}

uint64_t sub_10004D4B4()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004D988;
  }
  else {
    uint64_t v2 = sub_10004D5C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004D5C8()
{
  uint64_t v1 = v0[20];
  sub_100019960(v0[19], &qword_1001E1170);
  sub_100019960(v1, &qword_1001E1380);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10004D694()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004D744()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004D7EC()
{
  sub_100019960(*(void *)(v0 + 160), &qword_1001E1380);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004D8A4()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  sub_100019960(v1, &qword_1001E1170);
  sub_100019960(v2, &qword_1001E1380);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10004D988()
{
  uint64_t v1 = v0[20];
  sub_100019960(v0[19], &qword_1001E1170);
  sub_100019960(v1, &qword_1001E1380);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10004DA50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004DAB8()
{
  unint64_t result = qword_1001E1808;
  if (!qword_1001E1808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1808);
  }
  return result;
}

uint64_t sub_10004DB0C(uint64_t a1)
{
  uint64_t v20 = &type metadata for BackBoardEventDeliveryManager;
  id v21 = &off_1001C3EB0;
  uint64_t v2 = type metadata accessor for SnoutManager();
  v18[3] = v2;
  v18[4] = &off_1001CB0F8;
  v18[0] = a1;
  type metadata accessor for TapEventValidator();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = sub_10004DD80((uint64_t)v19, (uint64_t)&type metadata for BackBoardEventDeliveryManager);
  __chkstk_darwin(v4);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = sub_10004DD80((uint64_t)v18, v2);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = *v8;
  uint64_t v16 = &type metadata for BackBoardEventDeliveryManager;
  uint64_t v17 = &off_1001C3EB0;
  uint64_t v13 = v2;
  uint64_t v14 = &off_1001CB0F8;
  *(void *)&long long v12 = v10;
  swift_defaultActor_initialize();
  sub_100012D60(&v15, v3 + 112);
  sub_100012D60(&v12, v3 + 152);
  *(void *)(v3 + 192) = 0;
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v18);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v19);
  return v3;
}

uint64_t sub_10004DCF8()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004DD30()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10004DD80(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_10004DDDC(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  sub_100012960(&qword_1001E1840);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178BC0;
  NSString v7 = String._bridgeToObjectiveC()();
  *(void *)&long long v36 = a1;
  uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v9 = self;
  id v10 = [v9 predicateWithProperty:v7 equalToValue:v8];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  LOBYTE(v36) = 0;
  id v12 = [v9 predicateWithProperty:v11 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v12;
  if (a2) {
    uint64_t v13 = 0x69746375646F7270;
  }
  else {
    uint64_t v13 = 0x6D706F6C65766564;
  }
  if (a2) {
    unint64_t v14 = 0xEA00000000006E6FLL;
  }
  else {
    unint64_t v14 = 0xEB00000000746E65;
  }
  NSString v15 = String._bridgeToObjectiveC()();
  *(void *)&long long v36 = v13;
  *((void *)&v36 + 1) = v14;
  swift_bridgeObjectRetain();
  id v16 = [v9 predicateWithProperty:v15 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 48) = v16;
  Date.timeIntervalSince1970.getter();
  double v18 = v17 * 1000.0;
  if ((~*(void *)&v18 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v18 <= -1.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v18 >= 1.84467441e19)
  {
LABEL_16:
    __break(1u);
    return;
  }
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v9 predicateWithProperty:v19 value:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() comparisonType:6];
  swift_unknownObjectRelease();

  *(void *)(inited + 56) = v20;
  specialized Array._endMutation()();
  id v21 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v22 = [v35 connection];
  id v23 = v21;
  id v24 = sub_10011D1D8(v22, v21, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  long long v40 = 0u;
  memset(v41, 0, sizeof(v41));
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  __chkstk_darwin(v24);
  id v34 = &v36;
  uint64_t v25 = v42;
  sub_10012893C((uint64_t)sub_10004EC74, (uint64_t)&v33, v24);
  if (v25)
  {
    LODWORD(v34) = *(unsigned __int16 *)&v41[16] | (v41[18] << 16);
    long long v33 = *(_OWORD *)v41;
    sub_10004EC7C(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1));
  }
  else
  {

    __int16 v26 = *(_WORD *)&v41[16];
    char v27 = v41[18];
    long long v28 = v37;
    long long v29 = v38;
    long long v30 = v39;
    long long v31 = v40;
    long long v32 = *(_OWORD *)v41;
    *(_OWORD *)a3 = v36;
    *(_OWORD *)(a3 + 16) = v28;
    *(_OWORD *)(a3 + 32) = v29;
    *(_OWORD *)(a3 + 48) = v30;
    *(_OWORD *)(a3 + 64) = v31;
    *(_OWORD *)(a3 + 80) = v32;
    *(unsigned char *)(a3 + 98) = v27;
    *(_WORD *)(a3 + 96) = v26;
  }
}

uint64_t sub_10004E240()
{
  uint64_t v1 = v0;
  sub_100012960(&qword_1001E2440);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B50;
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v5 = v4 * 1000.0;
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v5 < 1.84467441e19)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    uint64_t v8 = self;
    id v9 = [v8 predicateWithProperty:v6 value:v7 comparisonType:6];
    swift_unknownObjectRelease();

    *(void *)(inited + 32) = v9;
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRetain();
    id v11 = [v8 predicateWithProperty:v10 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    *(void *)(inited + 40) = v11;
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = [v8 predicateWithProperty:v12 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();

    *(void *)(inited + 48) = v13;
    specialized Array._endMutation()();
    id v14 = sub_1000485A4(inited);
    swift_bridgeObjectRelease();
    id v15 = [v1 connection];
    id v16 = v14;
    id v17 = sub_10011D59C(v15, v14, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
    id v18 = [v17 countOfEntities];

    return (uint64_t)v18;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10004E584(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  sub_100012960(&qword_1001E2440);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v8 = v7 * 1000.0;
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v8 <= -1.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8 >= 1.84467441e19)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)v8;
  NSString v10 = String._bridgeToObjectiveC()();
  unint64_t v23 = v9;
  uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  NSString v12 = self;
  id v13 = objc_msgSend(v12, "predicateWithProperty:value:comparisonType:", v10, v11, 6, v23);
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v13;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v14 = 0x6F6C6E776F646572;
    }
    else {
      uint64_t v14 = 0x6761676E652D6572;
    }
    if (a2 == 1) {
      unint64_t v15 = 0xEA00000000006461;
    }
    else {
      unint64_t v15 = 0xED0000746E656D65;
    }
  }
  else
  {
    unint64_t v15 = 0xE800000000000000;
    uint64_t v14 = 0x64616F6C6E776F64;
  }
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  id v17 = objc_msgSend(v12, "predicateWithProperty:equalToValue:", v16, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v14, v15);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v17;
  specialized Array._endMutation()();
  id v18 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v19 = [v3 connection];
  id v20 = v18;
  id v21 = sub_10011D59C(v19, v18, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  id v22 = [v21 countOfEntities];

  return (uint64_t)v22;
}

double sub_10004E850@<D0>(uint64_t a1@<X8>)
{
  id v4 = [v1 connection];
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = [self predicateWithProperty:v5 equalToValue:v6];
  swift_unknownObjectRelease();

  id v8 = sub_10011D59C(v4, v7, (uint64_t)&off_1001C0648, 0, 0);
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  v13[2] = &v14;
  sub_100128D38((uint64_t)sub_10004EC6C, (uint64_t)v13, v8);

  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v17;
    double result = *(double *)&v14;
    long long v11 = v15;
    long long v12 = v16;
    *(_OWORD *)a1 = v14;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v12;
    *(void *)(a1 + 48) = v10;
  }
  return result;
}

id sub_10004EA64()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TokenDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TokenDatabaseSession()
{
  return self;
}

uint64_t sub_10004EABC(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 88);
  int v11 = *(unsigned __int8 *)(a1 + 98);
  if (*(unsigned char *)(a1 + 97)) {
    __int16 v12 = 256;
  }
  else {
    __int16 v12 = 0;
  }
  __int16 v13 = v12 | *(unsigned __int8 *)(a1 + 96);
  uint64_t v19 = *(void *)a4;
  uint64_t v14 = *(void *)(a4 + 16);
  uint64_t v18 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(a4 + 24);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v4;
  *(void *)(a4 + 16) = v6;
  *(void *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a4 + 48) = v8;
  *(void *)(a4 + 56) = v7;
  *(void *)(a4 + 64) = v9;
  *(_OWORD *)(a4 + 72) = *(_OWORD *)(a1 + 72);
  *(void *)(a4 + 88) = v10;
  uint64_t v16 = a4 + 96;
  *(unsigned char *)(v16 + 2) = v11 != 0;
  *(_WORD *)uint64_t v16 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_10004EC7C(v19, v18, v14, v15);
  *a3 = 1;
  return result;
}

uint64_t sub_10004EC08(uint64_t a1, uint64_t a2, unsigned char *a3, void *a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  *a4 = *(void *)a1;
  a4[1] = v5;
  a4[2] = v7;
  a4[3] = v6;
  a4[4] = v8;
  a4[5] = v9;
  a4[6] = v10;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = 1;
  return result;
}

uint64_t sub_10004EC6C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10004EC08(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10004EC74(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10004EABC(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_10004EC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_10004ECE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10004EDD8(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for Date();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_10004EE50(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10004EF04(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10004EFC8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10004EFC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BarktivityType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BarktivityType()
{
  uint64_t result = qword_1001E18B8;
  if (!qword_1001E18B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_10004F070(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10004F124(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10004EFC8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10004F1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_10004F210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10004F23C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10004F24C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackTransmissionRepeatingActivity()
{
  return &type metadata for PostbackTransmissionRepeatingActivity;
}

uint64_t sub_10004F2F0()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1001E18F8 + dword_1001E18F8);
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100012AB8;
  return v3();
}

uint64_t sub_10004F390()
{
  return _swift_task_switch(sub_10004F3AC, 0, 0);
}

uint64_t sub_10004F3AC()
{
  uint64_t v20 = v0;
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  unint64_t v1 = (void *)qword_1001E5F88;
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = [v2 sharedScheduler];
  *(void *)(v0 + 160) = &type metadata for ActivityManager;
  *(void *)(v0 + 168) = &off_1001CCE58;
  int v5 = (void *)swift_allocObject();
  *(void *)(v0 + 136) = v5;
  v5[5] = &type metadata for BackgroundSystemTaskScheduler;
  v5[6] = &off_1001C30C8;
  uint64_t v5[2] = v4;
  *(void *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &type metadata for AttributionKitCanineArbiter;
  *(void *)(v0 + 232) = &off_1001C3FF8;
  uint64_t v6 = qword_1001E0880;
  id v7 = v3;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1001E5F50;
  *(void *)(v0 + 264) = type metadata accessor for TaskGreyhound();
  *(void *)(v0 + 272) = &off_1001C2490;
  *(void *)(v0 + 240) = v8;
  *(void *)(v0 + 304) = &type metadata for LaunchServicesRecordFactory;
  *(void *)(v0 + 312) = &off_1001C6D08;
  *(void *)(v0 + 344) = &type metadata for AMSDogBag;
  *(void *)(v0 + 352) = &off_1001CAA18;
  swift_retain();
  id v9 = [v2 sharedScheduler];
  v19[3] = &type metadata for ActivityManager;
  v19[4] = &off_1001CCE58;
  uint64_t v10 = (void *)swift_allocObject();
  v19[0] = v10;
  void v10[5] = &type metadata for BackgroundSystemTaskScheduler;
  v10[6] = &off_1001C30C8;
  v10[2] = v9;
  sub_100087C5C((uint64_t)v19, v0 + 360);
  *(void *)(v0 + 432) = &type metadata for AppStoreDaemonSKANInterop;
  *(void *)(v0 + 440) = &off_1001CA740;
  int v11 = (void *)qword_1001E5F88;
  *(void *)(v0 + 472) = &type metadata for AggregatedReportingManager;
  *(void *)(v0 + 480) = &off_1001C7F28;
  __int16 v12 = (void *)swift_allocObject();
  *(void *)(v0 + 448) = v12;
  v12[8] = &type metadata for AMSDogBag;
  v12[9] = &off_1001CAA18;
  v12[13] = &type metadata for BiomeEventStreamDog;
  _OWORD v12[14] = &off_1001C8C58;
  _OWORD v12[2] = 0x74735F6E656B6F74;
  v12[3] = 0xEB0000000065726FLL;
  uint64_t v12[4] = v11;
  uint64_t v13 = qword_1001E0940;
  id v14 = v11;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1001E60E8;
  *(void *)(v0 + 512) = type metadata accessor for SnoutManager();
  *(void *)(v0 + 520) = &off_1001CB0F8;
  *(void *)(v0 + 488) = v15;
  strcpy((char *)(v0 + 16), "postback_store");
  *(unsigned char *)(v0 + 31) = -18;
  *(void *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = 0x63616274736F6867;
  *(void *)(v0 + 48) = 0xEF65726F74735F6BLL;
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 64) = 0xD000000000000010;
  *(void *)(v0 + 72) = 0x8000000100185910;
  *(void *)(v0 + 80) = v7;
  *(void *)(v0 + 88) = 0x74735F6E656B6F74;
  *(void *)(v0 + 96) = 0xEB0000000065726FLL;
  *(void *)(v0 + 104) = v7;
  *(void *)(v0 + 112) = 0xD000000000000012;
  *(void *)(v0 + 120) = 0x8000000100185930;
  *(void *)(v0 + 128) = v7;
  *(void *)(v0 + 176) = 0xD000000000000011;
  *(void *)(v0 + 184) = 0x8000000100185AE0;
  *(void *)(v0 + 192) = v7;
  swift_retain();
  Swift::Int v16 = sub_1000BE694((uint64_t)&off_1001C0670);
  *(void *)(v0 + 528) = v16;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10004F7B0;
  return sub_1000D7DB0(v16);
}

uint64_t sub_10004F7B0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10004819C, 0, 0);
}

uint64_t sub_10004F8C8()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004F900()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

unint64_t sub_10004F954()
{
  unint64_t result = qword_1001E1900;
  if (!qword_1001E1900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1900);
  }
  return result;
}

unint64_t sub_10004F9AC()
{
  unint64_t result = qword_1001E1908;
  if (!qword_1001E1908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1908);
  }
  return result;
}

uint64_t sub_10004FA00(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100050E54(&qword_1001E1958, (void (*)(uint64_t))type metadata accessor for ImpressionModel);
  uint64_t result = sub_100050E54(&qword_1001E1248, (void (*)(uint64_t))type metadata accessor for ImpressionModel);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for ImpressionModel()
{
  uint64_t result = qword_1001E19E8;
  if (!qword_1001E19E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004FAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v33 = a5;
  int v34 = a4 & 1;
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  __int16 v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a6 = 0;
  *(unsigned char *)(a6 + 8) = 1;
  uint64_t v13 = sub_100012960(&qword_1001E1380);
  uint64_t v14 = a1 + *(int *)(v13 + 52);
  uint64_t v15 = (int *)type metadata accessor for ImpressionModel();
  uint64_t v16 = a6 + v15[5];
  uint64_t v17 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v16, v14, v17);
  *(void *)(a6 + v15[6]) = a2;
  *(void *)(a6 + v15[7]) = a3;
  uint64_t v18 = type metadata accessor for AppImpressionPayload();
  uint64_t v19 = (uint64_t *)(v14 + *(int *)(v18 + 40));
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  id v22 = (void *)(a6 + v15[8]);
  void *v22 = v21;
  v22[1] = v20;
  *(void *)(a6 + v15[9]) = *(void *)(v14 + *(int *)(v18 + 32));
  *(unsigned char *)(a6 + v15[10]) = v34;
  unint64_t v23 = (uint64_t *)(a1 + *(int *)(v13 + 60));
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  __int16 v26 = (void *)(a6 + v15[11]);
  *__int16 v26 = v24;
  v26[1] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Date.now.getter();
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v29 = v28 * 1000.0;
  if ((~*(void *)&v29 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v29 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v29 < 1.84467441e19)
  {
    char v30 = v33 & 1;
    unint64_t v31 = (unint64_t)v29;
    sub_100050E9C(a1);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v32);
    *(void *)(a6 + v15[12]) = v31;
    *(unsigned char *)(a6 + v15[13]) = v30;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10004FD1C(char *a1, char *a2)
{
  return sub_100107180(*a1, *a2);
}

Swift::Int sub_10004FD28()
{
  return Hasher._finalize()();
}

uint64_t sub_10004FDA0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004FE04()
{
  return Hasher._finalize()();
}

uint64_t sub_10004FE78@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0538, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10004FED8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 2003134838;
  if (*v1) {
    uint64_t v2 = 0x6B63696C63;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10004FF0C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10004FF6C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10004FFBC(unsigned char *a1, unsigned char *a2)
{
  return *a2 & ~*a1 & 1;
}

uint64_t sub_10004FFD0(unsigned char *a1, unsigned char *a2)
{
  return *a2 & 1 | ((*a1 & 1) == 0);
}

uint64_t sub_10004FFE4(unsigned char *a1, unsigned char *a2)
{
  return *a1 & 1 | ((*a2 & 1) == 0);
}

unint64_t sub_10004FFF8(char a1)
{
  unint64_t result = 0x6973736572706D69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x6F7774656E5F6461;
      break;
    case 4:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x5F746361706D6F63;
      break;
    case 8:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100050148(char a1)
{
  unint64_t result = 0x6973736572706D69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x6F7774656E5F6461;
      break;
    case 4:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x5F746361706D6F63;
      break;
    case 8:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100050298(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E1988);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_10004F9AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = type metadata accessor for ImpressionModel();
  v11[15] = 0;
  type metadata accessor for UUID();
  sub_100050E54(&qword_1001E0D18, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    _OWORD v11[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[10] = *(unsigned char *)(v3 + *(int *)(v9 + 40));
    v11[9] = 5;
    sub_1000462F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    unsigned char v11[8] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[7] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[6] = *(unsigned char *)(v3 + *(int *)(v9 + 52));
    void v11[5] = 8;
    sub_100046408();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000505C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v27 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100012960(&qword_1001E1980);
  uint64_t v25 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for ImpressionModel();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  sub_100012D78(a1, a1[3]);
  sub_10004F9AC();
  double v28 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  uint64_t v12 = v25;
  uint64_t v11 = v26;
  char v40 = 0;
  sub_100050E54((unint64_t *)&qword_1001E0CF0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = &v10[v8[5]];
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  char v27 = (char *)v4;
  v15(v14, v13, v4);
  char v39 = 1;
  *(void *)&v10[v8[6]] = KeyedDecodingContainer.decode(_:forKey:)();
  char v38 = 2;
  *(void *)&v10[v8[7]] = KeyedDecodingContainer.decode(_:forKey:)();
  char v37 = 3;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = (uint64_t *)&v10[v8[8]];
  *uint64_t v17 = v16;
  v17[1] = v18;
  char v36 = 4;
  *(void *)&v10[v8[9]] = KeyedDecodingContainer.decode(_:forKey:)();
  char v34 = 5;
  sub_10004732C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10[v8[10]] = v35;
  char v33 = 6;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = (uint64_t *)&v10[v8[11]];
  *uint64_t v20 = v19;
  v20[1] = v21;
  char v32 = 7;
  *(void *)&v10[v8[12]] = KeyedDecodingContainer.decode(_:forKey:)();
  char v30 = 8;
  sub_1000472D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v28, v29);
  v10[v8[13]] = v31;
  sub_100045848((uint64_t)v10, v24);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  return sub_1000458AC((uint64_t)v10);
}

uint64_t sub_100050AF4(unsigned char *a1, unsigned char *a2)
{
  return *a1 & ~*a2 & 1;
}

uint64_t sub_100050B08(unsigned __int8 *a1, char *a2)
{
  return sub_10010721C(*a1, *a2);
}

Swift::Int sub_100050B14()
{
  return Hasher._finalize()();
}

uint64_t sub_100050B5C()
{
  return sub_10010A348();
}

Swift::Int sub_100050B64()
{
  return Hasher._finalize()();
}

unint64_t sub_100050BA8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100050E08(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100050BD8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10004FFF8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100050C04()
{
  return sub_100050148(*v0);
}

unint64_t sub_100050C0C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100050E08(a1);
  *a2 = result;
  return result;
}

void sub_100050C34(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void sub_100050C40(void *a1@<X8>)
{
  *a1 = &off_1001C0048;
}

uint64_t sub_100050C50(uint64_t a1)
{
  unint64_t v2 = sub_10004F9AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100050C8C(uint64_t a1)
{
  unint64_t v2 = sub_10004F9AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100050CC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000505C4(a1, a2);
}

uint64_t sub_100050CE0(void *a1)
{
  return sub_100050298(a1);
}

unint64_t sub_100050CFC()
{
  unint64_t result = qword_1001E1960;
  if (!qword_1001E1960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1960);
  }
  return result;
}

unint64_t sub_100050D54()
{
  unint64_t result = qword_1001E1968;
  if (!qword_1001E1968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1968);
  }
  return result;
}

unint64_t sub_100050DAC()
{
  unint64_t result = qword_1001E1970;
  if (!qword_1001E1970)
  {
    sub_100011ECC(&qword_1001E1978);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1970);
  }
  return result;
}

unint64_t sub_100050E08(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0698, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t sub_100050E54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100050E9C(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E1380);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for ImpressionModel.InteractionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100050FC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpressionModel.InteractionType()
{
  return &type metadata for ImpressionModel.InteractionType;
}

uint64_t getEnumTagSinglePayload for ImpressionModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ImpressionModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005115CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpressionModel.CodingKeys()
{
  return &type metadata for ImpressionModel.CodingKeys;
}

void *sub_100051194(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a3[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = a3[8];
    uint64_t v13 = a3[9];
    uint64_t v14 = (void *)((char *)v4 + v12);
    uint64_t v15 = (uint64_t *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    *(void *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v17 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    uint64_t v18 = (void *)((char *)v4 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *((unsigned char *)v4 + v21) = *((unsigned char *)a2 + v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000512E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005137C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v16 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10005147C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v14 = a3[11];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  return a1;
}

uint64_t sub_1000515B0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t sub_100051694(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[11];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  return a1;
}

uint64_t sub_10005179C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000517B0);
}

uint64_t sub_1000517B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100051878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005188C);
}

uint64_t sub_10005188C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100051950()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100051A18()
{
  unint64_t result = qword_1001E1A40;
  if (!qword_1001E1A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1A40);
  }
  return result;
}

unint64_t sub_100051A70()
{
  unint64_t result = qword_1001E1A48;
  if (!qword_1001E1A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1A48);
  }
  return result;
}

unint64_t sub_100051AC4()
{
  unint64_t result = qword_1001E1A50;
  if (!qword_1001E1A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1A50);
  }
  return result;
}

double sub_100051B18@<D0>(_OWORD *a1@<X8>)
{
  id v4 = [v1 connection];
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = [self predicateWithProperty:v5 equalToValue:v6];
  swift_unknownObjectRelease();

  id v8 = sub_10011D89C(v4, v7, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  v13[2] = &v14;
  sub_1001292A4((uint64_t)sub_100051DDC, (uint64_t)v13, v8);

  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = *(double *)&v14;
    long long v10 = v15;
    long long v11 = v16;
    long long v12 = v17;
    *a1 = v14;
    a1[1] = v10;
    a1[2] = v11;
    a1[3] = v12;
  }
  return result;
}

id sub_100051D20()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppLaunchDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppLaunchDatabaseSession()
{
  return self;
}

uint64_t sub_100051D78(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(a4 + 32) = v6;
  *(void *)(a4 + 40) = v7;
  *(void *)(a4 + 48) = v8;
  *(void *)(a4 + 56) = v9;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = 1;
  return result;
}

uint64_t sub_100051DDC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_100051D78(a1, a2, a3, *(void *)(v3 + 16));
}

char *sub_100051DE4(void *a1, void *a2)
{
  uint64_t v5 = sub_100012960(&qword_1001E1B40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection] = a1;
  long long v12 = v2;
  id v13 = a1;
  UUID.init()();
  long long v14 = &v12[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_databaseID];
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v12[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_databaseID], v11, v8);
  sub_100012960(&qword_1001E1B48);
  swift_allocObject();
  *(void *)&v12[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_dispatchKey] = DispatchSpecificKey.init()();
  *(void *)&v12[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_transactionQueue] = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v14, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  id v15 = a2;
  OS_dispatch_queue.setSpecific<A>(key:value:)();
  sub_100019960((uint64_t)v7, &qword_1001E1B40);
  *(void *)&v12[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_migratedStoreNames] = &_swiftEmptySetSingleton;

  long long v16 = (objc_class *)type metadata accessor for SQLiteDatabase();
  v22.receiver = v12;
  v22.super_class = v16;
  long long v17 = (char *)objc_msgSendSuper2(&v22, "init");
  uint64_t v18 = *(void **)&v17[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection];
  uint64_t v19 = v17;
  uint64_t v20 = v18;
  sub_10000A83C(v20, v19);

  return v19;
}

void sub_100052048(void *a1, int a2)
{
  id v4 = v2;
  uint64_t v7 = (id *)type metadata accessor for DispatchPredicate();
  uint64_t v8 = (uint64_t)*(v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v11 = *(void **)&v4[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_transactionQueue];
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, id *))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  long long v14 = *(void (**)(void *, id *))(v8 + 8);
  os_log_type_t isEscapingClosureAtFileLocation = v8 + 8;
  v14(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_8;
  }
  id v15 = (uint64_t *)&v4[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_migratedStoreNames];
  swift_beginAccess();
  uint64_t v16 = *v15;
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100012D78(a1, v17);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 24);
  swift_bridgeObjectRetain();
  uint64_t v20 = v19(v17, v18);
  LOBYTE(v17) = sub_10004017C(v20, v21, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    return;
  }
  LODWORD(v53) = a2;
  unint64_t v54 = v3;
  objc_super v22 = *(void **)&v4[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection];
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_100012D78(a1, v23);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 24);
  id v26 = v22;
  v25(v23, v24);
  char v27 = (id *)objc_allocWithZone((Class)SQLiteDatabaseStoreSchema);
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000660C(v27, v26, v28);

  char v63 = 1;
  sub_100029CD8((uint64_t)a1, (uint64_t)v62);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = &v63;
  sub_100012D60(v62, v30 + 24);
  *(void *)(v30 + 64) = v29;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_100053808;
  *(void *)(v31 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v30;
  uint64_t v60 = sub_100053828;
  uint64_t v61 = v31;
  uint64_t aBlock = _NSConcreteStackBlock;
  unint64_t v57 = 1107296256;
  int v58 = sub_100127260;
  long long v59 = &unk_1001C47E0;
  char v32 = _Block_copy(&aBlock);
  uint64_t v7 = v29;
  swift_retain();
  swift_release();
  sub_1000099D0((uint64_t)v26, v32);
  _Block_release(v32);
  os_log_type_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    goto LABEL_15;
  }
  if (v63 == 1)
  {
    if (v53)
    {
      swift_release();
    }
    else
    {
      sub_100029CD8((uint64_t)a1, (uint64_t)v62);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = v4;
      sub_100012D60(v62, v43 + 24);
      uint64_t v60 = sub_100053888;
      uint64_t v61 = v43;
      uint64_t aBlock = _NSConcreteStackBlock;
      unint64_t v57 = 1107296256;
      int v58 = sub_10002437C;
      long long v59 = &unk_1001C4830;
      uint64_t v44 = _Block_copy(&aBlock);
      long long v45 = v4;
      swift_release();
      sub_100008CB4((uint64_t)v26, v44);

      _Block_release(v44);
      swift_release();
    }
    return;
  }
  os_log_type_t isEscapingClosureAtFileLocation = static os_log_type_t.fault.getter();
  if (qword_1001E08F8 != -1) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v33 = type metadata accessor for Logger();
  sub_100012E74(v33, (uint64_t)qword_1001E6010);
  sub_100029CD8((uint64_t)a1, (uint64_t)&aBlock);
  char v34 = v7;
  char v35 = Logger.logObject.getter();
  os_log_type_t v36 = isEscapingClosureAtFileLocation;
  if (os_log_type_enabled(v35, isEscapingClosureAtFileLocation))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(void *)&v62[0] = v53;
    *(_DWORD *)uint64_t v37 = 136315394;
    unint64_t v54 = v34;
    char v39 = v59;
    char v38 = v60;
    sub_100012D78(&aBlock, (uint64_t)v59);
    uint64_t v40 = (*((uint64_t (**)(void *, uint64_t (*)()))v38 + 3))(v39, v38);
    uint64_t v55 = sub_100147668(v40, v41, (uint64_t *)v62);
    char v34 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&aBlock);
    *(_WORD *)(v37 + 12) = 2048;
    uint64_t v42 = sub_100006764((uint64_t)v34);

    uint64_t v55 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&aBlock);
  }
  uint64_t aBlock = 0;
  unint64_t v57 = 0xE000000000000000;
  long long v46 = @"AKSQLErrorDomain";
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  uint64_t aBlock = (void **)0xD000000000000013;
  unint64_t v57 = 0x8000000100185CA0;
  uint64_t v47 = a1[3];
  uint64_t v48 = a1[4];
  sub_100012D78(a1, v47);
  v49._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 24))(v47, v48);
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 0xD000000000000017;
  v50._object = (void *)0x8000000100185CC0;
  String.append(_:)(v50);
  *(void *)&v62[0] = sub_100006764((uint64_t)v34);
  v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  AKErrorWithDescription(v46, 6, v52);

  swift_willThrow();
  swift_release();
}

uint64_t sub_1000527D4(unsigned char *a1, void *a2, uint64_t a3)
{
  sub_100012D78(a2, a2[3]);
  swift_getDynamicType();
  uint64_t result = (*(uint64_t (**)(uint64_t))(a2[4] + 40))(a3) & 1;
  *a1 = result;
  return result;
}

void sub_10005284C(uint64_t a1, void *a2)
{
  sub_100052048(a2, 1);
  if (v2)
  {
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    if (qword_1001E08F8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100012E74(v5, (uint64_t)qword_1001E6010);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = v4;
    if (os_log_type_enabled(v6, v4))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain();
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to migrate after transaction: %@", v8, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    sub_100012D78(a2, v10);
    Swift::Int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
    Swift::Int v14 = v13;
    swift_beginAccess();
    sub_100026FE0(&v16, v12, v14);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100052AB8@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a2;
  char v32 = a1;
  uint64_t v33 = a3;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100012960((uint64_t *)&unk_1001E1B50);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100012960(&qword_1001E1B40);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  Swift::Int v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v28 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v28 - v18;
  sub_1000398B0();
  static OS_dispatch_queue.getSpecific<A>(key:)();
  uint64_t v30 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v17, v3 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_databaseID, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
  uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_100053900((uint64_t)v19, (uint64_t)v10);
  sub_100053900((uint64_t)v17, v20);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_100019960((uint64_t)v17, &qword_1001E1B40);
    sub_100019960((uint64_t)v19, &qword_1001E1B40);
    if (v21(v20, 1, v4) == 1)
    {
      uint64_t v22 = sub_100019960((uint64_t)v10, &qword_1001E1B40);
      return v32(v22);
    }
    goto LABEL_6;
  }
  sub_100053900((uint64_t)v10, (uint64_t)v14);
  if (v21(v20, 1, v4) == 1)
  {
    sub_100019960((uint64_t)v17, &qword_1001E1B40);
    sub_100019960((uint64_t)v19, &qword_1001E1B40);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_6:
    uint64_t v22 = sub_100019960((uint64_t)v10, (uint64_t *)&unk_1001E1B50);
    goto LABEL_9;
  }
  uint64_t v23 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v29, v20, v4);
  sub_100053990();
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v23, v4);
  sub_100019960((uint64_t)v17, &qword_1001E1B40);
  sub_100019960((uint64_t)v19, &qword_1001E1B40);
  v25(v14, v4);
  uint64_t v22 = sub_100019960((uint64_t)v10, &qword_1001E1B40);
  if (v24) {
    return v32(v22);
  }
LABEL_9:
  __chkstk_darwin(v22);
  uint64_t v27 = v31;
  *(&v28 - 2) = (uint64_t)v32;
  *(&v28 - 1) = v27;
  return OS_dispatch_queue.sync<A>(execute:)();
}

id sub_100052F38()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SQLiteDatabase();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100053020()
{
  return type metadata accessor for SQLiteDatabase();
}

uint64_t type metadata accessor for SQLiteDatabase()
{
  uint64_t result = qword_1001E1AD0;
  if (!qword_1001E1AD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100053074()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100053130(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_transactionQueue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (qword_1001E08F8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  sub_100012E74(v10, (uint64_t)qword_1001E6010);
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    Swift::Int v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = v2;
    v27[0] = v15;
    *(_DWORD *)Swift::Int v14 = 136315138;
    id v16 = (id)sub_10000A84C((uint64_t)v11);
    id v18 = sub_100006FAC(v16, v17);

    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    uint64_t v26 = sub_100147668(v19, v21, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Requiring all stores to migrate after truncating corrupt database at: %s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v25;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v22 = (void *)(v2 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_migratedStoreNames);
  swift_beginAccess();
  void *v22 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  return 1;
}

void sub_100053484(uint64_t a1)
{
  uint64_t v5 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = *(void **)(v1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_transactionQueue);
  void *v8 = v9;
  (*(void (**)(void *, void, void *))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v6 + 8))(v8, v5);
  if (v9)
  {
    id v11 = (id)sub_10000A84C(a1);
    os_log_type_t v13 = sub_100006FAC(v11, v12);

    uint64_t v8 = v13;
    uint64_t v5 = v13;
    if (!v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v2 = v14;
    uint64_t v15 = qword_1001E08F8;
    id v16 = v13;
    if (v15 == -1)
    {
LABEL_5:
      uint64_t v17 = type metadata accessor for Logger();
      sub_100012E74(v17, (uint64_t)qword_1001E6010);
      swift_bridgeObjectRetain();
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v23 = a1;
        unint64_t v21 = (uint8_t *)v20;
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)unint64_t v21 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v24 = sub_100147668(v3, v2, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Exiting after deleting corrupt database at: %s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a1 = v23;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_100008C38(a1);
      SQLiteDeleteDatabase(v5, 0);

      exit(0);
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
  goto LABEL_5;
}

uint64_t sub_1000537C8()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100053808()
{
  return sub_1000527D4(*(unsigned char **)(v0 + 16), (void *)(v0 + 24), *(void *)(v0 + 64));
}

uint64_t sub_100053818()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100053828()
{
  return sub_10002B7D4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100053830(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100053840()
{
  return swift_release();
}

uint64_t sub_100053848()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100053888()
{
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + 24;
  return sub_100052AB8((uint64_t (*)(uint64_t))sub_1000538E4, (uint64_t)&v2, v3);
}

void sub_1000538E4()
{
  sub_10005284C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100053900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100053968()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_100053990()
{
  unint64_t result = qword_1001E1B60;
  if (!qword_1001E1B60)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E1B60);
  }
  return result;
}

uint64_t sub_1000539F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[122] = v3;
  v4[121] = a3;
  v4[120] = a2;
  v4[119] = a1;
  uint64_t v5 = sub_100012960(&qword_1001E1370);
  v4[123] = v5;
  v4[124] = *(void *)(v5 - 8);
  v4[125] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v4[126] = v6;
  v4[127] = *(void *)(v6 - 8);
  v4[128] = swift_task_alloc();
  return _swift_task_switch(sub_100053B1C, 0, 0);
}

uint64_t sub_100053B1C()
{
  uint64_t v1 = *(void *)(v0 + 952);
  if (v1 < 0)
  {
    if (qword_1001E0908 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100012E74(v13, (uint64_t)qword_1001E6040);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void *)(v0 + 952);
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134217984;
      *(void *)(v0 + 920) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Could not convert itemID: %llu to required Int types", v17, 0xCu);
      swift_slowDealloc();
    }

    sub_100059ED8();
    uint64_t v18 = swift_allocError();
    *os_log_type_t v19 = 0;
    swift_willThrow();
    *(void *)(v0 + 1128) = v18;
    uint64_t v20 = *(void *)(v0 + 976);
    uint64_t v21 = *(void *)(v0 + 968);
    uint64_t v22 = *(void *)(v0 + 960);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_10009485C(0, 0, v18, v22, v21, 0, 2, 2, (_OWORD *)(v0 + 648), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      2u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v23 = *(_OWORD *)(v0 + 792);
    *(_OWORD *)(v0 + 584) = *(_OWORD *)(v0 + 776);
    *(_OWORD *)(v0 + 600) = v23;
    *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 808);
    *(_OWORD *)(v0 + 625) = *(_OWORD *)(v0 + 817);
    long long v24 = *(_OWORD *)(v0 + 728);
    *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 712);
    *(_OWORD *)(v0 + 536) = v24;
    long long v25 = *(_OWORD *)(v0 + 760);
    *(_OWORD *)(v0 + 552) = *(_OWORD *)(v0 + 744);
    *(_OWORD *)(v0 + 568) = v25;
    long long v26 = *(_OWORD *)(v0 + 664);
    *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 648);
    *(_OWORD *)(v0 + 472) = v26;
    long long v27 = *(_OWORD *)(v0 + 696);
    *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 680);
    *(_OWORD *)(v0 + 504) = v27;
    uint64_t v28 = sub_100012D78((void *)(v20 + 184), *(void *)(v20 + 208));
    uint64_t v29 = *v28;
    *(void *)(v0 + 1136) = *v28;
    return _swift_task_switch(sub_100054A68, v29, 0);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 976);
    id v3 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v1];
    id v4 = [self _requestWithID:v3 kind:ASCLockupKindApp context:ASCLockupContextStandard enableAppDistribution:1];
    *(void *)(v0 + 1032) = v4;

    sub_100012D78((void *)(v2 + 24), *(void *)(v2 + 48));
    sub_100012960(&qword_1001E1BB0);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100178B40;
    uint64_t v6 = (void *)_ASCLockupKeyDistributorBundleId;
    *(void *)(v5 + 32) = _ASCLockupKeyDistributorBundleId;
    *(void *)(v0 + 1040) = v6;
    uint64_t v7 = (void *)_ASCLockupKeyAppVersionId;
    *(void *)(v0 + 1048) = _ASCLockupKeyAppVersionId;
    *(void *)(v5 + 40) = v7;
    id v8 = v6;
    id v9 = v7;
    id v10 = sub_1000BE064(v5);
    *(void *)(v0 + 1056) = v10;
    swift_setDeallocating();
    type metadata accessor for _ASCLockupKey(0);
    swift_arrayDestroy();
    swift_deallocClassInstance();
    id v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 1064) = v11;
    *id v11 = v0;
    v11[1] = sub_100053F34;
    return sub_100024E48((uint64_t)v4, (uint64_t)v10);
  }
}

uint64_t sub_100053F34(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1072) = a1;
  *(void *)(v3 + 1080) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v4 = sub_100054610;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v4 = sub_100054054;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100054054()
{
  uint64_t v41 = v0;
  uint64_t v1 = (_OWORD *)(v0 + 872);
  uint64_t v2 = *(void *)(v0 + 1072);
  if (!*(void *)(v2 + 16))
  {
    *uint64_t v1 = 0u;
    *(_OWORD *)(v0 + 888) = 0u;
    goto LABEL_12;
  }
  unint64_t v3 = sub_1000AF274((uint64_t)*(id *)(v0 + 1040));
  if ((v4 & 1) == 0)
  {
    id v9 = *(void **)(v0 + 1040);
    *uint64_t v1 = 0u;
    *(_OWORD *)(v0 + 888) = 0u;

    goto LABEL_12;
  }
  uint64_t v5 = *(void **)(v0 + 1040);
  sub_10003742C(*(void *)(*(void *)(v0 + 1072) + 56) + 32 * v3, v0 + 872);

  if (!*(void *)(v0 + 896))
  {
LABEL_12:
    sub_100019960(v0 + 872, &qword_1001E1BB8);
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    goto LABEL_13;
  }
  int v6 = swift_dynamicCast();
  if (v6) {
    uint64_t v7 = *(uint8_t **)(v0 + 904);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    unint64_t v8 = *(void *)(v0 + 912);
  }
  else {
    unint64_t v8 = 0;
  }
LABEL_13:
  id v10 = (_OWORD *)(v0 + 840);
  if (*(void *)(v2 + 16))
  {
    unint64_t v11 = sub_1000AF274((uint64_t)*(id *)(v0 + 1048));
    if (v12)
    {
      uint64_t v13 = *(void **)(v0 + 1048);
      sub_10003742C(*(void *)(*(void *)(v0 + 1072) + 56) + 32 * v11, v0 + 840);
    }
    else
    {
      unint64_t v14 = *(void **)(v0 + 1048);
      *id v10 = 0u;
      *(_OWORD *)(v0 + 856) = 0u;
    }
  }
  else
  {
    *id v10 = 0u;
    *(_OWORD *)(v0 + 856) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 864))
  {
    sub_100019960(v0 + 840, &qword_1001E1BB8);
    uint64_t v16 = 0;
    char v17 = 1;
    if (v8) {
      goto LABEL_23;
    }
LABEL_27:
    if (qword_1001E0908 != -1) {
      swift_once();
    }
    uint64_t v38 = 0xD000000000000012;
    uint64_t v23 = type metadata accessor for Logger();
    sub_100012E74(v23, (uint64_t)qword_1001E6040);
    long long v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No distributor bundle ID received from app fetch", v7, 2u);
      swift_slowDealloc();
    }

    unint64_t v8 = 0x8000000100185D10;
    goto LABEL_34;
  }
  int v15 = swift_dynamicCast();
  if (v15) {
    uint64_t v16 = *(void *)(v0 + 936);
  }
  else {
    uint64_t v16 = 0;
  }
  char v17 = v15 ^ 1;
  if (!v8) {
    goto LABEL_27;
  }
LABEL_23:
  uint64_t v18 = qword_1001E0908;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v38 = (uint64_t)v7;
    uint64_t v19 = type metadata accessor for Logger();
    sub_100012E74(v19, (uint64_t)qword_1001E6040);
    swift_bridgeObjectRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v7 = v22 + 4;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 928) = sub_100147668(v38, v8, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received distributor bundle ID '%s' from app fetch", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

LABEL_34:
    static Date.now.getter();
    Date.timeIntervalSince1970.getter();
    double v27 = v26 * 1000.0;
    if ((~*(void *)&v27 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v27 <= -1.0) {
      goto LABEL_41;
    }
    if (v27 < 1.84467441e19) {
      break;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    swift_once();
  }
  uint64_t v28 = *(uint64_t **)(v0 + 976);
  uint64_t v29 = *(void *)(v0 + 952);
  unint64_t v30 = (unint64_t)v27;
  (*(void (**)(void, void))(*(void *)(v0 + 1016) + 8))(*(void *)(v0 + 1024), *(void *)(v0 + 1008));
  *(unsigned char *)(v0 + 1152) = 1;
  *(unsigned char *)(v0 + 1144) = v17;
  uint64_t v31 = *v28;
  uint64_t v32 = v28[1];
  *(void *)(v0 + 1088) = v32;
  uint64_t v33 = (void *)v28[2];
  *(void *)(v0 + 1096) = v33;
  uint64_t v34 = swift_allocObject();
  *(void *)(v0 + 1104) = v34;
  *(void *)(v34 + 16) = 0;
  *(unsigned char *)(v34 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v0 + 1152);
  *(_DWORD *)(v34 + 25) = *(_DWORD *)(v0 + 233);
  *(_DWORD *)(v34 + 28) = *(_DWORD *)(v0 + 236);
  *(void *)(v34 + 32) = v29;
  *(void *)(v34 + 40) = v38;
  *(void *)(v34 + 48) = v8;
  *(void *)(v34 + 56) = v16;
  *(unsigned char *)(v34 + 64) = *(unsigned char *)(v0 + 1144);
  *(_DWORD *)(v34 + 65) = *(_DWORD *)(v0 + 226);
  *(_DWORD *)(v34 + 68) = *(_DWORD *)(v0 + 229);
  char v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4928
                                                                                     + dword_1001E4928);
  *(void *)(v34 + 72) = v30;
  swift_bridgeObjectRetain();
  id v35 = v33;
  os_log_type_t v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 1112) = v36;
  *os_log_type_t v36 = v0;
  v36[1] = sub_100054788;
  return v39((uint64_t)v39, (uint64_t)sub_10005A044, v34, v31, v32, (uint64_t)v35);
}

uint64_t sub_100054610()
{
  uint64_t v1 = *(void **)(v0 + 1032);
  swift_bridgeObjectRelease();

  uint64_t v2 = *(void *)(v0 + 1080);
  *(void *)(v0 + 1128) = v2;
  uint64_t v3 = *(void *)(v0 + 976);
  uint64_t v4 = *(void *)(v0 + 968);
  uint64_t v5 = *(void *)(v0 + 960);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(0, 0, v2, v5, v4, 0, 2, 2, (_OWORD *)(v0 + 648), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v6 = *(_OWORD *)(v0 + 792);
  *(_OWORD *)(v0 + 584) = *(_OWORD *)(v0 + 776);
  *(_OWORD *)(v0 + 600) = v6;
  *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 808);
  *(_OWORD *)(v0 + 625) = *(_OWORD *)(v0 + 817);
  long long v7 = *(_OWORD *)(v0 + 728);
  *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 712);
  *(_OWORD *)(v0 + 536) = v7;
  long long v8 = *(_OWORD *)(v0 + 760);
  *(_OWORD *)(v0 + 552) = *(_OWORD *)(v0 + 744);
  *(_OWORD *)(v0 + 568) = v8;
  long long v9 = *(_OWORD *)(v0 + 664);
  *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 648);
  *(_OWORD *)(v0 + 472) = v9;
  long long v10 = *(_OWORD *)(v0 + 696);
  *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 680);
  *(_OWORD *)(v0 + 504) = v10;
  unint64_t v11 = sub_100012D78((void *)(v3 + 184), *(void *)(v3 + 208));
  uint64_t v12 = *v11;
  *(void *)(v0 + 1136) = *v11;
  return _swift_task_switch(sub_100054A68, v12, 0);
}

uint64_t sub_100054788()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 1096);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_100054C30;
  }
  else {
    uint64_t v4 = sub_1000548F0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000548F0()
{
  if (qword_1001E0908 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6040);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 952);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v0 + 944) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Distributor metadata cached for item ID %llu", v5, 0xCu);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100054A68()
{
  uint64_t v1 = *(void *)(v0 + 1000);
  uint64_t v2 = *(void *)(v0 + 992);
  uint64_t v3 = *(void *)(v0 + 984);
  uint64_t v4 = *(void *)(v0 + 952);
  long long v5 = *(_OWORD *)(v0 + 600);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 384) = v5;
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 616);
  *(_OWORD *)(v0 + 409) = *(_OWORD *)(v0 + 625);
  long long v6 = *(_OWORD *)(v0 + 536);
  *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 520);
  *(_OWORD *)(v0 + 320) = v6;
  long long v7 = *(_OWORD *)(v0 + 568);
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 552);
  *(_OWORD *)(v0 + 352) = v7;
  long long v8 = *(_OWORD *)(v0 + 472);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 456);
  *(_OWORD *)(v0 + 256) = v8;
  long long v9 = *(_OWORD *)(v0 + 504);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 488);
  *(_OWORD *)(v0 + 288) = v9;
  *(void *)(v0 + 432) = v4;
  *(void *)(v0 + 440) = 0;
  *(_WORD *)(v0 + 448) = 256;
  sub_10003675C(v0 + 240);
  sub_1000367C8(v0 + 240, v0 + 16);
  sub_10001547C(v0 + 648);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 648);
  return _swift_task_switch(sub_100054BAC, 0, 0);
}

uint64_t sub_100054BAC()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100054C30()
{
  uint64_t v1 = *(void *)(v0 + 1120);
  *(void *)(v0 + 1128) = v1;
  uint64_t v2 = *(void *)(v0 + 976);
  uint64_t v3 = *(void *)(v0 + 968);
  uint64_t v4 = *(void *)(v0 + 960);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(0, 0, v1, v4, v3, 0, 2, 2, (_OWORD *)(v0 + 648), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v5 = *(_OWORD *)(v0 + 792);
  *(_OWORD *)(v0 + 584) = *(_OWORD *)(v0 + 776);
  *(_OWORD *)(v0 + 600) = v5;
  *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 808);
  *(_OWORD *)(v0 + 625) = *(_OWORD *)(v0 + 817);
  long long v6 = *(_OWORD *)(v0 + 728);
  *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 712);
  *(_OWORD *)(v0 + 536) = v6;
  long long v7 = *(_OWORD *)(v0 + 760);
  *(_OWORD *)(v0 + 552) = *(_OWORD *)(v0 + 744);
  *(_OWORD *)(v0 + 568) = v7;
  long long v8 = *(_OWORD *)(v0 + 664);
  *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 648);
  *(_OWORD *)(v0 + 472) = v8;
  long long v9 = *(_OWORD *)(v0 + 696);
  *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 680);
  *(_OWORD *)(v0 + 504) = v9;
  long long v10 = sub_100012D78((void *)(v2 + 184), *(void *)(v2 + 208));
  uint64_t v11 = *v10;
  *(void *)(v0 + 1136) = *v10;
  return _swift_task_switch(sub_100054A68, v11, 0);
}

uint64_t sub_100054DA0(uint64_t a1)
{
  v2[123] = v1;
  v2[122] = a1;
  uint64_t v3 = sub_100012960(&qword_1001E1370);
  v2[124] = v3;
  v2[125] = *(void *)(v3 - 8);
  v2[126] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[127] = v4;
  v2[128] = *(void *)(v4 - 8);
  v2[129] = swift_task_alloc();
  v2[130] = swift_task_alloc();
  return _swift_task_switch(sub_100054ED4, 0, 0);
}

uint64_t sub_100054ED4()
{
  uint64_t v1 = (uint64_t *)v0[123];
  uint64_t v2 = v0[122];
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  v0[131] = v4;
  long long v5 = (void *)v1[2];
  v0[132] = v5;
  uint64_t v6 = swift_allocObject();
  v0[133] = v6;
  *(void *)(v6 + 16) = v2;
  long long v10 = (char *)&dword_1001E4828 + dword_1001E4828;
  swift_bridgeObjectRetain();
  id v7 = v5;
  long long v8 = (void *)swift_task_alloc();
  v0[134] = v8;
  void *v8 = v0;
  v8[1] = sub_100055004;
  return ((uint64_t (*)(void *, void (*)(uint64_t@<X8>), uint64_t, uint64_t, uint64_t, id))v10)(v0 + 112, sub_10005A640, v6, v3, v4, v7);
}

uint64_t sub_100055004()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1080) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 1056);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_100055784;
  }
  else {
    uint64_t v4 = sub_10005516C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10005516C()
{
  sub_100059F98(v0 + 896, v0 + 832, &qword_1001E1B70);
  if (*(void *)(v0 + 864))
  {
    uint64_t v1 = *(void *)(v0 + 1040);
    uint64_t v2 = *(void *)(v0 + 1032);
    uint64_t v3 = *(void *)(v0 + 1024);
    uint64_t v4 = *(void *)(v0 + 1016);
    Date.init(timeIntervalSince1970:)();
    sub_100059F2C(v0 + 896);
    Date.init(timeIntervalSinceNow:)();
    char v5 = static Date.> infix(_:_:)();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v6(v2, v4);
    v6(v1, v4);
    if (v5)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v7 = *(uint64_t (**)(void))(v0 + 8);
      return v7();
    }
    char v9 = 4;
  }
  else
  {
    char v9 = 2;
  }
  sub_100059ED8();
  uint64_t v10 = swift_allocError();
  *uint64_t v11 = v9;
  swift_willThrow();
  *(void *)(v0 + 1088) = v10;
  if (qword_1001E0908 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100012E74(v12, (uint64_t)qword_1001E6040);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = *(void *)(v0 + 976);
    uint64_t v16 = swift_slowAlloc();
    char v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134218242;
    *(void *)(v0 + 960) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2112;
    swift_errorRetain();
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 968) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v17 = v18;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Encountered error while validating distributor metadata for app %llu, error: %@", (uint8_t *)v16, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v19 = *(void *)(v0 + 984);

  swift_errorRetain();
  sub_10009485C(3, 3, v10, 0, 0, 0, 2, 1, (_OWORD *)(v0 + 640), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v20 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 592) = v20;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 800);
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 809);
  long long v21 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 528) = v21;
  long long v22 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 560) = v22;
  long long v23 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 464) = v23;
  long long v24 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 496) = v24;
  os_log_type_t v25 = sub_100012D78((void *)(v19 + 184), *(void *)(v19 + 208));
  uint64_t v26 = *v25;
  *(void *)(v0 + 1096) = *v25;
  return _swift_task_switch(sub_1000555A4, v26, 0);
}

uint64_t sub_1000555A4()
{
  uint64_t v1 = *(void *)(v0 + 1008);
  uint64_t v2 = *(void *)(v0 + 1000);
  uint64_t v3 = *(void *)(v0 + 992);
  uint64_t v4 = *(void *)(v0 + 976);
  long long v5 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 376) = v5;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 608);
  long long v6 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 312) = v6;
  long long v7 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 344) = v7;
  long long v8 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 248) = v8;
  long long v9 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 280) = v9;
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 617);
  *(void *)(v0 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(v0 + 432) = 0;
  *(_WORD *)(v0 + 440) = 256;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 16);
  sub_10001547C(v0 + 640);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 640);
  return _swift_task_switch(sub_1000556EC, 0, 0);
}

uint64_t sub_1000556EC()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100055784()
{
  uint64_t v1 = *(void *)(v0 + 1080);
  *(void *)(v0 + 1088) = v1;
  if (qword_1001E0908 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E6040);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 976);
    uint64_t v6 = swift_slowAlloc();
    long long v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134218242;
    *(void *)(v0 + 960) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 968) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Encountered error while validating distributor metadata for app %llu, error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = *(void *)(v0 + 984);

  swift_errorRetain();
  sub_10009485C(3, 3, v1, 0, 0, 0, 2, 1, (_OWORD *)(v0 + 640), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v10 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 592) = v10;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 800);
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 809);
  long long v11 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 528) = v11;
  long long v12 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 560) = v12;
  long long v13 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 464) = v13;
  long long v14 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 496) = v14;
  uint64_t v15 = sub_100012D78((void *)(v9 + 184), *(void *)(v9 + 208));
  uint64_t v16 = *v15;
  *(void *)(v0 + 1096) = *v15;
  return _swift_task_switch(sub_1000555A4, v16, 0);
}

uint64_t sub_100055A74(uint64_t a1, uint64_t a2)
{
  v3[457] = v2;
  v3[456] = a2;
  v3[455] = a1;
  uint64_t v4 = sub_100012960(&qword_1001E1370);
  v3[458] = v4;
  v3[459] = *(void *)(v4 - 8);
  v3[460] = swift_task_alloc();
  sub_100012960(&qword_1001E1170);
  v3[461] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v3[462] = v5;
  v3[463] = *(void *)(v5 - 8);
  v3[464] = swift_task_alloc();
  return _swift_task_switch(sub_100055BF8, 0, 0);
}

uint64_t sub_100055BF8()
{
  uint64_t v1 = (uint64_t *)v0[457];
  uint64_t v2 = v0[455];
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  v0[465] = v3;
  uint64_t v5 = (void *)v1[2];
  v0[466] = v5;
  uint64_t v6 = swift_allocObject();
  v0[467] = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v7 = dword_1001E4828;
  swift_bridgeObjectRetain();
  id v8 = v5;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[468] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100055D54;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4828 + v7))((uint64_t)(v0 + 418), (uint64_t)sub_100059080, v6, v4, v3, (uint64_t)v8);
}

uint64_t sub_100055D54()
{
  uint64_t v2 = (void *)*v1;
  v2[469] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)v2[466];
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v4 = sub_100057AF4;
  }
  else
  {
    v2[470] = v2[422];
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v4 = sub_100055F08;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100055F08()
{
  sub_100059F98(v0 + 3344, v0 + 3280, &qword_1001E1B70);
  uint64_t v1 = *(void *)(v0 + 3312);
  *(void *)(v0 + 3768) = v1;
  if (!v1)
  {
    if (qword_1001E0908 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100012E74(v8, (uint64_t)qword_1001E6040);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = *(void *)(v0 + 3640);
      long long v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)long long v12 = 134217984;
      *(void *)(v0 + 3608) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to retrieve app distributor metadata for itemID: %llu", v12, 0xCu);
      swift_slowDealloc();
    }

    sub_100059ED8();
    uint64_t v13 = swift_allocError();
    *long long v14 = 2;
    swift_willThrow();
    *(void *)(v0 + 3872) = v13;
    uint64_t v15 = *(void *)(v0 + 3656);
    swift_errorRetain();
    sub_10009485C(3, 3, v13, 0, 0, 0, 2, 1, (_OWORD *)(v0 + 2320), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      2u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 2448);
    *(_OWORD *)(v0 + 1888) = *(_OWORD *)(v0 + 2464);
    *(_OWORD *)(v0 + 1904) = *(_OWORD *)(v0 + 2480);
    *(_OWORD *)(v0 + 1913) = *(_OWORD *)(v0 + 2489);
    *(_OWORD *)(v0 + 1808) = *(_OWORD *)(v0 + 2384);
    *(_OWORD *)(v0 + 18++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 2400);
    *(_OWORD *)(v0 + 1840) = *(_OWORD *)(v0 + 2416);
    *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 2432);
    *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 2320);
    *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 2336);
    *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 2352);
    *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 2368);
    uint64_t v16 = sub_100012D78((void *)(v15 + 184), *(void *)(v15 + 208));
    uint64_t v17 = *v16;
    *(void *)(v0 + 3880) = *v16;
    uint64_t v18 = sub_1000578A8;
    goto LABEL_38;
  }
  uint64_t v2 = *(void *)(v0 + 3640);
  *(void *)(v0 + 3776) = *(void *)(v0 + 3304);
  *(void *)(v0 + 3784) = *(void *)(v0 + 3320);
  *(unsigned char *)(v0 + 3920) = *(unsigned char *)(v0 + 3328);
  *(_OWORD *)(v0 + 3528) = 0u;
  *(_OWORD *)(v0 + 3544) = 0u;
  *(void *)(v0 + 3560) = 0;
  id v3 = objc_allocWithZone((Class)LSApplicationRecord);
  *(void *)(v0 + 3600) = 0;
  id v4 = [v3 initWithStoreItemIdentifier:v2 error:v0 + 3600];
  uint64_t v5 = *(void **)(v0 + 3600);
  if (v4)
  {
    id v6 = v4;
    *(void *)(v0 + 3432) = sub_100059F58();
    *(void *)(v0 + 3440) = &off_1001C8F18;
    *(void *)(v0 + 3408) = v6;
    id v7 = v5;
    sub_100019960(v0 + 3528, &qword_1001E1398);
    sub_100059F98(v0 + 3408, v0 + 3528, &qword_1001E1398);
    goto LABEL_11;
  }
  id v19 = v5;
  uint64_t v20 = _convertNSErrorToError(_:)();
  *(void *)(v0 + 3792) = v20;

  swift_willThrow();
  long long v21 = (void *)_convertErrorToNSError(_:)();
  id v22 = [v21 code];

  if (v22 != (id)-10814)
  {
    if (qword_1001E0908 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100012E74(v55, (uint64_t)qword_1001E6040);
    swift_errorRetain();
    swift_errorRetain();
    id v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = *(void *)(v0 + 3640);
      uint64_t v59 = swift_slowAlloc();
      uint64_t v60 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 134218242;
      *(void *)(v0 + 3632) = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v59 + 12) = 2112;
      swift_errorRetain();
      uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 3592) = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v60 = v61;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unexpected error fetching LSApplicationRecord for itemID: %llu, error: %@", (uint8_t *)v59, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v62 = *(void *)(v0 + 3656);

    swift_errorRetain();
    sub_10009485C(3, 3, v20, 0, 0, 0, 2, 1, (_OWORD *)(v0 + 2896), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      2u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    *(_OWORD *)(v0 + 3216) = *(_OWORD *)(v0 + 3024);
    *(_OWORD *)(v0 + 3232) = *(_OWORD *)(v0 + 3040);
    *(_OWORD *)(v0 + 3248) = *(_OWORD *)(v0 + 3056);
    *(_OWORD *)(v0 + 3257) = *(_OWORD *)(v0 + 3065);
    *(_OWORD *)(v0 + 3152) = *(_OWORD *)(v0 + 2960);
    *(_OWORD *)(v0 + 3168) = *(_OWORD *)(v0 + 2976);
    *(_OWORD *)(v0 + 3184) = *(_OWORD *)(v0 + 2992);
    *(_OWORD *)(v0 + 3200) = *(_OWORD *)(v0 + 3008);
    *(_OWORD *)(v0 + 3088) = *(_OWORD *)(v0 + 2896);
    *(_OWORD *)(v0 + 3104) = *(_OWORD *)(v0 + 2912);
    *(_OWORD *)(v0 + 3120) = *(_OWORD *)(v0 + 2928);
    *(_OWORD *)(v0 + 3136) = *(_OWORD *)(v0 + 2944);
    char v63 = sub_100012D78((void *)(v62 + 184), *(void *)(v62 + 208));
    uint64_t v17 = *v63;
    *(void *)(v0 + 3888) = *v63;
    uint64_t v18 = sub_100057C98;
LABEL_38:
    uint64_t v34 = v18;
LABEL_39:
    return _swift_task_switch(v34, v17, 0);
  }
  swift_errorRelease();
LABEL_11:
  sub_100036994(v0 + 3528, v0 + 3488, &qword_1001E1398);
  if (*(void *)(v0 + 3512))
  {
    uint64_t v23 = *(void *)(v0 + 3704);
    uint64_t v24 = *(void *)(v0 + 3696);
    uint64_t v25 = *(void *)(v0 + 3688);
    uint64_t v26 = *(void *)(v0 + 3648);
    sub_100059F2C(v0 + 3344);
    sub_100012D60((long long *)(v0 + 3488), v0 + 3448);
    sub_100036994(v26, v25, &qword_1001E1170);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
    {
      sub_100019960(*(void *)(v0 + 3688), &qword_1001E1170);
      if (qword_1001E0908 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100012E74(v27, (uint64_t)qword_1001E6040);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = *(void *)(v0 + 3640);
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 134217984;
        *(void *)(v0 + 3584) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Launching itemID: %llu", v31, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 38++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v32;
      void *v32 = v0;
      v32[1] = sub_100056E34;
      uint64_t v33 = *(void *)(v0 + 3656);
      v32[5] = *(void *)(v0 + 3640);
      v32[6] = v33;
      void v32[4] = v0 + 3448;
      uint64_t v34 = sub_100059980;
      uint64_t v17 = 0;
      goto LABEL_39;
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 3704) + 32))(*(void *)(v0 + 3712), *(void *)(v0 + 3688), *(void *)(v0 + 3696));
    if (qword_1001E0908 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    *(void *)(v0 + 3800) = sub_100012E74(v46, (uint64_t)qword_1001E6040);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = *(void *)(v0 + 3640);
      Swift::String v50 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::String v50 = 134217984;
      *(void *)(v0 + 36++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Opening universal link for app: %llu", v50, 0xCu);
      swift_slowDealloc();
    }

    Swift::String v51 = (void *)swift_task_alloc();
    *(void *)(v0 + 3808) = v51;
    *Swift::String v51 = v0;
    v51[1] = sub_100056B44;
    uint64_t v52 = *(void *)(v0 + 3712);
    v51[28] = *(void *)(v0 + 3640);
    uint64_t v53 = dword_1001E30A8;
    unint64_t v54 = (void *)swift_task_alloc();
    v51[29] = v54;
    *unint64_t v54 = v51;
    v54[1] = sub_100059148;
    return ((uint64_t (*)(uint64_t))((char *)&dword_1001E30A8 + v53))(v52);
  }
  else
  {
    sub_100019960(v0 + 3488, &qword_1001E1398);
    if (qword_1001E0908 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    *(void *)(v0 + 3840) = sub_100012E74(v35, (uint64_t)qword_1001E6040);
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = *(void *)(v0 + 3640);
      char v39 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v39 = 134217984;
      *(void *)(v0 + 3576) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Launching distributor for itemID: %llu", v39, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v40 = *(void *)(v0 + 3768);

    uint64_t v41 = *(unsigned __int8 *)(v0 + 3920);
    swift_bridgeObjectRetain();
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 3848) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_100057108;
    uint64_t v43 = *(void *)(v0 + 3784);
    uint64_t v44 = *(void *)(v0 + 3776);
    uint64_t v45 = *(void *)(v0 + 3640);
    return static AppDistributor.requestProductPage(_:itemID:versionID:)(v44, v40, v45, v43, v41);
  }
}

uint64_t sub_100056B44()
{
  *(void *)(*(void *)v1 + 3816) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100058430;
  }
  else {
    uint64_t v2 = sub_100056C84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100056C84()
{
  (*(void (**)(void, void))(*(void *)(v0 + 3704) + 8))(*(void *)(v0 + 3712), *(void *)(v0 + 3696));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 3448);
  uint64_t v1 = *(void *)(v0 + 3656);
  sub_10009485C(3, 7, 0, 0, 0, 0, 0, 1, (_OWORD *)(v0 + 2128), 2u, 0, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 2064) = *(_OWORD *)(v0 + 2256);
  *(_OWORD *)(v0 + 2080) = *(_OWORD *)(v0 + 2272);
  *(_OWORD *)(v0 + 2096) = *(_OWORD *)(v0 + 2288);
  *(_OWORD *)(v0 + 2105) = *(_OWORD *)(v0 + 2297);
  *(_OWORD *)(v0 + 2000) = *(_OWORD *)(v0 + 2192);
  *(_OWORD *)(v0 + 2016) = *(_OWORD *)(v0 + 2208);
  *(_OWORD *)(v0 + 2032) = *(_OWORD *)(v0 + 2224);
  *(_OWORD *)(v0 + 2048) = *(_OWORD *)(v0 + 2240);
  *(_OWORD *)(v0 + 1936) = *(_OWORD *)(v0 + 2128);
  *(_OWORD *)(v0 + 1952) = *(_OWORD *)(v0 + 2144);
  *(_OWORD *)(v0 + 1968) = *(_OWORD *)(v0 + 2160);
  *(_OWORD *)(v0 + 1984) = *(_OWORD *)(v0 + 2176);
  uint64_t v2 = sub_100012D78((void *)(v1 + 184), *(void *)(v1 + 208));
  uint64_t v3 = *v2;
  *(void *)(v0 + 3864) = *v2;
  return _swift_task_switch(sub_10005765C, v3, 0);
}

uint64_t sub_100056E34()
{
  *(void *)(*(void *)v1 + 3832) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100058DEC;
  }
  else {
    uint64_t v2 = sub_100056F74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100056F74()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 3448);
  uint64_t v1 = *(void *)(v0 + 3656);
  sub_10009485C(3, 7, 0, 0, 0, 0, 0, 1, (_OWORD *)(v0 + 2128), 2u, 1u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 2064) = *(_OWORD *)(v0 + 2256);
  *(_OWORD *)(v0 + 2080) = *(_OWORD *)(v0 + 2272);
  *(_OWORD *)(v0 + 2096) = *(_OWORD *)(v0 + 2288);
  *(_OWORD *)(v0 + 2105) = *(_OWORD *)(v0 + 2297);
  *(_OWORD *)(v0 + 2000) = *(_OWORD *)(v0 + 2192);
  *(_OWORD *)(v0 + 2016) = *(_OWORD *)(v0 + 2208);
  *(_OWORD *)(v0 + 2032) = *(_OWORD *)(v0 + 2224);
  *(_OWORD *)(v0 + 2048) = *(_OWORD *)(v0 + 2240);
  *(_OWORD *)(v0 + 1936) = *(_OWORD *)(v0 + 2128);
  *(_OWORD *)(v0 + 1952) = *(_OWORD *)(v0 + 2144);
  *(_OWORD *)(v0 + 1968) = *(_OWORD *)(v0 + 2160);
  *(_OWORD *)(v0 + 1984) = *(_OWORD *)(v0 + 2176);
  uint64_t v2 = sub_100012D78((void *)(v1 + 184), *(void *)(v1 + 208));
  uint64_t v3 = *v2;
  *(void *)(v0 + 3864) = *v2;
  return _swift_task_switch(sub_10005765C, v3, 0);
}

uint64_t sub_100057108()
{
  uint64_t v2 = *(void *)v1 + 3344;
  *(void *)(*(void *)v1 + 3856) = v0;
  swift_task_dealloc();
  sub_100059F2C(v2);
  if (v0)
  {
    uint64_t v3 = sub_10005749C;
  }
  else
  {
    sub_100059F2C(v2);
    uint64_t v3 = sub_100057264;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100057264()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 3640);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    *(void *)(v0 + 3568) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Distributor launch completed for item ID: %llu", v4, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v5 = *(void *)(v0 + 3656);
  sub_10009485C(3, 7, 0, 0, 0, 0, 1, 1, (_OWORD *)(v0 + 2128), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 2064) = *(_OWORD *)(v0 + 2256);
  *(_OWORD *)(v0 + 2080) = *(_OWORD *)(v0 + 2272);
  *(_OWORD *)(v0 + 2096) = *(_OWORD *)(v0 + 2288);
  *(_OWORD *)(v0 + 2105) = *(_OWORD *)(v0 + 2297);
  *(_OWORD *)(v0 + 2000) = *(_OWORD *)(v0 + 2192);
  *(_OWORD *)(v0 + 2016) = *(_OWORD *)(v0 + 2208);
  *(_OWORD *)(v0 + 2032) = *(_OWORD *)(v0 + 2224);
  *(_OWORD *)(v0 + 2048) = *(_OWORD *)(v0 + 2240);
  *(_OWORD *)(v0 + 1936) = *(_OWORD *)(v0 + 2128);
  *(_OWORD *)(v0 + 1952) = *(_OWORD *)(v0 + 2144);
  *(_OWORD *)(v0 + 1968) = *(_OWORD *)(v0 + 2160);
  *(_OWORD *)(v0 + 1984) = *(_OWORD *)(v0 + 2176);
  id v6 = sub_100012D78((void *)(v5 + 184), *(void *)(v5 + 208));
  uint64_t v7 = *v6;
  *(void *)(v0 + 3864) = *v6;
  return _swift_task_switch(sub_10005765C, v7, 0);
}

uint64_t sub_10005749C()
{
  sub_100059F2C(v0 + 3344);
  sub_100019960(v0 + 3528, &qword_1001E1398);
  uint64_t v1 = *(void *)(v0 + 3856);
  *(void *)(v0 + 3872) = v1;
  uint64_t v2 = *(void *)(v0 + 3656);
  swift_errorRetain();
  sub_10009485C(3, 3, v1, 0, 0, 0, 1, 1, (_OWORD *)(v0 + 2320), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 2448);
  *(_OWORD *)(v0 + 1888) = *(_OWORD *)(v0 + 2464);
  *(_OWORD *)(v0 + 1904) = *(_OWORD *)(v0 + 2480);
  *(_OWORD *)(v0 + 1913) = *(_OWORD *)(v0 + 2489);
  *(_OWORD *)(v0 + 1808) = *(_OWORD *)(v0 + 2384);
  *(_OWORD *)(v0 + 18++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 2400);
  *(_OWORD *)(v0 + 1840) = *(_OWORD *)(v0 + 2416);
  *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 2432);
  *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 2320);
  *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 2336);
  *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 2352);
  *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 2368);
  uint64_t v3 = sub_100012D78((void *)(v2 + 184), *(void *)(v2 + 208));
  uint64_t v4 = *v3;
  *(void *)(v0 + 3880) = *v3;
  return _swift_task_switch(sub_1000578A8, v4, 0);
}

uint64_t sub_10005765C()
{
  uint64_t v1 = *(void *)(v0 + 3680);
  uint64_t v2 = *(void *)(v0 + 3672);
  uint64_t v3 = *(void *)(v0 + 3664);
  uint64_t v4 = *(void *)(v0 + 3640);
  long long v5 = *(_OWORD *)(v0 + 2080);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 2064);
  *(_OWORD *)(v0 + 376) = v5;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 2096);
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 2105);
  long long v6 = *(_OWORD *)(v0 + 2016);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 2000);
  *(_OWORD *)(v0 + 312) = v6;
  long long v7 = *(_OWORD *)(v0 + 2048);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 2032);
  *(_OWORD *)(v0 + 344) = v7;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 1936);
  *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 1952);
  long long v8 = *(_OWORD *)(v0 + 1984);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 1968);
  *(_OWORD *)(v0 + 280) = v8;
  *(void *)(v0 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(v0 + 432) = 0;
  *(_WORD *)(v0 + 440) = 256;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 880);
  sub_10001547C(v0 + 2128);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 2128);
  return _swift_task_switch(sub_1000577E4, 0, 0);
}

uint64_t sub_1000577E4()
{
  sub_100019960(v0 + 3528, &qword_1001E1398);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000578A8()
{
  uint64_t v1 = *(void *)(v0 + 3680);
  uint64_t v2 = *(void *)(v0 + 3672);
  uint64_t v3 = *(void *)(v0 + 3664);
  uint64_t v4 = *(void *)(v0 + 3640);
  long long v5 = *(_OWORD *)(v0 + 1888);
  *(_OWORD *)(v0 + 1656) = *(_OWORD *)(v0 + 1872);
  *(_OWORD *)(v0 + 1672) = v5;
  *(_OWORD *)(v0 + 1688) = *(_OWORD *)(v0 + 1904);
  *(_OWORD *)(v0 + 1697) = *(_OWORD *)(v0 + 1913);
  long long v6 = *(_OWORD *)(v0 + 1824);
  *(_OWORD *)(v0 + 1592) = *(_OWORD *)(v0 + 1808);
  *(_OWORD *)(v0 + 1608) = v6;
  long long v7 = *(_OWORD *)(v0 + 1856);
  *(_OWORD *)(v0 + 16++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 1840);
  *(_OWORD *)(v0 + 1640) = v7;
  long long v8 = *(_OWORD *)(v0 + 1760);
  *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v0 + 1744);
  *(_OWORD *)(v0 + 1544) = v8;
  long long v9 = *(_OWORD *)(v0 + 1792);
  *(_OWORD *)(v0 + 1560) = *(_OWORD *)(v0 + 1776);
  *(_OWORD *)(v0 + 1576) = v9;
  *(void *)(v0 + 1720) = v4;
  *(void *)(v0 + 1728) = 0;
  *(_WORD *)(v0 + 1736) = 256;
  sub_10003675C(v0 + 1528);
  sub_1000367C8(v0 + 1528, v0 + 1312);
  sub_10001547C(v0 + 2320);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 2320);
  return _swift_task_switch(sub_100057A30, 0, 0);
}

uint64_t sub_100057A30()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100057AF4()
{
  uint64_t v1 = *(void *)(v0 + 3752);
  *(void *)(v0 + 3872) = v1;
  uint64_t v2 = *(void *)(v0 + 3656);
  swift_errorRetain();
  sub_10009485C(3, 3, v1, 0, 0, 0, 2, 1, (_OWORD *)(v0 + 2320), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 2448);
  *(_OWORD *)(v0 + 1888) = *(_OWORD *)(v0 + 2464);
  *(_OWORD *)(v0 + 1904) = *(_OWORD *)(v0 + 2480);
  *(_OWORD *)(v0 + 1913) = *(_OWORD *)(v0 + 2489);
  *(_OWORD *)(v0 + 1808) = *(_OWORD *)(v0 + 2384);
  *(_OWORD *)(v0 + 18++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 2400);
  *(_OWORD *)(v0 + 1840) = *(_OWORD *)(v0 + 2416);
  *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 2432);
  *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 2320);
  *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 2336);
  *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 2352);
  *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 2368);
  uint64_t v3 = sub_100012D78((void *)(v2 + 184), *(void *)(v2 + 208));
  uint64_t v4 = *v3;
  *(void *)(v0 + 3880) = *v3;
  return _swift_task_switch(sub_1000578A8, v4, 0);
}

uint64_t sub_100057C98()
{
  uint64_t v1 = *(void *)(v0 + 3680);
  uint64_t v2 = *(void *)(v0 + 3672);
  uint64_t v3 = *(void *)(v0 + 3664);
  uint64_t v4 = *(void *)(v0 + 3640);
  long long v5 = *(_OWORD *)(v0 + 3232);
  *(_OWORD *)(v0 + 792) = *(_OWORD *)(v0 + 3216);
  *(_OWORD *)(v0 + 808) = v5;
  *(_OWORD *)(v0 + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 3248);
  *(_OWORD *)(v0 + 833) = *(_OWORD *)(v0 + 3257);
  long long v6 = *(_OWORD *)(v0 + 3168);
  *(_OWORD *)(v0 + 728) = *(_OWORD *)(v0 + 3152);
  *(_OWORD *)(v0 + 744) = v6;
  long long v7 = *(_OWORD *)(v0 + 3200);
  *(_OWORD *)(v0 + 760) = *(_OWORD *)(v0 + 3184);
  *(_OWORD *)(v0 + 776) = v7;
  long long v8 = *(_OWORD *)(v0 + 3104);
  *(_OWORD *)(v0 + 664) = *(_OWORD *)(v0 + 3088);
  *(_OWORD *)(v0 + 680) = v8;
  long long v9 = *(_OWORD *)(v0 + 3136);
  *(_OWORD *)(v0 + 696) = *(_OWORD *)(v0 + 3120);
  *(_OWORD *)(v0 + 712) = v9;
  *(void *)(v0 + 856) = v4;
  *(void *)(v0 + 864) = 0;
  *(_WORD *)(v0 + 872) = 256;
  sub_10003675C(v0 + 664);
  sub_1000367C8(v0 + 664, v0 + 16);
  sub_10001547C(v0 + 2896);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 2896);
  return _swift_task_switch(sub_100057E20, 0, 0);
}

uint64_t sub_100057E20()
{
  swift_errorRelease();
  sub_100036994(v0 + 3528, v0 + 3488, &qword_1001E1398);
  if (*(void *)(v0 + 3512))
  {
    uint64_t v1 = *(void *)(v0 + 3704);
    uint64_t v2 = *(void *)(v0 + 3696);
    uint64_t v3 = *(void *)(v0 + 3688);
    uint64_t v4 = *(void *)(v0 + 3648);
    sub_100059F2C(v0 + 3344);
    sub_100012D60((long long *)(v0 + 3488), v0 + 3448);
    sub_100036994(v4, v3, &qword_1001E1170);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
    {
      sub_100019960(*(void *)(v0 + 3688), &qword_1001E1170);
      if (qword_1001E0908 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100012E74(v5, (uint64_t)qword_1001E6040);
      long long v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = *(void *)(v0 + 3640);
        long long v9 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v9 = 134217984;
        *(void *)(v0 + 3584) = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Launching itemID: %llu", v9, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 38++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_100056E34;
      uint64_t v11 = *(void *)(v0 + 3656);
      void v10[5] = *(void *)(v0 + 3640);
      v10[6] = v11;
      _DWORD v10[4] = v0 + 3448;
      return _swift_task_switch(sub_100059980, 0, 0);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 3704) + 32))(*(void *)(v0 + 3712), *(void *)(v0 + 3688), *(void *)(v0 + 3696));
      if (qword_1001E0908 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      *(void *)(v0 + 3800) = sub_100012E74(v23, (uint64_t)qword_1001E6040);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = *(void *)(v0 + 3640);
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134217984;
        *(void *)(v0 + 36++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Opening universal link for app: %llu", v27, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v0 + 3808) = v28;
      void *v28 = v0;
      v28[1] = sub_100056B44;
      uint64_t v29 = *(void *)(v0 + 3712);
      v28[28] = *(void *)(v0 + 3640);
      uint64_t v30 = dword_1001E30A8;
      uint64_t v31 = (void *)swift_task_alloc();
      v28[29] = v31;
      *uint64_t v31 = v28;
      v31[1] = sub_100059148;
      return ((uint64_t (*)(uint64_t))((char *)&dword_1001E30A8 + v30))(v29);
    }
  }
  else
  {
    sub_100019960(v0 + 3488, &qword_1001E1398);
    if (qword_1001E0908 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    *(void *)(v0 + 3840) = sub_100012E74(v12, (uint64_t)qword_1001E6040);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *(void *)(v0 + 3640);
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134217984;
      *(void *)(v0 + 3576) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Launching distributor for itemID: %llu", v16, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v17 = *(void *)(v0 + 3768);

    uint64_t v18 = *(unsigned __int8 *)(v0 + 3920);
    swift_bridgeObjectRetain();
    id v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 3848) = v19;
    *id v19 = v0;
    v19[1] = sub_100057108;
    uint64_t v20 = *(void *)(v0 + 3784);
    uint64_t v21 = *(void *)(v0 + 3776);
    uint64_t v22 = *(void *)(v0 + 3640);
    return static AppDistributor.requestProductPage(_:itemID:versionID:)(v21, v17, v22, v20, v18);
  }
}

uint64_t sub_100058430()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3616) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to open universal link with error: %@. Falling back to regular app open", v3, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(void *)(v0 + 3816);
  uint64_t v7 = *(void *)(v0 + 3656);

  swift_errorRetain();
  sub_10009485C(3, 3, v6, 0, 0, 0, 0, 1, (_OWORD *)(v0 + 2512), 2u, 0, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 2832) = *(_OWORD *)(v0 + 2640);
  *(_OWORD *)(v0 + 2848) = *(_OWORD *)(v0 + 2656);
  *(_OWORD *)(v0 + 2864) = *(_OWORD *)(v0 + 2672);
  *(_OWORD *)(v0 + 2873) = *(_OWORD *)(v0 + 2681);
  *(_OWORD *)(v0 + 2768) = *(_OWORD *)(v0 + 2576);
  *(_OWORD *)(v0 + 2784) = *(_OWORD *)(v0 + 2592);
  *(_OWORD *)(v0 + 2800) = *(_OWORD *)(v0 + 2608);
  *(_OWORD *)(v0 + 2816) = *(_OWORD *)(v0 + 2624);
  *(_OWORD *)(v0 + 2704) = *(_OWORD *)(v0 + 2512);
  *(_OWORD *)(v0 + 2720) = *(_OWORD *)(v0 + 2528);
  *(_OWORD *)(v0 + 2736) = *(_OWORD *)(v0 + 2544);
  *(_OWORD *)(v0 + 2752) = *(_OWORD *)(v0 + 2560);
  uint64_t v8 = sub_100012D78((void *)(v7 + 184), *(void *)(v7 + 208));
  uint64_t v9 = *v8;
  *(void *)(v0 + 3896) = *v8;
  return _swift_task_switch(sub_100058710, v9, 0);
}

uint64_t sub_100058710()
{
  uint64_t v1 = *(void *)(v0 + 3680);
  uint64_t v2 = *(void *)(v0 + 3672);
  uint64_t v3 = *(void *)(v0 + 3664);
  uint64_t v4 = *(void *)(v0 + 3640);
  long long v5 = *(_OWORD *)(v0 + 2848);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 2832);
  *(_OWORD *)(v0 + 592) = v5;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 2864);
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 2873);
  long long v6 = *(_OWORD *)(v0 + 2784);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 2768);
  *(_OWORD *)(v0 + 528) = v6;
  long long v7 = *(_OWORD *)(v0 + 2816);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 2800);
  *(_OWORD *)(v0 + 560) = v7;
  long long v8 = *(_OWORD *)(v0 + 2720);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 2704);
  *(_OWORD *)(v0 + 464) = v8;
  long long v9 = *(_OWORD *)(v0 + 2752);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 2736);
  *(_OWORD *)(v0 + 496) = v9;
  *(void *)(v0 + 640) = v4;
  *(void *)(v0 + 648) = 0;
  *(_WORD *)(v0 + 656) = 256;
  sub_10003675C(v0 + 448);
  sub_1000367C8(v0 + 448, v0 + 1096);
  sub_10001547C(v0 + 2512);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 2512);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 3904) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000588F8;
  uint64_t v11 = *(void *)(v0 + 3656);
  void v10[5] = *(void *)(v0 + 3640);
  v10[6] = v11;
  _DWORD v10[4] = v0 + 3448;
  return _swift_task_switch(sub_100059980, 0, 0);
}

uint64_t sub_1000588F8()
{
  *(void *)(*(void *)v1 + 3912) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100058BF4;
  }
  else {
    uint64_t v2 = sub_100058A38;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100058A38()
{
  swift_errorRelease();
  (*(void (**)(void, void))(*(void *)(v0 + 3704) + 8))(*(void *)(v0 + 3712), *(void *)(v0 + 3696));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 3448);
  uint64_t v1 = *(void *)(v0 + 3656);
  sub_10009485C(3, 7, 0, 0, 0, 0, 0, 1, (_OWORD *)(v0 + 2128), 2u, 1u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 2064) = *(_OWORD *)(v0 + 2256);
  *(_OWORD *)(v0 + 2080) = *(_OWORD *)(v0 + 2272);
  *(_OWORD *)(v0 + 2096) = *(_OWORD *)(v0 + 2288);
  *(_OWORD *)(v0 + 2105) = *(_OWORD *)(v0 + 2297);
  *(_OWORD *)(v0 + 2000) = *(_OWORD *)(v0 + 2192);
  *(_OWORD *)(v0 + 2016) = *(_OWORD *)(v0 + 2208);
  *(_OWORD *)(v0 + 2032) = *(_OWORD *)(v0 + 2224);
  *(_OWORD *)(v0 + 2048) = *(_OWORD *)(v0 + 2240);
  *(_OWORD *)(v0 + 1936) = *(_OWORD *)(v0 + 2128);
  *(_OWORD *)(v0 + 1952) = *(_OWORD *)(v0 + 2144);
  *(_OWORD *)(v0 + 1968) = *(_OWORD *)(v0 + 2160);
  *(_OWORD *)(v0 + 1984) = *(_OWORD *)(v0 + 2176);
  uint64_t v2 = sub_100012D78((void *)(v1 + 184), *(void *)(v1 + 208));
  uint64_t v3 = *v2;
  *(void *)(v0 + 3864) = *v2;
  return _swift_task_switch(sub_10005765C, v3, 0);
}

uint64_t sub_100058BF4()
{
  uint64_t v1 = *(void *)(v0 + 3712);
  uint64_t v2 = *(void *)(v0 + 3704);
  uint64_t v3 = *(void *)(v0 + 3696);
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 3448);
  sub_100019960(v0 + 3528, &qword_1001E1398);
  uint64_t v4 = *(void *)(v0 + 3912);
  *(void *)(v0 + 3872) = v4;
  uint64_t v5 = *(void *)(v0 + 3656);
  swift_errorRetain();
  sub_10009485C(3, 3, v4, 0, 0, 0, 0, 1, (_OWORD *)(v0 + 2320), 2u, 1u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 2448);
  *(_OWORD *)(v0 + 1888) = *(_OWORD *)(v0 + 2464);
  *(_OWORD *)(v0 + 1904) = *(_OWORD *)(v0 + 2480);
  *(_OWORD *)(v0 + 1913) = *(_OWORD *)(v0 + 2489);
  *(_OWORD *)(v0 + 1808) = *(_OWORD *)(v0 + 2384);
  *(_OWORD *)(v0 + 18++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 2400);
  *(_OWORD *)(v0 + 1840) = *(_OWORD *)(v0 + 2416);
  *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 2432);
  *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 2320);
  *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 2336);
  *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 2352);
  *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 2368);
  long long v6 = sub_100012D78((void *)(v5 + 184), *(void *)(v5 + 208));
  uint64_t v7 = *v6;
  *(void *)(v0 + 3880) = *v6;
  return _swift_task_switch(sub_1000578A8, v7, 0);
}

uint64_t sub_100058DEC()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 3448);
  sub_100019960(v0 + 3528, &qword_1001E1398);
  uint64_t v1 = *(void *)(v0 + 3832);
  *(void *)(v0 + 3872) = v1;
  uint64_t v2 = *(void *)(v0 + 3656);
  swift_errorRetain();
  sub_10009485C(3, 3, v1, 0, 0, 0, 0, 1, (_OWORD *)(v0 + 2320), 2u, 1u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 2448);
  *(_OWORD *)(v0 + 1888) = *(_OWORD *)(v0 + 2464);
  *(_OWORD *)(v0 + 1904) = *(_OWORD *)(v0 + 2480);
  *(_OWORD *)(v0 + 1913) = *(_OWORD *)(v0 + 2489);
  *(_OWORD *)(v0 + 1808) = *(_OWORD *)(v0 + 2384);
  *(_OWORD *)(v0 + 18++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 2400);
  *(_OWORD *)(v0 + 1840) = *(_OWORD *)(v0 + 2416);
  *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 2432);
  *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 2320);
  *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 2336);
  *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 2352);
  *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 2368);
  uint64_t v3 = sub_100012D78((void *)(v2 + 184), *(void *)(v2 + 208));
  uint64_t v4 = *v3;
  *(void *)(v0 + 3880) = *v3;
  return _swift_task_switch(sub_1000578A8, v4, 0);
}

void sub_100058FAC(void *a1, long long *a2)
{
  id v4 = [a1 connection];
  id v5 = sub_100021DC4(a2, v4);

  if (!v2) {
}
  }

void sub_100059018(uint64_t a1@<X8>)
{
  sub_100051B18(v3);
  if (!v1) {
    sub_100059F98((uint64_t)v3, a1, &qword_1001E1B70);
  }
}

uint64_t sub_100059070()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100059080(uint64_t a1@<X8>)
{
}

uint64_t sub_10005909C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E30A8 + dword_1001E30A8);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 232) = v4;
  *id v4 = v2;
  v4[1] = sub_100059148;
  return v6(a1);
}

uint64_t sub_100059148(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 240) = a1;
  swift_task_dealloc();
  if (v1)
  {
    id v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_10005927C, 0, 0);
  }
}

uint64_t sub_10005927C()
{
  if (qword_1001E0908 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 248) = sub_100012E74(v1, (uint64_t)qword_1001E6040);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 240);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 216) = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Found %ld matching app links for url", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v23 = (void *)(v0 + 136);
    os_log_type_t v25 = (long long *)(v0 + 176);
    uint64_t v9 = v7 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v10 = *(void *)(v0 + 224);
      sub_100029CD8(v9, v0 + 56);
      uint64_t v11 = *(void *)(v0 + 80);
      uint64_t v12 = *(void *)(v0 + 88);
      sub_100012D78((void *)(v0 + 56), v11);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      uint64_t v13 = *(void *)(v0 + 120);
      uint64_t v14 = *(void *)(v0 + 128);
      sub_100012D78((void *)(v0 + 96), v13);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 96);
      if (v15 == v10) {
        break;
      }
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 56);
      v9 += 40;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        *(void *)(v0 + 48) = 0;
        *(_OWORD *)(v0 + 16) = 0u;
        *(_OWORD *)(v0 + 32) = 0u;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    sub_100012D60((long long *)(v0 + 56), v0 + 16);
LABEL_13:
    swift_bridgeObjectRelease();
    sub_100036994(v0 + 16, (uint64_t)v25, &qword_1001E1B98);
    if (*(void *)(v0 + 200))
    {
      sub_100012D60(v25, (uint64_t)v23);
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v18 = *(void *)(v0 + 168);
      sub_100012D78(v23, v17);
      uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v18 + 16) + **(int **)(v18 + 16));
      id v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 256) = v19;
      *id v19 = v0;
      v19[1] = sub_10005969C;
      return v24(v17, v18);
    }
    sub_100019960((uint64_t)v25, &qword_1001E1B98);
    sub_100059ED8();
    swift_allocError();
    *uint64_t v21 = 6;
    swift_willThrow();
    sub_100019960(v0 + 16, &qword_1001E1B98);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100059ED8();
    swift_allocError();
    *uint64_t v16 = 5;
    swift_willThrow();
  }
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10005969C(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 276) = a1;
  *(void *)(v3 + 264) = v1;
  swift_task_dealloc();
  if (v1) {
    BOOL v4 = sub_1000598E4;
  }
  else {
    BOOL v4 = sub_1000597B4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000597B4()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = *(unsigned __int8 *)(v0 + 276);
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v4 = 67109120;
    *(_DWORD *)(v0 + 272) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Opened universal link with result: %{BOOL}d", v4, 8u);
    swift_slowDealloc();
  }

  sub_100019960(v0 + 16, &qword_1001E1B98);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 136);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000598E4()
{
  sub_100019960(v0 + 16, &qword_1001E1B98);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 136);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005995C(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  v3[6] = v2;
  _OWORD v3[4] = a1;
  return _swift_task_switch(sub_100059980, 0, 0);
}

uint64_t sub_100059980()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012D78(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  v0[7] = v5;
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = v0[6];
    id v9 = [objc_allocWithZone((Class)_LSOpenConfiguration) init];
    v0[8] = v9;
    uint64_t v10 = *sub_100012D78((void *)(v8 + 64), *(void *)(v8 + 88));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[9] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100059BF4;
    return sub_1000B9B84(v6, v7, (uint64_t)v9, v10);
  }
  else
  {
    if (qword_1001E0908 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100012E74(v13, (uint64_t)qword_1001E6040);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = v0[5];
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134217984;
      v0[2] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to retrieve bundleID for itemID: %llu", v17, 0xCu);
      swift_slowDealloc();
    }

    sub_100059ED8();
    swift_allocError();
    *uint64_t v18 = 3;
    swift_willThrow();
    id v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_100059BF4()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100059E6C;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100059D10;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100059D10()
{
  if (qword_1001E0908 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6040);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = (void *)v0[8];
  if (v4)
  {
    uint64_t v6 = v0[5];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "App launch completed for item ID: %llu", v7, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100059E6C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100059ED8()
{
  unint64_t result = qword_1001E1B78;
  if (!qword_1001E1B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E1B78);
  }
  return result;
}

uint64_t sub_100059F2C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100059F58()
{
  unint64_t result = qword_1001E1B90;
  if (!qword_1001E1B90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001E1B90);
  }
  return result;
}

uint64_t sub_100059F98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100012960(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100059FFC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005A00C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_10005A044(void *a1)
{
  sub_100058FAC(a1, (long long *)(v1 + 16));
}

uint64_t getEnumTagSinglePayload for SnoutEvent.EventType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppLaunchManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005A1BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLaunchManagerError()
{
  return &type metadata for AppLaunchManagerError;
}

uint64_t destroy for AppLaunchManager(uint64_t a1)
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 24);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 64);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 104);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 144);

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 184);
}

uint64_t initializeWithCopy for AppLaunchManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2 + 24;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = v7;
  id v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  id v10 = v5;
  v9(a1 + 24, v6, v8);
  long long v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 104, a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 168) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 144, a2 + 144);
  long long v14 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 208) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 184, a2 + 184);
  return a1;
}

uint64_t *assignWithCopy for AppLaunchManager(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = (uint64_t)v4;
  id v6 = v4;

  sub_100017B78(a1 + 3, a2 + 3);
  sub_100017B78(a1 + 8, a2 + 8);
  sub_100017B78(a1 + 13, a2 + 13);
  sub_100017B78(a1 + 18, a2 + 18);
  sub_100017B78(a1 + 23, a2 + 23);
  return a1;
}

uint64_t assignWithTake for AppLaunchManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 24);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 104);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 184);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  return a1;
}

ValueMetadata *type metadata accessor for AppLaunchManager()
{
  return &type metadata for AppLaunchManager;
}

unint64_t sub_10005A5C0(uint64_t a1)
{
  unint64_t result = sub_100059ED8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10005A5EC()
{
  unint64_t result = qword_1001E1BC0[0];
  if (!qword_1001E1BC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001E1BC0);
  }
  return result;
}

void sub_10005A640(uint64_t a1@<X8>)
{
}

ValueMetadata *type metadata accessor for LaunchServicesRecordEnumerator()
{
  return &type metadata for LaunchServicesRecordEnumerator;
}

uint64_t sub_10005A668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for KeyedSQLitePredicate()
{
  return sub_10005A688();
}

uint64_t sub_10005A688()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10005A6B8()
{
  v1[5] = v0;
  v1[6] = type metadata accessor for PostbackFetchTask();
  v1[7] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for URL();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  sub_100012960(&qword_1001E1170);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_10005A7F4, 0, 0);
}

uint64_t sub_10005A7F4()
{
  sub_100012D78((void *)(v0[5] + 144), *(void *)(v0[5] + 168));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005A89C;
  uint64_t v2 = v0[12];
  return sub_100112540(v2, 11);
}

uint64_t sub_10005A89C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10005A998, 0, 0);
}

uint64_t sub_10005A998()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  int v5 = v4(v1, 1, v2);
  uint64_t v6 = v0[13];
  if (v5 == 1)
  {
    URL.init(string:)();
    sub_100020764(v1);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[13], v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[8];
  sub_1000207C4(v0[13], v7);
  if (v4(v7, 1, v8) == 1)
  {
    uint64_t v9 = v0[13];
    sub_100020764(v0[11]);
    sub_10002082C();
    swift_allocError();
    *id v10 = 0;
    swift_willThrow();
    sub_100020764(v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    uint64_t v13 = v0[10];
    uint64_t v14 = v0[8];
    uint64_t v15 = v0[9];
    uint64_t v17 = (int *)v0[6];
    uint64_t v16 = v0[7];
    uint64_t v18 = v0[5];
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v13, v0[11], v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v16, v13, v14);
    char v19 = *(unsigned char *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v20 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(v18 + 48);
    uint64_t v22 = *(void *)(v18 + 56);
    uint64_t v24 = *(void *)(v18 + 64);
    uint64_t v25 = *(void *)(v18 + 88);
    char v26 = *(unsigned char *)(v18 + 96);
    char v27 = *(unsigned char *)(v18 + 97);
    char v28 = *(unsigned char *)(v18 + 98);
    uint64_t v30 = *(void *)(v18 + 104);
    uint64_t v29 = *(void *)(v18 + 112);
    uint64_t v31 = *(void *)(v18 + 120);
    uint64_t v32 = v16 + v17[5];
    long long v33 = *(_OWORD *)(v18 + 128);
    long long v34 = *(_OWORD *)(v18 + 32);
    long long v35 = *(_OWORD *)(v18 + 72);
    *(void *)uint64_t v32 = *(void *)v18;
    *(unsigned char *)(v32 + 8) = v19;
    *(void *)(v32 + 16) = v21;
    *(void *)(v32 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
    *(_OWORD *)(v32 + 32) = v34;
    *(void *)(v32 + 48) = v23;
    *(void *)(v32 + 56) = v22;
    *(void *)(v32 + 64) = v24;
    *(_OWORD *)(v32 + 72) = v35;
    *(void *)(v32 + 88) = v25;
    *(unsigned char *)(v32 + 96) = v26;
    *(unsigned char *)(v32 + 97) = v27;
    *(unsigned char *)(v32 + 98) = v28;
    *(void *)(v16 + v17[6]) = v30;
    *(void *)(v16 + v17[7]) = _swiftEmptyArrayStorage;
    os_log_type_t v36 = (void *)(v16 + v17[8]);
    *os_log_type_t v36 = v29;
    v36[1] = v31;
    *(_OWORD *)(v16 + v17[9]) = v33;
    *(unsigned char *)(v16 + v17[10]) = 2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_log_type_t v37 = (void *)swift_task_alloc();
    v0[15] = v37;
    *os_log_type_t v37 = v0;
    v37[1] = sub_1000201B0;
    return sub_1000630C4();
  }
}

uint64_t sub_10005ACEC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100020640;
  return sub_10005A6B8();
}

uint64_t destroy for ReengagementPostbackFetchTask(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 144);
}

uint64_t initializeWithCopy for ReengagementPostbackFetchTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = v6;
  uint64_t v7 = a2 + 144;
  long long v8 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 168) = v8;
  uint64_t v9 = v8;
  id v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(a1 + 144, v7, v9);
  return a1;
}

uint64_t assignWithCopy for ReengagementPostbackFetchTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(unsigned char *)(a1 + 97) = *((unsigned char *)a2 + 97);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  sub_100017B78((uint64_t *)(a1 + 144), a2 + 18);
  return a1;
}

__n128 initializeWithTake for ReengagementPostbackFetchTask(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for ReengagementPostbackFetchTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReengagementPostbackFetchTask(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 184)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReengagementPostbackFetchTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReengagementPostbackFetchTask()
{
  return &type metadata for ReengagementPostbackFetchTask;
}

ValueMetadata *type metadata accessor for DogDistributor()
{
  return &type metadata for DogDistributor;
}

ValueMetadata *type metadata accessor for AppMetadataDatabaseStore()
{
  return &type metadata for AppMetadataDatabaseStore;
}

uint64_t sub_10005B260(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  long long v8 = (char *)&v26 - v7;
  if (sub_100006764((uint64_t)a1) > 17399) {
    return 1;
  }
  uint64_t v27 = v2;
  while (1)
  {
    uint64_t v9 = sub_100006764((uint64_t)a1);
    if (v9 != 17400)
    {
      if (v9)
      {
        uint64_t v21 = Logger.general.unsafeMutableAddressor();
        uint64_t v13 = v3;
        uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
        uint64_t v15 = v27;
        v22(v8, v21, v27);
        uint64_t v23 = a1;
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v24))
        {
          uint64_t v25 = swift_slowAlloc();
          *(_DWORD *)uint64_t v25 = 134218240;
          aBlock[0] = sub_100006764((uint64_t)v23);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v25 + 12) = 2048;
          aBlock[0] = 17400;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v17, v24, "Error: No database migration for %lld to %lld", (uint8_t *)v25, 0x16u);
          swift_slowDealloc();
        }
        else
        {

          uint64_t v17 = v23;
        }
        goto LABEL_15;
      }
      aBlock[4] = sub_10005B70C;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000399B4;
      aBlock[3] = &unk_1001C4B80;
      long long v10 = _Block_copy(aBlock);
      swift_release();
      int v11 = sub_100006AE0((uint64_t)a1, 17400, v10);
      _Block_release(v10);
      if (!v11) {
        break;
      }
    }
    if (sub_100006764((uint64_t)a1) >= 17400) {
      return 1;
    }
  }
  uint64_t v12 = Logger.general.unsafeMutableAddressor();
  uint64_t v13 = v3;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v15 = v27;
  v14(v6, v12, v27);
  uint64_t v16 = a1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134218240;
    aBlock[0] = sub_100006764((uint64_t)v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v19 + 12) = 2048;
    aBlock[0] = 17400;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Migration failed for current schema version: %lld while trying to migrate to %lld", (uint8_t *)v19, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v17 = v16;
  }
  long long v8 = v6;
LABEL_15:

  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v15);
  return 0;
}

void sub_10005B654(uint64_t a1)
{
  id v2 = [(id)type metadata accessor for ItemIdentifierBundleIDMapEntity() databaseTable];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  sub_10005B728(v3, v5);
  swift_bridgeObjectRelease();
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v6);
}

uint64_t sub_10005B710(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005B720()
{
  return swift_release();
}

uint64_t sub_10005B728(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(89);
  v4._countAndFlagsBits = 0xD00000000000001BLL;
  v4._object = (void *)0x8000000100185720;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 665632;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x64695F6D657469;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x52454745544E4920;
  v8._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x695F656C646E7562;
  v9._object = (void *)0xE900000000000064;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x550A2C5458455420;
  v10._object = (void *)0xEE0028455551494ELL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0x64695F6D657469;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 44;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x695F656C646E7562;
  v13._object = (void *)0xE900000000000064;
  String.append(_:)(v13);
  v14._object = (void *)0x8000000100185760;
  v14._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v14);
  return 0;
}

unint64_t sub_10005B8B8()
{
  unint64_t result = qword_1001E1CA0;
  if (!qword_1001E1CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1CA0);
  }
  return result;
}

unint64_t sub_10005B910()
{
  unint64_t result = qword_1001E1CA8;
  if (!qword_1001E1CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1CA8);
  }
  return result;
}

unint64_t sub_10005B964(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10005B994();
  unint64_t result = sub_100024190();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10005B994()
{
  unint64_t result = qword_1001E1CF8;
  if (!qword_1001E1CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1CF8);
  }
  return result;
}

unint64_t sub_10005B9E8(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x656B636F6C5F7369;
      break;
    case 4:
      unint64_t result = 0x7265747369676572;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0x6D69745F6B636F6CLL;
      break;
    case 8:
      unint64_t result = 0x69745F6863746566;
      break;
    case 9:
      unint64_t result = 0x63616274736F6867;
      break;
    case 10:
      unint64_t result = 0x69737265766E6F63;
      break;
    case 11:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    case 13:
      unint64_t result = 0x6C7074656B72616DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10005BBBC(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x656B636F6C5F7369;
      break;
    case 4:
      unint64_t result = 0x7265747369676572;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0x6D69745F6B636F6CLL;
      break;
    case 8:
      unint64_t result = 0x69745F6863746566;
      break;
    case 9:
      unint64_t result = 0x63616274736F6867;
      break;
    case 10:
      unint64_t result = 0x69737265766E6F63;
      break;
    case 11:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    case 13:
      unint64_t result = 0x6C7074656B72616DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005BD90(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10005B9E8(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10005B9E8(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10005BE1C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10005B9E8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10005BE80()
{
  sub_10005B9E8(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005BED4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10005B9E8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_10005BF34@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005CBB0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10005BF64@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10005B9E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10005BF90()
{
  return sub_10005BBBC(*v0);
}

unint64_t sub_10005BF98@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005CBB0(a1);
  *a2 = result;
  return result;
}

void sub_10005BFC0(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

void sub_10005BFCC(void *a1@<X8>)
{
  *a1 = &off_1001C0928;
}

uint64_t sub_10005BFDC(uint64_t a1)
{
  unint64_t v2 = sub_10005B910();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C018(uint64_t a1)
{
  unint64_t v2 = sub_10005B910();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C054(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v8 = (char *)&v42 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  Swift::String v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v42 - v14;
  Date.init(timeIntervalSince1970:)();
  char v16 = *(unsigned char *)(v2 + 72);
  type metadata accessor for PostbackUpdateData();
  uint64_t v46 = a1;
  char v17 = v16;
  uint64_t v18 = v9;
  ConversionType.isInstall.getter(v17);
  os_log_type_t v48 = v15;
  Date.addingTimeInterval(_:)();
  sub_10005D774();
  LOBYTE(v15) = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v20 = v13;
  uint64_t v21 = v10 + 8;
  v19(v20, v18);
  if ((v15 & 1) == 0)
  {
    uint64_t v28 = v49;
    if (*(unsigned char *)(v2 + 96) != 1) {
      goto LABEL_10;
    }
    uint64_t result = Date.timeIntervalSince1970.getter();
    double v30 = v29 * 1000.0;
    if ((~*(void *)&v30 & 0x7FF0000000000000) != 0)
    {
      if (v30 > -1.0)
      {
        if (v30 < 1.84467441e19)
        {
          *(void *)(v2 + 88) = (unint64_t)v30;
          *(unsigned char *)(v2 + 96) = 0;
LABEL_10:
          if (*(unsigned char *)(v2 + 51))
          {
            unint64_t v31 = *(void *)(v2 + 64);
            uint64_t v46 = *(void **)(v2 + 56);
            swift_bridgeObjectRetain();
            uint64_t v32 = Logger.ghostback.unsafeMutableAddressor();
            long long v33 = v47;
            (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v47, v32, v4);
            swift_bridgeObjectRetain();
            long long v34 = Logger.logObject.getter();
            os_log_type_t v35 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v34, v35))
            {
              uint64_t v36 = swift_slowAlloc();
              uint64_t v45 = (uint64_t (*)(char *, uint64_t))v19;
              os_log_type_t v37 = (uint8_t *)v36;
              uint64_t v38 = swift_slowAlloc();
              uint64_t v44 = v21;
              uint64_t v51 = v38;
              uint64_t v43 = v4;
              *(_DWORD *)os_log_type_t v37 = 136315138;
              uint64_t v42 = v37 + 4;
              swift_bridgeObjectRetain();
              uint64_t v50 = sub_100147668((uint64_t)v46, v31, &v51);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v34, v35, "Ghostback %s is locked, skipping update", v37, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v43);
              return v45(v48, v18);
            }
            swift_bridgeObjectRelease_n();

            (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v4);
            return ((uint64_t (*)(char *, uint64_t))v19)(v48, v18);
          }
          *(unsigned char *)(v2 + 50) = 1;
          char v39 = v46;
          *(void *)(v2 + 40) = *v46;
          *(unsigned char *)(v2 + 48) = 0;
          *(unsigned char *)(v2 + 49) = *((unsigned char *)v39 + 8);
          if (*((unsigned char *)v39 + 9) != 1) {
            return ((uint64_t (*)(char *, uint64_t))v19)(v48, v18);
          }
          *(unsigned char *)(v2 + 51) = 1;
          uint64_t result = Date.timeIntervalSince1970.getter();
          double v41 = v40 * 1000.0;
          if ((~*(void *)&v41 & 0x7FF0000000000000) != 0)
          {
            if (v41 > -1.0)
            {
              if (v41 < 1.84467441e19)
              {
                *(void *)(v2 + 104) = (unint64_t)v41;
                *(unsigned char *)(v2 + 112) = 0;
                *(unsigned char *)(v2 + 74) = 0;
                return ((uint64_t (*)(void, void))v19)(v48, v18);
              }
LABEL_25:
              __break(1u);
              return result;
            }
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v22 = Logger.ghostback.unsafeMutableAddressor();
  uint64_t v23 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v8, v22, v4);
  os_log_type_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Ghostback is past activation window, skipping update", v26, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v4);
  sub_10005D7CC();
  swift_allocError();
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v19)(v48, v18);
}

uint64_t sub_10005C65C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E1D38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10005B910();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10005D610(v3 + 49, (uint64_t)&v13);
    sub_10005D610((uint64_t)&v13, (uint64_t)&v12);
    char v11 = 2;
    sub_10005D678();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = *(unsigned char *)(v3 + 72);
    char v11 = 10;
    sub_10005D6CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = *(unsigned char *)(v3 + 73);
    char v11 = 11;
    sub_100046408();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_10005CA00@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10005CED8(a1, v9);
  if (!v2)
  {
    long long v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    long long v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    long long v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_10005CA54(void *a1)
{
  return sub_10005C65C(a1);
}

unint64_t sub_10005CAA4()
{
  unint64_t result = qword_1001E1D00;
  if (!qword_1001E1D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D00);
  }
  return result;
}

unint64_t sub_10005CAFC()
{
  unint64_t result = qword_1001E1D08;
  if (!qword_1001E1D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D08);
  }
  return result;
}

unint64_t sub_10005CB54()
{
  unint64_t result = qword_1001E1D10;
  if (!qword_1001E1D10)
  {
    sub_100011ECC(&qword_1001E1D18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D10);
  }
  return result;
}

unint64_t sub_10005CBB0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C07B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005CBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v32 = a1;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v47 = 1;
  char v46 = 1;
  char v45 = 1;
  char v44 = 1;
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v22 = v21 * 1000.0;
  if ((~COERCE__INT64(v21 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v22 <= -1.0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v22 >= 1.84467441e19)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v31 = a2;
  char v23 = a7 & 1;
  if ((sub_100089564(v23) & 0x100000000) != 0) {
    arc4random_uniform(0x15180u);
  }
  Date.addingTimeInterval(_:)();
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v25 = v24 * 1000.0;
  if ((~*(void *)&v25 & 0x7FF0000000000000) == 0) {
    goto LABEL_13;
  }
  if (v25 <= -1.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v25 < 1.84467441e19)
  {
    unint64_t v30 = (unint64_t)v25;
    sub_10005D720(a10);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v26(a8, v16);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v19, v16);
    char v27 = v47;
    char v28 = v46;
    char v43 = v47;
    char v41 = v46;
    char v38 = v45;
    char v36 = v44;
    *(void *)a9 = 0;
    *(unsigned char *)(a9 + 8) = v27;
    *(_DWORD *)(a9 + 9) = *(_DWORD *)v42;
    *(_DWORD *)(a9 + 12) = *(_DWORD *)&v42[3];
    uint64_t v29 = v33;
    *(void *)(a9 + 16) = v32;
    *(void *)(a9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
    *(void *)(a9 + 32) = v34;
    *(void *)(a9 + 40) = 0;
    *(unsigned char *)(a9 + 48) = v28;
    *(_WORD *)(a9 + 49) = 3;
    *(unsigned char *)(a9 + 51) = 0;
    *(void *)(a9 + 56) = v31;
    *(void *)(a9 + 64) = a3;
    *(unsigned char *)(a9 + 72) = a6;
    *(unsigned char *)(a9 + 73) = v23;
    *(unsigned char *)(a9 + 74) = 0;
    *(_DWORD *)(a9 + 75) = v39;
    *(unsigned char *)(a9 + 79) = v40;
    *(void *)(a9 + 80) = (unint64_t)v22;
    *(void *)(a9 + 88) = 0;
    *(unsigned char *)(a9 + 96) = v38;
    LODWORD(v29) = *(_DWORD *)v37;
    *(_DWORD *)(a9 + 100) = *(_DWORD *)&v37[3];
    *(_DWORD *)(a9 + 97) = v29;
    *(void *)(a9 + 104) = 0;
    *(unsigned char *)(a9 + 112) = v36;
    *(_DWORD *)(a9 + 116) = *(_DWORD *)&v35[3];
    *(_DWORD *)(a9 + 113) = *(_DWORD *)v35;
    *(void *)(a9 + 120) = v30;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10005CED8@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v94 = sub_100012960(&qword_1001E1D20);
  uint64_t v5 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  long long v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v93 = 1;
  char v88 = 1;
  char v86 = 1;
  sub_100012D78(a1, a1[3]);
  sub_10005B910();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  uint64_t v8 = v5;
  uint64_t v49 = a2;
  LOBYTE(v58) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v58) = 1;
  uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v91 = v10 & 1;
  LOBYTE(v50) = 2;
  int v11 = v10;
  sub_10005D4F8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v47 = v11;
  int v12 = v58;
  LOBYTE(v58) = 3;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  int v46 = v12;
  BOOL v14 = v13 == 1;
  LOBYTE(v58) = 4;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  BOOL v45 = v14;
  BOOL v16 = v15 == 1;
  LOBYTE(v58) = 5;
  uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
  BOOL v44 = v16;
  LOBYTE(v58) = 6;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v42 = v18;
  char v88 = v18 & 1;
  LOBYTE(v58) = 7;
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v39 = v19;
  char v86 = v19 & 1;
  LOBYTE(v58) = 8;
  uint64_t v40 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v38 = v17;
  LOBYTE(v58) = 9;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v21;
  LOBYTE(v50) = 10;
  sub_10005D54C();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v37 = v58;
  LOBYTE(v50) = 11;
  sub_1000472D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v36 = v58;
  LOBYTE(v58) = 12;
  int v35 = KeyedDecodingContainer.decode(_:forKey:)();
  char v84 = 13;
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v34 = v24;
  uint64_t v25 = v23;
  v35 &= 1u;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v94);
  *(void *)&long long v50 = 0;
  BYTE8(v50) = 1;
  *(void *)&long long v51 = v9;
  *((void *)&v51 + 1) = v25;
  *(void *)&long long v52 = v34;
  *((void *)&v52 + 1) = v48;
  char v26 = v46;
  LOBYTE(v53) = v47 & 1;
  BYTE1(v53) = v46;
  LOBYTE(v8) = v45;
  BYTE2(v53) = v44;
  BYTE3(v53) = v45;
  *((void *)&v53 + 1) = v20;
  *(void *)&long long v54 = v22;
  BYTE8(v54) = v37;
  BYTE9(v54) = v36;
  BYTE10(v54) = v35;
  *(void *)&long long v55 = v43;
  *((void *)&v55 + 1) = v38;
  LOBYTE(v56) = v42 & 1;
  *((void *)&v56 + 1) = v41;
  LOBYTE(v57) = v39 & 1;
  *((void *)&v57 + 1) = v40;
  sub_10005D5A0((uint64_t)&v50);
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t v58 = 0;
  char v59 = v93;
  *(_DWORD *)uint64_t v60 = *(_DWORD *)v92;
  *(_DWORD *)&v60[3] = *(_DWORD *)&v92[3];
  uint64_t v61 = v9;
  uint64_t v62 = v25;
  uint64_t v63 = v34;
  uint64_t v64 = v48;
  char v65 = v91;
  char v66 = v26;
  BOOL v67 = v44;
  char v68 = v8;
  uint64_t v69 = v20;
  uint64_t v70 = v22;
  char v71 = v37;
  char v72 = v36;
  char v73 = v35;
  int v74 = v89;
  char v75 = v90;
  uint64_t v76 = v43;
  uint64_t v77 = v38;
  char v78 = v88;
  *(_DWORD *)long long v79 = *(_DWORD *)v87;
  *(_DWORD *)&v79[3] = *(_DWORD *)&v87[3];
  uint64_t v80 = v41;
  char v81 = v86;
  *(_DWORD *)long long v82 = *(_DWORD *)v85;
  *(_DWORD *)&v82[3] = *(_DWORD *)&v85[3];
  uint64_t v83 = v40;
  uint64_t result = sub_10005D5D8((uint64_t)&v58);
  long long v28 = v55;
  uint64_t v29 = v49;
  v49[4] = v54;
  v29[5] = v28;
  long long v30 = v57;
  v29[6] = v56;
  v29[7] = v30;
  long long v31 = v51;
  *uint64_t v29 = v50;
  v29[1] = v31;
  long long v32 = v53;
  _OWORD v29[2] = v52;
  v29[3] = v32;
  return result;
}

unint64_t sub_10005D4F8()
{
  unint64_t result = qword_1001E1D28;
  if (!qword_1001E1D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D28);
  }
  return result;
}

unint64_t sub_10005D54C()
{
  unint64_t result = qword_1001E1D30;
  if (!qword_1001E1D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D30);
  }
  return result;
}

uint64_t sub_10005D5A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005D5D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005D610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1D40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005D678()
{
  unint64_t result = qword_1001E1D48;
  if (!qword_1001E1D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D48);
  }
  return result;
}

unint64_t sub_10005D6CC()
{
  unint64_t result = qword_1001E1D50;
  if (!qword_1001E1D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D50);
  }
  return result;
}

uint64_t sub_10005D720(uint64_t a1)
{
  return a1;
}

unint64_t sub_10005D774()
{
  unint64_t result = qword_1001E1D58;
  if (!qword_1001E1D58)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D58);
  }
  return result;
}

unint64_t sub_10005D7CC()
{
  unint64_t result = qword_1001E1D60;
  if (!qword_1001E1D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D60);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for GhostbackModelError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10005D8BCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for GhostbackModelError()
{
  return &type metadata for GhostbackModelError;
}

uint64_t getEnumTagSinglePayload for GhostbackModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GhostbackModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005DA50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GhostbackModel.CodingKeys()
{
  return &type metadata for GhostbackModel.CodingKeys;
}

uint64_t destroy for GhostbackModel()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GhostbackModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GhostbackModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
  *(unsigned char *)(a1 + 50) = *((unsigned char *)a2 + 50);
  *(unsigned char *)(a1 + 51) = *((unsigned char *)a2 + 51);
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
  *(unsigned char *)(a1 + 74) = *((unsigned char *)a2 + 74);
  *(void *)(a1 + 80) = a2[10];
  uint64_t v6 = a2[11];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = a2[13];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 120) = a2[15];
  return a1;
}

__n128 initializeWithTake for GhostbackModel(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for GhostbackModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 51);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for GhostbackModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GhostbackModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GhostbackModel()
{
  return &type metadata for GhostbackModel;
}

unint64_t sub_10005DDFC()
{
  unint64_t result = qword_1001E1D68;
  if (!qword_1001E1D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D68);
  }
  return result;
}

unint64_t sub_10005DE50(uint64_t a1)
{
  unint64_t result = sub_10005D7CC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10005DE7C()
{
  unint64_t result = qword_1001E1D70;
  if (!qword_1001E1D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D70);
  }
  return result;
}

unint64_t sub_10005DED4()
{
  unint64_t result = qword_1001E1D78;
  if (!qword_1001E1D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D78);
  }
  return result;
}

unint64_t sub_10005DF2C()
{
  unint64_t result = qword_1001E1D80;
  if (!qword_1001E1D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1D80);
  }
  return result;
}

unint64_t sub_10005DF80(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10005DFB0();
  unint64_t result = sub_10002413C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10005DFB0()
{
  unint64_t result = qword_1001E1DD0;
  if (!qword_1001E1DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1DD0);
  }
  return result;
}

unint64_t sub_10005E004(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x63616274736F6867;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10005E098(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x63616274736F6867;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005E12C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E1E08);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10005DF2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10005EA78(v3 + 16, (uint64_t)v14);
  sub_10005EA78((uint64_t)v14, (uint64_t)v12);
  char v11 = 0;
  sub_10005EAE0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    sub_10005EA78(v3 + 32, (uint64_t)v13);
    sub_10005EA78((uint64_t)v13, (uint64_t)v12);
    char v11 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005E32C(unsigned __int8 *a1, char *a2)
{
  return sub_100105A3C(*a1, *a2);
}

Swift::Int sub_10005E338()
{
  return sub_100108E60();
}

uint64_t sub_10005E340()
{
  return sub_100109BB8();
}

Swift::Int sub_10005E348()
{
  return sub_10010B5AC();
}

unint64_t sub_10005E350@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005E60C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10005E380@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10005E004(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10005E3AC()
{
  return sub_10005E098(*v0);
}

unint64_t sub_10005E3B4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005E60C(a1);
  *a2 = result;
  return result;
}

void sub_10005E3DC(void *a1@<X8>)
{
  *a1 = &off_1001C09D8;
}

uint64_t sub_10005E3EC(uint64_t a1)
{
  unint64_t v2 = sub_10005DF2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E428(uint64_t a1)
{
  unint64_t v2 = sub_10005DF2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10005E464@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10005E658(a1, v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10005E4B8(void *a1)
{
  return sub_10005E12C(a1);
}

unint64_t sub_10005E500()
{
  unint64_t result = qword_1001E1DD8;
  if (!qword_1001E1DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1DD8);
  }
  return result;
}

unint64_t sub_10005E558()
{
  unint64_t result = qword_1001E1DE0;
  if (!qword_1001E1DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1DE0);
  }
  return result;
}

unint64_t sub_10005E5B0()
{
  unint64_t result = qword_1001E1DE8;
  if (!qword_1001E1DE8)
  {
    sub_100011ECC(&qword_1001E1DF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1DE8);
  }
  return result;
}

unint64_t sub_10005E60C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0958, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005E658@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E1DF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10005DF2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  uint64_t v24 = a2;
  char v27 = 0;
  sub_10005EA10();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v9 = v25;
  unint64_t v10 = v26;
  char v27 = 1;
  sub_10005EA64(v25, v26);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  unint64_t v22 = v10;
  uint64_t v23 = v9;
  uint64_t v11 = v25;
  unint64_t v12 = v26;
  LOBYTE(v25) = 2;
  sub_10005EA64(v11, v26);
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v25) = 3;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v16 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  unint64_t v18 = v22;
  uint64_t v17 = v23;
  sub_10005EA64(v23, v22);
  sub_10005EA64(v11, v12);
  swift_bridgeObjectRetain();
  sub_10005E9FC(v11, v12);
  sub_10005E9FC(v17, v18);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  sub_10005E9FC(v17, v18);
  sub_10005E9FC(v11, v12);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = v24;
  *uint64_t v24 = 0;
  *((unsigned char *)v20 + 8) = 1;
  v20[2] = v17;
  void v20[3] = v18;
  v20[4] = v11;
  v20[5] = v12;
  v20[6] = v21;
  v20[7] = v16;
  v20[8] = v15;
  return result;
}

uint64_t sub_10005E9FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100020930(a1, a2);
  }
  return a1;
}

unint64_t sub_10005EA10()
{
  unint64_t result = qword_1001E1E00;
  if (!qword_1001E1E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1E00);
  }
  return result;
}

uint64_t sub_10005EA64(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10003CF30(a1, a2);
  }
  return a1;
}

uint64_t sub_10005EA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005EAE0()
{
  unint64_t result = qword_1001E1E18;
  if (!qword_1001E1E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1E18);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FrozenImpressionModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005EC00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FrozenImpressionModel.CodingKeys()
{
  return &type metadata for FrozenImpressionModel.CodingKeys;
}

uint64_t destroy for FrozenImpressionModel(uint64_t *a1)
{
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_100020930(a1[2], v2);
  }
  unint64_t v3 = a1[5];
  if (v3 >> 60 != 15) {
    sub_100020930(a1[4], v3);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FrozenImpressionModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unsigned int v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    sub_10003CF30(*v4, *(void *)(a2 + 24));
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  }
  uint64_t v7 = (uint64_t *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
  }
  else
  {
    uint64_t v9 = *v7;
    sub_10003CF30(*v7, *(void *)(a2 + 40));
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FrozenImpressionModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  unint64_t v5 = (_OWORD *)(a1 + 16);
  uint64_t v6 = a2 + 2;
  unint64_t v7 = a2[3];
  if (*(void *)(a1 + 24) >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_10003CF30(*v6, a2[3]);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_10005EEC8(a1 + 16);
LABEL_6:
    _OWORD *v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v9 = *v6;
  sub_10003CF30(*v6, a2[3]);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  sub_100020930(v10, v11);
LABEL_8:
  unint64_t v12 = a2 + 4;
  unint64_t v13 = a2[5];
  if (*(void *)(a1 + 40) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_10003CF30(*v12, a2[5]);
      uint64_t v16 = *(void *)(a1 + 32);
      unint64_t v17 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = v15;
      *(void *)(a1 + 40) = v13;
      sub_100020930(v16, v17);
      goto LABEL_15;
    }
    sub_10005EEC8(a1 + 32);
    goto LABEL_13;
  }
  if (v13 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_15;
  }
  uint64_t v14 = *v12;
  sub_10003CF30(*v12, a2[5]);
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v13;
LABEL_15:
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10005EEC8(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for FrozenImpressionModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (_OWORD *)(a1 + 16);
  unint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 24);
  if (v7 >> 60 == 15)
  {
    sub_10005EEC8(a1 + 16);
LABEL_4:
    *uint64_t v4 = *v5;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)v5;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  sub_100020930(v8, v6);
LABEL_6:
  uint64_t v9 = (void *)(a2 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 40);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = *v9;
      *(void *)(a1 + 40) = v11;
      sub_100020930(v12, v10);
      goto LABEL_11;
    }
    sub_10005EEC8(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
LABEL_11:
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FrozenImpressionModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FrozenImpressionModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FrozenImpressionModel()
{
  return &type metadata for FrozenImpressionModel;
}

unint64_t sub_10005F0B8()
{
  unint64_t result = qword_1001E1E20;
  if (!qword_1001E1E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1E20);
  }
  return result;
}

id sub_10005F2B4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SnoutStoryEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SnoutStoryEntity()
{
  return self;
}

unint64_t sub_10005F310()
{
  unint64_t result = qword_1001E1E50;
  if (!qword_1001E1E50)
  {
    type metadata accessor for SnoutStoryModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1E50);
  }
  return result;
}

id sub_10005F508()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PostbackEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PostbackEntity()
{
  return self;
}

unint64_t sub_10005F564()
{
  unint64_t result = qword_1001E1E98;
  if (!qword_1001E1E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1E98);
  }
  return result;
}

uint64_t sub_10005F5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[107] = v3;
  v4[106] = a3;
  v4[105] = a2;
  v4[104] = a1;
  uint64_t v5 = sub_100012960(&qword_1001E1370);
  v4[108] = v5;
  v4[109] = *(void *)(v5 - 8);
  v4[110] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[111] = v6;
  v4[112] = *(void *)(v6 - 8);
  v4[113] = swift_task_alloc();
  v4[114] = swift_task_alloc();
  return _swift_task_switch(sub_10005F6F4, 0, 0);
}

uint64_t sub_10005F6F4()
{
  uint64_t v1 = *(void *)(v0 + 912);
  uint64_t v2 = *(void *)(v0 + 896);
  uint64_t v3 = *(void *)(v0 + 888);
  uint64_t v4 = *(void *)(v0 + 840);
  sub_10009485C(2, 8, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v5 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 920) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 936) = v5;
  *(void *)(v0 + 952) = *(void *)(v0 + 480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 960) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10005F858;
  uint64_t v7 = *(void *)(v0 + 904);
  uint64_t v8 = *(void *)(v0 + 840);
  return sub_10005FE7C(v7, v8);
}

uint64_t sub_10005F858()
{
  *(void *)(*(void *)v1 + 968) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10005FD68;
  }
  else {
    uint64_t v2 = sub_10005F96C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005F96C()
{
  uint64_t v1 = *(void *)(v0 + 912);
  uint64_t v2 = *(void *)(v0 + 904);
  uint64_t v3 = *(void *)(v0 + 896);
  uint64_t v4 = *(void *)(v0 + 888);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  uint64_t v5 = *(void *)(v0 + 952);
  long long v13 = *(_OWORD *)(v0 + 920);
  long long v14 = *(_OWORD *)(v0 + 936);
  uint64_t v6 = sub_100012D78(*(void **)(v0 + 856), *(void *)(*(void *)(v0 + 856) + 24));
  *(_OWORD *)(v0 + 640) = v13;
  *(_OWORD *)(v0 + 656) = v14;
  *(void *)(v0 + 672) = v5;
  long long v7 = *(_OWORD *)(v0 + 600);
  *(_OWORD *)(v0 + 776) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 792) = v7;
  *(_OWORD *)(v0 + 808) = *(_OWORD *)(v0 + 616);
  *(unsigned char *)(v0 + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v0 + 632);
  long long v8 = *(_OWORD *)(v0 + 536);
  *(_OWORD *)(v0 + 712) = *(_OWORD *)(v0 + 520);
  *(_OWORD *)(v0 + 728) = v8;
  long long v9 = *(_OWORD *)(v0 + 568);
  *(_OWORD *)(v0 + 744) = *(_OWORD *)(v0 + 552);
  *(_OWORD *)(v0 + 760) = v9;
  long long v10 = *(_OWORD *)(v0 + 504);
  *(_OWORD *)(v0 + 680) = *(_OWORD *)(v0 + 488);
  *(_OWORD *)(v0 + 696) = v10;
  uint64_t v11 = *v6;
  *(void *)(v0 + 976) = *v6;
  return _swift_task_switch(sub_10005FA94, v11, 0);
}

uint64_t sub_10005FA94()
{
  uint64_t v1 = *(void *)(v0 + 880);
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v4 = *(void *)(v0 + 848);
  long long v5 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 160) = v5;
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 800);
  long long v6 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 96) = v6;
  long long v7 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 128) = v7;
  long long v8 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 32) = v8;
  long long v9 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 64) = v9;
  *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 809);
  *(void *)(v0 + 208) = v4;
  *(void *)(v0 + 216) = 0;
  *(_WORD *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 256;
  sub_10003675C(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 232);
  sub_10001547C(v0 + 640);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 640);
  return _swift_task_switch(sub_10005FBD4, 0, 0);
}

uint64_t sub_10005FBD4()
{
  uint64_t v1 = v0[114];
  uint64_t v2 = v0[112];
  uint64_t v3 = v0[111];
  sub_100012960(&qword_1001E1EC8);
  type metadata accessor for URLQueryItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100179990;
  PostbackConstants.reengagementOpenURLParameter.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URL.appending(queryItems:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10005FD68()
{
  uint64_t v1 = sub_100094708(*(void *)(v0 + 968));
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v8 = *(void *)(v0 + 920);
  long long v9 = sub_100012D78(*(void **)(v0 + 856), *(void *)(*(void *)(v0 + 856) + 24));
  *(void *)(v0 + 640) = v8;
  *(void *)(v0 + 648) = v1;
  *(void *)(v0 + 656) = v3;
  *(void *)(v0 + 664) = v5;
  *(void *)(v0 + 672) = v7;
  long long v10 = *(_OWORD *)(v0 + 600);
  *(_OWORD *)(v0 + 776) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 792) = v10;
  *(_OWORD *)(v0 + 808) = *(_OWORD *)(v0 + 616);
  *(unsigned char *)(v0 + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v0 + 632);
  long long v11 = *(_OWORD *)(v0 + 536);
  *(_OWORD *)(v0 + 712) = *(_OWORD *)(v0 + 520);
  *(_OWORD *)(v0 + 728) = v11;
  long long v12 = *(_OWORD *)(v0 + 568);
  *(_OWORD *)(v0 + 744) = *(_OWORD *)(v0 + 552);
  *(_OWORD *)(v0 + 760) = v12;
  long long v13 = *(_OWORD *)(v0 + 504);
  *(_OWORD *)(v0 + 680) = *(_OWORD *)(v0 + 488);
  *(_OWORD *)(v0 + 696) = v13;
  uint64_t v14 = *v9;
  *(void *)(v0 + 976) = *v9;
  return _swift_task_switch(sub_10005FA94, v14, 0);
}

uint64_t sub_10005FE7C(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  sub_100012960(&qword_1001E1170);
  v2[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URLQueryItem();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  sub_100012960(&qword_1001E1ED0);
  v2[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLComponents();
  v2[24] = v4;
  v2[25] = *(void *)(v4 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_100060060, 0, 0);
}

uint64_t sub_100060060()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100019960(v0[23], &qword_1001E1ED0);
    sub_10006193C();
    swift_allocError();
    *uint64_t v4 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  uint64_t v7 = v0 + 2;
  (*(void (**)(void, void, void))(v0[25] + 32))(v0[27], v0[23], v0[24]);
  uint64_t v8 = URLComponents.queryItems.modify();
  long long v9 = (void (*)(void *, void))v8;
  int v47 = v10;
  unint64_t v11 = *v10;
  if (!*v10) {
    goto LABEL_22;
  }
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    int64_t v27 = 0;
LABEL_21:
    sub_100061754(v12, v27);
LABEL_22:
    v9(v7, 0);
    long long v51 = (uint64_t (*)(char))((char *)&dword_1001E1EE0 + dword_1001E1EE0);
    long long v30 = (void *)swift_task_alloc();
    v0[28] = v30;
    *long long v30 = v0;
    v30[1] = sub_100060630;
    return v51(16);
  }
  BOOL v45 = (void (*)(void *, void))v8;
  uint64_t v13 = v0[14];
  uint64_t v15 = *(void (**)(void, unint64_t, void))(v13 + 16);
  v13 += 16;
  uint64_t v14 = v15;
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64);
  uint64_t v50 = *(void *)(v13 + 56);
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v13 - 8);
  swift_bridgeObjectRetain();
  unint64_t v17 = 0;
  unint64_t v46 = v16;
  uint64_t v49 = v15;
  while (1)
  {
    v14(v0[22], v11 + v16, v0[13]);
    uint64_t v18 = URLQueryItem.name.getter();
    uint64_t v20 = v19;
    uint64_t v21 = PostbackConstants.reengagementOpenURLParameter.unsafeMutableAddressor();
    uint64_t v22 = v0[22];
    uint64_t v23 = v0[13];
    if (v18 == *v21 && v20 == v21[1]) {
      break;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    unint64_t v26 = *v48;
    (*v48)(v22, v23);
    if (v25) {
      goto LABEL_17;
    }
    ++v17;
    uint64_t v14 = v49;
    v16 += v50;
    if (v12 == v17)
    {
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v27 = *(void *)(*v47 + 16);
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v26 = *v48;
  (*v48)(v22, v23);
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v27 = v17 + 1;
  if (__OFADD__(v17, 1)) {
    goto LABEL_56;
  }
  unint64_t v28 = *v47;
  unint64_t v29 = *(void *)(*v47 + 16);
  if (v27 != v29)
  {
    uint64_t v31 = v50 + v16;
    unint64_t v32 = v17 + 1;
    BOOL v44 = (uint64_t (**)(unint64_t, void, void))(v0[14] + 40);
    while (v32 < v29)
    {
      v49(v0[21], v28 + v31, v0[13]);
      uint64_t v33 = URLQueryItem.name.getter();
      uint64_t v35 = v0[21];
      uint64_t v36 = v0[13];
      if (v33 == *v21 && v34 == v21[1])
      {
        swift_bridgeObjectRelease();
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v26)(v35, v36);
      }
      else
      {
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v26)(v35, v36);
        if ((v38 & 1) == 0)
        {
          if (v32 != v17)
          {
            if ((v17 & 0x8000000000000000) != 0) {
              goto LABEL_51;
            }
            unint64_t v39 = *v47;
            unint64_t v40 = *(void *)(*v47 + 16);
            if (v17 >= v40) {
              goto LABEL_52;
            }
            uint64_t result = ((uint64_t (*)(void, unint64_t, void))v49)(v0[20], v39 + v46 + v17 * v50, v0[13]);
            if (v32 >= v40) {
              goto LABEL_53;
            }
            v49(v0[19], v39 + v31, v0[13]);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            unint64_t *v47 = v39;
            if ((result & 1) == 0)
            {
              uint64_t result = sub_100061130(v39);
              unint64_t v39 = result;
              unint64_t *v47 = result;
            }
            if (v17 >= *(void *)(v39 + 16)) {
              goto LABEL_54;
            }
            unint64_t v41 = v39 + v46 + v17 * v50;
            int v42 = *v44;
            uint64_t result = (*v44)(v41, v0[19], v0[13]);
            if (v32 >= *(void *)(*v47 + 16)) {
              goto LABEL_55;
            }
            uint64_t result = v42(*v47 + v31, v0[20], v0[13]);
          }
          if (__OFADD__(v17++, 1)) {
            goto LABEL_50;
          }
        }
      }
      int64_t v27 = v32 + 1;
      if (__OFADD__(v32, 1)) {
        goto LABEL_49;
      }
      unint64_t v28 = *v47;
      unint64_t v29 = *(void *)(*v47 + 16);
      ++v32;
      v31 += v50;
      if (v27 == v29) {
        goto LABEL_19;
      }
    }
    goto LABEL_48;
  }
LABEL_19:
  uint64_t v12 = v17;
LABEL_20:
  long long v9 = v45;
  uint64_t v7 = v0 + 2;
  if (v27 >= v12) {
    goto LABEL_21;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_100060630(uint64_t a1)
{
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100060730, 0, 0);
}

uint64_t sub_100060730()
{
  uint64_t v1 = v0[29];
  if (!v1)
  {
    uint64_t v56 = v0[27];
    uint64_t v58 = v0[24];
    uint64_t v57 = v0[25];
    sub_10006193C();
    swift_allocError();
    unsigned char *v59 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    goto LABEL_70;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_68:
    uint64_t v60 = v0[26];
    uint64_t v61 = v0[27];
    uint64_t v62 = v0[24];
    uint64_t v63 = v0[25];
    uint64_t v64 = v0[12];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v60, v61, v62);
    URLComponents.url.getter();
    char v65 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v65(v60, v62);
    uint64_t v66 = type metadata accessor for URL();
    uint64_t v67 = *(void *)(v66 - 8);
    int v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v64, 1, v66);
    uint64_t v69 = v0[27];
    if (v68 != 1)
    {
      uint64_t v73 = v0[24];
      (*(void (**)(void, void, uint64_t))(v67 + 32))(v0[10], v0[12], v66);
      v65(v69, v73);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v72 = (uint64_t (*)(void))v0[1];
      goto LABEL_72;
    }
    uint64_t v70 = v0[24];
    sub_100019960(v0[12], &qword_1001E1170);
    sub_10006193C();
    swift_allocError();
    *char v71 = 2;
    swift_willThrow();
    v65(v69, v70);
LABEL_70:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v72 = (uint64_t (*)(void))v0[1];
LABEL_72:
    return v72();
  }
  uint64_t v3 = v0 + 6;
  uint64_t v4 = v0[14];
  uint64_t v77 = v1 + 32;
  char v88 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v78 = v4;
  int v74 = (void (**)(unint64_t, void, void))(v4 + 40);
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  char v75 = v0 + 6;
  uint64_t v76 = v2;
  uint64_t v83 = v0;
  while (1)
  {
    uint64_t v81 = v5;
    long long v9 = (uint64_t *)(v77 + 16 * v5);
    uint64_t v10 = v9[1];
    uint64_t v90 = *v9;
    swift_bridgeObjectRetain();
    uint64_t v80 = (void (*)(void *, void))URLComponents.queryItems.modify();
    char v84 = v11;
    unint64_t v12 = *v11;
    if (*v11) {
      break;
    }
LABEL_8:
    uint64_t v5 = v81 + 1;
    v80(v3, 0);
    swift_bridgeObjectRelease();
    if (v81 + 1 == v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
  }
  uint64_t v87 = v10;
  if (!*(void *)(v12 + 16))
  {
    int64_t v17 = 0;
    int64_t v28 = 0;
    goto LABEL_53;
  }
  int64_t v85 = *(void *)(v12 + 16);
  unint64_t v13 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  unint64_t v14 = v12 + v13;
  uint64_t v15 = *(void *)(v78 + 72);
  unint64_t v16 = *(void (**)(void, void, void))(v78 + 16);
  swift_bridgeObjectRetain();
  int64_t v17 = 0;
  unint64_t v79 = v13;
  uint64_t v89 = v15;
  uint64_t v18 = v15 + v13;
  unint64_t v19 = 1;
  while (1)
  {
    uint64_t v20 = v16;
    v16(v83[18], v14, v83[13]);
    uint64_t v21 = URLQueryItem.name.getter();
    uint64_t v23 = v83[18];
    uint64_t v24 = v83[13];
    if (v21 == v90 && v22 == v10)
    {
      swift_bridgeObjectRelease();
      int64_t v27 = *v88;
      (*v88)(v23, v24);
      goto LABEL_23;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    int64_t v27 = *v88;
    (*v88)(v23, v24);
    if (v26) {
      break;
    }
    ++v17;
    v14 += v89;
    ++v19;
    v18 += v89;
    uint64_t v10 = v87;
    unint64_t v16 = v20;
    if (v85 == v17)
    {
      swift_bridgeObjectRelease();
      uint64_t v0 = v83;
      unint64_t v12 = *v84;
      int64_t v28 = *(void *)(*v84 + 16);
      int64_t v17 = v85;
      if (v28 >= v85) {
        goto LABEL_52;
      }
      goto LABEL_78;
    }
  }
  uint64_t v10 = v87;
LABEL_23:
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v28 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    return result;
  }
  long long v82 = v27;
  unint64_t v12 = *v84;
  unint64_t v30 = *(void *)(*v84 + 16);
  if (v28 == v30)
  {
    uint64_t v0 = v83;
    if (v28 >= v17) {
      goto LABEL_52;
    }
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v31 = v20;
  unint64_t v86 = v17;
  do
  {
    if (v19 >= v30)
    {
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    v31(v83[17], v12 + v18, v83[13]);
    uint64_t v32 = URLQueryItem.name.getter();
    uint64_t v34 = v83[17];
    uint64_t v35 = v83[13];
    if (v32 == v90 && v33 == v10)
    {
      swift_bridgeObjectRelease();
      v82(v34, v35);
LABEL_36:
      uint64_t v31 = v20;
      int64_t v28 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_76;
      }
      goto LABEL_50;
    }
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v82(v34, v35);
    if (v37)
    {
      uint64_t v10 = v87;
      goto LABEL_36;
    }
    unint64_t v38 = v86;
    uint64_t v10 = v87;
    uint64_t v31 = v20;
    if (v19 != v86)
    {
      if ((v86 & 0x8000000000000000) != 0) {
        goto LABEL_81;
      }
      unint64_t v39 = *v84;
      unint64_t v40 = *(void *)(*v84 + 16);
      if (v86 >= v40) {
        goto LABEL_82;
      }
      v20(v83[16], v39 + v79 + v86 * v89, v83[13]);
      if (v19 >= v40) {
        goto LABEL_83;
      }
      v20(v83[15], v39 + v18, v83[13]);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *char v84 = v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v39 = sub_100061130(v39);
        *char v84 = v39;
      }
      uint64_t v10 = v87;
      if (v86 >= *(void *)(v39 + 16)) {
        goto LABEL_84;
      }
      unint64_t v42 = v39 + v79 + v86 * v89;
      uint64_t v43 = *v74;
      (*v74)(v42, v83[15], v83[13]);
      if (v19 >= *(void *)(*v84 + 16)) {
        goto LABEL_85;
      }
      v43(*v84 + v18, v83[16], v83[13]);
      unint64_t v38 = v86;
    }
    BOOL v7 = __OFADD__(v38, 1);
    unint64_t v44 = v38 + 1;
    if (v7) {
      goto LABEL_77;
    }
    unint64_t v86 = v44;
    int64_t v28 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      goto LABEL_76;
    }
LABEL_50:
    unint64_t v12 = *v84;
    unint64_t v30 = *(void *)(*v84 + 16);
    ++v19;
    v18 += v89;
  }
  while (v28 != v30);
  int64_t v17 = v86;
  uint64_t v0 = v83;
  if (v28 < (uint64_t)v86) {
    goto LABEL_78;
  }
LABEL_52:
  if (v17 < 0) {
    goto LABEL_79;
  }
LABEL_53:
  int64_t v45 = v17;
  int64_t v46 = v17 - v28;
  int64_t v47 = v28 + v46;
  if (__OFADD__(v28, v46)) {
    goto LABEL_80;
  }
  int v48 = swift_isUniquelyReferenced_nonNull_native();
  if (!v48 || v47 > *(void *)(v12 + 24) >> 1)
  {
    if (v28 <= v47) {
      int64_t v49 = v28 + v46;
    }
    else {
      int64_t v49 = v28;
    }
    unint64_t v12 = sub_100139E78(v48, v49, 1, v12);
  }
  unint64_t v50 = v12 + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
  uint64_t v51 = *(void *)(v78 + 72);
  uint64_t v52 = v45;
  int64_t v53 = v51 * v45;
  unint64_t v54 = v50 + v51 * v45;
  swift_arrayDestroy();
  if (v28 == v52)
  {
LABEL_7:
    *char v84 = v12;
    uint64_t v3 = v75;
    uint64_t v2 = v76;
    goto LABEL_8;
  }
  uint64_t v55 = *(void *)(v12 + 16) - v28;
  if (v55 >= 0)
  {
    if (v53 < v51 * v28 || v54 >= v50 + v51 * v28 + v55 * v51)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v53 != v51 * v28)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v6 = *(void *)(v12 + 16);
    BOOL v7 = __OFADD__(v6, v46);
    uint64_t v8 = v6 + v46;
    if (!v7)
    {
      *(void *)(v12 + 16) = v8;
      goto LABEL_7;
    }
LABEL_86:
    __break(1u);
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_100061058(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_100012960(&qword_1001E12E8);
    uint64_t v6 = swift_allocError();
    *BOOL v7 = a4;
    id v8 = a4;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    if (a2)
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 64) + 40);
      *(void *)uint64_t v9 = a2;
      *(unsigned char *)(v9 + 8) = a3;
      id v10 = a2;
      a1 = v4;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

void *sub_10006111C(void *a1)
{
  return sub_100139D3C(0, a1[2], 0, a1);
}

uint64_t sub_100061130(unint64_t a1)
{
  return sub_100139E78(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100061144(char a1)
{
  *(unsigned char *)(v1 + 129) = a1;
  return _swift_task_switch(sub_100061164, 0, 0);
}

uint64_t sub_100061164()
{
  char v1 = *(unsigned char *)(v0 + 129);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self bagForProfile:v2 profileVersion:v3];

  sub_1001122C8(v1);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 arrayForKey:v5];
  *(void *)(v0 + 136) = v6;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100061328;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_100061058;
  *(void *)(v0 + 104) = &unk_1001C4EB0;
  *(void *)(v0 + 112) = v7;
  [v6 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100061328()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    NSString v2 = sub_1000614C4;
  }
  else {
    NSString v2 = sub_100061438;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100061438()
{
  id v1 = *(id *)(v0 + 120);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  NSString v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000614C4()
{
  uint64_t v14 = v0;
  id v1 = *(void **)(v0 + 136);
  swift_willThrow();

  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E5FC8);
  swift_errorRetain();
  swift_errorRetain();
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = *(unsigned char *)(v0 + 129);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    unint64_t v8 = sub_1001122C8(v5);
    *(void *)(v0 + 80) = sub_100147668(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to get bag value for key %s, error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11(0);
}

uint64_t sub_100061754(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_100139E78(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for URLQueryItem() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10006193C()
{
  unint64_t result = qword_1001E1ED8;
  if (!qword_1001E1ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1ED8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LinkPrivacyManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100061A5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkPrivacyManagerError()
{
  return &type metadata for LinkPrivacyManagerError;
}

uint64_t destroy for LinkPrivacyManager(uint64_t a1)
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 40);
}

uint64_t initializeWithCopy for LinkPrivacyManager(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for LinkPrivacyManager(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 initializeWithTake for LinkPrivacyManager(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for LinkPrivacyManager(uint64_t a1, uint64_t a2)
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkPrivacyManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkPrivacyManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkPrivacyManager()
{
  return &type metadata for LinkPrivacyManager;
}

unint64_t sub_100061CD4(uint64_t a1)
{
  unint64_t result = sub_10006193C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100061D00()
{
  unint64_t result = qword_1001E1EE8;
  if (!qword_1001E1EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1EE8);
  }
  return result;
}

uint64_t sub_100061D54(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  long long v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    long long v4 = sub_1001393C4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100062060()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AllocatedTokenMetadataEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AllocatedTokenMetadataEntity()
{
  return self;
}

unint64_t sub_1000620BC()
{
  unint64_t result = qword_1001E1F18;
  if (!qword_1001E1F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1F18);
  }
  return result;
}

id sub_1000621A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TokenHandoffServiceListenerDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TokenHandoffServiceListenerDelegate()
{
  return self;
}

uint64_t sub_100062208(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = sub_10006F74C();
  if (v8)
  {
    int64_t v9 = self;
    id v10 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon17XPCClientProtocol_];
    [a1 setRemoteObjectInterface:v10];

    id v11 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon27TokenHandoffServiceProtocol_];
    [a1 setExportedInterface:v11];

    [a1 setExportedObject:*(void *)(v2 + OBJC_IVAR____TtC20AttributionKitDaemon35TokenHandoffServiceListenerDelegate_serviceBridge)];
    [a1 resume];
    id v12 = [a1 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100012960((uint64_t *)&unk_1001E1FD0);
    if (swift_dynamicCast())
    {
      swift_getObjectType();
      XPCClientProtocol.handleMessage(_:)(0, 0);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v13 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
    BOOL v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing entitlement for TokenHandoffService", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v8 & 1;
}

unint64_t sub_1000624BC()
{
  unint64_t result = qword_1001E1FE0;
  if (!qword_1001E1FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1FE0);
  }
  return result;
}

unint64_t sub_100062514()
{
  unint64_t result = qword_1001E1FE8;
  if (!qword_1001E1FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E1FE8);
  }
  return result;
}

unint64_t sub_100062568(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100062598();
  unint64_t result = sub_100024328();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100062598()
{
  unint64_t result = qword_1001E2038;
  if (!qword_1001E2038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2038);
  }
  return result;
}

uint64_t sub_1000625EC(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E2068);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_100062514();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10006274C(char *a1, char *a2)
{
  return sub_100104F70(*a1, *a2);
}

Swift::Int sub_100062758()
{
  return Hasher._finalize()();
}

uint64_t sub_1000627E0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100062854()
{
  return Hasher._finalize()();
}

uint64_t sub_1000628D8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0A00, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100062938(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x64695F6D657469;
  if (*v1) {
    uint64_t v2 = 0x695F656C646E7562;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE900000000000064;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10006297C()
{
  if (*v0) {
    return 0x695F656C646E7562;
  }
  else {
    return 0x64695F6D657469;
  }
}

uint64_t sub_1000629BC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0A00, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100062A20(void *a1@<X8>)
{
  *a1 = &off_1001C0A50;
}

uint64_t sub_100062A30(uint64_t a1)
{
  unint64_t v2 = sub_100062514();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100062A6C(uint64_t a1)
{
  unint64_t v2 = sub_100062514();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100062AA8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100062C18(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100062AF0(void *a1)
{
  return sub_1000625EC(a1);
}

unint64_t sub_100062B0C()
{
  unint64_t result = qword_1001E2040;
  if (!qword_1001E2040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2040);
  }
  return result;
}

unint64_t sub_100062B64()
{
  unint64_t result = qword_1001E2048;
  if (!qword_1001E2048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2048);
  }
  return result;
}

unint64_t sub_100062BBC()
{
  unint64_t result = qword_1001E2050;
  if (!qword_1001E2050)
  {
    sub_100011ECC(&qword_1001E2058);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2050);
  }
  return result;
}

uint64_t sub_100062C18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E2060);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_100062514();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v16 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v15 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
  *(void *)(a2 + 32) = v12;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ItemIdentifierBundleIDMapModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100062E9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ItemIdentifierBundleIDMapModel.CodingKeys()
{
  return &type metadata for ItemIdentifierBundleIDMapModel.CodingKeys;
}

uint64_t destroy for ItemIdentifierBundleIDMapModel()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ItemIdentifierBundleIDMapModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ItemIdentifierBundleIDMapModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ItemIdentifierBundleIDMapModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemIdentifierBundleIDMapModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ItemIdentifierBundleIDMapModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ItemIdentifierBundleIDMapModel()
{
  return &type metadata for ItemIdentifierBundleIDMapModel;
}

unint64_t sub_100063070()
{
  unint64_t result = qword_1001E2070;
  if (!qword_1001E2070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E2070);
  }
  return result;
}

uint64_t sub_1000630C4()
{
  *(void *)(v1 + 176) = v0;
  return _swift_task_switch(sub_100063154, 0, 0);
}

void sub_100063154()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t Task = (int *)type metadata accessor for PostbackFetchTask();
  uint64_t v46 = v1 + Task[5];
  char v3 = *(unsigned char *)(v46 + 97);
  unsigned int v4 = (void *)(v1 + Task[8]);
  if (*v4 == 0xD000000000000012 && v4[1] == 0x8000000100185D10)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    int v5 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    uint64_t v1 = *(void *)(v0 + 176);
  }
  uint64_t v6 = *(void *)(v1 + Task[7]);
  int64_t v7 = *(void *)(v6 + 16);
  uint64_t v49 = v0;
  unint64_t v50 = Task;
  char v48 = v5;
  char v47 = v3;
  if (v7)
  {
    swift_bridgeObjectRetain();
    sub_10013A610(0, v7, 0);
    uint64_t v8 = 0;
    uint64_t v9 = &_swiftEmptyArrayStorage;
    unint64_t v10 = *((void *)&_swiftEmptyArrayStorage + 2);
    uint64_t v83 = 208 * v10 + 233;
    int64_t v79 = v7 - 1;
    uint64_t v51 = v6;
    while (1)
    {
      uint64_t v52 = v8;
      uint64_t v11 = v6 + v8;
      uint64_t v12 = *(void *)(v6 + v8 + 40);
      uint64_t v61 = *(void *)(v6 + v8 + 48);
      uint64_t v62 = *(void *)(v6 + v8 + 32);
      uint64_t v13 = *(void *)(v6 + v8 + 56);
      uint64_t v14 = *(void *)(v11 + 64);
      uint64_t v59 = *(void *)(v11 + 72);
      uint64_t v60 = v13;
      uint64_t v63 = *(void *)(v11 + 88);
      char v57 = *(unsigned char *)(v11 + 96);
      char v58 = *(unsigned char *)(v11 + 80);
      uint64_t v15 = *(void *)(v11 + 112);
      uint64_t v16 = *(void *)(v11 + 128);
      uint64_t v67 = *(void *)(v11 + 120);
      uint64_t v68 = *(void *)(v11 + 104);
      uint64_t v17 = *(void *)(v11 + 152);
      uint64_t v65 = *(void *)(v11 + 144);
      uint64_t v66 = *(void *)(v11 + 136);
      uint64_t v64 = *(void *)(v11 + 160);
      uint64_t v18 = *(void *)(v11 + 184);
      uint64_t v70 = *(void *)(v11 + 176);
      uint64_t v69 = *(void *)(v11 + 192);
      char v55 = *(unsigned char *)(v11 + 200);
      char v56 = *(unsigned char *)(v11 + 168);
      uint64_t v19 = *(void *)(v11 + 216);
      uint64_t v72 = *(void *)(v11 + 208);
      uint64_t v71 = *(void *)(v11 + 224);
      char v54 = *(unsigned char *)(v11 + 232);
      char v76 = *(unsigned char *)(v11 + 233);
      unint64_t v86 = v9;
      unint64_t v20 = v9[3];
      uint64_t v21 = v9;
      uint64_t v53 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = v21;
      if (v10 >= v20 >> 1)
      {
        sub_10013A610(v20 > 1, v10 + 1, 1);
        uint64_t v9 = v86;
      }
      _OWORD v9[2] = v10 + 1;
      BOOL v22 = (char *)v9 + v83;
      *(void *)(v22 - 201) = v62;
      *(void *)(v22 - 193) = v53;
      *(void *)(v22 - 185) = v61;
      *(void *)(v22 - 177) = v60;
      *(void *)(v22 - 169) = v14;
      *(void *)(v22 - 161) = v59;
      *(v22 - 153) = v58;
      *(_DWORD *)(v22 - 149) = *(_DWORD *)&v87[3];
      *((_DWORD *)v22 - 38) = *(_DWORD *)v87;
      *(void *)(v22 - 145) = v63;
      *(v22 - 137) = v57;
      *(_DWORD *)(v22 - 133) = *(_DWORD *)&v88[3];
      *((_DWORD *)v22 - 34) = *(_DWORD *)v88;
      *(void *)(v22 - 129) = v68;
      *(void *)(v22 - 121) = v15;
      *(void *)(v22 - 113) = v67;
      *(void *)(v22 - 105) = v16;
      *(void *)(v22 - 97) = v66;
      *(void *)(v22 - 89) = v65;
      *(void *)(v22 - 81) = v17;
      *(void *)(v22 - 73) = v64;
      *(v22 - 65) = v56;
      *(_DWORD *)(v22 - 61) = *(_DWORD *)&v89[3];
      *((_DWORD *)v22 - 16) = *(_DWORD *)v89;
      *(void *)(v22 - 57) = v70;
      *(void *)(v22 - 49) = v18;
      *(void *)(v22 - 41) = v69;
      *(v22 - 33) = v55;
      *(_DWORD *)(v22 - 29) = *(_DWORD *)&v90[3];
      *((_DWORD *)v22 - 8) = *(_DWORD *)v90;
      *(void *)(v22 - 25) = v72;
      *(void *)(v22 - 17) = v19;
      *(void *)(v22 - 9) = v71;
      *(v22 - 1) = v54;
      unsigned char *v22 = v76;
      if (!v79) {
        break;
      }
      --v79;
      v83 += 208;
      uint64_t v6 = v51;
      uint64_t v8 = v52 + 224;
      ++v10;
    }
    uint64_t v73 = v9;
    swift_bridgeObjectRelease();
    uint64_t v0 = v49;
    uint64_t v1 = *(void *)(v49 + 176);
  }
  else
  {
    uint64_t v73 = &_swiftEmptyArrayStorage;
  }
  uint64_t v23 = *(void *)(v1 + Task[6]);
  int64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    swift_bridgeObjectRetain();
    sub_10013A5F0(0, v24, 0);
    uint64_t v25 = 0;
    unint64_t v26 = *((void *)&_swiftEmptyArrayStorage + 2);
    uint64_t v27 = 48 * v26 + 40;
    uint64_t v74 = v23;
    do
    {
      uint64_t v28 = *(void *)(v23 + v25 + 40);
      char v29 = *(unsigned char *)(v23 + v25 + 48);
      uint64_t v84 = *(void *)(v23 + v25 + 56);
      uint64_t v30 = *(void *)(v23 + v25 + 72);
      uint64_t v77 = *(void *)(v23 + v25 + 32);
      uint64_t v80 = *(void *)(v23 + v25 + 64);
      int64_t v31 = v26 + 1;
      unint64_t v32 = *((void *)&_swiftEmptyArrayStorage + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v26 >= v32 >> 1) {
        sub_10013A5F0(v32 > 1, v31, 1);
      }
      *((void *)&_swiftEmptyArrayStorage + 2) = v31;
      uint64_t v33 = (char *)&_swiftEmptyArrayStorage + v27;
      *((void *)v33 - 1) = v77;
      *(void *)uint64_t v33 = v28;
      v33[8] = v29;
      v27 += 48;
      *((void *)v33 + 2) = v84;
      *((void *)v33 + 3) = v80;
      v25 += 64;
      ++v26;
      *((void *)v33 + 4) = v30;
      --v24;
      uint64_t v23 = v74;
    }
    while (v24);
    swift_bridgeObjectRelease();
    uint64_t v0 = v49;
    uint64_t Task = v50;
    uint64_t v1 = *(void *)(v49 + 176);
  }
  uint64_t v34 = *(void *)(v46 + 48);
  uint64_t v81 = *(void *)(v46 + 40);
  uint64_t v85 = *(void *)(v46 + 32);
  uint64_t v35 = *(void *)(v46 + 64);
  uint64_t v75 = *(void *)(v46 + 56);
  char v36 = *(unsigned char *)(v46 + 96);
  uint64_t v38 = *(void *)(v46 + 72);
  uint64_t v37 = *(void *)(v46 + 80);
  uint64_t v39 = *(void *)(v46 + 88);
  if (*(unsigned __int8 *)(v1 + Task[10]) >= 2u) {
    char v40 = 2;
  }
  else {
    char v40 = v47;
  }
  char v78 = v40;
  if (*(unsigned __int8 *)(v1 + Task[10]) >= 2u) {
    char v41 = v47;
  }
  else {
    char v41 = 2;
  }
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  *(void *)(v0 + 16) = v85;
  *(void *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v81;
  *(void *)(v0 + 32) = v34;
  *(void *)(v0 + 40) = v75;
  *(void *)(v0 + 48) = v35;
  *(unsigned char *)(v0 + 56) = v36;
  *(void *)(v0 + 64) = v38;
  *(void *)(v0 + 72) = v37;
  *(void *)(v0 + 80) = v39;
  *(unsigned char *)(v0 + 88) = v41;
  *(void *)(v0 + 96) = v73;
  *(void *)(v0 + 104) = &_swiftEmptyArrayStorage;
  *(unsigned char *)(v0 + 112) = v48 & 1;
  *(unsigned char *)(v0 + 113) = v78;
  sub_100066038();
  *(void *)(v0 + 184) = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 192) = v42;
  uint64_t v43 = *(void *)(v0 + 176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v44 = *(void *)(v43 + v50[9] + 8);
  uint64_t v82 = *(void *)(v44 + 16) + **(int **)(v44 + 16);
  int64_t v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v45;
  void *v45 = v0;
  v45[1] = sub_100063908;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_100063908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = (void *)*v4;
  v5[26] = a1;
  v5[27] = a2;
  v5[28] = a3;
  v5[29] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_10006400C;
  }
  else {
    uint64_t v6 = sub_100063A4C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100063A4C()
{
  uint64_t v46 = v0;
  if ([*(id *)(v0 + 224) statusCode] != (id)200)
  {
    if (qword_1001E08E8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100012E74(v19, (uint64_t)qword_1001E5FE0);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      BOOL v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "The call failed", v22, 2u);
      swift_slowDealloc();
    }
    unint64_t v23 = *(void *)(v0 + 216);
    int64_t v24 = *(void **)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 184);
    unint64_t v26 = *(void *)(v0 + 192);

    sub_10006608C();
    swift_allocError();
    char v29 = 4;
LABEL_19:
    char *v28 = v29;
    swift_willThrow();

    sub_100020930(v25, v23);
    goto LABEL_20;
  }
  uint64_t v1 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 152) = 0;
  id v3 = [v1 JSONObjectWithData:isa options:0 error:v0 + 152];

  unsigned int v4 = *(void **)(v0 + 152);
  if (v3)
  {
    id v5 = v4;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100012960(&qword_1001E2090);
    if (swift_dynamicCast())
    {
      if (qword_1001E08E8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100012E74(v6, (uint64_t)qword_1001E5FE0);
      swift_bridgeObjectRetain();
      int64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      BOOL v9 = os_log_type_enabled(v7, v8);
      unint64_t v10 = *(void **)(v0 + 224);
      uint64_t v12 = *(void *)(v0 + 184);
      unint64_t v11 = *(void *)(v0 + 192);
      if (v9)
      {
        unint64_t v44 = *(void *)(v0 + 192);
        uint64_t v43 = *(void *)(v0 + 184);
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v14 = Dictionary.description.getter();
        unint64_t v16 = v15;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 168) = sub_100147668(v14, v16, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "This is what we got %s", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v17 = v43;
        unint64_t v18 = v44;
      }
      else
      {
        swift_bridgeObjectRelease_n();

        uint64_t v17 = v12;
        unint64_t v18 = v11;
      }
      sub_100020930(v17, v18);

      char v40 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      uint64_t v41 = *(void *)(v0 + 208);
      uint64_t v42 = *(void *)(v0 + 216);
      return v40(v41, v42);
    }
    if (qword_1001E08E8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100012E74(v34, (uint64_t)qword_1001E5FE0);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Decoding response failed", v37, 2u);
      swift_slowDealloc();
    }
    unint64_t v23 = *(void *)(v0 + 216);
    int64_t v24 = *(void **)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 184);
    unint64_t v26 = *(void *)(v0 + 192);

    sub_10002082C();
    swift_allocError();
    char v29 = 1;
    goto LABEL_19;
  }
  unint64_t v30 = *(void *)(v0 + 216);
  int64_t v31 = *(void **)(v0 + 224);
  uint64_t v32 = *(void *)(v0 + 208);
  uint64_t v27 = *(void *)(v0 + 184);
  unint64_t v26 = *(void *)(v0 + 192);
  id v33 = v4;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_100020930(v32, v30);

LABEL_20:
  sub_100020930(v27, v26);
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_10006400C()
{
  sub_100020930(v0[23], v0[24]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t type metadata accessor for PostbackFetchTask()
{
  uint64_t result = qword_1001E20F0;
  if (!qword_1001E20F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000640E8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E2230);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000692A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[6] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    void v11[5] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    void v11[4] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[3] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[2] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[1] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100059F98(v3 + 72, (uint64_t)&v12, &qword_1001E21B0);
    sub_100059F98((uint64_t)&v12, (uint64_t)v11, &qword_1001E21B0);
    v10[7] = 6;
    sub_10003DD94();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100064348(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000643F4;
  v3[22] = v1;
  return _swift_task_switch(sub_100063154, 0, 0);
}

uint64_t sub_1000643F4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (!v2)
  {
    os_log_type_t v8 = *(void **)(v6 + 16);
    void *v8 = a1;
    v8[1] = a2;
  }
  BOOL v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t sub_100064510(unsigned __int8 *a1, char *a2)
{
  return sub_100107518(*a1, *a2);
}

Swift::Int sub_10006451C()
{
  return sub_10010AC70();
}

uint64_t sub_100064528()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10006467C()
{
  return sub_10010AC70();
}

unint64_t sub_100064684@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100067748(*a1);
  *a2 = result;
  return result;
}

void sub_1000646B4(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEF7265696669746ELL;
  uint64_t v3 = 0x6564692D6D657469;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED00007475706E69;
      uint64_t v3 = 0x2D65746176697270;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x65696C632D667270;
      *(void *)(a1 + 8) = 0xEA0000000000746ELL;
      break;
    case 3:
      strcpy((char *)a1, "is-redownload");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 4:
      *(void *)a1 = 0x6D617473656D6974;
      *(void *)(a1 + 8) = 0xE900000000000070;
      break;
    case 5:
      *(void *)a1 = 0x6369666974726563;
      *(void *)(a1 + 8) = 0xEB00000000657461;
      break;
    case 6:
      *(void *)a1 = 0x6D6E6F7269766E65;
      *(void *)(a1 + 8) = 0xEB00000000746E65;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1000647EC()
{
  uint64_t result = 0x6564692D6D657469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x2D65746176697270;
      break;
    case 2:
      uint64_t result = 0x65696C632D667270;
      break;
    case 3:
      uint64_t result = 0x776F6465722D7369;
      break;
    case 4:
      uint64_t result = 0x6D617473656D6974;
      break;
    case 5:
      uint64_t result = 0x6369666974726563;
      break;
    case 6:
      uint64_t result = 0x6D6E6F7269766E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10006490C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100067748(a1);
  *a2 = result;
  return result;
}

void sub_100064934(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100064940(uint64_t a1)
{
  unint64_t v2 = sub_1000692A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006497C(uint64_t a1)
{
  unint64_t v2 = sub_1000692A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1000649B8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100067794(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 57) = *(_OWORD *)((char *)v7 + 9);
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100064A04(void *a1)
{
  return sub_1000640E8(a1);
}

unint64_t sub_100064A48(char a1)
{
  unint64_t result = 0x642D656372756F73;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64692D6D616461;
      break;
    case 2:
      unint64_t result = 0x6F7774656E2D6461;
      break;
    case 3:
      unint64_t result = 0x6E676961706D6163;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x6973736572706D69;
      break;
    case 7:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 8:
      unint64_t result = 0x727574616E676973;
      break;
    case 9:
      unint64_t result = 0x612D6E696769726FLL;
      break;
    case 10:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 11:
      unint64_t result = 0x7974696C65646966;
      break;
    case 12:
      unint64_t result = 0xD000000000000010;
      break;
    case 13:
      unint64_t result = 0x676E69726564726FLL;
      break;
    case 14:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100064C78(char a1)
{
  unint64_t result = 0x642D656372756F73;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64692D6D616461;
      break;
    case 2:
      unint64_t result = 0x6F7774656E2D6461;
      break;
    case 3:
      unint64_t result = 0x6E676961706D6163;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x6973736572706D69;
      break;
    case 7:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 8:
      unint64_t result = 0x727574616E676973;
      break;
    case 9:
      unint64_t result = 0x612D6E696769726FLL;
      break;
    case 10:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 11:
      unint64_t result = 0x7974696C65646966;
      break;
    case 12:
      unint64_t result = 0xD000000000000010;
      break;
    case 13:
      unint64_t result = 0x676E69726564726FLL;
      break;
    case 14:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100064EA8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E21C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_100068590();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100059F98(v3 + 201, (uint64_t)&v12, &qword_1001E16E8);
    sub_100059F98((uint64_t)&v12, (uint64_t)&v11, &qword_1001E16E8);
    v10[13] = 14;
    sub_100046408();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10006525C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E21E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000688BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  unsigned char v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    unsigned char v10[14] = *(unsigned char *)(v3 + 16);
    v10[13] = 1;
    sub_1000462F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[12] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[11] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100065424(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100064A48(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100064A48(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000654B0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100064A48(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100065514()
{
  sub_100064A48(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100065568()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100064A48(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1000655C8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100067B9C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000655F8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100064A48(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100065624()
{
  return sub_100064C78(*v0);
}

unint64_t sub_10006562C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100067B9C(a1);
  *a2 = result;
  return result;
}

void sub_100065654(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_100065660(uint64_t a1)
{
  unint64_t v2 = sub_100068590();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006569C(uint64_t a1)
{
  unint64_t v2 = sub_100068590();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1000656D8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100067BE8(a1, v10);
  if (!v2)
  {
    long long v5 = v11[0];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 186) = *(_OWORD *)((char *)v11 + 10);
    long long v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    long long v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    long long v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    long long v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100065744(void *a1)
{
  return sub_100064EA8(a1);
}

uint64_t sub_1000657A8(unsigned __int8 *a1, char *a2)
{
  return sub_10010501C(*a1, *a2);
}

Swift::Int sub_1000657B4()
{
  return sub_100108F48();
}

uint64_t sub_1000657BC()
{
  return sub_100109940();
}

Swift::Int sub_1000657C4()
{
  return sub_10010B94C();
}

unint64_t sub_1000657CC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000685E4(*a1);
  *a2 = result;
  return result;
}

void sub_1000657FC(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEA0000000000676ELL;
  unint64_t v3 = 0x697274732D73776ALL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x8000000100184BF0;
      unint64_t v3 = 0xD000000000000013;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "ordering-index");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 3:
      *(void *)a1 = 0xD000000000000016;
      *(void *)(a1 + 8) = 0x8000000100184C10;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unint64_t sub_1000658B4()
{
  unint64_t result = 0x697274732D73776ALL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x676E69726564726FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100065960@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000685E4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100065988(uint64_t a1)
{
  unint64_t v2 = sub_1000688BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000659C4(uint64_t a1)
{
  unint64_t v2 = sub_1000688BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100065A00@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100068630(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100065A44(void *a1)
{
  return sub_10006525C(a1);
}

unint64_t sub_100065A5C(char a1)
{
  unint64_t result = 0x6E692D6E656B6F74;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6973736572706D69;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100065B2C(char a1)
{
  unint64_t result = 0x6E692D6E656B6F74;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6973736572706D69;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100065BFC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E2168);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_100067580();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = *(_OWORD *)(v3 + 48);
  v14[2] = *(_OWORD *)(v3 + 32);
  *(_OWORD *)unint64_t v15 = v9;
  *(_OWORD *)&v15[9] = *(_OWORD *)(v3 + 57);
  long long v10 = *(_OWORD *)(v3 + 16);
  v14[0] = *(_OWORD *)v3;
  v14[1] = v10;
  char v13 = 0;
  sub_1000675D4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&v14[0] = *(void *)(v3 + 88);
    char v13 = 1;
    sub_100012960(&qword_1001E2180);
    sub_10006767C(&qword_1001E2188, &qword_1001E2180, (void (*)(void))sub_100067628);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&v14[0] = *(void *)(v3 + 80);
    char v13 = 2;
    sub_100012960(&qword_1001E2198);
    sub_10006767C(&qword_1001E21A0, &qword_1001E2198, (void (*)(void))sub_1000676F4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100059F98(v3 + 97, (uint64_t)&v16, &qword_1001E21B0);
    sub_100059F98((uint64_t)&v16, (uint64_t)v14, &qword_1001E21B0);
    char v13 = 4;
    sub_10003DD94();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100065EC4(unsigned __int8 *a1, char *a2)
{
  return sub_100105F40(*a1, *a2);
}

Swift::Int sub_100065ED0()
{
  return sub_100109040();
}

uint64_t sub_100065ED8()
{
  return sub_100109D58();
}

Swift::Int sub_100065EE0()
{
  return sub_10010B3B0();
}

unint64_t sub_100065EE8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100069254(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100065F18@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100065A5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100065F44()
{
  return sub_100065B2C(*v0);
}

unint64_t sub_100065F4C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100069254(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100065F74(uint64_t a1)
{
  unint64_t v2 = sub_100067580();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100065FB0(uint64_t a1)
{
  unint64_t v2 = sub_100067580();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100065FEC(void *a1)
{
  return sub_100065BFC(a1);
}

unint64_t sub_100066038()
{
  unint64_t result = qword_1001E2080;
  if (!qword_1001E2080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2080);
  }
  return result;
}

unint64_t sub_10006608C()
{
  unint64_t result = qword_1001E2088;
  if (!qword_1001E2088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2088);
  }
  return result;
}

uint64_t initializeWithCopy for SKANImpressionRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v8;
  uint64_t v9 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v9;
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SKANImpressionRequestBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v6;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v7;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v8;
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  return a1;
}

__n128 initializeWithTake for SKANImpressionRequestBody(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 186) = *(_OWORD *)(a2 + 186);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for SKANImpressionRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v8 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for SKANImpressionRequestBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 202)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKANImpressionRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 200) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 202) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 202) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKANImpressionRequestBody()
{
  return &type metadata for SKANImpressionRequestBody;
}

uint64_t initializeWithCopy for BlueDogImpressionRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BlueDogImpressionRequestBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BlueDogImpressionRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BlueDogImpressionRequestBody()
{
  return &type metadata for BlueDogImpressionRequestBody;
}

uint64_t destroy for PostbackRequestBody()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PostbackRequestBody(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PostbackRequestBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  return a1;
}

__n128 initializeWithTake for PostbackRequestBody(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for PostbackRequestBody(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackRequestBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 98)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 98) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 98) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackRequestBody()
{
  return &type metadata for PostbackRequestBody;
}

unsigned char *storeEnumTagSinglePayload for PostbackFetchTaskError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100066AC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackFetchTaskError()
{
  return &type metadata for PostbackFetchTaskError;
}

void *sub_100066AF8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    long long v10 = (char *)a1 + v8;
    char v11 = (char *)a2 + v8;
    *(void *)long long v10 = *(void *)v11;
    unsigned char v10[8] = v11[8];
    uint64_t v12 = *((void *)v11 + 3);
    *((void *)v10 + 2) = *((void *)v11 + 2);
    *((void *)v10 + 3) = v12;
    *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
    uint64_t v13 = *((void *)v11 + 7);
    *((void *)v10 + 6) = *((void *)v11 + 6);
    *((void *)v10 + 7) = v13;
    *((void *)v10 + 8) = *((void *)v11 + 8);
    *(_OWORD *)(v10 + 72) = *(_OWORD *)(v11 + 72);
    *((void *)v10 + 11) = *((void *)v11 + 11);
    v10[96] = v11[96];
    v10[97] = v11[97];
    v10[98] = v11[98];
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    uint64_t v14 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    unint64_t v15 = (void *)((char *)a1 + v14);
    char v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *unint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[10];
    *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
    *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100066CA0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100066D60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = *(void *)(v10 + 24);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  uint64_t v12 = *(void *)(v10 + 56);
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(void *)(v9 + 56) = v12;
  *(void *)(v9 + 64) = *(void *)(v10 + 64);
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(v10 + 72);
  *(void *)(v9 + 88) = *(void *)(v10 + 88);
  *(unsigned char *)(v9 + 96) = *(unsigned char *)(v10 + 96);
  *(unsigned char *)(v9 + 97) = *(unsigned char *)(v10 + 97);
  *(unsigned char *)(v9 + 98) = *(unsigned char *)(v10 + 98);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v13 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v14 = (void *)(a1 + v13);
  unint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100066EB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7);
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 56) = *(void *)(v9 + 56);
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 72) = *(void *)(v9 + 72);
  *(void *)(v8 + 80) = *(void *)(v9 + 80);
  *(void *)(v8 + 88) = *(void *)(v9 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 96) = *(unsigned char *)(v9 + 96);
  *(unsigned char *)(v8 + 97) = *(unsigned char *)(v9 + 97);
  *(unsigned char *)(v8 + 98) = *(unsigned char *)(v9 + 98);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100067070(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v11;
  *(_DWORD *)(v9 + 95) = *(_DWORD *)(v10 + 95);
  long long v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v12;
  long long v13 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v13;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  return a1;
}

uint64_t sub_10006713C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(a2 + v7 + 8);
  uint64_t v10 = *(void *)(a2 + v7 + 24);
  *(void *)(v8 + 16) = *(void *)(a2 + v7 + 16);
  *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v9 + 64);
  *(void *)(v8 + 56) = *(void *)(v9 + 56);
  *(void *)(v8 + 64) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
  *(void *)(v8 + 88) = *(void *)(v9 + 88);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 96) = *(unsigned char *)(v9 + 96);
  *(unsigned char *)(v8 + 97) = *(unsigned char *)(v9 + 97);
  *(unsigned char *)(v8 + 98) = *(unsigned char *)(v9 + 98);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[8];
  long long v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  return a1;
}

uint64_t sub_100067290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000672A4);
}

uint64_t sub_1000672A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100067368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006737C);
}

uint64_t sub_10006737C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10006743C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100067500(uint64_t a1)
{
  unint64_t result = sub_10002082C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10006752C()
{
  unint64_t result = qword_1001E2160;
  if (!qword_1001E2160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2160);
  }
  return result;
}

unint64_t sub_100067580()
{
  unint64_t result = qword_1001E2170;
  if (!qword_1001E2170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2170);
  }
  return result;
}

unint64_t sub_1000675D4()
{
  unint64_t result = qword_1001E2178;
  if (!qword_1001E2178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2178);
  }
  return result;
}

unint64_t sub_100067628()
{
  unint64_t result = qword_1001E2190;
  if (!qword_1001E2190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2190);
  }
  return result;
}

uint64_t sub_10006767C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100011ECC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000676F4()
{
  unint64_t result = qword_1001E21A8;
  if (!qword_1001E21A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E21A8);
  }
  return result;
}

unint64_t sub_100067748(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0A78, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_100067794@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E2240);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000692A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v40 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v39 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v31 = v10;
  char v38 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v32 = v14;
  uint64_t v28 = v13;
  uint64_t v30 = v12;
  char v37 = 3;
  swift_bridgeObjectRetain();
  uint64_t v29 = 0;
  int v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v36 = 4;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  char v35 = 5;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v29 = v15;
  char v33 = 6;
  sub_10003DD40();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v18 = v34;
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v32;
  swift_bridgeObjectRelease();
  uint64_t v20 = v30;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v22 = v31;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v22;
  uint64_t v23 = v28;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v23;
  *(void *)(a2 + 32) = v19;
  *(unsigned char *)(a2 + 40) = v27;
  uint64_t v24 = v29;
  *(void *)(a2 + 48) = v26;
  *(void *)(a2 + 56) = v24;
  *(void *)(a2 + 64) = v17;
  *(unsigned char *)(a2 + 72) = v18;
  return result;
}

unint64_t sub_100067B9C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0B40, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return 15;
  }
  else {
    return v3;
  }
}

uint64_t sub_100067BE8@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E21B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v118 = 1;
  uint64_t v9 = a1[3];
  char v127 = a1;
  sub_100012D78(a1, v9);
  sub_100068590();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v127);
  }
  uint64_t v10 = v6;
  uint64_t v74 = a2;
  LOBYTE(v90[0]) = 0;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v90[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v73 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v90[0]) = 2;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v71 = v11;
  uint64_t v72 = v14;
  LOBYTE(v90[0]) = 3;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v77 = v16;
  uint64_t v70 = v17;
  char v126 = v18 & 1;
  LOBYTE(v90[0]) = 4;
  int v19 = v18;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v69 = v19;
  char v124 = v21 & 1;
  LOBYTE(v90[0]) = 5;
  int v22 = v21;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v66 = v22;
  uint64_t v67 = v23;
  uint64_t v68 = v20;
  LOBYTE(v90[0]) = 6;
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v76 = v25;
  uint64_t v65 = v26;
  LOBYTE(v90[0]) = 7;
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v75 = v28;
  uint64_t v30 = v29;
  LOBYTE(v90[0]) = 8;
  uint64_t v64 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v62 = v30;
  LOBYTE(v90[0]) = 9;
  uint64_t v32 = v31;
  swift_bridgeObjectRetain();
  uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v63 = v34;
  uint64_t v35 = v33;
  char v122 = v34 & 1;
  LOBYTE(v90[0]) = 10;
  *(void *)&long long v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)&v61 + 1) = v36;
  LOBYTE(v90[0]) = 11;
  swift_bridgeObjectRetain();
  uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v60 = v37;
  char v120 = v37 & 1;
  LOBYTE(v90[0]) = 12;
  uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v59 = v38;
  LOBYTE(v90[0]) = 13;
  swift_bridgeObjectRetain();
  uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v55 = v39 & 1;
  char v118 = v39 & 1;
  char v116 = 14;
  sub_1000472D8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  int v54 = v117;
  *(void *)&long long v78 = v71;
  *((void *)&v78 + 1) = v13;
  *(void *)&long long v79 = v73;
  *((void *)&v79 + 1) = v72;
  uint64_t v40 = v77;
  *(void *)&long long v80 = v77;
  *((void *)&v80 + 1) = v70;
  LOBYTE(v81) = v69 & 1;
  *((void *)&v81 + 1) = v68;
  LOBYTE(v82) = v66 & 1;
  *((void *)&v82 + 1) = v67;
  *(void *)&long long v83 = v76;
  uint64_t v41 = v75;
  *((void *)&v83 + 1) = v65;
  *(void *)&long long v84 = v75;
  *((void *)&v84 + 1) = v62;
  *(void *)&long long v85 = v64;
  *((void *)&v85 + 1) = v32;
  *(void *)&long long v86 = v35;
  uint64_t v53 = v35;
  BYTE8(v86) = v63 & 1;
  long long v87 = v61;
  uint64_t v42 = v59;
  *(void *)&long long v88 = v58;
  BYTE8(v88) = v60 & 1;
  *(void *)&v89[0] = v57;
  *((void *)&v89[0] + 1) = v59;
  *(void *)&v89[1] = v56;
  BYTE8(v89[1]) = v55;
  BYTE9(v89[1]) = v117;
  sub_100013AE8((uint64_t)&v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = *((void *)&v61 + 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v127);
  v90[0] = v71;
  v90[1] = v13;
  v90[2] = v73;
  v90[3] = v72;
  v90[4] = v40;
  v90[5] = v70;
  char v91 = v126;
  *(_DWORD *)uint64_t v92 = *(_DWORD *)v125;
  *(_DWORD *)&v92[3] = *(_DWORD *)&v125[3];
  uint64_t v93 = v68;
  char v94 = v124;
  *(_DWORD *)uint64_t v95 = *(_DWORD *)v123;
  *(_DWORD *)&v95[3] = *(_DWORD *)&v123[3];
  uint64_t v96 = v67;
  uint64_t v97 = v76;
  uint64_t v98 = v65;
  uint64_t v99 = v41;
  uint64_t v100 = v62;
  uint64_t v101 = v64;
  uint64_t v102 = v32;
  uint64_t v103 = v53;
  char v104 = v122;
  *(_DWORD *)uint64_t v105 = *(_DWORD *)v121;
  *(_DWORD *)&v105[3] = *(_DWORD *)&v121[3];
  uint64_t v106 = v61;
  uint64_t v107 = v43;
  uint64_t v108 = v58;
  char v109 = v120;
  *(_DWORD *)&v110[3] = *(_DWORD *)&v119[3];
  *(_DWORD *)uint64_t v110 = *(_DWORD *)v119;
  uint64_t v111 = v57;
  uint64_t v112 = v42;
  uint64_t v113 = v56;
  char v114 = v118;
  char v115 = v54;
  uint64_t result = sub_100013B74((uint64_t)v90);
  long long v45 = v89[0];
  uint64_t v46 = v74;
  v74[10] = v88;
  v46[11] = v45;
  *(_OWORD *)((char *)v46 + 186) = *(_OWORD *)((char *)v89 + 10);
  long long v47 = v85;
  v46[6] = v84;
  v46[7] = v47;
  long long v48 = v87;
  v46[8] = v86;
  v46[9] = v48;
  long long v49 = v81;
  v46[2] = v80;
  void v46[3] = v49;
  long long v50 = v83;
  v46[4] = v82;
  v46[5] = v50;
  long long v51 = v79;
  *uint64_t v46 = v78;
  v46[1] = v51;
  return result;
}

unint64_t sub_100068590()
{
  unint64_t result = qword_1001E21C0;
  if (!qword_1001E21C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E21C0);
  }
  return result;
}

unint64_t sub_1000685E4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0CC8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100068630@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E21D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000688BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v26 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v24 = 1;
  sub_10004732C();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v21 = v25;
  char v23 = 2;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  char v22 = 3;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v19 = v12;
  v15(v8, v5);
  swift_bridgeObjectRetain();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v21;
  uint64_t v17 = v19;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v14;
  return result;
}

unint64_t sub_1000688BC()
{
  unint64_t result = qword_1001E21D8;
  if (!qword_1001E21D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E21D8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BlueDogImpressionRequestBody.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000689DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlueDogImpressionRequestBody.CodingKeys()
{
  return &type metadata for BlueDogImpressionRequestBody.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SKANImpressionRequestBody.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SKANImpressionRequestBody.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100068B70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKANImpressionRequestBody.CodingKeys()
{
  return &type metadata for SKANImpressionRequestBody.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PostbackRequestBody.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100068C74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackRequestBody.CodingKeys()
{
  return &type metadata for PostbackRequestBody.CodingKeys;
}

uint64_t destroy for TokenInfoBody()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenInfoBody(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenInfoBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for TokenInfoBody(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenInfoBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenInfoBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenInfoBody()
{
  return &type metadata for TokenInfoBody;
}

unint64_t sub_100068F40()
{
  unint64_t result = qword_1001E21E8;
  if (!qword_1001E21E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E21E8);
  }
  return result;
}

unint64_t sub_100068F98()
{
  unint64_t result = qword_1001E21F0;
  if (!qword_1001E21F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E21F0);
  }
  return result;
}

unint64_t sub_100068FF0()
{
  unint64_t result = qword_1001E21F8;
  if (!qword_1001E21F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E21F8);
  }
  return result;
}

unint64_t sub_100069048()
{
  unint64_t result = qword_1001E2200;
  if (!qword_1001E2200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2200);
  }
  return result;
}

unint64_t sub_1000690A0()
{
  unint64_t result = qword_1001E2208;
  if (!qword_1001E2208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2208);
  }
  return result;
}

unint64_t sub_1000690F8()
{
  unint64_t result = qword_1001E2210;
  if (!qword_1001E2210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2210);
  }
  return result;
}

unint64_t sub_100069150()
{
  unint64_t result = qword_1001E2218;
  if (!qword_1001E2218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2218);
  }
  return result;
}

unint64_t sub_1000691A8()
{
  unint64_t result = qword_1001E2220;
  if (!qword_1001E2220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2220);
  }
  return result;
}

unint64_t sub_100069200()
{
  unint64_t result = qword_1001E2228;
  if (!qword_1001E2228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2228);
  }
  return result;
}

unint64_t sub_100069254(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0D48, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000692A0()
{
  unint64_t result = qword_1001E2238;
  if (!qword_1001E2238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2238);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TokenInfoBody.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000693C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenInfoBody.CodingKeys()
{
  return &type metadata for TokenInfoBody.CodingKeys;
}

unint64_t sub_1000693FC()
{
  unint64_t result = qword_1001E2248;
  if (!qword_1001E2248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2248);
  }
  return result;
}

unint64_t sub_100069454()
{
  unint64_t result = qword_1001E2250;
  if (!qword_1001E2250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2250);
  }
  return result;
}

unint64_t sub_1000694AC()
{
  unint64_t result = qword_1001E2258;
  if (!qword_1001E2258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2258);
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenDatabaseStore()
{
  return &type metadata for TokenDatabaseStore;
}

uint64_t sub_100069510(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int v8 = (char *)&v29 - v7;
  if (sub_100006764((uint64_t)a1) > 18001) {
    return 1;
  }
  uint64_t v30 = v8;
  uint64_t v31 = v3;
  uint64_t v32 = v2;
  while (1)
  {
    uint64_t v13 = sub_100006764((uint64_t)a1);
    if (v13 <= 17999)
    {
      if (v13)
      {
        if (v13 == 17400)
        {
          int v37 = sub_100069B20;
          uint64_t v38 = 0;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          uint64_t v34 = 1107296256;
          uint64_t v35 = sub_1000399B4;
          uint64_t v36 = &unk_1001C5740;
          uint64_t v9 = _Block_copy(&aBlock);
          swift_release();
          uint64_t v10 = (uint64_t)a1;
          uint64_t v11 = 17401;
        }
        else
        {
          if (v13 != 17401) {
            goto LABEL_24;
          }
          int v37 = sub_100069B1C;
          uint64_t v38 = 0;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          uint64_t v34 = 1107296256;
          uint64_t v35 = sub_1000399B4;
          uint64_t v36 = &unk_1001C5718;
          uint64_t v9 = _Block_copy(&aBlock);
          swift_release();
          uint64_t v10 = (uint64_t)a1;
          uint64_t v11 = 18000;
        }
      }
      else
      {
        int v37 = sub_100069B24;
        uint64_t v38 = 0;
        uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
        uint64_t v34 = 1107296256;
        uint64_t v35 = sub_1000399B4;
        uint64_t v36 = &unk_1001C5768;
        uint64_t v9 = _Block_copy(&aBlock);
        swift_release();
        uint64_t v10 = (uint64_t)a1;
        uint64_t v11 = 17400;
      }
      goto LABEL_4;
    }
    if (v13 == 18000)
    {
      int v37 = sub_100069B18;
      uint64_t v38 = 0;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v34 = 1107296256;
      uint64_t v35 = sub_1000399B4;
      uint64_t v36 = &unk_1001C56F0;
      uint64_t v9 = _Block_copy(&aBlock);
      swift_release();
      uint64_t v10 = (uint64_t)a1;
      uint64_t v11 = 18001;
LABEL_4:
      char v12 = sub_100006AE0(v10, v11, v9);
      _Block_release(v9);
      if ((v12 & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_5;
    }
    if (v13 == 18001) {
      break;
    }
    if (v13 != 18002)
    {
LABEL_24:
      uint64_t v25 = Logger.general.unsafeMutableAddressor();
      char v24 = v30;
      uint64_t v18 = v31;
      uint64_t v17 = v32;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v25, v32);
      char v26 = a1;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 134218240;
        uint64_t aBlock = sub_100006764((uint64_t)v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v28 + 12) = 2048;
        uint64_t aBlock = 18002;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v20, v27, "Error: No database migration for %lld to %lld", (uint8_t *)v28, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v20 = v26;
      }
      goto LABEL_23;
    }
LABEL_5:
    if (sub_100006764((uint64_t)a1) >= 18002) {
      return 1;
    }
  }
  int v37 = sub_100069AFC;
  uint64_t v38 = 0;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_1000399B4;
  uint64_t v36 = &unk_1001C56C8;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_release();
  int v15 = sub_100006AE0((uint64_t)a1, 18002, v14);
  _Block_release(v14);
  if (v15) {
    goto LABEL_5;
  }
LABEL_18:
  uint64_t v16 = Logger.general.unsafeMutableAddressor();
  uint64_t v18 = v31;
  uint64_t v17 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v6, v16, v32);
  uint64_t v19 = a1;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134218240;
    uint64_t aBlock = sub_100006764((uint64_t)v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v22 + 12) = 2048;
    uint64_t aBlock = 18002;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Migration failed for current schema version: %lld while trying to migrate to %lld", (uint8_t *)v22, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v20 = v19;
  }
  char v24 = v6;
LABEL_23:

  (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
  return 0;
}

uint64_t sub_100069B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100069B10()
{
  return swift_release();
}

void sub_100069B28(uint64_t a1)
{
  _StringGuts.grow(_:)(128);
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  v2._object = (void *)0x8000000100185720;
  String.append(_:)(v2);
  id v3 = [(id)type metadata accessor for FinalizedTokenEntity() databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 665632;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0xD000000000000012;
  v9._object = (void *)0x8000000100184760;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x52454745544E4920;
  v10._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0x5F65746176697270;
  v11._object = (void *)0xED00007475706E69;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xA2C5458455420;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x657A696C616E6966;
  v13._object = (void *)0xEF6E656B6F745F64;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xA2C5458455420;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x776F6465725F7369;
  v15._object = (void *)0xED000064616F6C6ELL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x52454745544E4920;
  v16._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6D617473656D6974;
  v17._object = (void *)0xE900000000000070;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x52454745544E4920;
  v18._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x6369666974726563;
  v19._object = (void *)0xEB00000000657461;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x550A2C5458455420;
  v20._object = (void *)0xEE0028455551494ELL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD000000000000012;
  v21._object = (void *)0x8000000100184760;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD000000000000018;
  v22._object = (void *)0x8000000100185760;
  String.append(_:)(v22);
  id v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v23);
}

void sub_100069E08(uint64_t a1)
{
  Swift::String v2 = (void *)type metadata accessor for FinalizedTokenEntity();
  id v3 = [v2 databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v8);

  _StringGuts.grow(_:)(137);
  v9._countAndFlagsBits = 0xD00000000000001BLL;
  v9._object = (void *)0x8000000100185720;
  String.append(_:)(v9);
  id v10 = [v2 databaseTable];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 665632;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x69737265766E6F63;
  v16._object = (void *)0xED000064695F6E6FLL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xA2C5458455420;
  v17._object = (void *)0xE700000000000000;
  String.append(_:)(v17);
  v18._object = (void *)0x8000000100184760;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x52454745544E4920;
  v19._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x5F65746176697270;
  v20._object = (void *)0xED00007475706E69;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xA2C5458455420;
  v21._object = (void *)0xE700000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x657A696C616E6966;
  v22._object = (void *)0xEF6E656B6F745F64;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xA2C5458455420;
  v23._object = (void *)0xE700000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x776F6465725F7369;
  v24._object = (void *)0xED000064616F6C6ELL;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x52454745544E4920;
  v25._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x6D617473656D6974;
  v26._object = (void *)0xE900000000000070;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x52454745544E4920;
  v27._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x6369666974726563;
  v28._object = (void *)0xEB00000000657461;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x550A2C5458455420;
  v29._object = (void *)0xEE0028455551494ELL;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x69737265766E6F63;
  v30._object = (void *)0xED000064695F6E6FLL;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0xD000000000000018;
  v31._object = (void *)0x8000000100185760;
  String.append(_:)(v31);
  id v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v32);
}

void sub_10006A1C8(uint64_t a1)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  Swift::String v2 = (void *)type metadata accessor for FinalizedTokenEntity();
  id v3 = [v2 databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4C4F432044444120;
  v8._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x69737265766E6F63;
  v9._object = (void *)0xEF657079745F6E6FLL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3B5458455420;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v11);

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  id v12 = [v2 databaseTable];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x4C4F432044444120;
  v17._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x636F6C6C615F7369;
  v18._object = (void *)0xEC00000064657461;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x4E41454C4F4F4220;
  v19._object = (void *)0xE90000000000003BLL;
  String.append(_:)(v19);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v20);

  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  id v21 = [v2 databaseTable];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v24 = v23;

  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x205445530ALL;
  v26._object = (void *)0xE500000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x69737265766E6F63;
  v27._object = (void *)0xEF657079745F6E6FLL;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 656424224;
  v28._object = (void *)0xE400000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x6F6C6E776F646572;
  v29._object = (void *)0xEA00000000006461;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x2045524548570A27;
  v30._object = (void *)0xE800000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x776F6465725F7369;
  v31._object = (void *)0xED000064616F6C6ELL;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 824196384;
  v32._object = (void *)0xE400000000000000;
  String.append(_:)(v32);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v33);

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  id v34 = [v2 databaseTable];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v37 = v36;

  v38._countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 0x205445530ALL;
  v39._object = (void *)0xE500000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x69737265766E6F63;
  v40._object = (void *)0xEF657079745F6E6FLL;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 656424224;
  v41._object = (void *)0xE400000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x64616F6C6E776F64;
  v42._object = (void *)0xE800000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x2045524548570A27;
  v43._object = (void *)0xE800000000000000;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0x776F6465725F7369;
  v44._object = (void *)0xED000064616F6C6ELL;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0x31203D2120;
  v45._object = (void *)0xE500000000000000;
  String.append(_:)(v45);
  NSString v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v46);

  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  id v47 = [v2 databaseTable];
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v50 = v49;

  v51._countAndFlagsBits = v48;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 0x4F4320504F524420;
  v52._object = (void *)0xED0000204E4D554CLL;
  String.append(_:)(v52);
  v53._countAndFlagsBits = 0x776F6465725F7369;
  v53._object = (void *)0xED000064616F6C6ELL;
  String.append(_:)(v53);
  v54._countAndFlagsBits = 59;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  NSString v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v55);

  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  id v56 = [v2 databaseTable];
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;

  v60._countAndFlagsBits = v57;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._countAndFlagsBits = 0x205445530ALL;
  v61._object = (void *)0xE500000000000000;
  String.append(_:)(v61);
  v62._countAndFlagsBits = 0x636F6C6C615F7369;
  v62._object = (void *)0xEC00000064657461;
  String.append(_:)(v62);
  v63._countAndFlagsBits = 824196384;
  v63._object = (void *)0xE400000000000000;
  String.append(_:)(v63);
  id v64 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v64);
}

void sub_10006A8AC(uint64_t a1)
{
  _StringGuts.grow(_:)(107);
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  v2._object = (void *)0x8000000100185720;
  String.append(_:)(v2);
  id v3 = [(id)type metadata accessor for AllocatedTokenMetadataEntity() databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 665632;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x69737265766E6F63;
  v9._object = (void *)0xED000064695F6E6FLL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xA2C5458455420;
  v10._object = (void *)0xE700000000000000;
  String.append(_:)(v10);
  v11._object = (void *)0x8000000100184760;
  v11._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x52454745544E4920;
  v12._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x69737265766E6F63;
  v13._object = (void *)0xEF657079745F6E6FLL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xA2C5458455420;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._object = (void *)0x8000000100184CF0;
  v15._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD000000000000011;
  v16._object = (void *)0x8000000100185740;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x69737265766E6F63;
  v17._object = (void *)0xED000064695F6E6FLL;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD000000000000018;
  v18._object = (void *)0x8000000100185760;
  String.append(_:)(v18);
  id v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v19);
}

void sub_10006AB04(uint64_t a1)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  Swift::String v2 = (void *)type metadata accessor for FinalizedTokenEntity();
  id v3 = [v2 databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4C4F432044444120;
  v8._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x6D6E6F7269766E65;
  v9._object = (void *)0xEB00000000746E65;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3B5458455420;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v11);

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  id v12 = [v2 databaseTable];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x205445530ALL;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x6D6E6F7269766E65;
  v18._object = (void *)0xEB00000000746E65;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 656424224;
  v19._object = (void *)0xE400000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x69746375646F7270;
  v20._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 15143;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  id v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v22);
}

unint64_t sub_10006AD9C(uint64_t a1, void *a2)
{
  unint64_t result = 0xD000000000000016;
  switch((unint64_t)a2)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0xD000000000000035;
      break;
    case 2uLL:
      unint64_t result = 0xD000000000000023;
      break;
    case 3uLL:
      unint64_t result = 0xD000000000000022;
      break;
    case 4uLL:
      unint64_t result = 0xD000000000000030;
      break;
    case 5uLL:
      unint64_t result = 0xD000000000000024;
      break;
    case 6uLL:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 7uLL:
      unint64_t result = 0xD00000000000001ELL;
      break;
    default:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 0xD000000000000016;
      v4._object = a2;
      String.append(_:)(v4);
      unint64_t result = 0xD000000000000014;
      break;
  }
  return result;
}

void sub_10006AEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a3)
  {
    case 0:
      Swift::UInt v3 = 1;
      goto LABEL_13;
    case 1:
      Swift::UInt v3 = 2;
      goto LABEL_13;
    case 2:
      Swift::UInt v3 = 3;
      goto LABEL_13;
    case 3:
      Swift::UInt v3 = 4;
      goto LABEL_13;
    case 4:
      Swift::UInt v3 = 5;
      goto LABEL_13;
    case 5:
      Swift::UInt v3 = 6;
      goto LABEL_13;
    case 6:
      Swift::UInt v3 = 7;
      goto LABEL_13;
    case 7:
      Swift::UInt v3 = 8;
LABEL_13:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(0);
      String.hash(into:)();
      break;
  }
}

Swift::Int sub_10006AFE4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  switch(a2)
  {
    case 0:
      Swift::UInt v3 = 1;
      goto LABEL_11;
    case 1:
      Swift::UInt v3 = 2;
      goto LABEL_11;
    case 2:
      Swift::UInt v3 = 3;
      goto LABEL_11;
    case 3:
      Swift::UInt v3 = 4;
      goto LABEL_11;
    case 4:
      Swift::UInt v3 = 5;
      goto LABEL_11;
    case 5:
      Swift::UInt v3 = 6;
      goto LABEL_11;
    case 6:
      Swift::UInt v3 = 7;
      goto LABEL_11;
    case 7:
      Swift::UInt v3 = 8;
LABEL_11:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(0);
      String.hash(into:)();
      break;
  }
  return Hasher._finalize()();
}

Swift::Int sub_10006B0F8()
{
  return sub_10006AFE4(*v0, v0[1]);
}

void sub_10006B100(uint64_t a1)
{
  sub_10006AEF4(a1, *v1, v1[1]);
}

Swift::Int sub_10006B108()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 1;
      goto LABEL_11;
    case 1:
      Swift::UInt v2 = 2;
      goto LABEL_11;
    case 2:
      Swift::UInt v2 = 3;
      goto LABEL_11;
    case 3:
      Swift::UInt v2 = 4;
      goto LABEL_11;
    case 4:
      Swift::UInt v2 = 5;
      goto LABEL_11;
    case 5:
      Swift::UInt v2 = 6;
      goto LABEL_11;
    case 6:
      Swift::UInt v2 = 7;
      goto LABEL_11;
    case 7:
      Swift::UInt v2 = 8;
LABEL_11:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(0);
      String.hash(into:)();
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_10006B214(uint64_t *a1, uint64_t a2)
{
  return sub_10006B400(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

void sub_10006B228(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10006B398(a1, (uint64_t)v13);
  uint64_t v6 = v14;
  if (v14)
  {
    Swift::String v7 = sub_100012D78(v13, v14);
    uint64_t v8 = *(void *)(v6 - 8);
    __chkstk_darwin(v7);
    Swift::String v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v13);
  }
  else
  {
    uint64_t v11 = 0;
  }
  sub_10006AD9C(a2, a3);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setValue:v11 forKey:v12];
  swift_unknownObjectRelease();
}

uint64_t sub_10006B398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1BB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B400(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (a4) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    case 1:
      if (a4 != 1) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    case 2:
      if (a4 != 2) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (a4 != 3) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    case 4:
      if (a4 != 4) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    case 5:
      if (a4 != 5) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    case 6:
      if (a4 != 6) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    case 7:
      if (a4 != 7) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    default:
      if (a4 < 8)
      {
LABEL_22:
        uint64_t result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      break;
  }
  return result;
}

unint64_t destroy for UserDefaultsKey(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s20AttributionKitDaemon15UserDefaultsKeyOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for UserDefaultsKey(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UserDefaultsKey(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDefaultsKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFF8 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483640);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 7;
  if (v4 >= 9) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UserDefaultsKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483640;
    if (a3 >= 0x7FFFFFF8) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF8) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 7;
    }
  }
  return result;
}

uint64_t sub_10006B718(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10006B730(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDefaultsKey()
{
  return &type metadata for UserDefaultsKey;
}

unint64_t sub_10006B764()
{
  unint64_t result = qword_1001E2290;
  if (!qword_1001E2290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2290);
  }
  return result;
}

uint64_t sub_10006B7B8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceLoader.BundleRetriever()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ResourceLoaderError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10006B888);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResourceLoaderError()
{
  return &type metadata for ResourceLoaderError;
}

unint64_t sub_10006B8C0(uint64_t a1)
{
  unint64_t result = sub_10006B8E8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10006B8E8()
{
  unint64_t result = qword_1001E2330;
  if (!qword_1001E2330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2330);
  }
  return result;
}

unint64_t sub_10006B940()
{
  unint64_t result = qword_1001E2338;
  if (!qword_1001E2338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2338);
  }
  return result;
}

uint64_t sub_10006B994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_100012AB8;
  return sub_1000C84C4(a3, a4, a5);
}

uint64_t sub_10006BC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v13;
  void *v13 = v7;
  v13[1] = sub_100013480;
  return sub_1000C7164(a1, a4, a5, a6, a7);
}

uint64_t sub_10006C098()
{
  return sub_100019CCC(v0 + OBJC_IVAR____TtC20AttributionKitDaemon32ImpressionIntakeServiceXPCBridge_service);
}

uint64_t type metadata accessor for ImpressionIntakeServiceXPCBridge()
{
  return self;
}

uint64_t sub_10006C0DC()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E1170) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  sub_100020930(*(void *)(v0 + 24), *(void *)(v0 + 32));
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10006C204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(sub_100012960(&qword_1001E1170) - 8);
  uint64_t v9 = v3[2];
  uint64_t v10 = v3[3];
  uint64_t v11 = v3[4];
  uint64_t v12 = (uint64_t)v3 + ((*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v13;
  void *v13 = v4;
  v13[1] = sub_100013480;
  return sub_10006BC70(a1, a2, a3, v9, v10, v11, v12);
}

uint64_t sub_10006C31C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_10006C404;
  return v9(a2, a3);
}

uint64_t sub_10006C404()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10006C534, 0, 0);
  }
}

uint64_t sub_10006C534()
{
  **(unsigned char **)(v0 + 16) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C558()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10006C590(uint64_t a1, uint64_t a2)
{
  sub_100141304(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10006C598()
{
  sub_100020930(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006C5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100012AB8;
  return sub_10006B994(a1, a2, v6, v7, v8);
}

uint64_t sub_10006C690()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006C6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(v3 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100013480;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001E2390 + dword_1001E2390);
  return v10(a1, a2, a3, v8);
}

void sub_10006C798()
{
  id v1 = [v0 connection];
  Date.timeIntervalSince1970.getter();
  double v3 = v2 * 1000.0;
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return;
  }
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v6 = [self predicateWithProperty:v4 value:v5 comparisonType:3];
  swift_unknownObjectRelease();

  id v7 = sub_10011BF2C(v1, v6, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v7 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for RetryCountDatabaseTransaction()
{
  return self;
}

id sub_10006CBA4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GhostbackEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GhostbackEntity()
{
  return self;
}

unint64_t sub_10006CC00()
{
  unint64_t result = qword_1001E23F0;
  if (!qword_1001E23F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E23F0);
  }
  return result;
}

void sub_10006CC54()
{
  id v1 = [v0 connection];
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v4 = [self predicateWithProperty:v2 equalToValue:v3];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v5 = sub_10011D1D8(v1, v4, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v5 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_10006CDE0()
{
  id v1 = v0;
  sub_100012960(&qword_1001E1840);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B50;
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v5 = self;
  id v6 = [v5 predicateWithProperty:v3 equalToValue:v4];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v6;
  Date.timeIntervalSince1970.getter();
  double v8 = v7 * 1000.0;
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v8 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v5 predicateWithProperty:v9 value:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  id v12 = [v5 predicateWithProperty:v11 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 48) = v12;
  specialized Array._endMutation()();
  id v13 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v14 = [v1 connection];
  id v15 = v13;
  id v16 = sub_10011D1D8(v14, v13, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v16 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_10006D180()
{
  id v1 = v0;
  sub_100012960(&qword_1001E2440);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  Date.timeIntervalSince1970.getter();
  double v4 = v3 * 1000.0;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return;
  }
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  double v7 = self;
  id v8 = [v7 predicateWithProperty:v5 value:v6 comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v8;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  id v10 = [v7 predicateWithProperty:v9 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v10;
  specialized Array._endMutation()();
  id v11 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v12 = [v1 connection];
  id v13 = v11;
  id v14 = sub_10011D59C(v12, v11, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v14 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for TokenDatabaseTransaction()
{
  return self;
}

uint64_t sub_10006D540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *double v7 = v4;
  v7[1] = sub_100013480;
  return sub_1000CECC0(a3, a4);
}

uint64_t sub_10006D7FC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  NSString v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *NSString v2 = v1;
  v2[1] = sub_10006D890;
  return sub_1000CF1E0();
}

uint64_t sub_10006D890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10006D990, 0, 0);
}

uint64_t sub_10006D990()
{
  *(_OWORD *)*(void *)(v0 + 16) = *(_OWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006DC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *double v7 = v4;
  v7[1] = sub_100013480;
  return sub_1000CF844(a3, a4);
}

uint64_t sub_10006DF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *double v7 = v4;
  v7[1] = sub_100013480;
  return sub_1000CFE98(a3, a4);
}

uint64_t sub_10006E1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *double v7 = v4;
  v7[1] = sub_100012AB8;
  return sub_1000D0538(a3, a4);
}

uint64_t sub_10006E4B4()
{
  return sub_100019F14(v0 + OBJC_IVAR____TtC20AttributionKitDaemon37PostbackUpdateTestingServiceXPCBridge_service);
}

uint64_t type metadata accessor for PostbackUpdateTestingServiceXPCBridge()
{
  return self;
}

uint64_t sub_10006E4F8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006E530()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006E568(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  id v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = sub_100012AB8;
  return sub_10006E1DC(a1, a2, v7, v6);
}

uint64_t sub_10006E618(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10006C404;
  return sub_1000CF51C();
}

uint64_t sub_10006E6AC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_10006E794;
  return v9(a2, a3);
}

uint64_t sub_10006E794()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10006ECA4, 0, 0);
  }
}

uint64_t sub_10006E8C4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006E8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v8 = *(int **)(v3 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100013480;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001E2488 + dword_1001E2488);
  return v10(a1, a2, a3, v8);
}

uint64_t sub_10006E9CC(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E0EC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006EA30(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  id v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = sub_100013480;
  return sub_10006DF20(a1, a2, v7, v6);
}

uint64_t sub_10006EAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  id v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = sub_100013480;
  return sub_10006DC64(a1, a2, v7, v6);
}

uint64_t sub_10006EB98()
{
  sub_100020930(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006EBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  id v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = sub_100013480;
  return sub_10006D540(a1, a2, v7, v6);
}

unint64_t sub_10006ECA8(uint64_t a1)
{
  unint64_t result = sub_10006608C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10006ECD0(uint64_t a1)
{
  unint64_t result = sub_10006ECF8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10006ECF8()
{
  unint64_t result = qword_1001E24F0;
  if (!qword_1001E24F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E24F0);
  }
  return result;
}

uint64_t sub_10006ED4C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = swift_getDynamicType();
  swift_getMetatypeMetadata();
  uint64_t v6 = String.init<A>(describing:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  String.init<A>(describing:)();
  return v6;
}

uint64_t type metadata accessor for DeveloperModeServiceListenerDelegate()
{
  return self;
}

uint64_t sub_10006EF1C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = sub_10006F74C();
  if (v8)
  {
    uint64_t v9 = self;
    id v10 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon17XPCClientProtocol_];
    [a1 setRemoteObjectInterface:v10];

    id v11 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon28DeveloperModeServiceProtocol_];
    [a1 setExportedInterface:v11];

    [a1 setExportedObject:*(void *)(v2 + OBJC_IVAR____TtC20AttributionKitDaemon36DeveloperModeServiceListenerDelegate_serviceBridge)];
    [a1 resume];
    id v12 = [a1 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100012960((uint64_t *)&unk_1001E1FD0);
    if (swift_dynamicCast())
    {
      swift_getObjectType();
      XPCClientProtocol.handleMessage(_:)(0, 0);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v13 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing entitlement for DeveloperModeService", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v8 & 1;
}

ValueMetadata *type metadata accessor for RetryCountDatabaseStore()
{
  return &type metadata for RetryCountDatabaseStore;
}

uint64_t sub_10006F1DC(void *a1)
{
  if (sub_100006764((uint64_t)a1) > 17399) {
    return 1;
  }
  while (1)
  {
    uint64_t v2 = sub_100006764((uint64_t)a1);
    if (v2 == 17400) {
      goto LABEL_3;
    }
    if (v2) {
      break;
    }
    void v13[4] = sub_10006F514;
    v13[5] = 0;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_1000399B4;
    void v13[3] = &unk_1001C5C30;
    uint64_t v3 = _Block_copy(v13);
    swift_release();
    int v4 = sub_100006AE0((uint64_t)a1, 17400, v3);
    _Block_release(v3);
    if (!v4)
    {
      if (qword_1001E08F0 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100012E74(v5, (uint64_t)qword_1001E5FF8);
      uint64_t v6 = a1;
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 134218240;
        v13[0] = sub_100006764((uint64_t)v6);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v9 + 12) = 2048;
        v13[0] = 17400;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v10 = "Migration failed for current schema version: %lld while trying to migrate to %lld";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, (uint8_t *)v9, 0x16u);
        swift_slowDealloc();
        goto LABEL_18;
      }
      goto LABEL_17;
    }
LABEL_3:
    if (sub_100006764((uint64_t)a1) >= 17400) {
      return 1;
    }
  }
  if (qword_1001E08F0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100012E74(v12, (uint64_t)qword_1001E5FF8);
  uint64_t v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218240;
    v13[0] = sub_100006764((uint64_t)v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v9 + 12) = 2048;
    v13[0] = 17400;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v10 = "Error: No database migration for %lld to %lld";
    goto LABEL_16;
  }
LABEL_17:

  uint64_t v7 = v6;
LABEL_18:

  return 0;
}

uint64_t sub_10006F518(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006F528()
{
  return swift_release();
}

void sub_10006F530(uint64_t a1)
{
  _StringGuts.grow(_:)(107);
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  v2._object = (void *)0x8000000100185720;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x6F635F7972746572;
  v3._object = (void *)0xEB00000000746E75;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 665632;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x696669746E656469;
  v5._object = (void *)0xEA00000000007265;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xA2C5458455420;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  v7._object = (void *)0xEA0000000000656DLL;
  v7._countAndFlagsBits = 0x616E5F70756F7267;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xA2C5458455420;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x6F635F7972746572;
  v9._object = (void *)0xEB00000000746E75;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x52454745544E4920;
  v10._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000016;
  v11._object = (void *)0x8000000100184840;
  String.append(_:)(v11);
  v12._object = (void *)0x8000000100185740;
  v12._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x696669746E656469;
  v13._object = (void *)0xEA00000000007265;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xD000000000000018;
  v14._object = (void *)0x8000000100185760;
  String.append(_:)(v14);
  id v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v15);
}

uint64_t sub_10006F74C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10006F8D0((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_10006F938((uint64_t)v6);
  }
  return 0;
}

unint64_t sub_10006F878(char a1)
{
  if (!a1) {
    return 0xD00000000000002BLL;
  }
  if (a1 == 1) {
    return 0xD000000000000027;
  }
  return 0xD000000000000028;
}

uint64_t sub_10006F8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1BB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F938(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E1BB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006F998()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10006F8D0((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_10006F938((uint64_t)v6);
  }
  return 0;
}

uint64_t type metadata accessor for RetryCountEntity()
{
  return self;
}

unint64_t sub_10006FC58()
{
  unint64_t result = qword_1001E2588;
  if (!qword_1001E2588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2588);
  }
  return result;
}

uint64_t destroy for TokenHandoffService(id *a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 6));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 11));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 19));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 24));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 29));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 34));

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 39));
}

uint64_t initializeWithCopy for TokenHandoffService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  Swift::String v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a2 + 48;
  long long v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v9;
  uint64_t v10 = v9;
  Swift::String v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_bridgeObjectRetain();
  id v12 = v6;
  swift_bridgeObjectRetain();
  id v13 = v7;
  v11(a1 + 48, v8, v10);
  long long v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 88, a2 + 88);
  uint64_t v15 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v15;
  id v16 = *(void **)(a2 + 144);
  *(void *)(a1 + 144) = v16;
  long long v17 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 176) = v17;
  uint64_t v18 = v17;
  Swift::String v19 = **(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8);
  swift_bridgeObjectRetain();
  id v20 = v16;
  v19(a1 + 152, a2 + 152, v18);
  long long v21 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 216) = v21;
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 192, a2 + 192);
  long long v22 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 256) = v22;
  (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 232, a2 + 232);
  uint64_t v23 = *(void *)(a2 + 296);
  uint64_t v24 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = v23;
  *(void *)(a1 + 304) = v24;
  (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1 + 272, a2 + 272);
  long long v25 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 336) = v25;
  (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 312, a2 + 312);
  return a1;
}

uint64_t *assignWithCopy for TokenHandoffService(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = (uint64_t)v4;
  id v6 = v4;

  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a2[5];
  uint64_t v8 = (void *)a1[5];
  a1[5] = (uint64_t)v7;
  id v9 = v7;

  sub_100017B78(a1 + 6, a2 + 6);
  sub_100017B78(a1 + 11, a2 + 11);
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)a2[18];
  Swift::String v11 = (void *)a1[18];
  a1[18] = (uint64_t)v10;
  id v12 = v10;

  sub_100017B78(a1 + 19, a2 + 19);
  sub_100017B78(a1 + 24, a2 + 24);
  sub_100017B78(a1 + 29, a2 + 29);
  sub_100017B78(a1 + 34, a2 + 34);
  sub_100017B78(a1 + 39, a2 + 39);
  return a1;
}

void *initializeWithTake for TokenHandoffService(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t assignWithTake for TokenHandoffService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 152);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 192);
  long long v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v10;
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 232);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 272);
  long long v11 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v11;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 312);
  long long v12 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v12;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenHandoffService(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 352)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenHandoffService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 352) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 352) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenHandoffService()
{
  return &type metadata for TokenHandoffService;
}

id sub_100070370@<X0>(void *a1@<X8>)
{
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1001E5F88;
  sub_1000CE908(a1 + 6);
  a1[14] = &type metadata for LaunchServicesRecordFactory;
  a1[15] = &off_1001C6D08;
  uint64_t v3 = qword_1001E0880;
  id v4 = v2;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1001E5F50;
  a1[22] = type metadata accessor for TaskGreyhound();
  a1[23] = &off_1001C2490;
  a1[19] = v5;
  a1[27] = &type metadata for AMSDogBag;
  a1[28] = &off_1001CAA18;
  uint64_t v6 = qword_1001E0940;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1001E60E8;
  uint64_t v8 = type metadata accessor for SnoutManager();
  a1[32] = v8;
  a1[33] = &off_1001CB0F8;
  a1[29] = v7;
  *a1 = 0x74735F6E656B6F74;
  a1[1] = 0xEB0000000065726FLL;
  a1[2] = v4;
  a1[3] = 0xD000000000000010;
  a1[4] = 0x8000000100185910;
  a1[5] = v4;
  a1[16] = 0xD000000000000012;
  a1[17] = 0x8000000100185930;
  a1[18] = v4;
  id v11 = (id)qword_1001E5F88;
  a1[37] = &type metadata for AggregatedReportingManager;
  a1[38] = &off_1001C7F28;
  id v9 = (void *)swift_allocObject();
  a1[34] = v9;
  v9[8] = &type metadata for AMSDogBag;
  v9[9] = &off_1001CAA18;
  v9[13] = &type metadata for BiomeEventStreamDog;
  v9[14] = &off_1001C8C58;
  _OWORD v9[2] = 0x74735F6E656B6F74;
  v9[3] = 0xEB0000000065726FLL;
  void v9[4] = v11;
  a1[42] = v8;
  a1[43] = &off_1001CB0F8;
  a1[39] = v7;
  swift_retain_n();

  return v11;
}

uint64_t sub_1000705C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[112] = v5;
  v6[111] = a5;
  v6[110] = a4;
  v6[109] = a3;
  v6[108] = a2;
  v6[107] = a1;
  uint64_t v7 = sub_100012960(&qword_1001E1370);
  v6[113] = v7;
  v6[114] = *(void *)(v7 - 8);
  v6[115] = swift_task_alloc();
  return _swift_task_switch(sub_100070698, 0, 0);
}

uint64_t sub_100070698()
{
  uint64_t v18 = v0;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 856);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v0 + 848) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[TokenHandoffService] Token handoff from: %llu", v5, 0xCu);
    swift_slowDealloc();
  }

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_100071BDC();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  *(void *)(v0 + 928) = 0;
  swift_release();
  char v6 = *(unsigned char *)(v0 + 226);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(unsigned char *)(v0 + 227) = v6;
    sub_100012960(&qword_1001E16E8);
    uint64_t v10 = Optional.debugDescription.getter();
    *(void *)(v0 + 840) = sub_100147668(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received skan environment: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  long long v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 936) = v12;
  *long long v12 = v0;
  v12[1] = sub_100070C00;
  uint64_t v13 = *(void *)(v0 + 872);
  uint64_t v14 = *(void *)(v0 + 864);
  uint64_t v15 = *(void *)(v0 + 856);
  return sub_10009E178(v14, v13, v15, v6);
}

uint64_t sub_100070C00()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100070D18()
{
  uint64_t v1 = *(void *)(v0 + 920);
  uint64_t v2 = *(void *)(v0 + 912);
  uint64_t v3 = *(void *)(v0 + 904);
  uint64_t v4 = *(void *)(v0 + 856);
  long long v5 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 376) = v5;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 800);
  long long v6 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 312) = v6;
  long long v7 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 344) = v7;
  long long v8 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 248) = v8;
  long long v9 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 280) = v9;
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 809);
  *(void *)(v0 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(v0 + 432) = 0;
  *(_WORD *)(v0 + 440) = 256;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 16);
  sub_10001547C(v0 + 448);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 448);
  return _swift_task_switch(sub_100070E60, 0, 0);
}

uint64_t sub_100070E60()
{
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100070ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return _swift_task_switch(sub_100070EF8, 0, 0);
}

uint64_t sub_100070EF8()
{
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[3];
    long long v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v5 = 134217984;
    v0[2] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[TokenHandoffService] Handoff UT metrics from: %llu", v5, 0xCu);
    swift_slowDealloc();
  }

  sub_100012D78((void *)(v0[6] + 312), *(void *)(v0[6] + 336));
  long long v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *long long v6 = v0;
  v6[1] = sub_1000710A0;
  uint64_t v8 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v9 = v0[3];
  return sub_1001369D4(v8, v7, v9);
}

uint64_t sub_1000710A0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100071194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return _swift_task_switch(sub_1000711B8, 0, 0);
}

uint64_t sub_1000711B8()
{
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[3];
    long long v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v5 = 134217984;
    v0[2] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[TokenHandoffService] POD Token handoff from: %llu", v5, 0xCu);
    swift_slowDealloc();
  }

  long long v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *long long v6 = v0;
  v6[1] = sub_1000710A0;
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  return sub_10009F2B4(v9, v7, v8);
}

uint64_t sub_10007134C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = type metadata accessor for PurchaseIntakeRequest();
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_100071400, 0, 0);
}

uint64_t sub_100071400()
{
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[4];
    long long v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v5 = 134217984;
    v0[3] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[TokenHandoffService] Process In-App Purchase for app: %llu", v5, 0xCu);
    swift_slowDealloc();
  }

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_100071A5C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v7 = v0[10];
  uint64_t v6 = v0[11];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[7];
  swift_release();
  sub_100071AB4(v7, v6);
  sub_100012D78((void *)(v9 + 272), *(void *)(v9 + 296));
  sub_100071B18(v6, v8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[12] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000717D8;
  uint64_t v11 = v0[9];
  uint64_t v12 = v0[4];
  return sub_1000B58E0(v11, v12);
}

uint64_t sub_1000717D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  sub_100071B7C(*(void *)(v2 + 72), (uint64_t (*)(void))type metadata accessor for InAppPurchaseDetails);
  if (v0) {
    os_log_type_t v3 = sub_1000719C0;
  }
  else {
    os_log_type_t v3 = sub_100071920;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100071920()
{
  sub_100071B7C(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for PurchaseIntakeRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000719C0()
{
  sub_100071B7C(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for PurchaseIntakeRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100071A5C()
{
  unint64_t result = qword_1001E25B0;
  if (!qword_1001E25B0)
  {
    type metadata accessor for PurchaseIntakeRequest();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E25B0);
  }
  return result;
}

uint64_t sub_100071AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseIntakeRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100071B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseIntakeRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100071B7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100071BDC()
{
  unint64_t result = qword_1001E25D0;
  if (!qword_1001E25D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E25D0);
  }
  return result;
}

uint64_t sub_100071C30()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100071E04(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  return _swift_task_switch(sub_100071E9C, 0, 0);
}

void sub_100071E9C()
{
  id v1 = [*(id *)(v0 + 24) protectionSpace];
  id v2 = [v1 serverTrust];

  if (v2)
  {
    uint64_t v4 = *(void **)(v0 + 32);
    uint64_t v3 = *(void (***)(void, void, void))(v0 + 40);
    uint64_t v6 = *(void **)(v0 + 16);
    uint64_t v5 = *(void **)(v0 + 24);
    id v7 = [objc_allocWithZone((Class)NSURLCredential) initWithTrust:v2];

    ((void (**)(void, void, id))v3)[2](v3, 0, v7);
    _Block_release(v3);

    id v8 = *(void (**)(void))(v0 + 8);
    v8();
  }
  else
  {
    __break(1u);
  }
}

id sub_100071FE0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureTaskDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SecureTaskDelegate()
{
  return self;
}

Swift::Int sub_100072038()
{
  return Hasher._finalize()();
}

uint64_t sub_100072090()
{
  return String.hash(into:)();
}

Swift::Int sub_1000720AC()
{
  return Hasher._finalize()();
}

uint64_t sub_100072100@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0E30, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100072154(void *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x8000000100184EB0;
}

unint64_t sub_100072174()
{
  return 0xD000000000000016;
}

uint64_t sub_100072190@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0E68, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1000721E8(uint64_t a1)
{
  unint64_t v2 = sub_10007638C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072224(uint64_t a1)
{
  unint64_t v2 = sub_10007638C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072260(void *a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E2728);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10007638C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100072394(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100012960(&qword_1001E26C8);
    uint64_t v2 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  id v8 = (char *)(v2 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_28;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v7) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v13);
    int64_t v15 = v10 + 1;
    if (!v14)
    {
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v7) {
        goto LABEL_37;
      }
      uint64_t v14 = *(void *)(v3 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v10 + 3;
        if (v10 + 3 >= v7) {
          goto LABEL_37;
        }
        uint64_t v14 = *(void *)(v3 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v10 + 4;
          if (v10 + 4 >= v7) {
            goto LABEL_37;
          }
          uint64_t v14 = *(void *)(v3 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v6 = (v14 - 1) & v14;
    int64_t v10 = v15;
LABEL_28:
    swift_bridgeObjectRetain();
    sub_100012960(&qword_1001E26C0);
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v8[8 * (v18 >> 6)]) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v18) & ~*(void *)&v8[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)&v8[8 * v19];
      }
      while (v23 == -1);
      unint64_t v11 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)&v8[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
    uint64_t v12 = v2[6] + 40 * v11;
    *(_OWORD *)uint64_t v12 = v24;
    *(_OWORD *)(v12 + 16) = v25;
    *(void *)(v12 + 32) = v26;
    ++v2[2];
  }
  int64_t v16 = v10 + 5;
  if (v10 + 5 >= v7)
  {
LABEL_37:
    swift_release();
    sub_100075BD4();
    return (uint64_t)v2;
  }
  uint64_t v14 = *(void *)(v3 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v10 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v7) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100072690(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100012960(&qword_1001E26C8);
    uint64_t v2 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  id v8 = (char *)(v2 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_28;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v7) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v13);
    int64_t v15 = v10 + 1;
    if (!v14)
    {
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v7) {
        goto LABEL_37;
      }
      uint64_t v14 = *(void *)(v3 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v10 + 3;
        if (v10 + 3 >= v7) {
          goto LABEL_37;
        }
        uint64_t v14 = *(void *)(v3 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v10 + 4;
          if (v10 + 4 >= v7) {
            goto LABEL_37;
          }
          uint64_t v14 = *(void *)(v3 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v6 = (v14 - 1) & v14;
    int64_t v10 = v15;
LABEL_28:
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v8[8 * (v18 >> 6)]) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v18) & ~*(void *)&v8[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)&v8[8 * v19];
      }
      while (v23 == -1);
      unint64_t v11 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)&v8[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
    uint64_t v12 = v2[6] + 40 * v11;
    *(_OWORD *)uint64_t v12 = v24;
    *(_OWORD *)(v12 + 16) = v25;
    *(void *)(v12 + 32) = v26;
    ++v2[2];
  }
  int64_t v16 = v10 + 5;
  if (v10 + 5 >= v7)
  {
LABEL_37:
    swift_release();
    sub_100075BD4();
    return (uint64_t)v2;
  }
  uint64_t v14 = *(void *)(v3 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v10 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v7) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100072984(char a1, Swift::String_optional _)
{
  object = _.value._object;
  unint64_t v3 = 0xED00006E6F697461;
  _.value._object = (void *)0x7A69726F68747541;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xEC00000065707954;
      _.value._object = (void *)0x2D746E65746E6F43;
      break;
    case 2:
      unint64_t v3 = 0xEA0000000000746ELL;
      _.value._object = (void *)0x6567412D72657355;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      _.value._object = (void *)0x65676E6152;
      break;
    case 4:
      unint64_t v3 = 0x8000000100184A60;
      _.value._object = (void *)0xD000000000000013;
      break;
    case 5:
      unint64_t v3 = 0xEF65676175676E61;
      _.value._object = (void *)0x4C2D747065636341;
      break;
    default:
      break;
  }
  uint64_t countAndFlagsBits = _.value._countAndFlagsBits;
  _.value._uint64_t countAndFlagsBits = (uint64_t)object;
  unint64_t v5 = v3;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)((char *)&_ - 8), *(Swift::String *)&_.value._object);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100072AB4(uint64_t a1)
{
  unint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_1001E2760 + dword_1001E2760);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_100072B5C;
  return v5(a1);
}

uint64_t sub_100072B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  id v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_100072C6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  char v14 = a4 & 1;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1001E2680
                                                                                        + dword_1001E2680);
  int64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *int64_t v15 = v7;
  v15[1] = sub_100072D60;
  return v17(a1, a2, a3, v14, a5, a6, a7);
}

uint64_t sub_100072D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *v4;
  uint64_t v8 = swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8);
  if (!v3)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
  }
  return v11(v8, v9, v10);
}

uint64_t sub_100072E78()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002ADAC(v0, qword_1001E25E0);
  uint64_t v1 = sub_100012E74(v0, (uint64_t)qword_1001E25E0);
  uint64_t v2 = Logger.general.unsafeMutableAddressor();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100072F04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100013480;
  return v6();
}

uint64_t sub_100072FD0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_100013480;
  return v7();
}

uint64_t sub_10007309C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100019960(a1, &qword_1001E0EC0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100073248(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100073324;
  return v6(a1);
}

uint64_t sub_100073324()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_10007341C()
{
  uint64_t v0 = 0x4E574F4E4B4E55;
  id v1 = (id)MobileGestalt_get_current_device();
  if (v1 && (id v2 = (id)MobileGestalt_copy_marketingProductName_obj()) != 0)
  {
    uint64_t v3 = v2;
    uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;
  }
  else
  {
    unint64_t v5 = (void *)0xE700000000000000;
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = v0;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t sub_1000734F4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(a1 + 48) + v12);
    swift_bridgeObjectRetain();
    a2(v16, v14, v15);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100073684()
{
  uint64_t v1 = sub_100012960(&qword_1001E1170);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100019960((uint64_t)v3, &qword_1001E1170);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    uint64_t v8 = URL.host.getter();
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      uint64_t v12 = URL.port.getter();
      if ((v13 & 1) == 0)
      {
        uint64_t v28 = v12;
        sub_100012960(&qword_1001E26A8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10017AB20;
        v26[1] = inited + 32;
        v26[2] = v0;
        CFStringRef v29 = kSCPropNetProxiesHTTPEnable;
        type metadata accessor for CFString(0);
        sub_100075CA0(&qword_1001E26B0, type metadata accessor for CFString);
        uint64_t v27 = v10;
        CFStringRef v15 = (id)kSCPropNetProxiesHTTPEnable;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 96) = &type metadata for Bool;
        *(unsigned char *)(inited + 72) = 1;
        CFStringRef v29 = kSCPropNetProxiesHTTPProxy;
        CFStringRef v16 = (id)kSCPropNetProxiesHTTPProxy;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 168) = &type metadata for String;
        *(void *)(inited + 144) = v27;
        *(void *)(inited + 152) = v11;
        CFStringRef v29 = kSCPropNetProxiesHTTPPort;
        swift_bridgeObjectRetain();
        CFStringRef v17 = (id)kSCPropNetProxiesHTTPPort;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 240) = &type metadata for Int;
        *(void *)(inited + 216) = v28;
        CFStringRef v29 = kSCPropNetProxiesHTTPSEnable;
        CFStringRef v18 = (id)kSCPropNetProxiesHTTPSEnable;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 312) = &type metadata for Bool;
        *(unsigned char *)(inited + 288) = 1;
        CFStringRef v29 = kSCPropNetProxiesHTTPSProxy;
        CFStringRef v19 = (id)kSCPropNetProxiesHTTPSProxy;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 384) = &type metadata for String;
        *(void *)(inited + 360) = v27;
        *(void *)(inited + 368) = v11;
        CFStringRef v29 = kSCPropNetProxiesHTTPSPort;
        CFStringRef v20 = (id)kSCPropNetProxiesHTTPSPort;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 456) = &type metadata for Int;
        *(void *)(inited + 432) = v28;
        sub_10009F644(inited);
        id v21 = [self ephemeralSessionConfiguration];
        objc_msgSend(v21, "set_preventsSystemHTTPProxyAuthentication:", 1);
        objc_msgSend(v21, "set_requiresSecureHTTPSProxyConnection:", 1);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v21 setConnectionProxyDictionary:isa];

        id v23 = [self sessionWithConfiguration:v21];
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return (uint64_t)v23;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  sub_100075B80();
  swift_allocError();
  *(void *)uint64_t v25 = 3;
  *(unsigned char *)(v25 + 8) = 1;
  return swift_willThrow();
}

id sub_100073B88()
{
  id v0 = [self ephemeralSessionConfiguration];
  NSString v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "set_sourceApplicationSecondaryIdentifier:", v1);

  sub_100012960(&qword_1001E26B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100179990;
  *(void *)(inited + 32) = &off_1001BF6D8;
  Swift::Int v3 = sub_1000BD4C8(inited);
  swift_setDeallocating();
  sub_100012960(&qword_1001E26C0);
  swift_arrayDestroy();
  sub_100072394(v3);
  swift_bridgeObjectRelease();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v0, "set_suppressedAutoAddedHTTPHeaders:", isa);

  id v5 = [self sessionWithConfiguration:v0];
  return v5;
}

id sub_100073CF0()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  id v1 = [self ephemeralSessionConfiguration];
  [v1 setHTTPShouldSetCookies:0];
  [v1 setHTTPCookieAcceptPolicy:1];
  [v1 setRequestCachePolicy:1];
  id v2 = [objc_allocWithZone((Class)type metadata accessor for SecureTaskDelegate()) init];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_100075CE8();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100020930(v3, v5);
  objc_msgSend(v1, "set_atsContext:", isa);

  id v7 = [self sessionWithConfiguration:v1 delegate:v2 delegateQueue:0];
  return v7;
}

uint64_t sub_10007408C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    unint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100026FE0(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100074124(uint64_t a1, uint64_t a2)
{
  v2[38] = a1;
  v2[39] = a2;
  sub_100012960(&qword_1001E1170);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URLRequest();
  v2[42] = v3;
  v2[43] = *(void *)(v3 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(sub_100074234, 0, 0);
}

uint64_t sub_100074234()
{
  CFStringRef v29 = v0;
  if (qword_1001E08B0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[43];
  uint64_t v4 = v0[38];
  uint64_t v5 = type metadata accessor for Logger();
  v0[46] = sub_100012E74(v5, (uint64_t)qword_1001E25E0);
  Swift::Int v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[47] = v6;
  v0[48] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  Swift::Int v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[45];
  uint64_t v11 = v0[42];
  uint64_t v12 = v0[43];
  if (v9)
  {
    char v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)char v13 = 136315138;
    sub_100075CA0(&qword_1001E26D8, (void (*)(uint64_t))&type metadata accessor for URLRequest);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[37] = sub_100147668(v14, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    CFStringRef v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sending request: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    CFStringRef v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[45], v0[42]);
  }

  v0[49] = v16;
  uint64_t v17 = v0[41];
  URLRequest.url.getter();
  uint64_t v18 = type metadata accessor for URL();
  v0[50] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v0[51] = v19;
  CFStringRef v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v0[52] = v20;
  v0[53] = (v19 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v21 = v20(v17, 1, v18);
  sub_100019960(v17, &qword_1001E1170);
  if (v21 == 1)
  {
    sub_100075B80();
    swift_allocError();
    *(void *)uint64_t v22 = 2;
    *(unsigned char *)(v22 + 8) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  else
  {
    id v25 = [objc_allocWithZone((Class)type metadata accessor for SecureTaskDelegate()) init];
    v0[54] = v25;
    uint64_t v26 = (void *)swift_task_alloc();
    v0[55] = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_100074634;
    uint64_t v27 = v0[38];
    return NSURLSession.data(for:delegate:)(v27, v25);
  }
}

uint64_t sub_100074634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 448) = a1;
  *(void *)(v5 + 456) = a2;
  *(void *)(v5 + 464) = a3;
  *(void *)(v5 + 472) = v3;
  swift_task_dealloc();
  if (v3)
  {
    Swift::Int v6 = sub_100074EF0;
  }
  else
  {

    Swift::Int v6 = sub_100074754;
  }
  return _swift_task_switch(v6, 0, 0);
}

void sub_100074754()
{
  uint64_t v66 = v0;
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  uint64_t v2 = *(void **)(v0 + 464);
  if (v1)
  {
    uint64_t v3 = (void *)v1;
    id v4 = v2;
    if (sub_100017AE8())
    {
      uint64_t v5 = *(void *)(v0 + 408);
      uint64_t v62 = sub_10007408C((uint64_t)&off_1001BF708);
      swift_arrayDestroy();
      Swift::String v53 = v3;
      id v6 = [v3 allHeaderFields];
      uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v60 = v7 + 64;
      uint64_t v8 = -1;
      uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
      if (-v9 < 64) {
        uint64_t v8 = ~(-1 << -(char)v9);
      }
      unint64_t v10 = v8 & *(void *)(v7 + 64);
      unint64_t v11 = (unint64_t)(63 - v9) >> 6;
      uint64_t v12 = (_OWORD *)(v0 + 200);
      Swift::String v52 = (void (**)(uint64_t, uint64_t))(v5 + 8);
      unint64_t v49 = v11 - 1;
      os_log_t log = *(os_log_t *)(v0 + 392);
      uint64_t v63 = v7;
      uint64_t v13 = v7 + 104;
      unint64_t v14 = 0;
      uint64_t v51 = v13;
      int64_t v61 = v11;
      unint64_t v50 = v11 - 5;
      if (!v10) {
        goto LABEL_10;
      }
LABEL_8:
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v14 << 6);
LABEL_9:
      sub_100075BDC(*(void *)(v63 + 48) + 40 * v16, v0 + 88);
      sub_10003742C(*(void *)(v63 + 56) + 32 * v16, v0 + 128);
      while (1)
      {
        sub_100075C38(v0 + 88, v0 + 16);
        if (!*(void *)(v0 + 40))
        {
          Swift::String v45 = *(void **)(v0 + 464);
          swift_release();

          swift_bridgeObjectRelease();
          uint64_t v3 = v53;
          goto LABEL_48;
        }
        sub_100037488((_OWORD *)(v0 + 56), v12);
        long long v20 = *(_OWORD *)(v0 + 32);
        *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 16);
        *(_OWORD *)(v0 + 176) = v20;
        *(void *)(v0 + 192) = *(void *)(v0 + 48);
        if ((swift_dynamicCast() & 1) == 0)
        {
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v12);
          if (v10) {
            goto LABEL_8;
          }
          goto LABEL_10;
        }
        unint64_t v64 = v14;
        uint64_t v21 = *(void *)(v0 + 264);
        unint64_t v22 = *(void *)(v0 + 272);
        Swift::String v23 = String.lowercased()();
        char v24 = sub_10004017C(v23._countAndFlagsBits, (uint64_t)v23._object, v62);
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v12);
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
        sub_10003742C((uint64_t)v12, v0 + 232);
        if ((swift_dynamicCast() & 1) == 0) {
          break;
        }
        unint64_t v25 = *(void *)(v0 + 288);
        uint64_t v59 = *(void *)(v0 + 280);
        (*(void (**)(void, void, void))(v0 + 376))(*(void *)(v0 + 352), *(void *)(v0 + 304), *(void *)(v0 + 336));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v26, v27))
        {
          uint64_t v32 = *(void *)(v0 + 352);
          uint64_t v33 = *(void *)(v0 + 336);

          ((void (*)(uint64_t, uint64_t))log)(v32, v33);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          uint64_t v12 = (_OWORD *)(v0 + 200);
          goto LABEL_29;
        }
        os_log_type_t v56 = v27;
        loga = v26;
        NSString v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
        uint64_t v54 = *(void *)(v0 + 400);
        uint64_t v28 = *(void *)(v0 + 320);
        uint64_t v29 = swift_slowAlloc();
        v65[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315650;
        swift_bridgeObjectRetain();
        *(void *)(v29 + 4) = sub_100147668(v59, v25, v65);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v29 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v29 + 14) = sub_100147668(v21, v22, v65);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v29 + 22) = 2080;
        URLRequest.url.getter();
        if (v55(v28, 1, v54) == 1)
        {
          sub_100019960(*(void *)(v0 + 320), &qword_1001E1170);
          unint64_t v30 = 0xE100000000000000;
          uint64_t v31 = 45;
        }
        else
        {
          uint64_t v34 = *(void *)(v0 + 400);
          uint64_t v35 = *(void *)(v0 + 320);
          uint64_t v36 = URL.absoluteString.getter();
          unint64_t v30 = v37;
          (*v52)(v35, v34);
          uint64_t v31 = v36;
        }
        Swift::String v38 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
        uint64_t v39 = *(void *)(v0 + 352);
        uint64_t v40 = *(void *)(v0 + 336);
        *(void *)(v29 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100147668(v31, v30, v65);
        swift_bridgeObjectRelease();
        v38(v39, v40);
        _os_log_impl((void *)&_mh_execute_header, loga, v56, "Received '%s' for header '%s' for request %s", (uint8_t *)v29, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v12 = (_OWORD *)(v0 + 200);
        _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 200);
        os_log_t log = *(os_log_t *)(v0 + 392);
LABEL_32:
        unint64_t v14 = v64;
        if (v10) {
          goto LABEL_8;
        }
LABEL_10:
        int64_t v17 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          return;
        }
        if (v17 >= v61)
        {
          unint64_t v19 = v14;
        }
        else
        {
          unint64_t v18 = *(void *)(v60 + 8 * v17);
          if (v18) {
            goto LABEL_13;
          }
          unint64_t v19 = v14 + 1;
          if ((uint64_t)(v14 + 2) < v61)
          {
            unint64_t v18 = *(void *)(v60 + 8 * (v14 + 2));
            if (v18)
            {
              int64_t v17 = v14 + 2;
LABEL_13:
              unint64_t v10 = (v18 - 1) & v18;
              unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
              unint64_t v14 = v17;
              goto LABEL_9;
            }
            unint64_t v19 = v14 + 2;
            if ((uint64_t)(v14 + 3) < v61)
            {
              unint64_t v18 = *(void *)(v60 + 8 * (v14 + 3));
              if (v18)
              {
                int64_t v17 = v14 + 3;
                goto LABEL_13;
              }
              int64_t v17 = v14 + 4;
              unint64_t v19 = v14 + 3;
              if ((uint64_t)(v14 + 4) < v61)
              {
                unint64_t v18 = *(void *)(v60 + 8 * v17);
                if (v18) {
                  goto LABEL_13;
                }
                while (v50 != v14)
                {
                  unint64_t v18 = *(void *)(v51 + 8 * v14++);
                  if (v18)
                  {
                    int64_t v17 = v14 + 4;
                    goto LABEL_13;
                  }
                }
                unint64_t v19 = v49;
              }
            }
          }
        }
        unint64_t v10 = 0;
        *(void *)(v0 + 152) = 0;
        *(_OWORD *)(v0 + 120) = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
        unint64_t v14 = v19;
        *(_OWORD *)(v0 + 88) = 0u;
        *(_OWORD *)(v0 + 104) = 0u;
      }
      swift_bridgeObjectRelease();
LABEL_29:
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v12);
      goto LABEL_32;
    }

LABEL_48:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    NSString v46 = *(void (**)(uint64_t, uint64_t, void *))(v0 + 8);
    uint64_t v47 = *(void *)(v0 + 448);
    uint64_t v48 = *(void *)(v0 + 456);
    v46(v47, v48, v3);
  }
  else
  {
    uint64_t v41 = *(void *)(v0 + 448);
    unint64_t v42 = *(void *)(v0 + 456);
    sub_100075B80();
    swift_allocError();
    *(void *)uint64_t v43 = 0;
    *(unsigned char *)(v43 + 8) = 1;
    swift_willThrow();

    sub_100020930(v41, v42);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v44 = *(void (**)(void))(v0 + 8);
    v44();
  }
}

uint64_t sub_100074EF0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100074F80(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  return _swift_task_switch(sub_100074FA4, 0, 0);
}

uint64_t sub_100074FA4()
{
  if (*(unsigned char *)(v0 + 80))
  {
    if (*(unsigned char *)(v0 + 80) == 1) {
      uint64_t v1 = (uint64_t)sub_100073B88();
    }
    else {
      uint64_t v1 = (uint64_t)sub_100073CF0();
    }
  }
  else
  {
    uint64_t v1 = sub_100073684();
  }
  uint64_t v2 = (void *)v1;
  *(void *)(v0 + 32) = v1;
  uint64_t v3 = *(void *)(v0 + 24);
  if (v3)
  {
    int64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      sub_10013A5D0(0, v4, 0);
      uint64_t v5 = (unsigned __int8 *)(v3 + 32);
      do
      {
        int v6 = *v5++;
        unint64_t v7 = 0xED00006E6F697461;
        unint64_t v8 = 0x7A69726F68747541;
        switch(v6)
        {
          case 1:
            unint64_t v7 = 0xEC00000065707954;
            unint64_t v8 = 0x2D746E65746E6F43;
            break;
          case 2:
            unint64_t v7 = 0xEA0000000000746ELL;
            unint64_t v8 = 0x6567412D72657355;
            break;
          case 3:
            unint64_t v7 = 0xE500000000000000;
            unint64_t v8 = 0x65676E6152;
            break;
          case 4:
            unint64_t v7 = 0x8000000100184A60;
            unint64_t v8 = 0xD000000000000013;
            break;
          case 5:
            unint64_t v7 = 0xEF65676175676E61;
            unint64_t v8 = 0x4C2D747065636341;
            break;
          default:
            break;
        }
        unint64_t v10 = _swiftEmptyArrayStorage[2];
        unint64_t v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1) {
          sub_10013A5D0(v9 > 1, v10 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v10 + 1;
        unint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
        void v11[4] = v8;
        void v11[5] = v7;
        --v4;
      }
      while (v4);
    }
    id v12 = [v2 configuration];
    uint64_t v13 = sub_10007408C((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    sub_100072690(v13);
    swift_bridgeObjectRelease();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v12, "set_suppressedAutoAddedHTTPHeaders:", isa);
  }
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v15;
  *unint64_t v15 = v0;
  v15[1] = sub_1000752C0;
  uint64_t v16 = *(void *)(v0 + 16);
  return sub_100074124(v16, (uint64_t)v2);
}

uint64_t sub_1000752C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = *(void **)v4;
  *(void *)(*(void *)v4 + 48) = v3;
  swift_task_dealloc();
  if (v3)
  {
    unint64_t v9 = sub_100075468;
  }
  else
  {
    v8[7] = a3;
    v8[8] = a2;
    v8[9] = a1;
    unint64_t v9 = sub_1000753FC;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_1000753FC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  return v1(v2, v3, v4);
}

uint64_t sub_100075468()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000754CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 48) = a7;
  *(unsigned char *)(v7 + 161) = a5;
  *(unsigned char *)(v7 + 160) = a4;
  *(void *)(v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = type metadata accessor for URL();
  *(void *)(v7 + 56) = v8;
  *(void *)(v7 + 64) = *(void *)(v8 - 8);
  *(void *)(v7 + 72) = swift_task_alloc();
  *(void *)(v7 + 80) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URLRequest();
  *(void *)(v7 + 88) = v9;
  *(void *)(v7 + 96) = *(void *)(v9 - 8);
  *(void *)(v7 + 104) = swift_task_alloc();
  *(void *)(v7 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_100075618, 0, 0);
}

uint64_t sub_100075618()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v22 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v23 = *(void *)(v0 + 88);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 56);
  char v21 = *(unsigned char *)(v0 + 160);
  unint64_t v6 = *(void *)(v0 + 32);
  uint64_t v25 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v2, *(void *)(v0 + 16), v5);
  v8(v4, v2, v5);
  sub_10003CF30(v7, v6);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  sub_10003CF30(v7, v6);
  URLRequest.httpBody.setter();
  if (v21) {
    unint64_t v9 = 0xD000000000000010;
  }
  else {
    unint64_t v9 = 0xD000000000000021;
  }
  if (v21) {
    unint64_t v10 = 0x80000001001858A0;
  }
  else {
    unint64_t v10 = 0x80000001001868B0;
  }
  unint64_t v11 = v10;
  v12._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
  v12._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&v9, v12);
  swift_bridgeObjectRelease();
  sub_100020930(v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v24, v1, v23);
  v13.value._uint64_t countAndFlagsBits = sub_10007341C();
  v14._uint64_t countAndFlagsBits = 0x6567412D72657355;
  v14._object = (void *)0xEA0000000000746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v13, v14);
  swift_bridgeObjectRelease();
  if (v25)
  {
    uint64_t v15 = *(void *)(v0 + 112);
    *(void *)(swift_task_alloc() + 16) = v15;
    uint64_t v16 = swift_bridgeObjectRetain();
    sub_1000734F4(v16, (void (*)(uint64_t, uint64_t, uint64_t))sub_100075B78);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  URLRequest.timeoutInterval.setter();
  URLRequest.cachePolicy.setter();
  uint64_t v17 = swift_task_alloc();
  *(void *)(v0 + 120) = v17;
  *(void *)uint64_t v17 = v0;
  *(void *)(v17 + 8) = sub_1000758EC;
  uint64_t v18 = *(void *)(v0 + 112);
  uint64_t v19 = *(void *)(v0 + 48);
  *(unsigned char *)(v17 + 80) = *(unsigned char *)(v0 + 161);
  *(void *)(v17 + 16) = v18;
  *(void *)(v17 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
  return _swift_task_switch(sub_100074FA4, 0, 0);
}

uint64_t sub_1000758EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void **)v4;
  *(void *)(*(void *)v4 + 128) = v3;
  swift_task_dealloc();
  if (v3)
  {
    unint64_t v9 = sub_100075AD4;
  }
  else
  {
    v8[17] = a3;
    v8[18] = a2;
    v8[19] = a1;
    unint64_t v9 = sub_100075A28;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100075A28()
{
  (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  return v1(v2, v3, v4);
}

uint64_t sub_100075AD4()
{
  (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100075B78(char a1, Swift::String_optional _)
{
  return sub_100072984(a1, _);
}

unint64_t sub_100075B80()
{
  unint64_t result = qword_1001E26A0;
  if (!qword_1001E26A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E26A0);
  }
  return result;
}

uint64_t sub_100075BD4()
{
  return swift_release();
}

uint64_t sub_100075BDC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100075C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E26D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075CA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100075CE8()
{
  unint64_t result = qword_1001E26E0;
  if (!qword_1001E26E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E26E0);
  }
  return result;
}

uint64_t sub_100075D3C()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100075D8C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100012AB8;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_1001E26E8 + dword_1001E26E8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100075E50()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100013480;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001E26F8 + dword_1001E26F8);
  return v6(v2, v3, v4);
}

uint64_t sub_100075F14()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100075F54(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100013480;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001E2708 + dword_1001E2708);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100076020()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100076058(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100012AB8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001E2718 + dword_1001E2718);
  return v6(a1, v4);
}

uint64_t getEnumTagSinglePayload for HTTP.ATSContext(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HTTP.ATSContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007627CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTP.ATSContext()
{
  return &type metadata for HTTP.ATSContext;
}

uint64_t initializeBufferWithCopyOfBuffer for HTTP.Error(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HTTP.Error(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HTTP.Error(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_100076318(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100076334(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTP.Error()
{
  return &type metadata for HTTP.Error;
}

unint64_t sub_100076364(uint64_t a1)
{
  unint64_t result = sub_100075B80();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10007638C()
{
  unint64_t result = qword_1001E2730;
  if (!qword_1001E2730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2730);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for HTTP.ATSContext.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10007647CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTP.ATSContext.CodingKeys()
{
  return &type metadata for HTTP.ATSContext.CodingKeys;
}

ValueMetadata *type metadata accessor for HTTP()
{
  return &type metadata for HTTP;
}

unint64_t sub_1000764C8()
{
  unint64_t result = qword_1001E2738;
  if (!qword_1001E2738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2738);
  }
  return result;
}

unint64_t sub_100076520()
{
  unint64_t result = qword_1001E2740;
  if (!qword_1001E2740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2740);
  }
  return result;
}

unint64_t sub_100076578()
{
  unint64_t result = qword_1001E2748;
  if (!qword_1001E2748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2748);
  }
  return result;
}

uint64_t sub_1000765CC(uint64_t a1)
{
  v1[8] = a1;
  uint64_t v2 = type metadata accessor for String.Encoding();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v1[12] = v3;
  v1[13] = *(void *)(v3 - 8);
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000766E8, 0, 0);
}

uint64_t sub_1000766E8()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  _StringGuts.grow(_:)(22);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0xE000000000000000;
  v4._object = (void *)0x8000000100186960;
  v4._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = URL.absoluteString.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 59;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  Double.write<A>(to:)();
  uint64_t v7 = *(void *)(v0 + 24);
  *(void *)(v0 + 32) = *(void *)(v0 + 16);
  *(void *)(v0 + 40) = v7;
  sub_10003985C();
  StringProtocol.removingPercentEncoding.getter();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_3;
  }
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 72);
  static String.Encoding.utf8.getter();
  uint64_t v13 = String.data(using:allowLossyConversion:)();
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 120) = v13;
  *(void *)(v0 + 128) = v15;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(void *)(v0 + 136) = v16;
  *(void *)(v0 + 144) = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v10, v12);
  if (v15 >> 60 == 15)
  {
LABEL_3:
    sub_100075B80();
    swift_allocError();
    *(void *)uint64_t v17 = 4;
    *(unsigned char *)(v17 + 8) = 1;
    swift_willThrow();
LABEL_4:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  Swift::String v20 = Data.base64EncodedString(options:)(0);
  *(Swift::String *)(v0 + 152) = v20;
  unint64_t v21 = ((unint64_t)v20._object >> 56) & 0xF;
  if (((uint64_t)v20._object & 0x2000000000000000) == 0) {
    unint64_t v21 = v20._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v21)
  {
    swift_bridgeObjectRelease();
    sub_100075B80();
    swift_allocError();
    *(void *)uint64_t v27 = 4;
    *(unsigned char *)(v27 + 8) = 1;
    swift_willThrow();
    sub_10005E9FC(v13, v15);
    goto LABEL_4;
  }
  NSString v22 = String._bridgeToObjectiveC()();
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [self bagForProfile:v22 profileVersion:v23];
  *(void *)(v0 + 168) = v24;

  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v25;
  v25[2] = v13;
  v25[3] = v15;
  void v25[4] = v24;
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_100076AD0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 48, 0, 0, 0xD000000000000022, 0x8000000100186980, sub_100076EDC, v25, &type metadata for Data);
}

uint64_t sub_100076AD0()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100076E3C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100076BEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100076BEC()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);

  unint64_t v4 = *(void *)(v0 + 56);
  uint64_t v17 = *(void *)(v0 + 48);
  Swift::String v5 = Data.base64EncodedString(options:)(0);
  v6._uint64_t countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v7 = String.data(using:allowLossyConversion:)();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  v1(v2, v3);
  uint64_t v11 = *(void *)(v0 + 120);
  unint64_t v10 = *(void *)(v0 + 128);
  if (v9 >> 60 == 15)
  {
    sub_100075B80();
    swift_allocError();
    *(void *)uint64_t v12 = 4;
    *(unsigned char *)(v12 + 8) = 1;
    swift_willThrow();
    sub_100020930(v17, v4);
    sub_10005E9FC(v11, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    Swift::String v15 = Data.base64EncodedString(options:)(0);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    sub_10005E9FC(v7, v9);
    sub_100020930(v17, v4);
    sub_10005E9FC(v11, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
    return v16(0x206369736142, 0xE600000000000000);
  }
}

uint64_t sub_100076E3C()
{
  uint64_t v1 = (void *)v0[21];
  uint64_t v3 = v0[15];
  unint64_t v2 = v0[16];
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_10005E9FC(v3, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100076EDC(uint64_t a1)
{
  return sub_1000B8410(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

ValueMetadata *type metadata accessor for CleanDatabaseRepeatingActivity()
{
  return &type metadata for CleanDatabaseRepeatingActivity;
}

uint64_t sub_100076EF8()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1001E27D8 + dword_1001E27D8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100012AB8;
  return v3();
}

uint64_t sub_100076F98()
{
  return _swift_task_switch(sub_100076FB4, 0, 0);
}

uint64_t sub_100076FB4()
{
  uint64_t v9 = v0;
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_1001E5F88;
  v5[3] = &type metadata for SnoutStoryMetrics;
  void v5[4] = &off_1001C2828;
  uint64_t v2 = swift_allocObject();
  v5[0] = v2;
  *(void *)(v2 + 40) = &type metadata for AMSDogBag;
  *(void *)(v2 + 48) = &off_1001CAA18;
  uint64_t v7 = &type metadata for AMSDogBag;
  unint64_t v8 = &off_1001CAA18;
  sub_1000772C4(v1, (uint64_t)v5, &v6, v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 696) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000770DC;
  return sub_10007783C();
}

uint64_t sub_1000770DC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000771D8, 0, 0);
}

uint64_t sub_1000771D8()
{
  sub_100077270(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100077238()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100077270(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000772C4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a3;
  *(void *)a4 = 0xD000000000000010;
  *(void *)(a4 + 8) = 0x8000000100185B70;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0xD000000000000010;
  unint64_t v28 = (unint64_t)"authenticateMessage(_:)";
  *(void *)(a4 + 32) = 0x8000000100185910;
  *(void *)(a4 + 40) = a1;
  *(void *)(a4 + 48) = 0x74735F6E656B6F74;
  *(void *)(a4 + 56) = 0xEB0000000065726FLL;
  *(void *)(a4 + 64) = a1;
  strcpy((char *)(a4 + 72), "postback_store");
  *(unsigned char *)(a4 + 87) = -18;
  *(void *)(a4 + 88) = a1;
  unint64_t v30 = (unint64_t)"";
  *(void *)(a4 + 96) = 0xD000000000000011;
  *(void *)(a4 + 104) = 0x8000000100185AE0;
  *(void *)(a4 + 112) = a1;
  id v6 = a1;
  uint64_t v29 = a2;
  sub_100029CD8(a2, (uint64_t)&v38);
  uint64_t v7 = sub_10004DD80((uint64_t)&v38, *((uint64_t *)&v39 + 1));
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  id v11 = v6;
  uint64_t v12 = sub_10013C000(0x74735F74756F6E73, 0xEB0000000065726FLL, v11, (uint64_t)v9, 0);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v38);
  *(void *)(a4 + 120) = v12;
  uint64_t v57 = type metadata accessor for SnoutManager();
  uint64_t v58 = &off_1001CB0F8;
  *(void *)&long long v56 = v12;
  uint64_t v13 = self;
  id v14 = v11;
  swift_retain();
  id v15 = [v13 sharedScheduler];
  uint64_t v54 = &type metadata for ActivityManager;
  NSString v55 = &off_1001CCE58;
  uint64_t v16 = (void *)swift_allocObject();
  *(void *)&long long v53 = v16;
  v16[5] = &type metadata for BackgroundSystemTaskScheduler;
  v16[6] = &off_1001C30C8;
  v16[2] = v15;
  uint64_t v51 = &type metadata for AttributionKitCanineArbiter;
  Swift::String v52 = &off_1001C3FF8;
  if (qword_1001E0880 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1001E5F50;
  uint64_t v48 = type metadata accessor for TaskGreyhound();
  unint64_t v49 = &off_1001C2490;
  *(void *)&long long v47 = v17;
  Swift::String v45 = &type metadata for LaunchServicesRecordFactory;
  NSString v46 = &off_1001C6D08;
  unint64_t v42 = &type metadata for AMSDogBag;
  uint64_t v43 = &off_1001CAA18;
  swift_retain();
  id v18 = [v13 sharedScheduler];
  uint64_t v36 = &type metadata for ActivityManager;
  unint64_t v37 = &off_1001CCE58;
  uint64_t v19 = (void *)swift_allocObject();
  *(void *)&long long v35 = v19;
  void v19[5] = &type metadata for BackgroundSystemTaskScheduler;
  v19[6] = &off_1001C30C8;
  v19[2] = v18;
  sub_100087C5C((uint64_t)&v35, (uint64_t)&v38);
  uint64_t v36 = &type metadata for AppStoreDaemonSKANInterop;
  unint64_t v37 = &off_1001CA740;
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  Swift::String v20 = (void *)qword_1001E5F88;
  uint64_t v33 = &type metadata for AggregatedReportingManager;
  uint64_t v34 = &off_1001C7F28;
  unint64_t v21 = (void *)swift_allocObject();
  *(void *)&long long v32 = v21;
  v21[8] = &type metadata for AMSDogBag;
  v21[9] = &off_1001CAA18;
  v21[13] = &type metadata for BiomeEventStreamDog;
  v21[14] = &off_1001C8C58;
  v21[2] = 0x74735F6E656B6F74;
  v21[3] = 0xEB0000000065726FLL;
  void v21[4] = v20;
  id v22 = v20;

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v29);
  strcpy((char *)(a4 + 128), "postback_store");
  *(unsigned char *)(a4 + 143) = -18;
  *(void *)(a4 + 144) = v14;
  *(void *)(a4 + 152) = 0x63616274736F6867;
  *(void *)(a4 + 160) = 0xEF65726F74735F6BLL;
  *(void *)(a4 + 168) = v14;
  unint64_t v23 = v28 | 0x8000000000000000;
  *(void *)(a4 + 176) = 0xD000000000000010;
  *(void *)(a4 + 184) = v23;
  *(void *)(a4 + 192) = v14;
  *(void *)(a4 + 200) = 0x74735F6E656B6F74;
  *(void *)(a4 + 208) = 0xEB0000000065726FLL;
  *(void *)(a4 + 216) = v14;
  *(void *)(a4 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0xD000000000000012;
  *(void *)(a4 + 232) = 0x8000000100185930;
  *(void *)(a4 + 240) = v14;
  sub_100012D60(&v53, a4 + 248);
  unint64_t v24 = v30 | 0x8000000000000000;
  *(void *)(a4 + 288) = 0xD000000000000011;
  *(void *)(a4 + 296) = v24;
  *(void *)(a4 + 304) = v14;
  sub_100012D60(&v50, a4 + 312);
  sub_100012D60(&v47, a4 + 352);
  sub_100012D60(&v44, a4 + 392);
  sub_100012D60(&v41, a4 + 432);
  long long v25 = v39;
  *(_OWORD *)(a4 + 472) = v38;
  *(_OWORD *)(a4 + 488) = v25;
  *(_OWORD *)(a4 + 504) = v40;
  sub_100012D60(&v35, a4 + 520);
  sub_100012D60(&v32, a4 + 560);
  sub_100012D60(&v56, a4 + 600);
  return sub_100012D60(v31, a4 + 640);
}

uint64_t sub_10007783C()
{
  v1[335] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[341] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[342] = v3;
  v1[343] = *(void *)(v3 + 64);
  v1[344] = swift_task_alloc();
  v1[345] = swift_task_alloc();
  v1[346] = swift_task_alloc();
  v1[347] = swift_task_alloc();
  v1[348] = swift_task_alloc();
  v1[349] = swift_task_alloc();
  v1[350] = swift_task_alloc();
  v1[351] = swift_task_alloc();
  v1[352] = swift_task_alloc();
  v1[353] = swift_task_alloc();
  v1[354] = swift_task_alloc();
  return _swift_task_switch(sub_100077980, 0, 0);
}

uint64_t sub_100077980()
{
  uint64_t v1 = v0[335];
  static Date.now.getter();
  uint64_t v2 = swift_task_alloc();
  v0[355] = v2;
  *(void *)(v2 + 16) = v1;
  swift_asyncLet_begin();
  uint64_t v3 = swift_task_alloc();
  v0[356] = v3;
  *(void *)(v3 + 16) = v1;
  swift_asyncLet_begin();
  uint64_t v4 = swift_task_alloc();
  v0[357] = v4;
  *(void *)(v4 + 16) = v1;
  swift_asyncLet_begin();
  return _swift_asyncLet_get(v0 + 2, v0 + 329, sub_100077AE8, v0 + 318);
}

uint64_t sub_100077AE8()
{
  *(void *)(v0 + 2864) = *(void *)(v0 + 2632);
  return _swift_asyncLet_get(v0 + 1296, v0 + 2488, sub_100077B10, v0 + 1936);
}

uint64_t sub_100077B10()
{
  *(void *)(v0 + 2872) = *(void *)(v0 + 2488);
  return _swift_asyncLet_get(v0 + 656, v0 + 2536, sub_100077B38, v0 + 2640);
}

uint64_t sub_100077B38()
{
  return _swift_task_switch(sub_100077B54, 0, 0);
}

uint64_t sub_100077B54()
{
  uint64_t v1 = *(void *)(v0 + 2824);
  uint64_t v2 = *(void *)(v0 + 2816);
  uint64_t v3 = *(void *)(v0 + 2736);
  uint64_t v4 = *(void *)(v0 + 2728);
  uint64_t v5 = *(uint64_t **)(v0 + 2680);
  *(void *)(v0 + 2880) = *(void *)(v0 + 2536);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(v0 + 2888) = v6;
  uint64_t v8 = (void *)v5[2];
  *(void *)(v0 + 2896) = v8;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 2904) = v9;
  *(void *)(v0 + 2912) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v1, v4);
  int v10 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 3304) = v10;
  unint64_t v11 = (v10 + 16) & ~(unint64_t)v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 2920) = v12;
  uint64_t v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 2928) = v13;
  *(void *)(v0 + 2936) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v13(v12 + v11, v2, v4);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4928
                                                                                     + dword_1001E4928);
  swift_bridgeObjectRetain();
  id v14 = v8;
  id v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 2944) = v15;
  *id v15 = v0;
  v15[1] = sub_100077D1C;
  return v17((uint64_t)v17, (uint64_t)sub_10007BE38, v12, v7, v6, (uint64_t)v14);
}

uint64_t sub_100077D1C()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 2896);
  *(void *)(*(void *)v1 + 2952) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_100079E90;
  }
  else {
    uint64_t v3 = sub_100077E88;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100077E88()
{
  id v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 2928);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2904);
  uint64_t v1 = *(void *)(v0 + 2816);
  uint64_t v2 = *(void *)(v0 + 2808);
  uint64_t v3 = *(void *)(v0 + 2728);
  uint64_t v4 = *(void **)(v0 + 2680);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 3304) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3304);
  Date.addingTimeInterval(_:)();
  uint64_t v7 = v4[3];
  uint64_t v6 = v4[4];
  *(void *)(v0 + 2960) = v6;
  uint64_t v8 = (void *)v4[5];
  *(void *)(v0 + 2968) = v8;
  v13(v1, v2, v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 2976) = v9;
  v14(v9 + v5, v1, v3);
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4838
                                                                                     + dword_1001E4838);
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 2984) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_10007802C;
  return v15((uint64_t)v15, (uint64_t)sub_10007BEA8, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_10007802C()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 2968);
  *(void *)(*(void *)v1 + 2992) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_10007A0C0;
  }
  else {
    uint64_t v3 = sub_100078198;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100078198()
{
  id v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 2928);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2904);
  uint64_t v1 = *(void *)(v0 + 2816);
  uint64_t v2 = *(void *)(v0 + 2800);
  uint64_t v3 = *(void *)(v0 + 2728);
  uint64_t v4 = *(void **)(v0 + 2680);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 3304) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3304);
  Date.addingTimeInterval(_:)();
  uint64_t v7 = v4[3];
  uint64_t v6 = v4[4];
  *(void *)(v0 + 3000) = v6;
  uint64_t v8 = (void *)v4[5];
  *(void *)(v0 + 3008) = v8;
  v13(v1, v2, v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 3016) = v9;
  v14(v9 + v5, v1, v3);
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4838
                                                                                     + dword_1001E4838);
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 30++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_10007833C;
  return v15((uint64_t)v15, (uint64_t)sub_10007BED8, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_10007833C()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 3008);
  *(void *)(*(void *)v1 + 3032) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_10007A308;
  }
  else {
    uint64_t v3 = sub_1000784A8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000784A8()
{
  id v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 2928);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2904);
  uint64_t v1 = *(void *)(v0 + 2816);
  uint64_t v2 = *(void *)(v0 + 2792);
  uint64_t v3 = *(void *)(v0 + 2728);
  uint64_t v4 = *(void **)(v0 + 2680);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 3304) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3304);
  Date.addingTimeInterval(_:)();
  uint64_t v7 = v4[3];
  uint64_t v6 = v4[4];
  *(void *)(v0 + 3040) = v6;
  uint64_t v8 = (void *)v4[5];
  *(void *)(v0 + 3048) = v8;
  v13(v1, v2, v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 3056) = v9;
  v14(v9 + v5, v1, v3);
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4838
                                                                                     + dword_1001E4838);
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 3064) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_10007864C;
  return v15((uint64_t)v15, (uint64_t)sub_10007BF0C, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_10007864C()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 3048);
  *(void *)(*(void *)v1 + 3072) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_10007A568;
  }
  else {
    uint64_t v3 = sub_1000787B8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000787B8()
{
  id v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 2928);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2904);
  uint64_t v1 = *(void *)(v0 + 2816);
  uint64_t v2 = *(void *)(v0 + 2784);
  uint64_t v3 = *(void *)(v0 + 2728);
  uint64_t v4 = *(void **)(v0 + 2680);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 3304) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3304);
  Date.addingTimeInterval(_:)();
  uint64_t v7 = v4[9];
  uint64_t v6 = v4[10];
  *(void *)(v0 + 3080) = v6;
  uint64_t v8 = (void *)v4[11];
  *(void *)(v0 + 3088) = v8;
  v13(v1, v2, v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 3096) = v9;
  v14(v9 + v5, v1, v3);
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                     + dword_1001E48F8);
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 3104) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_100078964;
  return v15((uint64_t)v15, (uint64_t)sub_10007BF40, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_100078964()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 3088);
  *(void *)(*(void *)v1 + 3112) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_10007A7E0;
  }
  else {
    uint64_t v3 = sub_100078AD0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100078AD0()
{
  id v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 2928);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2904);
  uint64_t v1 = *(void *)(v0 + 2816);
  uint64_t v2 = *(void *)(v0 + 2776);
  uint64_t v3 = *(void *)(v0 + 2728);
  uint64_t v4 = *(void **)(v0 + 2680);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 3304) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3304);
  Date.addingTimeInterval(_:)();
  uint64_t v7 = v4[9];
  uint64_t v6 = v4[10];
  *(void *)(v0 + 3120) = v6;
  uint64_t v8 = (void *)v4[11];
  *(void *)(v0 + 3128) = v8;
  v13(v1, v2, v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 3136) = v9;
  v14(v9 + v5, v1, v3);
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                     + dword_1001E48F8);
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 3144) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_100078C7C;
  return v15((uint64_t)v15, (uint64_t)sub_10007BFC0, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_100078C7C()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 3128);
  *(void *)(*(void *)v1 + 3152) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_10007AA70;
  }
  else {
    uint64_t v3 = sub_100078DE8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100078DE8()
{
  sub_10007BFF0(v0[335] + 128, (uint64_t)(v0 + 247));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[395] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100078E90;
  uint64_t v2 = v0[348];
  return sub_1000D88C8(v2);
}

uint64_t sub_100078E90()
{
  uint64_t v1 = *v0 + 1976;
  swift_task_dealloc();
  sub_100048284(v1);
  return _swift_task_switch(sub_100078F98, 0, 0);
}

uint64_t sub_100078F98()
{
  id v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 2928);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2904);
  uint64_t v1 = *(void *)(v0 + 2816);
  uint64_t v2 = *(void *)(v0 + 2768);
  uint64_t v3 = *(void *)(v0 + 2728);
  uint64_t v4 = *(void **)(v0 + 2680);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 3304) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3304);
  Date.addingTimeInterval(_:)();
  uint64_t v7 = v4[6];
  uint64_t v6 = v4[7];
  *(void *)(v0 + 3168) = v6;
  uint64_t v8 = (void *)v4[8];
  *(void *)(v0 + 3176) = v8;
  v13(v1, v2, v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 3184) = v9;
  v14(v9 + v5, v1, v3);
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48A0
                                                                                     + dword_1001E48A0);
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 3192) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_100079138;
  return v15((uint64_t)v15, (uint64_t)sub_10007C050, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_100079138()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 3176);
  *(void *)(*(void *)v1 + 3200) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_10007AD18;
  }
  else {
    uint64_t v3 = sub_1000792A4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000792A4()
{
  id v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 2928);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2904);
  uint64_t v1 = *(void *)(v0 + 2816);
  uint64_t v2 = *(void *)(v0 + 2760);
  uint64_t v3 = *(void *)(v0 + 2728);
  uint64_t v4 = *(void **)(v0 + 2680);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 3304) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3304);
  Date.addingTimeInterval(_:)();
  uint64_t v7 = v4[6];
  uint64_t v6 = v4[7];
  *(void *)(v0 + 3208) = v6;
  uint64_t v8 = (void *)v4[8];
  *(void *)(v0 + 3216) = v8;
  v13(v1, v2, v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 32++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
  v14(v9 + v5, v1, v3);
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48A0
                                                                                     + dword_1001E48A0);
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 3232) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_100079448;
  return v15((uint64_t)v15, (uint64_t)sub_10007C084, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_100079448()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 3216);
  *(void *)(*(void *)v1 + 3240) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_10007AFD8;
  }
  else {
    uint64_t v3 = sub_1000795B4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000795B4()
{
  id v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 2928);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2904);
  uint64_t v1 = *(void *)(v0 + 2816);
  uint64_t v2 = *(void *)(v0 + 2752);
  uint64_t v3 = *(void *)(v0 + 2728);
  uint64_t v4 = *(void **)(v0 + 2680);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 3304) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3304);
  Date.addingTimeInterval(_:)();
  uint64_t v7 = v4[12];
  uint64_t v6 = v4[13];
  *(void *)(v0 + 3248) = v6;
  uint64_t v8 = (void *)v4[14];
  *(void *)(v0 + 3256) = v8;
  v13(v1, v2, v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 3264) = v9;
  v14(v9 + v5, v1, v3);
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4860
                                                                                     + dword_1001E4860);
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 3272) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_100079758;
  return v15((uint64_t)v15, (uint64_t)sub_10007C1D4, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_100079758()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 3256);
  *(void *)(*(void *)v1 + 3280) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_10007B2B4;
  }
  else {
    uint64_t v3 = sub_1000798C4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000798C4()
{
  Date.addingTimeInterval(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 3288) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100079978;
  uint64_t v2 = *(void *)(v0 + 2816);
  return sub_100135E28(v2);
}

uint64_t sub_100079978()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100079A74, 0, 0);
}

uint64_t sub_100079A74()
{
  uint64_t v12 = v0[353];
  uint64_t v10 = v0[350];
  uint64_t v11 = v0[351];
  uint64_t v1 = v0[349];
  uint64_t v2 = v0[348];
  uint64_t v3 = v0[347];
  uint64_t v4 = v0[346];
  uint64_t v5 = v0[345];
  uint64_t v6 = v0[344];
  uint64_t v7 = v0[341];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v8(v0[352], v7);
  v8(v6, v7);
  v8(v5, v7);
  v8(v4, v7);
  v8(v3, v7);
  v8(v2, v7);
  v8(v1, v7);
  v8(v10, v7);
  v8(v11, v7);
  v8(v12, v7);
  v0[412] = v8;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_100079C08()
{
  return _swift_task_switch(sub_100079C24, 0, 0);
}

uint64_t sub_100079C24()
{
  swift_task_dealloc();
  return _swift_asyncLet_finish(v0 + 1296, v0 + 2488, sub_100079CA4, v0 + 2688);
}

uint64_t sub_100079CA4()
{
  return _swift_task_switch(sub_100079CC0, 0, 0);
}

uint64_t sub_100079CC0()
{
  swift_task_dealloc();
  return _swift_asyncLet_finish(v0 + 16, v0 + 2632, sub_100079D40, v0 + 2592);
}

uint64_t sub_100079D40()
{
  return _swift_task_switch(sub_100079D5C, 0, 0);
}

uint64_t sub_100079D5C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[412];
  uint64_t v2 = v0[354];
  uint64_t v3 = v0[341];
  swift_task_dealloc();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100079E90()
{
  uint64_t v1 = *(void (**)(void, void))(v0[342] + 8);
  v1(v0[353], v0[341]);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v9 = v1;
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to clear stale entities: %@", v5, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v9;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v1;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007A0C0()
{
  uint64_t v1 = v0[353];
  uint64_t v2 = v0[341];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v3(v0[351], v2);
  v3(v1, v2);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100012E74(v4, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to clear stale entities: %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v3;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007A308()
{
  uint64_t v1 = v0[353];
  uint64_t v2 = v0[351];
  uint64_t v3 = v0[341];
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v4(v0[350], v3);
  v4(v2, v3);
  v4(v1, v3);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100012E74(v5, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to clear stale entities: %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v4;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007A568()
{
  uint64_t v1 = v0[353];
  uint64_t v2 = v0[351];
  uint64_t v3 = v0[350];
  uint64_t v4 = v0[341];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v5(v0[349], v4);
  v5(v3, v4);
  v5(v2, v4);
  v5(v1, v4);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100012E74(v6, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to clear stale entities: %@", v9, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v5;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007A7E0()
{
  uint64_t v1 = v0[353];
  uint64_t v2 = v0[351];
  uint64_t v3 = v0[350];
  uint64_t v4 = v0[349];
  uint64_t v5 = v0[341];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v6(v0[348], v5);
  v6(v4, v5);
  v6(v3, v5);
  v6(v2, v5);
  v6(v1, v5);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100012E74(v7, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to clear stale entities: %@", v10, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v6;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007AA70()
{
  uint64_t v1 = v0[353];
  uint64_t v2 = v0[351];
  uint64_t v3 = v0[350];
  uint64_t v4 = v0[349];
  uint64_t v5 = v0[348];
  uint64_t v6 = v0[341];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v7(v0[347], v6);
  v7(v5, v6);
  v7(v4, v6);
  v7(v3, v6);
  v7(v2, v6);
  v7(v1, v6);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100012E74(v8, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to clear stale entities: %@", v11, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v7;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007AD18()
{
  uint64_t v1 = v0[353];
  uint64_t v2 = v0[351];
  uint64_t v3 = v0[350];
  uint64_t v4 = v0[349];
  uint64_t v5 = v0[348];
  uint64_t v6 = v0[347];
  uint64_t v7 = v0[341];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v8(v0[346], v7);
  v8(v6, v7);
  v8(v5, v7);
  v8(v4, v7);
  v8(v3, v7);
  v8(v2, v7);
  v8(v1, v7);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100012E74(v9, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to clear stale entities: %@", v12, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v8;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007AFD8()
{
  uint64_t v16 = v0[353];
  uint64_t v1 = v0[351];
  uint64_t v2 = v0[350];
  uint64_t v3 = v0[349];
  uint64_t v4 = v0[348];
  uint64_t v5 = v0[347];
  uint64_t v6 = v0[346];
  uint64_t v7 = v0[341];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v8(v0[345], v7);
  v8(v6, v7);
  v8(v5, v7);
  v8(v4, v7);
  v8(v3, v7);
  v8(v2, v7);
  v8(v1, v7);
  v8(v16, v7);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100012E74(v9, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to clear stale entities: %@", v12, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v8;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007B2B4()
{
  uint64_t v16 = v0[351];
  uint64_t v17 = v0[353];
  uint64_t v1 = v0[350];
  uint64_t v2 = v0[349];
  uint64_t v3 = v0[348];
  uint64_t v4 = v0[347];
  uint64_t v5 = v0[346];
  uint64_t v6 = v0[345];
  uint64_t v7 = v0[341];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[342] + 8);
  v8(v0[344], v7);
  v8(v6, v7);
  v8(v5, v7);
  v8(v4, v7);
  v8(v3, v7);
  v8(v2, v7);
  v8(v1, v7);
  v8(v16, v7);
  v8(v17, v7);
  if (qword_1001E0910 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100012E74(v9, (uint64_t)qword_1001E6058);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[323] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to clear stale entities: %@", v12, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[412] = v8;
  return _swift_asyncLet_finish(v0 + 82, v0 + 317, sub_100079C08, v0 + 312);
}

uint64_t sub_10007B5A8(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E4078 + dword_1001E4078);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10007B650;
  return v4(15);
}

uint64_t sub_10007B650(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 32) = a2;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  *(unsigned char *)(v3 + 56) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007B758, 0, 0);
}

uint64_t sub_10007B758()
{
  uint64_t v1 = 0x4143C68000000000;
  if ((*(unsigned char *)(v0 + 56) & 1) == 0) {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  **(void **)(v0 + 40) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007B790(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013480;
  void v3[5] = a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E4078 + dword_1001E4078);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[6] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10007B650;
  return v6(15);
}

uint64_t sub_10007B884(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E4078 + dword_1001E4078);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10007B92C;
  return v4(17);
}

uint64_t sub_10007B92C(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 32) = a2;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  *(unsigned char *)(v3 + 56) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007BA34, 0, 0);
}

uint64_t sub_10007BA34()
{
  uint64_t v1 = 0x404E000000000000;
  if ((*(unsigned char *)(v0 + 56) & 1) == 0) {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  **(void **)(v0 + 40) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007BA68(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100012AB8;
  void v3[5] = a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E4078 + dword_1001E4078);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[6] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10007B92C;
  return v6(17);
}

uint64_t sub_10007BB5C(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E4078 + dword_1001E4078);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10007BC04;
  return v4(18);
}

uint64_t sub_10007BC04(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 32) = a2;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1;
  *(unsigned char *)(v3 + 56) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007BD0C, 0, 0);
}

uint64_t sub_10007BD0C()
{
  uint64_t v1 = 0x4000000000000000;
  if ((*(unsigned char *)(v0 + 56) & 1) == 0) {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  **(void **)(v0 + 40) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007BD40(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013480;
  void v3[5] = a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E4078 + dword_1001E4078);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[6] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10007BC04;
  return v6(18);
}

uint64_t sub_10007BE38(uint64_t a1)
{
  return sub_10007C200(a1, (uint64_t (*)(unint64_t))sub_1000D4C4C);
}

void sub_10007BE64(uint64_t a1, uint64_t a2)
{
  sub_1000485B0(a2, 0);
  if (!v2) {
    sub_1000485B0(a2, 1);
  }
}

uint64_t sub_10007BEA8(uint64_t a1)
{
  return sub_10007C200(a1, (uint64_t (*)(unint64_t))sub_1000C13A0);
}

uint64_t sub_10007BED8(uint64_t a1)
{
  return sub_10007C0B4(a1, 0, (uint64_t (*)(unint64_t, uint64_t))sub_1000C155C);
}

uint64_t sub_10007BF0C(uint64_t a1)
{
  return sub_10007C0B4(a1, 1, (uint64_t (*)(unint64_t, uint64_t))sub_1000C155C);
}

void sub_10007BF40(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  sub_10007BE64(a1, v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_10007BFC0(uint64_t a1)
{
  return sub_10007C0B4(a1, 2, (uint64_t (*)(unint64_t, uint64_t))sub_1000485B0);
}

uint64_t sub_10007BFF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10007C050(uint64_t a1)
{
  return sub_10007C0B4(a1, 2, (uint64_t (*)(unint64_t, uint64_t))sub_10006CDE0);
}

uint64_t sub_10007C084(uint64_t a1)
{
  return sub_10007C0B4(a1, 2, (uint64_t (*)(unint64_t, uint64_t))sub_10006D180);
}

uint64_t sub_10007C0B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  return a3(v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2);
}

uint64_t sub_10007C144()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10007C1D4(uint64_t a1)
{
  return sub_10007C200(a1, (uint64_t (*)(unint64_t))sub_10006C798);
}

uint64_t sub_10007C200(uint64_t a1, uint64_t (*a2)(unint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  return a2(v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_10007C27C()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10007C2B4()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t destroy for DatabaseMaintenanceManager(id *a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 31));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 39));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 44));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 49));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 54));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 59));
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 65));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 70));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 75));

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 80));
}

uint64_t initializeWithCopy for DatabaseMaintenanceManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  os_log_type_t v10 = *(void **)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v9;
  os_log_type_t v11 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  uint64_t v48 = *(void **)(a2 + 112);
  uint64_t v49 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v48;
  *(void *)(a1 + 120) = v49;
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  uint64_t v14 = *(void *)(a2 + 152);
  long long v50 = *(void **)(a2 + 144);
  *(void *)(a1 + 144) = v50;
  *(void *)(a1 + 152) = v14;
  uint64_t v51 = *(void **)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v51;
  uint64_t v15 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v15;
  uint64_t v16 = *(void *)(a2 + 200);
  Swift::String v52 = *(void **)(a2 + 192);
  *(void *)(a1 + 192) = v52;
  *(void *)(a1 + 200) = v16;
  uint64_t v54 = *(void **)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v54;
  uint64_t v17 = *(void *)(a2 + 232);
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v17;
  long long v56 = *(void **)(a2 + 240);
  *(void *)(a1 + 240) = v56;
  uint64_t v57 = a2 + 248;
  long long v18 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 272) = v18;
  uint64_t v55 = v18;
  long long v53 = **(void (***)(uint64_t, uint64_t, uint64_t))(v18 - 8);
  swift_bridgeObjectRetain();
  id v19 = v6;
  swift_bridgeObjectRetain();
  id v20 = v7;
  swift_bridgeObjectRetain();
  id v21 = v10;
  swift_bridgeObjectRetain();
  id v22 = v11;
  swift_bridgeObjectRetain();
  id v23 = v48;
  swift_retain();
  swift_bridgeObjectRetain();
  id v24 = v50;
  swift_bridgeObjectRetain();
  id v25 = v51;
  swift_bridgeObjectRetain();
  id v26 = v52;
  swift_bridgeObjectRetain();
  id v27 = v54;
  swift_bridgeObjectRetain();
  id v28 = v56;
  v53(a1 + 248, v57, v55);
  uint64_t v29 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v29;
  unint64_t v30 = *(void **)(a2 + 304);
  *(void *)(a1 + 304) = v30;
  long long v31 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 336) = v31;
  uint64_t v32 = v31;
  uint64_t v33 = **(void (***)(uint64_t, uint64_t, uint64_t))(v31 - 8);
  swift_bridgeObjectRetain();
  id v34 = v30;
  v33(a1 + 312, a2 + 312, v32);
  uint64_t v35 = *(void *)(a2 + 376);
  uint64_t v36 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = v35;
  *(void *)(a1 + 384) = v36;
  (**(void (***)(uint64_t, uint64_t))(v35 - 8))(a1 + 352, a2 + 352);
  long long v37 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 416) = v37;
  (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1 + 392, a2 + 392);
  uint64_t v38 = *(void *)(a2 + 456);
  uint64_t v39 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = v38;
  *(void *)(a1 + 464) = v39;
  (**(void (***)(uint64_t, uint64_t))(v38 - 8))(a1 + 432, a2 + 432);
  long long v40 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 496) = v40;
  (**(void (***)(uint64_t, uint64_t))(v40 - 8))(a1 + 472, a2 + 472);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  long long v41 = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 544) = v41;
  uint64_t v42 = v41;
  uint64_t v43 = **(void (***)(uint64_t, uint64_t, uint64_t))(v41 - 8);
  swift_bridgeObjectRetain();
  v43(a1 + 520, a2 + 520, v42);
  uint64_t v44 = *(void *)(a2 + 584);
  *(void *)(a1 + 584) = v44;
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  (**(void (***)(uint64_t, uint64_t))(v44 - 8))(a1 + 560, a2 + 560);
  long long v45 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 6++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v45;
  (**(void (***)(uint64_t, uint64_t))(v45 - 8))(a1 + 600, a2 + 600);
  uint64_t v46 = *(void *)(a2 + 664);
  *(void *)(a1 + 664) = v46;
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  (**(void (***)(uint64_t, uint64_t))(v46 - 8))(a1 + 640, a2 + 640);
  return a1;
}

uint64_t *assignWithCopy for DatabaseMaintenanceManager(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = (uint64_t)v4;
  id v6 = v4;

  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a2[5];
  uint64_t v8 = (void *)a1[5];
  a1[5] = (uint64_t)v7;
  id v9 = v7;

  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_log_type_t v10 = (void *)a2[8];
  os_log_type_t v11 = (void *)a1[8];
  a1[8] = (uint64_t)v10;
  id v12 = v10;

  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)a2[11];
  uint64_t v14 = (void *)a1[11];
  a1[11] = (uint64_t)v13;
  id v15 = v13;

  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)a2[14];
  uint64_t v17 = (void *)a1[14];
  a1[14] = (uint64_t)v16;
  id v18 = v16;

  a1[15] = a2[15];
  swift_retain();
  swift_release();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v19 = (void *)a2[18];
  id v20 = (void *)a1[18];
  a1[18] = (uint64_t)v19;
  id v21 = v19;

  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v22 = (void *)a2[21];
  id v23 = (void *)a1[21];
  a1[21] = (uint64_t)v22;
  id v24 = v22;

  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v25 = (void *)a2[24];
  id v26 = (void *)a1[24];
  a1[24] = (uint64_t)v25;
  id v27 = v25;

  a1[25] = a2[25];
  a1[26] = a2[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v28 = (void *)a2[27];
  uint64_t v29 = (void *)a1[27];
  a1[27] = (uint64_t)v28;
  id v30 = v28;

  a1[28] = a2[28];
  a1[29] = a2[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v31 = (void *)a2[30];
  uint64_t v32 = (void *)a1[30];
  a1[30] = (uint64_t)v31;
  id v33 = v31;

  sub_100017B78(a1 + 31, a2 + 31);
  a1[36] = a2[36];
  a1[37] = a2[37];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v34 = (void *)a2[38];
  uint64_t v35 = (void *)a1[38];
  a1[38] = (uint64_t)v34;
  id v36 = v34;

  sub_100017B78(a1 + 39, a2 + 39);
  sub_100017B78(a1 + 44, a2 + 44);
  sub_100017B78(a1 + 49, a2 + 49);
  sub_100017B78(a1 + 54, a2 + 54);
  sub_100017B78(a1 + 59, a2 + 59);
  a1[64] = a2[64];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100017B78(a1 + 65, a2 + 65);
  sub_100017B78(a1 + 70, a2 + 70);
  sub_100017B78(a1 + 75, a2 + 75);
  sub_100017B78(a1 + 80, a2 + 80);
  return a1;
}

void *initializeWithTake for DatabaseMaintenanceManager(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2A8uLL);
}

uint64_t assignWithTake for DatabaseMaintenanceManager(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v2[2];

  uint64_t v6 = v2[4];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2[3];
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v2[5];

  uint64_t v8 = v2[7];
  *(void *)(a1 + 48) = v2[6];
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v2[8];

  uint64_t v10 = v2[10];
  *(void *)(a1 + 72) = v2[9];
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  os_log_type_t v11 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v2[11];

  uint64_t v12 = v2[13];
  *(void *)(a1 + 96) = v2[12];
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v2[14];

  *(void *)(a1 + 120) = v2[15];
  swift_release();
  uint64_t v14 = v2[16];
  v2 += 16;
  *(void *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = v2[1];
  swift_bridgeObjectRelease();
  id v15 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v2[2];

  uint64_t v16 = v2[4];
  *(void *)(a1 + 152) = v2[3];
  *(void *)(a1 + 160) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v2[5];

  uint64_t v18 = v2[7];
  *(void *)(a1 + 176) = v2[6];
  *(void *)(a1 + 184) = v18;
  swift_bridgeObjectRelease();
  id v19 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v2[8];

  uint64_t v20 = v2[10];
  *(void *)(a1 + 200) = v2[9];
  *(void *)(a1 + 208) = v20;
  swift_bridgeObjectRelease();
  id v21 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = v2[11];

  uint64_t v22 = v2[13];
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2[12];
  *(void *)(a1 + 232) = v22;
  swift_bridgeObjectRelease();
  id v23 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = v2[14];

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 248);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(v2 + 15);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(v2 + 17);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(v2 + 19);
  *(void *)(a1 + 296) = v2[21];
  swift_bridgeObjectRelease();
  id v24 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v2[22];

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 312);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(v2 + 23);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(v2 + 25);
  *(void *)(a1 + 344) = v2[27];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 352);
  long long v25 = *((_OWORD *)v2 + 15);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)v2 + 14);
  *(_OWORD *)(a1 + 368) = v25;
  *(void *)(a1 + 384) = v2[32];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 392);
  long long v26 = *(_OWORD *)(v2 + 35);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(v2 + 33);
  *(_OWORD *)(a1 + 408) = v26;
  *(void *)(a1 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2[37];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 432);
  long long v27 = *((_OWORD *)v2 + 20);
  *(_OWORD *)(a1 + 432) = *((_OWORD *)v2 + 19);
  *(_OWORD *)(a1 + 448) = v27;
  *(void *)(a1 + 464) = v2[42];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 472);
  long long v28 = *(_OWORD *)(v2 + 45);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(v2 + 43);
  *(_OWORD *)(a1 + 488) = v28;
  uint64_t v29 = v2[48];
  *(void *)(a1 + 504) = v2[47];
  *(void *)(a1 + 512) = v29;
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 520);
  long long v30 = *(_OWORD *)(v2 + 51);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(v2 + 49);
  *(_OWORD *)(a1 + 536) = v30;
  *(void *)(a1 + 552) = v2[53];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 560);
  long long v31 = *((_OWORD *)v2 + 28);
  *(_OWORD *)(a1 + 560) = *((_OWORD *)v2 + 27);
  *(_OWORD *)(a1 + 576) = v31;
  *(void *)(a1 + 592) = v2[58];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 600);
  long long v32 = *(_OWORD *)(v2 + 61);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(v2 + 59);
  *(_OWORD *)(a1 + 616) = v32;
  *(void *)(a1 + 632) = v2[63];
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 640);
  long long v33 = *((_OWORD *)v2 + 33);
  *(_OWORD *)(a1 + 640) = *((_OWORD *)v2 + 32);
  *(_OWORD *)(a1 + 656) = v33;
  *(void *)(a1 + 672) = v2[68];
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseMaintenanceManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 680)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseMaintenanceManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 680) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 680) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseMaintenanceManager()
{
  return &type metadata for DatabaseMaintenanceManager;
}

unint64_t sub_10007D07C()
{
  unint64_t result = qword_1001E2818;
  if (!qword_1001E2818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2818);
  }
  return result;
}

unint64_t sub_10007D0D4()
{
  unint64_t result = qword_1001E2820;
  if (!qword_1001E2820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2820);
  }
  return result;
}

unint64_t sub_10007D128(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10007D158();
  unint64_t result = sub_100024238();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10007D158()
{
  unint64_t result = qword_1001E2870;
  if (!qword_1001E2870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2870);
  }
  return result;
}

unint64_t sub_10007D1AC(char a1)
{
  unint64_t result = 0x6C7074656B72616DLL;
  switch(a1)
  {
    case 1:
    case 11:
      unint64_t result = 0x6B63616274736F70;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x6F7774656E5F6461;
      break;
    case 5:
    case 14:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0x69737265766E6F63;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0xD000000000000017;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 12:
      unint64_t result = 0x5F746361706D6F63;
      break;
    case 13:
      unint64_t result = 0xD000000000000012;
      break;
    case 15:
      unint64_t result = 0x6D69745F6B636F6CLL;
      break;
    case 16:
      unint64_t result = 0xD000000000000016;
      break;
    case 17:
      unint64_t result = 0x6E69775F646964;
      break;
    case 18:
      unint64_t result = 0x65636E6575716573;
      break;
    case 19:
      unint64_t result = 0x656B636F6C5F7369;
      break;
    case 20:
      unint64_t result = 0x7265747369676572;
      break;
    case 21:
      unint64_t result = 0xD000000000000014;
      break;
    case 22:
      unint64_t result = 0x69737265766E6F63;
      break;
    case 23:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    case 24:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10007D4F8()
{
  qword_1001E5F90 = (uint64_t)&off_1001C0EA0;
}

void sub_10007D50C()
{
  qword_1001E5F98 = (uint64_t)&off_1001C0ED8;
}

void sub_10007D520()
{
  qword_1001E5FA0 = (uint64_t)&off_1001C0F10;
}

void sub_10007D534()
{
  qword_1001E5FA8 = (uint64_t)&off_1001C0F40;
}

uint64_t sub_10007D548(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001077CC(*a1, *a2);
}

Swift::Int sub_10007D554()
{
  return Hasher._finalize()();
}

uint64_t sub_10007D5E0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10007D658()
{
  return Hasher._finalize()();
}

unint64_t sub_10007D6E0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100080024(*a1);
  *a2 = result;
  return result;
}

void sub_10007D710(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701734758;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = 0x657372616F63;
  if (*v1 != 1)
  {
    uint64_t v4 = 1701736302;
    unint64_t v3 = 0xE400000000000000;
  }
  if (*v1)
  {
    uint64_t v2 = v4;
    unint64_t v5 = v3;
  }
  else
  {
    unint64_t v5 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v5;
}

uint64_t sub_10007D758()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10007D7B8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10007D808(char *a1, char *a2)
{
  return sub_1001078B8(*a1, *a2);
}

Swift::Int sub_10007D814()
{
  return Hasher._finalize()();
}

uint64_t sub_10007D88C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10007D8F0()
{
  return Hasher._finalize()();
}

uint64_t sub_10007D964@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1001C0FD8;
  return sub_10001AC54(v2, a1, a2);
}

void sub_10007D970(uint64_t *a1@<X8>)
{
  uint64_t v2 = 2003134838;
  if (!*v1) {
    uint64_t v2 = 0x6B63696C63;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10007D9A4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10007DA04()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10007DA54(char *a1, char *a2)
{
  return sub_100107954(*a1, *a2);
}

Swift::Int sub_10007DA60()
{
  return Hasher._finalize()();
}

uint64_t sub_10007DAE8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10007DB5C()
{
  return Hasher._finalize()();
}

uint64_t sub_10007DBE0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1001C1028;
  return sub_10001AC54(v2, a1, a2);
}

void sub_10007DBEC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x726F7774654E6461;
  if (*v1) {
    uint64_t v2 = 0x65706F6C65766564;
  }
  unint64_t v3 = 0xE90000000000006BLL;
  if (*v1) {
    unint64_t v3 = 0xE900000000000072;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10007DC30()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10007DC90()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10007DCE0(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10007D1AC(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10007D1AC(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10007DD6C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10007D1AC(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10007DDD0()
{
  sub_10007D1AC(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10007DE24()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10007D1AC(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10007DE84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100080630();
  *a1 = result;
  return result;
}

unint64_t sub_10007DEB4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10007D1AC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10007DEE0()
{
  return sub_10007D1AC(*v0);
}

uint64_t sub_10007DEE8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100080630();
  *a1 = result;
  return result;
}

void sub_10007DF10(unsigned char *a1@<X8>)
{
  *a1 = 25;
}

void sub_10007DF1C(void *a1@<X8>)
{
  *a1 = &off_1001C0588;
}

uint64_t sub_10007DF2C(uint64_t a1)
{
  unint64_t v2 = sub_10007D0D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007DF68(uint64_t a1)
{
  unint64_t v2 = sub_10007D0D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007DFA4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v57 = a1;
  uint64_t v7 = sub_100012960(&qword_1001E12F0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v59 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v53 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v60 = (char *)&v53 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v53 - v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v55 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  long long v56 = (char *)&v53 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v58 = (char *)&v53 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  long long v27 = (char *)&v53 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v53 - v28;
  sub_100059F98(v4 + 216, (uint64_t)v61, &qword_1001E28D8);
  sub_100059F98((uint64_t)v61, (uint64_t)&v62, &qword_1001E28D8);
  if (v63)
  {
    char v30 = 0;
    return v30 & 1;
  }
  Date.init(timeIntervalSince1970:)();
  uint64_t result = sub_1000889D0(*(unsigned char *)(v4 + 192));
  if ((result & 1) == 0)
  {
    a3 = *(void *)(a2 + 16);
    if (qword_1001E08B8 == -1) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
  if (qword_1001E08C0 != -1) {
    swift_once();
  }
  unint64_t v32 = *(void *)(qword_1001E5F98 + 16);
  a2 = (uint64_t)v60;
  if (!v32)
  {
    __break(1u);
    goto LABEL_45;
  }
  if (!is_mul_ok(*(void *)(qword_1001E5F98 + 32), 0x3CuLL))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v32 < 2)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (!is_mul_ok(*(void *)(qword_1001E5F98 + 40), 0x3CuLL))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v32 >= 3)
  {
    if (is_mul_ok(*(void *)(qword_1001E5F98 + 48), 0x3CuLL)) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = swift_once();
LABEL_14:
  if (a3 >= *(void *)(qword_1001E5F90 + 16)) {
    long long v33 = (void *)a2;
  }
  else {
    long long v33 = (void *)qword_1001E5F90;
  }
  unint64_t v34 = v33[2];
  if (!v34)
  {
    __break(1u);
    goto LABEL_52;
  }
  unint64_t v35 = v33[4];
  if (!is_mul_ok(v35, 0x18uLL))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (!is_mul_ok(24 * v35, 0xE10uLL))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v34 < 2)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  unint64_t v36 = v33[5];
  if (!is_mul_ok(v36, 0x18uLL))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (!is_mul_ok(24 * v36, 0xE10uLL))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v34 < 3)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  unint64_t v37 = v33[6];
  if (!is_mul_ok(v37, 0x18uLL))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (is_mul_ok(24 * v37, 0xE10uLL))
  {
    a2 = (uint64_t)v60;
LABEL_27:
    uint64_t v38 = *(void *)(v4 + 112);
    if (v38 == 2 || v38 == 1)
    {
      Date.addingTimeInterval(_:)();
      uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
      v39(v16, 0, 1, v17);
    }
    else
    {
      if (v38)
      {
        long long v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
        v40(v16, 1, 1, v17);
        v40((char *)a2, 1, 1, v17);
        goto LABEL_34;
      }
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v16, v29, v17);
      uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
      v39(v16, 0, 1, v17);
    }
    Date.addingTimeInterval(_:)();
    v39((char *)a2, 0, 1, v17);
LABEL_34:
    sub_100081694((uint64_t)v16, (uint64_t)v12);
    long long v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    if (v41(v12, 1, v17) == 1)
    {
      sub_100029C34(a2);
      sub_100029C34((uint64_t)v16);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v29, v17);
    }
    else
    {
      uint64_t v54 = v16;
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
      v42(v27, v12, v17);
      uint64_t v12 = v59;
      sub_100081694(a2, (uint64_t)v59);
      if (v41(v12, 1, v17) != 1)
      {
        uint64_t v44 = v58;
        v42(v58, v12, v17);
        sub_10005D774();
        uint64_t v45 = v57;
        char v46 = dispatch thunk of static Comparable.< infix(_:_:)();
        long long v47 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
        uint64_t v48 = v56;
        v47(v56, v45, v17);
        uint64_t v49 = v55;
        v47(v55, (uint64_t)v44, v17);
        if (v46)
        {
          long long v50 = *(void (**)(char *, uint64_t))(v18 + 8);
          v50(v49, v17);
          char v30 = 0;
        }
        else
        {
          char v30 = static Date.< infix(_:_:)();
          long long v50 = *(void (**)(char *, uint64_t))(v18 + 8);
          v50(v49, v17);
        }
        uint64_t v51 = (uint64_t)v60;
        uint64_t v52 = (uint64_t)v54;
        v50(v48, v17);
        v50(v58, v17);
        v50(v27, v17);
        sub_100029C34(v51);
        sub_100029C34(v52);
        v50(v29, v17);
        return v30 & 1;
      }
      uint64_t v43 = *(void (**)(char *, uint64_t))(v18 + 8);
      v43(v27, v17);
      sub_100029C34(a2);
      sub_100029C34((uint64_t)v54);
      v43(v29, v17);
    }
    sub_100029C34((uint64_t)v12);
    char v30 = 0;
    return v30 & 1;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_10007E778()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v0 + 171) = 1;
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v8 = v7 * 1000.0;
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v8 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v8 >= 1.84467441e19)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(void *)(v0 + 232) = (unint64_t)v8;
  *(unsigned char *)(v0 + 240) = 0;
  sub_1000C3648(*(void *)(v0 + 112), *(unsigned char *)(v0 + 192), (uint64_t)v5);
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v10 = v9 * 1000.0;
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v10 <= -1.0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v10 < 1.84467441e19)
  {
    unint64_t v11 = (unint64_t)v10;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v1 + 248) = v11;
    *(unsigned char *)(v1 + 256) = 0;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10007E914(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v27 = a2;
  unint64_t v28 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  __chkstk_darwin(v6);
  double v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v27 - v14;
  Date.init(timeIntervalSince1970:)();
  char v16 = *(unsigned char *)(v3 + 104);
  type metadata accessor for PostbackUpdateData();
  ConversionType.isInstall.getter(v16);
  Date.addingTimeInterval(_:)();
  sub_10005D774();
  char v17 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  if (v17)
  {
    uint64_t v19 = Logger.postback.unsafeMutableAddressor();
    uint64_t v21 = v29;
    uint64_t v20 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v8, v19, v30);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      long long v31 = v18;
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Postback is past activation window. Not updating.", v24, 2u);
      uint64_t v18 = v31;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v20);
    sub_1000816FC();
    swift_allocError();
    *uint64_t v25 = 5;
    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
  }
  else
  {
    if (*(unsigned char *)(v4 + 105) == 1) {
      sub_10007EC68(a1, v27, v28);
    }
    else {
      sub_10007F4AC(a1, v27);
    }
    return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
  }
}

uint64_t sub_10007EC68(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v84 = a2;
  unint64_t v85 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v86 = *(void *)(v6 - 8);
  uint64_t v87 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v81 = (char *)&v77 - v10;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v80 = (uint64_t)&v77 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v77 - v18;
  char v20 = *(unsigned char *)(v3 + 224);
  long long v79 = v15;
  if (v20)
  {
    uint64_t updated = type metadata accessor for PostbackUpdateData();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v19, a1 + *(int *)(updated + 32), v11);
    uint64_t result = Date.timeIntervalSince1970.getter();
    double v24 = v23 * 1000.0;
    if ((~*(void *)&v24 & 0x7FF0000000000000) != 0)
    {
      if (v24 > -1.0)
      {
        if (v24 < 1.84467441e19)
        {
          unint64_t v25 = (unint64_t)v24;
          *(void *)(v4 + 216) = (unint64_t)v24;
          *(unsigned char *)(v4 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          goto LABEL_7;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v3 + 216);
  Date.init(timeIntervalSince1970:)();
LABEL_7:
  unint64_t v26 = *(void *)(v4 + 32);
  unint64_t v27 = *(void *)(v4 + 40);
  if (*(unsigned char *)(v4 + 171))
  {
    unint64_t v85 = *(void *)(v4 + 32);
    swift_bridgeObjectRetain();
    uint64_t v28 = Logger.postback.unsafeMutableAddressor();
    uint64_t v30 = v86;
    uint64_t v29 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v9, v28, v87);
    swift_bridgeObjectRetain();
    long long v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v83 = v11;
      uint64_t v34 = v12;
      unint64_t v35 = (uint8_t *)v33;
      uint64_t v36 = swift_slowAlloc();
      long long v82 = v19;
      uint64_t v96 = v36;
      *(_DWORD *)unint64_t v35 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v89 = sub_100147668(v85, v27, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Postback %s is locked", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v86 + 8))(v9, v87);
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v82, v83);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
    }
  }
  long long v82 = v19;
  uint64_t v83 = v11;
  uint64_t v78 = v12;
  uint64_t v37 = *(void *)v4;
  uint64_t v38 = *(void *)(v4 + 48);
  char v39 = *(unsigned char *)(v4 + 56);
  uint64_t v40 = *(void *)(v4 + 96);
  char v41 = *(unsigned char *)(v4 + 104);
  char v42 = *(unsigned char *)(v4 + 105);
  char v43 = *(unsigned char *)(v4 + 128);
  char v44 = *(unsigned char *)(v4 + 129);
  long long v45 = *(_OWORD *)(v4 + 136);
  uint64_t v46 = *(void *)(v4 + 152);
  uint64_t v47 = *(void *)(v4 + 160);
  char v48 = *(unsigned char *)(v4 + 168);
  char v49 = *(unsigned char *)(v4 + 169);
  unsigned __int8 v50 = *(unsigned char *)(v4 + 170);
  char v51 = *(unsigned char *)(v4 + 172);
  uint64_t v52 = *(void *)(v4 + 176);
  uint64_t v53 = *(void *)(v4 + 184);
  char v54 = *(unsigned char *)(v4 + 192);
  uint64_t v55 = *(void *)(v4 + 232);
  char v56 = *(unsigned char *)(v4 + 240);
  uint64_t v57 = *(void *)(v4 + 248);
  char v58 = *(unsigned char *)(v4 + 256);
  char v95 = *(unsigned char *)(v4 + 8);
  char v94 = v39;
  char v93 = v43;
  char v92 = 0;
  char v91 = v56;
  char v90 = v58;
  uint64_t v96 = v37;
  char v97 = v95;
  long long v98 = *(_OWORD *)(v4 + 16);
  unint64_t v99 = v26;
  unint64_t v100 = v27;
  uint64_t v101 = v38;
  char v102 = v39;
  long long v59 = *(_OWORD *)(v4 + 80);
  long long v103 = *(_OWORD *)(v4 + 64);
  long long v104 = v59;
  uint64_t v105 = v40;
  char v106 = v41;
  char v107 = v42;
  long long v77 = *(_OWORD *)(v4 + 112);
  long long v108 = v77;
  char v109 = v43;
  char v110 = v44;
  long long v111 = v45;
  uint64_t v112 = v46;
  uint64_t v113 = v47;
  char v114 = v48;
  char v115 = v49;
  __int16 v116 = v50;
  char v117 = v51;
  uint64_t v118 = v52;
  uint64_t v119 = v53;
  char v120 = v54;
  long long v121 = *(_OWORD *)(v4 + 200);
  unint64_t v122 = v25;
  char v123 = 0;
  uint64_t v124 = v55;
  char v125 = v56;
  uint64_t v126 = v57;
  char v127 = v58;
  uint64_t v60 = a1 + *(int *)(type metadata accessor for PostbackUpdateData() + 32);
  swift_bridgeObjectRetain();
  if (sub_10007DFA4(v60, v84, v85))
  {
    swift_bridgeObjectRelease();
    *(unsigned char *)(v4 + 170) = 1;
    *(void *)(v4 + 120) = *(void *)a1;
    *(unsigned char *)(v4 + 128) = 0;
    *(unsigned char *)(v4 + 129) = *(unsigned char *)(a1 + 8);
    uint64_t v61 = v78;
    if (*(unsigned char *)(a1 + 9) == 1)
    {
      sub_10007E778();
      return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v82, v83);
    }
    unint64_t v69 = v77;
    uint64_t v70 = (uint64_t)v79;
    sub_1000C3980(v77, v84, v54, (uint64_t)v79);
    uint64_t v71 = v80;
    sub_1000C3648(v69, v54, v80);
    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v72(v70, v83);
    uint64_t result = Date.timeIntervalSince1970.getter();
    double v74 = v73 * 1000.0;
    if ((~*(void *)&v74 & 0x7FF0000000000000) != 0)
    {
      if (v74 > -1.0)
      {
        if (v74 < 1.84467441e19)
        {
          unint64_t v75 = (unint64_t)v74;
          uint64_t v76 = v83;
          v72(v71, v83);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v72)(v82, v76);
          *(void *)(v4 + 248) = v75;
          *(unsigned char *)(v4 + 256) = 0;
          return result;
        }
        goto LABEL_29;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v85 = v26;
  uint64_t v62 = Logger.postback.unsafeMutableAddressor();
  uint64_t v63 = v86;
  uint64_t v64 = v87;
  uint64_t v65 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v81, v62, v87);
  swift_bridgeObjectRetain();
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v88 = sub_100147668(v85, v27, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Postback %s is not currently active", v68, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v63 + 8))(v81, v64);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v64);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v82, v83);
}

uint64_t sub_10007F4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v30 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - v13;
  if ((*(unsigned char *)(v3 + 170) & 1) == 0)
  {
    *(unsigned char *)(v3 + 170) = 1;
    type metadata accessor for PostbackUpdateData();
    uint64_t result = Date.timeIntervalSince1970.getter();
    double v23 = v22 * 1000.0;
    if ((~*(void *)&v23 & 0x7FF0000000000000) != 0)
    {
      if (v23 > -1.0)
      {
        if (v23 < 1.84467441e19)
        {
          *(void *)(v3 + 216) = (unint64_t)v23;
          *(unsigned char *)(v3 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          char v24 = *(unsigned char *)(v3 + 192);
          sub_1000C3980(0, v30, v24, (uint64_t)v12);
          sub_1000C3648(0, v24, (uint64_t)v14);
          unint64_t v25 = *(void (**)(char *, uint64_t))(v9 + 8);
          v25(v12, v8);
          uint64_t result = Date.timeIntervalSince1970.getter();
          double v27 = v26 * 1000.0;
          if ((~*(void *)&v27 & 0x7FF0000000000000) != 0)
          {
            if (v27 > -1.0)
            {
              if (v27 < 1.84467441e19)
              {
                unint64_t v28 = (unint64_t)v27;
                uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v14, v8);
                *(void *)(v3 + 248) = v28;
                *(unsigned char *)(v3 + 256) = 0;
                return result;
              }
              goto LABEL_19;
            }
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            return result;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v3 + 32);
  unint64_t v15 = *(void *)(v3 + 40);
  swift_bridgeObjectRetain();
  uint64_t v17 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v17, v4);
  swift_bridgeObjectRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v30 = v16;
    char v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)char v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_100147668(v30, v15, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Runner up %s has already been registered", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10007F8AC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E28B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10007D0D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = v3[168];
    char v11 = 5;
    sub_100081598();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = v3[169];
    char v11 = 6;
    sub_1000815EC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = v3[104];
    char v11 = 7;
    sub_10005D6CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 129), (uint64_t)&v13, &qword_1001E1D40);
    sub_100059F98((uint64_t)&v13, (uint64_t)&v12, &qword_1001E1D40);
    char v11 = 9;
    sub_10005D678();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 17;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 19;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 20;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = v3[172];
    char v11 = 21;
    sub_100081640();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = 22;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = v3[192];
    char v11 = 23;
    sub_100046408();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = 24;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_10007FE6C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100080684(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x101uLL);
  }
  return result;
}

uint64_t sub_10007FEC0(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return sub_10007F8AC(a1);
}

unint64_t sub_10007FF18()
{
  unint64_t result = qword_1001E2878;
  if (!qword_1001E2878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2878);
  }
  return result;
}

unint64_t sub_10007FF70()
{
  unint64_t result = qword_1001E2880;
  if (!qword_1001E2880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2880);
  }
  return result;
}

unint64_t sub_10007FFC8()
{
  unint64_t result = qword_1001E2888;
  if (!qword_1001E2888)
  {
    sub_100011ECC(&qword_1001E2890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2888);
  }
  return result;
}

unint64_t sub_100080024(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0F70, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

void *sub_100080070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v71 = a8;
  uint64_t v130 = a7;
  uint64_t v70 = a6;
  uint64_t v63 = a9;
  uint64_t v72 = a10;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v61 = *(void *)(v17 - 8);
  uint64_t v62 = v17;
  __chkstk_darwin(v17);
  uint64_t v64 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v120 = 1;
  char v117 = 1;
  char v115 = 0;
  char v114 = 1;
  char v113 = 1;
  char v112 = 1;
  long long v19 = *(_OWORD *)(a1 + 32);
  long long v20 = *(_OWORD *)(a1 + 48);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v123 = *(_OWORD *)(a1 + 64);
  long long v124 = v21;
  long long v121 = v19;
  long long v122 = v20;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  uint64_t v129 = *(void *)(a1 + 160);
  long long v127 = v24;
  long long v128 = v25;
  long long v125 = v22;
  long long v126 = v23;
  uint64_t v26 = *((void *)&v123 + 1);
  int v60 = BYTE8(v124);
  char v119 = BYTE8(v124);
  uint64_t v66 = v22;
  uint64_t v67 = v124;
  uint64_t v27 = v24;
  uint64_t v68 = *((void *)&v23 + 1);
  uint64_t v69 = v123;
  uint64_t v28 = *((void *)&v122 + 1);
  uint64_t v65 = v122;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  sub_100082490((uint64_t)&v121);
  v29._uint64_t countAndFlagsBits = a2;
  v29._object = a3;
  Swift::Int v30 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0FD8, v29);
  swift_bridgeObjectRelease();
  if (v30)
  {
    if (v30 != 1)
    {
      swift_bridgeObjectRelease();
      char v49 = 0;
      goto LABEL_14;
    }
    char v31 = 1;
  }
  else
  {
    char v31 = 0;
  }
  char v116 = v31;
  v32._uint64_t countAndFlagsBits = a4;
  v32._object = a5;
  unint64_t v33 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C0F70, v32);
  swift_bridgeObjectRelease();
  if (v33 > 2)
  {
    char v49 = 1;
  }
  else
  {
    uint64_t v34 = *((void *)&v127 + 1);
    unint64_t v35 = (void *)v128;
    swift_bridgeObjectRetain();
    v36._uint64_t countAndFlagsBits = v34;
    v36._object = v35;
    unint64_t v37 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1078, v36);
    swift_bridgeObjectRelease();
    if (v37 <= 2)
    {
      uint64_t v58 = *((void *)&v125 + 1);
      unint64_t v59 = v37;
      uint64_t v54 = v126;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_100082508((uint64_t)&v121);
      char v38 = BYTE8(v128);
      char v118 = BYTE8(v128);
      uint64_t v39 = *(void *)(a1 + 192);
      uint64_t v57 = *(void *)(a1 + 184);
      uint64_t v55 = v129;
      uint64_t v56 = v39;
      swift_bridgeObjectRetain_n();
      sub_100082580(a1);
      uint64_t v40 = v64;
      static Date.now.getter();
      unint64_t result = (void *)Date.timeIntervalSince1970.getter();
      double v43 = v42 * 1000.0;
      if ((~*(void *)&v43 & 0x7FF0000000000000) != 0)
      {
        if (v43 > -1.0)
        {
          unint64_t v53 = v33;
          if (v43 < 1.84467441e19)
          {
            uint64_t v52 = a11;
            HIDWORD(v51) = a12 & 1;
            unint64_t v44 = (unint64_t)v43;
            (*(void (**)(char *, uint64_t))(v61 + 8))(v40, v62);
            v73[0] = 0;
            LOBYTE(v73[1]) = 1;
            v73[2] = v65;
            v73[3] = v28;
            v73[4] = v69;
            v73[5] = v26;
            v73[6] = v67;
            LOBYTE(v73[7]) = v60;
            v73[8] = v66;
            v73[9] = v58;
            v73[10] = v54;
            v73[11] = v68;
            v73[12] = v27;
            LOBYTE(v73[13]) = v59;
            BYTE1(v73[13]) = v38;
            v73[14] = v55;
            v73[15] = 0;
            LOWORD(v73[16]) = 769;
            v73[17] = v57;
            v73[18] = v56;
            uint64_t v45 = v130;
            v73[19] = v70;
            v73[20] = v130;
            LOBYTE(v73[21]) = v31;
            BYTE1(v73[21]) = v53;
            WORD1(v73[21]) = 0;
            BYTE4(v73[21]) = 0;
            uint64_t v46 = v72;
            v73[22] = v71;
            v73[23] = v72;
            LOBYTE(v73[24]) = a12 & 1;
            v73[25] = v52;
            v73[26] = v44;
            v73[27] = 0;
            LOBYTE(v73[28]) = 1;
            v73[29] = 0;
            LOBYTE(v73[30]) = 1;
            v73[31] = 0;
            LOBYTE(v73[32]) = 1;
            swift_bridgeObjectRetain();
            sub_100081480((uint64_t)v73);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v47 = v54;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v48 = v56;
            swift_bridgeObjectRelease();
            uint64_t v74 = 0;
            char v75 = v120;
            uint64_t v76 = v65;
            uint64_t v77 = v28;
            uint64_t v78 = v69;
            uint64_t v79 = v26;
            uint64_t v80 = v67;
            char v81 = v119;
            uint64_t v82 = v66;
            uint64_t v83 = v58;
            uint64_t v84 = v47;
            uint64_t v85 = v68;
            uint64_t v86 = v27;
            char v87 = v59;
            char v88 = v118;
            uint64_t v89 = v55;
            uint64_t v90 = 0;
            char v91 = v117;
            char v92 = 3;
            uint64_t v93 = v57;
            uint64_t v94 = v48;
            uint64_t v95 = v70;
            uint64_t v96 = v45;
            char v97 = v116;
            char v98 = v53;
            __int16 v99 = 0;
            char v100 = v115;
            uint64_t v101 = v71;
            uint64_t v102 = v46;
            char v103 = BYTE4(v51);
            uint64_t v104 = v52;
            unint64_t v105 = v44;
            uint64_t v106 = 0;
            char v107 = v114;
            uint64_t v108 = 0;
            char v109 = v113;
            uint64_t v110 = 0;
            char v111 = v112;
            sub_10008150C((uint64_t)&v74);
            return memcpy(v63, v73, 0x101uLL);
          }
          goto LABEL_18;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_18:
      __break(1u);
      return result;
    }
    char v49 = 2;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100082508((uint64_t)&v121);
  sub_100082580(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000816FC();
  swift_allocError();
  *unsigned __int8 v50 = v49;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (void *)swift_bridgeObjectRelease();
}

uint64_t sub_100080630()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x19) {
    return 25;
  }
  else {
    return v0;
  }
}

void *sub_100080684@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v69 = a2;
  uint64_t v70 = sub_100012960(&qword_1001E2898);
  uint64_t v4 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v139 = 1;
  char v133 = 1;
  char v127 = 1;
  char v125 = 1;
  char v123 = 1;
  sub_100012D78(a1, a1[3]);
  sub_10007D0D4();
  uint64_t v140 = v6;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)_s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  uint64_t v7 = v4;
  uint64_t v68 = a1;
  uint64_t v8 = v69;
  LOBYTE(v72) = 1;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  LOBYTE(v72) = 0;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v67 = v12;
  LOBYTE(v72) = 2;
  swift_bridgeObjectRetain();
  uint64_t v61 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v72) = 3;
  uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v137 = v15 & 1;
  LOBYTE(v72) = 4;
  int v59 = v15;
  uint64_t v58 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v71[0]) = 5;
  uint64_t v17 = v16;
  sub_100081384();
  uint64_t v66 = v17;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v57 = v72;
  LOBYTE(v71[0]) = 6;
  sub_1000813D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v56 = v72;
  LOBYTE(v71[0]) = 7;
  sub_10005D54C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v55 = v72;
  LOBYTE(v72) = 8;
  uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v53 = v18;
  char v133 = v18 & 1;
  LOBYTE(v71[0]) = 9;
  sub_10005D4F8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v52 = v72;
  LOBYTE(v72) = 10;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v65 = v20;
  uint64_t v21 = v19;
  LOBYTE(v72) = 11;
  swift_bridgeObjectRetain();
  uint64_t v51 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v64 = v22;
  LOBYTE(v72) = 12;
  swift_bridgeObjectRetain();
  uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v63 = v23;
  LOBYTE(v72) = 13;
  swift_bridgeObjectRetain();
  uint64_t v49 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v72) = 14;
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v48 = v24;
  char v127 = v24 & 1;
  LOBYTE(v72) = 15;
  uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v46 = v25;
  char v125 = v25 & 1;
  LOBYTE(v72) = 16;
  uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v44 = v26;
  char v123 = v26 & 1;
  LOBYTE(v72) = 17;
  BOOL v42 = KeyedDecodingContainer.decode(_:forKey:)() == 1;
  LOBYTE(v72) = 18;
  uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v72) = 19;
  BOOL v40 = KeyedDecodingContainer.decode(_:forKey:)() == 1;
  LOBYTE(v72) = 20;
  BOOL v39 = KeyedDecodingContainer.decode(_:forKey:)() == 1;
  LOBYTE(v71[0]) = 21;
  sub_10008142C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v38 = v72;
  LOBYTE(v72) = 22;
  uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v62 = v27;
  LOBYTE(v71[0]) = 23;
  sub_1000472D8();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v36 = v72;
  char v122 = 24;
  uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v140, v70);
  LOBYTE(v71[1]) = 1;
  LOBYTE(v71[7]) = v59 & 1;
  LOBYTE(v71[16]) = v53 & 1;
  LOBYTE(v71[28]) = v48 & 1;
  LOBYTE(v71[30]) = v46 & 1;
  LOBYTE(v71[32]) = v44 & 1;
  v71[0] = 0;
  v71[2] = v67;
  v71[3] = v14;
  uint64_t v28 = v14;
  v71[4] = v9;
  v71[5] = v11;
  uint64_t v29 = v11;
  v71[6] = v60;
  v71[8] = v61;
  v71[9] = v21;
  uint64_t v34 = v21;
  v71[10] = v65;
  v71[11] = v58;
  v71[12] = v66;
  LOBYTE(v71[13]) = v55;
  BYTE1(v71[13]) = v42;
  v71[14] = v41;
  v71[15] = v54;
  BYTE1(v71[16]) = v52;
  uint64_t v30 = v62;
  v71[17] = v50;
  v71[18] = v63;
  v71[19] = v51;
  v71[20] = v64;
  LOBYTE(v71[21]) = v57;
  BYTE1(v71[21]) = v56;
  BYTE2(v71[21]) = v39;
  BYTE3(v71[21]) = v40;
  BYTE4(v71[21]) = v38;
  v71[22] = v37;
  v71[23] = v62;
  LOBYTE(v71[24]) = v36;
  v71[25] = v35;
  v71[26] = v49;
  v71[27] = v47;
  v71[29] = v45;
  v71[31] = v43;
  sub_100081480((uint64_t)v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = v64;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v68);
  uint64_t v75 = v67;
  uint64_t v76 = v28;
  uint64_t v77 = v9;
  uint64_t v78 = v29;
  uint64_t v72 = 0;
  char v73 = v139;
  *(_DWORD *)uint64_t v74 = *(_DWORD *)v138;
  *(_DWORD *)&v74[3] = *(_DWORD *)&v138[3];
  uint64_t v79 = v60;
  char v80 = v137;
  *(_DWORD *)char v81 = *(_DWORD *)v136;
  *(_DWORD *)&v81[3] = *(_DWORD *)&v136[3];
  uint64_t v82 = v61;
  uint64_t v83 = v34;
  uint64_t v84 = v65;
  uint64_t v85 = v58;
  uint64_t v86 = v31;
  char v87 = v55;
  BOOL v88 = v42;
  int v89 = v134;
  __int16 v90 = v135;
  uint64_t v91 = v41;
  uint64_t v92 = v54;
  char v93 = v133;
  char v94 = v52;
  int v95 = v131;
  __int16 v96 = v132;
  uint64_t v97 = v50;
  uint64_t v98 = v63;
  uint64_t v99 = v51;
  uint64_t v100 = v32;
  char v101 = v57;
  char v102 = v56;
  BOOL v103 = v39;
  BOOL v104 = v40;
  char v105 = v38;
  char v107 = v130;
  __int16 v106 = v129;
  uint64_t v108 = v37;
  uint64_t v109 = v30;
  char v110 = v36;
  *(_DWORD *)&v111[3] = *(_DWORD *)&v128[3];
  *(_DWORD *)char v111 = *(_DWORD *)v128;
  uint64_t v112 = v35;
  uint64_t v113 = v49;
  uint64_t v114 = v47;
  char v115 = v127;
  *(_DWORD *)&v116[3] = *(_DWORD *)&v126[3];
  *(_DWORD *)char v116 = *(_DWORD *)v126;
  uint64_t v117 = v45;
  char v118 = v125;
  *(_DWORD *)&void v119[3] = *(_DWORD *)&v124[3];
  *(_DWORD *)char v119 = *(_DWORD *)v124;
  uint64_t v120 = v43;
  char v121 = v123;
  sub_10008150C((uint64_t)&v72);
  return memcpy(v8, v71, 0x101uLL);
}

unint64_t sub_100081384()
{
  unint64_t result = qword_1001E28A0;
  if (!qword_1001E28A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28A0);
  }
  return result;
}

unint64_t sub_1000813D8()
{
  unint64_t result = qword_1001E28A8;
  if (!qword_1001E28A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28A8);
  }
  return result;
}

unint64_t sub_10008142C()
{
  unint64_t result = qword_1001E28B0;
  if (!qword_1001E28B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28B0);
  }
  return result;
}

uint64_t sub_100081480(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008150C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100081598()
{
  unint64_t result = qword_1001E28C0;
  if (!qword_1001E28C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28C0);
  }
  return result;
}

unint64_t sub_1000815EC()
{
  unint64_t result = qword_1001E28C8;
  if (!qword_1001E28C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28C8);
  }
  return result;
}

unint64_t sub_100081640()
{
  unint64_t result = qword_1001E28D0;
  if (!qword_1001E28D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28D0);
  }
  return result;
}

uint64_t sub_100081694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E12F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000816FC()
{
  unint64_t result = qword_1001E28E0;
  if (!qword_1001E28E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28E0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PostbackModelError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008181CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackModelError()
{
  return &type metadata for PostbackModelError;
}

ValueMetadata *type metadata accessor for PostbackModel.PostbackDestination()
{
  return &type metadata for PostbackModel.PostbackDestination;
}

unsigned char *storeEnumTagSinglePayload for PostbackModel.ConversionValueTier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100081934);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackModel.ConversionValueTier()
{
  return &type metadata for PostbackModel.ConversionValueTier;
}

unsigned char *_s20AttributionKitDaemon13PostbackModelV15InteractionTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100081A38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackModel.InteractionType()
{
  return &type metadata for PostbackModel.InteractionType;
}

uint64_t getEnumTagSinglePayload for PostbackModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE8) {
    goto LABEL_17;
  }
  if (a2 + 24 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 24) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 24;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x19;
  int v8 = v6 - 25;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PostbackModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE7)
  {
    unsigned int v6 = ((a2 - 232) >> 8) + 1;
    *unint64_t result = a2 + 24;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100081BCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 24;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackModel.CodingKeys()
{
  return &type metadata for PostbackModel.CodingKeys;
}

uint64_t destroy for PostbackModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PostbackModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v7;
  uint64_t v8 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v8;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(_WORD *)(a1 + 170) = *(_WORD *)(a2 + 170);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v9;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  uint64_t v10 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = v10;
  uint64_t v11 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v11;
  uint64_t v12 = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PostbackModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = a2[11];
  *(void *)(a1 + 96) = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(unsigned char *)(a1 + 105) = *((unsigned char *)a2 + 105);
  *(void *)(a1 + 112) = a2[14];
  uint64_t v6 = a2[15];
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(void *)(a1 + 120) = v6;
  *(unsigned char *)(a1 + 129) = *((unsigned char *)a2 + 129);
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = a2[19];
  *(void *)(a1 + 160) = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(unsigned char *)(a1 + 169) = *((unsigned char *)a2 + 169);
  *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
  *(unsigned char *)(a1 + 171) = *((unsigned char *)a2 + 171);
  *(unsigned char *)(a1 + 172) = *((unsigned char *)a2 + 172);
  *(void *)(a1 + 176) = a2[22];
  *(void *)(a1 + 184) = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *((unsigned char *)a2 + 192);
  *(void *)(a1 + 200) = a2[25];
  *(void *)(a1 + 208) = a2[26];
  uint64_t v7 = a2[27];
  *(unsigned char *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((unsigned char *)a2 + 224);
  *(void *)(a1 + 216) = v7;
  uint64_t v8 = a2[29];
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  *(void *)(a1 + 232) = v8;
  uint64_t v9 = a2[31];
  *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
  *(void *)(a1 + 248) = v9;
  return a1;
}

void *initializeWithTake for PostbackModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x101uLL);
}

uint64_t assignWithTake for PostbackModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 257)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 256) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 257) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 257) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackModel()
{
  return &type metadata for PostbackModel;
}

unint64_t sub_1000821B8()
{
  unint64_t result = qword_1001E28E8;
  if (!qword_1001E28E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28E8);
  }
  return result;
}

unint64_t sub_100082210()
{
  unint64_t result = qword_1001E28F0;
  if (!qword_1001E28F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28F0);
  }
  return result;
}

unint64_t sub_100082268()
{
  unint64_t result = qword_1001E28F8;
  if (!qword_1001E28F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E28F8);
  }
  return result;
}

unint64_t sub_1000822C0()
{
  unint64_t result = qword_1001E2900;
  if (!qword_1001E2900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2900);
  }
  return result;
}

unint64_t sub_100082314(uint64_t a1)
{
  unint64_t result = sub_1000816FC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100082340()
{
  unint64_t result = qword_1001E2908;
  if (!qword_1001E2908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2908);
  }
  return result;
}

unint64_t sub_100082394()
{
  unint64_t result = qword_1001E2910;
  if (!qword_1001E2910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2910);
  }
  return result;
}

unint64_t sub_1000823E8()
{
  unint64_t result = qword_1001E2918;
  if (!qword_1001E2918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2918);
  }
  return result;
}

unint64_t sub_10008243C()
{
  unint64_t result = qword_1001E2920;
  if (!qword_1001E2920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2920);
  }
  return result;
}

uint64_t sub_100082490(uint64_t a1)
{
  return a1;
}

uint64_t sub_100082508(uint64_t a1)
{
  return a1;
}

uint64_t sub_100082580(uint64_t a1)
{
  return a1;
}

uint64_t sub_100082638()
{
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  swift_retain();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 addObserver:v0 selector:"handleApplicationRegisteredNotification:" name:v3 object:0];

  swift_release();
  id v4 = [v1 defaultCenter];
  swift_retain();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 addObserver:v0 selector:"handleApplicationUnregisteredNotification:" name:v5 object:0];

  swift_release();
  return v0;
}

void *sub_100082770()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (!v0)
  {
    long long v6 = 0u;
    long long v7 = 0u;
LABEL_10:
    sub_100019960((uint64_t)&v6, &qword_1001E1BB8);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v1 = v0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v1 + 16) && (unint64_t v2 = sub_1000AEEE4((uint64_t)v5), (v3 & 1) != 0))
  {
    sub_10003742C(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v6);
  }
  else
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10008615C((uint64_t)v5);
  if (!*((void *)&v7 + 1)) {
    goto LABEL_10;
  }
  sub_100012960(&qword_1001E26C0);
  if (swift_dynamicCast()) {
    return (void *)v5[0];
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100082878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *long long v7 = v5;
  v7[1] = sub_100013480;
  return sub_100083088(a5);
}

uint64_t sub_100082934(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v7 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100082770();
  uint64_t v15 = Logger.general.unsafeMutableAddressor();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v32 = v10;
  v16(v13, v15, v10);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v30 = a4;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v33 = (uint64_t)v14;
    uint64_t v34 = v28;
    uint64_t v29 = a3;
    *(_DWORD *)uint64_t v20 = 136315138;
    v26[1] = v20 + 4;
    uint64_t v27 = v20;
    sub_100012960(&qword_1001E26C0);
    sub_10008302C();
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v33 = sub_100147668(v21, v22, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v31, v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v30;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v32);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v9, 1, 1, v23);
  int v24 = (void *)swift_allocObject();
  void v24[2] = 0;
  v24[3] = 0;
  void v24[4] = v4;
  v24[5] = v14;
  swift_retain();
  sub_100017E98((uint64_t)v9, a4, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_100082C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100013480;
  return sub_100085674(a5);
}

uint64_t sub_100082D40(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for Notification();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  sub_100082934((uint64_t)v12, a4, a5, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t type metadata accessor for LaunchServicesObserver()
{
  return self;
}

uint64_t sub_100082E78()
{
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = sub_100013480;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100013480;
  return sub_100085674(v2);
}

id sub_100082F50(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

unint64_t sub_10008302C()
{
  unint64_t result = qword_1001E29D0;
  if (!qword_1001E29D0)
  {
    sub_100011ECC(&qword_1001E26C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E29D0);
  }
  return result;
}

uint64_t sub_100083088(uint64_t a1)
{
  v1[117] = a1;
  uint64_t v2 = type metadata accessor for Logger();
  v1[118] = v2;
  v1[119] = *(void *)(v2 - 8);
  v1[120] = swift_task_alloc();
  v1[121] = swift_task_alloc();
  return _swift_task_switch(sub_100083184, 0, 0);
}

uint64_t sub_100083184()
{
  uint64_t v76 = v0;
  uint64_t v1 = *(void *)(v0 + 936);
  int64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_40:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v67 = *(uint64_t (**)(void))(v0 + 8);
    return v67();
  }
  uint64_t v69 = (long long *)(v0 + 528);
  char v3 = (long long *)(v0 + 568);
  uint64_t v74 = v0 + 688;
  char v73 = (long long *)(v0 + 728);
  uint64_t v70 = (void *)(v0 + 848);
  uint64_t v4 = *(void *)(v0 + 952);
  v75[0] = _swiftEmptyArrayStorage;
  sub_10013A7A8(0, v2, 0);
  NSString v5 = _swiftEmptyArrayStorage;
  uint64_t v71 = (void (**)(void, void))(v4 + 8);
  uint64_t v72 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + 40;
  id v7 = (void **)(v0 + 928);
  do
  {
    id v8 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *id v7 = 0;
    id v10 = [v8 initWithBundleIdentifier:v9 allowPlaceholder:0 error:v7];

    uint64_t v11 = *v7;
    if (v10)
    {
      *(void *)(v0 + 632) = sub_100059F58();
      *(void *)(v0 + 640) = &off_1001C8F18;
      *(void *)(v0 + 608) = v10;
      sub_1000864B0(v0 + 608, v0 + 568);
      id v12 = v11;
      uint64_t v13 = (long long *)(v0 + 768);
    }
    else
    {
      uint64_t v14 = *(void *)(v0 + 968);
      uint64_t v15 = *(void *)(v0 + 944);
      id v16 = v11;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v17 = Logger.xpc.unsafeMutableAddressor();
      (*v72)(v14, v17, v15);
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v21 = v5;
        unint64_t v22 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 138412290;
        swift_errorRetain();
        uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v20 + 4) = v23;
        void *v22 = v23;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to get bundle record from bundle ID: %@", (uint8_t *)v20, 0xCu);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        NSString v5 = v21;
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v13 = (long long *)(v0 + 768);
      (*v71)(*(void *)(v0 + 968), *(void *)(v0 + 944));
      *(void *)(v0 + 600) = 0;
      *char v3 = 0u;
      *(_OWORD *)(v0 + 584) = 0u;
      id v7 = (void **)(v0 + 928);
    }
    v75[0] = v5;
    unint64_t v25 = v5[2];
    unint64_t v24 = v5[3];
    if (v25 >= v24 >> 1)
    {
      sub_10013A7A8(v24 > 1, v25 + 1, 1);
      NSString v5 = (void *)v75[0];
    }
    _OWORD v5[2] = v25 + 1;
    int v26 = &v5[5 * v25];
    long long v27 = *v3;
    long long v28 = *(_OWORD *)(v0 + 584);
    v26[8] = *(void *)(v0 + 600);
    *((_OWORD *)v26 + 2) = v27;
    *((_OWORD *)v26 + 3) = v28;
    v6 += 16;
    --v2;
  }
  while (v2);
  uint64_t v29 = v5[2];
  if (v29)
  {
    swift_retain();
    uint64_t v30 = (uint64_t)(v5 + 4);
    uint64_t v31 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000862D4(v30, v74);
      sub_100086330(v74, (uint64_t)v13);
      sub_100086398(v74);
      if (*(void *)(v0 + 792))
      {
        sub_100012D60(v13, (uint64_t)v73);
        sub_100012D60(v73, (uint64_t)v69);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v31 = sub_100139FF0(0, v31[2] + 1, 1, v31);
        }
        unint64_t v33 = v31[2];
        unint64_t v32 = v31[3];
        if (v33 >= v32 >> 1) {
          uint64_t v31 = sub_100139FF0((void *)(v32 > 1), v33 + 1, 1, v31);
        }
        void v31[2] = v33 + 1;
        sub_100012D60(v69, (uint64_t)&v31[5 * v33 + 4]);
        uint64_t v13 = (long long *)(v0 + 768);
      }
      else
      {
        sub_100019960((uint64_t)v13, &qword_1001E1398);
      }
      v30 += 40;
      --v29;
    }
    while (v29);
    swift_release_n();
  }
  else
  {
    swift_release();
    uint64_t v31 = _swiftEmptyArrayStorage;
  }
  *(void *)(v0 + 976) = v31;
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  uint64_t v34 = (void *)qword_1001E5F88;
  uint64_t v35 = self;
  id v36 = v34;
  id v37 = [v35 sharedScheduler];
  *(void *)(v0 + 160) = &type metadata for ActivityManager;
  *(void *)(v0 + 168) = &off_1001CCE58;
  int v38 = (void *)swift_allocObject();
  *(void *)(v0 + 136) = v38;
  v38[5] = &type metadata for BackgroundSystemTaskScheduler;
  v38[6] = &off_1001C30C8;
  v38[2] = v37;
  *(void *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &type metadata for AttributionKitCanineArbiter;
  *(void *)(v0 + 232) = &off_1001C3FF8;
  uint64_t v39 = qword_1001E0880;
  id v40 = v36;
  if (v39 != -1) {
    swift_once();
  }
  uint64_t v41 = qword_1001E5F50;
  *(void *)(v0 + 264) = type metadata accessor for TaskGreyhound();
  *(void *)(v0 + 272) = &off_1001C2490;
  *(void *)(v0 + 240) = v41;
  *(void *)(v0 + 304) = &type metadata for LaunchServicesRecordFactory;
  *(void *)(v0 + 312) = &off_1001C6D08;
  *(void *)(v0 + 344) = &type metadata for AMSDogBag;
  *(void *)(v0 + 352) = &off_1001CAA18;
  swift_retain();
  id v42 = [v35 sharedScheduler];
  v75[3] = &type metadata for ActivityManager;
  v75[4] = &off_1001CCE58;
  uint64_t v43 = (void *)swift_allocObject();
  v75[0] = v43;
  v43[5] = &type metadata for BackgroundSystemTaskScheduler;
  v43[6] = &off_1001C30C8;
  v43[2] = v42;
  sub_100087C5C((uint64_t)v75, v0 + 360);
  *(void *)(v0 + 432) = &type metadata for AppStoreDaemonSKANInterop;
  *(void *)(v0 + 440) = &off_1001CA740;
  int v44 = (void *)qword_1001E5F88;
  *(void *)(v0 + 472) = &type metadata for AggregatedReportingManager;
  *(void *)(v0 + 480) = &off_1001C7F28;
  uint64_t v45 = (void *)swift_allocObject();
  *(void *)(v0 + 448) = v45;
  v45[8] = &type metadata for AMSDogBag;
  v45[9] = &off_1001CAA18;
  v45[13] = &type metadata for BiomeEventStreamDog;
  v45[14] = &off_1001C8C58;
  v45[2] = 0x74735F6E656B6F74;
  v45[3] = 0xEB0000000065726FLL;
  v45[4] = v44;
  uint64_t v46 = qword_1001E0940;
  id v47 = v44;
  if (v46 != -1) {
    swift_once();
  }
  uint64_t v48 = qword_1001E60E8;
  *(void *)(v0 + 512) = type metadata accessor for SnoutManager();
  *(void *)(v0 + 520) = &off_1001CB0F8;
  *(void *)(v0 + 488) = v48;
  strcpy((char *)(v0 + 16), "postback_store");
  *(unsigned char *)(v0 + 31) = -18;
  *(void *)(v0 + 32) = v40;
  *(void *)(v0 + 40) = 0x63616274736F6867;
  *(void *)(v0 + 48) = 0xEF65726F74735F6BLL;
  *(void *)(v0 + 56) = v40;
  *(void *)(v0 + 64) = 0xD000000000000010;
  *(void *)(v0 + 72) = 0x8000000100185910;
  *(void *)(v0 + 80) = v40;
  *(void *)(v0 + 88) = 0x74735F6E656B6F74;
  *(void *)(v0 + 96) = 0xEB0000000065726FLL;
  *(void *)(v0 + 104) = v40;
  *(void *)(v0 + 112) = 0xD000000000000012;
  *(void *)(v0 + 120) = 0x8000000100185930;
  *(void *)(v0 + 128) = v40;
  *(void *)(v0 + 176) = 0xD000000000000011;
  *(void *)(v0 + 184) = 0x8000000100185AE0;
  *(void *)(v0 + 192) = v40;
  uint64_t v49 = v31[2];
  *(void *)(v0 + 984) = v49;
  if (!v49)
  {
    swift_retain();
LABEL_39:
    swift_bridgeObjectRelease();
    sub_100048284(v0 + 16);
    goto LABEL_40;
  }
  swift_retain();
  for (uint64_t i = 0; ; uint64_t i = *(void *)(v0 + 992) + 1)
  {
    *(void *)(v0 + 992) = i;
    sub_100029CD8(*(void *)(v0 + 976) + 40 * i + 32, (uint64_t)v70);
    uint64_t v51 = *(void *)(v0 + 872);
    uint64_t v52 = *(void *)(v0 + 880);
    sub_100012D78(v70, v51);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 16))(v51, v52);
    *(void *)(v0 + 1000) = v53;
    uint64_t v54 = *(void *)(v0 + 872);
    uint64_t v55 = *(void *)(v0 + 880);
    sub_100012D78(v70, v54);
    *(void *)(v0 + 1008) = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 24))(v54, v55);
    *(void *)(v0 + 1016) = v56;
    if (v56) {
      break;
    }
    uint64_t v57 = *(void *)(v0 + 984);
    uint64_t v58 = *(void *)(v0 + 992) + 1;
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v70);
    if (v58 == v57) {
      goto LABEL_39;
    }
  }
  uint64_t v60 = *(void *)(v0 + 64);
  uint64_t v59 = *(void *)(v0 + 72);
  *(void *)(v0 + 10++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v60;
  *(void *)(v0 + 1032) = v59;
  uint64_t v61 = *(void **)(v0 + 80);
  *(void *)(v0 + 1040) = v61;
  uint64_t v62 = swift_allocObject();
  *(void *)(v0 + 1048) = v62;
  *(void *)(v62 + 16) = v53;
  swift_bridgeObjectRetain();
  id v63 = v61;
  *(void *)(v0 + 912) = &type metadata for ImpressionDatabaseStore;
  *(void *)(v0 + 920) = &off_1001E3118;
  *(void *)(v0 + 888) = v60;
  *(void *)(v0 + 896) = v59;
  *(void *)(v0 + 904) = v63;
  swift_bridgeObjectRetain();
  id v64 = v63;
  uint64_t v65 = (void *)swift_task_alloc();
  *(void *)(v0 + 1056) = v65;
  v65[2] = v64;
  uint64_t v65[3] = v0 + 888;
  v65[4] = sub_1000863FC;
  v65[5] = v62;
  uint64_t v66 = (void *)swift_task_alloc();
  *(void *)(v0 + 1064) = v66;
  *uint64_t v66 = v0;
  v66[1] = sub_100083C30;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 1168, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100086418, v65, &type metadata for Bool);
}

uint64_t sub_100083C30()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1072) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v3 = sub_100084104;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 1040);
    swift_task_dealloc();
    *(unsigned char *)(v2 + 1170) = *(unsigned char *)(v2 + 1168);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 888);
    swift_release();
    swift_bridgeObjectRelease();

    char v3 = sub_100083DBC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100083DBC()
{
  uint64_t v1 = (void *)v0[130];
  uint64_t v2 = v0[129];
  uint64_t v3 = v0[128];
  uint64_t v4 = v0[125];
  uint64_t v5 = swift_allocObject();
  v0[135] = v5;
  *(void *)(v5 + 16) = v4;
  swift_bridgeObjectRetain();
  id v6 = v1;
  v0[104] = &type metadata for ImpressionDatabaseStore;
  v0[105] = &off_1001E3118;
  v0[101] = v3;
  v0[102] = v2;
  v0[103] = v6;
  swift_bridgeObjectRetain();
  id v7 = v6;
  id v8 = (void *)swift_task_alloc();
  v0[136] = v8;
  void v8[2] = v7;
  v8[3] = v0 + 101;
  void v8[4] = sub_100086434;
  v8[5] = v5;
  NSString v9 = (void *)swift_task_alloc();
  v0[137] = v9;
  *NSString v9 = v0;
  v9[1] = sub_100083F78;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)((char *)v0 + 1169, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100086518, v8, &type metadata for Bool);
}

uint64_t sub_100083F78()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000849CC;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 1040);
    swift_task_dealloc();
    *(unsigned char *)(v2 + 1171) = *(unsigned char *)(v2 + 1169);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 808);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_100084520;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100084104()
{
  uint64_t v1 = (void *)v0[130];
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 111));
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v2 = v0[120];
  uint64_t v3 = v0[119];
  uint64_t v4 = v0[118];
  swift_bridgeObjectRelease();
  uint64_t v5 = Logger.general.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[125];
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)(v9 + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to process application: %llu", (uint8_t *)v9, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v10 = v0[120];
  uint64_t v11 = v0[119];
  uint64_t v12 = v0[118];
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  while (1)
  {
    uint64_t v13 = v0[123];
    uint64_t v14 = v0[124] + 1;
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 106));
    if (v14 == v13) {
      break;
    }
    uint64_t v15 = v0[124] + 1;
    v0[124] = v15;
    sub_100029CD8(v0[122] + 40 * v15 + 32, (uint64_t)(v0 + 106));
    uint64_t v16 = v0[109];
    uint64_t v17 = v0[110];
    sub_100012D78(v0 + 106, v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    v0[125] = v18;
    uint64_t v19 = v0[109];
    uint64_t v20 = v0[110];
    sub_100012D78(v0 + 106, v19);
    v0[126] = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    v0[127] = v21;
    if (v21)
    {
      uint64_t v23 = v0[8];
      uint64_t v22 = v0[9];
      v0[128] = v23;
      v0[129] = v22;
      unint64_t v24 = (void *)v0[10];
      v0[130] = v24;
      uint64_t v25 = swift_allocObject();
      v0[131] = v25;
      *(void *)(v25 + 16) = v18;
      swift_bridgeObjectRetain();
      id v26 = v24;
      v0[114] = &type metadata for ImpressionDatabaseStore;
      v0[115] = &off_1001E3118;
      v0[111] = v23;
      v0[112] = v22;
      v0[113] = v26;
      swift_bridgeObjectRetain();
      id v27 = v26;
      long long v28 = (void *)swift_task_alloc();
      v0[132] = v28;
      v28[2] = v27;
      void v28[3] = v0 + 111;
      v28[4] = sub_1000863FC;
      v28[5] = v25;
      uint64_t v29 = (void *)swift_task_alloc();
      v0[133] = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_100083C30;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 146, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100086418, v28, &type metadata for Bool);
    }
  }
  swift_bridgeObjectRelease();
  sub_100048284((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_100084520()
{
  if (*(unsigned char *)(v0 + 1170) & 1) != 0 || (*(unsigned char *)(v0 + 1171))
  {
    uint64_t v23 = *(void *)(v0 + 1016);
    uint64_t v24 = *(void *)(v0 + 1008);
    uint64_t v25 = *(void *)(v0 + 1000);
    *(unsigned char *)(v0 + 1160) = 1;
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v26 = *(void *)(v0 + 120);
    *(void *)(v0 + 1112) = v26;
    long long v28 = *(void **)(v0 + 128);
    *(void *)(v0 + 1120) = v28;
    uint64_t v29 = swift_allocObject();
    *(void *)(v0 + 1128) = v29;
    *(void *)(v29 + 16) = 0;
    *(unsigned char *)(v29 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v0 + 1160);
    *(_DWORD *)(v29 + 25) = *(_DWORD *)(v0 + 1161);
    *(_DWORD *)(v29 + 28) = *(_DWORD *)(v0 + 1164);
    *(void *)(v29 + 32) = v25;
    *(void *)(v29 + 40) = v24;
    *(void *)(v29 + 48) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v30 = v28;
    *(void *)(v0 + 672) = &type metadata for AppMetadataDatabaseStore;
    *(void *)(v0 + 680) = &off_1001E1C70;
    *(void *)(v0 + 648) = v27;
    *(void *)(v0 + 656) = v26;
    *(void *)(v0 + 664) = v30;
    swift_bridgeObjectRetain();
    id v31 = v30;
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 1136) = v16;
    v16[2] = v31;
    v16[3] = v0 + 648;
    _DWORD v16[4] = sub_100086488;
    v16[5] = v29;
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 1144) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100084DDC;
    unint64_t v22 = 0xD00000000000001BLL;
    uint64_t v20 = (char *)&type metadata for () + 8;
    unint64_t v19 = 0x8000000100186A10;
    uint64_t v21 = sub_1000864A4;
LABEL_8:
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v18, 0, 0, v22, v19, v21, v16, v20);
  }
  else
  {
    swift_bridgeObjectRelease();
    while (1)
    {
      uint64_t v1 = *(void *)(v0 + 984);
      uint64_t v2 = *(void *)(v0 + 992) + 1;
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 848);
      if (v2 == v1) {
        break;
      }
      uint64_t v3 = *(void *)(v0 + 992) + 1;
      *(void *)(v0 + 992) = v3;
      sub_100029CD8(*(void *)(v0 + 976) + 40 * v3 + 32, v0 + 848);
      uint64_t v4 = *(void *)(v0 + 872);
      uint64_t v5 = *(void *)(v0 + 880);
      sub_100012D78((void *)(v0 + 848), v4);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      *(void *)(v0 + 1000) = v6;
      uint64_t v7 = *(void *)(v0 + 872);
      uint64_t v8 = *(void *)(v0 + 880);
      sub_100012D78((void *)(v0 + 848), v7);
      *(void *)(v0 + 1008) = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
      *(void *)(v0 + 1016) = v9;
      if (v9)
      {
        uint64_t v11 = *(void *)(v0 + 64);
        uint64_t v10 = *(void *)(v0 + 72);
        *(void *)(v0 + 10++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
        *(void *)(v0 + 1032) = v10;
        uint64_t v12 = *(void **)(v0 + 80);
        *(void *)(v0 + 1040) = v12;
        uint64_t v13 = swift_allocObject();
        *(void *)(v0 + 1048) = v13;
        *(void *)(v13 + 16) = v6;
        swift_bridgeObjectRetain();
        id v14 = v12;
        *(void *)(v0 + 912) = &type metadata for ImpressionDatabaseStore;
        *(void *)(v0 + 920) = &off_1001E3118;
        *(void *)(v0 + 888) = v11;
        *(void *)(v0 + 896) = v10;
        *(void *)(v0 + 904) = v14;
        swift_bridgeObjectRetain();
        id v15 = v14;
        uint64_t v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 1056) = v16;
        v16[2] = v15;
        v16[3] = v0 + 888;
        _DWORD v16[4] = sub_1000863FC;
        v16[5] = v13;
        uint64_t v17 = (void *)swift_task_alloc();
        *(void *)(v0 + 1064) = v17;
        *uint64_t v17 = v0;
        v17[1] = sub_100083C30;
        uint64_t v18 = (void *)(v0 + 1168);
        unint64_t v19 = 0x80000001001869F0;
        uint64_t v20 = (char *)&type metadata for Bool;
        uint64_t v21 = sub_100086418;
        unint64_t v22 = 0xD000000000000015;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    sub_100048284(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
}

uint64_t sub_1000849CC()
{
  uint64_t v1 = (void *)v0[130];
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 101));
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v2 = v0[120];
  uint64_t v3 = v0[119];
  uint64_t v4 = v0[118];
  swift_bridgeObjectRelease();
  uint64_t v5 = Logger.general.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[125];
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)(v9 + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to process application: %llu", (uint8_t *)v9, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v10 = v0[120];
  uint64_t v11 = v0[119];
  uint64_t v12 = v0[118];
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  while (1)
  {
    uint64_t v13 = v0[123];
    uint64_t v14 = v0[124] + 1;
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 106));
    if (v14 == v13) {
      break;
    }
    uint64_t v15 = v0[124] + 1;
    v0[124] = v15;
    sub_100029CD8(v0[122] + 40 * v15 + 32, (uint64_t)(v0 + 106));
    uint64_t v16 = v0[109];
    uint64_t v17 = v0[110];
    sub_100012D78(v0 + 106, v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    v0[125] = v18;
    uint64_t v19 = v0[109];
    uint64_t v20 = v0[110];
    sub_100012D78(v0 + 106, v19);
    v0[126] = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    v0[127] = v21;
    if (v21)
    {
      uint64_t v23 = v0[8];
      uint64_t v22 = v0[9];
      v0[128] = v23;
      v0[129] = v22;
      uint64_t v24 = (void *)v0[10];
      v0[130] = v24;
      uint64_t v25 = swift_allocObject();
      v0[131] = v25;
      *(void *)(v25 + 16) = v18;
      swift_bridgeObjectRetain();
      id v26 = v24;
      v0[114] = &type metadata for ImpressionDatabaseStore;
      v0[115] = &off_1001E3118;
      v0[111] = v23;
      v0[112] = v22;
      v0[113] = v26;
      swift_bridgeObjectRetain();
      id v27 = v26;
      long long v28 = (void *)swift_task_alloc();
      v0[132] = v28;
      v28[2] = v27;
      void v28[3] = v0 + 111;
      v28[4] = sub_1000863FC;
      v28[5] = v25;
      uint64_t v29 = (void *)swift_task_alloc();
      v0[133] = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_100083C30;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 146, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100086418, v28, &type metadata for Bool);
    }
  }
  swift_bridgeObjectRelease();
  sub_100048284((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  id v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_100084DDC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100085264;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 1120);
    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 648);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_100084F60;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100084F60()
{
  swift_bridgeObjectRelease();
  while (1)
  {
    uint64_t v1 = v0[123];
    uint64_t v2 = v0[124] + 1;
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 106));
    if (v2 == v1) {
      break;
    }
    uint64_t v3 = v0[124] + 1;
    v0[124] = v3;
    sub_100029CD8(v0[122] + 40 * v3 + 32, (uint64_t)(v0 + 106));
    uint64_t v4 = v0[109];
    uint64_t v5 = v0[110];
    sub_100012D78(v0 + 106, v4);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    v0[125] = v6;
    uint64_t v7 = v0[109];
    uint64_t v8 = v0[110];
    sub_100012D78(v0 + 106, v7);
    v0[126] = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
    v0[127] = v9;
    if (v9)
    {
      uint64_t v11 = v0[8];
      uint64_t v10 = v0[9];
      v0[128] = v11;
      v0[129] = v10;
      uint64_t v12 = (void *)v0[10];
      v0[130] = v12;
      uint64_t v13 = swift_allocObject();
      v0[131] = v13;
      *(void *)(v13 + 16) = v6;
      swift_bridgeObjectRetain();
      id v14 = v12;
      v0[114] = &type metadata for ImpressionDatabaseStore;
      v0[115] = &off_1001E3118;
      v0[111] = v11;
      v0[112] = v10;
      v0[113] = v14;
      swift_bridgeObjectRetain();
      id v15 = v14;
      uint64_t v16 = (void *)swift_task_alloc();
      v0[132] = v16;
      v16[2] = v15;
      v16[3] = v0 + 111;
      _DWORD v16[4] = sub_1000863FC;
      v16[5] = v13;
      uint64_t v17 = (void *)swift_task_alloc();
      v0[133] = v17;
      *uint64_t v17 = v0;
      v17[1] = sub_100083C30;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 146, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100086418, v16, &type metadata for Bool);
    }
  }
  swift_bridgeObjectRelease();
  sub_100048284((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100085264()
{
  uint64_t v1 = (void *)v0[140];
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 81));
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v2 = v0[120];
  uint64_t v3 = v0[119];
  uint64_t v4 = v0[118];
  swift_bridgeObjectRelease();
  uint64_t v5 = Logger.general.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[125];
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)(v9 + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to process application: %llu", (uint8_t *)v9, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v10 = v0[120];
  uint64_t v11 = v0[119];
  uint64_t v12 = v0[118];
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  while (1)
  {
    uint64_t v13 = v0[123];
    uint64_t v14 = v0[124] + 1;
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 106));
    if (v14 == v13) {
      break;
    }
    uint64_t v15 = v0[124] + 1;
    v0[124] = v15;
    sub_100029CD8(v0[122] + 40 * v15 + 32, (uint64_t)(v0 + 106));
    uint64_t v16 = v0[109];
    uint64_t v17 = v0[110];
    sub_100012D78(v0 + 106, v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    v0[125] = v18;
    uint64_t v19 = v0[109];
    uint64_t v20 = v0[110];
    sub_100012D78(v0 + 106, v19);
    v0[126] = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    v0[127] = v21;
    if (v21)
    {
      uint64_t v23 = v0[8];
      uint64_t v22 = v0[9];
      v0[128] = v23;
      v0[129] = v22;
      uint64_t v24 = (void *)v0[10];
      v0[130] = v24;
      uint64_t v25 = swift_allocObject();
      v0[131] = v25;
      *(void *)(v25 + 16) = v18;
      swift_bridgeObjectRetain();
      id v26 = v24;
      v0[114] = &type metadata for ImpressionDatabaseStore;
      v0[115] = &off_1001E3118;
      v0[111] = v23;
      v0[112] = v22;
      v0[113] = v26;
      swift_bridgeObjectRetain();
      id v27 = v26;
      long long v28 = (void *)swift_task_alloc();
      v0[132] = v28;
      v28[2] = v27;
      void v28[3] = v0 + 111;
      v28[4] = sub_1000863FC;
      v28[5] = v25;
      uint64_t v29 = (void *)swift_task_alloc();
      v0[133] = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_100083C30;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 146, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100086418, v28, &type metadata for Bool);
    }
  }
  swift_bridgeObjectRelease();
  sub_100048284((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  id v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_100085674(uint64_t a1)
{
  v1[66] = a1;
  uint64_t v2 = type metadata accessor for Logger();
  v1[67] = v2;
  v1[68] = *(void *)(v2 - 8);
  v1[69] = swift_task_alloc();
  return _swift_task_switch(sub_100085734, 0, 0);
}

uint64_t sub_100085734()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 528) + 16);
  *(void *)(v0 + 560) = v1;
  if (v1)
  {
    if (qword_1001E08A8 != -1) {
      swift_once();
    }
    uint64_t v2 = (void *)qword_1001E5F88;
    uint64_t v3 = self;
    id v4 = v2;
    id v5 = [v3 sharedScheduler];
    *(void *)(v0 + 160) = &type metadata for ActivityManager;
    *(void *)(v0 + 168) = &off_1001CCE58;
    uint64_t v6 = (void *)swift_allocObject();
    *(void *)(v0 + 136) = v6;
    void v6[5] = &type metadata for BackgroundSystemTaskScheduler;
    v6[6] = &off_1001C30C8;
    _OWORD v6[2] = v5;
    *(void *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &type metadata for AttributionKitCanineArbiter;
    *(void *)(v0 + 232) = &off_1001C3FF8;
    uint64_t v7 = qword_1001E0880;
    id v8 = v4;
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v9 = qword_1001E5F50;
    *(void *)(v0 + 264) = type metadata accessor for TaskGreyhound();
    *(void *)(v0 + 272) = &off_1001C2490;
    *(void *)(v0 + 240) = v9;
    *(void *)(v0 + 304) = &type metadata for LaunchServicesRecordFactory;
    *(void *)(v0 + 312) = &off_1001C6D08;
    *(void *)(v0 + 344) = &type metadata for AMSDogBag;
    *(void *)(v0 + 352) = &off_1001CAA18;
    swift_retain();
    id v10 = [v3 sharedScheduler];
    v23[3] = &type metadata for ActivityManager;
    v23[4] = &off_1001CCE58;
    uint64_t v11 = (void *)swift_allocObject();
    v23[0] = v11;
    void v11[5] = &type metadata for BackgroundSystemTaskScheduler;
    v11[6] = &off_1001C30C8;
    _OWORD v11[2] = v10;
    sub_100087C5C((uint64_t)v23, v0 + 360);
    *(void *)(v0 + 432) = &type metadata for AppStoreDaemonSKANInterop;
    *(void *)(v0 + 440) = &off_1001CA740;
    uint64_t v12 = (void *)qword_1001E5F88;
    *(void *)(v0 + 472) = &type metadata for AggregatedReportingManager;
    *(void *)(v0 + 480) = &off_1001C7F28;
    uint64_t v13 = (void *)swift_allocObject();
    *(void *)(v0 + 448) = v13;
    v13[8] = &type metadata for AMSDogBag;
    v13[9] = &off_1001CAA18;
    v13[13] = &type metadata for BiomeEventStreamDog;
    v13[14] = &off_1001C8C58;
    v13[2] = 0x74735F6E656B6F74;
    void v13[3] = 0xEB0000000065726FLL;
    void v13[4] = v12;
    uint64_t v14 = qword_1001E0940;
    id v15 = v12;
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v16 = *(void *)(v0 + 528);
    uint64_t v17 = qword_1001E60E8;
    *(void *)(v0 + 512) = type metadata accessor for SnoutManager();
    *(void *)(v0 + 520) = &off_1001CB0F8;
    *(void *)(v0 + 488) = v17;
    strcpy((char *)(v0 + 16), "postback_store");
    *(unsigned char *)(v0 + 31) = -18;
    *(void *)(v0 + 32) = v8;
    *(void *)(v0 + 40) = 0x63616274736F6867;
    *(void *)(v0 + 48) = 0xEF65726F74735F6BLL;
    *(void *)(v0 + 56) = v8;
    *(void *)(v0 + 64) = 0xD000000000000010;
    *(void *)(v0 + 72) = 0x8000000100185910;
    *(void *)(v0 + 80) = v8;
    *(void *)(v0 + 88) = 0x74735F6E656B6F74;
    *(void *)(v0 + 96) = 0xEB0000000065726FLL;
    *(void *)(v0 + 104) = v8;
    *(void *)(v0 + 112) = 0xD000000000000012;
    *(void *)(v0 + 120) = 0x8000000100185930;
    *(void *)(v0 + 128) = v8;
    *(void *)(v0 + 176) = 0xD000000000000011;
    *(void *)(v0 + 184) = 0x8000000100185AE0;
    *(void *)(v0 + 192) = v8;
    *(void *)(v0 + 568) = 0;
    uint64_t v18 = *(void *)(v16 + 32);
    *(void *)(v0 + 576) = v18;
    uint64_t v19 = *(void *)(v16 + 40);
    *(void *)(v0 + 584) = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100085BAC;
    return sub_1000D9494(v18, v19);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

uint64_t sub_100085BAC()
{
  *(void *)(*(void *)v1 + 600) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100085DF0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100085CC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100085CC8()
{
  uint64_t v1 = v0[71] + 1;
  if (v1 == v0[70])
  {
    swift_bridgeObjectRelease();
    sub_100048284((uint64_t)(v0 + 2));
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[71] = v1;
    uint64_t v4 = v0[66] + 16 * v1;
    uint64_t v5 = *(void *)(v4 + 32);
    v0[72] = v5;
    uint64_t v6 = *(void *)(v4 + 40);
    v0[73] = v6;
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[74] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100085BAC;
    return sub_1000D9494(v5, v6);
  }
}

uint64_t sub_100085DF0()
{
  id v26 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[68];
  uint64_t v4 = v0[67];
  uint64_t v5 = Logger.general.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  unint64_t v9 = v0[73];
  if (v8)
  {
    uint64_t v10 = v0[72];
    uint64_t v11 = v0[68];
    uint64_t v23 = v0[67];
    uint64_t v24 = v0[69];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v12 + 4) = sub_100147668(v10, v9, &v25);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to clean up state for app: %s", (uint8_t *)v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (uint64_t)(v0 + 2);
    swift_slowDealloc();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v24, v23);
  }
  else
  {
    uint64_t v13 = v0[69];
    uint64_t v14 = v0[68];
    uint64_t v15 = v0[67];
    swift_bridgeObjectRelease_n();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  uint64_t v16 = v0[71] + 1;
  if (v16 == v0[70])
  {
    swift_bridgeObjectRelease();
    sub_100048284(v1);
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  else
  {
    v0[71] = v16;
    uint64_t v19 = v0[66] + 16 * v16;
    uint64_t v20 = *(void *)(v19 + 32);
    v0[72] = v20;
    uint64_t v21 = *(void *)(v19 + 40);
    v0[73] = v21;
    swift_bridgeObjectRetain();
    uint64_t v22 = (void *)swift_task_alloc();
    v0[74] = v22;
    void *v22 = v0;
    v22[1] = sub_100085BAC;
    return sub_1000D9494(v20, v21);
  }
}

uint64_t sub_1000860D4()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008610C()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10008615C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000861B4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000861FC()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100012AB8;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100013480;
  return sub_100083088(v2);
}

uint64_t sub_1000862D4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100086330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100086398(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000863EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_1000863FC@<W0>(unsigned char *a1@<X8>)
{
  return sub_1000FF88C(*(void *)(v1 + 16), a1);
}

uint64_t sub_100086418(uint64_t a1)
{
  return sub_100122898(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100086424()
{
  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_100086434@<W0>(unsigned char *a1@<X8>)
{
  return sub_1000FF8C4(*(void *)(v1 + 16), a1);
}

uint64_t sub_100086450()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100086488(void *a1)
{
  sub_1000FF8FC(a1, (long long *)(v1 + 16));
}

uint64_t sub_1000864A4(uint64_t a1)
{
  return sub_100123844(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000864B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for CommerceEnvironment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000865E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommerceEnvironment()
{
  return &type metadata for CommerceEnvironment;
}

uint64_t sub_100086620(char *a1, char *a2)
{
  return sub_10010648C(*a1, *a2);
}

Swift::Int sub_10008662C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000866A0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100086700()
{
  return Hasher._finalize()();
}

uint64_t sub_100086770@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1358, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1000867D0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 5653828;
  if (*v1) {
    uint64_t v2 = 1146049104;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_100086804()
{
  unint64_t result = qword_1001E29F8;
  if (!qword_1001E29F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E29F8);
  }
  return result;
}

uint64_t sub_100086858()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000868B8()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_100086908()
{
  unint64_t result = qword_1001E2A00;
  if (!qword_1001E2A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2A00);
  }
  return result;
}

uint64_t sub_10008695C(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E5FB0);
}

uint64_t sub_100086980(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E5FC8);
}

uint64_t sub_10008699C(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E5FE0);
}

uint64_t sub_1000869BC(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E5FF8);
}

uint64_t sub_1000869E4(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E6010);
}

uint64_t sub_1000869FC(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E6028);
}

uint64_t sub_100086A18(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E6040);
}

uint64_t sub_100086A3C(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E6058);
}

uint64_t sub_100086A64(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E6070);
}

uint64_t sub_100086A84(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E6088);
}

uint64_t sub_100086AA8(uint64_t a1)
{
  return sub_100086ACC(a1, qword_1001E60A0);
}

uint64_t sub_100086ACC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10002ADAC(v3, a2);
  sub_100012E74(v3, (uint64_t)a2);
  Logger.aakSubsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100086B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  __chkstk_darwin(v6);
  id v7 = objc_allocWithZone((Class)LSApplicationRecord);
  id v8 = sub_100082F50(a1, a2, 0);
  v10[3] = sub_100019F68(0, (unint64_t *)&qword_1001E1B90);
  _DWORD v10[4] = &off_1001C8F18;
  v10[0] = v8;
  return sub_1000864B0((uint64_t)v10, a3);
}

double sub_100086E14@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v5 = a4;
  unsigned int v6 = a3;
  unsigned int v7 = a2;
  unsigned int v8 = a1;
  uint64_t v34 = a5;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = HIDWORD(a2);
  unint64_t v11 = HIDWORD(a3);
  unint64_t v12 = HIDWORD(a4);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v33 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = self;
  id v35 = 0;
  *(void *)&long long v36 = __PAIR64__(v9, v8);
  *((void *)&v36 + 1) = __PAIR64__(v10, v7);
  *(void *)&long long v37 = __PAIR64__(v11, v6);
  *((void *)&v37 + 1) = __PAIR64__(v12, v5);
  id v17 = [v16 bundleRecordForAuditToken:&v36 error:&v35];
  id v18 = v35;
  if (v17)
  {
    id v35 = v17;
    sub_100019F68(0, &qword_1001E2A08);
    id v19 = v18;
    sub_100012960(&qword_1001E2A10);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v38 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
    }
    sub_1000864B0((uint64_t)&v36, v34);
  }
  else
  {
    id v21 = v35;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v22 = Logger.xpc.unsafeMutableAddressor();
    uint64_t v23 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v15, v22, v13);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v32 = v13;
      long long v28 = (void *)v27;
      *(_DWORD *)id v26 = 138412290;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v36 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to get bundle record from audit token: %@", v26, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      uint64_t v13 = v32;
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v13);
    id v30 = (_OWORD *)v34;
    *(void *)(v34 + 32) = 0;
    double result = 0.0;
    *id v30 = 0u;
    v30[1] = 0u;
  }
  return result;
}

double sub_100087178@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)LSApplicationRecord);
  uint64_t v22 = 0;
  id v9 = [v8 initWithStoreItemIdentifier:a1 error:&v22];
  id v21 = v22;
  if (v9)
  {
    v23[3] = sub_100019F68(0, (unint64_t *)&qword_1001E1B90);
    v23[4] = &off_1001C8F18;
    v23[0] = v9;
    sub_1000864B0((uint64_t)v23, a2);
    unint64_t v10 = v21;
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v13 = v21;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v14 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v21 = v15;
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)id v17 = 138412290;
      swift_errorRetain();
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      v23[0] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v18;
      swift_errorRelease();
      swift_errorRelease();
      id v19 = v21;
      _os_log_impl((void *)&_mh_execute_header, v21, v16, "Failed to get bundle record from store item ID: %@", v17, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t destroy for Client(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for Client(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for Client(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);
    goto LABEL_7;
  }
  sub_100017B78((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for Client(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Client(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Client(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Client()
{
  return &type metadata for Client;
}

ValueMetadata *type metadata accessor for DevelopmentPostbackTransmissionBarktivity()
{
  return &type metadata for DevelopmentPostbackTransmissionBarktivity;
}

uint64_t sub_100087714()
{
  unint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1001E2A20 + dword_1001E2A20);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100012AB8;
  return v3();
}

uint64_t sub_1000877B4()
{
  return _swift_task_switch(sub_1000877D0, 0, 0);
}

uint64_t sub_1000877D0()
{
  uint64_t v20 = v0;
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_1001E5F88;
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = [v2 sharedScheduler];
  *(void *)(v0 + 160) = &type metadata for ActivityManager;
  *(void *)(v0 + 168) = &off_1001CCE58;
  long long v5 = (void *)swift_allocObject();
  *(void *)(v0 + 136) = v5;
  void v5[5] = &type metadata for BackgroundSystemTaskScheduler;
  v5[6] = &off_1001C30C8;
  _OWORD v5[2] = v4;
  *(void *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &type metadata for AttributionKitCanineArbiter;
  *(void *)(v0 + 232) = &off_1001C3FF8;
  uint64_t v6 = qword_1001E0880;
  id v7 = v3;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1001E5F50;
  *(void *)(v0 + 264) = type metadata accessor for TaskGreyhound();
  *(void *)(v0 + 272) = &off_1001C2490;
  *(void *)(v0 + 240) = v8;
  *(void *)(v0 + 304) = &type metadata for LaunchServicesRecordFactory;
  *(void *)(v0 + 312) = &off_1001C6D08;
  *(void *)(v0 + 344) = &type metadata for AMSDogBag;
  *(void *)(v0 + 352) = &off_1001CAA18;
  swift_retain();
  id v9 = [v2 sharedScheduler];
  v19[3] = &type metadata for ActivityManager;
  v19[4] = &off_1001CCE58;
  unint64_t v10 = (void *)swift_allocObject();
  v19[0] = v10;
  void v10[5] = &type metadata for BackgroundSystemTaskScheduler;
  v10[6] = &off_1001C30C8;
  v10[2] = v9;
  sub_100087C5C((uint64_t)v19, v0 + 360);
  *(void *)(v0 + 432) = &type metadata for AppStoreDaemonSKANInterop;
  *(void *)(v0 + 440) = &off_1001CA740;
  unint64_t v11 = (void *)qword_1001E5F88;
  *(void *)(v0 + 472) = &type metadata for AggregatedReportingManager;
  *(void *)(v0 + 480) = &off_1001C7F28;
  unint64_t v12 = (void *)swift_allocObject();
  *(void *)(v0 + 448) = v12;
  v12[8] = &type metadata for AMSDogBag;
  v12[9] = &off_1001CAA18;
  v12[13] = &type metadata for BiomeEventStreamDog;
  _OWORD v12[14] = &off_1001C8C58;
  _OWORD v12[2] = 0x74735F6E656B6F74;
  v12[3] = 0xEB0000000065726FLL;
  uint64_t v12[4] = v11;
  uint64_t v13 = qword_1001E0940;
  id v14 = v11;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1001E60E8;
  *(void *)(v0 + 512) = type metadata accessor for SnoutManager();
  *(void *)(v0 + 520) = &off_1001CB0F8;
  *(void *)(v0 + 488) = v15;
  strcpy((char *)(v0 + 16), "postback_store");
  *(unsigned char *)(v0 + 31) = -18;
  *(void *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = 0x63616274736F6867;
  *(void *)(v0 + 48) = 0xEF65726F74735F6BLL;
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 64) = 0xD000000000000010;
  *(void *)(v0 + 72) = 0x8000000100185910;
  *(void *)(v0 + 80) = v7;
  *(void *)(v0 + 88) = 0x74735F6E656B6F74;
  *(void *)(v0 + 96) = 0xEB0000000065726FLL;
  *(void *)(v0 + 104) = v7;
  *(void *)(v0 + 112) = 0xD000000000000012;
  *(void *)(v0 + 120) = 0x8000000100185930;
  *(void *)(v0 + 128) = v7;
  *(void *)(v0 + 176) = 0xD000000000000011;
  *(void *)(v0 + 184) = 0x8000000100185AE0;
  *(void *)(v0 + 192) = v7;
  swift_retain();
  Swift::Int v16 = sub_1000BE694((uint64_t)&off_1001C13A8);
  *(void *)(v0 + 528) = v16;
  id v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v17;
  *id v17 = v0;
  v17[1] = sub_10004F7B0;
  return sub_1000D7DB0(v16);
}

uint64_t sub_100087BD4()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100087C0C()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100087C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100029CD8(a1, a2);
  sub_100012960(&qword_1001E2A38);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10017AB20;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 40) = 0;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  *(_OWORD *)(inited + 80) = xmmword_10017B610;
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 96) = 60;
  *(_OWORD *)(inited + 128) = xmmword_10017B620;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 0;
  *(_OWORD *)(inited + 176) = xmmword_10017B630;
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = 300;
  *(_OWORD *)(inited + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = xmmword_10017B640;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 240) = 0xD000000000000015;
  *(void *)(inited + 248) = 0x8000000100186B60;
  *(_OWORD *)(inited + 272) = xmmword_10017B650;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(unsigned char *)(inited + 288) = 0;
  unint64_t v5 = sub_10009F898(inited);
  uint64_t result = _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1);
  *(void *)(a2 + 40) = v5;
  return result;
}

void sub_100087D78(char a1)
{
  uint64_t v40 = type metadata accessor for Date();
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v38 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self standardUserDefaults];
  uint64_t v41 = v1;
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v51 = v5 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  uint64_t v54 = v64;
  unint64_t v10 = &v66;
  int64_t v52 = (unint64_t)(v7 + 63) >> 6;
  int64_t v37 = v52 - 1;
  uint64_t v55 = v5;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v56 = "sion-should-use-proxy";
  unint64_t v43 = (unint64_t)"developer-mode-enabled";
  unint64_t v42 = 0x8000000100186180;
  uint64_t v49 = "ostback-fetch-delay";
  uint64_t v48 = "ode-postback-delay";
  id v47 = "indow-thresholds";
  uint64_t v46 = "ode-should-use-proxy";
  uint64_t v45 = "tility-automatic-reset-time";
  uint64_t v50 = "reporting-testing-mode-enabled";
  int v44 = "ta\"24@?<v@?@\"NSData\">32";
  uint64_t v53 = &v66;
  if (!v9) {
    goto LABEL_18;
  }
LABEL_16:
  unint64_t v24 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v25 = v24 | (v11 << 6);
LABEL_17:
  uint64_t v26 = *(void *)(v55 + 56);
  uint64_t v27 = (void *)(*(void *)(v55 + 48) + 16 * v25);
  unint64_t v29 = v27[1];
  *(void *)&long long v63 = *v27;
  uint64_t v28 = v63;
  *((void *)&v63 + 1) = v29;
  sub_10003742C(v26 + 32 * v25, (uint64_t)v54);
  sub_100088954(v28, v29);
  while (1)
  {
    sub_100088968((uint64_t)&v63, (uint64_t)v65);
    if (!v68) {
      break;
    }
    uint64_t v13 = v65[0];
    unint64_t v12 = (void *)v65[1];
    sub_100037488(v10, &v63);
    if (a1)
    {
      int64_t v57 = v11;
      sub_10003742C((uint64_t)&v63, (uint64_t)&v61);
      sub_10006B398((uint64_t)&v61, (uint64_t)&v58);
      uint64_t v14 = v60;
      if (v60)
      {
        uint64_t v15 = sub_100012D78(&v58, v60);
        uint64_t v16 = *(void *)(v14 - 8);
        __chkstk_darwin(v15);
        uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v16 + 16))(v18);
        uint64_t v19 = _bridgeAnythingToObjectiveC<A>(_:)();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
        _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v58);
LABEL_8:
        switch((unint64_t)v12)
        {
          case 0uLL:
          case 1uLL:
          case 2uLL:
          case 3uLL:
          case 4uLL:
          case 5uLL:
          case 6uLL:
          case 7uLL:
            break;
          default:
            goto LABEL_11;
        }
      }
      else
      {
        uint64_t v19 = 0;
        if ((unint64_t)v12 <= 7) {
          goto LABEL_8;
        }
LABEL_11:
        unint64_t v58 = 0;
        unint64_t v59 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        unint64_t v58 = 0xD000000000000014;
        unint64_t v59 = v42;
        v20._uint64_t countAndFlagsBits = v13;
        v20._object = v12;
        String.append(_:)(v20);
      }
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v4 setValue:v19 forKey:v21];
      swift_unknownObjectRelease();

      sub_100089550(v13, (unint64_t)v12);
      sub_100019960((uint64_t)&v61, &qword_1001E1BB8);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v63);
      unint64_t v10 = v53;
      int64_t v11 = v57;
      if (v9) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    switch((unint64_t)v12)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        break;
      default:
        unint64_t v61 = 0;
        unint64_t v62 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        unint64_t v61 = 0xD000000000000014;
        unint64_t v62 = v43 | 0x8000000000000000;
        v22._uint64_t countAndFlagsBits = v13;
        v22._object = v12;
        String.append(_:)(v22);
        break;
    }
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 removeObjectForKey:v23];

    sub_100089550(v13, (unint64_t)v12);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v63);
    if (v9) {
      goto LABEL_16;
    }
LABEL_18:
    int64_t v30 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_42:
      __break(1u);
      JUMPOUT(0x1000885C4);
    }
    if (v30 < v52)
    {
      unint64_t v31 = *(void *)(v51 + 8 * v30);
      if (v31) {
        goto LABEL_21;
      }
      int64_t v32 = v11 + 2;
      ++v11;
      if (v30 + 1 < v52)
      {
        unint64_t v31 = *(void *)(v51 + 8 * v32);
        if (v31) {
          goto LABEL_24;
        }
        int64_t v11 = v30 + 1;
        if (v30 + 2 < v52)
        {
          unint64_t v31 = *(void *)(v51 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_21;
          }
          int64_t v32 = v30 + 3;
          int64_t v11 = v30 + 2;
          if (v30 + 3 < v52)
          {
            unint64_t v31 = *(void *)(v51 + 8 * v32);
            if (v31)
            {
LABEL_24:
              int64_t v30 = v32;
LABEL_21:
              unint64_t v9 = (v31 - 1) & v31;
              unint64_t v25 = __clz(__rbit64(v31)) + (v30 << 6);
              int64_t v11 = v30;
              goto LABEL_17;
            }
            while (1)
            {
              int64_t v30 = v32 + 1;
              if (__OFADD__(v32, 1)) {
                goto LABEL_42;
              }
              if (v30 >= v52) {
                break;
              }
              unint64_t v31 = *(void *)(v51 + 8 * v30);
              ++v32;
              if (v31) {
                goto LABEL_21;
              }
            }
            int64_t v11 = v37;
          }
        }
      }
    }
    unint64_t v9 = 0;
    memset(v64, 0, sizeof(v64));
    long long v63 = 0u;
  }
  swift_release();
  if (a1)
  {
    uint64_t v33 = v38;
    Date.init(timeIntervalSinceNow:)();
    Date.timeIntervalSince1970.getter();
    uint64_t v67 = &type metadata for Double;
    v65[0] = v34;
    sub_10006B228((uint64_t)v65, 0, (void *)6);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v40);
    sub_100019960((uint64_t)v65, &qword_1001E1BB8);
  }
  else
  {
    NSString v35 = String._bridgeToObjectiveC()();
    [v4 removeObjectForKey:v35];
  }
  sub_100088AE0();
}

uint64_t sub_100088604(uint64_t a1, void *a2)
{
  sub_10006AD9C(a1, a2);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100037488(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100012960(&qword_1001E1BB8);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 2;
  }
}

uint64_t sub_1000886D4(uint64_t a1, void *a2)
{
  sub_10006AD9C(a1, a2);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100037488(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100012960(&qword_1001E1BB8);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000887A4(uint64_t a1, void *a2)
{
  sub_10006AD9C(a1, a2);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100037488(&v8, v9);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100012960(&qword_1001E1BB8);
  int v5 = swift_dynamicCast();
  uint64_t v6 = v8;
  if (!v5) {
    return 0;
  }
  return v6;
}

unint64_t sub_100088878(uint64_t a1, void *a2)
{
  sub_10006AD9C(a1, a2);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100037488(&v8, v9);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100012960(&qword_1001E1BB8);
  int v5 = swift_dynamicCast();
  uint64_t v6 = v8;
  if (!v5) {
    uint64_t v6 = 0;
  }
  return v6 | ((unint64_t)(v5 ^ 1u) << 32);
}

uint64_t sub_100088954(uint64_t a1, unint64_t a2)
{
  if (a2 >= 8) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100088968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E2A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000889D0(char a1)
{
  if ((a1 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_10008A550(v1, (uint64_t)v7);
LABEL_4:
    id v4 = [self standardUserDefaults];
    uint64_t v5 = swift_bridgeObjectRetain();
    char v3 = sub_10008A018(v5, v4);
    swift_bridgeObjectRelease();

    goto LABEL_5;
  }
  char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  sub_10008A550(v1, (uint64_t)v7);
  char v3 = 0;
  if (v2) {
    goto LABEL_4;
  }
LABEL_5:
  sub_10005D720((uint64_t)v7);
  return v3 & 1;
}

void sub_100088AE0()
{
  uint64_t v1 = v0;
  uint64_t v72 = type metadata accessor for BarktivityType();
  uint64_t v2 = __chkstk_darwin(v72);
  uint64_t v67 = (uint64_t *)((char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v70 = (char *)&v65 - v4;
  uint64_t v74 = type metadata accessor for Date();
  uint64_t v71 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  char v73 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v75 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v68 = (char *)&v65 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v69 = (char *)&v65 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v65 - v14;
  *(void *)&long long v86 = 0;
  *((void *)&v86 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(void *)&long long v86 = 0xD00000000000002ELL;
  *((void *)&v86 + 1) = 0x8000000100186AF0;
  *(void *)&long long v87 = 1;
  WORD4(v87) = 0;
  BYTE10(v87) = 0;
  long long v88 = xmmword_10017B660;
  *(void *)&long long v83 = 0;
  *((void *)&v83 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  *(void *)&long long v83 = 0xD00000000000003BLL;
  *((void *)&v83 + 1) = 0x8000000100186B20;
  *(void *)&long long v84 = 2;
  WORD4(v84) = 1;
  BYTE10(v84) = 0;
  long long v85 = 0uLL;
  uint64_t v16 = self;
  id v79 = [v16 standardUserDefaults];
  id v17 = [v16 standardUserDefaults];
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  char v20 = sub_10008A018(v18, v17);
  swift_bridgeObjectRelease();

  uint64_t v21 = Logger.developerMode.unsafeMutableAddressor();
  Swift::String v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v77 = v21;
  uint64_t v78 = v7 + 16;
  uint64_t v76 = v22;
  ((void (*)(char *))v22)(v15);
  NSString v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = v1;
    uint64_t v26 = v7;
    uint64_t v27 = v6;
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 67109120;
    LODWORD(v80[0]) = v20 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Broadcasting developer mode isEnabled: %{BOOL}d", v28, 8u);
    uint64_t v6 = v27;
    uint64_t v7 = v26;
    uint64_t v1 = v25;
    swift_slowDealloc();
  }

  unint64_t v31 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v30 = v7 + 8;
  unint64_t v29 = v31;
  v31(v15, v6);
  id v32 = [v16 standardUserDefaults];
  uint64_t v33 = swift_bridgeObjectRetain();
  char v34 = sub_10008A018(v33, v32);
  swift_bridgeObjectRelease();

  if (v34)
  {
    uint64_t v35 = sub_1000887A4(0, (void *)6);
    char v66 = v29;
    if (v36)
    {
      uint64_t v69 = 0;
      int v44 = v68;
      v76(v68, v77, v6);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.fault.getter();
      BOOL v47 = os_log_type_enabled(v45, v46);
      uint64_t v41 = v73;
      if (v47)
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to get cached reset time, falling back to recovery reset date", v48, 2u);
        swift_slowDealloc();
      }

      v29(v44, v6);
      Date.init(timeIntervalSinceNow:)();
      uint64_t v19 = v69;
    }
    else
    {
      uint64_t v37 = v35;
      v76(v69, v77, v6);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 134217984;
        v80[0] = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Cached reset time found: %f", v40, 0xCu);
        swift_slowDealloc();
      }

      v29(v69, v6);
      uint64_t v41 = v73;
      Date.init(timeIntervalSince1970:)();
    }
    sub_100012D78(v1, v1[3]);
    char v81 = &type metadata for DeveloperModeResetBarktivity;
    uint64_t v82 = &off_1001CA698;
    uint64_t v49 = (_OWORD *)swift_allocObject();
    v80[0] = v49;
    long long v50 = v87;
    v49[1] = v86;
    v49[2] = v50;
    void v49[3] = v88;
    uint64_t v51 = v1;
    uint64_t v52 = v71;
    uint64_t v53 = (uint64_t)v70;
    uint64_t v54 = v74;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v70, v41, v74);
    swift_storeEnumTagMultiPayload();
    sub_10008B480(v80, v53);
    if (v19)
    {
      sub_10004EFC8(v53);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v54);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v80);
      v76(v75, v77, v6);
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      BOOL v60 = os_log_type_enabled(v58, v59);
      unint64_t v61 = v66;
      if (v60)
      {
        unint64_t v62 = (uint8_t *)swift_slowAlloc();
        long long v63 = (void *)swift_slowAlloc();
        uint64_t v78 = v30;
        *(_DWORD *)unint64_t v62 = 138412290;
        swift_errorRetain();
        uint64_t v64 = _swift_stdlib_bridgeErrorToNSError();
        v80[0] = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *long long v63 = v64;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Error while broadcasting developer mode: %@", v62, 0xCu);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      v61(v75, v6);
    }
    else
    {
      sub_10004EFC8(v53);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v80);
      sub_100012D78(v51, v51[3]);
      char v81 = &type metadata for DevelopmentPostbackTransmissionBarktivity;
      uint64_t v82 = &off_1001C6920;
      uint64_t v55 = (_OWORD *)swift_allocObject();
      v80[0] = v55;
      long long v56 = v84;
      v55[1] = v83;
      v55[2] = v56;
      v55[3] = v85;
      uint64_t v57 = (uint64_t)v67;
      *uint64_t v67 = 0x4076800000000000;
      swift_storeEnumTagMultiPayload();
      sub_10008B480(v80, v57);

      sub_10004EFC8(v57);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v54);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v80);
    }
  }
  else
  {
    unint64_t v42 = sub_100012D78(v1, v1[3]);
    sub_1000896A8((uint64_t)&v86, v42);
    unint64_t v43 = sub_100012D78(v1, v1[3]);
    sub_100089B60((uint64_t)&v83, v43);
  }
}

uint64_t sub_100089550(uint64_t a1, unint64_t a2)
{
  if (a2 >= 8) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100089564(char a1)
{
  if (a1)
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
    {
LABEL_6:
      uint64_t v9 = 0;
      LOBYTE(v8) = 1;
      return v9 | ((unint64_t)v8 << 32);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = self;
  id v3 = [v2 standardUserDefaults];
  uint64_t v4 = swift_bridgeObjectRetain();
  char v5 = sub_10008A018(v4, v3);
  swift_bridgeObjectRelease();

  if ((v5 & 1) == 0) {
    goto LABEL_6;
  }
  id v6 = [v2 standardUserDefaults];
  unint64_t v7 = sub_100088878(0, (void *)2);

  uint64_t v8 = HIDWORD(v7) & 1;
  uint64_t v9 = v7;
  return v9 | ((unint64_t)v8 << 32);
}

uint64_t sub_1000896A8(uint64_t a1, void *a2)
{
  v34[3] = &type metadata for DeveloperModeResetBarktivity;
  v34[4] = &off_1001CA698;
  uint64_t v4 = (_OWORD *)swift_allocObject();
  v34[0] = v4;
  uint64_t v5 = *(void *)a1;
  id v6 = *(void **)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  v4[1] = *(_OWORD *)a1;
  v4[2] = v7;
  v4[3] = v8;
  uint64_t v9 = self;
  sub_10008A4F8(a1);
  sub_10008A4F8(a1);
  id v10 = [v9 standardUserDefaults];
  uint64_t v11 = sub_1000886D4(v5, v6);
  unint64_t v13 = v12;

  if (v13)
  {
    uint64_t v14 = (void *)*sub_100012D78(a2, a2[3]);
    NSString v15 = String._bridgeToObjectiveC()();
    unsigned int v16 = [v14 deregisterTaskWithIdentifier:v15];

    id v17 = [v9 standardUserDefaults];
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v33[0] = 0xD000000000000014;
    v33[1] = 0x8000000100186180;
    v18._uint64_t countAndFlagsBits = v5;
    v18._object = v6;
    String.append(_:)(v18);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v17 removeObjectForKey:v19];

    sub_10008A524(a1);
    if (qword_1001E08D8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100012E74(v20, (uint64_t)qword_1001E5FB0);
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      swift_bridgeObjectRetain();
      HIDWORD(v32) = (unint64_t)sub_100147668(v11, v13, v33) >> 32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 12) = 1024;
      LODWORD(v32) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Attempted to deregister '%s' with result: %{BOOL}d", (uint8_t *)v23, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    sub_10008A524(a1);
    if (qword_1001E08D8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100012E74(v24, (uint64_t)qword_1001E5FB0);
    sub_100029CD8((uint64_t)v34, (uint64_t)v33);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v28 = sub_100012D78(v33, v33[3]);
      uint64_t v29 = *v28;
      unint64_t v30 = v28[1];
      swift_bridgeObjectRetain();
      sub_100147668(v29, v30, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v33);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No cached barktivity found for activity: %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v33);
    }
  }
  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v34);
}

uint64_t sub_100089B60(uint64_t a1, void *a2)
{
  v34[3] = &type metadata for DevelopmentPostbackTransmissionBarktivity;
  v34[4] = &off_1001C6920;
  uint64_t v4 = (_OWORD *)swift_allocObject();
  v34[0] = v4;
  uint64_t v5 = *(void *)a1;
  id v6 = *(void **)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  v4[1] = *(_OWORD *)a1;
  v4[2] = v7;
  v4[3] = v8;
  uint64_t v9 = self;
  sub_10008A4F8(a1);
  sub_10008A4F8(a1);
  id v10 = [v9 standardUserDefaults];
  uint64_t v11 = sub_1000886D4(v5, v6);
  unint64_t v13 = v12;

  if (v13)
  {
    uint64_t v14 = (void *)*sub_100012D78(a2, a2[3]);
    NSString v15 = String._bridgeToObjectiveC()();
    unsigned int v16 = [v14 deregisterTaskWithIdentifier:v15];

    id v17 = [v9 standardUserDefaults];
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v33[0] = 0xD000000000000014;
    v33[1] = 0x8000000100186180;
    v18._uint64_t countAndFlagsBits = v5;
    v18._object = v6;
    String.append(_:)(v18);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v17 removeObjectForKey:v19];

    sub_10008A524(a1);
    if (qword_1001E08D8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100012E74(v20, (uint64_t)qword_1001E5FB0);
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      swift_bridgeObjectRetain();
      HIDWORD(v32) = (unint64_t)sub_100147668(v11, v13, v33) >> 32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 12) = 1024;
      LODWORD(v32) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Attempted to deregister '%s' with result: %{BOOL}d", (uint8_t *)v23, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    sub_10008A524(a1);
    if (qword_1001E08D8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100012E74(v24, (uint64_t)qword_1001E5FB0);
    sub_100029CD8((uint64_t)v34, (uint64_t)v33);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v28 = sub_100012D78(v33, v33[3]);
      uint64_t v29 = *v28;
      unint64_t v30 = v28[1];
      swift_bridgeObjectRetain();
      sub_100147668(v29, v30, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v33);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No cached barktivity found for activity: %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v33);
    }
  }
  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v34);
}

uint64_t sub_10008A018(uint64_t a1, void *a2)
{
  uint64_t v21 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v7 << 6))
  {
    unint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v15 = *v13;
    uint64_t v14 = (void *)v13[1];
    sub_10003742C(*(void *)(a1 + 56) + 32 * i, (uint64_t)v25);
    *(void *)&long long v24 = v15;
    *((void *)&v24 + 1) = v14;
    v23[0] = v24;
    v23[1] = v25[0];
    v23[2] = v25[1];
    switch((unint64_t)v14)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        sub_100088954(v15, (unint64_t)v14);
        break;
      default:
        uint64_t v16 = *(void *)&v23[0];
        *(void *)&v22[0] = 0;
        *((void *)&v22[0] + 1) = 0xE000000000000000;
        sub_100088954(v15, (unint64_t)v14);
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(void *)&v22[0] = 0xD000000000000014;
        *((void *)&v22[0] + 1) = 0x8000000100186180;
        v17._uint64_t countAndFlagsBits = v16;
        v17._object = v14;
        String.append(_:)(v17);
        break;
    }
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v19 = [a2 objectForKey:v18];

    if (!v19)
    {
      memset(v22, 0, sizeof(v22));
      sub_100019960((uint64_t)v22, &qword_1001E1BB8);
      sub_100019960((uint64_t)v23, &qword_1001E2A30);
      swift_release();
      return 0;
    }
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100019960((uint64_t)v22, &qword_1001E1BB8);
    sub_100019960((uint64_t)v23, &qword_1001E2A30);
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v26) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v26) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v26) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v21 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v26) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v21 + 8 * v7);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_19:
    unint64_t v6 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 4;
  if (v12 < v26)
  {
    unint64_t v11 = *(void *)(v21 + 8 * v12);
    int64_t v7 = v12;
    if (!v11)
    {
      while (1)
      {
        int64_t v7 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          break;
        }
        if (v7 >= v26) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v21 + 8 * v7);
        ++v12;
        if (v11) {
          goto LABEL_19;
        }
      }
LABEL_29:
      __break(1u);
      JUMPOUT(0x10008A4A0);
    }
    goto LABEL_19;
  }
LABEL_27:
  swift_release();
  return 1;
}

uint64_t sub_10008A4C0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10008A4F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008A524(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008A550(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  return a2;
}

ValueMetadata *type metadata accessor for DeveloperModeManager()
{
  return &type metadata for DeveloperModeManager;
}

uint64_t sub_10008A5D4(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = v1;
    long long v4 = (void *)(result + 32);
    swift_bridgeObjectRetain();
    do
    {
      sub_100029CD8(v3, (uint64_t)v18);
      uint64_t v5 = (void **)sub_100012D78(v18, v18[3]);
      uint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      sub_100012D78(v4, v6);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
      uint64_t v10 = v9;
      sub_100029CD8((uint64_t)v4, (uint64_t)v17);
      uint64_t v11 = swift_allocObject();
      sub_100012D60(v17, v11 + 16);
      int64_t v12 = *v5;
      NSString v13 = String._bridgeToObjectiveC()();
      uint64_t v14 = (void *)swift_allocObject();
      v14[2] = v8;
      _OWORD v14[3] = v10;
      v14[4] = &unk_1001E2A80;
      v14[5] = v11;
      aBlock[4] = sub_10008DA80;
      aBlock[5] = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000399B4;
      aBlock[3] = &unk_1001C6C40;
      uint64_t v15 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v12 registerForTaskWithIdentifier:v13 usingQueue:0 launchHandler:v15];
      _Block_release(v15);
      swift_release();
      swift_bridgeObjectRelease();

      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v18);
      v4 += 5;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008A7D4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = self;
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100029CD8(v4, (uint64_t)v30);
      uint64_t v5 = v31;
      uint64_t v6 = v32;
      sub_100012D78(v30, v31);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      uint64_t v9 = v8;
      id v10 = [v3 standardUserDefaults];
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&long long aBlock = 0xD000000000000014;
      *((void *)&aBlock + 1) = 0x8000000100186180;
      v11._uint64_t countAndFlagsBits = v7;
      v11._object = v9;
      String.append(_:)(v11);
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v13 = [v10 objectForKey:v12];

      if (v13)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_100037488(&v28, &aBlock);
      }
      else
      {
        long long aBlock = 0u;
        long long v24 = 0u;
      }
      sub_100012960(&qword_1001E1BB8);
      if (swift_dynamicCast())
      {
        uint64_t v14 = *((void *)&v28 + 1);
        uint64_t v15 = v28;
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        long long v28 = 0uLL;
      }

      swift_bridgeObjectRelease();
      if (v14)
      {
        sub_100029CD8(v22, (uint64_t)&v28);
        uint64_t v16 = (void **)sub_100012D78(&v28, v29);
        sub_100029CD8((uint64_t)v30, (uint64_t)v27);
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v15;
        *(void *)(v17 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
        sub_100012D60(v27, v17 + 32);
        NSString v18 = *v16;
        swift_bridgeObjectRetain();
        NSString v19 = String._bridgeToObjectiveC()();
        uint64_t v20 = (void *)swift_allocObject();
        v20[2] = v15;
        void v20[3] = v14;
        v20[4] = &unk_1001E2A68;
        v20[5] = v17;
        unint64_t v25 = sub_10008DA80;
        int64_t v26 = v20;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v24 = sub_1000399B4;
        *((void *)&v24 + 1) = &unk_1001C6B50;
        uint64_t v21 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        [v18 registerForTaskWithIdentifier:v19 usingQueue:0 launchHandler:v21];
        _Block_release(v21);
        swift_release();

        _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)&v28);
        swift_bridgeObjectRelease();
      }
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v30);
      v4 += 40;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008AB38(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  sub_100012960(&qword_1001E0EE0);
  *(void *)(v1 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_10008ABCC, 0, 0);
}

void sub_10008ABCC()
{
  if (qword_1001E08D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[14];
  uint64_t v2 = type metadata accessor for Logger();
  v0[16] = sub_100012E74(v2, (uint64_t)qword_1001E5FB0);
  sub_100029CD8(v1, (uint64_t)(v0 + 2));
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    buf = v5;
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[6];
    sub_100012D78(v0 + 2, v6);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    v0[13] = sub_100147668(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 2));
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Running static activity: %s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 2));
  }

  id v10 = (void *)v0[14];
  uint64_t v11 = v0[15];
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  uint64_t v22 = 0xD00000000000001CLL;
  unint64_t v23 = 0x8000000100186C10;
  uint64_t v12 = v10[3];
  uint64_t v13 = v10[4];
  sub_100012D78(v10, v12);
  v14._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = v22;
  unint64_t v15 = v23;
  type metadata accessor for Transaction();
  v0[17] = swift_initStackObject();
  v0[18] = sub_1001469B4(v16, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v11, 1, 1, v2);
  uint64_t v17 = swift_task_alloc();
  v0[19] = v17;
  *(void *)(v17 + 16) = v10;
  uint64_t v21 = (char *)&dword_1001E4AF0 + dword_1001E4AF0;
  NSString v18 = (void *)swift_task_alloc();
  v0[20] = v18;
  *NSString v18 = v0;
  v18[1] = sub_10008AF7C;
  uint64_t v19 = v0[15];
  uint64_t v27 = v17;
  long long v28 = &_mh_execute_header;
  uint64_t v25 = v19;
  int64_t v26 = &unk_1001E2A90;
  __asm { BR              X0; sub_100140B34 }
}

uint64_t sub_10008AF7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100019960(v1, &qword_1001E0EE0);
  return _swift_task_switch(sub_10008B0B8, 0, 0);
}

uint64_t sub_10008B0B8()
{
  id v10 = v0;
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[18];
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    uint64_t v5 = *(void *)(v3 + 24);
    unint64_t v6 = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    v0[12] = sub_100147668(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Transaction %s out of scope", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {
    swift_release_n();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10008B268(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(sub_10008B288, 0, 0);
}

uint64_t sub_10008B288()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012D78(v1, v2);
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
  os_log_type_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_10008B388;
  return v6(v2, v3);
}

uint64_t sub_10008B388()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10008B480(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v79 = a2;
  uint64_t v80 = type metadata accessor for Date();
  uint64_t v75 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v74 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for BarktivityType();
  __chkstk_darwin(v77);
  uint64_t v7 = (double *)((char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  Swift::String v14 = sub_100012D78(a1, v12);
  uint64_t v15 = (uint64_t)v3;
  sub_10008CD0C((uint64_t)v14, v3, v12, v13);
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100012D78(a1, v16);
  uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  uint64_t v76 = v18;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_100012D78(a1, v19);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v19, v20))
  {
    uint64_t v21 = a1[3];
    uint64_t v22 = a1[4];
    sub_100012D78(a1, v21);
    long long aBlock = (void **)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
    uint64_t v82 = v23;
    v24._uint64_t countAndFlagsBits = 45;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    UUID.init()();
    sub_10008D32C();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v26 = (uint64_t)aBlock;
    unint64_t v27 = v82;
  }
  else
  {
    uint64_t v28 = a1[3];
    uint64_t v29 = a1[4];
    sub_100012D78(a1, v28);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
    unint64_t v27 = v30;
  }
  uint64_t v78 = v15;
  sub_100029CD8(v15, (uint64_t)v88);
  uint64_t v31 = (void **)sub_100012D78(v88, v88[3]);
  sub_100029CD8((uint64_t)a1, (uint64_t)v87);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v26;
  *(void *)(v32 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v27;
  sub_100012D60(v87, v32 + 32);
  uint64_t v33 = *v31;
  swift_bridgeObjectRetain();
  NSString v34 = String._bridgeToObjectiveC()();
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = v26;
  v35[3] = v27;
  v35[4] = &unk_1001E2A48;
  v35[5] = v32;
  long long v85 = sub_10008D2A4;
  long long v86 = v35;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v82 = 1107296256;
  long long v83 = sub_1000399B4;
  long long v84 = &unk_1001C6AD8;
  char v36 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v33 registerForTaskWithIdentifier:v34 usingQueue:0 launchHandler:v36];
  _Block_release(v36);
  swift_release();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v88);
  sub_10008D2C8(v79, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    double v37 = *v7;
    uint64_t v38 = a1[3];
    uint64_t v39 = a1[4];
    sub_100012D78(a1, v38);
    double v40 = (*(double (**)(uint64_t, uint64_t))(v39 + 56))(v38, v39);
    uint64_t v41 = a1[3];
    uint64_t v42 = a1[4];
    sub_100012D78(a1, v41);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
    uint64_t v44 = a1[3];
    uint64_t v45 = a1[4];
    sub_100012D78(a1, v44);
    LOBYTE(v44) = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 24))(v44, v45);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    sub_100012D78(a1, v46);
    char v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 32))(v46, v47);
    uint64_t v49 = v89;
    sub_10008C018(v26, v27, v43, v44 & 1, v48 & 1, v37, v40);
    if (v49) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v50 = v75;
    uint64_t v51 = *(void (**)(char *, double *, uint64_t))(v75 + 32);
    uint64_t v79 = v26;
    uint64_t v52 = (uint64_t)v74;
    v51(v74, v7, v80);
    uint64_t v53 = a1[3];
    uint64_t v54 = a1[4];
    sub_100012D78(a1, v53);
    double v55 = (*(double (**)(uint64_t, uint64_t))(v54 + 48))(v53, v54);
    uint64_t v56 = a1[3];
    uint64_t v57 = a1[4];
    sub_100012D78(a1, v56);
    double v58 = (*(double (**)(uint64_t, uint64_t))(v57 + 56))(v56, v57);
    uint64_t v59 = a1[3];
    uint64_t v60 = a1[4];
    sub_100012D78(a1, v59);
    uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 16))(v59, v60);
    uint64_t v62 = a1[3];
    uint64_t v63 = a1[4];
    sub_100012D78(a1, v62);
    LOBYTE(v62) = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 24))(v62, v63);
    uint64_t v64 = a1[3];
    uint64_t v65 = a1[4];
    sub_100012D78(a1, v64);
    char v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 32))(v64, v65);
    char v67 = v62 & 1;
    uint64_t v68 = v79;
    uint64_t v69 = v89;
    sub_10008BC38(v79, v27, v55, v58, v52, v61, v67, v66 & 1);
    if (v69)
    {
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v80);
LABEL_9:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v80);
    uint64_t v26 = v68;
  }
  id v71 = [self standardUserDefaults];
  long long v84 = &type metadata for String;
  long long aBlock = (void **)v26;
  uint64_t v82 = v27;
  sub_10006B228((uint64_t)&aBlock, v73, v76);
  swift_bridgeObjectRelease();

  return sub_100019960((uint64_t)&aBlock, &qword_1001E1BB8);
}

void sub_10008BC38(uint64_t a1, unint64_t a2, double a3, double a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  id v16 = objc_allocWithZone((Class)BGNonRepeatingSystemTaskRequest);
  swift_bridgeObjectRetain();
  uint64_t v28 = a1;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v16 initWithIdentifier:v17];

  [v18 setPriority:a6];
  [v18 setRequiresNetworkConnectivity:a7 & 1];
  [v18 setRequiresExternalPower:a8 & 1];
  Date.timeIntervalSinceNow.getter();
  objc_msgSend(v18, "setScheduleAfter:");
  Date.timeIntervalSinceNow.getter();
  [v18 setTrySchedulingBefore:v19 + a3];
  [v18 setRandomInitialDelay:a4];
  uint64_t v20 = (void *)*sub_100012D78(v8, v8[3]);
  id v30 = 0;
  if ([v20 submitTaskRequest:v18 error:&v30])
  {
    id v21 = v30;
  }
  else
  {
    id v22 = v30;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1001E08D8 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100012E74(v23, (uint64_t)qword_1001E5FB0);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    Swift::String v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      unint64_t v27 = (void *)swift_slowAlloc();
      id v30 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain();
      sub_100147668(v28, a2, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2112;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v27 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to schedule non-repeating system task %s with error: %@", (uint8_t *)v26, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }
}

void sub_10008C018(uint64_t a1, unint64_t a2, uint64_t a3, char a4, char a5, double a6, double a7)
{
  id v15 = objc_allocWithZone((Class)BGRepeatingSystemTaskRequest);
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [v15 initWithIdentifier:v16];

  [v17 setPriority:a3];
  [v17 setRequiresNetworkConnectivity:a4 & 1];
  [v17 setRequiresExternalPower:a5 & 1];
  [v17 setInterval:a6];
  [v17 setMinDurationBetweenInstances:a6 * 0.8];
  [v17 setRandomInitialDelay:a7];
  id v18 = (void *)*sub_100012D78(v7, v7[3]);
  id v27 = 0;
  if ([v18 submitTaskRequest:v17 error:&v27])
  {
    id v19 = v27;
  }
  else
  {
    id v20 = v27;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1001E08D8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100012E74(v21, (uint64_t)qword_1001E5FB0);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      os_log_type_t v25 = (void *)swift_slowAlloc();
      id v27 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain();
      sub_100147668(a1, a2, (uint64_t *)&v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2112;
      swift_errorRetain();
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v25 = v26;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to schedule repeating system task %s with error: %@", (uint8_t *)v24, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }
}

uint64_t sub_10008C3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[10] = a2;
  v3[11] = a3;
  v3[9] = a1;
  sub_100012960(&qword_1001E0EE0);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_10008C488, 0, 0);
}

void sub_10008C488()
{
  if (qword_1001E08D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = sub_100012E74(v1, (uint64_t)qword_1001E5FB0);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[8] = sub_100147668(v6, v5, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Running barktivity: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = v0[11];
  uint64_t v8 = v0[12];
  uint64_t v11 = v0[9];
  uint64_t v10 = (void *)v0[10];
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  uint64_t v19 = 0xD000000000000017;
  unint64_t v20 = 0x8000000100186BA0;
  v12._uint64_t countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  uint64_t v13 = v19;
  unint64_t v14 = v20;
  type metadata accessor for Transaction();
  v0[14] = swift_initStackObject();
  v0[15] = sub_1001469B4(v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v8, 1, 1, v1);
  uint64_t v15 = swift_task_alloc();
  v0[16] = v15;
  *(void *)(v15 + 16) = v9;
  id v18 = (char *)&dword_1001E4AF0 + dword_1001E4AF0;
  NSString v16 = (void *)swift_task_alloc();
  v0[17] = v16;
  *NSString v16 = v0;
  v16[1] = sub_10008C7E0;
  uint64_t v17 = v0[12];
  uint64_t v24 = v15;
  os_log_type_t v25 = &_mh_execute_header;
  uint64_t v22 = v17;
  os_log_type_t v23 = &unk_1001E2A60;
  __asm { BR              X0; sub_100140B34 }
}

uint64_t sub_10008C7E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100019960(v1, &qword_1001E0EE0);
  return _swift_task_switch(sub_10008C91C, 0, 0);
}

uint64_t sub_10008C91C()
{
  uint64_t v10 = v0;
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[15];
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)BOOL v4 = 136315138;
    uint64_t v5 = *(void *)(v3 + 24);
    unint64_t v6 = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    v0[7] = sub_100147668(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Transaction %s out of scope", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {
    swift_release_n();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10008CACC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(sub_10008CAEC, 0, 0);
}

uint64_t sub_10008CAEC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012D78(v1, v2);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3))
  {
    uint64_t v4 = v1[3];
    uint64_t v5 = v1[4];
    sub_100012D78(*(void **)(v0 + 16), v4);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    uint64_t v8 = v7;
    id v9 = [self standardUserDefaults];
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = v6;
    v10._object = v8;
    String.append(_:)(v10);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 removeObjectForKey:v11];

    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v1[3];
  uint64_t v12 = v1[4];
  sub_100012D78(*(void **)(v0 + 16), v13);
  NSString v16 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v12 + 64) + **(int **)(v12 + 64));
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
  *unint64_t v14 = v0;
  v14[1] = sub_10008B388;
  return v16(v13, v12);
}

uint64_t sub_10008CD0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v37[3] = a3;
  v37[4] = a4;
  sub_100012DBC(v37);
  (*(void (**)(void))(*(void *)(a3 - 8) + 16))();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  uint64_t v8 = v7(a3, a4);
  Swift::String v10 = v9;
  NSString v11 = self;
  id v12 = [v11 standardUserDefaults];
  uint64_t v34 = v8;
  uint64_t v13 = sub_1000886D4(v8, v10);
  unint64_t v15 = v14;

  if (v15)
  {
    NSString v16 = (void *)*sub_100012D78(a2, a2[3]);
    NSString v17 = String._bridgeToObjectiveC()();
    unsigned int v18 = [v16 deregisterTaskWithIdentifier:v17];

    id v19 = [v11 standardUserDefaults];
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v36[0] = 0xD000000000000014;
    v36[1] = 0x8000000100186180;
    v20._uint64_t countAndFlagsBits = v34;
    v20._object = v10;
    String.append(_:)(v20);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v19 removeObjectForKey:v21];

    swift_bridgeObjectRelease();
    if (qword_1001E08D8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100012E74(v22, (uint64_t)qword_1001E5FB0);
    swift_bridgeObjectRetain();
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      swift_bridgeObjectRetain();
      HIDWORD(v35) = (unint64_t)sub_100147668(v13, v15, v36) >> 32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 12) = 1024;
      LODWORD(v35) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Attempted to deregister '%s' with result: %{BOOL}d", (uint8_t *)v25, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v26 = v7;
    swift_bridgeObjectRelease();
    if (qword_1001E08D8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100012E74(v27, (uint64_t)qword_1001E5FB0);
    sub_100029CD8((uint64_t)v37, (uint64_t)v36);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)id v30 = 136315138;
      sub_100012D78(v36, v36[3]);
      uint64_t v31 = v26(a3, a4);
      sub_100147668(v31, v32, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v36);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "No cached barktivity found for activity: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v36);
    }
  }
  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v37);
}

uint64_t sub_10008D1F8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100013480;
  return sub_10008C3F0(v2, v3, v0 + 32);
}

uint64_t sub_10008D2A4(void *a1)
{
  return sub_1000243C0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10008D2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008D2C0()
{
  return swift_release();
}

uint64_t sub_10008D2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BarktivityType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10008D32C()
{
  unint64_t result = qword_1001E2A50;
  if (!qword_1001E2A50)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E2A50);
  }
  return result;
}

uint64_t sub_10008D384()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100012AB8;
  v3[2] = v2;
  return _swift_task_switch(sub_10008CAEC, 0, 0);
}

uint64_t sub_10008D430()
{
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 32);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10008D470()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100012AB8;
  return sub_10008C3F0(v2, v3, v0 + 32);
}

uint64_t sub_10008D51C()
{
  sub_100012960(&qword_1001E2A98);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10017B6B0;
  *(void *)(v0 + 56) = &type metadata for BootstrapActivity;
  *(void *)(v0 + 64) = &off_1001CA918;
  *(void *)(v0 + 32) = 0xD000000000000023;
  *(void *)(v0 + 40) = 0x8000000100186C60;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 96) = &type metadata for CleanDatabaseRepeatingActivity;
  *(void *)(v0 + 104) = &off_1001C6010;
  *(void *)(v0 + 72) = 0xD000000000000028;
  *(void *)(v0 + 80) = 0x8000000100186C90;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 136) = &type metadata for PostbackTransmissionRepeatingActivity;
  *(void *)(v0 + 144) = &off_1001C4608;
  *(void *)(v0 + 112) = 0xD00000000000002FLL;
  *(void *)(v0 + 120) = 0x8000000100186CC0;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 176) = &type metadata for SnoutFlushRepeatingActivity;
  *(void *)(v0 + 184) = &off_1001C6DA8;
  *(void *)(v0 + 152) = 0xD000000000000035;
  *(void *)(v0 + 160) = 0x8000000100186CF0;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 216) = &type metadata for TokenVendingFetchRepeatingActivity;
  *(void *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &off_1001C3F40;
  *(void *)(v0 + 192) = 0xD00000000000002DLL;
  *(void *)(v0 + 200) = 0x8000000100186D30;
  return v0;
}

uint64_t sub_10008D6B8()
{
  sub_100012960(&qword_1001E2A70);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100178B50;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 56) = &type metadata for DelayedWoof;
  *(void *)(v0 + 64) = &off_1001C4410;
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 32) = v1;
  *(void *)(v1 + 16) = 0xD000000000000028;
  *(void *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0x8000000100186BE0;
  *(void *)(v1 + 32) = 2;
  *(_WORD *)(v1 + 40) = 1;
  *(unsigned char *)(v1 + 42) = 1;
  *(_OWORD *)(v1 + 48) = xmmword_10017B6C0;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 96) = &type metadata for DeveloperModeResetBarktivity;
  *(void *)(v0 + 104) = &off_1001CA698;
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 72) = v2;
  *(void *)(v2 + 16) = 0xD00000000000002ELL;
  *(void *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0x8000000100186AF0;
  *(void *)(v2 + 32) = 1;
  *(_WORD *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 42) = 0;
  *(_OWORD *)(v2 + 48) = xmmword_10017B660;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 136) = &type metadata for DevelopmentPostbackTransmissionBarktivity;
  *(void *)(v0 + 144) = &off_1001C6920;
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 112) = v3;
  *(void *)(v3 + 16) = 0xD00000000000003BLL;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0x8000000100186B20;
  *(void *)(v3 + 32) = 2;
  *(_WORD *)(v3 + 40) = 1;
  *(unsigned char *)(v3 + 42) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  return v0;
}

uint64_t sub_10008D880()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10008D8B8()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008D8F0()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100013480;
  return sub_10008AB38(v0 + 16);
}

uint64_t sub_10008D988()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008D9C8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013480;
  v3[2] = v2;
  return _swift_task_switch(sub_10008B288, 0, 0);
}

ValueMetadata *type metadata accessor for ActivityManager()
{
  return &type metadata for ActivityManager;
}

ValueMetadata *type metadata accessor for LaunchServicesRecordFactory()
{
  return &type metadata for LaunchServicesRecordFactory;
}

void sub_10008DAAC()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100012960(&qword_1001E1170);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100020764((uint64_t)v6);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  Swift::String_optional v11 = URL.host(percentEncoded:)(1);
  if (!v11.value._object)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return;
  }
  Swift::String_optional v48 = v11;
  uint64_t v51 = 46;
  unint64_t v52 = 0xE100000000000000;
  sub_10003985C();
  id v12 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v53 = v12;
  if (v12[2]
    && (v12[4] == 7829367 && v12[5] == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    sub_100061D54(0, 1);
    id v12 = v53;
  }
  unint64_t v13 = v12[2];
  if (!v13)
  {
    uint64_t v14 = Logger.general.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v14, v0);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      NSString v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "URL does not have a valid host.", v17, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    goto LABEL_11;
  }
  if (v13 == 1 || !v12[4] && v12[5] == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    return;
  }
  unsigned int v18 = v12 + 7;
  unint64_t v19 = v13;
  while (--v19)
  {
    if (*(v18 - 1)) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = *v18 == 0xE000000000000000;
    }
    if (!v20)
    {
      v18 += 2;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        continue;
      }
    }
    goto LABEL_11;
  }
  if (v13 <= v12[2])
  {
    NSString v21 = &v12[2 * v13 + 2];
    uint64_t v22 = *v21;
    os_log_type_t v23 = (void *)v21[1];
    v48.value._uint64_t countAndFlagsBits = 46;
    v48.value._object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = v22;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v48.value._countAndFlagsBits;
    object = v48.value._object;
    NSString v28 = String._bridgeToObjectiveC()();
    int IsDomainTopLevel = _CFHostIsDomainTopLevel();

    if (IsDomainTopLevel)
    {
      uint64_t v46 = (char *)(v12 + 4);
      uint64_t v47 = countAndFlagsBits;
      id v30 = (void **)&v12[2 * v13 + 1];
      while (1)
      {
        if (--v13 > v12[2]) {
          goto LABEL_41;
        }
        uint64_t v31 = (uint64_t)*(v30 - 1);
        unint64_t v32 = *v30;
        v48.value._uint64_t countAndFlagsBits = 46;
        v48.value._object = (void *)0xE100000000000000;
        swift_bridgeObjectRetain();
        v33._uint64_t countAndFlagsBits = v31;
        v33._object = v32;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._uint64_t countAndFlagsBits = v47;
        v34._object = object;
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        object = v48.value._object;
        uint64_t v47 = v48.value._countAndFlagsBits;
        NSString v35 = String._bridgeToObjectiveC()();
        LODWORD(v31) = _CFHostIsDomainTopLevel();

        if (!v31) {
          break;
        }
        v30 -= 2;
        char v36 = v46;
        if (v13 <= 1)
        {
          swift_bridgeObjectRelease();
          unint64_t v13 = 0;
          unint64_t v37 = v12[2];
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v37 = v12[2];
      if (v37 < v13) {
        goto LABEL_44;
      }
      char v36 = v46;
LABEL_38:
      v48.value._uint64_t countAndFlagsBits = (uint64_t)v12;
      v48.value._object = v36;
      unint64_t v49 = v13;
      uint64_t v50 = (2 * v37) | 1;
      swift_bridgeObjectRetain();
      sub_100012960(&qword_1001E2AA0);
      sub_10008E0F8();
      uint64_t v38 = BidirectionalCollection<>.joined(separator:)();
      double v40 = v39;
      swift_bridgeObjectRelease();
      if (!v13) {
        goto LABEL_42;
      }
      if (v13 - 1 < v12[2])
      {
        uint64_t v41 = (uint64_t *)&v36[16 * v13 - 16];
        uint64_t v42 = (void *)v41[1];
        v48.value._uint64_t countAndFlagsBits = *v41;
        v48.value._object = v42;
        swift_bridgeObjectRetain();
        v43._uint64_t countAndFlagsBits = 46;
        v43._object = (void *)0xE100000000000000;
        String.append(_:)(v43);
        v44._uint64_t countAndFlagsBits = v38;
        v44._object = v40;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

unint64_t sub_10008E0F8()
{
  unint64_t result = qword_1001E2AA8;
  if (!qword_1001E2AA8)
  {
    sub_100011ECC(&qword_1001E2AA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2AA8);
  }
  return result;
}

uint64_t sub_10008E154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_10008E194(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1001394D4);
}

uint64_t sub_10008E194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = a5(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v20 - v13;
  sub_10008FA54(a1, (uint64_t)&v20 - v13, a6);
  uint64_t v15 = *a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v15 = a7(0, *(void *)(v15 + 16) + 1, 1, v15);
    *a4 = v15;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    uint64_t v15 = a7(v17 > 1, v18 + 1, 1, v15);
    *a4 = v15;
  }
  *(void *)(v15 + 16) = v18 + 1;
  return sub_10008FABC((uint64_t)v14, v15+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v18, a6);
}

void sub_10008E2F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_100012960(&qword_1001E1378);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v14 = [v4 connection];
  NSString v15 = String._bridgeToObjectiveC()();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  uint64_t v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v17 = [self predicateWithProperty:v15 equalToValue:v16];
  swift_unknownObjectRelease();

  id v18 = sub_10011C87C(v14, v17, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  uint64_t v19 = type metadata accessor for ImpressionModel();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
  NSString v21 = v9;
  sub_100127F94((uint64_t)sub_10008FB28, (uint64_t)v20, v18);
  if (v3) {
    sub_100045908((uint64_t)v9);
  }
  else {
    sub_10008F728((uint64_t)v9, a2);
  }
}

id sub_10008E578(uint64_t a1, char a2, __int16 a3, uint64_t a4)
{
  uint64_t v5 = v4;
  sub_100012960((uint64_t *)&unk_1001E3250);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  NSString v10 = String._bridgeToObjectiveC()();
  v27[0] = a1;
  uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v12 = self;
  id v13 = [v12 predicateWithProperty:v10 equalToValue:v11];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v13;
  if (a2) {
    unint64_t v14 = 0xE500000000000000;
  }
  else {
    unint64_t v14 = 0xE400000000000000;
  }
  NSString v15 = String._bridgeToObjectiveC()();
  v27[1] = v14;
  swift_bridgeObjectRetain();
  id v16 = [v12 predicateWithProperty:v15 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v16;
  specialized Array._endMutation()();
  id v17 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v18 = [v5 connection];
  sub_100012960(&qword_1001E2AE0);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_100179990;
  *(unsigned char *)(v19 + 32) = a3;
  *(unsigned char *)(v19 + 33) = HIBYTE(a3) & 1;
  id v20 = v17;
  id v21 = sub_10011C894(v18, v17, v19, a4, 0);
  v27[0] = _swiftEmptyArrayStorage;
  uint64_t v26 = v27;
  uint64_t v22 = v27[9];
  sub_100127F94((uint64_t)sub_10008FB24, (uint64_t)v25, v21);

  swift_bridgeObjectRelease();
  if (v22) {
    swift_bridgeObjectRelease();
  }
  else {
    id v21 = (id)v27[0];
  }

  return v21;
}

uint64_t sub_10008E844(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  sub_100012960((uint64_t *)&unk_1001E3250);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  NSString v8 = String._bridgeToObjectiveC()();
  v21[0] = a1;
  uint64_t v9 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  NSString v10 = self;
  id v11 = [v10 predicateWithProperty:v8 equalToValue:v9];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v11;
  if (a2) {
    unint64_t v12 = 0xEA00000000006E6FLL;
  }
  else {
    unint64_t v12 = 0xEB00000000746E65;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  v21[1] = v12;
  swift_bridgeObjectRetain();
  id v14 = [v10 predicateWithProperty:v13 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v14;
  specialized Array._endMutation()();
  id v15 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v16 = [v4 connection];
  id v17 = v15;
  id v18 = sub_10011C894(v16, v15, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  v21[0] = _swiftEmptyArrayStorage;
  v20[2] = v21;
  sub_100127F94((uint64_t)sub_10008F7D4, (uint64_t)v20, v18);

  if (v3) {
    return swift_bridgeObjectRelease();
  }
  else {
    return v21[0];
  }
}

void *sub_10008EAF0()
{
  id v2 = [v0 connection];
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v5 = [self predicateWithProperty:v3 equalToValue:v4];
  swift_unknownObjectRelease();

  id v6 = sub_10011C894(v2, v5, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  _OWORD v9[2] = &v10;
  NSString v10 = &_swiftEmptySetSingleton;
  sub_100127F94((uint64_t)sub_10008F790, (uint64_t)v9, v6);

  uint64_t v7 = v10;
  if (v1) {
    swift_bridgeObjectRelease();
  }
  return v7;
}

void sub_10008EC44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v23[0] = a4;
  uint64_t v7 = sub_100012960(&qword_1001E1378);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012960((uint64_t *)&unk_1001E3250);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  NSString v11 = String._bridgeToObjectiveC()();
  uint64_t v26 = a1;
  uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  NSString v13 = self;
  id v14 = [v13 predicateWithProperty:v11 equalToValue:v12];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v14;
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  swift_bridgeObjectRetain();
  id v16 = [v13 predicateWithProperty:v15 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v16;
  uint64_t v26 = inited;
  specialized Array._endMutation()();
  id v17 = sub_1000485A4(v26);
  swift_bridgeObjectRelease();
  id v18 = [(id)v23[1] connection];
  id v19 = v17;
  id v20 = sub_10011C894(v18, v17, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  uint64_t v21 = type metadata accessor for ImpressionModel();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
  Swift::String v25 = v9;
  uint64_t v22 = v28;
  sub_100127F94((uint64_t)sub_10008F720, (uint64_t)v24, v20);
  if (v22) {
    sub_100045908((uint64_t)v9);
  }
  else {
    sub_10008F728((uint64_t)v9, v23[0]);
  }
}

double sub_10008EF20@<D0>(uint64_t a1@<X8>)
{
  sub_100012960(&qword_1001E2AD8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v5 = self;
  id v6 = [v5 predicateWithProperty:v3 equalToValue:v4];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v6;
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  id v8 = [v5 predicateWithProperty:v7 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v8;
  specialized Array._endMutation()();
  id v9 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v10 = [v19 connection];
  id v11 = v9;
  id v12 = sub_10011DBB0(v10, v9, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v21 = &v22;
  uint64_t v13 = v27;
  sub_100129800((uint64_t)sub_10008F6A8, (uint64_t)v20, v12);
  if (v13)
  {
    sub_10008F6B0(v22, *((uint64_t *)&v22 + 1), v23, *((unint64_t *)&v23 + 1), v24, *((unint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26);
  }
  else
  {

    uint64_t v15 = v26;
    double result = *(double *)&v22;
    long long v16 = v23;
    long long v17 = v24;
    long long v18 = v25;
    *(_OWORD *)a1 = v22;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v18;
    *(void *)(a1 + 64) = v15;
  }
  return result;
}

BOOL sub_10008F1BC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [v1 connection];
  NSString v8 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v9 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v10 = [self predicateWithProperty:v8 equalToValue:v9];
  swift_unknownObjectRelease();

  id v11 = sub_10011C894(v7, v10, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  id v12 = [v11 countOfEntities];

  return (uint64_t)v12 > 0;
}

BOOL sub_10008F374(uint64_t a1)
{
  return sub_10008F3D4(a1, (uint64_t (*)(id, id, void *, void, void))sub_10011C894);
}

BOOL sub_10008F3A4(uint64_t a1)
{
  return sub_10008F3D4(a1, (uint64_t (*)(id, id, void *, void, void))sub_10011DBB0);
}

BOOL sub_10008F3D4(uint64_t a1, uint64_t (*a2)(id, id, void *, void, void))
{
  id v4 = [v2 connection];
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = [self predicateWithProperty:v5 equalToValue:v6];
  swift_unknownObjectRelease();

  NSString v8 = (void *)a2(v4, v7, _swiftEmptyArrayStorage, 0, 0);
  id v9 = [v8 countOfEntities];

  return (uint64_t)v9 > 0;
}

id sub_10008F584()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ImpressionDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ImpressionDatabaseSession()
{
  return self;
}

uint64_t sub_10008F5DC(uint64_t *a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  unint64_t v10 = a1[5];
  uint64_t v12 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v13 = a1[8];
  sub_10008F6B0(*(void *)a4, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), *(void *)(a4 + 48), *(void *)(a4 + 56), *(void *)(a4 + 64));
  *(void *)a4 = v5;
  *(void *)(a4 + 8) = v6;
  *(void *)(a4 + 16) = v7;
  *(void *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = v10;
  *(void *)(a4 + 48) = v12;
  *(void *)(a4 + 56) = v11;
  *(void *)(a4 + 64) = v13;
  *a3 = 1;
  sub_10005EA64(v7, v8);
  sub_10005EA64(v9, v10);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10008F6A8(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  return sub_10008F5DC(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_10008F6B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    sub_10005E9FC(a3, a4);
    sub_10005E9FC(a5, a6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008F720(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_1001272B0(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_10008F728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E1378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008F790(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ImpressionModel();
  return sub_10002748C(&v4, *(unsigned char *)(a1 + *(int *)(v2 + 52)));
}

uint64_t sub_10008F7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008E194(a1, a2, a3, *(uint64_t **)(v3 + 16), (uint64_t (*)(void))type metadata accessor for ImpressionModel, (uint64_t (*)(void))type metadata accessor for ImpressionModel, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_100139630);
}

__n128 sub_10008F82C(uint64_t a1, void **a2)
{
  char v4 = *a2;
  sub_10008F9E8(a1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v4 = sub_100139508(0, v4[2] + 1, 1, v4);
    *a2 = v4;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    char v4 = sub_100139508((void *)(v6 > 1), v7 + 1, 1, v4);
    *a2 = v4;
  }
  v4[2] = v7 + 1;
  unint64_t v8 = &v4[26 * v7];
  *((_OWORD *)v8 + 2) = *(_OWORD *)a1;
  long long v9 = *(_OWORD *)(a1 + 16);
  long long v10 = *(_OWORD *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v8 + 6) = v11;
  *((_OWORD *)v8 + 3) = v9;
  *((_OWORD *)v8 + 4) = v10;
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v8 + 9) = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v8 + 10) = v14;
  *((_OWORD *)v8 + 7) = v12;
  *((_OWORD *)v8 + 8) = v13;
  __n128 result = *(__n128 *)(a1 + 144);
  long long v16 = *(_OWORD *)(a1 + 160);
  long long v17 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)((char *)v8 + 217) = *(_OWORD *)(a1 + 185);
  *((_OWORD *)v8 + 12) = v16;
  *((_OWORD *)v8 + 13) = v17;
  *((__n128 *)v8 + 11) = result;
  return result;
}

void *sub_10008F91C(const void *a1, void **a2)
{
  char v4 = *a2;
  sub_100081480((uint64_t)a1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v4 = sub_100139D50(0, v4[2] + 1, 1, v4);
    *a2 = v4;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    char v4 = sub_100139D50((void *)(v6 > 1), v7 + 1, 1, v4);
    *a2 = v4;
  }
  v4[2] = v7 + 1;

  return memcpy(&v4[33 * v7 + 4], a1, 0x101uLL);
}

uint64_t sub_10008F9E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008FA54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10008FABC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for SnoutFlushRepeatingActivity()
{
  return &type metadata for SnoutFlushRepeatingActivity;
}

uint64_t sub_10008FB3C()
{
  return _swift_task_switch(sub_10008FB58, 0, 0);
}

uint64_t sub_10008FB58()
{
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_1001E5F88;
  v0[5] = &type metadata for AMSDogBag;
  v0[6] = &off_1001CAA18;
  sub_10008FDEC((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  v0[12] = sub_10013C000(0x74735F74756F6E73, 0xEB0000000065726FLL, v1, (uint64_t)(v0 + 7), 0);
  sub_10008FE48((uint64_t)(v0 + 2));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10008FC90;
  return sub_100132D2C();
}

uint64_t sub_10008FC90()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10008FD8C, 0, 0);
}

uint64_t sub_10008FD8C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008FDEC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10008FE48(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008FE9C()
{
  v1[16] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  sub_100012960(&qword_1001E1170);
  v1[22] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[23] = v3;
  v1[24] = *(void *)(v3 - 8);
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_100090004, 0, 0);
}

uint64_t sub_100090004()
{
  uint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v1 + 160);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)(v1 + 152) & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v1 + 120);
  char v5 = *(unsigned char *)(v1 + 128);
  char v6 = *(unsigned char *)(v1 + 129);
  uint64_t v7 = *(void *)(v1 + 136);
  uint64_t v8 = *(void *)(v1 + 144);
  char v9 = *(unsigned char *)(v1 + 168);
  int v42 = *(unsigned __int8 *)(v1 + 169);
  uint64_t v10 = *(void *)(v0 + 184);
  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v12 = *(void *)(v0 + 176);
  URL.init(string:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) == 1)
  {
    sub_100020764(*(void *)(v0 + 176));
LABEL_6:
    uint64_t v14 = *(void *)(v0 + 144);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v16 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
    long long v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received invalid postback URL", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v21 = *(void *)(v0 + 144);
    uint64_t v20 = *(void *)(v0 + 152);
    uint64_t v22 = *(void *)(v0 + 136);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    sub_100090E74();
    swift_allocError();
    unsigned char *v23 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  char v24 = v9 & 1;
  (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 32))(*(void *)(v0 + 200), *(void *)(v0 + 176), *(void *)(v0 + 184));
  if (v42)
  {
    uint64_t v25 = v7;
    uint64_t v26 = 0;
    char v27 = 1;
    if (v42 == 1)
    {
      uint64_t v28 = v8;
      char v29 = v6;
      goto LABEL_15;
    }
    char v29 = 3;
  }
  else
  {
    char v27 = v5 & 1;
    char v29 = 3;
    uint64_t v25 = v7;
    uint64_t v26 = v4;
  }
  uint64_t v28 = v8;
LABEL_15:
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 208) = JSONEncoder.init()();
  *(void *)(v0 + 72) = v25;
  *(void *)(v0 + 80) = v28;
  *(unsigned char *)(v0 + 88) = v24;
  *(void *)(v0 + 96) = v26;
  *(unsigned char *)(v0 + 104) = v27;
  *(unsigned char *)(v0 + 105) = v29;
  sub_1000914FC();
  *(void *)(v0 + 216) = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v30;
  uint64_t v33 = *(void *)(v0 + 128);
  swift_bridgeObjectRelease();
  char v34 = sub_100088604(0, (void *)1);
  uint64_t v35 = *(void *)(v33 + 264);
  *(void *)(v0 + 232) = v35;
  uint64_t v36 = *(void *)(v33 + 272);
  *(void *)(v0 + 240) = v36;
  if (v34 != 2 && (v34 & 1) == 0)
  {
    *(void *)(v0 + 280) = 0;
    uint64_t v41 = *(void *)(v36 + 16) + **(int **)(v36 + 16);
    unint64_t v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v37;
    *unint64_t v37 = v0;
    v37[1] = sub_10009079C;
    __asm { BRAA            X8, X16 }
  }
  double v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 8) + **(int **)(v36 + 8));
  uint64_t v43 = v36;
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v38;
  *uint64_t v38 = v0;
  v38[1] = sub_10009050C;
  uint64_t v39 = *(void *)(v0 + 200);
  return v40(v39, v35, v43);
}

uint64_t sub_10009050C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 256) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100090CDC;
  }
  else
  {
    *(void *)(v6 + 264) = a2;
    *(void *)(v6 + 272) = a1;
    uint64_t v7 = sub_100090640;
  }
  return _swift_task_switch(v7, 0, 0);
}

void sub_100090640()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  sub_100012960(&qword_1001E2B08);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100179990;
  *(unsigned char *)(inited + 32) = 4;
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v2;
  v0[35] = sub_10009F788(inited);
  uint64_t v5 = *(void *)(v0[30] + 16) + **(int **)(v0[30] + 16);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[36] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10009079C;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_10009079C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v4;
  *(void *)(v7 + 296) = a3;
  *(void *)(v7 + 304) = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v8 = sub_100090DA8;
  }
  else
  {
    sub_100020930(a1, a2);
    uint64_t v8 = sub_1000908EC;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000908EC()
{
  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = v0[18];
  uint64_t v3 = sub_1000BD760((uint64_t)&off_1001BF770);
  LOBYTE(v1) = sub_1000402B4((uint64_t)[v1 statusCode], v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  uint64_t v5 = *(void (**)(void, uint64_t, uint64_t))(v2 + 16);
  uint64_t v6 = (void *)v0[37];
  uint64_t v7 = v0[17];
  if (v1)
  {
    v5(v0[20], v4, v7);
    id v8 = v6;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (void *)v0[37];
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134217984;
      v0[15] = [v11 statusCode];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Postback transmission received error status from server: %ld", v12, 0xCu);
      swift_slowDealloc();
      uint64_t v13 = v0[37];
    }
    else
    {

      uint64_t v13 = v0[37];
      uint64_t v9 = v13;
    }
    uint64_t v24 = v0[27];
    unint64_t v23 = v0[28];
    uint64_t v25 = v0[24];
    uint64_t v39 = v0[23];
    uint64_t v40 = v0[25];
    uint64_t v26 = v0[20];
    uint64_t v28 = v0[17];
    uint64_t v27 = v0[18];

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    sub_100090E74();
    swift_allocError();
    *char v29 = 1;
    swift_willThrow();
    sub_100020930(v24, v23);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v40, v39);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v5(v0[21], v4, v7);
    id v14 = v6;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    os_log_type_t v18 = (void *)v0[37];
    uint64_t v20 = v0[27];
    unint64_t v19 = v0[28];
    if (v17)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134217984;
      v0[14] = [v18 statusCode];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Postback transmission has completed with status code: %ld", v21, 0xCu);
      swift_slowDealloc();
      sub_100020930(v20, v19);
    }
    else
    {
      sub_100020930(v0[27], v0[28]);

      uint64_t v22 = v15;
    }
    uint64_t v31 = (void *)v0[37];
    uint64_t v32 = v0[25];
    uint64_t v34 = v0[23];
    uint64_t v33 = v0[24];
    uint64_t v35 = v0[21];
    uint64_t v36 = v0[18];
    uint64_t v37 = v0[17];
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(void))v0[1];
  }
  return v30();
}

uint64_t sub_100090CDC()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  sub_100020930(v0[27], v0[28]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100090DA8()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  sub_100020930(v0[27], v0[28]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

unint64_t sub_100090E74()
{
  unint64_t result = qword_1001E2AF8;
  if (!qword_1001E2AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2AF8);
  }
  return result;
}

unint64_t sub_100090EC8(char a1)
{
  unint64_t result = 0x697274732D73776ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100090F6C(char a1)
{
  unint64_t result = 0x697274732D73776ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100091010(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E2B20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_10009188C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  void v11[4] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[3] = *(unsigned char *)(v3 + 16);
    _OWORD v11[2] = 1;
    sub_100081598();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[1] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10005D610(v3 + 33, (uint64_t)&v12);
    sub_10005D610((uint64_t)&v12, (uint64_t)v11);
    v10[9] = 3;
    sub_10005D678();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100091204(unsigned __int8 *a1, char *a2)
{
  return sub_100105BB8(*a1, *a2);
}

Swift::Int sub_100091210()
{
  return sub_100109158();
}

uint64_t sub_100091218()
{
  return sub_100109C80();
}

Swift::Int sub_100091220()
{
  return sub_10010B4C4();
}

unint64_t sub_100091228@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000920F4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100091258@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100090EC8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100091284()
{
  return sub_100090F6C(*v0);
}

unint64_t sub_10009128C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000920F4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000912B4(uint64_t a1)
{
  unint64_t v2 = sub_10009188C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000912F0(uint64_t a1)
{
  unint64_t v2 = sub_10009188C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009132C(void *a1)
{
  return sub_100091010(a1);
}

uint64_t sub_100091368()
{
  memcpy((void *)(v1 + 16), v0, 0x120uLL);
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 304) = v2;
  *unint64_t v2 = v1;
  v2[1] = sub_100091408;
  return sub_10008FE9C();
}

uint64_t sub_100091408()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_1000914FC()
{
  unint64_t result = qword_1001E2B00;
  if (!qword_1001E2B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B00);
  }
  return result;
}

uint64_t initializeWithCopy for TransmitPostbackTask.RequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TransmitPostbackTask.RequestBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

__n128 initializeWithTake for TransmitPostbackTask.RequestBody(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TransmitPostbackTask.RequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransmitPostbackTask.RequestBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransmitPostbackTask.RequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransmitPostbackTask.RequestBody()
{
  return &type metadata for TransmitPostbackTask.RequestBody;
}

unsigned char *storeEnumTagSinglePayload for TransmitPostbackTaskError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000917D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransmitPostbackTaskError()
{
  return &type metadata for TransmitPostbackTaskError;
}

unint64_t sub_10009180C(uint64_t a1)
{
  unint64_t result = sub_100090E74();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100091838()
{
  unint64_t result = qword_1001E2B18;
  if (!qword_1001E2B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B18);
  }
  return result;
}

unint64_t sub_10009188C()
{
  unint64_t result = qword_1001E2B28;
  if (!qword_1001E2B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B28);
  }
  return result;
}

void destroy for TransmitPostbackTask(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 280);
}

uint64_t initializeWithCopy for TransmitPostbackTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v7;
  uint64_t v8 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v8;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(_WORD *)(a1 + 170) = *(_WORD *)(a2 + 170);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v9;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  uint64_t v10 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = v10;
  uint64_t v11 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v11;
  uint64_t v12 = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = v12;
  uint64_t v13 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v13;
  id v14 = *(void **)(a2 + 280);
  *(void *)(a1 + 280) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v14;
  return a1;
}

uint64_t assignWithCopy for TransmitPostbackTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = a2[11];
  *(void *)(a1 + 96) = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(unsigned char *)(a1 + 105) = *((unsigned char *)a2 + 105);
  *(void *)(a1 + 112) = a2[14];
  uint64_t v6 = a2[15];
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(void *)(a1 + 120) = v6;
  *(unsigned char *)(a1 + 129) = *((unsigned char *)a2 + 129);
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = a2[19];
  *(void *)(a1 + 160) = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(unsigned char *)(a1 + 169) = *((unsigned char *)a2 + 169);
  *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
  *(unsigned char *)(a1 + 171) = *((unsigned char *)a2 + 171);
  *(unsigned char *)(a1 + 172) = *((unsigned char *)a2 + 172);
  *(void *)(a1 + 176) = a2[22];
  *(void *)(a1 + 184) = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *((unsigned char *)a2 + 192);
  *(void *)(a1 + 200) = a2[25];
  *(void *)(a1 + 208) = a2[26];
  uint64_t v7 = a2[27];
  *(unsigned char *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((unsigned char *)a2 + 224);
  *(void *)(a1 + 216) = v7;
  uint64_t v8 = a2[29];
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  *(void *)(a1 + 232) = v8;
  uint64_t v9 = a2[31];
  *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
  *(void *)(a1 + 248) = v9;
  uint64_t v10 = a2[34];
  *(void *)(a1 + 264) = a2[33];
  *(void *)(a1 + 272) = v10;
  uint64_t v11 = (void *)a2[35];
  uint64_t v12 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = v11;
  id v13 = v11;

  return a1;
}

void *initializeWithTake for TransmitPostbackTask(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for TransmitPostbackTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v11 = *(void **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);

  return a1;
}

uint64_t getEnumTagSinglePayload for TransmitPostbackTask(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 288)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransmitPostbackTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 288) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransmitPostbackTask()
{
  return &type metadata for TransmitPostbackTask;
}

unsigned char *storeEnumTagSinglePayload for TransmitPostbackTask.RequestBody.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100091FB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransmitPostbackTask.RequestBody.CodingKeys()
{
  return &type metadata for TransmitPostbackTask.RequestBody.CodingKeys;
}

unint64_t sub_100091FF0()
{
  unint64_t result = qword_1001E2B30;
  if (!qword_1001E2B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B30);
  }
  return result;
}

unint64_t sub_100092048()
{
  unint64_t result = qword_1001E2B50;
  if (!qword_1001E2B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B50);
  }
  return result;
}

unint64_t sub_1000920A0()
{
  unint64_t result = qword_1001E2B58;
  if (!qword_1001E2B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B58);
  }
  return result;
}

unint64_t sub_1000920F4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C13D0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100092140(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v3;
  *(void *)(v1 + 88) = *(void *)(a1 + 112);
  *(unsigned char *)(v1 + 96) = 0;
  *(unsigned char *)(v1 + 145) = *(unsigned __int8 *)(a1 + 104) > 1u;
  *(void *)(v1 + 152) = String.count.getter();
  *(unsigned char *)(v1 + 160) = 0;
  sub_100059F98(a1 + 16, (uint64_t)v7, &qword_1001E2CA8);
  sub_100059F98((uint64_t)v7, v1 + 168, &qword_1001E2CA8);
  sub_10008A4F8((uint64_t)v7);
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + 184) = (*(unsigned char *)(a1 + 56) & 1) == 0;
  if (*(unsigned char *)(a1 + 172)) {
    char v6 = 2;
  }
  else {
    char v6 = 0;
  }
  *(unsigned char *)(v1 + 113) = v6;
  *(unsigned char *)(v1 + 146) = 2 - *(unsigned char *)(a1 + 169);
  return result;
}

uint64_t sub_10009222C(char a1)
{
  uint64_t result = 0x707954746E657665;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x746C75736572;
      goto LABEL_12;
    case 2:
      return 0x446572756C696166;
    case 3:
      return 0x546572756C696166;
    case 4:
      return 0x726F7774654E6461;
    case 5:
      return 0x6D6954746E657665;
    case 6:
      return 0x4E646C697542736FLL;
    case 7:
      return 0x657079546461;
    case 8:
      uint64_t v3 = 0x656C646E7562;
      goto LABEL_12;
    case 9:
    case 22:
      return 0xD000000000000017;
    case 10:
      return 0x7463617265746E69;
    case 11:
      uint64_t v3 = 0x68636E75616CLL;
LABEL_12:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7954000000000000;
      break;
    case 12:
      uint64_t result = 0x6B63616274736F70;
      break;
    case 13:
      uint64_t result = 0x65636E6575716573;
      break;
    case 14:
      uint64_t result = 0x756F437972746572;
      break;
    case 15:
      uint64_t result = 0x74616E6974736564;
      break;
    case 16:
      uint64_t result = 0x65736E6F70736572;
      break;
    case 17:
      uint64_t result = 0x4474736575716572;
      break;
    case 18:
      uint64_t result = 0x7475626972747461;
      break;
    case 19:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 20:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 21:
      uint64_t result = 0x6C7074656B72616DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100092538(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E2C10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000975F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  BYTE6(v10) = *v3;
  BYTE5(v10) = 0;
  sub_100097938();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_100059F98((uint64_t)(v3 + 1), (uint64_t)&v18, &qword_1001E2C20);
    sub_100059F98((uint64_t)&v18, (uint64_t)&v10 + 6, &qword_1001E2C20);
    BYTE5(v10) = 1;
    sub_10009798C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    BYTE6(v10) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    BYTE6(v10) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    BYTE6(v10) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    BYTE6(v10) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    BYTE6(v10) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 80), (uint64_t)&v17, &qword_1001E2C30);
    sub_100059F98((uint64_t)&v17, (uint64_t)&v10 + 6, &qword_1001E2C30);
    BYTE5(v10) = 7;
    sub_1000979E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 81), (uint64_t)&v16, &qword_1001E2C40);
    sub_100059F98((uint64_t)&v16, (uint64_t)&v10 + 6, &qword_1001E2C40);
    BYTE5(v10) = 8;
    sub_100097A34();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    BYTE6(v10) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 83), (uint64_t)&v15, &qword_1001E2C50);
    sub_100059F98((uint64_t)&v15, (uint64_t)&v10 + 6, &qword_1001E2C50);
    BYTE5(v10) = 10;
    sub_1000462F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 84), (uint64_t)&v14, &qword_1001E2C58);
    sub_100059F98((uint64_t)&v14, (uint64_t)&v10 + 6, &qword_1001E2C58);
    BYTE5(v10) = 11;
    sub_100097A88();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 85), (uint64_t)&v13, &qword_1001E2C68);
    sub_100059F98((uint64_t)&v13, (uint64_t)&v10 + 6, &qword_1001E2C68);
    BYTE5(v10) = 12;
    sub_100097ADC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    BYTE6(v10) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    BYTE6(v10) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 113), (uint64_t)&v12, &qword_1001E2C78);
    sub_100059F98((uint64_t)&v12, (uint64_t)&v10 + 6, &qword_1001E2C78);
    BYTE5(v10) = 15;
    sub_100097B30();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    BYTE6(v10) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    BYTE6(v10) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 145), (uint64_t)&v11, &qword_1001E2C88);
    sub_100059F98((uint64_t)&v11, (uint64_t)&v10 + 6, &qword_1001E2C88);
    BYTE5(v10) = 18;
    sub_100097B84();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 146), (uint64_t)&v10 + 7, &qword_1001E2C98);
    sub_100059F98((uint64_t)&v10 + 7, (uint64_t)&v10 + 6, &qword_1001E2C98);
    BYTE5(v10) = 19;
    sub_100097BD8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    BYTE6(v10) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    BYTE6(v10) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    BYTE6(v10) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100092C04(unsigned __int8 *a1, char *a2)
{
  return sub_1001084B0(*a1, *a2);
}

Swift::Int sub_100092C10()
{
  return sub_10010A87C();
}

uint64_t sub_100092C1C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100092D50()
{
  return sub_10010A87C();
}

unint64_t sub_100092D58@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100095F0C(*a1);
  *a2 = result;
  return result;
}

void sub_100092D88(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEC0000006E6F6973;
  uint64_t v3 = 0x736572706D496461;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED00006E6F697461;
      uint64_t v3 = 0x64696C6156706174;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x746C69466B6E696CLL;
      *(void *)(a1 + 8) = 0xEA00000000007265;
      break;
    case 3:
      *(void *)a1 = 0x68636E75616CLL;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 4:
      strcpy((char *)a1, "adConversion");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 5:
      *(void *)a1 = 0x74736575716572;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    case 6:
      strcpy((char *)a1, "storyComplete");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_100092EA0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100092F00()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100092F50(unsigned __int8 *a1, char *a2)
{
  return sub_10010809C(*a1, *a2);
}

Swift::Int sub_100092F5C()
{
  return sub_10010A9C4();
}

uint64_t sub_100092F68()
{
  return sub_10010A4CC();
}

Swift::Int sub_100092F70()
{
  return sub_10010A9C4();
}

unint64_t sub_100092F78@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100095F58(*a1);
  *a2 = result;
  return result;
}

void sub_100092FA8(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE900000000000064;
  uint64_t v3 = 0x657A696C616E6966;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x64657463656A6572;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x657461647075;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 3:
      *(void *)a1 = 0x6572756C696166;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    case 4:
      strcpy((char *)a1, "transmission");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 5:
      strcpy((char *)a1, "tokenReceived");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 6:
      strcpy((char *)a1, "delayedReceipt");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 7:
      *(void *)a1 = 0x73736563637573;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1000930E4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100093144()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100093194(char *a1, char *a2)
{
  return sub_100108408(*a1, *a2);
}

Swift::Int sub_1000931A0()
{
  return Hasher._finalize()();
}

uint64_t sub_100093224()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100093294()
{
  return Hasher._finalize()();
}

uint64_t sub_100093314@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1001C15F8;
  return sub_10001AC54(v2, a1, a2);
}

void sub_100093320(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7368801;
  if (*v1) {
    uint64_t v2 = 0x6C7074656B72616DLL;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB00000000656361;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100093360()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000933C0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100093410(char *a1, char *a2)
{
  return sub_100108368(*a1, *a2);
}

Swift::Int sub_10009341C()
{
  return Hasher._finalize()();
}

uint64_t sub_100093498()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100093500()
{
  return Hasher._finalize()();
}

uint64_t sub_100093578@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1001C1648;
  return sub_10001AC54(v2, a1, a2);
}

void sub_100093584(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7107189;
  if (*v1) {
    uint64_t v2 = 0x647261646E617473;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000935BC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10009361C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10009366C(unsigned __int8 *a1, char *a2)
{
  return sub_100107C68(*a1, *a2);
}

Swift::Int sub_100093678()
{
  return Hasher._finalize()();
}

uint64_t sub_100093750()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100093810()
{
  return Hasher._finalize()();
}

unint64_t sub_1000938E4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100095FA4(*a1);
  *a2 = result;
  return result;
}

void sub_100093914(uint64_t a1@<X8>)
{
  uint64_t v2 = 7368801;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 6448503;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6F72685477656976;
      *(void *)(a1 + 8) = 0xEB00000000686775;
      break;
    case 3:
      strcpy((char *)a1, "clickThrough");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = 0xE300000000000000;
      break;
  }
}

uint64_t sub_1000939AC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100093A0C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100093A5C(char *a1, char *a2)
{
  return sub_100108728(*a1, *a2);
}

Swift::Int sub_100093A68()
{
  return Hasher._finalize()();
}

uint64_t sub_100093AF4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100093B6C()
{
  return Hasher._finalize()();
}

uint64_t sub_100093BF4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1001C1718;
  return sub_10001AC54(v2, a1, a2);
}

void sub_100093C00(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6C6C6174736E69;
  if (*v1) {
    uint64_t v2 = 0x656761676E656572;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xEC000000746E656DLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100093C48()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100093CA8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100093CF8(char *a1, char *a2)
{
  return sub_100107ED8(*a1, *a2);
}

Swift::Int sub_100093D04()
{
  return Hasher._finalize()();
}

uint64_t sub_100093D88()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100093DF8()
{
  return Hasher._finalize()();
}

uint64_t sub_100093E78@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1001C1768;
  return sub_10001AC54(v2, a1, a2);
}

void sub_100093E84(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x676E69646E6570;
  if (*v1) {
    uint64_t v2 = 0x64657A696C616572;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100093EC4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100093F24()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100093F74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100107F80(*a1, *a2);
}

Swift::Int sub_100093F80()
{
  return Hasher._finalize()();
}

uint64_t sub_100094028()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000940BC()
{
  return Hasher._finalize()();
}

unint64_t sub_100094160@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001C17B8;
  unint64_t result = sub_10001D488(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100094198(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE90000000000006BLL;
  int v3 = *v1;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x656372656D6D6F63;
  if (v3 != 1)
  {
    uint64_t v5 = 0x65706F6C65766564;
    unint64_t v4 = 0xE900000000000072;
  }
  BOOL v6 = v3 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x726F7774654E6461;
  }
  if (!v6) {
    unint64_t v2 = v4;
  }
  *a1 = v7;
  a1[1] = v2;
}

uint64_t sub_1000941FC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10009425C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000942AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100107DF0(*a1, *a2);
}

Swift::Int sub_1000942B8()
{
  return Hasher._finalize()();
}

uint64_t sub_100094348()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000943C4()
{
  return Hasher._finalize()();
}

unint64_t sub_100094450@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001C1820;
  unint64_t result = sub_10001D488(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100094488(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701734758;
  unint64_t v3 = 0xE600000000000000;
  if (*v1 == 1) {
    uint64_t v2 = 0x657372616F63;
  }
  else {
    unint64_t v3 = 0xE400000000000000;
  }
  if (*v1)
  {
    unint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 1701736302;
    unint64_t v4 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v4;
}

uint64_t sub_1000944D4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100094534()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100094584()
{
  return sub_10009222C(*v0);
}

uint64_t sub_10009458C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100095FF0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000945B4(unsigned char *a1@<X8>)
{
  *a1 = 23;
}

uint64_t sub_1000945C0(uint64_t a1)
{
  unint64_t v2 = sub_1000975F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000945FC(uint64_t a1)
{
  unint64_t v2 = sub_1000975F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100094638@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100096A50(a1, v10);
  if (!v2)
  {
    long long v5 = v18;
    a2[8] = v17;
    a2[9] = v5;
    a2[10] = v19[0];
    *(_OWORD *)((char *)a2 + 169) = *(_OWORD *)((char *)v19 + 9);
    long long v6 = v14;
    a2[4] = v13;
    a2[5] = v6;
    long long v7 = v16;
    a2[6] = v15;
    a2[7] = v7;
    long long v8 = v10[1];
    *a2 = v10[0];
    a2[1] = v8;
    double result = *(double *)&v11;
    long long v9 = v12;
    a2[2] = v11;
    a2[3] = v9;
  }
  return result;
}

uint64_t sub_1000946A4(void *a1)
{
  return sub_100092538(a1);
}

uint64_t sub_100094708(uint64_t a1)
{
  uint64_t v8 = a1;
  swift_errorRetain();
  sub_100012960(&qword_1001E12E8);
  sub_100012960(&qword_1001E2B68);
  if (swift_dynamicCast())
  {
    sub_100012D60(v6, (uint64_t)v9);
    uint64_t v1 = v10;
    sub_100012D78(v9, v10);
    uint64_t v2 = sub_10006ED4C(v1);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v9);
  }
  else
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    sub_1000952AC((uint64_t)v6);
    unint64_t v3 = (void *)_convertErrorToNSError(_:)();
    id v4 = [v3 domain];
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v9[0] = [v3 code];
    dispatch thunk of CustomStringConvertible.description.getter();
  }
  return v2;
}

double sub_10009485C@<D0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, _OWORD *a9@<X8>, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,uint64_t a24,unsigned __int8 a25,uint64_t a26,uint64_t a27,unsigned __int8 a28)
{
  int v95 = a7;
  int v96 = a8;
  int v94 = a6;
  uint64_t v91 = a4;
  int v87 = a1;
  int v88 = a2;
  char v67 = a9;
  int v78 = a28;
  uint64_t v77 = a27;
  uint64_t v76 = a26;
  int v72 = a25;
  uint64_t v75 = a24;
  int v74 = a23;
  int v73 = a22;
  int v71 = a21;
  uint64_t v93 = a20;
  int v70 = a19;
  uint64_t v92 = a18;
  int v90 = a17;
  int v69 = a16;
  uint64_t v89 = a15;
  int v68 = a14;
  uint64_t v86 = a13;
  int v85 = a12;
  int v84 = a11;
  int v83 = a10;
  uint64_t v30 = type metadata accessor for Calendar.Component();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v64 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v38 = sub_100094708(a3);
    uint64_t v81 = v39;
    uint64_t v82 = v38;
    uint64_t v79 = v41;
    uint64_t v80 = v40;
  }
  else
  {
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
  }
  swift_bridgeObjectRetain();
  static Date.now.getter();
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v33, enum case for Calendar.Component.hour(_:), v30);
  id v42 = sub_1000298BC((uint64_t)v37, (uint64_t)v33);
  uint64_t v66 = a5;
  char v44 = v43;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
  if (v44) {
    id v45 = 0;
  }
  else {
    id v45 = v42;
  }
  id v65 = v45;
  id v46 = [self buildVersion];
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v47;
  uint64_t v49 = v48;
  swift_errorRelease();

  uint64_t v50 = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v97) = v87;
  BYTE1(v97) = v88;
  *((void *)&v97 + 1) = v82;
  *(void *)&long long v98 = v81;
  *((void *)&v98 + 1) = v80;
  *(void *)&long long v99 = v79;
  uint64_t v51 = v66;
  *((void *)&v99 + 1) = v91;
  *(void *)&long long v100 = v66;
  *((void *)&v100 + 1) = v45;
  *(void *)&long long v101 = v47;
  *((void *)&v101 + 1) = v49;
  LOBYTE(v102) = v94;
  BYTE1(v102) = v95;
  BYTE2(v102) = v83;
  BYTE3(v102) = v96;
  BYTE4(v102) = v84;
  BYTE5(v102) = v85;
  *((void *)&v102 + 1) = v86;
  v68 &= 1u;
  LOBYTE(v103) = v68;
  *((void *)&v103 + 1) = v89;
  v69 &= 1u;
  LOBYTE(v104) = v69;
  BYTE1(v104) = v90;
  *((void *)&v104 + 1) = v92;
  v70 &= 1u;
  LOBYTE(v105) = v70;
  *((void *)&v105 + 1) = v93;
  v71 &= 1u;
  LOBYTE(v106) = v71;
  char v52 = v73;
  LOBYTE(v47) = v74;
  BYTE1(v106) = v73;
  BYTE2(v106) = v74;
  uint64_t v54 = v75;
  uint64_t v53 = v76;
  *((void *)&v106 + 1) = v75;
  char v55 = v72 & 1;
  LOBYTE(v107[0]) = v72 & 1;
  *((void *)&v107[0] + 1) = v76;
  *(void *)&v107[1] = v50;
  char v56 = v78;
  BYTE8(v107[1]) = v78;
  sub_10001547C((uint64_t)&v97);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v108[0] = v87;
  v108[1] = v88;
  uint64_t v109 = v82;
  uint64_t v110 = v81;
  uint64_t v111 = v80;
  uint64_t v112 = v79;
  uint64_t v113 = v91;
  uint64_t v114 = v51;
  id v115 = v65;
  uint64_t v116 = v64;
  uint64_t v117 = v49;
  char v118 = v94;
  char v119 = v95;
  char v120 = v83;
  char v121 = v96;
  char v122 = v84;
  char v123 = v85;
  uint64_t v124 = v86;
  char v125 = v68;
  uint64_t v126 = v89;
  char v127 = v69;
  char v128 = v90;
  uint64_t v129 = v92;
  char v130 = v70;
  uint64_t v131 = v93;
  char v132 = v71;
  char v133 = v52;
  char v134 = v47;
  uint64_t v135 = v54;
  char v136 = v55;
  uint64_t v137 = v53;
  uint64_t v138 = v50;
  char v139 = v56;
  sub_100036824((uint64_t)v108);
  long long v57 = v106;
  double v58 = v67;
  v67[8] = v105;
  v58[9] = v57;
  v58[10] = v107[0];
  *(_OWORD *)((char *)v58 + 169) = *(_OWORD *)((char *)v107 + 9);
  long long v59 = v102;
  v58[4] = v101;
  v58[5] = v59;
  long long v60 = v104;
  v58[6] = v103;
  v58[7] = v60;
  long long v61 = v98;
  *double v58 = v97;
  v58[1] = v61;
  double result = *(double *)&v99;
  long long v63 = v100;
  v58[2] = v99;
  v58[3] = v63;
  return result;
}

double sub_100094DC0@<D0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X8>)
{
  id v42 = a2;
  uint64_t v3 = type metadata accessor for Calendar.Component();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *((void *)&v44 + 1) = type metadata accessor for Date();
  uint64_t v7 = *(void *)(*((void *)&v44 + 1) - 8);
  __chkstk_darwin(*((void *)&v44 + 1));
  long long v9 = &v37[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v10 = *a1;
  int v49 = a1[1];
  int v50 = v10;
  uint64_t v11 = *((void *)a1 + 7);
  uint64_t v48 = *((void *)a1 + 6);
  sub_100059F98((uint64_t)(a1 + 64), (uint64_t)v86, &qword_1001E2B60);
  sub_100059F98((uint64_t)v86, (uint64_t)&v87, &qword_1001E2B60);
  uint64_t v45 = v11;
  if (v88 == 1)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v47 = 0;
    uint64_t v43 = 0;
  }
  else
  {
    v62[0] = v87;
    swift_bridgeObjectRetain_n();
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = v12;
  }
  uint64_t v13 = *((void *)a1 + 2);
  uint64_t v46 = *((void *)a1 + 1);
  *(void *)&long long v44 = v13;
  swift_bridgeObjectRetain_n();
  static Date.now.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, enum case for Calendar.Component.hour(_:), v3);
  id v14 = sub_1000298BC((uint64_t)v9, (uint64_t)v6);
  char v16 = v15;
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(unsigned char *, void))(v7 + 8))(v9, *((void *)&v44 + 1));
  if (v16) {
    id v17 = 0;
  }
  else {
    id v17 = v14;
  }
  *((void *)&v44 + 1) = v17;
  id v18 = [self buildVersion];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v19;
  uint64_t v21 = v20;

  swift_bridgeObjectRetain();
  sub_100095274((uint64_t)a1);
  int v22 = a1[24];
  unsigned __int8 v23 = a1[25];
  int v39 = v23;
  int v40 = v22;
  LOBYTE(v18) = a1[41];
  int v38 = v18;
  unsigned __int8 v24 = a1[26];
  uint64_t v25 = *((void *)a1 + 4);
  unsigned __int8 v26 = a1[40];
  swift_bridgeObjectRelease();
  LOBYTE(v51) = v50;
  BYTE1(v51) = v49;
  *((void *)&v51 + 1) = v48;
  *(void *)&long long v52 = v45;
  uint64_t v27 = v43;
  *((void *)&v52 + 1) = v47;
  *(void *)&long long v53 = v43;
  *((void *)&v53 + 1) = v46;
  long long v54 = v44;
  *(void *)&long long v55 = v19;
  *((void *)&v55 + 1) = v21;
  LOBYTE(v56) = v22;
  *(_WORD *)((char *)&v56 + 1) = 514;
  BYTE3(v56) = v23;
  BYTE4(v56) = 2;
  BYTE5(v56) = (_BYTE)v18;
  *((void *)&v56 + 1) = 0;
  LOBYTE(v57) = 1;
  *((void *)&v57 + 1) = 0;
  LOBYTE(v58) = 1;
  BYTE1(v58) = v24;
  *((void *)&v58 + 1) = v25;
  LOBYTE(v59) = v26;
  *((void *)&v59 + 1) = 0;
  LOBYTE(v60) = 1;
  *(_WORD *)((char *)&v60 + 1) = 768;
  *((void *)&v60 + 1) = 0;
  LOBYTE(v61[0]) = 1;
  *((void *)&v61[0] + 1) = 0;
  *(void *)&v61[1] = 0;
  BYTE8(v61[1]) = 2;
  swift_bridgeObjectRetain();
  sub_10001547C((uint64_t)&v51);
  uint64_t v28 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v29 = v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v62[0]) = v50;
  BYTE1(v62[0]) = v49;
  v62[1] = v48;
  long long v62[2] = v28;
  v62[3] = v47;
  v62[4] = v27;
  v62[5] = v46;
  unsigned long long v63 = __PAIR128__(*((unint64_t *)&v44 + 1), v29);
  uint64_t v64 = v41;
  uint64_t v65 = v21;
  char v66 = v40;
  __int16 v67 = 514;
  char v68 = v39;
  char v69 = 2;
  char v70 = v38;
  uint64_t v71 = 0;
  char v72 = 1;
  uint64_t v73 = 0;
  char v74 = 1;
  unsigned __int8 v75 = v24;
  uint64_t v76 = v25;
  unsigned __int8 v77 = v26;
  uint64_t v78 = 0;
  char v79 = 1;
  __int16 v80 = 768;
  uint64_t v81 = 0;
  char v82 = 1;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  char v85 = 2;
  sub_100036824((uint64_t)v62);
  long long v30 = v60;
  uint64_t v31 = v42;
  v42[8] = v59;
  v31[9] = v30;
  v31[10] = v61[0];
  *(_OWORD *)((char *)v31 + 169) = *(_OWORD *)((char *)v61 + 9);
  long long v32 = v56;
  unsigned char v31[4] = v55;
  v31[5] = v32;
  long long v33 = v58;
  v31[6] = v57;
  v31[7] = v33;
  long long v34 = v52;
  *uint64_t v31 = v51;
  v31[1] = v34;
  double result = *(double *)&v53;
  long long v36 = v54;
  void v31[2] = v53;
  v31[3] = v36;
  return result;
}

uint64_t sub_100095274(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000952AC(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E2B70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for SnoutEvent.PostbackType()
{
  return &type metadata for SnoutEvent.PostbackType;
}

ValueMetadata *type metadata accessor for SnoutEvent.ConversionValueGranularity()
{
  return &type metadata for SnoutEvent.ConversionValueGranularity;
}

ValueMetadata *type metadata accessor for SnoutEvent.AttributionType()
{
  return &type metadata for SnoutEvent.AttributionType;
}

unsigned char *_s20AttributionKitDaemon10SnoutEventV11DestinationOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100095410);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEvent.Destination()
{
  return &type metadata for SnoutEvent.Destination;
}

ValueMetadata *type metadata accessor for SnoutEvent.LaunchType()
{
  return &type metadata for SnoutEvent.LaunchType;
}

unsigned char *_s20AttributionKitDaemon10SnoutEventV10BundleTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100095524);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEvent.BundleType()
{
  return &type metadata for SnoutEvent.BundleType;
}

unsigned char *storeEnumTagSinglePayload for SnoutEvent.AdType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *double result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100095628);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEvent.AdType()
{
  return &type metadata for SnoutEvent.AdType;
}

unsigned char *storeEnumTagSinglePayload for SnoutEvent.ResultType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *double result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009572CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEvent.ResultType()
{
  return &type metadata for SnoutEvent.ResultType;
}

uint64_t destroy for SnoutEvent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SnoutEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v6;
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v7 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v7;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SnoutEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  uint64_t v4 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v4;
  uint64_t v5 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v5;
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  uint64_t v6 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v6;
  uint64_t v7 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v7;
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  uint64_t v8 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return a1;
}

__n128 initializeWithTake for SnoutEvent(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for SnoutEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v7;
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  uint64_t v8 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for SnoutEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 185)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SnoutEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 184) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 185) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 185) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEvent()
{
  return &type metadata for SnoutEvent;
}

unint64_t sub_100095C50()
{
  unint64_t result = qword_1001E2B78;
  if (!qword_1001E2B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B78);
  }
  return result;
}

unint64_t sub_100095CA8()
{
  unint64_t result = qword_1001E2B80;
  if (!qword_1001E2B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B80);
  }
  return result;
}

unint64_t sub_100095D00()
{
  unint64_t result = qword_1001E2B88;
  if (!qword_1001E2B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B88);
  }
  return result;
}

unint64_t sub_100095D58()
{
  unint64_t result = qword_1001E2B90;
  if (!qword_1001E2B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B90);
  }
  return result;
}

unint64_t sub_100095DB0()
{
  unint64_t result = qword_1001E2B98;
  if (!qword_1001E2B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2B98);
  }
  return result;
}

unint64_t sub_100095E08()
{
  unint64_t result = qword_1001E2BA0;
  if (!qword_1001E2BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BA0);
  }
  return result;
}

unint64_t sub_100095E60()
{
  unint64_t result = qword_1001E2BA8;
  if (!qword_1001E2BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BA8);
  }
  return result;
}

unint64_t sub_100095EB8()
{
  unint64_t result = qword_1001E2BB0;
  if (!qword_1001E2BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BB0);
  }
  return result;
}

unint64_t sub_100095F0C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1450, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

unint64_t sub_100095F58(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1518, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

unint64_t sub_100095FA4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1698, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100095FF0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7954746C75736572 && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x446572756C696166 && a2 == 0xED00006E69616D6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x546572756C696166 && a2 == 0xEB00000000657079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F7774654E6461 && a2 == 0xEB0000000044496BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D6954746E657665 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4E646C697542736FLL && a2 == 0xED00007265626D75 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x657079546461 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7954656C646E7562 && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001001851A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7463617265746E69 && a2 == 0xEF657079546E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x795468636E75616CLL && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6B63616274736F70 && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x65636E6575716573 && a2 == 0xED00007865646E49 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x756F437972746572 && a2 == 0xEA0000000000746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xEC00000065646F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x4474736575716572 && a2 == 0xEF6E6F6974617275 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEF657079546E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100185220 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100185240 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6C7074656B72616DLL && a2 == 0xEB00000000656361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100186DA0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 22;
    }
    else {
      return 23;
    }
  }
}

uint64_t sub_100096A50@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E2BB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v138 = 1;
  char v133 = 1;
  char v128 = 1;
  uint64_t v9 = a1[3];
  int v141 = a1;
  sub_100012D78(a1, v9);
  sub_1000975F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v141);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v73 = v6;
    uint64_t v71 = a2;
    LOBYTE(v74) = 0;
    sub_100097644();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v10 = v85[0];
    LOBYTE(v74) = 1;
    sub_100097698();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v11 = v85[0];
    v85[0] = 2;
    uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v85[0] = 3;
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v66 = v10;
    uint64_t v67 = v14;
    int v68 = v11;
    uint64_t v69 = v13;
    v85[0] = 4;
    uint64_t v16 = v15;
    swift_bridgeObjectRetain();
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v19 = v18;
    uint64_t v64 = v17;
    uint64_t v65 = v16;
    v85[0] = 5;
    swift_bridgeObjectRetain();
    uint64_t v63 = KeyedDecodingContainer.decode(_:forKey:)();
    v85[0] = 6;
    uint64_t v62 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v74) = 7;
    uint64_t v21 = v20;
    sub_1000976EC();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v72 = v21;
    LODWORD(v21) = v85[0];
    LOBYTE(v74) = 8;
    sub_100097740();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v60 = v85[0];
    int v61 = v21;
    v85[0] = 9;
    int v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v74) = 10;
    sub_10004732C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v58 = v85[0];
    LOBYTE(v74) = 11;
    sub_100097794();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v57 = v85[0];
    LOBYTE(v74) = 12;
    sub_1000977E8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v55 = v85[0];
    v85[0] = 13;
    uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v56 = v22;
    char v138 = v22 & 1;
    v85[0] = 14;
    uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v53 = v23;
    char v136 = v23 & 1;
    LOBYTE(v74) = 15;
    sub_10009783C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v50 = v85[0];
    v85[0] = 16;
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v51 = v24;
    char v133 = v24 & 1;
    v85[0] = 17;
    uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v48 = v25;
    char v131 = v25 & 1;
    LOBYTE(v74) = 18;
    sub_100097890();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v46 = v85[0];
    LOBYTE(v74) = 19;
    sub_1000978E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v44 = v85[0];
    v85[0] = 20;
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v45 = v26;
    char v128 = v26 & 1;
    v85[0] = 21;
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v28 = v27;
    char v126 = 22;
    swift_bridgeObjectRetain();
    int v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v8, v5);
    LOBYTE(v80) = v56 & 1;
    LOBYTE(v81) = v53 & 1;
    LOBYTE(v82) = v51 & 1;
    LOBYTE(v83) = v48 & 1;
    LOBYTE(v84[0]) = v45 & 1;
    LOBYTE(v16) = v66;
    LOBYTE(v74) = v66;
    BYTE1(v74) = v68;
    uint64_t v29 = v69;
    *((void *)&v74 + 1) = v70;
    *(void *)&long long v75 = v69;
    uint64_t v30 = v65;
    *((void *)&v75 + 1) = v67;
    *(void *)&long long v76 = v65;
    *((void *)&v76 + 1) = v64;
    *(void *)&long long v77 = v19;
    *((void *)&v77 + 1) = v63;
    *(void *)&long long v78 = v62;
    uint64_t v31 = v72;
    *((void *)&v78 + 1) = v72;
    LOBYTE(v79) = v61;
    BYTE1(v79) = v60;
    BYTE2(v79) = v59;
    BYTE3(v79) = v58;
    BYTE4(v79) = v57;
    BYTE5(v79) = v55;
    *((void *)&v79 + 1) = v54;
    uint64_t v32 = v52;
    *((void *)&v80 + 1) = v52;
    BYTE1(v81) = v50;
    *((void *)&v81 + 1) = v49;
    *((void *)&v82 + 1) = v47;
    BYTE1(v83) = v46;
    BYTE2(v83) = v44;
    *((void *)&v83 + 1) = v43;
    *((void *)&v84[0] + 1) = v42;
    *(void *)&v84[1] = v28;
    BYTE8(v84[1]) = v41;
    sub_10001547C((uint64_t)&v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v141);
    v85[0] = v16;
    v85[1] = v68;
    int v86 = v139;
    __int16 v87 = v140;
    uint64_t v88 = v70;
    uint64_t v89 = v29;
    uint64_t v90 = v67;
    uint64_t v91 = v30;
    uint64_t v92 = v64;
    uint64_t v93 = v19;
    uint64_t v94 = v63;
    uint64_t v95 = v62;
    uint64_t v96 = v31;
    char v97 = v61;
    char v98 = v60;
    char v99 = v59;
    char v100 = v58;
    char v101 = v57;
    char v102 = v55;
    uint64_t v103 = v54;
    char v104 = v138;
    *(_DWORD *)long long v105 = *(_DWORD *)v137;
    *(_DWORD *)&v105[3] = *(_DWORD *)&v137[3];
    uint64_t v106 = v32;
    char v107 = v136;
    char v108 = v50;
    int v109 = v134;
    __int16 v110 = v135;
    uint64_t v111 = v49;
    char v112 = v133;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v132[3];
    *(_DWORD *)uint64_t v113 = *(_DWORD *)v132;
    uint64_t v114 = v47;
    char v115 = v131;
    char v116 = v46;
    char v117 = v44;
    char v119 = v130;
    int v118 = v129;
    uint64_t v120 = v43;
    char v121 = v128;
    *(_DWORD *)char v122 = *(_DWORD *)v127;
    *(_DWORD *)&v122[3] = *(_DWORD *)&v127[3];
    uint64_t v123 = v42;
    uint64_t v124 = v28;
    char v125 = v41;
    uint64_t result = sub_100036824((uint64_t)v85);
    long long v34 = v83;
    uint64_t v35 = v71;
    v71[8] = v82;
    v35[9] = v34;
    v35[10] = v84[0];
    *(_OWORD *)((char *)v35 + 169) = *(_OWORD *)((char *)v84 + 9);
    long long v36 = v79;
    v35[4] = v78;
    v35[5] = v36;
    long long v37 = v81;
    v35[6] = v80;
    unsigned char v35[7] = v37;
    long long v38 = v75;
    *uint64_t v35 = v74;
    v35[1] = v38;
    long long v39 = v77;
    v35[2] = v76;
    v35[3] = v39;
  }
  return result;
}

unint64_t sub_1000975F0()
{
  unint64_t result = qword_1001E2BC0;
  if (!qword_1001E2BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BC0);
  }
  return result;
}

unint64_t sub_100097644()
{
  unint64_t result = qword_1001E2BC8;
  if (!qword_1001E2BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BC8);
  }
  return result;
}

unint64_t sub_100097698()
{
  unint64_t result = qword_1001E2BD0;
  if (!qword_1001E2BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BD0);
  }
  return result;
}

unint64_t sub_1000976EC()
{
  unint64_t result = qword_1001E2BD8;
  if (!qword_1001E2BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BD8);
  }
  return result;
}

unint64_t sub_100097740()
{
  unint64_t result = qword_1001E2BE0;
  if (!qword_1001E2BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BE0);
  }
  return result;
}

unint64_t sub_100097794()
{
  unint64_t result = qword_1001E2BE8;
  if (!qword_1001E2BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BE8);
  }
  return result;
}

unint64_t sub_1000977E8()
{
  unint64_t result = qword_1001E2BF0;
  if (!qword_1001E2BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BF0);
  }
  return result;
}

unint64_t sub_10009783C()
{
  unint64_t result = qword_1001E2BF8;
  if (!qword_1001E2BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2BF8);
  }
  return result;
}

unint64_t sub_100097890()
{
  unint64_t result = qword_1001E2C00;
  if (!qword_1001E2C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C00);
  }
  return result;
}

unint64_t sub_1000978E4()
{
  unint64_t result = qword_1001E2C08;
  if (!qword_1001E2C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C08);
  }
  return result;
}

unint64_t sub_100097938()
{
  unint64_t result = qword_1001E2C18;
  if (!qword_1001E2C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C18);
  }
  return result;
}

unint64_t sub_10009798C()
{
  unint64_t result = qword_1001E2C28;
  if (!qword_1001E2C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C28);
  }
  return result;
}

unint64_t sub_1000979E0()
{
  unint64_t result = qword_1001E2C38;
  if (!qword_1001E2C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C38);
  }
  return result;
}

unint64_t sub_100097A34()
{
  unint64_t result = qword_1001E2C48;
  if (!qword_1001E2C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C48);
  }
  return result;
}

unint64_t sub_100097A88()
{
  unint64_t result = qword_1001E2C60;
  if (!qword_1001E2C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C60);
  }
  return result;
}

unint64_t sub_100097ADC()
{
  unint64_t result = qword_1001E2C70;
  if (!qword_1001E2C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C70);
  }
  return result;
}

unint64_t sub_100097B30()
{
  unint64_t result = qword_1001E2C80;
  if (!qword_1001E2C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C80);
  }
  return result;
}

unint64_t sub_100097B84()
{
  unint64_t result = qword_1001E2C90;
  if (!qword_1001E2C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2C90);
  }
  return result;
}

unint64_t sub_100097BD8()
{
  unint64_t result = qword_1001E2CA0;
  if (!qword_1001E2CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CA0);
  }
  return result;
}

unint64_t sub_100097C2C()
{
  unint64_t result = qword_1001E2CB0;
  if (!qword_1001E2CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CB0);
  }
  return result;
}

unint64_t sub_100097C80()
{
  unint64_t result = qword_1001E2CB8;
  if (!qword_1001E2CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CB8);
  }
  return result;
}

unint64_t sub_100097CD4()
{
  unint64_t result = qword_1001E2CC0;
  if (!qword_1001E2CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CC0);
  }
  return result;
}

unint64_t sub_100097D28()
{
  unint64_t result = qword_1001E2CC8;
  if (!qword_1001E2CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CC8);
  }
  return result;
}

unint64_t sub_100097D7C()
{
  unint64_t result = qword_1001E2CD0;
  if (!qword_1001E2CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CD0);
  }
  return result;
}

unint64_t sub_100097DD0()
{
  unint64_t result = qword_1001E2CD8;
  if (!qword_1001E2CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CD8);
  }
  return result;
}

unint64_t sub_100097E24()
{
  unint64_t result = qword_1001E2CE0;
  if (!qword_1001E2CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CE0);
  }
  return result;
}

unint64_t sub_100097E78()
{
  unint64_t result = qword_1001E2CE8;
  if (!qword_1001E2CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CE8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SnoutEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEA) {
    goto LABEL_17;
  }
  if (a2 + 22 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 22) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 22;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v8 = v6 - 23;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SnoutEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE9)
  {
    unsigned int v6 = ((a2 - 234) >> 8) + 1;
    *unint64_t result = a2 + 22;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100098028);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 22;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEvent.CodingKeys()
{
  return &type metadata for SnoutEvent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SnoutEvent.EventType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009812CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEvent.EventType()
{
  return &type metadata for SnoutEvent.EventType;
}

unint64_t sub_100098168()
{
  unint64_t result = qword_1001E2CF0;
  if (!qword_1001E2CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CF0);
  }
  return result;
}

unint64_t sub_1000981C0()
{
  unint64_t result = qword_1001E2CF8;
  if (!qword_1001E2CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2CF8);
  }
  return result;
}

unint64_t sub_100098218()
{
  unint64_t result = qword_1001E2D00;
  if (!qword_1001E2D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D00);
  }
  return result;
}

unint64_t sub_100098270()
{
  unint64_t result = qword_1001E2D08;
  if (!qword_1001E2D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D08);
  }
  return result;
}

unint64_t sub_1000982C4()
{
  unint64_t result = qword_1001E2D10;
  if (!qword_1001E2D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D10);
  }
  return result;
}

uint64_t sub_100098318(char a1)
{
  uint64_t result = 0x6369706F74;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000014;
      break;
    case 2:
      uint64_t result = 6910049;
      break;
    case 3:
      uint64_t result = 0x707954746E657665;
      break;
    case 4:
      uint64_t result = 0x4E646C697542736FLL;
      break;
    case 5:
      uint64_t v3 = 0x746C75736572;
      goto LABEL_12;
    case 6:
      uint64_t result = 0x446572756C696166;
      break;
    case 7:
      uint64_t result = 0x546572756C696166;
      break;
    case 8:
      uint64_t result = 0x726F7774654E6461;
      break;
    case 9:
      uint64_t result = 0x657079546461;
      break;
    case 10:
      uint64_t v3 = 0x656C646E7562;
LABEL_12:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7954000000000000;
      break;
    case 11:
      uint64_t result = 0xD000000000000017;
      break;
    case 12:
      uint64_t result = 0x7463617265746E69;
      break;
    case 13:
      uint64_t result = 1701869940;
      break;
    case 14:
      uint64_t result = 0x756F437972746572;
      break;
    case 15:
      uint64_t result = 0x74616E6974736564;
      break;
    case 16:
      uint64_t result = 0x65736E6F70736572;
      break;
    case 17:
      uint64_t result = 0x4474736575716572;
      break;
    case 18:
      uint64_t result = 0x7475626972747461;
      break;
    case 19:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 20:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 21:
      uint64_t result = 0x6B63616274736F70;
      break;
    case 22:
      uint64_t result = 0x65636E6575716573;
      break;
    case 23:
      uint64_t result = 0x6C7074656B72616DLL;
      break;
    case 24:
      uint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100098668(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E2D18);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_100099FF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100098B78(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_100098318(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100098318(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100098C04()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100098318(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100098C68()
{
  sub_100098318(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100098CBC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100098318(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100098D1C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10009A258();
  *a1 = result;
  return result;
}

uint64_t sub_100098D4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100098318(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100098D78()
{
  return sub_100098318(*v0);
}

uint64_t sub_100098D80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10009A258();
  *a1 = result;
  return result;
}

uint64_t sub_100098DA8(uint64_t a1)
{
  unint64_t v2 = sub_100099FF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100098DE4(uint64_t a1)
{
  unint64_t v2 = sub_100099FF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100098E20(void *a1)
{
  return sub_100098668(a1);
}

uint64_t sub_100098E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v68.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  uint64_t v6 = 0x736572706D496461;
  unint64_t v7 = 0xEC0000006E6F6973;
  switch(*(unsigned char *)a1)
  {
    case 1:
      unint64_t v7 = 0xED00006E6F697461;
      uint64_t v6 = 0x64696C6156706174;
      break;
    case 2:
      unint64_t v7 = 0xEA00000000007265;
      uint64_t v6 = 0x746C69466B6E696CLL;
      break;
    case 3:
      unint64_t v7 = 0xE600000000000000;
      uint64_t v6 = 0x68636E75616CLL;
      break;
    case 4:
      uint64_t v6 = 0x7265766E6F436461;
      break;
    case 5:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v6 = 0x74736575716572;
      break;
    case 6:
      unint64_t v7 = 0xED00006574656C70;
      uint64_t v6 = 0x6D6F4379726F7473;
      break;
    default:
      break;
  }
  uint64_t v66 = v6;
  unint64_t v67 = v7;
  unint64_t v8 = 0xE900000000000064;
  sub_100059F98(a1 + 1, (uint64_t)&v84, &qword_1001E2C20);
  sub_100059F98((uint64_t)&v84, (uint64_t)&v85, &qword_1001E2C20);
  uint64_t v9 = 0x657A696C616E6966;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  switch(v85)
  {
    case 1:
      unint64_t v8 = 0xE800000000000000;
      uint64_t v9 = 0x64657463656A6572;
      goto LABEL_16;
    case 2:
      unint64_t v8 = 0xE600000000000000;
      uint64_t v9 = 0x657461647075;
      goto LABEL_16;
    case 3:
      unint64_t v8 = 0xE700000000000000;
      uint64_t v9 = 0x6572756C696166;
      goto LABEL_16;
    case 4:
      uint64_t v9 = 0x73696D736E617274;
      unint64_t v8 = 0xEC0000006E6F6973;
      goto LABEL_16;
    case 5:
      unint64_t v8 = 0xED00006465766965;
      uint64_t v9 = 0x6365526E656B6F74;
      goto LABEL_16;
    case 6:
      unint64_t v8 = 0xEE00747069656365;
      uint64_t v9 = 0x52646579616C6564;
      goto LABEL_16;
    case 7:
      unint64_t v8 = 0xE700000000000000;
      uint64_t v9 = 0x73736563637573;
      goto LABEL_16;
    case 8:
      goto LABEL_17;
    default:
LABEL_16:
      uint64_t v10 = v9;
      unint64_t v11 = v8;
LABEL_17:
      unint64_t v64 = v11;
      uint64_t v65 = v10;
      sub_100059F98(a1 + 80, (uint64_t)&v83, &qword_1001E2C30);
      sub_100059F98((uint64_t)&v83, (uint64_t)&v86, &qword_1001E2C30);
      unint64_t v12 = 0xE300000000000000;
      uint64_t v13 = 0;
      uint64_t v14 = 7368801;
      unint64_t v15 = 0;
      switch(v86)
      {
        case 1:
          uint64_t v14 = 6448503;
          goto LABEL_21;
        case 2:
          unint64_t v12 = 0xEB00000000686775;
          uint64_t v14 = 0x6F72685477656976;
          goto LABEL_21;
        case 3:
          unint64_t v12 = 0xEC0000006867756FLL;
          uint64_t v14 = 0x7268546B63696C63;
          goto LABEL_21;
        case 4:
          goto LABEL_22;
        default:
LABEL_21:
          uint64_t v13 = v14;
          unint64_t v15 = v12;
LABEL_22:
          unint64_t v62 = v15;
          uint64_t v63 = v13;
          sub_100059F98(a1 + 81, (uint64_t)&v82, &qword_1001E2C40);
          sub_100059F98((uint64_t)&v82, (uint64_t)&v87, &qword_1001E2C40);
          int v59 = v87;
          sub_100059F98(a1 + 83, (uint64_t)&v81, &qword_1001E2C50);
          sub_100059F98((uint64_t)&v81, (uint64_t)&v88, &qword_1001E2C50);
          int v16 = v88;
          sub_100059F98(a1 + 84, (uint64_t)&v80, &qword_1001E2C58);
          sub_100059F98((uint64_t)&v80, (uint64_t)&v89, &qword_1001E2C58);
          int v17 = v89;
          sub_100059F98(a1 + 113, (uint64_t)&v79, &qword_1001E2C78);
          sub_100059F98((uint64_t)&v79, (uint64_t)&v90, &qword_1001E2C78);
          unint64_t v18 = 0xE90000000000006BLL;
          uint64_t v19 = 0x726F7774654E6461;
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          switch(v90)
          {
            case 1:
              unint64_t v18 = 0xE800000000000000;
              uint64_t v19 = 0x656372656D6D6F63;
              goto LABEL_25;
            case 2:
              unint64_t v18 = 0xE900000000000072;
              uint64_t v19 = 0x65706F6C65766564;
              goto LABEL_25;
            case 3:
              goto LABEL_26;
            default:
LABEL_25:
              uint64_t v20 = v19;
              unint64_t v21 = v18;
LABEL_26:
              unint64_t v60 = v21;
              uint64_t v61 = v20;
              sub_100059F98(a1 + 145, (uint64_t)&v78, &qword_1001E2C88);
              sub_100059F98((uint64_t)&v78, (uint64_t)&v91, &qword_1001E2C88);
              int v22 = v91;
              sub_100059F98(a1 + 146, (uint64_t)&v77, &qword_1001E2C98);
              sub_100059F98((uint64_t)&v77, (uint64_t)&v92, &qword_1001E2C98);
              uint64_t v23 = 1701736302;
              unint64_t v24 = 0xE400000000000000;
              uint64_t v25 = 0;
              unint64_t v26 = 0;
              switch(v92)
              {
                case 1:
                  unint64_t v24 = 0xE600000000000000;
                  uint64_t v23 = 0x657372616F63;
                  goto LABEL_29;
                case 2:
                  uint64_t v23 = 1701734758;
                  goto LABEL_29;
                case 3:
                  goto LABEL_30;
                default:
LABEL_29:
                  uint64_t v25 = v23;
                  unint64_t v26 = v24;
LABEL_30:
                  unint64_t v27 = 0xEC000000746E656DLL;
                  if ((v22 & 1) == 0) {
                    unint64_t v27 = 0xE700000000000000;
                  }
                  uint64_t v28 = 0x656761676E656572;
                  if ((v22 & 1) == 0) {
                    uint64_t v28 = 0x6C6C6174736E69;
                  }
                  if (v22 == 2) {
                    unint64_t v29 = 0;
                  }
                  else {
                    unint64_t v29 = v27;
                  }
                  if (v22 == 2) {
                    uint64_t v30 = 0;
                  }
                  else {
                    uint64_t v30 = v28;
                  }
                  uint64_t v57 = v30;
                  unint64_t v58 = v29;
                  unint64_t v31 = 0xE800000000000000;
                  if ((v17 & 1) == 0) {
                    unint64_t v31 = 0xE300000000000000;
                  }
                  uint64_t v32 = 7107189;
                  if (v17) {
                    uint64_t v32 = 0x647261646E617473;
                  }
                  if (v17 == 2) {
                    unint64_t v31 = 0;
                  }
                  unint64_t v56 = v31;
                  if (v17 == 2) {
                    uint64_t v33 = 0;
                  }
                  else {
                    uint64_t v33 = v32;
                  }
                  unint64_t v34 = 0xE500000000000000;
                  if ((v16 & 1) == 0) {
                    unint64_t v34 = 0xE400000000000000;
                  }
                  uint64_t v35 = 2003134838;
                  if (v16) {
                    uint64_t v35 = 0x6B63696C63;
                  }
                  BOOL v36 = v16 == 2;
                  if (v16 == 2) {
                    unint64_t v37 = 0;
                  }
                  else {
                    unint64_t v37 = v34;
                  }
                  if (v36) {
                    uint64_t v38 = 0;
                  }
                  else {
                    uint64_t v38 = v35;
                  }
                  unint64_t v39 = 0xEB00000000656361;
                  if ((v59 & 1) == 0) {
                    unint64_t v39 = 0xE300000000000000;
                  }
                  uint64_t v40 = 0x6C7074656B72616DLL;
                  if ((v59 & 1) == 0) {
                    uint64_t v40 = 7368801;
                  }
                  if (v59 == 2) {
                    unint64_t v41 = 0;
                  }
                  else {
                    unint64_t v41 = v39;
                  }
                  if (v59 == 2) {
                    uint64_t v42 = 0;
                  }
                  else {
                    uint64_t v42 = v40;
                  }
                  sub_100059F98(a1 + 85, (uint64_t)&v76, &qword_1001E2C68);
                  sub_100059F98((uint64_t)&v76, (uint64_t)v93, &qword_1001E2C68);
                  unsigned int v43 = v93[0] == 2;
                  BOOL v36 = (v93[0] & 1) == 0;
                  char v75 = *(unsigned char *)(a1 + 112);
                  char v74 = *(unsigned char *)(a1 + 128);
                  char v73 = *(unsigned char *)(a1 + 144);
                  char v72 = *(unsigned char *)(a1 + 160);
                  char v71 = *(unsigned char *)(a1 + 96);
                  *(unsigned char *)(a4 + 16) = 1;
                  *(NSNumber *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v68;
                  *(void *)(a4 + 32) = &off_1001BFE60;
                  *(void *)(a4 + 48) = 0x8000000100186DC0;
                  *(void *)(a4 + 56) = a2;
                  *(void *)(a4 + 64) = a3;
                  *(void *)(a4 + 72) = 0xD000000000000010;
                  *(void *)(a4 + 40) = 0xD000000000000010;
                  *(void *)(a4 + 80) = 0x8000000100186DE0;
                  *(void *)(a4 + 88) = v66;
                  uint64_t v45 = *(void *)(a1 + 64);
                  uint64_t v44 = *(void *)(a1 + 72);
                  *(void *)(a4 + 96) = v67;
                  *(void *)(a4 + 104) = v45;
                  *(void *)(a4 + 120) = v65;
                  *(void *)(a4 + 128) = v64;
                  *(void *)(a4 + 136) = *(void *)(a1 + 8);
                  *(void *)(a4 + 184) = v63;
                  *(void *)(a4 + 192) = v62;
                  *(void *)(a4 + 200) = v42;
                  *(void *)(a4 + 208) = v41;
                  *(unsigned char *)(a4 + 216) = *(unsigned char *)(a1 + 82);
                  *(void *)(a4 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v38;
                  *(void *)(a4 + 232) = v37;
                  *(void *)(a4 + 240) = v33;
                  *(void *)(a4 + 248) = v56;
                  *(void *)(a4 + 256) = *(void *)(a1 + 104);
                  *(unsigned char *)(a4 + 264) = v75;
                  *(void *)(a4 + 272) = v61;
                  *(void *)(a4 + 280) = v60;
                  *(void *)(a4 + 288) = *(void *)(a1 + 120);
                  *(unsigned char *)(a4 + 296) = v74;
                  *(void *)(a4 + 304) = *(void *)(a1 + 136);
                  *(unsigned char *)(a4 + 312) = v73;
                  *(void *)(a4 + 320) = v57;
                  *(void *)(a4 + 328) = v58;
                  *(void *)(a4 + 336) = v25;
                  *(void *)(a4 + 344) = v26;
                  *(void *)(a4 + 352) = *(void *)(a1 + 152);
                  unsigned int v46 = v36;
                  int32x2_t v47 = vdup_n_s32(v46);
                  *(unsigned char *)(a4 + 360) = v72;
                  int32x2_t v48 = vdup_n_s32(v43);
                  *(void *)(a4 + 384) = *(void *)(a1 + 88);
                  *(unsigned char *)(a4 + 392) = v71;
                  uint64_t v49 = *(void *)(a1 + 176);
                  *(void *)(a4 + 400) = *(void *)(a1 + 168);
                  *(void *)(a4 + 176) = *(void *)(a1 + 48);
                  *(_OWORD *)a4 = xmmword_10017C510;
                  v50.i64[0] = v47.u32[0];
                  v50.i64[1] = v47.u32[1];
                  int8x16_t v51 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v50, 0x3FuLL)), (int8x16_t)xmmword_10017C530, (int8x16_t)xmmword_10017C520);
                  long long v52 = *(_OWORD *)(a1 + 16);
                  long long v53 = *(_OWORD *)(a1 + 32);
                  char v54 = *(unsigned char *)(a1 + 184);
                  *(void *)(a4 + 112) = v44;
                  *(unsigned char *)(a4 + 416) = v54;
                  *(_OWORD *)(a4 + 144) = v52;
                  *(_OWORD *)(a4 + 160) = v53;
                  v50.i64[0] = v48.u32[0];
                  v50.i64[1] = v48.u32[1];
                  *(int8x16_t *)(a4 + 368) = vandq_s8(v51, (int8x16_t)vcgezq_s64(vshlq_n_s64(v50, 0x3FuLL)));
                  *(void *)(a4 + 408) = v49;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  return swift_bridgeObjectRetain();
              }
          }
      }
  }
}

uint64_t destroy for SnoutEventPayload(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SnoutEventPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v29 = *(void **)(a2 + 24);
  uint64_t v30 = *(void *)(a2 + 32);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
  *(void *)(a1 + 32) = v30;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v12;
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v13;
  uint64_t v14 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v14;
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  uint64_t v15 = *(void *)(a2 + 232);
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v15;
  uint64_t v16 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v16;
  uint64_t v17 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v17;
  uint64_t v18 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v18;
  uint64_t v19 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v19;
  uint64_t v20 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v20;
  uint64_t v21 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v21;
  uint64_t v22 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v22;
  uint64_t v23 = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 352) = v23;
  uint64_t v24 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v24;
  uint64_t v25 = *(void *)(a2 + 384);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(void *)(a1 + 384) = v25;
  uint64_t v26 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v26;
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  swift_bridgeObjectRetain();
  id v27 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SnoutEventPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  id v6 = v5;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v7;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v8;
  uint64_t v9 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v9;
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 352) = v10;
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 384);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(void *)(a1 + 384) = v11;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  return a1;
}

void *initializeWithTake for SnoutEventPayload(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1A1uLL);
}

uint64_t assignWithTake for SnoutEventPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 24);

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v16;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  uint64_t v17 = *(void *)(a2 + 232);
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v18;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  uint64_t v19 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v19;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  uint64_t v20 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v21;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  uint64_t v22 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  uint64_t v23 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v23;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  return a1;
}

uint64_t getEnumTagSinglePayload for SnoutEventPayload(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 417)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SnoutEventPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 408) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(unsigned char *)(result + 416) = 0;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 417) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 417) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEventPayload()
{
  return &type metadata for SnoutEventPayload;
}

unint64_t sub_100099FD0(uint64_t a1)
{
  unint64_t result = sub_100029D3C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100099FF8()
{
  unint64_t result = qword_1001E2D20;
  if (!qword_1001E2D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D20);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SnoutEventPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE7)
  {
    unsigned int v6 = ((a2 - 232) >> 8) + 1;
    *unint64_t result = a2 + 24;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009A118);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 24;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutEventPayload.CodingKeys()
{
  return &type metadata for SnoutEventPayload.CodingKeys;
}

unint64_t sub_10009A154()
{
  unint64_t result = qword_1001E2D28;
  if (!qword_1001E2D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D28);
  }
  return result;
}

unint64_t sub_10009A1AC()
{
  unint64_t result = qword_1001E2D30;
  if (!qword_1001E2D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D30);
  }
  return result;
}

unint64_t sub_10009A204()
{
  unint64_t result = qword_1001E2D38;
  if (!qword_1001E2D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D38);
  }
  return result;
}

uint64_t sub_10009A258()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x19) {
    return 25;
  }
  else {
    return v0;
  }
}

uint64_t sub_10009A2AC()
{
  v1[171] = v0;
  uint64_t v2 = sub_100012960(&qword_1001E1370);
  v1[172] = v2;
  v1[173] = *(void *)(v2 - 8);
  v1[174] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v1[175] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[176] = v4;
  v1[177] = *(void *)(v4 + 64);
  v1[178] = swift_task_alloc();
  v1[179] = swift_task_alloc();
  return _swift_task_switch(sub_10009A3E4, 0, 0);
}

uint64_t sub_10009A3E4()
{
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 1440) = sub_100012E74(v1, (uint64_t)qword_1001E6028);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing scheduled token fetch for re-engagement", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = (uint64_t (*)(char))((char *)&dword_1001E4078 + dword_1001E4078);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 1448) = v5;
  void *v5 = v0;
  v5[1] = sub_10009A548;
  return v7(12);
}

uint64_t sub_10009A548(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 1344) = a2;
  *(void *)(v3 + 1336) = a1;
  *(void *)(v3 + 1328) = v2;
  *(unsigned char *)(v3 + 226) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10009A654, 0, 0);
}

uint64_t sub_10009A654()
{
  uint64_t v50 = v0;
  if (*(unsigned char *)(v0 + 226))
  {
    double v2 = 0.0004;
  }
  else
  {
    double v1 = *(double *)(v0 + 1336);
    double v2 = 0.0004;
    if (v1 > 0.0004)
    {
      if (v1 <= 0.2) {
        double v2 = *(double *)(v0 + 1336);
      }
      else {
        double v2 = 0.2;
      }
    }
  }
  unint64_t v3 = sub_100017A04(0x20000000000001uLL);
  if (v3 == 0x20000000000000)
  {
    if (v2 <= 1.0)
    {
LABEL_9:
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Skipping scheduled re-engagement token fetch", v6, 2u);
        swift_slowDealloc();
      }

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
      return v7();
    }
  }
  else if ((double)v3 * 1.11022302e-16 + 0.0 >= v2)
  {
    goto LABEL_9;
  }
  id v9 = [self enumeratorWithOptions:128];
  *(void *)(v0 + 1072) = &type metadata for LaunchServicesRecordEnumerator;
  *(void *)(v0 + 1080) = &off_1001C4A28;
  *(void *)(v0 + 1048) = v9;
  uint64_t v10 = (void *)*sub_100012D78((void *)(v0 + 1048), (uint64_t)&type metadata for LaunchServicesRecordEnumerator);
  *(void *)(v0 + 912) = sub_10009E0EC;
  *(void *)(v0 + 920) = 0;
  *(void *)(v0 + 880) = _NSConcreteStackBlock;
  *(void *)(v0 + 888) = 1107296256;
  *(void *)(v0 + 896) = sub_10009E120;
  *(void *)(v0 + 904) = &unk_1001C7C50;
  uint64_t v11 = _Block_copy((const void *)(v0 + 880));
  swift_release();
  [v10 setFilter:v11];
  _Block_release(v11);
  *(_OWORD *)(v0 + 848) = 0u;
  *(_OWORD *)(v0 + 864) = 0u;
  *(_OWORD *)(v0 + 832) = 0u;
  id v12 = objc_msgSend((id)*sub_100012D78((void *)(v0 + 1048), *(void *)(v0 + 1072)), "nextObject");
  if (v12)
  {
    id v13 = v12;
    *(void *)(v0 + 952) = sub_100059F58();
    *(void *)(v0 + 960) = &off_1001C8F18;
    *(void *)(v0 + 928) = v13;
    sub_100012D60((long long *)(v0 + 928), v0 + 1088);
    sub_100029CD8(v0 + 1088, v0 + 1208);
    sub_100029CD8(v0 + 1088, v0 + 1248);
    sub_100029CD8(v0 + 1088, v0 + 1288);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v49[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315650;
      sub_100012D78((void *)(v0 + 1208), *(void *)(v0 + 1232));
      os_log_type_t v48 = v15;
      uint64_t v17 = sub_1000D0DD4();
      if (v18)
      {
        unint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 1701736302;
        unint64_t v19 = 0xE400000000000000;
      }
      *(void *)(v16 + 4) = sub_100147668(v17, v19, v49);
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1208);
      *(_WORD *)(v16 + 12) = 2048;
      sub_100012D78((void *)(v0 + 1248), *(void *)(v0 + 1272));
      id v20 = sub_1000D0D84();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1248);
      *(void *)(v16 + 14) = v20;
      *(_WORD *)(v16 + 22) = 2080;
      sub_100012D78((void *)(v0 + 1288), *(void *)(v0 + 1312));
      uint64_t v21 = sub_1000D0E3C();
      if (v22)
      {
        unint64_t v23 = v22;
      }
      else
      {
        uint64_t v21 = 1701736302;
        unint64_t v23 = 0xE400000000000000;
      }
      *(void *)(v16 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100147668(v21, v23, v49);
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1288);
      _os_log_impl((void *)&_mh_execute_header, v14, v48, "Got app with bundle id: %s, item id: %llu, distributor id: %s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1248);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1208);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1288);
    }

    uint64_t v28 = *(void *)(v0 + 1112);
    uint64_t v29 = *(void *)(v0 + 1120);
    sub_100012D78((void *)(v0 + 1088), v28);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
    uint64_t v31 = swift_task_alloc();
    *(void *)(v0 + 1456) = v31;
    *(void *)uint64_t v31 = v0;
    *(void *)(v31 + 8) = sub_10009AFA4;
    *(void *)(v31 + 2248) = *(void *)(v0 + 1368);
    *(unsigned char *)(v31 + 2344) = 1;
    *(void *)(v31 + 2240) = v30;
    uint64_t v32 = sub_1000A8B44;
    uint64_t v33 = 0;
    goto LABEL_30;
  }
  if (!*(void *)(v0 + 856))
  {
    sub_1000B2218();
    uint64_t v34 = swift_allocError();
    *(_OWORD *)uint64_t v35 = xmmword_10017C720;
    *(unsigned char *)(v35 + 16) = 2;
    swift_willThrow();
    *(void *)(v0 + 1536) = v34;
    sub_100019960(v0 + 832, &qword_1001E2ED8);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1048);
    swift_errorRetain();
    swift_errorRetain();
    BOOL v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      unint64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412290;
      swift_errorRetain();
      uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1352) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v39 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Scheduled re-engagement token fetch has failed with error: %@", v38, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v41 = *(void *)(v0 + 1368);

    swift_errorRetain();
    sub_10009485C(5, 5, v34, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v42 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 784) = v42;
    *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v0 + 809) = *(_OWORD *)(v0 + 617);
    long long v43 = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 720) = v43;
    long long v44 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 752) = v44;
    long long v45 = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v0 + 656) = v45;
    long long v46 = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 688) = v46;
    int32x2_t v47 = sub_100012D78((void *)(v41 + 232), *(void *)(v41 + 256));
    uint64_t v33 = *v47;
    *(void *)(v0 + 1544) = *v47;
    uint64_t v32 = sub_10009C7C4;
LABEL_30:
    return _swift_task_switch(v32, v33, 0);
  }
  sub_100029CD8(v0 + 832, v0 + 1008);
  sub_100012D60((long long *)(v0 + 1008), v0 + 968);
  sub_100012D60((long long *)(v0 + 968), v0 + 1128);
  sub_100019960(v0 + 832, &qword_1001E2ED8);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1048);
  uint64_t v24 = *(void *)(v0 + 1152);
  uint64_t v25 = *(void *)(v0 + 1160);
  sub_100012D78((void *)(v0 + 1128), v24);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
  id v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 1528) = v27;
  *id v27 = v0;
  v27[1] = sub_10009C648;
  return sub_1000A98C8(v26, 1, 1);
}

uint64_t sub_10009AFA4(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1464) = v1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v5 = sub_10009C984;
  }
  else
  {
    *(unsigned char *)(v4 + 227) = a1 & 1;
    os_log_type_t v5 = sub_10009B0D0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009B0D0()
{
  uint64_t v59 = v0;
  if (*(unsigned char *)(v0 + 227))
  {
    uint64_t v1 = *(void *)(v0 + 1432);
    uint64_t v2 = *(void *)(v0 + 1424);
    uint64_t v3 = *(void *)(v0 + 1416);
    uint64_t v4 = *(void *)(v0 + 1408);
    uint64_t v5 = *(void *)(v0 + 1400);
    uint64_t v6 = *(uint64_t **)(v0 + 1368);
    uint64_t v7 = *(void *)(v0 + 1112);
    uint64_t v8 = *(void *)(v0 + 1120);
    sub_100012D78((void *)(v0 + 1088), v7);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
    Date.init(timeIntervalSinceNow:)();
    uint64_t v10 = v6[1];
    uint64_t v56 = *v6;
    *(void *)(v0 + 1472) = v10;
    uint64_t v11 = (void *)v6[2];
    *(void *)(v0 + 1480) = v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v5);
    unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v13 = swift_allocObject();
    *(void *)(v0 + 1488) = v13;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v12, v2, v5);
    *(void *)(v13 + ((v3 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = v9;
    swift_bridgeObjectRetain();
    id v14 = v11;
    *(void *)(v0 + 1192) = &type metadata for TokenDatabaseStore;
    *(void *)(v0 + 1200) = &off_1001E2260;
    *(void *)(v0 + 1168) = v56;
    *(void *)(v0 + 1176) = v10;
    *(void *)(v0 + 1184) = v14;
    id v15 = v14;
    swift_bridgeObjectRetain();
    id v16 = v15;
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 1496) = v17;
    long long v17[2] = v16;
    v17[3] = v0 + 1168;
    void v17[4] = sub_1000B2DA8;
    v17[5] = v13;
    unint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 1504) = v18;
    *unint64_t v18 = v0;
    v18[1] = sub_10009BA1C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 1360, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_1000B3154, v17, &type metadata for Int);
  }
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1088);
  id v19 = objc_msgSend((id)*sub_100012D78((void *)(v0 + 1048), *(void *)(v0 + 1072)), "nextObject");
  if (v19)
  {
    id v20 = v19;
    *(void *)(v0 + 952) = sub_100059F58();
    *(void *)(v0 + 960) = &off_1001C8F18;
    *(void *)(v0 + 928) = v20;
    sub_100012D60((long long *)(v0 + 928), v0 + 1088);
    sub_100029CD8(v0 + 1088, v0 + 1208);
    sub_100029CD8(v0 + 1088, v0 + 1248);
    sub_100029CD8(v0 + 1088, v0 + 1288);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315650;
      sub_100012D78((void *)(v0 + 1208), *(void *)(v0 + 1232));
      os_log_type_t v57 = v22;
      uint64_t v24 = sub_1000D0DD4();
      if (v25)
      {
        unint64_t v26 = v25;
      }
      else
      {
        uint64_t v24 = 1701736302;
        unint64_t v26 = 0xE400000000000000;
      }
      *(void *)(v23 + 4) = sub_100147668(v24, v26, v58);
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1208);
      *(_WORD *)(v23 + 12) = 2048;
      sub_100012D78((void *)(v0 + 1248), *(void *)(v0 + 1272));
      id v27 = sub_1000D0D84();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1248);
      *(void *)(v23 + 14) = v27;
      *(_WORD *)(v23 + 22) = 2080;
      sub_100012D78((void *)(v0 + 1288), *(void *)(v0 + 1312));
      uint64_t v28 = sub_1000D0E3C();
      if (v29)
      {
        unint64_t v30 = v29;
      }
      else
      {
        uint64_t v28 = 1701736302;
        unint64_t v30 = 0xE400000000000000;
      }
      *(void *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100147668(v28, v30, v58);
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1288);
      _os_log_impl((void *)&_mh_execute_header, v21, v57, "Got app with bundle id: %s, item id: %llu, distributor id: %s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1248);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1208);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1288);
    }

    uint64_t v35 = *(void *)(v0 + 1112);
    uint64_t v36 = *(void *)(v0 + 1120);
    sub_100012D78((void *)(v0 + 1088), v35);
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
    uint64_t v38 = swift_task_alloc();
    *(void *)(v0 + 1456) = v38;
    *(void *)uint64_t v38 = v0;
    *(void *)(v38 + 8) = sub_10009AFA4;
    *(void *)(v38 + 2248) = *(void *)(v0 + 1368);
    *(unsigned char *)(v38 + 2344) = 1;
    *(void *)(v38 + 2240) = v37;
    unint64_t v39 = sub_1000A8B44;
    uint64_t v40 = 0;
LABEL_20:
    return _swift_task_switch(v39, v40, 0);
  }
  if (!*(void *)(v0 + 856))
  {
    sub_1000B2218();
    uint64_t v41 = swift_allocError();
    *(_OWORD *)uint64_t v42 = xmmword_10017C720;
    *(unsigned char *)(v42 + 16) = 2;
    swift_willThrow();
    *(void *)(v0 + 1536) = v41;
    sub_100019960(v0 + 832, &qword_1001E2ED8);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1048);
    swift_errorRetain();
    swift_errorRetain();
    long long v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      long long v45 = (uint8_t *)swift_slowAlloc();
      long long v46 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v45 = 138412290;
      swift_errorRetain();
      uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1352) = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v46 = v47;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Scheduled re-engagement token fetch has failed with error: %@", v45, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v48 = *(void *)(v0 + 1368);

    swift_errorRetain();
    sub_10009485C(5, 5, v41, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v49 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 784) = v49;
    *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v0 + 809) = *(_OWORD *)(v0 + 617);
    long long v50 = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 720) = v50;
    long long v51 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 752) = v51;
    long long v52 = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v0 + 656) = v52;
    long long v53 = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 688) = v53;
    char v54 = sub_100012D78((void *)(v48 + 232), *(void *)(v48 + 256));
    uint64_t v40 = *v54;
    *(void *)(v0 + 1544) = *v54;
    unint64_t v39 = sub_10009C7C4;
    goto LABEL_20;
  }
  sub_100029CD8(v0 + 832, v0 + 1008);
  sub_100012D60((long long *)(v0 + 1008), v0 + 968);
  sub_100012D60((long long *)(v0 + 968), v0 + 1128);
  sub_100019960(v0 + 832, &qword_1001E2ED8);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1048);
  uint64_t v31 = *(void *)(v0 + 1152);
  uint64_t v32 = *(void *)(v0 + 1160);
  sub_100012D78((void *)(v0 + 1128), v31);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
  uint64_t v34 = (void *)swift_task_alloc();
  *(void *)(v0 + 1528) = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_10009C648;
  return sub_1000A98C8(v33, 1, 1);
}

uint64_t sub_10009BA1C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1512) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10009C32C;
  }
  else
  {
    uint64_t v4 = (void *)v2[185];

    swift_task_dealloc();
    v2[190] = v2[170];
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v2 + 146));
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_10009BB84;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009BB84()
{
  uint64_t v42 = v0;
  uint64_t v1 = *(void *)(v0 + 1520);
  (*(void (**)(void, void))(*(void *)(v0 + 1408) + 8))(*(void *)(v0 + 1432), *(void *)(v0 + 1400));
  if (!v1)
  {
    sub_100019960(v0 + 832, &qword_1001E2ED8);
    sub_100029CD8(v0 + 1088, v0 + 832);
    *(void *)(v0 + 872) = 0;
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1088);
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)(v0 + 1520);
  if (*(void *)(v0 + 856))
  {
    if (v2 >= *(void *)(v0 + 872)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v2 != 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_4:
    sub_100019960(v0 + 832, &qword_1001E2ED8);
    sub_100029CD8(v0 + 1088, v0 + 832);
    *(void *)(v0 + 872) = v2;
  }
LABEL_5:
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1088);
  id v3 = objc_msgSend((id)*sub_100012D78((void *)(v0 + 1048), *(void *)(v0 + 1072)), "nextObject");
  if (v3)
  {
    id v4 = v3;
    *(void *)(v0 + 952) = sub_100059F58();
    *(void *)(v0 + 960) = &off_1001C8F18;
    *(void *)(v0 + 928) = v4;
    sub_100012D60((long long *)(v0 + 928), v0 + 1088);
    sub_100029CD8(v0 + 1088, v0 + 1208);
    sub_100029CD8(v0 + 1088, v0 + 1248);
    sub_100029CD8(v0 + 1088, v0 + 1288);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315650;
      sub_100012D78((void *)(v0 + 1208), *(void *)(v0 + 1232));
      os_log_type_t v40 = v6;
      uint64_t v8 = sub_1000D0DD4();
      if (v9)
      {
        unint64_t v10 = v9;
      }
      else
      {
        uint64_t v8 = 1701736302;
        unint64_t v10 = 0xE400000000000000;
      }
      *(void *)(v7 + 4) = sub_100147668(v8, v10, v41);
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1208);
      *(_WORD *)(v7 + 12) = 2048;
      sub_100012D78((void *)(v0 + 1248), *(void *)(v0 + 1272));
      id v11 = sub_1000D0D84();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1248);
      *(void *)(v7 + 14) = v11;
      *(_WORD *)(v7 + 22) = 2080;
      sub_100012D78((void *)(v0 + 1288), *(void *)(v0 + 1312));
      uint64_t v12 = sub_1000D0E3C();
      if (v13)
      {
        unint64_t v14 = v13;
      }
      else
      {
        uint64_t v12 = 1701736302;
        unint64_t v14 = 0xE400000000000000;
      }
      *(void *)(v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = sub_100147668(v12, v14, v41);
      swift_bridgeObjectRelease();
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1288);
      _os_log_impl((void *)&_mh_execute_header, v5, v40, "Got app with bundle id: %s, item id: %llu, distributor id: %s", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1248);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1208);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1288);
    }

    uint64_t v27 = *(void *)(v0 + 1112);
    uint64_t v28 = *(void *)(v0 + 1120);
    sub_100012D78((void *)(v0 + 1088), v27);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
    uint64_t v30 = swift_task_alloc();
    *(void *)(v0 + 1456) = v30;
    *(void *)uint64_t v30 = v0;
    *(void *)(v30 + 8) = sub_10009AFA4;
    *(void *)(v30 + 2248) = *(void *)(v0 + 1368);
    *(unsigned char *)(v30 + 2344) = 1;
    *(void *)(v30 + 2240) = v29;
    uint64_t v31 = sub_1000A8B44;
    uint64_t v32 = 0;
    goto LABEL_27;
  }
LABEL_15:
  if (!*(void *)(v0 + 856))
  {
    sub_1000B2218();
    uint64_t v20 = swift_allocError();
    *(_OWORD *)uint64_t v21 = xmmword_10017C720;
    *(unsigned char *)(v21 + 16) = 2;
    swift_willThrow();
    *(void *)(v0 + 1536) = v20;
    sub_100019960(v0 + 832, &qword_1001E2ED8);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1048);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      unint64_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412290;
      swift_errorRetain();
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1352) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v25 = v26;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Scheduled re-engagement token fetch has failed with error: %@", v24, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v33 = *(void *)(v0 + 1368);

    swift_errorRetain();
    sub_10009485C(5, 5, v20, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v34 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 784) = v34;
    *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v0 + 809) = *(_OWORD *)(v0 + 617);
    long long v35 = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 720) = v35;
    long long v36 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 752) = v36;
    long long v37 = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v0 + 656) = v37;
    long long v38 = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 688) = v38;
    unint64_t v39 = sub_100012D78((void *)(v33 + 232), *(void *)(v33 + 256));
    uint64_t v32 = *v39;
    *(void *)(v0 + 1544) = *v39;
    uint64_t v31 = sub_10009C7C4;
LABEL_27:
    return _swift_task_switch(v31, v32, 0);
  }
  sub_100029CD8(v0 + 832, v0 + 1008);
  sub_100012D60((long long *)(v0 + 1008), v0 + 968);
  sub_100012D60((long long *)(v0 + 968), v0 + 1128);
  sub_100019960(v0 + 832, &qword_1001E2ED8);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1048);
  uint64_t v15 = *(void *)(v0 + 1152);
  uint64_t v16 = *(void *)(v0 + 1160);
  sub_100012D78((void *)(v0 + 1128), v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  unint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 1528) = v18;
  *unint64_t v18 = v0;
  v18[1] = sub_10009C648;
  return sub_1000A98C8(v17, 1, 1);
}

uint64_t sub_10009C32C()
{
  uint64_t v1 = *(void **)(v0 + 1480);
  uint64_t v2 = *(void *)(v0 + 1432);
  uint64_t v3 = *(void *)(v0 + 1408);
  uint64_t v4 = *(void *)(v0 + 1400);

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1168);
  swift_release();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1088);
  uint64_t v5 = *(void *)(v0 + 1512);
  *(void *)(v0 + 1536) = v5;
  sub_100019960(v0 + 832, &qword_1001E2ED8);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1048);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1352) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Scheduled re-engagement token fetch has failed with error: %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = *(void *)(v0 + 1368);

  swift_errorRetain();
  sub_10009485C(5, 5, v5, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
    0,
    1u,
    1u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v12 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 784) = v12;
  *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 608);
  *(_OWORD *)(v0 + 809) = *(_OWORD *)(v0 + 617);
  long long v13 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 720) = v13;
  long long v14 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 752) = v14;
  long long v15 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 656) = v15;
  long long v16 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 688) = v16;
  uint64_t v17 = sub_100012D78((void *)(v11 + 232), *(void *)(v11 + 256));
  uint64_t v18 = *v17;
  *(void *)(v0 + 1544) = *v17;
  return _swift_task_switch(sub_10009C7C4, v18, 0);
}

uint64_t sub_10009C648()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10009C744, 0, 0);
}

uint64_t sub_10009C744()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1128);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009C7C4()
{
  uint64_t v1 = *(void *)(v0 + 1392);
  uint64_t v2 = *(void *)(v0 + 1384);
  uint64_t v3 = *(void *)(v0 + 1376);
  long long v4 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 160) = v4;
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 800);
  long long v5 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 96) = v5;
  long long v6 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 128) = v6;
  long long v7 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 32) = v7;
  long long v8 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 64) = v8;
  *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 809);
  *(void *)(v0 + 208) = 0;
  *(void *)(v0 + 216) = 0;
  *(_WORD *)(v0 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 258;
  sub_10003675C(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 232);
  sub_10001547C(v0 + 448);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 448);
  return _swift_task_switch(sub_10009C904, 0, 0);
}

uint64_t sub_10009C904()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009C984()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1088);
  uint64_t v1 = *(void *)(v0 + 1464);
  *(void *)(v0 + 1536) = v1;
  sub_100019960(v0 + 832, &qword_1001E2ED8);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 1048);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    long long v4 = (uint8_t *)swift_slowAlloc();
    long long v5 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1352) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Scheduled re-engagement token fetch has failed with error: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 1368);

  swift_errorRetain();
  sub_10009485C(5, 5, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
    0,
    1u,
    1u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v8 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 784) = v8;
  *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 608);
  *(_OWORD *)(v0 + 809) = *(_OWORD *)(v0 + 617);
  long long v9 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 720) = v9;
  long long v10 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 752) = v10;
  long long v11 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 656) = v11;
  long long v12 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 688) = v12;
  long long v13 = sub_100012D78((void *)(v7 + 232), *(void *)(v7 + 256));
  uint64_t v14 = *v13;
  *(void *)(v0 + 1544) = *v13;
  return _swift_task_switch(sub_10009C7C4, v14, 0);
}

uint64_t sub_10009CC30(uint64_t a1, uint64_t a2)
{
  v3[266] = v2;
  v3[265] = a2;
  v3[264] = a1;
  uint64_t v4 = sub_100012960(&qword_1001E1370);
  v3[267] = v4;
  v3[268] = *(void *)(v4 - 8);
  v3[269] = swift_task_alloc();
  uint64_t v5 = sub_100012960(&qword_1001E2D98);
  v3[270] = v5;
  v3[271] = *(void *)(v5 - 8);
  v3[272] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[273] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[274] = v7;
  v3[275] = *(void *)(v7 + 64);
  v3[276] = swift_task_alloc();
  v3[277] = swift_task_alloc();
  return _swift_task_switch(sub_10009CDFC, 0, 0);
}

uint64_t sub_10009CDFC()
{
  uint64_t v1 = *(void *)(v0 + 2120);
  uint64_t v2 = v1 + *(int *)(sub_100012960(&qword_1001E1380) + 52);
  uint64_t v3 = type metadata accessor for AppImpressionPayload();
  if ((*(unsigned char *)(v2 + *(int *)(v3 + 44)) & 1) == 0)
  {
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100012E74(v4, (uint64_t)qword_1001E6028);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Impression is not eligible for re-engagement", v7, 2u);
      swift_slowDealloc();
    }
    goto LABEL_6;
  }
  uint64_t v10 = v3;
  long long v11 = (uint64_t *)(v0 + 2112);
  uint64_t v12 = *(void *)(v0 + 2112);
  id v13 = objc_allocWithZone((Class)LSApplicationRecord);
  *(void *)(v0 + 2088) = 0;
  id v14 = [v13 initWithStoreItemIdentifier:v12 error:v0 + 2088];
  long long v15 = *(void **)(v0 + 2088);
  if (v14)
  {
    id v16 = v14;
    *(void *)(v0 + 2064) = sub_100059F58();
    *(void *)(v0 + 2072) = &off_1001C8F18;
    *(void *)(v0 + 2040) = v16;
    sub_100012D60((long long *)(v0 + 2040), v0 + 2000);
    uint64_t v17 = (void *)*sub_100012D78((void *)(v0 + 2000), *(void *)(v0 + 2024));
    id v18 = v15;
    id v19 = [v17 iTunesMetadata];
    id v20 = [v19 distributorInfo];

    id v21 = [v20 distributorID];
    if (v21)
    {
      uint64_t v22 = *(void *)(v0 + 2216);
      uint64_t v23 = *(void *)(v0 + 2192);
      uint64_t v24 = *(void *)(v0 + 2184);
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v82 = v26;
      uint64_t v83 = v25;

      char v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
      v81(v22, v2, v24);
      uint64_t v27 = *(void *)(v2 + *(int *)(v10 + 20));
      if (qword_1001E0900 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100012E74(v28, (uint64_t)qword_1001E6028);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Queueing token allocation task", v31, 2u);
        swift_slowDealloc();
      }
      BOOL v80 = v27 != 0;
      uint64_t v32 = *(void *)(v0 + 2216);
      uint64_t v33 = *(void *)(v0 + 2208);
      uint64_t v34 = *(void *)(v0 + 2192);
      uint64_t v35 = *(void *)(v0 + 2184);
      uint64_t v36 = *(void *)(v0 + 2128);
      uint64_t v79 = *(void *)(v0 + 2112);

      sub_1000B226C(v36, v0 + 16);
      v81(v33, v32, v35);
      unint64_t v37 = (*(unsigned __int8 *)(v34 + 80) + 313) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      uint64_t v38 = swift_allocObject();
      *(void *)(v0 + 2232) = v38;
      memcpy((void *)(v38 + 16), (const void *)(v0 + 16), 0x110uLL);
      *(void *)(v38 + 288) = v79;
      *(void *)(v38 + 296) = v83;
      *(void *)(v38 + 304) = v82;
      *(unsigned char *)(v38 + 312) = v80;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32))(v38 + v37, v33, v35);
      unint64_t v39 = sub_100012D78((void *)(v36 + 152), *(void *)(v36 + 176));
      uint64_t v40 = *v39;
      *(void *)(v0 + 2240) = *v39;
      *(void *)(v0 + 1984) = sub_100012960(&qword_1001E2DB8);
      *(void *)(v0 + 1992) = sub_1000B2F0C(&qword_1001E2DC0, &qword_1001E2DB8);
      *(void *)(v0 + 1960) = &unk_1001E2DB0;
      *(void *)(v0 + 1968) = v38;
      swift_retain();
      uint64_t v41 = sub_10009D8E8;
      uint64_t v42 = v40;
      goto LABEL_35;
    }
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_100012E74(v50, (uint64_t)qword_1001E6028);
    long long v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = *v11;
      char v54 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v54 = 134217984;
      *(void *)(v0 + 2080) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Marketplace ID for advertised app %llu is nil", v54, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v55 = *(void *)(v0 + 2128);

    sub_1000B2218();
    uint64_t v56 = swift_allocError();
    *(_OWORD *)uint64_t v57 = xmmword_10017C730;
    *(unsigned char *)(v57 + 16) = 2;
    sub_10009485C(4, 0, v56, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1536), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v58 = *(_OWORD *)(v0 + 1680);
    *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 1664);
    *(_OWORD *)(v0 + 1872) = v58;
    *(_OWORD *)(v0 + 1888) = *(_OWORD *)(v0 + 1696);
    *(_OWORD *)(v0 + 1897) = *(_OWORD *)(v0 + 1705);
    long long v59 = *(_OWORD *)(v0 + 1616);
    *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 1600);
    *(_OWORD *)(v0 + 1808) = v59;
    long long v60 = *(_OWORD *)(v0 + 1648);
    *(_OWORD *)(v0 + 18++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v0 + 1632);
    *(_OWORD *)(v0 + 1840) = v60;
    long long v61 = *(_OWORD *)(v0 + 1552);
    *(_OWORD *)(v0 + 1728) = *(_OWORD *)(v0 + 1536);
    *(_OWORD *)(v0 + 1744) = v61;
    long long v62 = *(_OWORD *)(v0 + 1584);
    *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 1568);
    *(_OWORD *)(v0 + 1776) = v62;
    uint64_t v63 = sub_100012D78((void *)(v55 + 232), *(void *)(v55 + 256));
    uint64_t v42 = *v63;
    *(void *)(v0 + 2248) = *v63;
    unint64_t v64 = sub_10009DAF0;
  }
  else
  {
    id v43 = v15;
    uint64_t v44 = _convertNSErrorToError(_:)();
    *(void *)(v0 + 22++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v44;

    swift_willThrow();
    long long v45 = (void *)_convertErrorToNSError(_:)();
    id v46 = [v45 code];

    if (v46 == (id)-10814)
    {
      if (qword_1001E0900 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      sub_100012E74(v47, (uint64_t)qword_1001E6028);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v48))
      {
        long long v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v48, "Advertised item ID is not installed, skipping re-engagement processing", v49, 2u);
        swift_slowDealloc();

        swift_errorRelease();
        goto LABEL_7;
      }
      swift_errorRelease();
LABEL_6:

LABEL_7:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v8 = *(uint64_t (**)(void))(v0 + 8);
      return v8();
    }
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    sub_100012E74(v65, (uint64_t)qword_1001E6028);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = *v11;
      uint64_t v69 = swift_slowAlloc();
      uint64_t v70 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 134218242;
      *(void *)(v0 + 2104) = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v69 + 12) = 2112;
      swift_errorRetain();
      uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 2096) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v70 = v71;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Unexpected error fetching LSApplicationRecord for itemID: %llu, error: %@", (uint8_t *)v69, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v72 = *(void *)(v0 + 2128);

    swift_errorRetain();
    sub_10009485C(4, 0, v44, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1152), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v73 = *(_OWORD *)(v0 + 1296);
    *(_OWORD *)(v0 + 1472) = *(_OWORD *)(v0 + 1280);
    *(_OWORD *)(v0 + 1488) = v73;
    *(_OWORD *)(v0 + 1504) = *(_OWORD *)(v0 + 1312);
    *(_OWORD *)(v0 + 1513) = *(_OWORD *)(v0 + 1321);
    long long v74 = *(_OWORD *)(v0 + 1232);
    *(_OWORD *)(v0 + 1408) = *(_OWORD *)(v0 + 1216);
    *(_OWORD *)(v0 + 14++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v74;
    long long v75 = *(_OWORD *)(v0 + 1264);
    *(_OWORD *)(v0 + 1440) = *(_OWORD *)(v0 + 1248);
    *(_OWORD *)(v0 + 1456) = v75;
    long long v76 = *(_OWORD *)(v0 + 1168);
    *(_OWORD *)(v0 + 1344) = *(_OWORD *)(v0 + 1152);
    *(_OWORD *)(v0 + 1360) = v76;
    long long v77 = *(_OWORD *)(v0 + 1200);
    *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v0 + 1184);
    *(_OWORD *)(v0 + 1392) = v77;
    char v78 = sub_100012D78((void *)(v72 + 232), *(void *)(v72 + 256));
    uint64_t v42 = *v78;
    *(void *)(v0 + 2256) = *v78;
    unint64_t v64 = sub_10009DD34;
  }
  uint64_t v41 = v64;
LABEL_35:
  return _swift_task_switch(v41, v42, 0);
}

uint64_t sub_10009D8E8()
{
  uint64_t v1 = v0[272];
  uint64_t v2 = v0[271];
  uint64_t v3 = v0[270];
  sub_100029CD8((uint64_t)(v0 + 245), (uint64_t)(v0 + 240));
  sub_100012960(&qword_1001E0B08);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 245));
  return _swift_task_switch(sub_10009D9F8, 0, 0);
}

uint64_t sub_10009D9F8()
{
  uint64_t v1 = v0[277];
  uint64_t v2 = v0[274];
  uint64_t v3 = v0[273];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 250));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10009DAF0()
{
  uint64_t v1 = *(void *)(v0 + 2152);
  uint64_t v2 = *(void *)(v0 + 2144);
  uint64_t v3 = *(void *)(v0 + 2136);
  uint64_t v4 = *(void *)(v0 + 2112);
  long long v5 = *(_OWORD *)(v0 + 1872);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 1856);
  *(_OWORD *)(v0 + 432) = v5;
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1888);
  *(_OWORD *)(v0 + 457) = *(_OWORD *)(v0 + 1897);
  long long v6 = *(_OWORD *)(v0 + 1808);
  *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 1792);
  *(_OWORD *)(v0 + 368) = v6;
  long long v7 = *(_OWORD *)(v0 + 1840);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 1824);
  *(_OWORD *)(v0 + 400) = v7;
  long long v8 = *(_OWORD *)(v0 + 1744);
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 1728);
  *(_OWORD *)(v0 + 304) = v8;
  long long v9 = *(_OWORD *)(v0 + 1776);
  *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 1760);
  *(_OWORD *)(v0 + 336) = v9;
  *(void *)(v0 + 480) = v4;
  *(void *)(v0 + 488) = 0;
  *(_WORD *)(v0 + 496) = 256;
  sub_10003675C(v0 + 288);
  sub_1000367C8(v0 + 288, v0 + 720);
  sub_10001547C(v0 + 1536);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1536);
  return _swift_task_switch(sub_10009DC74, 0, 0);
}

uint64_t sub_10009DC74()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 2000);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009DD34()
{
  uint64_t v1 = *(void *)(v0 + 2152);
  uint64_t v2 = *(void *)(v0 + 2144);
  uint64_t v3 = *(void *)(v0 + 2136);
  uint64_t v4 = *(void *)(v0 + 2112);
  long long v5 = *(_OWORD *)(v0 + 1488);
  *(_OWORD *)(v0 + 1064) = *(_OWORD *)(v0 + 1472);
  *(_OWORD *)(v0 + 1080) = v5;
  *(_OWORD *)(v0 + 1096) = *(_OWORD *)(v0 + 1504);
  *(_OWORD *)(v0 + 1105) = *(_OWORD *)(v0 + 1513);
  long long v6 = *(_OWORD *)(v0 + 1424);
  *(_OWORD *)(v0 + 1000) = *(_OWORD *)(v0 + 1408);
  *(_OWORD *)(v0 + 1016) = v6;
  long long v7 = *(_OWORD *)(v0 + 1456);
  *(_OWORD *)(v0 + 1032) = *(_OWORD *)(v0 + 1440);
  *(_OWORD *)(v0 + 1048) = v7;
  long long v8 = *(_OWORD *)(v0 + 1360);
  *(_OWORD *)(v0 + 936) = *(_OWORD *)(v0 + 1344);
  *(_OWORD *)(v0 + 952) = v8;
  long long v9 = *(_OWORD *)(v0 + 1392);
  *(_OWORD *)(v0 + 968) = *(_OWORD *)(v0 + 1376);
  *(_OWORD *)(v0 + 984) = v9;
  *(void *)(v0 + 1128) = v4;
  *(void *)(v0 + 1136) = 0;
  *(_WORD *)(v0 + 1144) = 256;
  sub_10003675C(v0 + 936);
  sub_1000367C8(v0 + 936, v0 + 504);
  sub_10001547C(v0 + 1152);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1152);
  return _swift_task_switch(sub_10009DEBC, 0, 0);
}

uint64_t sub_10009DEBC()
{
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Advertised item ID is not installed, skipping re-engagement processing", v4, 2u);
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

unint64_t sub_10009E04C@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t result = sub_1000AF084(result), (v5 & 1) != 0))
  {
    long long v6 = (uint64_t *)(*(void *)(a2 + 56) + 48 * result);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    uint64_t v10 = v6[2];
    uint64_t v9 = v6[3];
    uint64_t v11 = v6[4];
    uint64_t v12 = (void *)v6[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = v12;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v10;
  a3[3] = v9;
  a3[4] = v11;
  a3[5] = v12;
  return result;
}

BOOL sub_10009E0EC(void *a1)
{
  id v1 = a1;
  BOOL v2 = sub_1000B105C(v1);

  return v2;
}

uint64_t sub_10009E120(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t sub_10009E178(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v5[131] = v4;
  v5[130] = a3;
  v5[129] = a2;
  v5[128] = a1;
  uint64_t v8 = sub_100012960(&qword_1001E1370);
  v5[132] = v8;
  v5[133] = *(void *)(v8 - 8);
  v5[134] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v5[135] = v9;
  v5[136] = *(void *)(v9 - 8);
  v5[137] = swift_task_alloc();
  uint64_t v10 = swift_task_alloc();
  v5[138] = v10;
  *(void *)uint64_t v10 = v5;
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(unsigned char *)(v10 + 72) = a4;
  *(void *)(v10 + 8) = sub_10009E300;
  return _swift_task_switch(sub_10009FC50, 0, 0);
}

uint64_t sub_10009E300(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 226) = a1;
  *(void *)(v3 + 1112) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10009EDB0;
  }
  else {
    uint64_t v4 = sub_10009E418;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10009E418()
{
  if (*(unsigned char *)(v0 + 226) == 2)
  {
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100012E74(v1, (uint64_t)qword_1001E6028);
    BOOL v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "No ad data present. Ignoring handoff", v4, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    char v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 1112);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1000B2F98();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v7)
    {
      swift_release();
      *(void *)(v0 + 1168) = v7;
      if (qword_1001E0900 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100012E74(v8, (uint64_t)qword_1001E6028);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 138412290;
        swift_errorRetain();
        uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1008) = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v12 = v13;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unpacking handed off token failed: %@", v11, 0xCu);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v25 = *(void *)(v0 + 1048);

      swift_errorRetain();
      sub_10009485C(4, 0, v7, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
        0,
        1u,
        0,
        3u,
        0,
        1u,
        0,
        0,
        2u);
      long long v26 = *(_OWORD *)(v0 + 592);
      *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 576);
      *(_OWORD *)(v0 + 784) = v26;
      *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 608);
      *(_OWORD *)(v0 + 809) = *(_OWORD *)(v0 + 617);
      long long v27 = *(_OWORD *)(v0 + 528);
      *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 512);
      *(_OWORD *)(v0 + 720) = v27;
      long long v28 = *(_OWORD *)(v0 + 560);
      *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 544);
      *(_OWORD *)(v0 + 752) = v28;
      long long v29 = *(_OWORD *)(v0 + 464);
      *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 448);
      *(_OWORD *)(v0 + 656) = v29;
      long long v30 = *(_OWORD *)(v0 + 496);
      *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 480);
      *(_OWORD *)(v0 + 688) = v30;
      uint64_t v31 = sub_100012D78((void *)(v25 + 232), *(void *)(v25 + 256));
      uint64_t v32 = *v31;
      *(void *)(v0 + 1176) = *v31;
      return _swift_task_switch(sub_10009EBA8, v32, 0);
    }
    else
    {
      char v14 = *(unsigned char *)(v0 + 226);
      uint64_t v15 = *(void *)(v0 + 1096);
      uint64_t v16 = *(void *)(v0 + 1088);
      uint64_t v17 = *(void *)(v0 + 1080);
      swift_release();
      unsigned __int8 v39 = v14 & 1;
      uint64_t v38 = *(void *)(v0 + 936);
      uint64_t v18 = *(void *)(v0 + 944);
      *(void *)(v0 + 1120) = v18;
      uint64_t v35 = *(void *)(v0 + 952);
      uint64_t v19 = *(void *)(v0 + 960);
      *(void *)(v0 + 1128) = v19;
      uint64_t v36 = *(void *)(v0 + 976);
      uint64_t v37 = *(void *)(v0 + 968);
      uint64_t v20 = *(void *)(v0 + 984);
      *(void *)(v0 + 1136) = v20;
      uint64_t v33 = *(void *)(v0 + 992);
      char v34 = *(unsigned char *)(v0 + 1000);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      UUID.init()();
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v23 = v22;
      *(void *)(v0 + 1144) = v22;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 832) = 0;
      *(unsigned char *)(v0 + 840) = 1;
      *(void *)(v0 + 848) = v21;
      *(void *)(v0 + 856) = v23;
      *(void *)(v0 + 864) = v33;
      *(void *)(v0 + 872) = v35;
      *(void *)(v0 + 880) = v19;
      *(void *)(v0 + 888) = v38;
      *(void *)(v0 + 896) = v18;
      *(void *)(v0 + 904) = v37;
      *(void *)(v0 + 912) = v36;
      *(void *)(v0 + 920) = v20;
      *(unsigned char *)(v0 + 928) = v34;
      *(_WORD *)(v0 + 929) = v39;
      uint64_t v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 1152) = v24;
      *uint64_t v24 = v0;
      v24[1] = sub_10009EA24;
      return sub_1000A029C(v0 + 832, v34, 0xD000000000000012, 0x8000000100185D10, v39);
    }
  }
}

uint64_t sub_10009EA24()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 1160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10009F078, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10009EBA8()
{
  uint64_t v1 = *(void *)(v0 + 1072);
  uint64_t v2 = *(void *)(v0 + 1064);
  uint64_t v3 = *(void *)(v0 + 1056);
  uint64_t v4 = *(void *)(v0 + 1040);
  long long v5 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 376) = v5;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 800);
  long long v6 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 312) = v6;
  long long v7 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 344) = v7;
  long long v8 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 248) = v8;
  long long v9 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 280) = v9;
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 809);
  *(void *)(v0 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(v0 + 432) = 0;
  *(_WORD *)(v0 + 440) = 256;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 16);
  sub_10001547C(v0 + 448);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 448);
  return _swift_task_switch(sub_10009ECF0, 0, 0);
}

uint64_t sub_10009ECF0()
{
  sub_1000B2218();
  swift_allocError();
  *(_OWORD *)uint64_t v1 = xmmword_10017C740;
  *(unsigned char *)(v1 + 16) = 2;
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10009EDB0()
{
  uint64_t v1 = *(void *)(v0 + 1112);
  *(void *)(v0 + 1168) = v1;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    long long v5 = (uint8_t *)swift_slowAlloc();
    long long v6 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1008) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unpacking handed off token failed: %@", v5, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = *(void *)(v0 + 1048);

  swift_errorRetain();
  sub_10009485C(4, 0, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    0,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v9 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 784) = v9;
  *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 608);
  *(_OWORD *)(v0 + 809) = *(_OWORD *)(v0 + 617);
  long long v10 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 720) = v10;
  long long v11 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 752) = v11;
  long long v12 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 656) = v12;
  long long v13 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 688) = v13;
  char v14 = sub_100012D78((void *)(v8 + 232), *(void *)(v8 + 256));
  uint64_t v15 = *v14;
  *(void *)(v0 + 1176) = *v14;
  return _swift_task_switch(sub_10009EBA8, v15, 0);
}

uint64_t sub_10009F078()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    long long v5 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1016) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to register conversion: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10009F2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v6 = swift_task_alloc();
  void v4[6] = v6;
  *(void *)uint64_t v6 = v4;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(unsigned char *)(v6 + 72) = 2;
  *(void *)(v6 + 8) = sub_10009F370;
  return _swift_task_switch(sub_10009FC50, 0, 0);
}

uint64_t sub_10009F370(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 64) = a1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_10009F4A4, 0, 0);
  }
}

uint64_t sub_10009F4A4()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  if (v1 == 2)
  {
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100012E74(v2, (uint64_t)qword_1001E6028);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      long long v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No ad information found. Aborting flow", v5, 2u);
      swift_slowDealloc();
    }

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    char v8 = v1 & 1;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000710A0;
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v12 = *(void *)(v0 + 16);
    uint64_t v11 = *(void *)(v0 + 24);
    return sub_1000A1EB4(v12, v11, v10, v8);
  }
}

unint64_t sub_10009F644(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012960(&qword_1001E2E98);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100036994(v6, (uint64_t)v15, &qword_1001E2EA0);
    unint64_t result = sub_1000AEEE4((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100037488(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009F788(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012960(&qword_1001E2EF0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 48);
  while (1)
  {
    unsigned __int8 v5 = *((unsigned char *)v4 - 16);
    uint64_t v7 = *(v4 - 1);
    uint64_t v6 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000AEF28(v5);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    long long v10 = (void *)(v2[7] + 16 * result);
    *long long v10 = v7;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009F898(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012960(&qword_1001E2E60);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100036994(v6, (uint64_t)&v15, &qword_1001E2E68);
    uint64_t v7 = v15;
    unint64_t v8 = v16;
    unint64_t result = sub_1000AF0C8(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100037488(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009F9D0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012960(&qword_1001E2E28);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000AF1FC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009FAF4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012960(&qword_1001E2E20);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100036994(v6, (uint64_t)&v15, &qword_1001E2E90);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000AF1FC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100037488(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10009FC2C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 72) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  return _swift_task_switch(sub_10009FC50, 0, 0);
}

uint64_t sub_10009FC50()
{
  uint64_t v2 = v0[2];
  int v1 = (void *)v0[3];
  uint64_t v4 = v1[3];
  uint64_t v3 = v1[4];
  v0[4] = v3;
  uint64_t v5 = (void *)v1[5];
  v0[5] = v5;
  uint64_t v6 = swift_allocObject();
  v0[6] = v6;
  *(void *)(v6 + 16) = v2;
  char v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4958 + dword_1001E4958);
  swift_bridgeObjectRetain();
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  void *v8 = v0;
  v8[1] = sub_10009FD6C;
  return v10((uint64_t)sub_1000B2F60, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_10009FD6C(uint64_t a1)
{
  uint64_t v3 = *(void **)(*v2 + 40);
  uint64_t v4 = *v2;
  *(void *)(v4 + 64) = a1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    return _swift_task_switch(sub_10009FF00, 0, 0);
  }
}

uint64_t sub_10009FF00()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (*(void *)(v1 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v2 = Hasher._finalize()();
    uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v4 = v2 & ~v3;
    if ((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
    {
      uint64_t v5 = ~v3;
      uint64_t v6 = *(void *)(v0 + 64);
      while (*(unsigned char *)(*(void *)(v6 + 48) + v4) != 1)
      {
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v7) {
          goto LABEL_23;
        }
        unint64_t v4 = (v4 + 1) & v5;
        if (((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
          goto LABEL_7;
        }
      }
      goto LABEL_20;
    }
  }
LABEL_7:
  int v8 = *(unsigned __int8 *)(v0 + 72);
  if (v8 == 2)
  {
    uint64_t v9 = *(void *)(v0 + 64);
  }
  else
  {
    if (v8)
    {
LABEL_20:
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      uint64_t v18 = 1;
      goto LABEL_28;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)(v0 + 64);
    if (v19) {
      goto LABEL_23;
    }
  }
  if (*(void *)(v1 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v12 = v10 & ~v11;
    uint64_t v13 = v9 + 56;
    unint64_t v14 = *(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8));
    uint64_t v15 = *(void *)(v0 + 64);
    if ((v14 >> v12))
    {
      uint64_t v16 = ~v11;
      while ((*(unsigned char *)(*(void *)(v15 + 48) + v12) & 1) != 0)
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_27;
        }
        unint64_t v12 = (v12 + 1) & v16;
        if (((*(void *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
  }
LABEL_15:
  swift_bridgeObjectRelease();
  if (v8 == 2) {
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v0 + 72) & 1) == 0)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    goto LABEL_28;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  if ((v20 & 1) == 0) {
LABEL_16:
  }
    uint64_t v18 = 2;
LABEL_28:
  uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v21(v18);
}

uint64_t sub_1000A029C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 1320) = v5;
  *(unsigned char *)(v6 + 451) = a5;
  *(void *)(v6 + 1312) = a4;
  *(void *)(v6 + 1304) = a3;
  *(unsigned char *)(v6 + 450) = a2;
  *(void *)(v6 + 1296) = a1;
  uint64_t v7 = sub_100012960(&qword_1001E1370);
  *(void *)(v6 + 1328) = v7;
  *(void *)(v6 + 1336) = *(void *)(v7 - 8);
  *(void *)(v6 + 1344) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v6 + 1352) = v8;
  *(void *)(v6 + 1360) = *(void *)(v8 - 8);
  *(void *)(v6 + 1368) = swift_task_alloc();
  return _swift_task_switch(sub_1000A03D0, 0, 0);
}

uint64_t sub_1000A03D0()
{
  uint64_t v39 = v0;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 1376) = sub_100012E74(v1, (uint64_t)qword_1001E6028);
  Swift::Int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 450);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = 0x6F6C6E776F646572;
    unint64_t v7 = 0xED0000746E656D65;
    if (v4 == 1) {
      unint64_t v7 = 0xEA00000000006461;
    }
    else {
      uint64_t v6 = 0x6761676E652D6572;
    }
    if (v4) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 0x64616F6C6E776F64;
    }
    if (v4) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = 0xE800000000000000;
    }
    char v10 = *(unsigned char *)(v0 + 451);
    *(void *)(v0 + 1288) = sub_100147668(v8, v9, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    if (v10) {
      uint64_t v11 = 0x69746375646F7270;
    }
    else {
      uint64_t v11 = 0x6D706F6C65766564;
    }
    if (v10) {
      unint64_t v12 = 0xEA00000000006E6FLL;
    }
    else {
      unint64_t v12 = 0xEB00000000746E65;
    }
    *(void *)(v0 + 1272) = sub_100147668(v11, v12, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registering '%s' conversion for environment: '%s'", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (ConversionType.isInstall.getter(*(unsigned char *)(v0 + 450)))
  {
    uint64_t v13 = *(void *)(v0 + 1296);
    sub_100012D78((void *)(*(void *)(v0 + 1320) + 48), *(void *)(*(void *)(v0 + 1320) + 72));
    uint64_t v14 = *(void *)(v13 + 32);
    *(void *)(v0 + 1384) = v14;
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 1392) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1000A0898;
    return sub_1000F3BFC(v14, 0, 1);
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 1296);
    uint64_t v18 = *(void *)(v17 + 32);
    *(void *)(v0 + 1408) = v18;
    uint64_t v19 = *(void *)(v0 + 1320);
    uint64_t v20 = *(void *)v17;
    char v21 = *(unsigned char *)(v17 + 8);
    uint64_t v22 = *(void *)(v17 + 16);
    *(void *)(v0 + 1416) = v22;
    uint64_t v23 = *(void *)(v17 + 24);
    *(void *)(v0 + 14++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v23;
    uint64_t v24 = *(void *)(v17 + 48);
    uint64_t v35 = *(void *)(v17 + 40);
    uint64_t v36 = v20;
    uint64_t v25 = *(void *)(v17 + 64);
    uint64_t v33 = *(void *)(v17 + 72);
    uint64_t v34 = *(void *)(v17 + 56);
    uint64_t v26 = *(void *)(v17 + 88);
    uint64_t v32 = *(void *)(v17 + 80);
    char v30 = *(unsigned char *)(v17 + 97);
    char v31 = *(unsigned char *)(v17 + 96);
    *(unsigned char *)(v0 + 1560) = v21;
    sub_1000B25DC(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 1432) = *(void *)(v19 + 8);
    long long v27 = *(void **)(v19 + 16);
    *(void *)(v0 + 1440) = v27;
    uint64_t v28 = swift_allocObject();
    *(void *)(v0 + 1448) = v28;
    *(void *)(v28 + 16) = v36;
    *(unsigned char *)(v28 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v0 + 1560);
    *(void *)(v28 + 32) = v22;
    *(void *)(v28 + 40) = v23;
    *(void *)(v28 + 48) = v18;
    *(void *)(v28 + 56) = v35;
    *(void *)(v28 + 64) = v24;
    *(void *)(v28 + 72) = v34;
    *(void *)(v28 + 80) = v25;
    *(void *)(v28 + 88) = v33;
    *(void *)(v28 + 96) = v32;
    *(void *)(v28 + 104) = v26;
    *(unsigned char *)(v28 + 112) = v31;
    *(unsigned char *)(v28 + 113) = v30;
    uint64_t v37 = (uint64_t (*)(void))((char *)&dword_1001E48A0 + dword_1001E48A0);
    *(unsigned char *)(v28 + 114) = 1;
    swift_bridgeObjectRetain();
    v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 1456) = v29;
    *long long v29 = v0;
    v29[1] = sub_1000A0E4C;
    return v37();
  }
}

uint64_t sub_1000A0898()
{
  *(void *)(*(void *)v1 + 1400) = v0;
  swift_task_dealloc();
  if (v0) {
    Swift::Int v2 = sub_1000A0BAC;
  }
  else {
    Swift::Int v2 = sub_1000A09AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A09AC()
{
  uint64_t v1 = *(void *)(v0 + 1384);
  *(void *)(v0 + 1408) = v1;
  uint64_t v2 = *(void *)(v0 + 1320);
  uint64_t v3 = *(void *)(v0 + 1296);
  uint64_t v4 = *(void *)v3;
  char v5 = *(unsigned char *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  *(void *)(v0 + 1416) = v6;
  uint64_t v7 = *(void *)(v3 + 24);
  *(void *)(v0 + 14++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  uint64_t v8 = *(void *)(v3 + 48);
  uint64_t v20 = *(void *)(v3 + 40);
  uint64_t v21 = v4;
  uint64_t v9 = *(void *)(v3 + 64);
  uint64_t v18 = *(void *)(v3 + 72);
  uint64_t v19 = *(void *)(v3 + 56);
  uint64_t v10 = *(void *)(v3 + 88);
  uint64_t v17 = *(void *)(v3 + 80);
  char v15 = *(unsigned char *)(v3 + 97);
  char v16 = *(unsigned char *)(v3 + 96);
  *(unsigned char *)(v0 + 1560) = v5;
  sub_1000B25DC(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1432) = *(void *)(v2 + 8);
  uint64_t v11 = *(void **)(v2 + 16);
  *(void *)(v0 + 1440) = v11;
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 1448) = v12;
  *(void *)(v12 + 16) = v21;
  *(unsigned char *)(v12 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v0 + 1560);
  *(void *)(v12 + 32) = v6;
  *(void *)(v12 + 40) = v7;
  *(void *)(v12 + 48) = v1;
  *(void *)(v12 + 56) = v20;
  *(void *)(v12 + 64) = v8;
  *(void *)(v12 + 72) = v19;
  *(void *)(v12 + 80) = v9;
  *(void *)(v12 + 88) = v18;
  *(void *)(v12 + 96) = v17;
  *(void *)(v12 + 104) = v10;
  *(unsigned char *)(v12 + 112) = v16;
  *(unsigned char *)(v12 + 113) = v15;
  uint64_t v22 = (uint64_t (*)(void))((char *)&dword_1001E48A0 + dword_1001E48A0);
  *(unsigned char *)(v12 + 114) = 1;
  swift_bridgeObjectRetain();
  v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 1456) = v13;
  void *v13 = v0;
  v13[1] = sub_1000A0E4C;
  return v22();
}

uint64_t sub_1000A0BAC()
{
  uint64_t v1 = *(void *)(v0 + 1400);
  *(void *)(v0 + 1528) = v1;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    char v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1280) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to register conversion: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 1320);
  unsigned int v8 = *(unsigned __int8 *)(v0 + 450);
  uint64_t v9 = *(void *)(v0 + 1296);

  swift_errorRetain();
  sub_10009485C(4, 0, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1080), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v8 > 1,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v10 = *(_OWORD *)(v0 + 1224);
  *(_OWORD *)(v0 + 1016) = *(_OWORD *)(v0 + 1208);
  *(_OWORD *)(v0 + 1032) = v10;
  *(_OWORD *)(v0 + 1048) = *(_OWORD *)(v0 + 1240);
  *(_OWORD *)(v0 + 1057) = *(_OWORD *)(v0 + 1249);
  long long v11 = *(_OWORD *)(v0 + 1160);
  *(_OWORD *)(v0 + 952) = *(_OWORD *)(v0 + 1144);
  *(_OWORD *)(v0 + 968) = v11;
  long long v12 = *(_OWORD *)(v0 + 1192);
  *(_OWORD *)(v0 + 984) = *(_OWORD *)(v0 + 1176);
  *(_OWORD *)(v0 + 1000) = v12;
  long long v13 = *(_OWORD *)(v0 + 1096);
  *(_OWORD *)(v0 + 888) = *(_OWORD *)(v0 + 1080);
  *(_OWORD *)(v0 + 904) = v13;
  long long v14 = *(_OWORD *)(v0 + 1128);
  *(_OWORD *)(v0 + 920) = *(_OWORD *)(v0 + 1112);
  *(_OWORD *)(v0 + 936) = v14;
  char v15 = sub_100012D78((void *)(v7 + 232), *(void *)(v7 + 256));
  *(void *)(v0 + 1536) = *(void *)(v9 + 32);
  uint64_t v16 = *v15;
  *(void *)(v0 + 1544) = *v15;
  return _swift_task_switch(sub_1000A17AC, v16, 0);
}

uint64_t sub_1000A0E4C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 1464) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void **)(v2 + 1440);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v4 = sub_1000A1974;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v4 = sub_1000A0FDC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A0FDC()
{
  char v1 = *(unsigned char *)(v0 + 451);
  id v2 = [self standardUserDefaults];
  char v3 = sub_100088604(0, (void *)7);

  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0 && (v3 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      char v5 = sub_100012D78((void *)(*(void *)(v0 + 1320) + 232), *(void *)(*(void *)(v0 + 1320) + 256));
      uint64_t v6 = *v5;
      *(void *)(v0 + 1512) = *v5;
      uint64_t v7 = (uint64_t)sub_1000A14B4;
      uint64_t v8 = 0;
      return _swift_task_switch(v7, v6, v8);
    }
  }
  static Date.now.getter();
  uint64_t v7 = Date.timeIntervalSince1970.getter();
  double v10 = v9 * 1000.0;
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v10 <= -1.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v10 >= 1.84467441e19)
  {
LABEL_16:
    __break(1u);
    return _swift_task_switch(v7, v6, v8);
  }
  long long v22 = *(_OWORD *)(v0 + 1416);
  uint64_t v11 = *(void *)(v0 + 1408);
  long long v12 = *(uint64_t **)(v0 + 1320);
  char v13 = *(unsigned char *)(v0 + 450);
  unint64_t v14 = (unint64_t)v10;
  (*(void (**)(void, void))(*(void *)(v0 + 1360) + 8))(*(void *)(v0 + 1368), *(void *)(v0 + 1352));
  *(unsigned char *)(v0 + 1552) = 1;
  uint64_t v16 = *v12;
  uint64_t v15 = v12[1];
  *(void *)(v0 + 1472) = v15;
  uint64_t v17 = (void *)v12[2];
  *(void *)(v0 + 1480) = v17;
  uint64_t v18 = swift_allocObject();
  *(void *)(v0 + 1488) = v18;
  *(void *)(v18 + 16) = 0;
  *(unsigned char *)(v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v0 + 1552);
  *(_DWORD *)(v18 + 25) = *(_DWORD *)(v0 + 233);
  *(_DWORD *)(v18 + 28) = *(_DWORD *)(v0 + 236);
  *(_OWORD *)(v18 + 32) = v22;
  *(void *)(v18 + 48) = v11;
  *(unsigned char *)(v18 + 56) = v13;
  *(_DWORD *)(v18 + 57) = *(_DWORD *)(v0 + 226);
  *(_DWORD *)(v18 + 60) = *(_DWORD *)(v0 + 229);
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48A0
                                                                                     + dword_1001E48A0);
  *(void *)(v18 + 64) = v14;
  swift_bridgeObjectRetain();
  id v19 = v17;
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 1496) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_1000A12D8;
  return v23((uint64_t)v23, (uint64_t)sub_1000B26E0, v18, v16, v15, (uint64_t)v19);
}

uint64_t sub_1000A12D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1504) = v0;
  swift_task_dealloc();
  char v3 = *(void **)(v2 + 1480);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    char v4 = sub_1000A1C14;
  }
  else {
    char v4 = sub_1000A1440;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A1440()
{
  char v1 = sub_100012D78((void *)(*(void *)(v0 + 1320) + 232), *(void *)(*(void *)(v0 + 1320) + 256));
  uint64_t v2 = *v1;
  *(void *)(v0 + 1512) = *v1;
  return _swift_task_switch(sub_1000A14B4, v2, 0);
}

uint64_t sub_1000A14B4()
{
  uint64_t v1 = *(void *)(v0 + 1424);
  uint64_t v2 = *(void *)(v0 + 1344);
  uint64_t v3 = *(void *)(v0 + 1336);
  uint64_t v4 = *(void *)(v0 + 1328);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 1408);
  *(void *)(v0 + 256) = v1;
  sub_1000B2638(v0 + 240);
  sub_1000367C8(v0 + 240, v0 + 16);
  swift_bridgeObjectRetain();
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_1000A15B0, 0, 0);
}

uint64_t sub_1000A15B0()
{
  char v1 = *(unsigned char *)(v0 + 451);
  sub_100012D78((void *)(*(void *)(v0 + 1320) + 48), *(void *)(*(void *)(v0 + 1320) + 72));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 1520) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000A1674;
  uint64_t v3 = *(void *)(v0 + 1424);
  uint64_t v4 = *(void *)(v0 + 1416);
  uint64_t v5 = *(void *)(v0 + 1408);
  uint64_t v6 = *(void *)(v0 + 1312);
  uint64_t v7 = *(void *)(v0 + 1304);
  char v8 = *(unsigned char *)(v0 + 450);
  return sub_1000EBC08(v5, v4, v3, v8, v7, v6, v1 & 1);
}

uint64_t sub_1000A1674()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000A17AC()
{
  uint64_t v1 = *(void *)(v0 + 1536);
  uint64_t v2 = *(void *)(v0 + 1344);
  uint64_t v3 = *(void *)(v0 + 1336);
  uint64_t v4 = *(void *)(v0 + 1328);
  long long v5 = *(_OWORD *)(v0 + 1032);
  *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 1016);
  *(_OWORD *)(v0 + 816) = v5;
  *(_OWORD *)(v0 + 832) = *(_OWORD *)(v0 + 1048);
  *(_OWORD *)(v0 + 841) = *(_OWORD *)(v0 + 1057);
  long long v6 = *(_OWORD *)(v0 + 968);
  *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 952);
  *(_OWORD *)(v0 + 752) = v6;
  long long v7 = *(_OWORD *)(v0 + 1000);
  *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 984);
  *(_OWORD *)(v0 + 784) = v7;
  long long v8 = *(_OWORD *)(v0 + 904);
  *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 888);
  *(_OWORD *)(v0 + 688) = v8;
  long long v9 = *(_OWORD *)(v0 + 936);
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 920);
  *(_OWORD *)(v0 + 720) = v9;
  *(void *)(v0 + 864) = v1;
  *(void *)(v0 + 872) = 0;
  *(_WORD *)(v0 + 880) = 256;
  sub_10003675C(v0 + 672);
  sub_1000367C8(v0 + 672, v0 + 456);
  sub_10001547C(v0 + 1080);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100036824(v0 + 1080);
  return _swift_task_switch(sub_1000A18F4, 0, 0);
}

uint64_t sub_1000A18F4()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000A1974()
{
  uint64_t v1 = *(void *)(v0 + 1464);
  *(void *)(v0 + 1528) = v1;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    long long v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1280) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to register conversion: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 1320);
  unsigned int v8 = *(unsigned __int8 *)(v0 + 450);
  uint64_t v9 = *(void *)(v0 + 1296);

  swift_errorRetain();
  sub_10009485C(4, 0, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1080), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v8 > 1,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v10 = *(_OWORD *)(v0 + 1224);
  *(_OWORD *)(v0 + 1016) = *(_OWORD *)(v0 + 1208);
  *(_OWORD *)(v0 + 1032) = v10;
  *(_OWORD *)(v0 + 1048) = *(_OWORD *)(v0 + 1240);
  *(_OWORD *)(v0 + 1057) = *(_OWORD *)(v0 + 1249);
  long long v11 = *(_OWORD *)(v0 + 1160);
  *(_OWORD *)(v0 + 952) = *(_OWORD *)(v0 + 1144);
  *(_OWORD *)(v0 + 968) = v11;
  long long v12 = *(_OWORD *)(v0 + 1192);
  *(_OWORD *)(v0 + 984) = *(_OWORD *)(v0 + 1176);
  *(_OWORD *)(v0 + 1000) = v12;
  long long v13 = *(_OWORD *)(v0 + 1096);
  *(_OWORD *)(v0 + 888) = *(_OWORD *)(v0 + 1080);
  *(_OWORD *)(v0 + 904) = v13;
  long long v14 = *(_OWORD *)(v0 + 1128);
  *(_OWORD *)(v0 + 920) = *(_OWORD *)(v0 + 1112);
  *(_OWORD *)(v0 + 936) = v14;
  uint64_t v15 = sub_100012D78((void *)(v7 + 232), *(void *)(v7 + 256));
  *(void *)(v0 + 1536) = *(void *)(v9 + 32);
  uint64_t v16 = *v15;
  *(void *)(v0 + 1544) = *v15;
  return _swift_task_switch(sub_1000A17AC, v16, 0);
}

uint64_t sub_1000A1C14()
{
  uint64_t v1 = *(void *)(v0 + 1504);
  *(void *)(v0 + 1528) = v1;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    long long v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1280) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to register conversion: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 1320);
  unsigned int v8 = *(unsigned __int8 *)(v0 + 450);
  uint64_t v9 = *(void *)(v0 + 1296);

  swift_errorRetain();
  sub_10009485C(4, 0, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1080), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v8 > 1,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v10 = *(_OWORD *)(v0 + 1224);
  *(_OWORD *)(v0 + 1016) = *(_OWORD *)(v0 + 1208);
  *(_OWORD *)(v0 + 1032) = v10;
  *(_OWORD *)(v0 + 1048) = *(_OWORD *)(v0 + 1240);
  *(_OWORD *)(v0 + 1057) = *(_OWORD *)(v0 + 1249);
  long long v11 = *(_OWORD *)(v0 + 1160);
  *(_OWORD *)(v0 + 952) = *(_OWORD *)(v0 + 1144);
  *(_OWORD *)(v0 + 968) = v11;
  long long v12 = *(_OWORD *)(v0 + 1192);
  *(_OWORD *)(v0 + 984) = *(_OWORD *)(v0 + 1176);
  *(_OWORD *)(v0 + 1000) = v12;
  long long v13 = *(_OWORD *)(v0 + 1096);
  *(_OWORD *)(v0 + 888) = *(_OWORD *)(v0 + 1080);
  *(_OWORD *)(v0 + 904) = v13;
  long long v14 = *(_OWORD *)(v0 + 1128);
  *(_OWORD *)(v0 + 920) = *(_OWORD *)(v0 + 1112);
  *(_OWORD *)(v0 + 936) = v14;
  uint64_t v15 = sub_100012D78((void *)(v7 + 232), *(void *)(v7 + 256));
  *(void *)(v0 + 1536) = *(void *)(v9 + 32);
  uint64_t v16 = *v15;
  *(void *)(v0 + 1544) = *v15;
  return _swift_task_switch(sub_1000A17AC, v16, 0);
}