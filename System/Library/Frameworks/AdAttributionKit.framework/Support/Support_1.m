uint64_t sub_1000A1EB4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  *(void *)(v5 + 3552) = v4;
  *(unsigned char *)(v5 + 686) = a4;
  *(void *)(v5 + 3544) = a3;
  *(void *)(v5 + 3536) = a2;
  *(void *)(v5 + 3528) = a1;
  v6 = type metadata accessor for UUID();
  *(void *)(v5 + 3560) = v6;
  *(void *)(v5 + 3568) = *(void *)(v6 - 8);
  *(void *)(v5 + 3576) = swift_task_alloc();
  v7 = sub_100012960(&qword_1001E1370);
  *(void *)(v5 + 3584) = v7;
  *(void *)(v5 + 3592) = *(void *)(v7 - 8);
  *(void *)(v5 + 3600) = swift_task_alloc();
  v8 = type metadata accessor for SKANUTClient();
  *(void *)(v5 + 3608) = v8;
  *(void *)(v5 + 3616) = *(void *)(v8 - 8);
  *(void *)(v5 + 3624) = swift_task_alloc();
  v9 = type metadata accessor for String.Encoding();
  *(void *)(v5 + 3632) = v9;
  *(void *)(v5 + 3640) = *(void *)(v9 - 8);
  *(void *)(v5 + 3648) = swift_task_alloc();
  return _swift_task_switch(sub_1000A209C, 0, 0);
}

uint64_t sub_1000A209C()
{
  v1 = (char *)(v0 + 899);
  sub_10009485C(5, 5, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1912), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
    0,
    1u,
    0,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(void *)(v0 + 3656) = *(void *)(v0 + 1920);
  *(_OWORD *)(v0 + 3664) = *(_OWORD *)(v0 + 1928);
  *(_OWORD *)(v0 + 3680) = *(_OWORD *)(v0 + 1944);
  *(void *)(v0 + 3696) = *(void *)(v0 + 1960);
  *(void *)(v0 + 3704) = *(void *)(v0 + 1976);
  *(void *)(v0 + 3712) = *(void *)(v0 + 1984);
  *(unsigned char *)(v0 + 687) = *(unsigned char *)(v0 + 1912);
  *(unsigned char *)(v0 + 898) = *(unsigned char *)(v0 + 1913);
  *(_DWORD *)(v0 + 226) = *(_DWORD *)(v0 + 1914);
  *(_WORD *)(v0 + 230) = *(_WORD *)(v0 + 1918);
  *(void *)(v0 + 3720) = *(void *)(v0 + 1968);
  *(_DWORD *)(v0 + 899) = *(_DWORD *)(v0 + 1992);
  *(unsigned char *)(v0 + 903) = *(unsigned char *)(v0 + 1996);
  *(unsigned char *)(v0 + 1114) = *(unsigned char *)(v0 + 1997);
  *(_WORD *)(v0 + 658) = *(_WORD *)(v0 + 1998);
  *(void *)(v0 + 3728) = *(void *)(v0 + 2000);
  *(unsigned char *)(v0 + 4160) = *(unsigned char *)(v0 + 2008);
  *(_DWORD *)(v0 + 674) = *(_DWORD *)(v0 + 2009);
  *(_DWORD *)(v0 + 677) = *(_DWORD *)(v0 + 2012);
  *(void *)(v0 + 3736) = *(void *)(v0 + 2016);
  *(unsigned char *)(v0 + 4152) = *(unsigned char *)(v0 + 2024);
  *(unsigned char *)(v0 + 1115) = *(unsigned char *)(v0 + 2025);
  *(_WORD *)(v0 + 446) = *(_WORD *)(v0 + 2030);
  *(_DWORD *)(v0 + 442) = *(_DWORD *)(v0 + 2026);
  *(void *)(v0 + 3744) = *(void *)(v0 + 2032);
  *(unsigned char *)(v0 + 4184) = *(unsigned char *)(v0 + 2040);
  *(_DWORD *)(v0 + 670) = *(_DWORD *)(v0 + 2044);
  *(_DWORD *)(v0 + 667) = *(_DWORD *)(v0 + 2041);
  *(void *)(v0 + 3752) = *(void *)(v0 + 2048);
  *(unsigned char *)(v0 + 4168) = *(unsigned char *)(v0 + 2056);
  *(_WORD *)(v0 + 1116) = *(_WORD *)(v0 + 2057);
  *(unsigned char *)(v0 + 685) = *(unsigned char *)(v0 + 2063);
  *(_DWORD *)(v0 + 681) = *(_DWORD *)(v0 + 2059);
  *(void *)(v0 + 3760) = *(void *)(v0 + 2064);
  *(unsigned char *)(v0 + 4176) = *(unsigned char *)(v0 + 2072);
  *(_DWORD *)(v0 + 663) = *(_DWORD *)(v0 + 2076);
  *(_DWORD *)(v0 + 660) = *(_DWORD *)(v0 + 2073);
  v89 = *(void **)(v0 + 2080);
  uint64_t v2 = *(void *)(v0 + 2088);
  *(unsigned char *)(v0 + 1118) = *(unsigned char *)(v0 + 2096);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static String.Encoding.utf8.getter();
  uint64_t v3 = String.init(data:encoding:)();
  *(void *)(v0 + 3768) = v4;
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = v3;
    sub_1000A5260(v3, v4, v0 + 3168);
    uint64_t v81 = v6;
    uint64_t v38 = *(void *)(v0 + 3624);
    uint64_t v39 = *(void *)(v0 + 3616);
    uint64_t v84 = *(void *)(v0 + 3608);
    sub_100059F98(v0 + 2080, v0 + 3472, &qword_1001E2CA8);
    sub_1000B2DC0(v0 + 3168);
    id v40 = sub_1000A55BC();
    *(void *)(v0 + 3776) = v40;
    *(void *)(v0 + 3784) = v41;
    uint64_t v88 = v41;
    swift_bridgeObjectRetain();
    sub_10008A524(v0 + 3472);
    uint64_t v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v42 + 16) = 32;
    *(_OWORD *)(v42 + 48) = 0u;
    *(_OWORD *)(v42 + 32) = 0u;
    v43 = (unsigned char *)(v42 + 32);
    SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, (void *)(v42 + 32));
    uint64_t v44 = sub_1000B0E50(v43, 32);
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 3792) = v44;
    *(void *)(v0 + 3800) = v46;
    Swift::String v47 = Data.base64EncodedString(options:)(0);
    *(Swift::String *)(v0 + 3808) = v47;
    v48 = (objc_class *)type metadata accessor for PersistentTokenHandler();
    v49 = (char *)objc_allocWithZone(v48);
    *(void *)&v49[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_timestamp] = 0;
    sub_10003CF30(v44, v46);
    sub_10003CF30(v44, v46);
    v50 = v49;
    SKANUTClient.init(privateInput:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(&v50[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_utClient], v38, v84);
    v51 = (uint64_t *)&v50[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_privateInput];
    uint64_t *v51 = v44;
    v51[1] = v46;
    sub_10003CF30(v44, v46);

    *(void *)(v0 + 3424) = v50;
    *(void *)(v0 + 3432) = v48;
    id v52 = objc_msgSendSuper2((objc_super *)(v0 + 3424), "init");
    *(void *)(v0 + 3824) = v52;
    sub_100020930(v44, v46);
    v53 = (char *)v52;
    uint64_t v54 = SKANUTClient.blindedElement()();
    unint64_t v56 = v55;
    Swift::String v57 = Data.base64EncodedString(options:)(0);
    *(void *)(v0 + 3832) = v57._object;
    sub_100020930(v54, v56);
    v91 = v53;
    *(void *)(v0 + 3840) = Data.base64EncodedString(options:)(0)._object;
    unint64_t v58 = sub_1000BDB60();
    *(void *)(v0 + 3848) = v58;
    if ((v59 & 1) == 0)
    {
      uint64_t v60 = *(void *)(v0 + 3544);
      *(void *)&v53[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_timestamp] = v58;
      *(void *)(v0 + 3256) = v81;
      *(void *)(v0 + 3264) = v5;
      *(void *)(v0 + 3272) = v60;
      *(Swift::String *)(v0 + 3280) = v57;
      *(void *)(v0 + 3296) = v58;
      v92 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001E3908 + dword_1001E3908);
      swift_bridgeObjectRetain();
      v61 = (void *)swift_task_alloc();
      *(void *)(v0 + 3856) = v61;
      void *v61 = v0;
      v61[1] = sub_1000A2B7C;
      return v92(v0 + 3304, v0 + 3256);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B2830();
    uint64_t v7 = swift_allocError();
    char v16 = 1;
    unsigned char *v62 = 1;
    swift_willThrow();
    uint64_t v2 = v88;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B2E2C(v0 + 3168);
    uint64_t v9 = (uint64_t)v91;

    sub_100020930(v44, v46);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v0 + 3248);
    uint64_t v13 = *(void *)(v0 + 3232);
    uint64_t v12 = *(void *)(v0 + 3208);
    uint64_t v11 = *(void *)(v0 + 3192);
    uint64_t v10 = *(void *)(v0 + 3176);
    v1 = (char *)(v0 + 899);
    object = v47._object;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B2218();
    uint64_t v7 = swift_allocError();
    *(_OWORD *)uint64_t v8 = xmmword_10017C750;
    *(unsigned char *)(v8 + 16) = 2;
    uint64_t v9 = v7;
    swift_willThrow();
    char v16 = 0;
    id v40 = v89;
  }
  *(void *)(v0 + 4088) = v14;
  *(void *)(v0 + 4080) = v13;
  *(void *)(v0 + 4072) = v12;
  *(void *)(v0 + 4064) = v11;
  *(void *)(v0 + 4056) = v10;
  *(void *)(v0 + 4048) = object;
  *(void *)(v0 + 4040) = v9;
  v1[817] = 0;
  v1[816] = v16;
  *(void *)(v0 + 4016) = v7;
  *(void *)(v0 + 4008) = v2;
  *(void *)(v0 + 4000) = v40;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  id v90 = v40;
  v86 = v1 + 3269;
  v87 = v1 + 3253;
  v83 = v1 + 3261;
  v85 = v1 + 3277;
  v82 = v1 + 3285;
  uint64_t v17 = type metadata accessor for Logger();
  sub_100012E74(v17, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = (void *)swift_slowAlloc();
    *(_DWORD *)v20 = 138412290;
    swift_errorRetain();
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3488) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v22;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "POD exchange error %@", v20, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  char v80 = *(unsigned char *)(v0 + 1118);
  uint64_t v79 = *(void *)(v0 + 3760);
  __int16 v78 = *(_WORD *)(v0 + 1116);
  uint64_t v77 = *(void *)(v0 + 3752);
  uint64_t v76 = *(void *)(v0 + 3744);
  char v75 = *(unsigned char *)(v0 + 1115);
  uint64_t v73 = *(void *)(v0 + 3728);
  uint64_t v74 = *(void *)(v0 + 3736);
  char v71 = *(unsigned char *)(v0 + 903);
  char v72 = *(unsigned char *)(v0 + 1114);
  char v66 = *(unsigned char *)(v0 + 898);
  char v64 = *(unsigned char *)(v0 + 687);
  uint64_t v69 = *(void *)(v0 + 3712);
  uint64_t v70 = *(void *)(v0 + 3720);
  uint64_t v68 = *(void *)(v0 + 3704);
  long long v67 = *(_OWORD *)(v0 + 3688);
  uint64_t v23 = *(void *)(v0 + 3552);
  int v65 = *(_DWORD *)(v0 + 899);

  uint64_t v24 = sub_100094708(v7);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 4096) = v24;
  *(void *)(v0 + 4104) = v26;
  *(void *)(v0 + 4112) = v28;
  *(void *)(v0 + 4120) = v30;
  v31 = sub_100012D78((void *)(v23 + 232), *(void *)(v23 + 256));
  char v32 = *v83;
  char v33 = *v87;
  char v34 = *v82;
  char v35 = *v86;
  char v36 = *v85;
  *(unsigned char *)(v0 + 2872) = v64;
  *(unsigned char *)(v0 + 2873) = v66;
  *(void *)(v0 + 2880) = v24;
  *(void *)(v0 + 2888) = v26;
  *(void *)(v0 + 2896) = v28;
  *(void *)(v0 + 2904) = v30;
  *(_OWORD *)(v0 + 2912) = v67;
  *(void *)(v0 + 2928) = v70;
  *(void *)(v0 + 2936) = v68;
  *(void *)(v0 + 2944) = v69;
  *(_DWORD *)(v0 + 2952) = v65;
  *(unsigned char *)(v0 + 2956) = v71;
  *(unsigned char *)(v0 + 2957) = v72;
  *(void *)(v0 + 2960) = v73;
  *(unsigned char *)(v0 + 2968) = v32;
  *(void *)(v0 + 2976) = v74;
  *(unsigned char *)(v0 + 2984) = v33;
  *(unsigned char *)(v0 + 2985) = v75;
  *(void *)(v0 + 2992) = v76;
  *(unsigned char *)(v0 + 3000) = v34;
  *(void *)(v0 + 3008) = v77;
  *(unsigned char *)(v0 + 3016) = v35;
  *(_WORD *)(v0 + 3017) = v78;
  *(void *)(v0 + 3024) = v79;
  *(unsigned char *)(v0 + 3032) = v36;
  *(void *)(v0 + 3040) = v90;
  *(void *)(v0 + 3048) = v2;
  *(unsigned char *)(v0 + 3056) = v80;
  uint64_t v37 = *v31;
  *(void *)(v0 + 4128) = *v31;
  sub_10001547C(v0 + 2872);
  return _swift_task_switch(sub_1000A4494, v37, 0);
}

uint64_t sub_1000A2B7C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3864) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void **)(v2 + 3824);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B2E2C(v2 + 3168);

    unint64_t v4 = sub_1000A3C20;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(unsigned char *)(v2 + 1119) = *(unsigned char *)(v2 + 1912);
    *(unsigned char *)(v2 + 1330) = *(unsigned char *)(v2 + 1913);
    *(void *)(v2 + 3872) = *(void *)(v2 + 1968);
    *(_DWORD *)(v2 + 1331) = *(_DWORD *)(v2 + 1992);
    *(unsigned char *)(v2 + 1335) = *(unsigned char *)(v2 + 1996);
    *(unsigned char *)(v2 + 1521) = *(unsigned char *)(v2 + 1997);
    *(void *)(v2 + 3880) = *(void *)(v2 + 2000);
    *(unsigned char *)(v2 + 1522) = *(unsigned char *)(v2 + 2008);
    *(void *)(v2 + 3888) = *(void *)(v2 + 2016);
    *(unsigned char *)(v2 + 1523) = *(unsigned char *)(v2 + 2024);
    *(unsigned char *)(v2 + 1524) = *(unsigned char *)(v2 + 2025);
    *(void *)(v2 + 3896) = *(void *)(v2 + 2048);
    *(unsigned char *)(v2 + 1525) = *(unsigned char *)(v2 + 2056);
    *(_WORD *)(v2 + 1526) = *(_WORD *)(v2 + 2057);
    *(void *)(v2 + 3904) = *(void *)(v2 + 2064);
    *(unsigned char *)(v2 + 1713) = *(unsigned char *)(v2 + 2072);
    *(unsigned char *)(v2 + 1714) = *(unsigned char *)(v2 + 2096);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_1000A2DD4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A2DD4()
{
  char v33 = *(unsigned char *)(v0 + 1714);
  char v32 = *(unsigned char *)(v0 + 1713);
  uint64_t v31 = *(void *)(v0 + 3904);
  char v29 = *(unsigned char *)(v0 + 1525);
  __int16 v30 = *(_WORD *)(v0 + 1526);
  uint64_t v28 = *(void *)(v0 + 3896);
  char v26 = *(unsigned char *)(v0 + 1524);
  char v24 = *(unsigned char *)(v0 + 1523);
  uint64_t v23 = *(void *)(v0 + 3888);
  char v22 = *(unsigned char *)(v0 + 1522);
  uint64_t v21 = *(void *)(v0 + 3880);
  char v19 = *(unsigned char *)(v0 + 1335);
  char v20 = *(unsigned char *)(v0 + 1521);
  char v15 = *(unsigned char *)(v0 + 1330);
  char v1 = *(unsigned char *)(v0 + 1119);
  uint64_t v27 = *(void *)(v0 + 3784);
  uint64_t v25 = *(void *)(v0 + 3776);
  uint64_t v17 = *(void *)(v0 + 3712);
  uint64_t v18 = *(void *)(v0 + 3872);
  uint64_t v16 = *(void *)(v0 + 3704);
  uint64_t v14 = *(void *)(v0 + 3696);
  uint64_t v2 = *(void *)(v0 + 3688);
  uint64_t v3 = *(void *)(v0 + 3680);
  uint64_t v4 = *(void *)(v0 + 3552);
  long long v5 = *(_OWORD *)(v0 + 3304);
  long long v6 = *(_OWORD *)(v0 + 3320);
  *(_OWORD *)(v0 + 3392) = v5;
  *(_OWORD *)(v0 + 3408) = v6;
  *(void *)(v0 + 3912) = *(void *)(v0 + 3336);
  *(unsigned char *)(v0 + 4184) = 0;
  *(void *)(v0 + 3920) = *(void *)(v0 + 3344);
  *(_OWORD *)(v0 + 3440) = v5;
  *(_OWORD *)(v0 + 3456) = v6;
  int v7 = *(_DWORD *)(v0 + 1331);
  uint64_t v8 = *(void *)(v0 + 3672);
  uint64_t v9 = *(void *)(v0 + 3664);
  uint64_t v10 = *(void *)(v0 + 3656);
  sub_100029CD8(v4 + 232, v0 + 3352);
  uint64_t v11 = sub_100012D78((void *)(v0 + 3352), *(void *)(v0 + 3376));
  *(unsigned char *)(v0 + 2296) = v1;
  *(unsigned char *)(v0 + 2297) = v15;
  *(void *)(v0 + 2304) = v10;
  *(void *)(v0 + 2312) = v9;
  *(void *)(v0 + 2320) = v8;
  *(void *)(v0 + 2328) = v3;
  *(void *)(v0 + 2336) = v2;
  *(void *)(v0 + 2344) = v14;
  *(void *)(v0 + 2352) = v18;
  *(void *)(v0 + 2360) = v16;
  *(void *)(v0 + 2368) = v17;
  *(_DWORD *)(v0 + 2376) = v7;
  *(unsigned char *)(v0 + 2380) = v19;
  *(unsigned char *)(v0 + 2381) = v20;
  *(void *)(v0 + 2384) = v21;
  *(unsigned char *)(v0 + 2392) = v22;
  *(void *)(v0 + 2400) = v23;
  *(unsigned char *)(v0 + 2408) = v24;
  *(unsigned char *)(v0 + 2409) = v26;
  *(void *)(v0 + 2416) = 200;
  *(unsigned char *)(v0 + 2424) = 0;
  *(void *)(v0 + 2432) = v28;
  *(unsigned char *)(v0 + 2440) = v29;
  *(_WORD *)(v0 + 2441) = v30;
  *(void *)(v0 + 2448) = v31;
  *(unsigned char *)(v0 + 2456) = v32;
  *(void *)(v0 + 2464) = v25;
  *(void *)(v0 + 2472) = v27;
  *(unsigned char *)(v0 + 2480) = v33;
  sub_10008A4F8(v0 + 3440);
  sub_10008A4F8(v0 + 3456);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 2296);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = *v11;
  *(void *)(v0 + 3928) = *v11;
  return _swift_task_switch(sub_1000A3080, v12, 0);
}

uint64_t sub_1000A3080()
{
  uint64_t v1 = *(void *)(v0 + 3600);
  uint64_t v2 = *(void *)(v0 + 3592);
  uint64_t v3 = *(void *)(v0 + 3584);
  uint64_t v4 = *(void *)(v0 + 3544);
  long long v5 = *(_OWORD *)(v0 + 2440);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 2424);
  *(_OWORD *)(v0 + 592) = v5;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 2456);
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 2465);
  long long v6 = *(_OWORD *)(v0 + 2376);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 2360);
  *(_OWORD *)(v0 + 528) = v6;
  long long v7 = *(_OWORD *)(v0 + 2408);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 2392);
  *(_OWORD *)(v0 + 560) = v7;
  long long v8 = *(_OWORD *)(v0 + 2312);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 2296);
  *(_OWORD *)(v0 + 464) = v8;
  long long v9 = *(_OWORD *)(v0 + 2344);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 2328);
  *(_OWORD *)(v0 + 496) = v9;
  *(void *)(v0 + 640) = v4;
  *(void *)(v0 + 648) = 0;
  *(_WORD *)(v0 + 656) = 256;
  sub_10003675C(v0 + 448);
  sub_1000367C8(v0 + 448, v0 + 904);
  sub_10001547C(v0 + 2296);
  *(void *)(v0 + 3936) = sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 3944) = v10;
  *(void *)(v0 + 3952) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v1, v3);
  sub_100036824(v0 + 2296);
  return _swift_task_switch(sub_1000A31D8, 0, 0);
}

uint64_t sub_1000A31D8()
{
  sub_100020930(*(void *)(v0 + 3792), *(void *)(v0 + 3800));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 3352);
  sub_100012960(&qword_1001E2E88);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100178B40;
  *(void *)(v1 + 32) = 0x746E656D656C65;
  *(void *)(v1 + 40) = 0xE700000000000000;
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(v0 + 3440);
  *(void *)(v1 + 72) = &type metadata for String;
  *(void *)(v1 + 80) = 0x666F6F7270;
  *(void *)(v1 + 88) = 0xE500000000000000;
  *(void *)(v1 + 120) = &type metadata for String;
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(v0 + 3456);
  unint64_t v2 = sub_10009FAF4(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10008A524(v0 + 3440);
  sub_10008A524(v0 + 3456);
  swift_bridgeObjectRelease();
  uint64_t v70 = v2;
  uint64_t v72 = v0 + 3168;
  if (*(void *)(v0 + 3200) == 0x6F6C6E776F646572 && *(void *)(v0 + 3208) == 0xEA00000000006461)
  {
    sub_1000B2E2C(v0 + 3168);
    char v75 = 1;
  }
  else
  {
    char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1000B2E2C(v0 + 3168);
  }
  uint64_t v3 = *(void *)(v0 + 3848);
  uint64_t v4 = *(void *)(v0 + 3648);
  uint64_t v5 = *(void *)(v0 + 3640);
  uint64_t v73 = *(void *)(v0 + 3632);
  *(void *)(v0 + 3520) = *(void *)(v0 + 3544);
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 10715618;
  v6._object = (void *)0xA300000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 3512) = v3;
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  long long v9 = v8;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 10715618;
  v11._object = (void *)0xA300000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  if (v75) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0x65736C6166;
  }
  if (v75) {
    unint64_t v13 = 0xE400000000000000;
  }
  else {
    unint64_t v13 = 0xE500000000000000;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v16 = String.data(using:allowLossyConversion:)();
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v73);
  if (v18 >> 60 == 15)
  {
    char v19 = *(void **)(v0 + 3824);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000B2E2C(v72);
    swift_bridgeObjectRelease();
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100012E74(v20, (uint64_t)qword_1001E6028);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Could not get data from public input", v23, 2u);
      swift_slowDealloc();
    }

    sub_1000B2218();
    uint64_t v24 = swift_allocError();
    *(_OWORD *)uint64_t v25 = xmmword_10017C770;
    *(unsigned char *)(v25 + 16) = 2;
    swift_willThrow();
    goto LABEL_19;
  }
  uint64_t v26 = *(void *)(v0 + 3864);
  uint64_t v27 = sub_1000BCEB4(v16, v18, v70);
  if (v26)
  {
    uint64_t v24 = v26;
    char v29 = *(void **)(v0 + 3824);
    swift_bridgeObjectRelease();
    sub_10005E9FC(v16, v18);
    swift_bridgeObjectRelease();

    sub_1000B2E2C(v72);
    swift_bridgeObjectRelease();
LABEL_19:
    *(void *)(v0 + 4136) = v24;
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100012E74(v30, (uint64_t)qword_1001E6028);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      char v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)char v33 = 138412290;
      swift_errorRetain();
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 3496) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Token finalization error: %@", v33, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v36 = *(void *)(v0 + 3552);

    swift_errorRetain();
    sub_10009485C(4, 0, v24, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1336), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      0,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v37 = *(_OWORD *)(v0 + 1480);
    *(_OWORD *)(v0 + 2232) = *(_OWORD *)(v0 + 1464);
    *(_OWORD *)(v0 + 2248) = v37;
    *(_OWORD *)(v0 + 2264) = *(_OWORD *)(v0 + 1496);
    *(_OWORD *)(v0 + 2273) = *(_OWORD *)(v0 + 1505);
    long long v38 = *(_OWORD *)(v0 + 1416);
    *(_OWORD *)(v0 + 2168) = *(_OWORD *)(v0 + 1400);
    *(_OWORD *)(v0 + 2184) = v38;
    long long v39 = *(_OWORD *)(v0 + 1448);
    *(_OWORD *)(v0 + 2200) = *(_OWORD *)(v0 + 1432);
    *(_OWORD *)(v0 + 2216) = v39;
    long long v40 = *(_OWORD *)(v0 + 1352);
    *(_OWORD *)(v0 + 2104) = *(_OWORD *)(v0 + 1336);
    *(_OWORD *)(v0 + 2120) = v40;
    long long v41 = *(_OWORD *)(v0 + 1384);
    *(_OWORD *)(v0 + 2136) = *(_OWORD *)(v0 + 1368);
    *(_OWORD *)(v0 + 2152) = v41;
    uint64_t v42 = sub_100012D78((void *)(v36 + 232), *(void *)(v36 + 256));
    uint64_t v43 = *v42;
    *(void *)(v0 + 4144) = *v42;
    return _swift_task_switch(sub_1000A4970, v43, 0);
  }
  uint64_t v69 = v27;
  unint64_t v74 = v28;
  uint64_t v44 = *(void **)(v0 + 3824);
  swift_bridgeObjectRelease();

  id v45 = sub_1000A55BC();
  uint64_t v47 = v46;
  *(void *)(v0 + 3960) = v46;
  sub_1000B2E2C(v72);
  if (!v47)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_100012E74(v54, (uint64_t)qword_1001E6028);
    unint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      Swift::String v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Could not get marketplace ID", v57, 2u);
      swift_slowDealloc();
    }

    sub_1000B2218();
    uint64_t v24 = swift_allocError();
    *(_OWORD *)uint64_t v58 = xmmword_10017C760;
    *(unsigned char *)(v58 + 16) = 2;
    swift_willThrow();
    sub_100020930(v69, v74);
    sub_10005E9FC(v16, v18);
    goto LABEL_19;
  }
  uint64_t v67 = *(void *)(v0 + 3912);
  uint64_t v68 = *(void *)(v0 + 3920);
  uint64_t v66 = *(void *)(v0 + 3848);
  uint64_t v63 = *(void *)(v0 + 3808);
  uint64_t v64 = *(void *)(v0 + 3816);
  uint64_t v71 = (uint64_t)v45;
  uint64_t v48 = *(void *)(v0 + 3576);
  uint64_t v49 = *(void *)(v0 + 3568);
  uint64_t v61 = *(void *)(v0 + 3560);
  uint64_t v62 = *(void *)(v0 + 3544);
  char v65 = *(unsigned char *)(v0 + 686) & 1;
  Swift::String v50 = Data.base64EncodedString(options:)(0);
  *(void *)(v0 + 3968) = v50._object;
  UUID.init()();
  uint64_t v60 = UUID.uuidString.getter();
  uint64_t v52 = v51;
  *(void *)(v0 + 3976) = v51;
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v61);
  sub_100020930(v69, v74);
  sub_10005E9FC(v16, v18);
  *(void *)(v0 + 3064) = 0;
  *(unsigned char *)(v0 + 3072) = 1;
  *(void *)(v0 + 3080) = v60;
  *(void *)(v0 + 3088) = v52;
  *(void *)(v0 + 3096) = v62;
  *(void *)(v0 + 3104) = v63;
  *(void *)(v0 + 3112) = v64;
  *(Swift::String *)(v0 + 3120) = v50;
  *(void *)(v0 + 3136) = v66;
  *(void *)(v0 + 3144) = v67;
  *(void *)(v0 + 3152) = v68;
  *(unsigned char *)(v0 + 3160) = v75 & 1;
  *(unsigned char *)(v0 + 3161) = v65;
  *(unsigned char *)(v0 + 3162) = 0;
  v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 3984) = v53;
  void *v53 = v0;
  v53[1] = sub_1000A404C;
  return sub_1000A029C(v0 + 3064, v75 & 1, v71, v47, v65);
}

uint64_t sub_1000A3C20()
{
  sub_100020930(*(void *)(v0 + 3792), *(void *)(v0 + 3800));
  uint64_t v1 = *(void *)(v0 + 3232);
  uint64_t v2 = *(void *)(v0 + 3208);
  uint64_t v3 = *(void *)(v0 + 3192);
  uint64_t v4 = *(void *)(v0 + 3176);
  uint64_t v5 = *(void *)(v0 + 3864);
  uint64_t v6 = *(void *)(v0 + 3840);
  uint64_t v7 = *(void *)(v0 + 3832);
  uint64_t v8 = *(void *)(v0 + 3824);
  uint64_t v9 = *(void *)(v0 + 3816);
  uint64_t v10 = *(void *)(v0 + 3784);
  uint64_t v11 = *(void *)(v0 + 3776);
  *(void *)(v0 + 4088) = *(void *)(v0 + 3248);
  *(void *)(v0 + 4080) = v1;
  *(void *)(v0 + 4072) = v2;
  *(void *)(v0 + 4064) = v3;
  *(void *)(v0 + 4056) = v4;
  *(void *)(v0 + 4048) = v9;
  *(void *)(v0 + 4040) = v8;
  *(void *)(v0 + 4032) = v7;
  *(void *)(v0 + 4024) = v6;
  *(_WORD *)(v0 + 1715) = 257;
  *(void *)(v0 + 4016) = v5;
  uint64_t v51 = v11;
  uint64_t v52 = v10;
  *(void *)(v0 + 4008) = v10;
  *(void *)(v0 + 4000) = v11;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100012E74(v12, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    Swift::String v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::String v15 = 138412290;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3488) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "POD exchange error %@", v15, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  char v50 = *(unsigned char *)(v0 + 1118);
  uint64_t v49 = *(void *)(v0 + 3760);
  __int16 v48 = *(_WORD *)(v0 + 1116);
  uint64_t v46 = *(void *)(v0 + 3744);
  uint64_t v47 = *(void *)(v0 + 3752);
  char v45 = *(unsigned char *)(v0 + 1115);
  uint64_t v43 = *(void *)(v0 + 3728);
  uint64_t v44 = *(void *)(v0 + 3736);
  char v41 = *(unsigned char *)(v0 + 903);
  char v42 = *(unsigned char *)(v0 + 1114);
  char v37 = *(unsigned char *)(v0 + 898);
  char v34 = *(unsigned char *)(v0 + 687);
  uint64_t v39 = *(void *)(v0 + 3712);
  uint64_t v40 = *(void *)(v0 + 3720);
  uint64_t v38 = *(void *)(v0 + 3704);
  long long v36 = *(_OWORD *)(v0 + 3688);
  uint64_t v18 = *(void *)(v0 + 3552);
  int v35 = *(_DWORD *)(v0 + 899);

  uint64_t v19 = sub_100094708(v5);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 4096) = v19;
  *(void *)(v0 + 4104) = v21;
  *(void *)(v0 + 4112) = v23;
  *(void *)(v0 + 4120) = v25;
  uint64_t v26 = sub_100012D78((void *)(v18 + 232), *(void *)(v18 + 256));
  char v27 = *(unsigned char *)(v0 + 4160);
  char v28 = *(unsigned char *)(v0 + 4152);
  char v29 = *(unsigned char *)(v0 + 4184);
  char v30 = *(unsigned char *)(v0 + 4168);
  char v31 = *(unsigned char *)(v0 + 4176);
  *(unsigned char *)(v0 + 2872) = v34;
  *(unsigned char *)(v0 + 2873) = v37;
  *(void *)(v0 + 2880) = v19;
  *(void *)(v0 + 2888) = v21;
  *(void *)(v0 + 2896) = v23;
  *(void *)(v0 + 2904) = v25;
  *(_OWORD *)(v0 + 2912) = v36;
  *(void *)(v0 + 2928) = v40;
  *(void *)(v0 + 2936) = v38;
  *(void *)(v0 + 2944) = v39;
  *(_DWORD *)(v0 + 2952) = v35;
  *(unsigned char *)(v0 + 2956) = v41;
  *(unsigned char *)(v0 + 2957) = v42;
  *(void *)(v0 + 2960) = v43;
  *(unsigned char *)(v0 + 2968) = v27;
  *(void *)(v0 + 2976) = v44;
  *(unsigned char *)(v0 + 2984) = v28;
  *(unsigned char *)(v0 + 2985) = v45;
  *(void *)(v0 + 2992) = v46;
  *(unsigned char *)(v0 + 3000) = v29;
  *(void *)(v0 + 3008) = v47;
  *(unsigned char *)(v0 + 3016) = v30;
  *(_WORD *)(v0 + 3017) = v48;
  *(void *)(v0 + 3024) = v49;
  *(unsigned char *)(v0 + 3032) = v31;
  *(void *)(v0 + 3040) = v51;
  *(void *)(v0 + 3048) = v52;
  *(unsigned char *)(v0 + 3056) = v50;
  uint64_t v32 = *v26;
  *(void *)(v0 + 4128) = *v26;
  sub_10001547C(v0 + 2872);
  return _swift_task_switch(sub_1000A4494, v32, 0);
}

uint64_t sub_1000A404C()
{
  *(void *)(*(void *)v1 + 3992) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000A4DD8;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000A41A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A41A0()
{
  char v22 = *(unsigned char *)(v0 + 1118);
  uint64_t v21 = *(void *)(v0 + 3760);
  __int16 v20 = *(_WORD *)(v0 + 1116);
  uint64_t v19 = *(void *)(v0 + 3752);
  char v17 = *(unsigned char *)(v0 + 1115);
  uint64_t v16 = *(void *)(v0 + 3736);
  uint64_t v15 = *(void *)(v0 + 3728);
  char v13 = *(unsigned char *)(v0 + 1114);
  __int16 v14 = *(_WORD *)(v0 + 658);
  char v12 = *(unsigned char *)(v0 + 903);
  uint64_t v11 = *(void *)(v0 + 3720);
  char v1 = *(unsigned char *)(v0 + 898);
  char v2 = *(unsigned char *)(v0 + 687);
  uint64_t v3 = *(void *)(v0 + 3712);
  uint64_t v4 = *(void *)(v0 + 3704);
  long long v9 = *(_OWORD *)(v0 + 3672);
  long long v10 = *(_OWORD *)(v0 + 3656);
  long long v8 = *(_OWORD *)(v0 + 3688);
  long long v18 = *(_OWORD *)(v0 + 3776);
  int v5 = *(_DWORD *)(v0 + 899);

  *(unsigned char *)(v0 + 2680) = v2;
  *(unsigned char *)(v0 + 2681) = v1;
  *(_DWORD *)(v0 + 2682) = *(_DWORD *)(v0 + 226);
  *(_WORD *)(v0 + 2686) = *(_WORD *)(v0 + 230);
  *(_OWORD *)(v0 + 2688) = v10;
  *(_OWORD *)(v0 + 2704) = v9;
  *(_OWORD *)(v0 + 2720) = v8;
  *(void *)(v0 + 2736) = v11;
  *(void *)(v0 + 2744) = v4;
  *(void *)(v0 + 2752) = v3;
  *(_DWORD *)(v0 + 2760) = v5;
  *(unsigned char *)(v0 + 2764) = v12;
  *(unsigned char *)(v0 + 2765) = v13;
  *(_WORD *)(v0 + 2766) = v14;
  *(void *)(v0 + 2768) = v15;
  *(unsigned char *)(v0 + 2776) = *(unsigned char *)(v0 + 4160);
  *(_DWORD *)(v0 + 2777) = *(_DWORD *)(v0 + 674);
  *(_DWORD *)(v0 + 2780) = *(_DWORD *)(v0 + 677);
  *(void *)(v0 + 2784) = v16;
  *(unsigned char *)(v0 + 2792) = *(unsigned char *)(v0 + 4152);
  *(unsigned char *)(v0 + 2793) = v17;
  *(_DWORD *)(v0 + 2794) = *(_DWORD *)(v0 + 442);
  *(_WORD *)(v0 + 2798) = *(_WORD *)(v0 + 446);
  *(void *)(v0 + 2800) = 200;
  *(unsigned char *)(v0 + 2808) = *(unsigned char *)(v0 + 4184);
  *(_DWORD *)(v0 + 2809) = *(_DWORD *)(v0 + 667);
  *(_DWORD *)(v0 + 2812) = *(_DWORD *)(v0 + 670);
  *(void *)(v0 + 2816) = v19;
  *(unsigned char *)(v0 + 2824) = *(unsigned char *)(v0 + 4168);
  *(_WORD *)(v0 + 2825) = v20;
  *(unsigned char *)(v0 + 2831) = *(unsigned char *)(v0 + 685);
  *(_DWORD *)(v0 + 2827) = *(_DWORD *)(v0 + 681);
  *(void *)(v0 + 2832) = v21;
  *(unsigned char *)(v0 + 2840) = *(unsigned char *)(v0 + 4176);
  *(_DWORD *)(v0 + 2844) = *(_DWORD *)(v0 + 663);
  *(_DWORD *)(v0 + 2841) = *(_DWORD *)(v0 + 660);
  *(_OWORD *)(v0 + 2848) = v18;
  *(unsigned char *)(v0 + 2864) = v22;
  sub_100036824(v0 + 2680);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000A4494()
{
  uint64_t v1 = *(void *)(v0 + 3600);
  uint64_t v2 = *(void *)(v0 + 3592);
  uint64_t v3 = *(void *)(v0 + 3584);
  uint64_t v4 = *(void *)(v0 + 3544);
  long long v5 = *(_OWORD *)(v0 + 3016);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 3000);
  *(_OWORD *)(v0 + 160) = v5;
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 3032);
  *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 3041);
  long long v6 = *(_OWORD *)(v0 + 2952);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 2936);
  *(_OWORD *)(v0 + 96) = v6;
  long long v7 = *(_OWORD *)(v0 + 2984);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 2968);
  *(_OWORD *)(v0 + 128) = v7;
  long long v8 = *(_OWORD *)(v0 + 2888);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 2872);
  *(_OWORD *)(v0 + 32) = v8;
  long long v9 = *(_OWORD *)(v0 + 2920);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 2904);
  *(_OWORD *)(v0 + 64) = v9;
  *(void *)(v0 + 208) = v4;
  *(void *)(v0 + 216) = 0;
  *(_WORD *)(v0 + 224) = 256;
  sub_10003675C(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 232);
  sub_10001547C(v0 + 2872);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 2872);
  return _swift_task_switch(sub_1000A45D4, 0, 0);
}

uint64_t sub_1000A45D4()
{
  long long v17 = *(_OWORD *)(v0 + 4096);
  long long v18 = *(_OWORD *)(v0 + 4112);
  uint64_t v24 = *(void *)(v0 + 4000);
  uint64_t v25 = *(void *)(v0 + 4008);
  char v26 = *(unsigned char *)(v0 + 1118);
  int v27 = *(unsigned __int8 *)(v0 + 1715);
  uint64_t v22 = *(void *)(v0 + 3760);
  __int16 v21 = *(_WORD *)(v0 + 1116);
  uint64_t v19 = *(void *)(v0 + 3744);
  uint64_t v20 = *(void *)(v0 + 3752);
  char v23 = *(unsigned char *)(v0 + 1115);
  uint64_t v15 = *(void *)(v0 + 3728);
  uint64_t v16 = *(void *)(v0 + 3736);
  char v13 = *(unsigned char *)(v0 + 1114);
  __int16 v14 = *(_WORD *)(v0 + 658);
  char v12 = *(unsigned char *)(v0 + 903);
  uint64_t v1 = *(void *)(v0 + 3720);
  char v2 = *(unsigned char *)(v0 + 898);
  char v3 = *(unsigned char *)(v0 + 687);
  uint64_t v4 = *(void *)(v0 + 3712);
  uint64_t v5 = *(void *)(v0 + 3704);
  long long v11 = *(_OWORD *)(v0 + 3688);
  sub_1000B2218();
  int v6 = *(_DWORD *)(v0 + 899);
  swift_allocError();
  *(_OWORD *)uint64_t v7 = xmmword_10017C780;
  *(unsigned char *)(v7 + 16) = 2;
  swift_willThrow();
  swift_errorRelease();
  int v8 = *(_DWORD *)(v0 + 226);
  *(void *)(v0 + 1776) = v1;
  *(void *)(v0 + 1784) = v5;
  *(void *)(v0 + 1792) = v4;
  *(unsigned char *)(v0 + 1720) = v3;
  *(unsigned char *)(v0 + 1721) = v2;
  *(_WORD *)(v0 + 1726) = *(_WORD *)(v0 + 230);
  *(_DWORD *)(v0 + 1722) = v8;
  *(_OWORD *)(v0 + 1728) = v17;
  *(_OWORD *)(v0 + 1744) = v18;
  *(_OWORD *)(v0 + 1760) = v11;
  *(_DWORD *)(v0 + 1800) = v6;
  *(unsigned char *)(v0 + 1804) = v12;
  *(unsigned char *)(v0 + 1805) = v13;
  *(_WORD *)(v0 + 1806) = v14;
  *(void *)(v0 + 1808) = v15;
  *(_DWORD *)(v0 + 1817) = *(_DWORD *)(v0 + 674);
  *(_DWORD *)(v0 + 1820) = *(_DWORD *)(v0 + 677);
  *(void *)(v0 + 1824) = v16;
  *(void *)(v0 + 1840) = v19;
  *(_DWORD *)(v0 + 1849) = *(_DWORD *)(v0 + 667);
  *(_DWORD *)(v0 + 1852) = *(_DWORD *)(v0 + 670);
  *(void *)(v0 + 1856) = v20;
  *(_WORD *)(v0 + 1865) = v21;
  *(_DWORD *)(v0 + 1867) = *(_DWORD *)(v0 + 681);
  *(void *)(v0 + 1872) = v22;
  *(_DWORD *)(v0 + 1884) = *(_DWORD *)(v0 + 663);
  *(_DWORD *)(v0 + 1881) = *(_DWORD *)(v0 + 660);
  *(void *)(v0 + 1888) = v24;
  *(void *)(v0 + 1896) = v25;
  *(unsigned char *)(v0 + 1816) = *(unsigned char *)(v0 + 4160);
  *(unsigned char *)(v0 + 1832) = *(unsigned char *)(v0 + 4152);
  *(unsigned char *)(v0 + 1833) = v23;
  *(_DWORD *)(v0 + 1834) = *(_DWORD *)(v0 + 442);
  *(_WORD *)(v0 + 1838) = *(_WORD *)(v0 + 446);
  *(unsigned char *)(v0 + 1848) = *(unsigned char *)(v0 + 4184);
  *(unsigned char *)(v0 + 1864) = *(unsigned char *)(v0 + 4168);
  *(unsigned char *)(v0 + 1871) = *(unsigned char *)(v0 + 685);
  *(unsigned char *)(v0 + 1880) = *(unsigned char *)(v0 + 4176);
  *(unsigned char *)(v0 + 1904) = v26;
  sub_100036824(v0 + 1720);
  if (v27 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v0 + 1716) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v0 + 1715) == 1)
  {

    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000A4970()
{
  long long v1 = *(_OWORD *)(v0 + 2248);
  *(_OWORD *)(v0 + 1248) = *(_OWORD *)(v0 + 2232);
  *(_OWORD *)(v0 + 1264) = v1;
  *(_OWORD *)(v0 + 1280) = *(_OWORD *)(v0 + 2264);
  *(_OWORD *)(v0 + 1289) = *(_OWORD *)(v0 + 2273);
  long long v2 = *(_OWORD *)(v0 + 2184);
  *(_OWORD *)(v0 + 1184) = *(_OWORD *)(v0 + 2168);
  *(_OWORD *)(v0 + 1200) = v2;
  long long v3 = *(_OWORD *)(v0 + 2216);
  *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 2200);
  *(_OWORD *)(v0 + 1232) = v3;
  long long v4 = *(_OWORD *)(v0 + 2120);
  *(_OWORD *)(v0 + 1120) = *(_OWORD *)(v0 + 2104);
  *(_OWORD *)(v0 + 1136) = v4;
  long long v5 = *(_OWORD *)(v0 + 2152);
  *(_OWORD *)(v0 + 1152) = *(_OWORD *)(v0 + 2136);
  int v6 = *(void (**)(uint64_t, uint64_t))(v0 + 3944);
  uint64_t v7 = *(void *)(v0 + 3600);
  uint64_t v8 = *(void *)(v0 + 3584);
  uint64_t v9 = *(void *)(v0 + 3544);
  *(_OWORD *)(v0 + 1168) = v5;
  *(void *)(v0 + 1312) = v9;
  *(void *)(v0 + 1320) = 0;
  *(_WORD *)(v0 + 1328) = 256;
  sub_10003675C(v0 + 1120);
  sub_1000367C8(v0 + 1120, v0 + 688);
  sub_10001547C(v0 + 1336);
  AsyncStream.Continuation.yield(_:)();
  v6(v7, v8);
  sub_100036824(v0 + 1336);
  return _swift_task_switch(sub_1000A4AC4, 0, 0);
}

uint64_t sub_1000A4AC4()
{
  char v13 = *(void **)(v0 + 3824);
  uint64_t v25 = *(void *)(v0 + 3784);
  uint64_t v23 = *(void *)(v0 + 3776);
  char v24 = *(unsigned char *)(v0 + 1118);
  uint64_t v22 = *(void *)(v0 + 3760);
  __int16 v21 = *(_WORD *)(v0 + 1116);
  uint64_t v20 = *(void *)(v0 + 3752);
  char v19 = *(unsigned char *)(v0 + 1115);
  uint64_t v17 = *(void *)(v0 + 3728);
  uint64_t v18 = *(void *)(v0 + 3736);
  char v15 = *(unsigned char *)(v0 + 1114);
  __int16 v16 = *(_WORD *)(v0 + 658);
  char v14 = *(unsigned char *)(v0 + 903);
  char v1 = *(unsigned char *)(v0 + 898);
  char v2 = *(unsigned char *)(v0 + 687);
  uint64_t v11 = *(void *)(v0 + 3712);
  uint64_t v12 = *(void *)(v0 + 3720);
  uint64_t v3 = *(void *)(v0 + 3704);
  long long v9 = *(_OWORD *)(v0 + 3672);
  long long v10 = *(_OWORD *)(v0 + 3688);
  long long v8 = *(_OWORD *)(v0 + 3656);
  sub_1000B2218();
  int v4 = *(_DWORD *)(v0 + 899);
  swift_allocError();
  *(_OWORD *)uint64_t v5 = xmmword_10017C740;
  *(unsigned char *)(v5 + 16) = 2;
  swift_willThrow();
  swift_errorRelease();

  *(unsigned char *)(v0 + 1528) = v2;
  *(unsigned char *)(v0 + 1529) = v1;
  *(_DWORD *)(v0 + 1530) = *(_DWORD *)(v0 + 226);
  *(_WORD *)(v0 + 1534) = *(_WORD *)(v0 + 230);
  *(_OWORD *)(v0 + 1536) = v8;
  *(_OWORD *)(v0 + 1552) = v9;
  *(_OWORD *)(v0 + 1568) = v10;
  *(void *)(v0 + 1584) = v12;
  *(void *)(v0 + 1592) = v3;
  *(void *)(v0 + 1600) = v11;
  *(_DWORD *)(v0 + 1608) = v4;
  *(unsigned char *)(v0 + 1612) = v14;
  *(unsigned char *)(v0 + 1613) = v15;
  *(_WORD *)(v0 + 1614) = v16;
  *(void *)(v0 + 1616) = v17;
  *(unsigned char *)(v0 + 1624) = *(unsigned char *)(v0 + 4160);
  *(_DWORD *)(v0 + 1625) = *(_DWORD *)(v0 + 674);
  *(_DWORD *)(v0 + 1628) = *(_DWORD *)(v0 + 677);
  *(void *)(v0 + 1632) = v18;
  *(unsigned char *)(v0 + 1640) = *(unsigned char *)(v0 + 4152);
  *(unsigned char *)(v0 + 1641) = v19;
  *(_DWORD *)(v0 + 1642) = *(_DWORD *)(v0 + 442);
  *(_WORD *)(v0 + 1646) = *(_WORD *)(v0 + 446);
  *(void *)(v0 + 1648) = 200;
  *(unsigned char *)(v0 + 1656) = *(unsigned char *)(v0 + 4184);
  *(_DWORD *)(v0 + 1657) = *(_DWORD *)(v0 + 667);
  *(_DWORD *)(v0 + 1660) = *(_DWORD *)(v0 + 670);
  *(void *)(v0 + 1664) = v20;
  *(unsigned char *)(v0 + 1672) = *(unsigned char *)(v0 + 4168);
  *(_WORD *)(v0 + 1673) = v21;
  *(unsigned char *)(v0 + 1679) = *(unsigned char *)(v0 + 685);
  *(_DWORD *)(v0 + 1675) = *(_DWORD *)(v0 + 681);
  *(void *)(v0 + 1680) = v22;
  *(unsigned char *)(v0 + 1688) = *(unsigned char *)(v0 + 4176);
  *(_DWORD *)(v0 + 1692) = *(_DWORD *)(v0 + 663);
  *(_DWORD *)(v0 + 1689) = *(_DWORD *)(v0 + 660);
  *(void *)(v0 + 1696) = v23;
  *(void *)(v0 + 1704) = v25;
  *(unsigned char *)(v0 + 1712) = v24;
  sub_100036824(v0 + 1528);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000A4DD8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  char v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)int v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3504) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to register conversion: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v2;
  char v19 = *(void **)(v0 + 3824);
  uint64_t v31 = *(void *)(v0 + 3784);
  uint64_t v29 = *(void *)(v0 + 3776);
  char v30 = *(unsigned char *)(v0 + 1118);
  uint64_t v28 = *(void *)(v0 + 3760);
  __int16 v27 = *(_WORD *)(v0 + 1116);
  uint64_t v26 = *(void *)(v0 + 3752);
  char v25 = *(unsigned char *)(v0 + 1115);
  uint64_t v23 = *(void *)(v0 + 3728);
  uint64_t v24 = *(void *)(v0 + 3736);
  char v21 = *(unsigned char *)(v0 + 1114);
  __int16 v22 = *(_WORD *)(v0 + 658);
  char v20 = *(unsigned char *)(v0 + 903);
  uint64_t v18 = *(void *)(v0 + 3720);
  char v8 = *(unsigned char *)(v0 + 898);
  char v9 = *(unsigned char *)(v0 + 687);
  uint64_t v10 = *(void *)(v0 + 3712);
  uint64_t v11 = *(void *)(v0 + 3704);
  long long v16 = *(_OWORD *)(v0 + 3672);
  long long v17 = *(_OWORD *)(v0 + 3688);
  long long v15 = *(_OWORD *)(v0 + 3656);
  int v12 = *(_DWORD *)(v0 + 899);

  swift_willThrow();
  *(unsigned char *)(v0 + 2488) = v9;
  *(unsigned char *)(v0 + 2489) = v8;
  *(_DWORD *)(v0 + 2490) = *(_DWORD *)(v0 + 226);
  *(_WORD *)(v0 + 2494) = *(_WORD *)(v0 + 230);
  *(_OWORD *)(v0 + 2496) = v15;
  *(_OWORD *)(v0 + 2512) = v16;
  *(_OWORD *)(v0 + 2528) = v17;
  *(void *)(v0 + 2544) = v18;
  *(void *)(v0 + 2552) = v11;
  *(void *)(v0 + 2560) = v10;
  *(_DWORD *)(v0 + 2568) = v12;
  *(unsigned char *)(v0 + 2572) = v20;
  *(unsigned char *)(v0 + 2573) = v21;
  *(_WORD *)(v0 + 2574) = v22;
  *(void *)(v0 + 2576) = v23;
  *(unsigned char *)(v0 + 2584) = *(unsigned char *)(v0 + 4160);
  *(_DWORD *)(v0 + 2585) = *(_DWORD *)(v0 + 674);
  *(_DWORD *)(v0 + 2588) = *(_DWORD *)(v0 + 677);
  *(void *)(v0 + 2592) = v24;
  *(unsigned char *)(v0 + 2600) = *(unsigned char *)(v0 + 4152);
  *(unsigned char *)(v0 + 2601) = v25;
  *(_DWORD *)(v0 + 2602) = *(_DWORD *)(v0 + 442);
  *(_WORD *)(v0 + 2606) = *(_WORD *)(v0 + 446);
  *(void *)(v0 + 2608) = 200;
  *(unsigned char *)(v0 + 2616) = *(unsigned char *)(v0 + 4184);
  *(_DWORD *)(v0 + 2617) = *(_DWORD *)(v0 + 667);
  *(_DWORD *)(v0 + 2620) = *(_DWORD *)(v0 + 670);
  *(void *)(v0 + 2624) = v26;
  *(unsigned char *)(v0 + 2632) = *(unsigned char *)(v0 + 4168);
  *(_WORD *)(v0 + 2633) = v27;
  *(unsigned char *)(v0 + 2639) = *(unsigned char *)(v0 + 685);
  *(_DWORD *)(v0 + 2635) = *(_DWORD *)(v0 + 681);
  *(void *)(v0 + 2640) = v28;
  *(unsigned char *)(v0 + 2648) = *(unsigned char *)(v0 + 4176);
  *(_DWORD *)(v0 + 2652) = *(_DWORD *)(v0 + 663);
  *(_DWORD *)(v0 + 2649) = *(_DWORD *)(v0 + 660);
  *(void *)(v0 + 2656) = v29;
  *(void *)(v0 + 2664) = v31;
  *(unsigned char *)(v0 + 2672) = v30;
  sub_100036824(v0 + 2488);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1000A5260@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&v28[0] = 46;
  *((void *)&v28[0] + 1) = 0xE100000000000000;
  v27[2] = v28;
  swift_bridgeObjectRetain();
  if (*(void *)(sub_1000FF9F8(0x7FFFFFFFFFFFFFFFLL, 1, sub_1000B2E98, (uint64_t)v27, a1, a2) + 16) != 3)
  {
    swift_bridgeObjectRelease();
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100012E74(v16, (uint64_t)qword_1001E6028);
    long long v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      char v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "POD token has invalid number of components", v19, 2u);
      swift_slowDealloc();
    }

    sub_1000B2218();
    swift_allocError();
    long long v15 = xmmword_10017C790;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1000A56FC();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9 >> 60 == 15)
  {
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100012E74(v10, (uint64_t)qword_1001E6028);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "POD payload string is not valid data", v13, 2u);
      swift_slowDealloc();
    }

    sub_1000B2218();
    swift_allocError();
    long long v15 = xmmword_10017C7A0;
LABEL_13:
    *(_OWORD *)uint64_t v14 = v15;
    *(unsigned char *)(v14 + 16) = 2;
    return swift_willThrow();
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1000B2EB8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10005E9FC(v7, v9);
  uint64_t result = swift_release();
  if (!v3)
  {
    long long v21 = v28[1];
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    uint64_t v24 = v33;
    long long v25 = v32;
    long long v26 = v31;
    *(_OWORD *)a3 = v28[0];
    *(_OWORD *)(a3 + 16) = v21;
    *(void *)(a3 + 32) = v22;
    *(void *)(a3 + 40) = v23;
    *(_OWORD *)(a3 + 48) = v26;
    *(_OWORD *)(a3 + 64) = v25;
    *(void *)(a3 + 80) = v24;
  }
  return result;
}

id sub_1000A55BC()
{
  id v0 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 numberFromString:v1];

  if (v2)
  {
    id v3 = [v2 unsignedLongLongValue];

    sub_100087178((uint64_t)v3, (uint64_t)v10);
    sub_100036994((uint64_t)v10, (uint64_t)v7, &qword_1001E1398);
    uint64_t v4 = v8;
    if (v8)
    {
      uint64_t v5 = v9;
      sub_100012D78(v7, v8);
      id v2 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);

      sub_100086398((uint64_t)v10);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v7);
    }
    else
    {
      sub_100086398((uint64_t)v10);

      sub_100019960((uint64_t)v7, &qword_1001E1398);
      return 0;
    }
  }
  else
  {
  }
  return v2;
}

uint64_t sub_1000A56FC()
{
  uint64_t v0 = Substring.distance(from:to:)();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t result = sub_10013A768(0, v0 & ~(v0 >> 63), 0);
    if ((v1 & 0x8000000000000000) == 0)
    {
      while (1)
      {
        uint64_t v4 = Substring.subscript.getter();
        unint64_t v5 = v3;
        if (v4 == 45 && v3 == 0xE100000000000000)
        {
          unint64_t v5 = 0xE100000000000000;
          swift_bridgeObjectRelease();
          uint64_t v4 = 43;
        }
        else if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          swift_bridgeObjectRelease();
          unint64_t v5 = 0xE100000000000000;
          uint64_t v4 = 43;
        }
        else
        {
          if (v4 == 95 && v5 == 0xE100000000000000)
          {
            unint64_t v5 = 0xE100000000000000;
            swift_bridgeObjectRelease();
LABEL_13:
            uint64_t v4 = 47;
            goto LABEL_14;
          }
          if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            swift_bridgeObjectRelease();
            unint64_t v5 = 0xE100000000000000;
            goto LABEL_13;
          }
        }
LABEL_14:
        unint64_t v7 = _swiftEmptyArrayStorage[2];
        unint64_t v6 = _swiftEmptyArrayStorage[3];
        if (v7 >= v6 >> 1) {
          sub_10013A768(v6 > 1, v7 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v7 + 1;
        uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
        v8[4] = v4;
        v8[5] = v5;
        Substring.index(after:)();
        if (!--v1) {
          goto LABEL_17;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_17:
    sub_100012960(&qword_1001E2EB0);
    sub_1000B2F0C(&qword_1001E2EB8, &qword_1001E2EB0);
    String.init<A>(_:)();
    swift_bridgeObjectRetain();
    uint64_t v9 = String.count.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v9 & 3;
    if (v9 <= 0) {
      uint64_t v10 = -(-v9 & 3);
    }
    if (v10)
    {
      v11._countAndFlagsBits = 61;
      v11._object = (void *)0xE100000000000000;
      Swift::String v12 = String.init(repeating:count:)(v11, 4 - v10);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
    }
    uint64_t v13 = Data.init(base64Encoded:options:)();
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t sub_1000A59B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 48) = a7;
  *(unsigned char *)(v7 + 64) = a6;
  *(void *)(v7 + 24) = a3;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 16) = a2;
  return _swift_task_switch(sub_1000A59DC, 0, 0);
}

uint64_t sub_1000A59DC()
{
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Begin token allocation task", v4, 2u);
    swift_slowDealloc();
  }
  char v5 = *(unsigned char *)(v0 + 64);

  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_1000A5B40;
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v10 = *(void *)(v0 + 24);
  uint64_t v9 = *(void *)(v0 + 32);
  return sub_1000A5C38(v10, v9, v7, v5 & 1, v8);
}

uint64_t sub_1000A5B40()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000A5C38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 1216) = v5;
  *(void *)(v6 + 1208) = a5;
  *(unsigned char *)(v6 + 226) = a4;
  *(void *)(v6 + 1200) = a3;
  *(void *)(v6 + 1192) = a2;
  *(void *)(v6 + 1184) = a1;
  uint64_t v7 = sub_100012960(&qword_1001E1370);
  *(void *)(v6 + 1224) = v7;
  *(void *)(v6 + 1232) = *(void *)(v7 - 8);
  *(void *)(v6 + 1240) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v6 + 1248) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v6 + 1256) = v9;
  *(void *)(v6 + 1264) = *(void *)(v9 + 64);
  *(void *)(v6 + 1272) = swift_task_alloc();
  return _swift_task_switch(sub_1000A5D74, 0, 0);
}

uint64_t sub_1000A5D74()
{
  uint64_t v1 = v0[159];
  uint64_t v2 = v0[157];
  uint64_t v3 = v0[156];
  uint64_t v4 = (void *)v0[152];
  uint64_t v5 = v0[151];
  uint64_t v7 = v4[3];
  uint64_t v6 = v4[4];
  v0[160] = v6;
  uint64_t v8 = (void *)v4[5];
  v0[161] = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  unint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v10 = swift_allocObject();
  v0[162] = v10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v10 + v9, v1, v3);
  uint64_t v14 = (char *)&dword_1001E4900 + dword_1001E4900;
  swift_bridgeObjectRetain();
  id v11 = v8;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[163] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1000A5EF0;
  return ((uint64_t (*)(BOOL (*)@<W0>(unsigned char *@<X8>), uint64_t, uint64_t, uint64_t, id))v14)(sub_1000B24F4, v10, v7, v6, v11);
}

uint64_t sub_1000A5EF0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 1312) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void **)(v4 + 1288);
  swift_release();
  swift_bridgeObjectRelease();

  if (v1)
  {
    uint64_t v6 = sub_1000A71A8;
  }
  else
  {
    *(unsigned char *)(v4 + 227) = a1 & 1;
    uint64_t v6 = sub_1000A606C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000A606C()
{
  if (*(unsigned char *)(v0 + 227) == 1)
  {
    sub_100012D78((void *)(*(void *)(v0 + 1216) + 48), *(void *)(*(void *)(v0 + 1216) + 72));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 1320) = v1;
    void *v1 = v0;
    v1[1] = sub_1000A642C;
    uint64_t v2 = *(void *)(v0 + 1184);
    return sub_1000F0A68(v2);
  }
  else
  {
    sub_1000B2218();
    uint64_t v4 = swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_10017C7B0;
    *(unsigned char *)(v5 + 16) = 2;
    swift_willThrow();
    *(void *)(v0 + 1368) = v4;
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100012E74(v6, (uint64_t)qword_1001E6028);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = *(void *)(v0 + 1184);
      uint64_t v10 = swift_slowAlloc();
      id v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 134218242;
      *(void *)(v0 + 1144) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2112;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1152) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v11 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Register reengagement failed for app %llu with error: %@", (uint8_t *)v10, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v13 = *(void *)(v0 + 1216);

    swift_errorRetain();
    sub_10009485C(4, 0, v4, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 640), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v14 = *(_OWORD *)(v0 + 784);
    *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 768);
    *(_OWORD *)(v0 + 592) = v14;
    *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 800);
    *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 809);
    long long v15 = *(_OWORD *)(v0 + 720);
    *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 704);
    *(_OWORD *)(v0 + 528) = v15;
    long long v16 = *(_OWORD *)(v0 + 752);
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 736);
    *(_OWORD *)(v0 + 560) = v16;
    long long v17 = *(_OWORD *)(v0 + 656);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 640);
    *(_OWORD *)(v0 + 464) = v17;
    long long v18 = *(_OWORD *)(v0 + 688);
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 672);
    *(_OWORD *)(v0 + 496) = v18;
    char v19 = sub_100012D78((void *)(v13 + 232), *(void *)(v13 + 256));
    uint64_t v20 = *v19;
    *(void *)(v0 + 1376) = *v19;
    return _swift_task_switch(sub_1000A6FEC, v20, 0);
  }
}

uint64_t sub_1000A642C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 1328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000A66D0, 0, 0);
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(v2 + 226);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 1336) = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_1000A65BC;
    uint64_t v5 = *(void *)(v2 + 1184);
    return sub_1000A79C4(v2 + 832, v5, v3 & 1);
  }
}

uint64_t sub_1000A65BC()
{
  *(void *)(*(void *)v1 + 1344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000A7494;
  }
  else {
    uint64_t v2 = sub_1000A69BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A66D0()
{
  uint64_t v1 = *(void *)(v0 + 1328);
  *(void *)(v0 + 1368) = v1;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 1184);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134218242;
    *(void *)(v0 + 1144) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1152) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Register reengagement failed for app %llu with error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = *(void *)(v0 + 1216);

  swift_errorRetain();
  sub_10009485C(4, 0, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 640), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    1u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v10 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 592) = v10;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 800);
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 809);
  long long v11 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 528) = v11;
  long long v12 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 560) = v12;
  long long v13 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 464) = v13;
  long long v14 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 496) = v14;
  long long v15 = sub_100012D78((void *)(v9 + 232), *(void *)(v9 + 256));
  uint64_t v16 = *v15;
  *(void *)(v0 + 1376) = *v15;
  return _swift_task_switch(sub_1000A6FEC, v16, 0);
}

uint64_t sub_1000A69BC()
{
  sub_100059F98(v0 + 832, v0 + 936, &qword_1001E2DD8);
  if (*(void *)(v0 + 960))
  {
    long long v1 = *(_OWORD *)(v0 + 968);
    *(_OWORD *)(v0 + 1088) = *(_OWORD *)(v0 + 984);
    long long v2 = *(_OWORD *)(v0 + 1016);
    *(_OWORD *)(v0 + 1104) = *(_OWORD *)(v0 + 1000);
    *(_OWORD *)(v0 + 1120) = v2;
    long long v3 = *(_OWORD *)(v0 + 952);
    *(_OWORD *)(v0 + 1040) = *(_OWORD *)(v0 + 936);
    *(_OWORD *)(v0 + 1056) = v3;
    char v4 = *(unsigned char *)(v0 + 226);
    *(_DWORD *)(v0 + 1135) = *(_DWORD *)(v0 + 1031);
    *(_OWORD *)(v0 + 1072) = v1;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 1352) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000A6E9C;
    uint64_t v6 = *(void *)(v0 + 1200);
    uint64_t v7 = *(void *)(v0 + 1192);
    return sub_1000A029C(v0 + 1040, 2, v7, v6, v4 & 1);
  }
  else
  {
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100012E74(v9, (uint64_t)qword_1001E6028);
    long long v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *(void *)(v0 + 1184);
      long long v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)long long v13 = 134217984;
      *(void *)(v0 + 1160) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No non-allocated token found for app %llu", v13, 0xCu);
      swift_slowDealloc();
    }

    sub_1000B2218();
    uint64_t v14 = swift_allocError();
    *(_OWORD *)uint64_t v15 = xmmword_10017C7C0;
    *(unsigned char *)(v15 + 16) = 2;
    swift_willThrow();
    *(void *)(v0 + 1368) = v14;
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    sub_100012E74(v9, (uint64_t)qword_1001E6028);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = *(void *)(v0 + 1184);
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 134218242;
      *(void *)(v0 + 1144) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2112;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1152) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Register reengagement failed for app %llu with error: %@", (uint8_t *)v19, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v22 = *(void *)(v0 + 1216);

    swift_errorRetain();
    sub_10009485C(4, 0, v14, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 640), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v23 = *(_OWORD *)(v0 + 784);
    *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 768);
    *(_OWORD *)(v0 + 592) = v23;
    *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 800);
    *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 809);
    long long v24 = *(_OWORD *)(v0 + 720);
    *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 704);
    *(_OWORD *)(v0 + 528) = v24;
    long long v25 = *(_OWORD *)(v0 + 752);
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 736);
    *(_OWORD *)(v0 + 560) = v25;
    long long v26 = *(_OWORD *)(v0 + 656);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 640);
    *(_OWORD *)(v0 + 464) = v26;
    long long v27 = *(_OWORD *)(v0 + 688);
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 672);
    *(_OWORD *)(v0 + 496) = v27;
    uint64_t v28 = sub_100012D78((void *)(v22 + 232), *(void *)(v22 + 256));
    uint64_t v29 = *v28;
    *(void *)(v0 + 1376) = *v28;
    return _swift_task_switch(sub_1000A6FEC, v29, 0);
  }
}

uint64_t sub_1000A6E9C()
{
  long long v2 = (void *)*v1;
  v2[170] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000A7780, 0, 0);
  }
  else
  {
    sub_1000B2578(v2 + 104);
    swift_task_dealloc();
    swift_task_dealloc();
    long long v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
}

uint64_t sub_1000A6FEC()
{
  uint64_t v1 = *(void *)(v0 + 1240);
  uint64_t v2 = *(void *)(v0 + 1232);
  uint64_t v3 = *(void *)(v0 + 1224);
  uint64_t v4 = *(void *)(v0 + 1184);
  long long v5 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 376) = v5;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 608);
  long long v6 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 312) = v6;
  long long v7 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 344) = v7;
  long long v8 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 248) = v8;
  long long v9 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 280) = v9;
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 617);
  *(void *)(v0 + 424) = v4;
  *(void *)(v0 + 432) = 0;
  *(_WORD *)(v0 + 440) = 256;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 16);
  sub_10001547C(v0 + 640);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 640);
  return _swift_task_switch(sub_1000A7134, 0, 0);
}

uint64_t sub_1000A7134()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000A71A8()
{
  uint64_t v1 = *(void *)(v0 + 1312);
  *(void *)(v0 + 1368) = v1;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 1184);
    uint64_t v6 = swift_slowAlloc();
    long long v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134218242;
    *(void *)(v0 + 1144) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1152) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Register reengagement failed for app %llu with error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = *(void *)(v0 + 1216);

  swift_errorRetain();
  sub_10009485C(4, 0, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 640), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    1u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v10 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 592) = v10;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 800);
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 809);
  long long v11 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 528) = v11;
  long long v12 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 560) = v12;
  long long v13 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 464) = v13;
  long long v14 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 496) = v14;
  uint64_t v15 = sub_100012D78((void *)(v9 + 232), *(void *)(v9 + 256));
  uint64_t v16 = *v15;
  *(void *)(v0 + 1376) = *v15;
  return _swift_task_switch(sub_1000A6FEC, v16, 0);
}

uint64_t sub_1000A7494()
{
  uint64_t v1 = *(void *)(v0 + 1344);
  *(void *)(v0 + 1368) = v1;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 1184);
    uint64_t v6 = swift_slowAlloc();
    long long v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134218242;
    *(void *)(v0 + 1144) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1152) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Register reengagement failed for app %llu with error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = *(void *)(v0 + 1216);

  swift_errorRetain();
  sub_10009485C(4, 0, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 640), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    1u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v10 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 592) = v10;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 800);
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 809);
  long long v11 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 528) = v11;
  long long v12 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 560) = v12;
  long long v13 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 464) = v13;
  long long v14 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 496) = v14;
  uint64_t v15 = sub_100012D78((void *)(v9 + 232), *(void *)(v9 + 256));
  uint64_t v16 = *v15;
  *(void *)(v0 + 1376) = *v15;
  return _swift_task_switch(sub_1000A6FEC, v16, 0);
}

uint64_t sub_1000A7780()
{
  sub_1000B2578(v0 + 104);
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6028);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[148];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134218242;
    v0[146] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[147] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to register re-engagement for app %llu with error: %@", (uint8_t *)v5, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000A79C4(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 232) = a2;
  *(void *)(v4 + 240) = v3;
  *(unsigned char *)(v4 + 115) = a3;
  *(void *)(v4 + 224) = a1;
  char v6 = a3 & 1;
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v4 + 248) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 256) = v8;
  *(void *)(v4 + 264) = *(void *)(v8 + 64);
  *(void *)(v4 + 272) = swift_task_alloc();
  *(void *)(v4 + 280) = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v4 + 288) = v9;
  *(void *)uint64_t v9 = v4;
  *(void *)(v9 + 8) = sub_1000A7B04;
  *(void *)(v9 + 2248) = v3;
  *(unsigned char *)(v9 + 2344) = v6;
  *(void *)(v9 + 2240) = a2;
  return _swift_task_switch(sub_1000A8B44, 0, 0);
}

uint64_t sub_1000A7B04(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    char v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 219) = a1 & 1;
    return _swift_task_switch(sub_1000A7C5C, 0, 0);
  }
}

uint64_t sub_1000A7C5C()
{
  if (*(unsigned char *)(v0 + 219) == 1)
  {
    uint64_t v5 = (uint64_t (*)(char))((char *)&dword_1001E4078 + dword_1001E4078);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v1;
    void *v1 = v0;
    v1[1] = sub_1000A7D94;
    return v5(15);
  }
  else
  {
    sub_1000B2218();
    swift_allocError();
    *(_OWORD *)uint64_t v3 = xmmword_10017C7D0;
    *(unsigned char *)(v3 + 16) = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1000A7D94(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 304) = a1;
  *(unsigned char *)(v3 + 220) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000A7E98, 0, 0);
}

uint64_t sub_1000A7E98()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v5 = *(uint64_t **)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);
  char v6 = *(unsigned char *)(v0 + 115) & 1;
  Date.init(timeIntervalSinceNow:)();
  uint64_t v7 = v5[1];
  uint64_t v19 = *v5;
  *(void *)(v0 + 312) = v7;
  uint64_t v8 = (void *)v5[2];
  *(void *)(v0 + 320) = v8;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 328) = v9;
  *(void *)(v0 + 336) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v1, v2, v4);
  int v10 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 116) = v10;
  unint64_t v11 = (v10 + 25) & ~(unint64_t)v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 344) = v12;
  *(void *)(v12 + 16) = v17;
  *(unsigned char *)(v12 + 24) = v6;
  long long v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 352) = v13;
  *(void *)(v0 + 360) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v13(v12 + v11, v1, v4);
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48B8
                                                                                     + dword_1001E48B8);
  swift_bridgeObjectRetain();
  id v14 = v8;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1000A8084;
  return v18(v0 + 16, (uint64_t)sub_1000B2700, v12, v19, v7, (uint64_t)v14);
}

uint64_t sub_1000A8084()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 320);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000A8A14;
  }
  else {
    uint64_t v4 = sub_1000A81EC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A81EC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v31 = *(void *)(v0 + 56);
    uint64_t v32 = *(void *)(v0 + 48);
    uint64_t v29 = *(void *)(v0 + 72);
    uint64_t v30 = *(void *)(v0 + 64);
    uint64_t v27 = *(void *)(v0 + 88);
    uint64_t v28 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 104);
    uint64_t v26 = *(void *)(v0 + 96);
    int v5 = *(unsigned __int8 *)(v0 + 114);
    int v6 = *(unsigned __int16 *)(v0 + 112);
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    int v7 = v6 | (v5 << 16);
    uint64_t v8 = type metadata accessor for Logger();
    sub_100012E74(v8, (uint64_t)qword_1001E6028);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cached non-allocated token found", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = *(void *)(v0 + 280);
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    uint64_t v15 = *(void *)(v0 + 224);
    swift_task_dealloc();
    swift_task_dealloc();
    *(void *)uint64_t v15 = v2;
    *(void *)(v15 + 8) = v3 & 1;
    *(void *)(v15 + 16) = v4;
    *(void *)(v15 + 24) = v1;
    *(void *)(v15 + 32) = v32;
    *(void *)(v15 + 40) = v31;
    *(void *)(v15 + 48) = v30;
    *(void *)(v15 + 56) = v29;
    *(void *)(v15 + 64) = v28;
    *(void *)(v15 + 72) = v27;
    *(void *)(v15 + 80) = v26;
    *(void *)(v15 + 88) = v25;
    *(unsigned char *)(v15 + 98) = BYTE2(v7) & 1;
    *(_WORD *)(v15 + 96) = v7 & 0x1FF;
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100012E74(v18, (uint64_t)qword_1001E6028);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Fetching for re-engagement tokens...", v21, 2u);
      swift_slowDealloc();
    }
    char v22 = *(unsigned char *)(v0 + 115);

    long long v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v23;
    *long long v23 = v0;
    v23[1] = sub_1000A8520;
    uint64_t v24 = *(void *)(v0 + 232);
    return sub_1000A98C8(v24, v22 & 1, 0);
  }
}

uint64_t sub_1000A8520()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000A861C, 0, 0);
}

uint64_t sub_1000A861C()
{
  uint64_t v15 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 352);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(uint64_t **)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 232);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 116) + 25) & ~(unint64_t)*(unsigned __int8 *)(v0 + 116);
  char v8 = *(unsigned char *)(v0 + 115) & 1;
  uint64_t v9 = v4[1];
  uint64_t v17 = *v4;
  *(void *)(v0 + 392) = v9;
  os_log_type_t v10 = (void *)v4[2];
  *(void *)(v0 + 400) = v10;
  v1(v3, v2, v5);
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 408) = v11;
  *(void *)(v11 + 16) = v6;
  *(unsigned char *)(v11 + 24) = v8;
  v15(v11 + v7, v3, v5);
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48B8
                                                                                     + dword_1001E48B8);
  swift_bridgeObjectRetain();
  id v12 = v10;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1000A87B4;
  return v16(v0 + 120, (uint64_t)sub_1000B2700, v11, v17, v9, (uint64_t)v12);
}

uint64_t sub_1000A87B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 400);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000A8A98;
  }
  else {
    uint64_t v4 = sub_1000A891C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A891C()
{
  (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 248));
  long long v11 = *(_OWORD *)(v0 + 136);
  long long v12 = *(_OWORD *)(v0 + 120);
  long long v9 = *(_OWORD *)(v0 + 168);
  long long v10 = *(_OWORD *)(v0 + 152);
  long long v8 = *(_OWORD *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  __int16 v3 = *(_WORD *)(v0 + 216);
  char v4 = *(unsigned char *)(v0 + 218);
  uint64_t v5 = *(void *)(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  *(_OWORD *)uint64_t v5 = v12;
  *(_OWORD *)(v5 + 16) = v11;
  *(_OWORD *)(v5 + 32) = v10;
  *(_OWORD *)(v5 + 48) = v9;
  *(_OWORD *)(v5 + 64) = v8;
  *(void *)(v5 + 80) = v1;
  *(void *)(v5 + 88) = v2;
  *(unsigned char *)(v5 + 98) = v4;
  *(_WORD *)(v5 + 96) = v3;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000A8A14()
{
  (*(void (**)(void, void))(v0[32] + 8))(v0[35], v0[31]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000A8A98()
{
  (*(void (**)(void, void))(v0[32] + 8))(v0[35], v0[31]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000A8B1C(uint64_t a1, char a2)
{
  *(void *)(v3 + 2248) = v2;
  *(unsigned char *)(v3 + 2344) = a2;
  *(void *)(v3 + 2240) = a1;
  return _swift_task_switch(sub_1000A8B44, 0, 0);
}

uint64_t sub_1000A8B44()
{
  uint64_t v15 = v0;
  if (*(unsigned char *)(v0 + 2344)) {
    uint64_t v1 = 0x69746375646F7270;
  }
  else {
    uint64_t v1 = 0x6D706F6C65766564;
  }
  if (*(unsigned char *)(v0 + 2344)) {
    unint64_t v2 = 0xEA00000000006E6FLL;
  }
  else {
    unint64_t v2 = 0xEB00000000746E65;
  }
  if ((*(unsigned char *)(v0 + 2344) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    if (qword_1001E0900 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100012E74(v4, (uint64_t)qword_1001E6028);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)unint64_t v7 = 136315138;
      *(void *)(v0 + 2232) = sub_100147668(v1, v2, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Skipping rate limit check for environment: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    long long v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v8(1);
  }
  char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v3) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v0 + 2248);
  uint64_t v11 = *(void *)(v0 + 2240);
  sub_1000B226C(v10, v0 + 1336);
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 2256) = v12;
  memcpy((void *)(v12 + 16), (const void *)(v0 + 1336), 0x110uLL);
  *(void *)(v12 + 288) = v11;
  swift_retain();
  swift_asyncLet_begin();
  sub_1000B226C(v10, v0 + 1608);
  uint64_t v13 = swift_allocObject();
  *(void *)(v0 + 2264) = v13;
  memcpy((void *)(v13 + 16), (const void *)(v0 + 1608), 0x110uLL);
  swift_retain();
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 656, v0 + 1944, sub_1000A8F00, v0 + 1952);
}

uint64_t sub_1000A8F00()
{
  unint64_t v2 = v1 + 2;
  char v3 = v1 + 249;
  v1[284] = v0;
  if (v0) {
    return _swift_asyncLet_finish(v2, v3, sub_1000A9668, v1 + 250);
  }
  v1[285] = v1[243];
  return _swift_asyncLet_get(v2, v3, sub_1000A8F48, v1 + 238);
}

uint64_t sub_1000A8F48()
{
  return _swift_task_switch(sub_1000A8F64, 0, 0);
}

uint64_t sub_1000A8F64()
{
  uint64_t v1 = v0[249];
  v0[286] = v1;
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[287] = sub_100012E74(v2, (uint64_t)qword_1001E6028);
  char v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[285];
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134218240;
    v0[267] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2048;
    v0[273] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Current re-engagement token count: %ld, max token count: %ld", (uint8_t *)v6, 0x16u);
    swift_slowDealloc();
  }

  unint64_t v7 = (void *)swift_task_alloc();
  v0[288] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_1000A9118;
  return sub_1000ACD88();
}

uint64_t sub_1000A9118(uint64_t a1)
{
  char v3 = (void *)*v2;
  v3[289] = a1;
  v3[290] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_asyncLet_finish(v3 + 2, v3 + 249, sub_1000A9798, v3 + 268);
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E4088 + dword_1001E4088);
    os_log_type_t v4 = (void *)swift_task_alloc();
    v3[291] = v4;
    *os_log_type_t v4 = v3;
    v4[1] = sub_1000A92A8;
    return v6(14);
  }
}

uint64_t sub_1000A92A8(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 1896) = a2;
  *(void *)(v3 + 1888) = a1;
  *(void *)(v3 + 1880) = v2;
  *(unsigned char *)(v3 + 2345) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000A93B4, 0, 0);
}

uint64_t sub_1000A93B4()
{
  char v1 = *(unsigned char *)(v0 + 2345);
  if (*(uint64_t *)(v0 + 1888) >= 720) {
    uint64_t v2 = 720;
  }
  else {
    uint64_t v2 = *(void *)(v0 + 1888);
  }
  *(void *)(v0 + 2336) = v2;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    if (v1) {
      uint64_t v5 = 720;
    }
    else {
      uint64_t v5 = v2;
    }
    uint64_t v6 = *(void *)(v0 + 2312);
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)(v0 + 2040) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2048;
    *(void *)(v0 + 2088) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Current re-engagement device token count: %ld, max token count: %ld", (uint8_t *)v7, 0x16u);
    swift_slowDealloc();
  }

  return _swift_asyncLet_finish(v0 + 16, v0 + 1992, sub_1000A9510, v0 + 2096);
}

uint64_t sub_1000A9510()
{
  return _swift_task_switch(sub_1000A952C, 0, 0);
}

uint64_t sub_1000A952C()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1944, sub_1000A95AC, v0 + 1296);
}

uint64_t sub_1000A95AC()
{
  return _swift_task_switch(sub_1000A95C8, 0, 0);
}

uint64_t sub_1000A95C8()
{
  swift_release_n();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 2336);
  if (*(unsigned char *)(v0 + 2345)) {
    uint64_t v1 = 720;
  }
  BOOL v3 = *(void *)(v0 + 2280) < *(void *)(v0 + 2288) && *(void *)(v0 + 2312) < v1;
  os_log_type_t v4 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v4(v3);
}

uint64_t sub_1000A9668()
{
  return _swift_task_switch(sub_1000A9684, 0, 0);
}

uint64_t sub_1000A9684()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1944, sub_1000A9704, v0 + 2048);
}

uint64_t sub_1000A9704()
{
  return _swift_task_switch(sub_1000A9720, 0, 0);
}

uint64_t sub_1000A9720()
{
  swift_release_n();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1000A9798()
{
  return _swift_task_switch(sub_1000A97B4, 0, 0);
}

uint64_t sub_1000A97B4()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 1944, sub_1000A9834, v0 + 2192);
}

uint64_t sub_1000A9834()
{
  return _swift_task_switch(sub_1000A9850, 0, 0);
}

uint64_t sub_1000A9850()
{
  swift_release_n();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1000A98C8(uint64_t a1, char a2, char a3)
{
  *(void *)(v4 + 3344) = v3;
  *(unsigned char *)(v4 + 229) = a3;
  *(unsigned char *)(v4 + 228) = a2;
  *(void *)(v4 + 3336) = a1;
  uint64_t v5 = sub_100012960(&qword_1001E1370);
  *(void *)(v4 + 3352) = v5;
  *(void *)(v4 + 3360) = *(void *)(v5 - 8);
  *(void *)(v4 + 3368) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SKANUTClient();
  *(void *)(v4 + 3376) = v6;
  *(void *)(v4 + 3384) = *(void *)(v6 - 8);
  *(void *)(v4 + 3392) = swift_task_alloc();
  return _swift_task_switch(sub_1000A99F4, 0, 0);
}

uint64_t sub_1000A99F4()
{
  if (qword_1001E0900 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 3400) = sub_100012E74(v1, (uint64_t)qword_1001E6028);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 3336);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v0 + 3320) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching re-engagement tokens for app %llu", v5, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v59 = v0 + 442;
  uint64_t v60 = (uint64_t *)(v0 + 3208);
  uint64_t v62 = (objc_super *)(v0 + 3256);

  if (*(unsigned char *)(v0 + 228))
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = 3;
    if ((v6 & 1) == 0) {
      uint64_t v7 = 1;
    }
  }
  uint64_t v8 = 0;
  uint64_t v58 = (uint64_t *)(v0 + 3288);
  *(void *)(v0 + 3408) = v7;
  *(void *)(v0 + 3416) = kSecRandomDefault;
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v10 = &_swiftEmptyDictionarySingleton;
  uint64_t v61 = v0;
  while (1)
  {
    *(void *)(v0 + 3440) = v9;
    uint64_t v63 = v10;
    uint64_t v64 = v8;
    *(void *)(v0 + 3432) = v8;
    *(void *)(v0 + 3424) = v10;
    uint64_t v11 = *(const __SecRandom **)(v0 + 3416);
    uint64_t v12 = *(void *)(v0 + 3392);
    uint64_t v13 = *(void *)(v0 + 3384);
    uint64_t v65 = *(void *)(v0 + 3376);
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v14 + 16) = 32;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    uint64_t v15 = (unsigned char *)(v14 + 32);
    SecRandomCopyBytes(v11, 0x20uLL, (void *)(v14 + 32));
    uint64_t v16 = sub_1000B0E50(v15, 32);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v19 = (objc_class *)type metadata accessor for PersistentTokenHandler();
    os_log_type_t v20 = (char *)objc_allocWithZone(v19);
    *(void *)&v20[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_timestamp] = 0;
    sub_10003CF30(v16, v18);
    sub_10003CF30(v16, v18);
    uint64_t v21 = v20;
    SKANUTClient.init(privateInput:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(&v21[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_utClient], v12, v65);
    char v22 = (uint64_t *)&v21[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_privateInput];
    *char v22 = v16;
    v22[1] = v18;
    sub_10003CF30(v16, v18);

    *(void *)(v0 + 3256) = v21;
    *(void *)(v0 + 3264) = v19;
    long long v23 = [(objc_super *)v62 init];
    unint64_t v66 = v18;
    sub_100020930(v16, v18);
    uint64_t v24 = SKANUTClient.blindedElement()();
    unint64_t v26 = v25;
    Swift::String v27 = Data.base64EncodedString(options:)(0);
    sub_100020930(v24, v26);
    Swift::String v28 = Data.base64EncodedString(options:)(0);
    unint64_t v29 = sub_1000BDB60();
    if (v30) {
      break;
    }
    unint64_t v31 = v29;
    *(id *)((char *)&v23->receiver + OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_timestamp) = (id)v29;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_1001399E0(0, v9[2] + 1, 1, v9);
    }
    unint64_t v33 = v9[2];
    unint64_t v32 = v9[3];
    char v34 = v9;
    if (v33 >= v32 >> 1) {
      char v34 = sub_1001399E0((void *)(v32 > 1), v33 + 1, 1, v9);
    }
    uint64_t v0 = v61;
    uint64_t v35 = *(void *)(v61 + 3336);
    char v36 = *(unsigned char *)(v61 + 228) & 1;
    char v37 = v34;
    v34[2] = v33 + 1;
    uint64_t v38 = &v34[6 * v33];
    v38[4] = v64;
    *(Swift::String *)(v38 + 5) = v27;
    v38[7] = v31;
    v38[8] = v35;
    *((unsigned char *)v38 + 72) = v36;
    uint64_t v39 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(Swift::String *)(v61 + 3208) = v27;
    *(Swift::String *)(v61 + 3224) = v28;
    *(void *)(v61 + 3240) = v31;
    *(void *)(v61 + 3248) = v39;
    uint64_t v9 = v37;
    sub_1000AFDDC(v60, v64, isUniquelyReferenced_nonNull_native);
    uint64_t v10 = v63;
    swift_bridgeObjectRelease();
    sub_100020930(v16, v66);

    *(void *)(v61 + 3448) = v63;
    uint64_t v8 = *(void *)(v61 + 3432) + 1;
    if (v8 == *(void *)(v61 + 3408))
    {
      sub_10009485C(5, 5, 0, 0, 0, 0, 2, 2, (_OWORD *)(v61 + 2128), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
        0,
        1u,
        1u,
        3u,
        0,
        1u,
        0,
        0,
        2u);
      *(_WORD *)(v61 + 230) = *(_WORD *)(v61 + 2128);
      *(_OWORD *)(v61 + 3456) = *(_OWORD *)(v59 + 1694);
      *(_OWORD *)(v61 + 3472) = *(_OWORD *)(v59 + 1710);
      *(_OWORD *)(v61 + 3488) = *(_OWORD *)(v59 + 1726);
      *(_OWORD *)(v61 + 3504) = *(_OWORD *)(v59 + 1742);
      *(void *)(v61 + 3520) = *(void *)(v61 + 2200);
      *(_DWORD *)uint64_t v59 = *(_DWORD *)(v61 + 2208);
      *(unsigned char *)(v61 + 446) = *(unsigned char *)(v61 + 2212);
      *(unsigned char *)(v61 + 447) = *(unsigned char *)(v61 + 2213);
      *(_WORD *)(v61 + 226) = *(_WORD *)(v61 + 2214);
      *(void *)(v61 + 3528) = *(void *)(v61 + 2216);
      char v48 = *(unsigned char *)(v61 + 2224);
      *(unsigned char *)(v61 + 658) = v48;
      *(unsigned char *)(v61 + 3712) = v48;
      *(void *)(v61 + 3536) = *(void *)(v61 + 2232);
      char v49 = *(unsigned char *)(v61 + 2240);
      *(unsigned char *)(v61 + 659) = v49;
      *(unsigned char *)(v61 + 3720) = v49;
      *(unsigned char *)(v61 + 660) = *(unsigned char *)(v61 + 2241);
      *(void *)(v61 + 3544) = *(void *)(v61 + 2248);
      char v50 = *(unsigned char *)(v61 + 2256);
      *(unsigned char *)(v61 + 661) = v50;
      *(unsigned char *)(v61 + 3728) = v50;
      *(void *)(v61 + 3552) = *(void *)(v61 + 2264);
      char v51 = *(unsigned char *)(v61 + 2272);
      *(unsigned char *)(v61 + 662) = v51;
      *(unsigned char *)(v61 + 3736) = v51;
      *(unsigned char *)(v61 + 663) = *(unsigned char *)(v61 + 2273);
      *(unsigned char *)(v61 + 874) = *(unsigned char *)(v61 + 2274);
      *(void *)(v61 + 3560) = *(void *)(v61 + 2280);
      char v52 = *(unsigned char *)(v61 + 2288);
      *(unsigned char *)(v61 + 875) = v52;
      *(unsigned char *)(v61 + 3744) = v52;
      *(_OWORD *)(v61 + 3568) = *(_OWORD *)(v59 + 1854);
      *(unsigned char *)(v61 + 876) = *(unsigned char *)(v61 + 2312);
      *(void *)(v61 + 3192) = &type metadata for AMSDogBag;
      *(void *)(v61 + 3200) = &off_1001CAA18;
      *(void *)(v61 + 3160) = v37;
      uint64_t v53 = (void *)swift_task_alloc();
      *(void *)(v61 + 3584) = v53;
      void *v53 = v61;
      v53[1] = sub_1000AA378;
      return sub_10003A3D8();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000B2830();
  uint64_t v41 = swift_allocError();
  *(void *)(v0 + 3680) = v41;
  *char v42 = 1;
  swift_willThrow();

  sub_100020930(v16, v66);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    char v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = (void *)swift_slowAlloc();
    *(_DWORD *)char v45 = 138412290;
    swift_errorRetain();
    uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
    *uint64_t v58 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v46 = v47;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to create blinded data: %@", v45, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v55 = *(void *)(v0 + 3344);

  swift_errorRetain();
  sub_10009485C(5, 5, v41, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2512), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
    0,
    1u,
    1u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 2064) = *(_OWORD *)(v0 + 2640);
  *(_OWORD *)(v0 + 2080) = *(_OWORD *)(v0 + 2656);
  *(_OWORD *)(v0 + 2096) = *(_OWORD *)(v0 + 2672);
  *(_OWORD *)(v0 + 2105) = *(_OWORD *)(v0 + 2681);
  *(_OWORD *)(v0 + 2000) = *(_OWORD *)(v0 + 2576);
  *(_OWORD *)(v0 + 2016) = *(_OWORD *)(v0 + 2592);
  *(_OWORD *)(v0 + 2032) = *(_OWORD *)(v0 + 2608);
  *(_OWORD *)(v0 + 2048) = *(_OWORD *)(v0 + 2624);
  *(_OWORD *)(v0 + 1936) = *(_OWORD *)(v0 + 2512);
  *(_OWORD *)(v0 + 1952) = *(_OWORD *)(v0 + 2528);
  *(_OWORD *)(v0 + 1968) = *(_OWORD *)(v0 + 2544);
  *(_OWORD *)(v0 + 1984) = *(_OWORD *)(v0 + 2560);
  os_log_type_t v56 = sub_100012D78((void *)(v55 + 232), *(void *)(v55 + 256));
  uint64_t v57 = *v56;
  *(void *)(v0 + 3688) = *v56;
  return _swift_task_switch(sub_1000AB190, v57, 0);
}

uint64_t sub_1000AA378(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 3592) = a1;
  *(void *)(v3 + 3600) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000AAA74;
  }
  else
  {
    uint64_t v4 = sub_1000AA498;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000AA498()
{
  char v28 = *(unsigned char *)(v0 + 876);
  uint64_t v26 = *(void *)(v0 + 3568);
  uint64_t v27 = *(void *)(v0 + 3576);
  char v25 = *(unsigned char *)(v0 + 875);
  uint64_t v24 = *(void *)(v0 + 3560);
  __int16 v22 = *(_WORD *)(v0 + 662);
  char v23 = *(unsigned char *)(v0 + 874);
  uint64_t v21 = *(void *)(v0 + 3552);
  char v20 = *(unsigned char *)(v0 + 661);
  uint64_t v19 = *(void *)(v0 + 3544);
  __int16 v18 = *(_WORD *)(v0 + 659);
  uint64_t v17 = *(void *)(v0 + 3536);
  char v16 = *(unsigned char *)(v0 + 658);
  uint64_t v15 = *(void *)(v0 + 3528);
  __int16 v14 = *(_WORD *)(v0 + 226);
  __int16 v13 = *(_WORD *)(v0 + 446);
  uint64_t v12 = *(void *)(v0 + 3520);
  long long v10 = *(_OWORD *)(v0 + 3488);
  long long v11 = *(_OWORD *)(v0 + 3504);
  long long v8 = *(_OWORD *)(v0 + 3456);
  long long v9 = *(_OWORD *)(v0 + 3472);
  int v1 = *(_DWORD *)(v0 + 442);
  __int16 v2 = *(_WORD *)(v0 + 230);
  uint64_t v3 = sub_100012D78((void *)(*(void *)(v0 + 3344) + 232), *(void *)(*(void *)(v0 + 3344) + 256));
  *(_WORD *)(v0 + 2320) = v2;
  *(_DWORD *)(v0 + 2322) = *(_DWORD *)(v0 + 2130);
  *(_WORD *)(v0 + 2326) = *(_WORD *)(v0 + 2134);
  *(_OWORD *)(v0 + 2328) = v8;
  *(_OWORD *)(v0 + 2344) = v9;
  *(_OWORD *)(v0 + 2360) = v10;
  *(_OWORD *)(v0 + 2376) = v11;
  *(void *)(v0 + 2392) = v12;
  *(_DWORD *)(v0 + 2400) = v1;
  *(_WORD *)(v0 + 2404) = v13;
  *(_WORD *)(v0 + 2406) = v14;
  *(void *)(v0 + 2408) = v15;
  *(unsigned char *)(v0 + 2416) = v16;
  int v4 = *(_DWORD *)(v0 + 2225);
  *(_DWORD *)(v0 + 2420) = *(_DWORD *)(v0 + 2228);
  *(_DWORD *)(v0 + 2417) = v4;
  *(void *)(v0 + 2424) = v17;
  *(_WORD *)(v0 + 2432) = v18;
  *(_DWORD *)(v0 + 2434) = *(_DWORD *)(v0 + 2242);
  *(_WORD *)(v0 + 2438) = *(_WORD *)(v0 + 2246);
  *(void *)(v0 + 2440) = v19;
  *(unsigned char *)(v0 + 2448) = v20;
  *(_DWORD *)(v0 + 2449) = *(_DWORD *)(v0 + 2257);
  *(_DWORD *)(v0 + 2452) = *(_DWORD *)(v0 + 2260);
  *(void *)(v0 + 2456) = v21;
  *(_WORD *)(v0 + 2464) = v22;
  *(unsigned char *)(v0 + 2466) = v23;
  int v5 = *(_DWORD *)(v0 + 2275);
  *(unsigned char *)(v0 + 2471) = *(unsigned char *)(v0 + 2279);
  *(_DWORD *)(v0 + 2467) = v5;
  *(void *)(v0 + 2472) = v24;
  *(unsigned char *)(v0 + 2480) = v25;
  *(_DWORD *)(v0 + 2484) = *(_DWORD *)(v0 + 2292);
  *(_DWORD *)(v0 + 2481) = *(_DWORD *)(v0 + 2289);
  *(void *)(v0 + 2488) = v26;
  *(void *)(v0 + 2496) = v27;
  *(unsigned char *)(v0 + 2504) = v28;
  uint64_t v6 = *v3;
  *(void *)(v0 + 3608) = *v3;
  return _swift_task_switch(sub_1000AA744, v6, 0);
}

uint64_t sub_1000AA744()
{
  uint64_t v1 = *(void *)(v0 + 3368);
  uint64_t v2 = *(void *)(v0 + 3360);
  uint64_t v3 = *(void *)(v0 + 3352);
  BOOL v4 = *(unsigned char *)(v0 + 229) == 0;
  if (*(unsigned char *)(v0 + 229)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v0 + 3336);
  }
  long long v6 = *(_OWORD *)(v0 + 2464);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 2448);
  *(_OWORD *)(v0 + 592) = v6;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 2480);
  long long v7 = *(_OWORD *)(v0 + 2400);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 2384);
  *(_OWORD *)(v0 + 528) = v7;
  long long v8 = *(_OWORD *)(v0 + 2432);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 2416);
  *(_OWORD *)(v0 + 560) = v8;
  long long v9 = *(_OWORD *)(v0 + 2336);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 2320);
  *(_OWORD *)(v0 + 464) = v9;
  long long v10 = *(_OWORD *)(v0 + 2368);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 2352);
  *(_OWORD *)(v0 + 496) = v10;
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 2489);
  *(void *)(v0 + 640) = v5;
  *(void *)(v0 + 648) = 0;
  if (v4) {
    char v11 = 0;
  }
  else {
    char v11 = 2;
  }
  *(unsigned char *)(v0 + 656) = v11;
  *(unsigned char *)(v0 + 657) = 1;
  sub_10003675C(v0 + 448);
  sub_1000367C8(v0 + 448, v0 + 664);
  sub_10001547C(v0 + 2320);
  sub_1000B2884(v5, 0, v11);
  *(void *)(v0 + 3616) = sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 3624) = v12;
  *(void *)(v0 + 3632) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v1, v3);
  sub_100036824(v0 + 2320);
  return _swift_task_switch(sub_1000AA8E0, 0, 0);
}

uint64_t sub_1000AA8E0()
{
  uint64_t v1 = *(void *)(v0 + 3592);
  sub_1000B289C(v0 + 3160);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 3640) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 3592);
    *(void *)(v0 + 3648) = 0;
    char v4 = *(unsigned char *)(v0 + 228);
    uint64_t v5 = *(void *)(v3 + 96);
    long long v7 = *(_OWORD *)(v3 + 64);
    long long v6 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)(v0 + 3104) = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(v0 + 3120) = v7;
    *(_OWORD *)(v0 + 3136) = v6;
    *(void *)(v0 + 3152) = v5;
    *(_OWORD *)(v0 + 3088) = *(_OWORD *)(v3 + 32);
    *(void *)(v0 + 3656) = *(void *)(v0 + 3088);
    sub_1000B2908(v0 + 3088);
    swift_bridgeObjectRetain();
    long long v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 3664) = v8;
    *long long v8 = v0;
    v8[1] = sub_1000AADE8;
    uint64_t v9 = *(void *)(v0 + 3448);
    uint64_t v10 = *(void *)(v0 + 3336);
    return sub_1000AD288(v10, v0 + 3088, v9, v4 & 1);
  }
  else
  {
    if (*(unsigned char *)(v0 + 229)) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = *(void *)(v0 + 3336);
    }
    if (*(unsigned char *)(v0 + 229)) {
      char v13 = 2;
    }
    else {
      char v13 = 0;
    }
    sub_1000B28F0(v12, 0, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_1000AAA74()
{
  sub_1000B289C(v0 + 3160);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 3336);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134218242;
    *(void *)(v0 + 3280) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3312) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetch for re-engagement tokens for app %llu failed with error: %@", (uint8_t *)v4, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 3600);
  char v40 = *(unsigned char *)(v0 + 876);
  uint64_t v38 = *(void *)(v0 + 3568);
  uint64_t v39 = *(void *)(v0 + 3576);
  uint64_t v37 = *(void *)(v0 + 3560);
  char v35 = *(unsigned char *)(v0 + 663);
  char v36 = *(unsigned char *)(v0 + 874);
  uint64_t v33 = *(void *)(v0 + 3544);
  uint64_t v34 = *(void *)(v0 + 3552);
  char v32 = *(unsigned char *)(v0 + 660);
  uint64_t v30 = *(void *)(v0 + 3528);
  uint64_t v31 = *(void *)(v0 + 3536);
  __int16 v29 = *(_WORD *)(v0 + 446);
  uint64_t v28 = *(void *)(v0 + 3520);
  long long v26 = *(_OWORD *)(v0 + 3488);
  long long v27 = *(_OWORD *)(v0 + 3504);
  __int16 v24 = *(_WORD *)(v0 + 230);
  uint64_t v8 = *(void *)(v0 + 3344);
  int v25 = *(_DWORD *)(v0 + 442);

  uint64_t v9 = sub_100094708(v7);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v16 = sub_100012D78((void *)(v8 + 232), *(void *)(v8 + 256));
  char v17 = *(unsigned char *)(v0 + 3712);
  char v18 = *(unsigned char *)(v0 + 3720);
  char v19 = *(unsigned char *)(v0 + 3728);
  char v20 = *(unsigned char *)(v0 + 3736);
  char v21 = *(unsigned char *)(v0 + 3744);
  *(_WORD *)(v0 + 2704) = v24;
  *(void *)(v0 + 2712) = v9;
  *(void *)(v0 + 2720) = v11;
  *(void *)(v0 + 2728) = v13;
  *(void *)(v0 + 2736) = v15;
  *(_OWORD *)(v0 + 2744) = v26;
  *(_OWORD *)(v0 + 2760) = v27;
  *(void *)(v0 + 2776) = v28;
  *(_DWORD *)(v0 + 2784) = v25;
  *(_WORD *)(v0 + 2788) = v29;
  *(void *)(v0 + 2792) = v30;
  *(unsigned char *)(v0 + 2800) = v17;
  *(void *)(v0 + 2808) = v31;
  *(unsigned char *)(v0 + 2816) = v18;
  *(unsigned char *)(v0 + 2817) = v32;
  *(void *)(v0 + 2824) = v33;
  *(unsigned char *)(v0 + 2832) = v19;
  *(void *)(v0 + 2840) = v34;
  *(unsigned char *)(v0 + 2848) = v20;
  *(unsigned char *)(v0 + 2849) = v35;
  *(unsigned char *)(v0 + 2850) = v36;
  *(void *)(v0 + 2856) = v37;
  *(unsigned char *)(v0 + 2864) = v21;
  *(void *)(v0 + 2872) = v38;
  *(void *)(v0 + 2880) = v39;
  *(unsigned char *)(v0 + 2888) = v40;
  uint64_t v22 = *v16;
  *(void *)(v0 + 3696) = *v16;
  return _swift_task_switch(sub_1000ABB18, v22, 0);
}

uint64_t sub_1000AADE8()
{
  *(void *)(*(void *)v1 + 3672) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1000ABD24;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v2 = sub_1000AAF04;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000AAF04()
{
  uint64_t v1 = (_OWORD *)(v0 + 3088);
  sub_1000B2908(v0 + 3088);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 3656);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    sub_1000B2960(v0 + 3088);
    *(void *)(v0 + 3296) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000B2960(v0 + 3088);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Finalized reengagement token for id: %ld", v5, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    sub_1000B2960(v0 + 3088);
    sub_1000B2960(v0 + 3088);
  }

  uint64_t v6 = *(void *)(v0 + 3648) + 1;
  if (v6 == *(void *)(v0 + 3640))
  {
    if (*(unsigned char *)(v0 + 229)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *(void *)(v0 + 3336);
    }
    if (*(unsigned char *)(v0 + 229)) {
      char v8 = 2;
    }
    else {
      char v8 = 0;
    }
    sub_1000B28F0(v7, 0, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    *(void *)(v0 + 3648) = v6;
    char v11 = *(unsigned char *)(v0 + 228);
    uint64_t v12 = *(void *)(v0 + 3592) + 72 * v6;
    _OWORD *v1 = *(_OWORD *)(v12 + 32);
    long long v13 = *(_OWORD *)(v12 + 48);
    long long v14 = *(_OWORD *)(v12 + 64);
    long long v15 = *(_OWORD *)(v12 + 80);
    *(void *)(v0 + 3152) = *(void *)(v12 + 96);
    *(_OWORD *)(v0 + 3120) = v14;
    *(_OWORD *)(v0 + 3136) = v15;
    *(_OWORD *)(v0 + 3104) = v13;
    *(void *)(v0 + 3656) = *(void *)(v0 + 3088);
    sub_1000B2908(v0 + 3088);
    swift_bridgeObjectRetain();
    char v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 3664) = v16;
    *char v16 = v0;
    v16[1] = sub_1000AADE8;
    uint64_t v17 = *(void *)(v0 + 3448);
    uint64_t v18 = *(void *)(v0 + 3336);
    return sub_1000AD288(v18, (uint64_t)v1, v17, v11 & 1);
  }
}

uint64_t sub_1000AB190()
{
  uint64_t v1 = *(void *)(v0 + 3368);
  uint64_t v2 = *(void *)(v0 + 3360);
  uint64_t v3 = *(void *)(v0 + 3352);
  BOOL v4 = *(unsigned char *)(v0 + 229) == 0;
  if (*(unsigned char *)(v0 + 229)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v0 + 3336);
  }
  long long v6 = *(_OWORD *)(v0 + 2080);
  *(_OWORD *)(v0 + 1224) = *(_OWORD *)(v0 + 2064);
  *(_OWORD *)(v0 + 1240) = v6;
  *(_OWORD *)(v0 + 1256) = *(_OWORD *)(v0 + 2096);
  long long v7 = *(_OWORD *)(v0 + 2016);
  *(_OWORD *)(v0 + 1160) = *(_OWORD *)(v0 + 2000);
  *(_OWORD *)(v0 + 1176) = v7;
  long long v8 = *(_OWORD *)(v0 + 2048);
  *(_OWORD *)(v0 + 1192) = *(_OWORD *)(v0 + 2032);
  *(_OWORD *)(v0 + 1208) = v8;
  long long v9 = *(_OWORD *)(v0 + 1952);
  *(_OWORD *)(v0 + 1096) = *(_OWORD *)(v0 + 1936);
  *(_OWORD *)(v0 + 1112) = v9;
  long long v10 = *(_OWORD *)(v0 + 1984);
  *(_OWORD *)(v0 + 1128) = *(_OWORD *)(v0 + 1968);
  *(_OWORD *)(v0 + 1144) = v10;
  *(_OWORD *)(v0 + 1265) = *(_OWORD *)(v0 + 2105);
  *(void *)(v0 + 1288) = v5;
  *(void *)(v0 + 1296) = 0;
  if (v4) {
    char v11 = 0;
  }
  else {
    char v11 = 2;
  }
  *(unsigned char *)(v0 + 1304) = v11;
  *(unsigned char *)(v0 + 1305) = 1;
  sub_10003675C(v0 + 1096);
  sub_1000367C8(v0 + 1096, v0 + 1528);
  sub_1000B2884(v5, 0, v11);
  sub_10001547C(v0 + 2512);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 2512);
  return _swift_task_switch(sub_1000AB31C, 0, 0);
}

uint64_t sub_1000AB31C()
{
  swift_errorRelease();
  uint64_t v58 = *(void **)(v0 + 3440);
  uint64_t v1 = *(void *)(v0 + 3424);
  *(void *)(v0 + 3448) = v1;
  uint64_t v2 = *(void *)(v0 + 3432) + 1;
  if (v2 == *(void *)(v0 + 3408))
  {
LABEL_2:
    sub_10009485C(5, 5, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2128), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    *(_WORD *)(v0 + 230) = *(_WORD *)(v0 + 2128);
    *(_OWORD *)(v0 + 3456) = *(_OWORD *)(v0 + 2136);
    *(_OWORD *)(v0 + 3472) = *(_OWORD *)(v0 + 2152);
    *(_OWORD *)(v0 + 3488) = *(_OWORD *)(v0 + 2168);
    *(_OWORD *)(v0 + 3504) = *(_OWORD *)(v0 + 2184);
    *(void *)(v0 + 3520) = *(void *)(v0 + 2200);
    *(_DWORD *)(v0 + 442) = *(_DWORD *)(v0 + 2208);
    *(unsigned char *)(v0 + 446) = *(unsigned char *)(v0 + 2212);
    *(unsigned char *)(v0 + 447) = *(unsigned char *)(v0 + 2213);
    *(_WORD *)(v0 + 226) = *(_WORD *)(v0 + 2214);
    *(void *)(v0 + 3528) = *(void *)(v0 + 2216);
    char v3 = *(unsigned char *)(v0 + 2224);
    *(unsigned char *)(v0 + 658) = v3;
    *(unsigned char *)(v0 + 3712) = v3;
    *(void *)(v0 + 3536) = *(void *)(v0 + 2232);
    char v4 = *(unsigned char *)(v0 + 2240);
    *(unsigned char *)(v0 + 659) = v4;
    *(unsigned char *)(v0 + 3720) = v4;
    *(unsigned char *)(v0 + 660) = *(unsigned char *)(v0 + 2241);
    *(void *)(v0 + 3544) = *(void *)(v0 + 2248);
    char v5 = *(unsigned char *)(v0 + 2256);
    *(unsigned char *)(v0 + 661) = v5;
    *(unsigned char *)(v0 + 3728) = v5;
    *(void *)(v0 + 3552) = *(void *)(v0 + 2264);
    char v6 = *(unsigned char *)(v0 + 2272);
    *(unsigned char *)(v0 + 662) = v6;
    *(unsigned char *)(v0 + 3736) = v6;
    *(unsigned char *)(v0 + 663) = *(unsigned char *)(v0 + 2273);
    *(unsigned char *)(v0 + 874) = *(unsigned char *)(v0 + 2274);
    *(void *)(v0 + 3560) = *(void *)(v0 + 2280);
    char v7 = *(unsigned char *)(v0 + 2288);
    *(unsigned char *)(v0 + 875) = v7;
    *(unsigned char *)(v0 + 3744) = v7;
    *(_OWORD *)(v0 + 3568) = *(_OWORD *)(v0 + 2296);
    *(unsigned char *)(v0 + 876) = *(unsigned char *)(v0 + 2312);
    *(void *)(v0 + 3192) = &type metadata for AMSDogBag;
    *(void *)(v0 + 3200) = &off_1001CAA18;
    *(void *)(v0 + 3160) = v58;
    long long v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 3584) = v8;
    *long long v8 = v0;
    v8[1] = sub_1000AA378;
    return sub_10003A3D8();
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 3440) = v58;
      uint64_t v54 = v2;
      uint64_t v55 = v1;
      *(void *)(v0 + 3432) = v2;
      *(void *)(v0 + 3424) = v1;
      long long v10 = *(const __SecRandom **)(v0 + 3416);
      uint64_t v11 = *(void *)(v0 + 3392);
      uint64_t v12 = *(void *)(v0 + 3384);
      uint64_t v56 = *(void *)(v0 + 3376);
      uint64_t v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v13 + 16) = 32;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      long long v14 = (unsigned char *)(v13 + 32);
      SecRandomCopyBytes(v10, 0x20uLL, (void *)(v13 + 32));
      uint64_t v15 = sub_1000B0E50(v14, 32);
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      uint64_t v18 = (objc_class *)type metadata accessor for PersistentTokenHandler();
      uint64_t v19 = (char *)objc_allocWithZone(v18);
      *(void *)&v19[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_timestamp] = 0;
      sub_10003CF30(v15, v17);
      sub_10003CF30(v15, v17);
      char v20 = v19;
      SKANUTClient.init(privateInput:)();
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v20[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_utClient], v11, v56);
      char v21 = (uint64_t *)&v20[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_privateInput];
      uint64_t *v21 = v15;
      v21[1] = v17;
      sub_10003CF30(v15, v17);

      *(void *)(v0 + 3256) = v20;
      *(void *)(v0 + 3264) = v18;
      uint64_t v22 = (char *)objc_msgSendSuper2((objc_super *)(v0 + 3256), "init");
      unint64_t v57 = v17;
      sub_100020930(v15, v17);
      uint64_t v23 = SKANUTClient.blindedElement()();
      unint64_t v25 = v24;
      Swift::String v26 = Data.base64EncodedString(options:)(0);
      sub_100020930(v23, v25);
      Swift::String v27 = Data.base64EncodedString(options:)(0);
      unint64_t v28 = sub_1000BDB60();
      if (v29) {
        break;
      }
      unint64_t v30 = v28;
      *(void *)&v22[OBJC_IVAR____TtC20AttributionKitDaemon22PersistentTokenHandler_timestamp] = v28;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v58 = sub_1001399E0(0, v58[2] + 1, 1, v58);
      }
      uint64_t v31 = v58;
      unint64_t v33 = v58[2];
      unint64_t v32 = v58[3];
      if (v33 >= v32 >> 1) {
        uint64_t v31 = sub_1001399E0((void *)(v32 > 1), v33 + 1, 1, v58);
      }
      uint64_t v34 = *(void *)(v0 + 3336);
      char v35 = *(unsigned char *)(v0 + 228) & 1;
      v31[2] = v33 + 1;
      uint64_t v58 = v31;
      char v36 = &v31[6 * v33];
      v36[4] = v54;
      *(Swift::String *)(v36 + 5) = v26;
      v36[7] = v30;
      v36[8] = v34;
      *((unsigned char *)v36 + 72) = v35;
      uint64_t v37 = v22;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(Swift::String *)(v0 + 3208) = v26;
      *(Swift::String *)(v0 + 3224) = v27;
      *(void *)(v0 + 3240) = v30;
      *(void *)(v0 + 3248) = v37;
      sub_1000AFDDC((uint64_t *)(v0 + 3208), v54, isUniquelyReferenced_nonNull_native);
      uint64_t v1 = v55;
      swift_bridgeObjectRelease();
      sub_100020930(v15, v57);

      *(void *)(v0 + 3448) = v55;
      uint64_t v2 = *(void *)(v0 + 3432) + 1;
      if (v2 == *(void *)(v0 + 3408)) {
        goto LABEL_2;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B2830();
    uint64_t v39 = swift_allocError();
    *(void *)(v0 + 3680) = v39;
    *char v40 = 1;
    swift_willThrow();

    sub_100020930(v15, v57);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v44 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 138412290;
      swift_errorRetain();
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 3288) = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v44 = v45;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to create blinded data: %@", v43, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v46 = *(void *)(v0 + 3344);

    swift_errorRetain();
    sub_10009485C(5, 5, v39, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2512), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
      0,
      1u,
      1u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v47 = *(_OWORD *)(v0 + 2656);
    *(_OWORD *)(v0 + 2064) = *(_OWORD *)(v0 + 2640);
    *(_OWORD *)(v0 + 2080) = v47;
    *(_OWORD *)(v0 + 2096) = *(_OWORD *)(v0 + 2672);
    *(_OWORD *)(v0 + 2105) = *(_OWORD *)(v0 + 2681);
    long long v48 = *(_OWORD *)(v0 + 2592);
    *(_OWORD *)(v0 + 2000) = *(_OWORD *)(v0 + 2576);
    *(_OWORD *)(v0 + 2016) = v48;
    long long v49 = *(_OWORD *)(v0 + 2624);
    *(_OWORD *)(v0 + 2032) = *(_OWORD *)(v0 + 2608);
    *(_OWORD *)(v0 + 2048) = v49;
    long long v50 = *(_OWORD *)(v0 + 2528);
    *(_OWORD *)(v0 + 1936) = *(_OWORD *)(v0 + 2512);
    *(_OWORD *)(v0 + 1952) = v50;
    long long v51 = *(_OWORD *)(v0 + 2560);
    *(_OWORD *)(v0 + 1968) = *(_OWORD *)(v0 + 2544);
    *(_OWORD *)(v0 + 1984) = v51;
    char v52 = sub_100012D78((void *)(v46 + 232), *(void *)(v46 + 256));
    uint64_t v53 = *v52;
    *(void *)(v0 + 3688) = *v52;
    return _swift_task_switch(sub_1000AB190, v53, 0);
  }
}

uint64_t sub_1000ABB18()
{
  uint64_t v1 = *(void *)(v0 + 3368);
  uint64_t v2 = *(void *)(v0 + 3360);
  uint64_t v3 = *(void *)(v0 + 3352);
  BOOL v4 = *(unsigned char *)(v0 + 229) == 0;
  if (*(unsigned char *)(v0 + 229)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v0 + 3336);
  }
  long long v6 = *(_OWORD *)(v0 + 2848);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 2832);
  *(_OWORD *)(v0 + 376) = v6;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 2864);
  long long v7 = *(_OWORD *)(v0 + 2784);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 2768);
  *(_OWORD *)(v0 + 312) = v7;
  long long v8 = *(_OWORD *)(v0 + 2816);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 2800);
  *(_OWORD *)(v0 + 344) = v8;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 2704);
  *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 2720);
  long long v9 = *(_OWORD *)(v0 + 2752);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 2736);
  *(_OWORD *)(v0 + 280) = v9;
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 2873);
  *(void *)(v0 + 424) = v5;
  *(void *)(v0 + 432) = 0;
  if (v4) {
    char v10 = 0;
  }
  else {
    char v10 = 2;
  }
  *(unsigned char *)(v0 + 440) = v10;
  *(unsigned char *)(v0 + 441) = 1;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 16);
  sub_1000B2884(v5, 0, v10);
  sub_10001547C(v0 + 2704);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000B28F0(v5, 0, v10);
  sub_100036824(v0 + 2704);
  return _swift_task_switch(sub_1000ABCB0, 0, 0);
}

uint64_t sub_1000ABCB0()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000ABD24()
{
  swift_bridgeObjectRelease();
  swift_errorRetain();
  sub_1000B2908(v0 + 3088);
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v12 = *(void *)(v0 + 3656);
    uint64_t v3 = *(void *)(v0 + 3336);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134218498;
    *(void *)(v0 + 3272) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2048;
    sub_1000B2960(v0 + 3088);
    *(void *)(v0 + 3328) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000B2960(v0 + 3088);
    *(_WORD *)(v4 + 22) = 2112;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3304) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to create non allocated token for app %llu with id %ld, error: %@", (uint8_t *)v4, 0x20u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B2960(v0 + 3088);
    sub_1000B2960(v0 + 3088);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 3672);
  uint64_t v8 = *(void *)(v0 + 3344);

  swift_errorRetain();
  sub_10009485C(4, 0, v7, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2896), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    1u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 3024);
  *(_OWORD *)(v0 + 1888) = *(_OWORD *)(v0 + 3040);
  *(_OWORD *)(v0 + 1904) = *(_OWORD *)(v0 + 3056);
  *(_OWORD *)(v0 + 1913) = *(_OWORD *)(v0 + 3065);
  *(_OWORD *)(v0 + 1808) = *(_OWORD *)(v0 + 2960);
  *(_OWORD *)(v0 + 1824) = *(_OWORD *)(v0 + 2976);
  *(_OWORD *)(v0 + 1840) = *(_OWORD *)(v0 + 2992);
  *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 3008);
  *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 2896);
  *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 2912);
  *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 2928);
  *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 2944);
  long long v9 = sub_100012D78((void *)(v8 + 232), *(void *)(v8 + 256));
  uint64_t v10 = *v9;
  *(void *)(v0 + 3704) = *v9;
  return _swift_task_switch(sub_1000AC078, v10, 0);
}

uint64_t sub_1000AC078()
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 3624);
  uint64_t v1 = *(void *)(v0 + 3368);
  uint64_t v2 = *(void *)(v0 + 3352);
  BOOL v3 = *(unsigned char *)(v0 + 229) == 0;
  if (*(unsigned char *)(v0 + 229)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(v0 + 3336);
  }
  *(_OWORD *)(v0 + 1440) = *(_OWORD *)(v0 + 1872);
  *(_OWORD *)(v0 + 1456) = *(_OWORD *)(v0 + 1888);
  *(_OWORD *)(v0 + 1472) = *(_OWORD *)(v0 + 1904);
  *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v0 + 1808);
  *(_OWORD *)(v0 + 1392) = *(_OWORD *)(v0 + 1824);
  *(_OWORD *)(v0 + 1408) = *(_OWORD *)(v0 + 1840);
  *(_OWORD *)(v0 + 1424) = *(_OWORD *)(v0 + 1856);
  *(_OWORD *)(v0 + 1312) = *(_OWORD *)(v0 + 1744);
  *(_OWORD *)(v0 + 1328) = *(_OWORD *)(v0 + 1760);
  *(_OWORD *)(v0 + 1344) = *(_OWORD *)(v0 + 1776);
  *(_OWORD *)(v0 + 1360) = *(_OWORD *)(v0 + 1792);
  *(_OWORD *)(v0 + 1481) = *(_OWORD *)(v0 + 1913);
  *(void *)(v0 + 1504) = v4;
  *(void *)(v0 + 1512) = 0;
  if (v3) {
    char v5 = 0;
  }
  else {
    char v5 = 2;
  }
  *(unsigned char *)(v0 + 1520) = v5;
  *(unsigned char *)(v0 + 1521) = 1;
  sub_10003675C(v0 + 1312);
  sub_1000367C8(v0 + 1312, v0 + 880);
  sub_1000B2884(v4, 0, v5);
  sub_10001547C(v0 + 2896);
  AsyncStream.Continuation.yield(_:)();
  v7(v1, v2);
  sub_100036824(v0 + 2896);
  return _swift_task_switch(sub_1000AC210, 0, 0);
}

uint64_t sub_1000AC210()
{
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 3648) + 1;
  if (v1 == *(void *)(v0 + 3640))
  {
    if (*(unsigned char *)(v0 + 229)) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *(void *)(v0 + 3336);
    }
    if (*(unsigned char *)(v0 + 229)) {
      char v3 = 2;
    }
    else {
      char v3 = 0;
    }
    sub_1000B28F0(v2, 0, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    *(void *)(v0 + 3648) = v1;
    char v6 = *(unsigned char *)(v0 + 228);
    uint64_t v7 = *(void *)(v0 + 3592) + 72 * v1;
    *(_OWORD *)(v0 + 3088) = *(_OWORD *)(v7 + 32);
    long long v8 = *(_OWORD *)(v7 + 48);
    long long v9 = *(_OWORD *)(v7 + 64);
    long long v10 = *(_OWORD *)(v7 + 80);
    *(void *)(v0 + 3152) = *(void *)(v7 + 96);
    *(_OWORD *)(v0 + 3120) = v9;
    *(_OWORD *)(v0 + 3136) = v10;
    *(_OWORD *)(v0 + 3104) = v8;
    *(void *)(v0 + 3656) = *(void *)(v0 + 3088);
    sub_1000B2908(v0 + 3088);
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 3664) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000AADE8;
    uint64_t v12 = *(void *)(v0 + 3448);
    uint64_t v13 = *(void *)(v0 + 3336);
    return sub_1000AD288(v13, v0 + 3088, v12, v6 & 1);
  }
}

void sub_1000AC3B0(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  sub_10004DDDC(a1, a2 & 1, (uint64_t)v5);
  if (!v3) {
    sub_100059F98((uint64_t)v5, a3, &qword_1001E2DD8);
  }
}

void sub_1000AC414(void *a1, uint64_t a2)
{
  id v4 = [a1 connection];
  id v5 = sub_1000223D8(a2, v4);

  if (!v2) {
}
  }

uint64_t sub_1000AC480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *id v5 = v3;
  v5[1] = sub_1000AC520;
  return sub_1000AC690(a3);
}

uint64_t sub_1000AC520(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    char v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return _swift_task_switch(sub_1000AC66C, 0, 0);
  }
}

uint64_t sub_1000AC66C()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AC690(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000AC768, 0, 0);
}

uint64_t sub_1000AC768()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v6 = (uint64_t *)v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[2];
  Date.init(timeIntervalSinceNow:)();
  uint64_t v8 = v6[1];
  uint64_t v16 = *v6;
  v0[9] = v8;
  long long v9 = (void *)v6[2];
  v0[10] = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v5);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = swift_allocObject();
  v0[11] = v11;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v10, v2, v5);
  *(void *)(v11 + ((v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = v7;
  uint64_t v15 = (uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E48C8 + dword_1001E48C8);
  swift_bridgeObjectRetain();
  id v12 = v9;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[12] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1000AC908;
  return v15(sub_1000B2DA8, v11, v16, v8, v12);
}

uint64_t sub_1000AC908(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 80);
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v1)
  {
    uint64_t v6 = sub_1000ACB1C;
  }
  else
  {
    *(void *)(v4 + 112) = a1;
    uint64_t v6 = sub_1000ACA90;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000ACA90()
{
  (*(void (**)(void, void))(v0[5] + 8))(v0[8], v0[4]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[14];
  return v1(v2);
}

uint64_t sub_1000ACB1C()
{
  (*(void (**)(void, void))(v0[5] + 8))(v0[8], v0[4]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000ACBA4(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E4088 + dword_1001E4088);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000ACC4C;
  return v4(13);
}

uint64_t sub_1000ACC4C(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 32) = a2;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = a1;
  *(unsigned char *)(v3 + 56) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000ACD54, 0, 0);
}

uint64_t sub_1000ACD54()
{
  uint64_t v1 = 24;
  if ((*(unsigned char *)(v0 + 56) & 1) == 0) {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  **(void **)(v0 + 40) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ACD88()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = *(void *)(v3 + 64);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000ACE60, 0, 0);
}

uint64_t sub_1000ACE60()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v5 = (uint64_t *)v0[2];
  uint64_t v4 = v0[3];
  Date.init(timeIntervalSinceNow:)();
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v0[8] = v6;
  uint64_t v8 = (void *)v5[2];
  v0[9] = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  v0[10] = v10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v2, v4);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48C8 + dword_1001E48C8);
  swift_bridgeObjectRetain();
  id v11 = v8;
  id v12 = (void *)swift_task_alloc();
  v0[11] = v12;
  *id v12 = v0;
  v12[1] = sub_1000ACFEC;
  return v14((uint64_t)sub_1000B2D20, v10, v7, v6, (uint64_t)v11);
}

uint64_t sub_1000ACFEC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 72);
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v1)
  {
    uint64_t v6 = sub_1000AD200;
  }
  else
  {
    *(void *)(v4 + 104) = a1;
    uint64_t v6 = sub_1000AD174;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000AD174()
{
  (*(void (**)(void, void))(v0[4] + 8))(v0[7], v0[3]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[13];
  return v1(v2);
}

uint64_t sub_1000AD200()
{
  (*(void (**)(void, void))(v0[4] + 8))(v0[7], v0[3]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000AD288(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 536) = a4;
  *(void *)(v5 + 368) = a3;
  *(void *)(v5 + 376) = v4;
  *(void *)(v5 + 352) = a1;
  *(void *)(v5 + 360) = a2;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 384) = v6;
  *(void *)(v5 + 392) = *(void *)(v6 - 8);
  *(void *)(v5 + 400) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for String.Encoding();
  *(void *)(v5 + 408) = v7;
  *(void *)(v5 + 416) = *(void *)(v7 - 8);
  *(void *)(v5 + 424) = swift_task_alloc();
  return _swift_task_switch(sub_1000AD3AC, 0, 0);
}

uint64_t sub_1000AD3AC()
{
  sub_10009E04C(**(void **)(v0 + 360), *(void *)(v0 + 368), (void *)(v0 + 112));
  sub_100059F98(v0 + 112, v0 + 160, &qword_1001E2E10);
  uint64_t v1 = *(void *)(v0 + 168);
  *(void *)(v0 + 432) = v1;
  if (!v1)
  {
    sub_1000B2218();
    swift_allocError();
    *(_OWORD *)uint64_t v10 = xmmword_10017C7F0;
    *(unsigned char *)(v10 + 16) = 2;
    swift_willThrow();
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    char v36 = *(uint64_t (**)(void))(v0 + 8);
    return v36();
  }
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void **)(v0 + 200);
  *(void *)(v0 + 440) = v4;
  *(void *)(v0 + 448) = v6;
  uint64_t v7 = *(void *)(v2 + 64);
  if (v7)
  {
    uint64_t v8 = *(void *)(v2 + 56);
    sub_1000B2218();
    swift_allocError();
    *(void *)uint64_t v9 = v8;
    *(void *)(v9 + 8) = v7;
    *(unsigned char *)(v9 + 16) = 0;
    swift_bridgeObjectRetain();
LABEL_17:
    swift_willThrow();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v67 = v3;
  uint64_t v68 = v5;
  sub_100059F98(v2 + 8, v0 + 272, &qword_1001E2CA8);
  sub_100059F98(v0 + 272, v0 + 224, &qword_1001E2CA8);
  if (!*(void *)(v0 + 232)) {
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)(v0 + 360);
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 224);
  sub_100059F98(v11 + 24, v0 + 288, &qword_1001E2CA8);
  sub_100059F98(v0 + 288, v0 + 320, &qword_1001E2CA8);
  if (!*(void *)(v0 + 328)
    || (uint64_t v12 = *(void *)(v0 + 360),
        *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 320),
        sub_100059F98(v12 + 40, v0 + 304, &qword_1001E2CA8),
        uint64_t v65 = v0 + 304,
        sub_100059F98(v0 + 304, v0 + 240, &qword_1001E2CA8),
        !*(void *)(v0 + 248)))
  {
LABEL_16:
    uint64_t v30 = sub_1000B0F04(*(void *)(v0 + 360));
    uint64_t v32 = v31;
    char v34 = v33;
    sub_1000B2218();
    swift_allocError();
    *(void *)uint64_t v35 = v30;
    *(void *)(v35 + 8) = v32;
    *(unsigned char *)(v35 + 16) = v34;
    goto LABEL_17;
  }
  uint64_t v55 = *(void *)(v0 + 248);
  uint64_t v13 = v4;
  uint64_t v58 = *(void *)(v0 + 424);
  uint64_t v60 = *(void *)(v0 + 416);
  uint64_t v62 = *(void *)(v0 + 408);
  char v57 = *(unsigned char *)(v0 + 536);
  uint64_t v14 = *(void *)(v0 + 352);
  uint64_t v54 = *(void *)(v0 + 240);
  sub_100012960(&qword_1001E2E18);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  *(void *)(inited + 32) = 0x746E656D656C65;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(_OWORD *)(inited + 48) = *(_OWORD *)(v0 + 208);
  *(void *)(inited + 64) = 0x666F6F7270;
  *(void *)(inited + 72) = 0xE500000000000000;
  *(_OWORD *)(inited + 80) = *(_OWORD *)(v0 + 256);
  swift_bridgeObjectRetain();
  uint64_t v56 = v13;
  swift_bridgeObjectRetain();
  sub_10008A4F8(v0 + 272);
  sub_10008A4F8(v0 + 288);
  sub_10008A4F8(v65);
  unint64_t v63 = sub_10009F9D0(inited);
  *(void *)(v0 + 336) = v14;
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 10715618;
  v16._object = (void *)0xA300000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 344) = v68;
  uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = 10715618;
  v21._object = (void *)0xA300000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  if (v57) {
    uint64_t v22 = 1146049104;
  }
  else {
    uint64_t v22 = 5653828;
  }
  if (v57) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE300000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v26 = String.data(using:allowLossyConversion:)();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 456) = v26;
  *(void *)(v0 + 464) = v28;
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v62);
  if (v28 >> 60 == 15)
  {
    sub_10008A524(v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B2218();
    swift_allocError();
    *(_OWORD *)uint64_t v29 = xmmword_10017C7E0;
    *(unsigned char *)(v29 + 16) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();

    goto LABEL_19;
  }
  id v38 = v6;
  unint64_t v39 = sub_1000ADE94(v63);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 472) = sub_1000BCEB4(v26, v28, v39);
  *(void *)(v0 + 480) = v40;
  uint64_t v42 = *(void *)(v0 + 392);
  uint64_t v41 = *(void *)(v0 + 400);
  uint64_t v43 = *(uint64_t **)(v0 + 376);
  char v44 = *(unsigned char *)(v0 + 536);
  uint64_t v59 = *(void *)(v0 + 384);
  uint64_t v61 = *(void *)(v0 + 352);
  swift_bridgeObjectRelease();
  char v66 = v44 & 1;
  swift_bridgeObjectRetain();
  Swift::String v45 = Data.base64EncodedString(options:)(0);
  UUID.init()();
  uint64_t v46 = UUID.uuidString.getter();
  uint64_t v48 = v47;
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 528) = 1;
  uint64_t v49 = v43[1];
  uint64_t v64 = *v43;
  *(void *)(v0 + 488) = v49;
  long long v50 = (void *)v43[2];
  *(void *)(v0 + 496) = v50;
  uint64_t v51 = swift_allocObject();
  *(void *)(v0 + 504) = v51;
  *(void *)(v51 + 16) = 0;
  *(unsigned char *)(v51 + 24) = *(unsigned char *)(v0 + 528);
  *(_DWORD *)(v51 + 25) = *(_DWORD *)(v0 + 529);
  *(_DWORD *)(v51 + 28) = *(_DWORD *)(v0 + 532);
  *(void *)(v51 + 32) = v46;
  *(void *)(v51 + 40) = v48;
  *(void *)(v51 + 48) = v61;
  *(void *)(v51 + 56) = v67;
  *(void *)(v51 + 64) = v56;
  *(Swift::String *)(v51 + 72) = v45;
  *(void *)(v51 + 88) = v68;
  *(void *)(v51 + 96) = v54;
  *(void *)(v51 + 104) = v55;
  *(unsigned char *)(v51 + 112) = 2;
  *(unsigned char *)(v51 + 113) = v66;
  uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48A0
                                                                                     + dword_1001E48A0);
  *(unsigned char *)(v51 + 114) = 0;
  swift_bridgeObjectRetain();
  id v52 = v50;
  uint64_t v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v53;
  void *v53 = v0;
  v53[1] = sub_1000ADBAC;
  return v69((uint64_t)v69, (uint64_t)sub_1000B2A0C, v51, v64, v49, (uint64_t)v52);
}

uint64_t sub_1000ADBAC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 520) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 496);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000ADDD8;
  }
  else {
    uint64_t v4 = sub_1000ADD14;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000ADD14()
{
  uint64_t v1 = v0[59];
  unint64_t v2 = v0[60];
  uint64_t v4 = v0[57];
  unint64_t v3 = v0[58];
  uint64_t v5 = (void *)v0[56];
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100020930(v1, v2);

  sub_10005E9FC(v4, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000ADDD8()
{
  uint64_t v1 = v0[59];
  unint64_t v2 = v0[60];
  uint64_t v4 = v0[57];
  unint64_t v3 = v0[58];
  uint64_t v5 = (void *)v0[56];
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100020930(v1, v2);

  sub_10005E9FC(v4, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

unint64_t sub_1000ADE94(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100012960(&qword_1001E2E20);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = (char *)&type metadata for Any + 8;
  uint64_t v11 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100075BD4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    unint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100037488(v6, v7);
    sub_100037488(v7, v40);
    sub_100037488(v40, &v38);
    unint64_t result = sub_1000AF1FC(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      Swift::String v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v18);
      unint64_t result = (unint64_t)sub_100037488(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_100037488(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_1000AE200(void *a1, long long *a2)
{
  id v4 = [a1 connection];
  id v5 = sub_1000220EC(a2, v4);

  if (!v2) {
}
  }

uint64_t sub_1000AE26C(unsigned __int8 *a1, char *a2)
{
  return sub_100107A00(*a1, *a2);
}

Swift::Int sub_1000AE278()
{
  return sub_100109244();
}

uint64_t sub_1000AE280()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000AE3B0()
{
  return sub_10010AB2C();
}

unint64_t sub_1000AE3B8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001C1B00;
  unint64_t result = sub_1000B14E0(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000AE3F0(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEA0000000000746ELL;
  uint64_t v3 = 0x65696C632D667270;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED00007475706E69;
      uint64_t v3 = 0x2D65746176697270;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6D617473656D6974;
      *(void *)(a1 + 8) = 0xE900000000000070;
      break;
    case 3:
      *(void *)a1 = 0x6369666974726563;
      *(void *)(a1 + 8) = 0xEB00000000657461;
      break;
    case 4:
      *(void *)a1 = 0x6564692D6D657469;
      *(void *)(a1 + 8) = 0xEF7265696669746ELL;
      break;
    case 5:
      strcpy((char *)a1, "is-redownload");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1000AE500()
{
  uint64_t result = 0x65696C632D667270;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x2D65746176697270;
      break;
    case 2:
      uint64_t result = 0x6D617473656D6974;
      break;
    case 3:
      uint64_t result = 0x6369666974726563;
      break;
    case 4:
      uint64_t result = 0x6564692D6D657469;
      break;
    case 5:
      uint64_t result = 0x776F6465722D7369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000AE5FC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001C1B00;
  unint64_t result = sub_1000B14E0(a1, v3);
  *a2 = result;
  return result;
}

void sub_1000AE62C(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000AE638(uint64_t a1)
{
  unint64_t v2 = sub_1000AE8B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AE674(uint64_t a1)
{
  unint64_t v2 = sub_1000AE8B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TokenHandoff.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E2D40);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000AE8B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000AE8B0()
{
  unint64_t result = qword_1001E2D48;
  if (!qword_1001E2D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D48);
  }
  return result;
}

__n128 TokenHandoff.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000B111C(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(unsigned char *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1000AE958(void *a1)
{
  return TokenHandoff.encode(to:)(a1);
}

uint64_t sub_1000AE970(char *a1, char *a2)
{
  return sub_100106FE4(*a1, *a2);
}

Swift::Int sub_1000AE97C()
{
  return sub_10010938C();
}

uint64_t sub_1000AE984()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000AEA4C()
{
  return sub_10010ADD8();
}

unint64_t sub_1000AEA54@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001C1BB0;
  unint64_t result = sub_1000B14E0(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000AEA8C(void *a1@<X8>)
{
  uint64_t v2 = 6583649;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 6580578;
      goto LABEL_3;
    case 2:
      uint64_t v3 = 1887007844;
      goto LABEL_8;
    case 3:
      *a1 = 7627113;
      a1[1] = 0xE300000000000000;
      return;
    case 4:
      *a1 = 7566185;
      a1[1] = 0xE300000000000000;
      return;
    case 5:
      uint64_t v3 = 1668181870;
LABEL_8:
      *a1 = v3 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE300000000000000;
      break;
  }
}

uint64_t sub_1000AEB30()
{
  uint64_t result = 6583649;
  switch(*v0)
  {
    case 1:
      uint64_t result = 6580578;
      break;
    case 2:
      uint64_t result = 0x6570797464;
      break;
    case 3:
      uint64_t result = 7627113;
      break;
    case 4:
      uint64_t result = 7566185;
      break;
    case 5:
      uint64_t result = 0x65636E6F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000AEBC8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1001C1BB0;
  unint64_t result = sub_1000B14E0(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000AEBF8(uint64_t a1)
{
  unint64_t v2 = sub_1000B148C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AEC34(uint64_t a1)
{
  unint64_t v2 = sub_1000B148C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PODTokenPayload.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E2D50);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000B148C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double PODTokenPayload.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000B1528(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000AEECC(void *a1)
{
  return PODTokenPayload.encode(to:)(a1);
}

unint64_t sub_1000AEEE4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000AFF9C(a1, v4);
}

unint64_t sub_1000AEF28(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000B0064(a1, v2);
}

unint64_t sub_1000AF084(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1000B0330(a1, v2);
}

unint64_t sub_1000AF0C8(uint64_t a1, unint64_t a2)
{
  Hasher.init(_seed:)();
  switch(a2)
  {
    case 0uLL:
      Swift::UInt v4 = 1;
      goto LABEL_11;
    case 1uLL:
      Swift::UInt v4 = 2;
      goto LABEL_11;
    case 2uLL:
      Swift::UInt v4 = 3;
      goto LABEL_11;
    case 3uLL:
      Swift::UInt v4 = 4;
      goto LABEL_11;
    case 4uLL:
      Swift::UInt v4 = 5;
      goto LABEL_11;
    case 5uLL:
      Swift::UInt v4 = 6;
      goto LABEL_11;
    case 6uLL:
      Swift::UInt v4 = 7;
      goto LABEL_11;
    case 7uLL:
      Swift::UInt v4 = 8;
LABEL_11:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(0);
      String.hash(into:)();
      break;
  }
  Swift::Int v5 = Hasher._finalize()();

  return sub_1000B03CC(a1, a2, v5);
}

unint64_t sub_1000AF1FC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000B0538(a1, a2, v4);
}

unint64_t sub_1000AF274(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_1000B061C(a1, v2);
}

uint64_t sub_1000AF308(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100012960(&qword_1001E2F00);
  char v51 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v49 = (uint64_t *)(v5 + 64);
    uint64_t v50 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v45 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v46 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v47 = v3;
    int64_t v48 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v49;
        if (v17 >= v48) {
          goto LABEL_34;
        }
        unint64_t v18 = v49[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v48) {
            goto LABEL_34;
          }
          unint64_t v18 = v49[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v48)
            {
LABEL_34:
              if ((v51 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v47;
                goto LABEL_41;
              }
              if (v46 >= 64) {
                bzero(v49, 8 * v48);
              }
              else {
                uint64_t *v49 = v45;
              }
              uint64_t v3 = v47;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v49[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v48) {
                  goto LABEL_34;
                }
                unint64_t v18 = v49[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      int64_t v67 = v8;
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v21 = *(void *)(v5 + 56) + 224 * v16;
      if (v51)
      {
        long long v52 = *(_OWORD *)v21;
        long long v53 = *(_OWORD *)(v21 + 16);
        long long v54 = *(_OWORD *)(v21 + 32);
        char v22 = *(unsigned char *)(v21 + 48);
        uint64_t v57 = *(void *)(v21 + 56);
        char v23 = *(unsigned char *)(v21 + 64);
        long long v55 = *(_OWORD *)(v21 + 72);
        long long v56 = *(_OWORD *)(v21 + 88);
        long long v58 = *(_OWORD *)(v21 + 104);
        uint64_t v59 = *(void *)(v21 + 120);
        uint64_t v60 = *(void *)(v21 + 128);
        char v24 = *(unsigned char *)(v21 + 136);
        char v25 = *(unsigned char *)(v21 + 168);
        long long v61 = *(_OWORD *)(v21 + 144);
        long long v62 = *(_OWORD *)(v21 + 176);
        uint64_t v63 = *(void *)(v21 + 160);
        uint64_t v64 = *(void *)(v21 + 192);
        char v26 = *(unsigned char *)(v21 + 200);
        char v65 = *(unsigned char *)(v21 + 201);
        uint64_t v66 = *(void *)(v21 + 208);
        char v27 = *(unsigned char *)(v21 + 216);
      }
      else
      {
        long long v28 = *(_OWORD *)(v21 + 16);
        long long v68 = *(_OWORD *)v21;
        long long v69 = v28;
        long long v29 = *(_OWORD *)(v21 + 80);
        long long v31 = *(_OWORD *)(v21 + 32);
        long long v30 = *(_OWORD *)(v21 + 48);
        *(_OWORD *)uint64_t v72 = *(_OWORD *)(v21 + 64);
        *(_OWORD *)&v72[16] = v29;
        long long v70 = v31;
        long long v71 = v30;
        long long v32 = *(_OWORD *)(v21 + 144);
        long long v34 = *(_OWORD *)(v21 + 96);
        long long v33 = *(_OWORD *)(v21 + 112);
        long long v73 = *(_OWORD *)(v21 + 128);
        long long v74 = v32;
        *(_OWORD *)&v72[32] = v34;
        *(_OWORD *)&v72[48] = v33;
        long long v36 = *(_OWORD *)(v21 + 176);
        long long v35 = *(_OWORD *)(v21 + 192);
        long long v37 = *(_OWORD *)(v21 + 160);
        *(_OWORD *)&v77[9] = *(_OWORD *)(v21 + 201);
        long long v76 = v36;
        *(_OWORD *)uint64_t v77 = v35;
        long long v75 = v37;
        uint64_t v66 = *(void *)&v77[16];
        char v27 = v77[24];
        char v65 = BYTE9(v35);
        char v26 = BYTE8(v35);
        uint64_t v63 = v37;
        uint64_t v64 = v35;
        char v25 = BYTE8(v37);
        long long v61 = v32;
        long long v62 = v36;
        char v24 = BYTE8(v73);
        uint64_t v59 = *(void *)&v72[56];
        uint64_t v60 = v73;
        long long v58 = *(_OWORD *)&v72[40];
        long long v55 = *(_OWORD *)&v72[8];
        long long v56 = *(_OWORD *)&v72[24];
        uint64_t v57 = *((void *)&v71 + 1);
        char v23 = v72[0];
        char v22 = v71;
        long long v54 = v70;
        long long v52 = v68;
        long long v53 = v69;
        sub_100013AE8((uint64_t)&v68);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v38 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v39 = result & ~v38;
      unint64_t v40 = v39 >> 6;
      if (((-1 << v39) & ~*(void *)(v12 + 8 * (v39 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v39) & ~*(void *)(v12 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v41 = 0;
        unint64_t v42 = (unint64_t)(63 - v38) >> 6;
        do
        {
          if (++v40 == v42 && (v41 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v43 = v40 == v42;
          if (v40 == v42) {
            unint64_t v40 = 0;
          }
          v41 |= v43;
          uint64_t v44 = *(void *)(v12 + 8 * v40);
        }
        while (v44 == -1);
        unint64_t v13 = __clz(__rbit64(~v44)) + (v40 << 6);
      }
      LOBYTE(v68) = v22;
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v20;
      uint64_t v14 = *(void *)(v7 + 56) + 224 * v13;
      *(_OWORD *)uint64_t v14 = v52;
      *(_OWORD *)(v14 + 16) = v53;
      *(_OWORD *)(v14 + 32) = v54;
      *(unsigned char *)(v14 + 48) = v22;
      *(void *)(v14 + 56) = v57;
      *(unsigned char *)(v14 + 64) = v23;
      *(_OWORD *)(v14 + 72) = v55;
      *(_OWORD *)(v14 + 88) = v56;
      *(_OWORD *)(v14 + 104) = v58;
      *(void *)(v14 + 120) = v59;
      *(void *)(v14 + 128) = v60;
      *(unsigned char *)(v14 + 136) = v24;
      *(_OWORD *)(v14 + 144) = v61;
      *(void *)(v14 + 160) = v63;
      *(unsigned char *)(v14 + 168) = v25;
      *(_OWORD *)(v14 + 176) = v62;
      *(void *)(v14 + 192) = v64;
      *(unsigned char *)(v14 + 200) = v26;
      *(unsigned char *)(v14 + 201) = v65;
      int64_t v8 = v67;
      *(void *)(v14 + 208) = v66;
      *(unsigned char *)(v14 + 216) = v27;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v50;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000AF7E0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100012960(&qword_1001E2EF8);
  char v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    long long v36 = v3;
    int64_t v8 = 0;
    uint64_t v38 = (uint64_t *)(v5 + 64);
    uint64_t v39 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = -1 << v9;
    uint64_t v35 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_40;
              }
              if (v35 >= 64) {
                bzero(v38, 8 * v37);
              }
              else {
                *uint64_t v38 = v34;
              }
              uint64_t v3 = v36;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v21 = v38[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      unint64_t v28 = *(void *)(v5 + 56) + (v19 << 6);
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(void *)(v28 + 8);
      char v31 = *(unsigned char *)(v28 + 16);
      long long v42 = *(_OWORD *)(v28 + 24);
      uint64_t v33 = *(void *)(v28 + 40);
      uint64_t v32 = *(void *)(v28 + 48);
      char v41 = *(unsigned char *)(v28 + 56);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = *(void *)(v7 + 56) + (v16 << 6);
      *(void *)unint64_t v17 = v29;
      *(void *)(v17 + 8) = v30;
      *(unsigned char *)(v17 + 16) = v31;
      *(_OWORD *)(v17 + 24) = v42;
      *(void *)(v17 + 40) = v33;
      *(void *)(v17 + 48) = v32;
      *(unsigned char *)(v17 + 56) = v41;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000AFAE4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100012960(&qword_1001E2E08);
  char v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v39 = (uint64_t *)(v5 + 64);
    uint64_t v40 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v35 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v37 = v3;
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v20 >= v38) {
          goto LABEL_33;
        }
        unint64_t v21 = v39[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v21 = v39[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v38)
            {
LABEL_33:
              if ((v41 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v37;
                goto LABEL_40;
              }
              if (v36 >= 64) {
                bzero(v39, 8 * v38);
              }
              else {
                *uint64_t v39 = v35;
              }
              uint64_t v3 = v37;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v39[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v21 = v39[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      unint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 48 * v19);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      uint64_t v31 = v28[3];
      uint64_t v42 = v28[2];
      uint64_t v33 = v28[4];
      uint64_t v32 = (void *)v28[5];
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v34 = v32;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 48 * v16);
      *unint64_t v17 = v30;
      v17[1] = v29;
      v17[2] = v42;
      v17[3] = v31;
      v17[4] = v33;
      v17[5] = v32;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1000AFDDC(uint64_t *a1, uint64_t a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v25 = a1[5];
  unint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_1000AF084(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 48 * v13;

      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v20 = v8;
      *(void *)(v20 + 8) = v7;
      *(void *)(v20 + 16) = v10;
      *(void *)(v20 + 24) = v9;
      *(void *)(v20 + 32) = v24;
      *(void *)(v20 + 40) = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1000B0BB4();
    goto LABEL_7;
  }
  sub_1000AFAE4(v16, a3 & 1);
  unint64_t v22 = sub_1000AF084(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  unint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  *(void *)&long long v26 = v8;
  *((void *)&v26 + 1) = v7;
  uint64_t v27 = v10;
  uint64_t v28 = v9;
  uint64_t v29 = v24;
  uint64_t v30 = v25;
  return sub_1000AFF44(v13, a2, &v26, v19);
}

unint64_t sub_1000AFF44(unint64_t result, uint64_t a2, long long *a3, void *a4)
{
  long long v4 = *a3;
  long long v5 = a3[1];
  uint64_t v6 = *((void *)a3 + 4);
  uint64_t v7 = *((void *)a3 + 5);
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v8 = a4[7] + 48 * result;
  *(_OWORD *)uint64_t v8 = v4;
  *(_OWORD *)(v8 + 16) = v5;
  *(void *)(v8 + 32) = v6;
  *(void *)(v8 + 40) = v7;
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

unint64_t sub_1000AFF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100075BDC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10008615C((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000B0064(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xED00006E6F697461;
      unint64_t v8 = 0x7A69726F68747541;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x2D746E65746E6F43;
          unint64_t v7 = 0xEC00000065707954;
          break;
        case 2:
          unint64_t v8 = 0x6567412D72657355;
          unint64_t v7 = 0xEA0000000000746ELL;
          break;
        case 3:
          unint64_t v7 = 0xE500000000000000;
          unint64_t v8 = 0x65676E6152;
          break;
        case 4:
          unint64_t v7 = 0x8000000100184A60;
          unint64_t v8 = 0xD000000000000013;
          break;
        case 5:
          unint64_t v8 = 0x4C2D747065636341;
          unint64_t v7 = 0xEF65676175676E61;
          break;
        default:
          break;
      }
      unint64_t v9 = 0x7A69726F68747541;
      unint64_t v10 = 0xED00006E6F697461;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xEC00000065707954;
          if (v8 == 0x2D746E65746E6F43) {
            goto LABEL_18;
          }
          goto LABEL_19;
        case 2:
          unint64_t v10 = 0xEA0000000000746ELL;
          if (v8 != 0x6567412D72657355) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 3:
          unint64_t v10 = 0xE500000000000000;
          if (v8 != 0x65676E6152) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 4:
          unint64_t v10 = 0x8000000100184A60;
          unint64_t v9 = 0xD000000000000013;
          goto LABEL_17;
        case 5:
          unint64_t v10 = 0xEF65676175676E61;
          if (v8 != 0x4C2D747065636341) {
            goto LABEL_19;
          }
          goto LABEL_18;
        default:
LABEL_17:
          if (v8 != v9) {
            goto LABEL_19;
          }
LABEL_18:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_19:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_1000B0330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000B03CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    while (2)
    {
      char v11 = (void *)(v10 + 16 * v6);
      uint64_t v12 = v11[1];
      switch(v12)
      {
        case 0:
          if (a2) {
            goto LABEL_4;
          }
          break;
        case 1:
          if (a2 != 1) {
            goto LABEL_4;
          }
          break;
        case 2:
          if (a2 != 2) {
            goto LABEL_4;
          }
          break;
        case 3:
          if (a2 != 3) {
            goto LABEL_4;
          }
          break;
        case 4:
          if (a2 != 4) {
            goto LABEL_4;
          }
          break;
        case 5:
          if (a2 != 5) {
            goto LABEL_4;
          }
          break;
        case 6:
          if (a2 != 6) {
            goto LABEL_4;
          }
          break;
        case 7:
          if (a2 != 7) {
            goto LABEL_4;
          }
          break;
        default:
          if (a2 < 8
            || (*v11 == a1 ? (BOOL v13 = v12 == a2) : (BOOL v13 = 0),
                !v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
          {
LABEL_4:
            unint64_t v6 = (v6 + 1) & v9;
            if ((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6)) {
              continue;
            }
          }
          break;
      }
      break;
    }
  }
  return v6;
}

unint64_t sub_1000B0538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000B061C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void *sub_1000B0794()
{
  uint64_t v1 = v0;
  sub_100012960(&qword_1001E2F00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v41 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v41 >= v13) {
      goto LABEL_26;
    }
    unint64_t v42 = *(void *)(v6 + 8 * v41);
    ++v9;
    if (!v42)
    {
      int64_t v9 = v41 + 1;
      if (v41 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v42 = *(void *)(v6 + 8 * v9);
      if (!v42) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v42 - 1) & v42;
    unint64_t v15 = __clz(__rbit64(v42)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 224 * v15;
    unint64_t v19 = (long long *)(*(void *)(v2 + 56) + v18);
    long long v20 = v19[2];
    long long v21 = v19[3];
    long long v22 = v19[5];
    long long v48 = v19[4];
    long long v49 = v22;
    long long v47 = v21;
    long long v23 = v19[9];
    long long v25 = v19[6];
    long long v24 = v19[7];
    long long v52 = v19[8];
    long long v53 = v23;
    long long v50 = v25;
    long long v51 = v24;
    long long v27 = v19[11];
    long long v26 = v19[12];
    long long v28 = v19[10];
    *(_OWORD *)((char *)v56 + 9) = *(long long *)((char *)v19 + 201);
    long long v55 = v27;
    v56[0] = v26;
    long long v54 = v28;
    long long v29 = v19[1];
    long long v44 = *v19;
    long long v45 = v29;
    long long v46 = v20;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v30 = (_OWORD *)(*(void *)(v4 + 56) + v18);
    long long v31 = v45;
    *uint64_t v30 = v44;
    v30[1] = v31;
    long long v32 = v46;
    long long v33 = v47;
    long long v34 = v49;
    v30[4] = v48;
    v30[5] = v34;
    v30[2] = v32;
    v30[3] = v33;
    long long v35 = v50;
    long long v36 = v51;
    long long v37 = v53;
    v30[8] = v52;
    v30[9] = v37;
    v30[6] = v35;
    v30[7] = v36;
    long long v38 = v54;
    long long v39 = v55;
    long long v40 = v56[0];
    *(_OWORD *)((char *)v30 + 201) = *(_OWORD *)((char *)v56 + 9);
    v30[11] = v39;
    v30[12] = v40;
    v30[10] = v38;
    unint64_t result = (void *)sub_100013AE8((uint64_t)&v44);
  }
  int64_t v43 = v41 + 2;
  if (v43 >= v13) {
    goto LABEL_26;
  }
  unint64_t v42 = *(void *)(v6 + 8 * v43);
  if (v42)
  {
    int64_t v9 = v43;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v42 = *(void *)(v6 + 8 * v9);
    ++v43;
    if (v42) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000B09DC()
{
  uint64_t v1 = v0;
  sub_100012960(&qword_1001E2EF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = v15 << 6;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v21 = *(void *)v19;
    uint64_t v20 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    uint64_t v24 = *(void *)(v19 + 40);
    uint64_t v23 = *(void *)(v19 + 48);
    char v25 = *(unsigned char *)(v19 + 56);
    long long v26 = *(_OWORD *)(v19 + 24);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v27 = *(void *)(v4 + 56) + v18;
    *(void *)unint64_t v27 = v21;
    *(void *)(v27 + 8) = v20;
    *(unsigned char *)(v27 + 16) = v22;
    *(_OWORD *)(v27 + 24) = v26;
    *(void *)(v27 + 40) = v24;
    *(void *)(v27 + 48) = v23;
    *(unsigned char *)(v27 + 56) = v25;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000B0BB4()
{
  uint64_t v1 = v0;
  sub_100012960(&qword_1001E2E08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 48 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v22 = v19[2];
    uint64_t v23 = v19[3];
    uint64_t v24 = v19[4];
    char v25 = (void *)v19[5];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    long long v26 = (void *)(*(void *)(v4 + 56) + v18);
    *long long v26 = v21;
    v26[1] = v20;
    v26[2] = v22;
    v26[3] = v23;
    v26[4] = v24;
    v26[5] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = v25;
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000B0D8C(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1000B0E50(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_1000B0D8C(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000B0F04(uint64_t a1)
{
  sub_100059F98(a1 + 8, (uint64_t)v12, &qword_1001E2CA8);
  sub_100059F98((uint64_t)v12, (uint64_t)v13, &qword_1001E2CA8);
  if (v14) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = 0x2C746E656D656C65;
  }
  uint64_t v3 = (void *)0xE000000000000000;
  sub_100059F98(a1 + 24, (uint64_t)v11, &qword_1001E2CA8);
  sub_100059F98((uint64_t)v11, (uint64_t)v15, &qword_1001E2CA8);
  if (v16) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 0x2C666F6F7270;
  }
  if (v16) {
    char v5 = (void *)0xE000000000000000;
  }
  else {
    char v5 = (void *)0xE600000000000000;
  }
  sub_100059F98(a1 + 40, (uint64_t)v10, &qword_1001E2CA8);
  sub_100059F98((uint64_t)v10, (uint64_t)v17, &qword_1001E2CA8);
  if (v18) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 0x6369666974726563;
  }
  if (!v18) {
    uint64_t v3 = (void *)0xEB00000000657461;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = v6;
  v8._object = v3;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL sub_1000B105C(void *a1)
{
  id v2 = [a1 iTunesMetadata];
  id v3 = [v2 storeItemIdentifier];

  id v4 = [a1 iTunesMetadata];
  id v5 = [v4 distributorInfo];

  id v6 = [v5 distributorID];
  BOOL result = 0;
  if (v6)
  {

    if (v3) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000B111C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E2EE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000AE8B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v31 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v30 = 1;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v25 = v12;
  char v29 = 2;
  swift_bridgeObjectRetain();
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
  char v28 = 3;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  char v27 = 4;
  uint64_t v23 = v13;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  char v26 = 5;
  char v14 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t v15 = v23;
  swift_bridgeObjectRelease();
  uint64_t v16 = v25;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v16;
  uint64_t v18 = v21;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v18;
  uint64_t v19 = v20;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v19;
  *(unsigned char *)(a2 + 64) = v14 & 1;
  return result;
}

unint64_t sub_1000B148C()
{
  unint64_t result = qword_1001E2D58;
  if (!qword_1001E2D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D58);
  }
  return result;
}

unint64_t sub_1000B14E0(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 6) {
    return 6;
  }
  else {
    return v5;
  }
}

uint64_t sub_1000B1528@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E2EE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000B148C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v39 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v38 = 1;
  swift_bridgeObjectRetain();
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v32 = v9;
  char v37 = 2;
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v33 = v15;
  uint64_t v29 = v14;
  char v36 = 3;
  swift_bridgeObjectRetain();
  uint64_t v30 = 0;
  uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
  char v35 = 4;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v16;
  char v34 = 5;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v30 = v17;
  v20(v8, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v22 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v32;
  a2[1] = v11;
  a2[2] = v31;
  a2[3] = v13;
  a2[4] = v29;
  a2[5] = v21;
  uint64_t v24 = v26;
  a2[6] = v28;
  a2[7] = v24;
  uint64_t v25 = v30;
  a2[8] = v22;
  a2[9] = v25;
  a2[10] = v19;
  return result;
}

uint64_t destroy for TokenHandoff()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenHandoff(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenHandoff(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for TokenHandoff(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TokenHandoff(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenHandoff(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenHandoff(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenHandoff()
{
  return &type metadata for TokenHandoff;
}

uint64_t destroy for PODTokenPayload()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PODTokenPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PODTokenPayload(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PODTokenPayload(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PODTokenPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PODTokenPayload(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PODTokenPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PODTokenPayload()
{
  return &type metadata for PODTokenPayload;
}

ValueMetadata *type metadata accessor for PODTokenPayload.CodingKeys()
{
  return &type metadata for PODTokenPayload.CodingKeys;
}

unsigned char *_s20AttributionKitDaemon15PODTokenPayloadV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B1FD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenHandoff.CodingKeys()
{
  return &type metadata for TokenHandoff.CodingKeys;
}

unint64_t sub_1000B200C()
{
  unint64_t result = qword_1001E2D60;
  if (!qword_1001E2D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D60);
  }
  return result;
}

unint64_t sub_1000B2064()
{
  unint64_t result = qword_1001E2D68;
  if (!qword_1001E2D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D68);
  }
  return result;
}

unint64_t sub_1000B20BC()
{
  unint64_t result = qword_1001E2D70;
  if (!qword_1001E2D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D70);
  }
  return result;
}

unint64_t sub_1000B2114()
{
  unint64_t result = qword_1001E2D78;
  if (!qword_1001E2D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D78);
  }
  return result;
}

unint64_t sub_1000B216C()
{
  unint64_t result = qword_1001E2D80;
  if (!qword_1001E2D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2D80);
  }
  return result;
}

unint64_t sub_1000B21C4()
{
  unint64_t result = qword_1001E2D88;
  if (!qword_1001E2D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E2D88);
  }
  return result;
}

unint64_t sub_1000B2218()
{
  unint64_t result = qword_1001E2DA0;
  if (!qword_1001E2DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E2DA0);
  }
  return result;
}

uint64_t sub_1000B226C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000B22A4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 313) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 8));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 13));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 21));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 26));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 31));
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B23C8()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = v0 + 16;
  long long v9 = *(_OWORD *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 304);
  char v5 = *(unsigned char *)(v0 + 312);
  uint64_t v6 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 313) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(unsigned char *)(v7 + 64) = v5;
  *(void *)(v7 + 40) = v4;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 24) = v9;
  *(void *)(v7 + 8) = sub_100012AB8;
  *(void *)(v7 + 16) = v3;
  return _swift_task_switch(sub_1000A59DC, 0, 0);
}

uint64_t sub_1000B24DC()
{
  return sub_1000B2C88((uint64_t (*)(void))&type metadata accessor for UUID);
}

BOOL sub_1000B24F4@<W0>(unsigned char *a1@<X8>)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  BOOL result = sub_10008F1BC(v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t *sub_1000B2578(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000B25DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B2638(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 184);
  uint64_t v2 = *(void *)(result + 96) & 1;
  uint64_t v3 = *(void *)(result + 112) & 0xFF01;
  uint64_t v4 = *(void *)(result + 128) & 1;
  uint64_t v5 = *(void *)(result + 144) & 0xFFFF01;
  uint64_t v6 = *(void *)(result + 160) & 1;
  __int16 v7 = *(_WORD *)(result + 208) & 0x103 | 0x4000;
  *(void *)(result + 80) &= 0xFFFFFFFFFFFFuLL;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(void *)(result + 128) = v4;
  *(void *)(result + 144) = v5;
  *(void *)(result + 160) = v6;
  *(void *)(result + 184) = v1;
  *(_WORD *)(result + 208) = v7;
  return result;
}

uint64_t sub_1000B26A8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1000B26E0(void *a1)
{
  sub_1000AC414(a1, v1 + 16);
}

void sub_1000B2700(uint64_t a1@<X8>)
{
}

uint64_t sub_1000B271C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 25) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000B27AC(uint64_t a1@<X8>)
{
  type metadata accessor for Date();
  sub_1000AC3B0(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

unint64_t sub_1000B2830()
{
  unint64_t result = qword_1001E2DF8;
  if (!qword_1001E2DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E2DF8);
  }
  return result;
}

uint64_t sub_1000B2884(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000B289C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B28F0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000B2908(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B2960(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B29BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 115, 7);
}

void sub_1000B2A0C(void *a1)
{
  sub_1000AE200(a1, (long long *)(v1 + 16));
}

uint64_t sub_1000B2A28()
{
  return sub_1000B2AE8(296);
}

uint64_t sub_1000B2A30(uint64_t a1)
{
  uint64_t v4 = v1 + 16;
  uint64_t v5 = *(void *)(v1 + 288);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100013480;
  return sub_1000AC480(a1, v4, v5);
}

uint64_t sub_1000B2AE0()
{
  return sub_1000B2AE8(288);
}

uint64_t sub_1000B2AE8(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v1 + 8));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v1 + 13));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v1 + 21));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v1 + 26));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v1 + 31));

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000B2B7C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013480;
  v3[5] = a1;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1001E4088 + dword_1001E4088);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[6] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000ACC4C;
  return v6(13);
}

uint64_t sub_1000B2C70()
{
  return sub_1000B2C88((uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_1000B2C88(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000B2D20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t result = sub_10004E584(v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), 2);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000B2DA8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B30A4(a1);
}

uint64_t sub_1000B2DC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B2E2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B2E98(void *a1)
{
  return sub_1001008E4(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_1000B2EB8()
{
  unint64_t result = qword_1001E2EA8;
  if (!qword_1001E2EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2EA8);
  }
  return result;
}

uint64_t sub_1000B2F0C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100011ECC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B2F50()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_1000B2F60@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10008EAF0();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000B2F98()
{
  unint64_t result = qword_1001E2EC8;
  if (!qword_1001E2EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E2EC8);
  }
  return result;
}

uint64_t sub_1000B2FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B2FFC()
{
  return swift_release();
}

uint64_t sub_1000B3008()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000B30A4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Date();
  uint64_t result = sub_10004E240();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000B3154(uint64_t a1)
{
  return sub_1001224B4(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000B3164(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for TokenManagementError(uint64_t a1)
{
  return sub_1000B318C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1000B318C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s20AttributionKitDaemon20TokenManagementErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000B3164(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TokenManagementError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000B3164(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000B318C(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for LogKey.Representation(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TokenManagementError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000B318C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SnoutManager.StoryIdentifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SnoutManager.StoryIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000B3330(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000B3348(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TokenManagementError()
{
  return &type metadata for TokenManagementError;
}

uint64_t destroy for TokenManager(id *a1)
{
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 6));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 11));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 19));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 24));
  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 29));
}

uint64_t initializeWithCopy for TokenManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a2 + 48;
  long long v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_bridgeObjectRetain();
  id v12 = v6;
  swift_bridgeObjectRetain();
  id v13 = v7;
  v11(a1 + 48, v8, v10);
  long long v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 88, a2 + 88);
  uint64_t v15 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v15;
  uint64_t v16 = *(void **)(a2 + 144);
  *(void *)(a1 + 144) = v16;
  long long v17 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 176) = v17;
  uint64_t v18 = v17;
  uint64_t v19 = **(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8);
  swift_bridgeObjectRetain();
  id v20 = v16;
  v19(a1 + 152, a2 + 152, v18);
  long long v21 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 216) = v21;
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 192, a2 + 192);
  long long v22 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 256) = v22;
  (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 232, a2 + 232);
  return a1;
}

uint64_t *assignWithCopy for TokenManager(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = (uint64_t)v4;
  id v6 = v4;

  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a2[5];
  uint64_t v8 = (void *)a1[5];
  a1[5] = (uint64_t)v7;
  id v9 = v7;

  sub_100017B78(a1 + 6, a2 + 6);
  sub_100017B78(a1 + 11, a2 + 11);
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)a2[18];
  uint64_t v11 = (void *)a1[18];
  a1[18] = (uint64_t)v10;
  id v12 = v10;

  sub_100017B78(a1 + 19, a2 + 19);
  sub_100017B78(a1 + 24, a2 + 24);
  sub_100017B78(a1 + 29, a2 + 29);
  return a1;
}

void *initializeWithTake for TokenManager(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t assignWithTake for TokenManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 152);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 192);
  long long v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v10;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 232);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 272)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 272) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 272) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenManager()
{
  return &type metadata for TokenManager;
}

unint64_t sub_1000B390C(uint64_t a1)
{
  unint64_t result = sub_1000B2218();
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1000B3934(void *a1)
{
}

uint64_t sub_1000B394C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[108] = v8;
  v9[107] = a8;
  v9[106] = a7;
  v9[105] = a6;
  v9[104] = a5;
  v9[103] = a4;
  v9[102] = a3;
  v9[101] = a2;
  v9[100] = a1;
  v9[109] = sub_100012960(&qword_1001E1380);
  v9[110] = swift_task_alloc();
  sub_100012960(&qword_1001E12F0);
  v9[111] = swift_task_alloc();
  v9[112] = swift_task_alloc();
  v9[113] = swift_task_alloc();
  v9[114] = type metadata accessor for ConversionBiomeEvent(0);
  v9[115] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  v9[116] = v10;
  v9[117] = *(void *)(v10 - 8);
  v9[118] = swift_task_alloc();
  id v13 = (uint64_t (*)(char))((char *)&dword_1001E4070 + dword_1001E4070);
  uint64_t v11 = (void *)swift_task_alloc();
  v9[119] = v11;
  *uint64_t v11 = v9;
  v11[1] = sub_1000B3B20;
  return v13(20);
}

uint64_t sub_1000B3B20(char a1)
{
  *(unsigned char *)(*(void *)v1 + 481) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B3C20, 0, 0);
}

uint64_t sub_1000B3C20()
{
  if (*(unsigned char *)(v0 + 481))
  {
    uint64_t v7 = *(uint64_t **)(v0 + 864);
    uint64_t v8 = *(void *)(v0 + 808);
    uint64_t v9 = *(void *)(v0 + 800);
    uint64_t v10 = *v7;
    uint64_t v11 = v7[1];
    *(void *)(v0 + 960) = v11;
    id v12 = (void *)v7[2];
    *(void *)(v0 + 968) = v12;
    uint64_t v13 = swift_allocObject();
    *(void *)(v0 + 976) = v13;
    *(void *)(v13 + 16) = v9;
    *(void *)(v13 + 24) = v8;
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4940
                                                                                       + dword_1001E4940);
    swift_bridgeObjectRetain();
    id v14 = v12;
    swift_bridgeObjectRetain();
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 984) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1000B3EA0;
    return v16(v0 + 744, (uint64_t)sub_1000B74A8, v13, v10, v11, (uint64_t)v14);
  }
  else
  {
    if (qword_1001E0928 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100012E74(v1, (uint64_t)qword_1001E60A0);
    unint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Reporting is not enabled", v4, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1000B3EA0()
{
  unint64_t v2 = (void *)*v1;
  v2[124] = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = (void *)v2[121];
    swift_release();
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)v2[121];
    swift_release();
    swift_bridgeObjectRelease();

    return _swift_task_switch(sub_1000B4068, 0, 0);
  }
}

uint64_t sub_1000B4068()
{
  sub_100059F98(v0 + 744, v0 + 688, &qword_1001E2F10);
  if (*(void *)(v0 + 712))
  {
    *(void *)(v0 + 1000) = *(void *)(v0 + 720);
    *(unsigned char *)(v0 + 482) = *(unsigned char *)(v0 + 728);
    Date.init(timeIntervalSince1970:)();
    sub_1000B74C4(v0 + 744);
    uint64_t v8 = (uint64_t (*)(char))((char *)&dword_1001E4090 + dword_1001E4090);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 1008) = v1;
    void *v1 = v0;
    v1[1] = sub_1000B42A8;
    return v8(19);
  }
  else
  {
    if (qword_1001E0928 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100012E74(v3, (uint64_t)qword_1001E60A0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No conversion metadata found for reporting", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1000B42A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1016) = a1;
  *(void *)(v3 + 1024) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B43AC, 0, 0);
}

uint64_t sub_1000B43AC()
{
  uint64_t v1 = *(void *)(v0 + 856);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (_OWORD *)(v144 + 264);
    uint64_t v4 = (unsigned __int8 *)(v1 + 224);
    while (1)
    {
      uint64_t v5 = *((void *)v4 - 13);
      if (v5)
      {
        uint64_t v6 = *((void *)v4 - 22);
        char v7 = *(v4 - 168);
        int v8 = *v4;
        uint64_t v9 = *((void *)v4 + 3);
        BOOL v10 = *((void *)v4 - 14) == 3157556 && v5 == 0xE300000000000000;
        if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v8 != 2)
        {
          char v11 = (v8 & 1) != 0 ? v7 : 1;
          if ((v11 & 1) == 0 && !v6) {
            break;
          }
        }
      }
      v4 += 224;
      if (!--v2) {
        goto LABEL_24;
      }
    }
    uint64_t v12 = v144;
    if (*(void *)(*(void *)(v144 + 840) + 16) && (unint64_t v13 = sub_1000AF084(v9), (v14 & 1) != 0))
    {
      uint64_t v15 = (_OWORD *)(*(void *)(*(void *)(v144 + 840) + 56) + 224 * v13);
      long long v16 = v15[1];
      *uint64_t v3 = *v15;
      *(_OWORD *)(v144 + 280) = v16;
      long long v17 = v15[5];
      long long v19 = v15[2];
      long long v18 = v15[3];
      *(_OWORD *)(v144 + 328) = v15[4];
      *(_OWORD *)(v144 + 344) = v17;
      *(_OWORD *)(v144 + 296) = v19;
      *(_OWORD *)(v144 + 312) = v18;
      long long v20 = v15[9];
      long long v22 = v15[6];
      long long v21 = v15[7];
      *(_OWORD *)(v144 + 392) = v15[8];
      *(_OWORD *)(v144 + 408) = v20;
      *(_OWORD *)(v144 + 360) = v22;
      *(_OWORD *)(v144 + 376) = v21;
      long long v24 = v15[11];
      long long v23 = v15[12];
      long long v25 = v15[10];
      *(_OWORD *)(v144 + 465) = *(_OWORD *)((char *)v15 + 201);
      *(_OWORD *)(v144 + 440) = v24;
      *(_OWORD *)(v144 + 456) = v23;
      *(_OWORD *)(v144 + 424) = v25;
      sub_100013AE8((uint64_t)v3);
      if ((*(unsigned char *)(v144 + 328) & 1) != 0
        || (unint64_t v26 = *(void *)(v144 + 320), (v26 & 0x8000000000000000) != 0)
        || HIDWORD(v26))
      {
        swift_bridgeObjectRelease();
        sub_100013B74((uint64_t)v3);
        if (qword_1001E0928 != -1) {
          swift_once();
        }
        uint64_t v83 = type metadata accessor for Logger();
        sub_100012E74(v83, (uint64_t)qword_1001E60A0);
        uint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v84, v85))
        {
          v86 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v86 = 0;
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "Source id is required for reporting", v86, 2u);
          swift_slowDealloc();
        }
        uint64_t v56 = *(void *)(v144 + 944);
        uint64_t v57 = *(void *)(v144 + 936);
        uint64_t v58 = *(void *)(v144 + 928);

        sub_1000B723C();
        swift_allocError();
        unsigned char *v87 = 0;
        goto LABEL_48;
      }
      if (*(unsigned char *)(v144 + 400) != 1)
      {
        char v160 = *(unsigned char *)(v144 + 400);
        uint64_t v154 = *(void *)(v144 + 392);
        uint64_t v157 = 0;
        goto LABEL_67;
      }
      if (*(void *)(v144 + 272))
      {
        char v160 = 1;
        uint64_t v154 = *(void *)v3;
        uint64_t v157 = *(void *)(v144 + 272);
        swift_bridgeObjectRetain();
LABEL_67:
        uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v144 + 936) + 56);
        v88(*(void *)(v144 + 904), 1, 1, *(void *)(v144 + 928));
        if ((*(unsigned char *)(v144 + 480) & 1) == 0)
        {
          uint64_t v89 = *(void *)(v144 + 928);
          uint64_t v90 = *(void *)(v144 + 904);
          uint64_t v91 = *(void *)(v144 + 896);
          Date.init(timeIntervalSince1970:)();
          sub_100019960(v90, &qword_1001E12F0);
          v88(v91, 0, 1, v89);
          sub_100059F98(v91, v90, &qword_1001E12F0);
        }
        uint64_t v149 = *(void *)(v144 + 1016);
        uint64_t v152 = *(void *)(v144 + 1024);
        char v142 = *(unsigned char *)(v144 + 482);
        uint64_t v92 = *(void *)(v144 + 1000);
        uint64_t v93 = *(void *)(v144 + 920);
        v94 = *(int **)(v144 + 912);
        uint64_t v146 = *(void *)(v144 + 904);
        uint64_t v95 = *(void *)(v144 + 824);
        uint64_t v140 = *(void *)(v144 + 816);
        uint64_t v96 = *(void *)(v144 + 808);
        uint64_t v97 = *(void *)(v144 + 800);
        uint64_t v98 = *(void *)(v144 + 288);
        uint64_t v99 = *(void *)(v144 + 296);
        (*(void (**)(uint64_t, void, void))(*(void *)(v144 + 936) + 16))(v93 + v94[11], *(void *)(v144 + 944), *(void *)(v144 + 928));
        *(void *)uint64_t v93 = v97;
        *(void *)(v93 + 8) = v96;
        *(void *)(v93 + 16) = v92;
        *(unsigned char *)(v93 + 24) = v142;
        *(void *)(v93 + 32) = v98;
        *(void *)(v93 + 40) = v99;
        *(_DWORD *)(v93 + 48) = v26;
        *(void *)(v93 + 56) = v154;
        *(void *)(v93 + 64) = v157;
        *(unsigned char *)(v93 + 72) = v160;
        *(void *)(v93 + 80) = v140;
        *(void *)(v93 + 88) = v95;
        sub_100059F98(v146, v93 + v94[12], &qword_1001E12F0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100013B74((uint64_t)v3);
        v100 = (void *)(v93 + v94[13]);
        void *v100 = v149;
        v100[1] = v152;
        goto LABEL_79;
      }
      swift_bridgeObjectRelease();
      sub_100013B74((uint64_t)v3);
      if (qword_1001E0928 != -1) {
        swift_once();
      }
      uint64_t v133 = type metadata accessor for Logger();
      sub_100012E74(v133, (uint64_t)qword_1001E60A0);
      v134 = Logger.logObject.getter();
      os_log_type_t v135 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v134, v135))
      {
        v136 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v136 = 0;
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "Publisher type is required for reporting", v136, 2u);
        swift_slowDealloc();
      }
      uint64_t v56 = *(void *)(v144 + 944);
      uint64_t v57 = *(void *)(v144 + 936);
      uint64_t v58 = *(void *)(v144 + 928);

      sub_1000B723C();
      swift_allocError();
      char v60 = 2;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_1001E0928 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_100012E74(v52, (uint64_t)qword_1001E60A0);
      long long v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        long long v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Impression required for reporting", v55, 2u);
        swift_slowDealloc();
      }
      uint64_t v56 = *(void *)(v144 + 944);
      uint64_t v57 = *(void *)(v144 + 936);
      uint64_t v58 = *(void *)(v144 + 928);

      sub_1000B723C();
      swift_allocError();
      char v60 = 1;
    }
    *uint64_t v59 = v60;
LABEL_48:
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    goto LABEL_57;
  }
LABEL_24:
  uint64_t v27 = (void *)v144;
  uint64_t v28 = *(void *)(v144 + 848);
  uint64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    if (qword_1001E0928 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100012E74(v44, (uint64_t)qword_1001E60A0);
    long long v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      long long v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "No eligible winning postback found", v47, 2u);
      swift_slowDealloc();
    }
    uint64_t v48 = v27[118];
    uint64_t v49 = v27[117];
    uint64_t v50 = v27[116];

    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v51 = (uint64_t (*)(void))v27[1];
LABEL_58:
    return v51();
  }
  v151 = (long long *)(v144 + 488);
  uint64_t v30 = *(void *)(v144 + 992);
  unint64_t v148 = sub_1000B74F0();
  unint64_t v145 = sub_1000B7544();
  swift_bridgeObjectRetain();
  uint64_t v31 = (uint64_t *)(v28 + 48);
  while (1)
  {
    uint64_t v32 = v31[1];
    uint64_t v33 = v31[3];
    uint64_t v158 = v31[2];
    uint64_t v161 = *v31;
    uint64_t v34 = v31[5];
    uint64_t v155 = v31[4];
    uint64_t v35 = v31[6];
    uint64_t v36 = *(v31 - 2);
    unint64_t v37 = *(v31 - 1);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    JWS.init(compactJWS:)(v36, v37, (unint64_t)&type metadata for Postback.JWSPayload, v148, v145, (uint64_t)v151);
    if (v30)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1001E0928 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_100012E74(v38, (uint64_t)qword_1001E60A0);
      char v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        int64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to unpack AdAttributionKit postback for reporting", v41, 2u);
        swift_slowDealloc();
      }
      swift_errorRelease();

      goto LABEL_27;
    }
    long long v169 = *(_OWORD *)(v144 + 584);
    long long v170 = *(_OWORD *)(v144 + 600);
    long long v171 = *(_OWORD *)(v144 + 616);
    uint64_t v172 = *(void *)(v144 + 632);
    long long v165 = *(_OWORD *)(v144 + 520);
    long long v166 = *(_OWORD *)(v144 + 536);
    long long v167 = *(_OWORD *)(v144 + 552);
    long long v168 = *(_OWORD *)(v144 + 568);
    long long v163 = *v151;
    long long v164 = *(_OWORD *)(v144 + 504);
    char v42 = *(unsigned char *)(v144 + 640);
    LODWORD(v173) = *(_DWORD *)(v144 + 641);
    *(_DWORD *)((char *)&v173 + 3) = *(_DWORD *)(v144 + 644);
    uint64_t v43 = *(void *)(v144 + 648);
    long long v174 = *(_OWORD *)(v144 + 656);
    long long v175 = *(_OWORD *)(v144 + 672);
    swift_bridgeObjectRelease();
    *(void *)(v144 + 16) = v161;
    *(void *)(v144 + 24) = v32;
    *(void *)(v144 + 32) = v158;
    *(void *)(v144 + 40) = v33;
    *(void *)(v144 + 48) = v155;
    *(void *)(v144 + 56) = v34;
    *(_OWORD *)(v144 + 160) = v169;
    *(_OWORD *)(v144 + 176) = v170;
    *(_OWORD *)(v144 + 192) = v171;
    *(void *)(v144 + 208) = v172;
    *(_OWORD *)(v144 + 96) = v165;
    *(_OWORD *)(v144 + 112) = v166;
    *(_OWORD *)(v144 + 128) = v167;
    *(_OWORD *)(v144 + 144) = v168;
    *(_OWORD *)(v144 + 64) = v163;
    *(_OWORD *)(v144 + 80) = v164;
    *(unsigned char *)(v144 + 216) = v42;
    *(_DWORD *)(v144 + 217) = v173;
    *(_DWORD *)(v144 + 220) = *(_DWORD *)((char *)&v173 + 3);
    *(void *)(v144 + 224) = v43;
    *(_OWORD *)(v144 + 232) = v174;
    *(_OWORD *)(v144 + 248) = v175;
    sub_1000B7598(v144 + 16);
    if ((v42 & 1) != 0 && !v43) {
      break;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = 0;
    v31 += 10;
    if (!--v29)
    {
      uint64_t v27 = (void *)v144;
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
  }
  uint64_t v12 = v144;
  uint64_t v61 = *(void *)(v144 + 832);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v61 + 16) || (unint64_t v62 = sub_1000AF084(v35), (v63 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if (qword_1001E0928 != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    sub_100012E74(v74, (uint64_t)qword_1001E60A0);
    long long v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Impression required for reporting", v77, 2u);
      swift_slowDealloc();
    }
    uint64_t v78 = *(void *)(v144 + 944);
    uint64_t v79 = *(void *)(v144 + 936);
    uint64_t v80 = *(void *)(v144 + 928);

    sub_1000B723C();
    swift_allocError();
    *uint64_t v81 = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
LABEL_57:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v51 = *(uint64_t (**)(void))(v12 + 8);
    goto LABEL_58;
  }
  uint64_t v64 = *(void *)(v144 + 880);
  unint64_t v65 = *(void *)(*(void *)(v144 + 832) + 56) + (v62 << 6);
  uint64_t v66 = *(void *)v65;
  unint64_t v67 = *(void *)(v65 + 8);
  char v68 = *(unsigned char *)(v65 + 56);
  unint64_t v69 = type metadata accessor for AppImpressionPayload();
  unint64_t v70 = sub_100036B14();
  unint64_t v71 = sub_1000B7684();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v72 = v66;
  unint64_t v73 = v69;
  JWS.init(compactJWS:)(v72, v67, v69, v70, v71, v64);
  uint64_t v101 = *(void *)(v144 + 880) + *(int *)(*(void *)(v144 + 872) + 52);
  if (HIDWORD(*(void *)(v101 + *(int *)(v73 + 28))))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v144;
    if (qword_1001E0928 != -1) {
      swift_once();
    }
    uint64_t v102 = type metadata accessor for Logger();
    sub_100012E74(v102, (uint64_t)qword_1001E60A0);
    v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Source id is required for reporting", v105, 2u);
      swift_slowDealloc();
    }
    uint64_t v106 = *(void *)(v144 + 944);
    uint64_t v107 = *(void *)(v144 + 936);
    uint64_t v108 = *(void *)(v144 + 928);
    uint64_t v109 = *(void *)(v144 + 880);

    sub_1000B723C();
    swift_allocError();
    unsigned char *v110 = 0;
    swift_willThrow();
    sub_100019960(v109, &qword_1001E1380);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v106, v108);
    goto LABEL_57;
  }
  unint64_t v159 = v73;
  int v162 = *(void *)(v101 + *(int *)(v73 + 28));
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v144 + 936) + 56);
  v111(*(void *)(v144 + 888), 1, 1, *(void *)(v144 + 928));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v68 & 1) == 0)
  {
    uint64_t v112 = *(void *)(v144 + 928);
    uint64_t v113 = *(void *)(v144 + 896);
    uint64_t v114 = *(void *)(v144 + 888);
    Date.init(timeIntervalSince1970:)();
    sub_100019960(v114, &qword_1001E12F0);
    v111(v113, 0, 1, v112);
    sub_100059F98(v113, v114, &qword_1001E12F0);
  }
  uint64_t v153 = *(void *)(v144 + 1016);
  uint64_t v156 = *(void *)(v144 + 1024);
  char v143 = *(unsigned char *)(v144 + 482);
  uint64_t v138 = *(void *)(v144 + 944);
  uint64_t v139 = *(void *)(v144 + 1000);
  uint64_t v115 = *(void *)(v144 + 936);
  uint64_t v137 = *(void *)(v144 + 928);
  uint64_t v116 = *(void *)(v144 + 920);
  v117 = *(int **)(v144 + 912);
  uint64_t v118 = *(void *)(v144 + 880);
  uint64_t v147 = *(void *)(v144 + 824);
  uint64_t v150 = *(void *)(v144 + 888);
  uint64_t v141 = *(void *)(v144 + 816);
  uint64_t v119 = *(void *)(v144 + 808);
  uint64_t v120 = *(void *)(v144 + 800);
  v121 = (uint64_t *)(v101 + *(int *)(v159 + 40));
  uint64_t v122 = *v121;
  uint64_t v123 = v121[1];
  uint64_t v124 = *(void *)(v101 + *(int *)(v159 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100019960(v118, &qword_1001E1380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v116 + v117[11], v138, v137);
  *(void *)uint64_t v116 = v120;
  *(void *)(v116 + 8) = v119;
  *(void *)(v116 + 16) = v139;
  *(unsigned char *)(v116 + 24) = v143;
  *(void *)(v116 + 32) = v122;
  *(void *)(v116 + 40) = v123;
  *(_DWORD *)(v116 + 48) = v162;
  *(void *)(v116 + 56) = v124;
  *(void *)(v116 + 64) = 0;
  *(unsigned char *)(v116 + 72) = 0;
  *(void *)(v116 + 80) = v141;
  *(void *)(v116 + 88) = v147;
  sub_100059F98(v150, v116 + v117[12], &qword_1001E12F0);
  v125 = (void *)(v116 + v117[13]);
  void *v125 = v153;
  v125[1] = v156;
  swift_bridgeObjectRetain();
LABEL_79:
  if (qword_1001E0928 != -1) {
    swift_once();
  }
  uint64_t v126 = type metadata accessor for Logger();
  sub_100012E74(v126, (uint64_t)qword_1001E60A0);
  v127 = Logger.logObject.getter();
  os_log_type_t v128 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v127, v128))
  {
    v129 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v129 = 0;
    _os_log_impl((void *)&_mh_execute_header, v127, v128, "Reporting conversion event", v129, 2u);
    swift_slowDealloc();
  }
  uint64_t v130 = *(void *)(v144 + 920);

  uint64_t v131 = swift_task_alloc();
  *(void *)(v144 + 1032) = v131;
  *(void *)(v131 + 16) = v130;
  v132 = (void *)swift_task_alloc();
  *(void *)(v144 + 1040) = v132;
  void *v132 = v144;
  v132[1] = sub_1000B552C;
  return withCheckedContinuation<A>(isolation:function:_:)(v132, 0, 0, 0xD000000000000019, 0x8000000100186E60, sub_1000B76DC, v131, (char *)&type metadata for () + 8);
}

uint64_t sub_1000B552C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B5644, 0, 0);
}

uint64_t sub_1000B5644()
{
  uint64_t v1 = v0[118];
  uint64_t v2 = v0[117];
  uint64_t v3 = v0[116];
  sub_1000B76E4(v0[115], type metadata accessor for ConversionBiomeEvent);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

double sub_1000B5734@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 connection];
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = [self predicateWithProperty:v5 equalToValue:v6];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v8 = sub_10011D59C(v4, v7, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  v13[2] = &v14;
  sub_100128D38((uint64_t)sub_10004EC6C, (uint64_t)v13, v8);

  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v17;
    double result = *(double *)&v14;
    long long v11 = v15;
    long long v12 = v16;
    *(_OWORD *)a2 = v14;
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 32) = v12;
    *(void *)(a2 + 48) = v10;
  }
  return result;
}

uint64_t sub_1000B58E0(uint64_t a1, uint64_t a2)
{
  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  v3[30] = type metadata accessor for PurchaseBiomeEvent(0);
  v3[31] = swift_task_alloc();
  v3[32] = type metadata accessor for InAppPurchaseDetails();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  uint64_t v4 = dword_1001E4070;
  NSString v5 = (void *)swift_task_alloc();
  v3[36] = v5;
  *NSString v5 = v3;
  v5[1] = sub_1000B5A34;
  return ((uint64_t (*)(char))((char *)&dword_1001E4070 + v4))(20);
}

uint64_t sub_1000B5A34(char a1)
{
  *(unsigned char *)(*(void *)v1 + 432) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B5B60, 0, 0);
}

uint64_t sub_1000B5B60()
{
  uint64_t v28 = v0;
  if (*(unsigned char *)(v0 + 432))
  {
    if (qword_1001E0928 != -1) {
      swift_once();
    }
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 280);
    uint64_t v9 = type metadata accessor for Logger();
    *(void *)(v0 + 296) = sub_100012E74(v9, (uint64_t)qword_1001E60A0);
    sub_1000B71A4(v7, v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 280);
    if (v12)
    {
      uint64_t v14 = *(void *)(v0 + 272);
      long long v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)long long v15 = 136315138;
      sub_1000B71A4(v13, v14);
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)(v0 + 208) = sub_100147668(v16, v17, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000B76E4(v13, (uint64_t (*)(void))type metadata accessor for InAppPurchaseDetails);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Purchase details: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000B76E4(*(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for InAppPurchaseDetails);
    }

    uint64_t v19 = *(void *)(v0 + 224);
    long long v18 = *(uint64_t **)(v0 + 232);
    uint64_t v21 = *v18;
    uint64_t v20 = v18[1];
    *(void *)(v0 + 304) = v20;
    long long v22 = (void *)v18[2];
    *(void *)(v0 + 312) = v22;
    uint64_t v23 = swift_allocObject();
    *(void *)(v0 + 320) = v23;
    *(void *)(v23 + 16) = v19;
    uint64_t v24 = dword_1001E4940;
    swift_bridgeObjectRetain();
    id v25 = v22;
    unint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v26;
    *unint64_t v26 = v0;
    v26[1] = sub_1000B5FA4;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4940 + v24))(v0 + 16, (uint64_t)sub_1000B7218, v23, v21, v20, (uint64_t)v25);
  }
  else
  {
    if (qword_1001E0928 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100012E74(v1, (uint64_t)qword_1001E60A0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Reporting is not enabled", v4, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    NSString v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1000B5FA4()
{
  uint64_t v2 = *(void **)(*v1 + 312);
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_1000B61A8, 0, 0);
  }
}

uint64_t sub_1000B61A8()
{
  uint64_t v70 = v0;
  sub_100059F98(v0 + 16, v0 + 128, &qword_1001E2F10);
  if (*(void *)(v0 + 152))
  {
    long long v1 = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 88) = v1;
    *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 160);
    *(void *)(v0 + 120) = *(void *)(v0 + 176);
    NSDecimal.init(integerLiteral:)((NSDecimal *)(v0 + 72), 1000);
    *(void *)(v0 + 372) = static NSDecimal.* infix(_:_:)();
    *(_WORD *)(v0 + 380) = v2;
    *(_WORD *)(v0 + 382) = v3;
    *(_WORD *)(v0 + 384) = v4;
    *(_WORD *)(v0 + 386) = v5;
    *(_WORD *)(v0 + 388) = v6;
    *(_WORD *)(v0 + 390) = v7;
    *(void *)(v0 + 352) = 0;
    *(void *)(v0 + 360) = 0;
    *(_DWORD *)(v0 + 368) = 0;
    NSDecimalRound((NSDecimal *)(v0 + 352), (const NSDecimal *)(v0 + 372), 0, NSRoundPlain);
    NSDecimal._bridgeToObjectiveC()(v8);
    uint64_t v10 = v9;
    id v67 = [v9 longLongValue];

    uint64_t v11 = sub_1000B6AD4();
    char v68 = (_OWORD *)(v0 + 184);
    if (v11)
    {
      uint64_t v12 = v11;
      if (*(void *)(v11 + 16))
      {
        uint64_t v13 = *(void *)(v0 + 216);
        uint64_t v14 = *(void *)(v13 + 24);
        uint64_t v15 = *(void *)(v13 + 32);
        swift_bridgeObjectRetain();
        unint64_t v16 = sub_1000AF1FC(v14, v15);
        if (v17)
        {
          Swift::Double v18 = *(double *)(*(void *)(v12 + 56) + 8 * v16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          NSDecimal.init(_:)(v19, v18);
          *(void *)(v0 + 412) = static NSDecimal.* infix(_:_:)();
          *(_WORD *)(v0 + 420) = v20;
          *(_WORD *)(v0 + 422) = v21;
          *(_WORD *)(v0 + 424) = v22;
          *(_WORD *)(v0 + 426) = v23;
          *(_WORD *)(v0 + 428) = v24;
          *(_WORD *)(v0 + 430) = v25;
          *(void *)(v0 + 392) = 0;
          *(void *)(v0 + 400) = 0;
          *(_DWORD *)(v0 + 408) = 0;
          NSDecimalRound((NSDecimal *)(v0 + 392), (const NSDecimal *)(v0 + 412), 0, NSRoundPlain);
          NSDecimal._bridgeToObjectiveC()(v26);
          uint64_t v28 = v27;
          id v62 = [v27 longLongValue];

          char v63 = 0;
LABEL_16:
          uint64_t v42 = *(void *)(v0 + 248);
          int64_t v41 = *(int **)(v0 + 256);
          uint64_t v43 = *(int **)(v0 + 240);
          uint64_t v44 = *(void **)(v0 + 216);
          uint64_t v66 = *(void *)(v0 + 224);
          *char v68 = *(_OWORD *)(v0 + 88);
          uint64_t v45 = v44[4];
          uint64_t v46 = v44[6];
          uint64_t v64 = v44[5];
          uint64_t v65 = v44[3];
          long long v47 = (char *)v44 + v41[7];
          uint64_t v48 = v42 + v43[9];
          uint64_t v49 = type metadata accessor for Date();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v48, v47, v49);
          char v50 = *((unsigned char *)v44 + v41[8]);
          long long v51 = (void *)((char *)v44 + v41[9]);
          uint64_t v53 = *v51;
          uint64_t v52 = v51[1];
          *(void *)uint64_t v42 = v66;
          *(_OWORD *)(v42 + 8) = *v68;
          *(void *)(v42 + 24) = v67;
          *(void *)(v42 + 32) = v65;
          *(void *)(v42 + 40) = v45;
          *(void *)(v42 + 48) = v64;
          *(void *)(v42 + 56) = v46;
          *(unsigned char *)(v42 + v43[10]) = v50;
          os_log_type_t v54 = (void *)(v42 + v43[11]);
          *os_log_type_t v54 = v53;
          v54[1] = v52;
          uint64_t v55 = v42 + v43[12];
          *(void *)uint64_t v55 = v62;
          *(unsigned char *)(v55 + 8) = v63;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v56 = Logger.logObject.getter();
          os_log_type_t v57 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v56, v57))
          {
            uint64_t v58 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v58 = 0;
            _os_log_impl((void *)&_mh_execute_header, v56, v57, "Reporting purchase event", v58, 2u);
            swift_slowDealloc();
          }
          uint64_t v59 = *(void *)(v0 + 248);

          uint64_t v60 = swift_task_alloc();
          *(void *)(v0 + 336) = v60;
          *(void *)(v60 + 16) = v59;
          uint64_t v61 = (void *)swift_task_alloc();
          *(void *)(v0 + 344) = v61;
          void *v61 = v0;
          v61[1] = sub_1000B68BC;
          return withCheckedContinuation<A>(isolation:function:_:)(v61, 0, 0, 0xD000000000000017, 0x8000000100186E20, sub_1000B7234, v60, (char *)&type metadata for () + 8);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    sub_1000B71A4(*(void *)(v0 + 216), *(void *)(v0 + 264));
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = *(void *)(v0 + 264);
    if (v36)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v39 = *(void *)(v37 + 24);
      unint64_t v40 = *(void *)(v37 + 32);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 200) = sub_100147668(v39, v40, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000B76E4(v37, (uint64_t (*)(void))type metadata accessor for InAppPurchaseDetails);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "No exchange rate found for currency code: %s", v38, 0xCu);
      char v63 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v62 = 0;
    }
    else
    {
      sub_1000B76E4(*(void *)(v0 + 264), (uint64_t (*)(void))type metadata accessor for InAppPurchaseDetails);

      id v62 = 0;
      char v63 = 1;
    }
    goto LABEL_16;
  }
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "No conversion metadata found", v31, 2u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_1000B68BC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B6A00, 0, 0);
}

uint64_t sub_1000B6A00()
{
  sub_1000B76E4(*(void *)(v0 + 248), type metadata accessor for PurchaseBiomeEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B6AD4()
{
  uint64_t v0 = sub_100012960(&qword_1001E1170);
  __chkstk_darwin(v0 - 8);
  __int16 v2 = (char *)v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  __int16 v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v36 - v8;
  type metadata accessor for ResourceLoader.BundleRetriever();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v11 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v11 URLForResource:v12 withExtension:v13];

  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_5;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v15(v2, v7, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_5:
    sub_100019960((uint64_t)v2, &qword_1001E1170);
    sub_10006B8E8();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  v15(v9, v2, v3);
  uint64_t v23 = Data.init(contentsOf:options:)();
  unint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  unint64_t v26 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v37[0] = 0;
  id v28 = [v26 JSONObjectWithData:isa options:0 error:v37];

  if (v28)
  {
    id v29 = v37[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100012960(&qword_1001E2F18);
    if (swift_dynamicCast())
    {
      sub_100020930(v23, v25);
      return v36[1];
    }
    if (qword_1001E0928 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100012E74(v31, (uint64_t)qword_1001E60A0);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to parse currency code exchange rates JSON", v34, 2u);
      swift_slowDealloc();
    }

    sub_1000B723C();
    swift_allocError();
    *os_log_type_t v35 = 3;
  }
  else
  {
    id v30 = v37[0];
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_100020930(v23, v25);
LABEL_6:
  if (qword_1001E0928 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100012E74(v16, (uint64_t)qword_1001E60A0);
  swift_errorRetain();
  swift_errorRetain();
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    __int16 v20 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 138412290;
    swift_errorRetain();
    __int16 v21 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v37[0] = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v20 = v21;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to load exchange rates: %@", v19, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

void sub_1000B714C(uint64_t a1@<X8>)
{
  sub_10004E850((uint64_t)v3);
  if (!v1) {
    sub_100059F98((uint64_t)v3, a1, &qword_1001E2F10);
  }
}

uint64_t sub_1000B71A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InAppPurchaseDetails();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B7208()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B7218(uint64_t a1@<X8>)
{
}

uint64_t sub_1000B7234(uint64_t a1)
{
  return sub_1000C9F98(a1, *(void *)(v1 + 16));
}

unint64_t sub_1000B723C()
{
  unint64_t result = qword_1001E2F20;
  if (!qword_1001E2F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2F20);
  }
  return result;
}

uint64_t destroy for AggregatedReportingManager(uint64_t a1)
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 24);

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 64);
}

ValueMetadata *type metadata accessor for AggregatedReportingManager()
{
  return &type metadata for AggregatedReportingManager;
}

unsigned char *storeEnumTagSinglePayload for ReportingManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B73B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReportingManagerError()
{
  return &type metadata for ReportingManagerError;
}

unint64_t sub_1000B73F0(uint64_t a1)
{
  unint64_t result = sub_1000B723C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B741C()
{
  unint64_t result = qword_1001E2F28;
  if (!qword_1001E2F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E2F28);
  }
  return result;
}

uint64_t sub_1000B7470()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

double sub_1000B74A8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B5734(a1, a2);
}

uint64_t sub_1000B74C4(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000B74F0()
{
  unint64_t result = qword_1001E2F38;
  if (!qword_1001E2F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2F38);
  }
  return result;
}

unint64_t sub_1000B7544()
{
  unint64_t result = qword_1001E2F40;
  if (!qword_1001E2F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2F40);
  }
  return result;
}

uint64_t sub_1000B7598(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000B7684()
{
  unint64_t result = qword_1001E13C0;
  if (!qword_1001E13C0)
  {
    type metadata accessor for AppImpressionPayload();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E13C0);
  }
  return result;
}

uint64_t sub_1000B76DC(uint64_t a1)
{
  return sub_1000C94B8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000B76E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000B7748()
{
  unint64_t result = qword_1001E2F48;
  if (!qword_1001E2F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2F48);
  }
  return result;
}

unint64_t sub_1000B77A0()
{
  unint64_t result = qword_1001E2F50;
  if (!qword_1001E2F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2F50);
  }
  return result;
}

unint64_t sub_1000B77F4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000B7824();
  unint64_t result = sub_1000242D4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000B7824()
{
  unint64_t result = qword_1001E2FA0;
  if (!qword_1001E2FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2FA0);
  }
  return result;
}

unint64_t sub_1000B7878(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x737265765F707061;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B7910(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x737265765F707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B79A8(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E2FD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000B77A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000B7B5C(unsigned __int8 *a1, char *a2)
{
  return sub_1001051E4(*a1, *a2);
}

Swift::Int sub_1000B7B68()
{
  return sub_10010946C();
}

uint64_t sub_1000B7B70()
{
  return sub_100109A24();
}

Swift::Int sub_1000B7B78()
{
  return sub_10010B864();
}

unint64_t sub_1000B7B80@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B7E00(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000B7BB0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000B7878(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000B7BDC()
{
  return sub_1000B7910(*v0);
}

unint64_t sub_1000B7BE4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B7E00(a1);
  *a2 = result;
  return result;
}

void sub_1000B7C0C(void *a1@<X8>)
{
  *a1 = &off_1001C1CE0;
}

uint64_t sub_1000B7C1C(uint64_t a1)
{
  unint64_t v2 = sub_1000B77A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7C58(uint64_t a1)
{
  unint64_t v2 = sub_1000B77A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000B7C94@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000B7E4C(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1000B7CD8(void *a1)
{
  return sub_1000B79A8(a1);
}

unint64_t sub_1000B7CF4()
{
  unint64_t result = qword_1001E2FA8;
  if (!qword_1001E2FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2FA8);
  }
  return result;
}

unint64_t sub_1000B7D4C()
{
  unint64_t result = qword_1001E2FB0;
  if (!qword_1001E2FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2FB0);
  }
  return result;
}

unint64_t sub_1000B7DA4()
{
  unint64_t result = qword_1001E2FB8;
  if (!qword_1001E2FB8)
  {
    sub_100011ECC(&qword_1001E2FC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2FB8);
  }
  return result;
}

unint64_t sub_1000B7E00(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1C60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000B7E4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E2FC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000B77A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v25 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v24 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v20 = v10;
  char v23 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v21 = v14;
  uint64_t v19 = v13;
  char v22 = 3;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v17 = v20;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v17;
  uint64_t v18 = v19;
  *(void *)(a2 + 32) = v12;
  *(void *)(a2 + 40) = v18;
  *(unsigned char *)(a2 + 48) = v21 & 1;
  *(void *)(a2 + 56) = v15;
  return result;
}

unsigned char *storeEnumTagSinglePayload for AppDistributorMetadataModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B8184);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDistributorMetadataModel.CodingKeys()
{
  return &type metadata for AppDistributorMetadataModel.CodingKeys;
}

uint64_t initializeWithCopy for AppDistributorMetadataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppDistributorMetadataModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = a2[7];
  return a1;
}

__n128 initializeWithTake for AppDistributorMetadataModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppDistributorMetadataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDistributorMetadataModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDistributorMetadataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDistributorMetadataModel()
{
  return &type metadata for AppDistributorMetadataModel;
}

unint64_t sub_1000B83BC()
{
  unint64_t result = qword_1001E2FD8;
  if (!qword_1001E2FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E2FD8);
  }
  return result;
}

uint64_t sub_1000B8410(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  __chkstk_darwin(v6);
  long long v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100012960((uint64_t *)&unk_1001E2FE0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000398B0();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
  uint64_t v24 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v9);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  uint64_t v19 = v26;
  unint64_t v18 = v27;
  *((void *)v17 + 2) = v26;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v28;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v17[v16], (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_1000B8A40;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002437C;
  aBlock[3] = &unk_1001C80B0;
  uint64_t v20 = _Block_copy(aBlock);
  sub_10003CF30(v19, v18);
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v33 = _swiftEmptyArrayStorage;
  sub_100019B0C();
  sub_100012960((uint64_t *)&unk_1001E0F60);
  sub_100019B64();
  uint64_t v21 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  char v22 = (void *)v24;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
  return swift_release();
}

uint64_t sub_1000B8830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v14[0] = 0;
  id v6 = [v4 signatureFromData:isa type:1 bag:a3 error:v14];

  id v7 = v14[0];
  if (v6)
  {
    long long v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    v14[0] = v8;
    v14[1] = v10;
    sub_100012960((uint64_t *)&unk_1001E2FE0);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    uint64_t v12 = v7;
    uint64_t v13 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v14[0] = v13;
    sub_100012960((uint64_t *)&unk_1001E2FE0);
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_1000B8968()
{
  uint64_t v1 = sub_100012960((uint64_t *)&unk_1001E2FE0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  sub_100020930(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B8A40()
{
  sub_100012960((uint64_t *)&unk_1001E2FE0);
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];

  return sub_1000B8830(v1, v2, v3);
}

uint64_t sub_1000B8AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B8ABC()
{
  return swift_release();
}

uint64_t sub_1000B8AC4()
{
  uint64_t v2 = v0;
  sub_100012960(&qword_1001E3098);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v6 = v5 * 1000.0;
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v6 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 >= 1.84467441e19)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  NSString v7 = String._bridgeToObjectiveC()();
  uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v9 = self;
  id v10 = [v9 predicateWithProperty:v7 value:v8 comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v9 predicateWithProperty:v11 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v12;
  specialized Array._endMutation()();
  id v13 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v14 = [v2 connection];
  id v15 = v13;
  id v16 = sub_10011DEC4(v14, v13, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  unint64_t v18 = _swiftEmptyArrayStorage;
  __chkstk_darwin(v16);
  v17[2] = &v18;
  sub_100129D4C((uint64_t)sub_1000B9904, (uint64_t)v17, v16);
  if (v1)
  {

    return swift_bridgeObjectRelease();
  }
  else
  {

    return (uint64_t)v18;
  }
}

uint64_t sub_1000B8D84()
{
  uint64_t v2 = v0;
  sub_100012960(&qword_1001E3098);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  double v6 = self;
  id v7 = [v6 predicateWithProperty:v4 equalToValue:v5];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v6 predicateWithProperty:v8 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v9;
  specialized Array._endMutation()();
  id v10 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v11 = [v2 connection];
  id v12 = v10;
  id v13 = sub_10011DEC4(v11, v10, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  v15[2] = &v16;
  id v16 = _swiftEmptyArrayStorage;
  sub_100129D4C((uint64_t)sub_1000B9904, (uint64_t)v15, v13);

  if (v1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return (uint64_t)v16;
  }
}

int64_t sub_1000B8FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = a1;
  int64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = a2;
    uint64_t v32 = v2;
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_10013A5D0(0, v4, 0);
    double v6 = _swiftEmptyArrayStorage;
    int64_t result = sub_10003645C(v5);
    int64_t v8 = result;
    int v10 = v9;
    char v12 = v11 & 1;
    uint64_t v35 = v5;
    uint64_t v36 = v5 + 56;
    while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(unsigned char *)(v5 + 32))
    {
      if (((*(void *)(v36 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v5 + 36) != v10) {
        goto LABEL_21;
      }
      if (*(unsigned char *)(*(void *)(v5 + 48) + v8))
      {
        if (*(unsigned char *)(*(void *)(v5 + 48) + v8) == 1)
        {
          unint64_t v13 = 0xEA00000000006461;
          uint64_t v14 = 0x6F6C6E776F646572;
        }
        else
        {
          unint64_t v13 = 0xED0000746E656D65;
          uint64_t v14 = 0x6761676E652D6572;
        }
      }
      else
      {
        unint64_t v13 = 0xE800000000000000;
        uint64_t v14 = 0x64616F6C6E776F64;
      }
      uint64_t v37 = v6;
      unint64_t v16 = v6[2];
      unint64_t v15 = v6[3];
      if (v16 >= v15 >> 1)
      {
        sub_10013A5D0(v15 > 1, v16 + 1, 1);
        double v6 = v37;
      }
      v6[2] = v16 + 1;
      uint64_t v17 = &v6[2 * v16];
      v17[4] = v14;
      void v17[5] = v13;
      uint64_t v5 = v35;
      int64_t result = sub_1000B9720(v8, v10, v12 & 1, v35);
      int64_t v8 = result;
      int v10 = v18;
      char v12 = v19 & 1;
      if (!--v4)
      {
        sub_1000B98F8(result, v18, v19 & 1);
        uint64_t v3 = v32;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
LABEL_16:
    sub_100012960(&qword_1001E3098);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100178B40;
    NSString v21 = String._bridgeToObjectiveC()();
    uint64_t v22 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v23 = [self predicateWithProperty:v21 equalToValue:v22];
    swift_unknownObjectRelease();

    *(void *)(inited + 32) = v23;
    swift_bridgeObjectRetain();
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRetain();
    sub_100012960(&qword_1001E26C0);
    uint64_t v25 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v26 = [self containsPredicateWithProperty:v24 values:v25];
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();

    *(void *)(inited + 40) = v26;
    specialized Array._endMutation()();
    id v27 = sub_1000485A4(inited);
    swift_bridgeObjectRelease();
    id v28 = [v34 connection];
    id v29 = v27;
    id v30 = sub_10011DEC4(v28, v27, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
    uint64_t v37 = _swiftEmptyArrayStorage;
    __chkstk_darwin(v30);
    v31[2] = &v37;
    sub_100129D4C((uint64_t)sub_1000B9904, (uint64_t)v31, v30);

    if (v3) {
      return swift_bridgeObjectRelease();
    }
    else {
      return (int64_t)v37;
    }
  }
  return result;
}

uint64_t sub_1000B93F0()
{
  id v2 = [v0 connection];
  id v3 = sub_10011DEC4(v2, 0, (uint64_t)&off_1001C1D08, 0, 0);
  v5[2] = &v6;
  double v6 = _swiftEmptyArrayStorage;
  sub_100129D4C((uint64_t)sub_1000B9904, (uint64_t)v5, v3);

  if (v1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return (uint64_t)v6;
  }
}

uint64_t sub_1000B94CC()
{
  id v2 = [v0 connection];
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v5 = [self predicateWithProperty:v3 value:v4 comparisonType:4];
  swift_unknownObjectRelease();

  id v6 = sub_10011DEC4(v2, v5, (uint64_t)&off_1001C1D30, 0, 0);
  v8[2] = &v9;
  int v9 = _swiftEmptyArrayStorage;
  sub_100129D4C((uint64_t)sub_1000B98F0, (uint64_t)v8, v6);

  if (v1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return (uint64_t)v9;
  }
}

id sub_1000B96C4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GhostbackDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GhostbackDatabaseSession()
{
  return self;
}

int64_t sub_1000B9720(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (int64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

__n128 sub_1000B9804(__n128 *a1, uint64_t a2, uint64_t a3, void **a4)
{
  __n128 v5 = a1[5];
  __n128 v24 = a1[4];
  __n128 v25 = v5;
  __n128 v6 = a1[7];
  __n128 v26 = a1[6];
  __n128 v27 = v6;
  __n128 v7 = a1[1];
  __n128 v20 = *a1;
  __n128 v21 = v7;
  __n128 v8 = a1[3];
  __n128 v22 = a1[2];
  __n128 v23 = v8;
  unint64_t v9 = *a4;
  sub_10005D5A0((uint64_t)&v20);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_10013A134(0, v9[2] + 1, 1, v9);
    *a4 = v9;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_10013A134((void *)(v11 > 1), v12 + 1, 1, v9);
    *a4 = v9;
  }
  v9[2] = v12 + 1;
  unint64_t v13 = (__n128 *)&v9[16 * v12];
  __n128 v14 = v20;
  __n128 v15 = v21;
  __n128 v16 = v23;
  void v13[4] = v22;
  v13[5] = v16;
  v13[2] = v14;
  v13[3] = v15;
  __n128 result = v24;
  __n128 v18 = v25;
  __n128 v19 = v27;
  unsigned char v13[8] = v26;
  v13[9] = v19;
  v13[6] = result;
  v13[7] = v18;
  return result;
}

double sub_1000B98F0(__n128 *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = sub_1000B9804(a1, a2, a3, (void **)*(void *)(v3 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_1000B98F8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000B9908@<X0>(void *a1@<X8>)
{
  id v3 = [*v1 targetApplicationRecord];
  uint64_t result = sub_100019F68(0, (unint64_t *)&qword_1001E1B90);
  a1[3] = result;
  a1[4] = &off_1001C8F18;
  *a1 = v3;
  return result;
}

uint64_t sub_1000B996C()
{
  objc_super v2 = *v0;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_1000B9A68;
  uint64_t v3 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100026CA4;
  v1[13] = &unk_1001C8120;
  v1[14] = v3;
  [v2 openWithCompletionHandler:v1 + 10];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_1000B9A68()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    objc_super v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(*v0 + 120);
    objc_super v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
  }
  return v2(v3);
}

uint64_t sub_1000B9B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  return _swift_task_switch(sub_1000B9BA8, 0, 0);
}

uint64_t sub_1000B9BA8()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = (void *)v0[18];
  NSString v3 = String._bridgeToObjectiveC()();
  v0[19] = v3;
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_1000B9CC4;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100026CA4;
  v0[13] = &unk_1001C8108;
  v0[14] = v4;
  [v1 openApplicationWithBundleIdentifier:v3 usingConfiguration:v2 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000B9CC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = sub_1000B9E38;
  }
  else {
    uint64_t v2 = sub_1000B9DD4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B9DD4()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B9E38()
{
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000B9EA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100012960(&qword_1001E12E8);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_100019F68(0, &qword_1001E30B0);
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000B9F84(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return _swift_task_switch(sub_1000B9FA4, 0, 0);
}

uint64_t sub_1000B9FA4()
{
  uint64_t v1 = self;
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[17] = v3;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000BA0CC;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000B9EA8;
  v0[13] = &unk_1001C80F0;
  v0[14] = v5;
  [v1 getAppLinksWithURL:v4 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000BA0CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_1000BA264;
  }
  else {
    uint64_t v2 = sub_1000BA1DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000BA1DC()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = sub_10011EF40(v0[15]);
  swift_bridgeObjectRelease();

  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_1000BA264()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

ValueMetadata *type metadata accessor for LaunchServicesWorkspace()
{
  return &type metadata for LaunchServicesWorkspace;
}

id sub_1000BA374()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PostbackUpdateTestingServiceListenerDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PostbackUpdateTestingServiceListenerDelegate()
{
  return self;
}

uint64_t sub_1000BA3DC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = sub_10006F998();
  if (v8)
  {
    unint64_t v9 = self;
    id v10 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon17XPCClientProtocol_];
    [a1 setRemoteObjectInterface:v10];

    id v11 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon36PostbackUpdateTestingServiceProtocol_];
    [a1 setExportedInterface:v11];

    [a1 setExportedObject:*(void *)(v2 + OBJC_IVAR____TtC20AttributionKitDaemon44PostbackUpdateTestingServiceListenerDelegate_serviceBridge)];
    [a1 resume];
    id v12 = [a1 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100012960((uint64_t *)&unk_1001E1FD0);
    if (swift_dynamicCast())
    {
      swift_getObjectType();
      XPCClientProtocol.handleMessage(_:)(0, 0);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v13 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
    __n128 v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      __n128 v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__n128 v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing entitlement for TestingService", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v8 & 1;
}

id sub_1000BA688()
{
  id v1 = [v0 connection];
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v4 = [self predicateWithProperty:v2 equalToValue:v3];
  swift_unknownObjectRelease();

  id v5 = sub_10011CC88(v1, v4, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  id v6 = [v5 countOfEntities];

  return v6;
}

uint64_t sub_1000BA794(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = a1;
  int64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = a2;
    uint64_t v32 = v2;
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_10013A5D0(0, v4, 0);
    id v6 = _swiftEmptyArrayStorage;
    uint64_t result = sub_10003645C(v5);
    uint64_t v8 = result;
    uint64_t v10 = v9;
    char v12 = v11 & 1;
    uint64_t v35 = v5;
    uint64_t v36 = v5 + 56;
    while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(unsigned char *)(v5 + 32))
    {
      if (((*(void *)(v36 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v5 + 36) != v10) {
        goto LABEL_21;
      }
      if (*(unsigned char *)(*(void *)(v5 + 48) + v8))
      {
        if (*(unsigned char *)(*(void *)(v5 + 48) + v8) == 1)
        {
          unint64_t v13 = 0xEA00000000006461;
          uint64_t v14 = 0x6F6C6E776F646572;
        }
        else
        {
          unint64_t v13 = 0xED0000746E656D65;
          uint64_t v14 = 0x6761676E652D6572;
        }
      }
      else
      {
        unint64_t v13 = 0xE800000000000000;
        uint64_t v14 = 0x64616F6C6E776F64;
      }
      uint64_t v37 = v6;
      unint64_t v16 = v6[2];
      unint64_t v15 = v6[3];
      if (v16 >= v15 >> 1)
      {
        sub_10013A5D0(v15 > 1, v16 + 1, 1);
        id v6 = v37;
      }
      v6[2] = v16 + 1;
      uint64_t v17 = &v6[2 * v16];
      v17[4] = v14;
      void v17[5] = v13;
      uint64_t v5 = v35;
      uint64_t result = sub_1000B971C(v8, v10, v12 & 1, v35);
      uint64_t v8 = result;
      uint64_t v10 = v18;
      char v12 = v19 & 1;
      if (!--v4)
      {
        sub_1000B98F8(result, v18, v19 & 1);
        uint64_t v3 = v32;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
LABEL_16:
    sub_100012960((uint64_t *)&unk_1001E17C8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100178B40;
    NSString v21 = String._bridgeToObjectiveC()();
    uint64_t v22 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v23 = [self predicateWithProperty:v21 equalToValue:v22];
    swift_unknownObjectRelease();

    *(void *)(inited + 32) = v23;
    swift_bridgeObjectRetain();
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRetain();
    sub_100012960(&qword_1001E26C0);
    uint64_t v25 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v26 = [self containsPredicateWithProperty:v24 values:v25];
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();

    *(void *)(inited + 40) = v26;
    specialized Array._endMutation()();
    id v27 = sub_1000485A4(inited);
    swift_bridgeObjectRelease();
    id v28 = [v34 connection];
    id v29 = v27;
    id v30 = sub_10011CC88(v28, v27, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
    uint64_t v37 = _swiftEmptyArrayStorage;
    __chkstk_darwin(v30);
    v31[2] = &v37;
    sub_1001283A4((uint64_t)sub_1000BBD34, (uint64_t)v31, v30);

    if (v3) {
      return swift_bridgeObjectRelease();
    }
    else {
      return (uint64_t)v37;
    }
  }
  return result;
}

void sub_1000BABC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = a2;
    uint64_t v122 = a1;
    uint64_t v123 = v2;
    v126[0] = _swiftEmptyArrayStorage;
    sub_10013A5D0(0, v4, 0);
    id v6 = _swiftEmptyArrayStorage;
    uint64_t v7 = sub_10003645C(v5);
    uint64_t v9 = v8;
    int v11 = v10 & 1;
    v125 = (void *)(v5 + 56);
    while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(unsigned char *)(v5 + 32))
    {
      if (((*(void *)((char *)v125 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_175;
      }
      if (*(_DWORD *)(v5 + 36) != v9) {
        goto LABEL_176;
      }
      if (*(unsigned char *)(*(void *)(v5 + 48) + v7)) {
        uint64_t v12 = 0x69746375646F7270;
      }
      else {
        uint64_t v12 = 0x6D706F6C65766564;
      }
      if (*(unsigned char *)(*(void *)(v5 + 48) + v7)) {
        unint64_t v13 = 0xEA00000000006E6FLL;
      }
      else {
        unint64_t v13 = 0xEB00000000746E65;
      }
      v126[0] = v6;
      uint64_t v14 = v5;
      unint64_t v16 = v6[2];
      unint64_t v15 = v6[3];
      if (v16 >= v15 >> 1)
      {
        LODWORD(v121) = v11;
        uint64_t v120 = (void *)v12;
        sub_10013A5D0(v15 > 1, v16 + 1, 1);
        uint64_t v12 = (uint64_t)v120;
        LOBYTE(v11) = (_BYTE)v121;
        id v6 = (void *)v126[0];
      }
      v6[2] = v16 + 1;
      uint64_t v17 = &v6[2 * v16];
      v17[4] = v12;
      void v17[5] = v13;
      uint64_t v18 = sub_1000B971C(v7, v9, v11 & 1, v14);
      uint64_t v7 = v18;
      uint64_t v9 = v19;
      int v11 = v20 & 1;
      --v4;
      uint64_t v5 = v14;
      if (!v4)
      {
        sub_1000B98F8(v18, v19, v11);
        uint64_t v3 = v123;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
LABEL_17:
  sub_100012960((uint64_t *)&unk_1001E17C8);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100178B40;
  Date.timeIntervalSince1970.getter();
  double v23 = v22 * 1000.0;
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
  {
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  if (v23 <= -1.0)
  {
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }
  if (v23 >= 1.84467441e19)
  {
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
    goto LABEL_182;
  }
  NSString v24 = String._bridgeToObjectiveC()();
  uint64_t v25 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v26 = [self predicateWithProperty:v24 value:v25 comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(v21 + 32) = v26;
  swift_bridgeObjectRetain();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  sub_100012960(&qword_1001E26C0);
  uint64_t v28 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v29 = [self containsPredicateWithProperty:v27 values:v28];
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();

  *(void *)(v21 + 40) = v29;
  specialized Array._endMutation()();
  id v30 = sub_1000485A4(v21);
  swift_bridgeObjectRelease();
  id v31 = [v124 connection];
  id v32 = v30;
  id v33 = sub_10011CC88(v31, v30, (uint64_t)&off_1001C05C8, 0, 0);
  v126[0] = _swiftEmptyArrayStorage;
  __chkstk_darwin(v33);
  v115[2] = v126;
  sub_1001283A4((uint64_t)sub_1000BBCF0, (uint64_t)v115, v33);
  uint64_t v119 = v3;
  if (v3)
  {

    swift_bridgeObjectRelease();
    return;
  }

  id v116 = v32;
  uint64_t v34 = v126[0];
  uint64_t v35 = *(void *)(v126[0] + 16);
  if (v35)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = v35 - 1;
    uint64_t v123 = _swiftEmptyArrayStorage;
    uint64_t v37 = 32;
    for (uint64_t i = v35 - 1; ; --i)
    {
      memcpy(v126, (const void *)(v34 + v37), 0x101uLL);
      if (BYTE2(v126[21]) == 1 && (v126[13] & 0x100) != 0)
      {
        if ((v126[21] & 0x100000000) != 0)
        {
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100081480((uint64_t)v126);
          swift_bridgeObjectRelease();
          if ((v39 & 1) == 0)
          {
            sub_10008150C((uint64_t)v126);
            goto LABEL_35;
          }
        }
        else
        {
          sub_100081480((uint64_t)v126);
          swift_bridgeObjectRelease();
        }
        unint64_t v40 = v123;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v127 = v40;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10013A718(0, v40[2] + 1, 1);
          unint64_t v40 = v127;
        }
        unint64_t v43 = v40[2];
        unint64_t v42 = v40[3];
        if (v43 >= v42 >> 1)
        {
          sub_10013A718(v42 > 1, v43 + 1, 1);
          unint64_t v40 = v127;
        }
        _OWORD v40[2] = v43 + 1;
        uint64_t v123 = v40;
        memcpy(&v40[33 * v43 + 4], v126, 0x101uLL);
      }
LABEL_35:
      if (!i)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v44 = _swiftEmptyArrayStorage;
        uint64_t v45 = 32;
        for (uint64_t j = v35 - 1; ; --j)
        {
          memcpy(v126, (const void *)(v34 + v45), 0x101uLL);
          if (BYTE2(v126[21]) == 1)
          {
            if (BYTE4(v126[21]) == 1)
            {
              sub_100081480((uint64_t)v126);
              swift_bridgeObjectRelease();
            }
            else
            {
              char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
              sub_100081480((uint64_t)v126);
              swift_bridgeObjectRelease();
              if ((v47 & 1) == 0)
              {
                sub_10008150C((uint64_t)v126);
                if (j) {
                  goto LABEL_48;
                }
LABEL_50:
                swift_bridgeObjectRelease();
                uint64_t v52 = _swiftEmptyArrayStorage;
                uint64_t v53 = 32;
                while (2)
                {
                  memcpy(v126, (const void *)(v34 + v53), 0x101uLL);
                  if (BYTE2(v126[21]) == 1 && BYTE1(v126[13]) != 1)
                  {
                    if ((v126[21] & 0x100000000) != 0)
                    {
                      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      sub_100081480((uint64_t)v126);
                      swift_bridgeObjectRelease();
                      if ((v54 & 1) == 0)
                      {
                        sub_10008150C((uint64_t)v126);
                        goto LABEL_62;
                      }
                    }
                    else
                    {
                      sub_100081480((uint64_t)v126);
                      swift_bridgeObjectRelease();
                    }
                    uint64_t v55 = v52;
                    char v56 = swift_isUniquelyReferenced_nonNull_native();
                    v127 = v52;
                    if ((v56 & 1) == 0)
                    {
                      sub_10013A718(0, v52[2] + 1, 1);
                      uint64_t v55 = v127;
                    }
                    unint64_t v58 = v55[2];
                    unint64_t v57 = v55[3];
                    if (v58 >= v57 >> 1)
                    {
                      sub_10013A718(v57 > 1, v58 + 1, 1);
                      uint64_t v55 = v127;
                    }
                    v55[2] = v58 + 1;
                    uint64_t v52 = v55;
                    memcpy(&v55[33 * v58 + 4], v126, 0x101uLL);
                  }
LABEL_62:
                  if (!v36)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v59 = v52;
                    uint64_t v60 = v123;
                    goto LABEL_66;
                  }
                  --v36;
                  v53 += 264;
                  continue;
                }
              }
            }
            uint64_t v48 = v44;
            char v49 = swift_isUniquelyReferenced_nonNull_native();
            v127 = v44;
            if ((v49 & 1) == 0)
            {
              sub_10013A718(0, v44[2] + 1, 1);
              uint64_t v48 = v127;
            }
            unint64_t v51 = v48[2];
            unint64_t v50 = v48[3];
            if (v51 >= v50 >> 1)
            {
              sub_10013A718(v50 > 1, v51 + 1, 1);
              uint64_t v48 = v127;
            }
            v48[2] = v51 + 1;
            uint64_t v44 = v48;
            memcpy(&v48[33 * v51 + 4], v126, 0x101uLL);
          }
          if (!j) {
            goto LABEL_50;
          }
LABEL_48:
          v45 += 264;
        }
      }
      v37 += 264;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v60 = _swiftEmptyArrayStorage;
  uint64_t v59 = _swiftEmptyArrayStorage;
LABEL_66:
  uint64_t v61 = v60[2];
  uint64_t v118 = v59;
  uint64_t v120 = v44;
  if (!v61)
  {
    swift_release();
    char v63 = _swiftEmptyArrayStorage;
    v125 = _swiftEmptyArrayStorage;
    goto LABEL_102;
  }
  uint64_t v123 = v60;
  uint64_t v124 = v60 + 4;
  swift_retain();
  uint64_t v62 = 0;
  char v63 = _swiftEmptyArrayStorage;
  v125 = _swiftEmptyArrayStorage;
  do
  {
    memcpy(v126, &v124[33 * v62], 0x101uLL);
    uint64_t v64 = v126[11];
    uint64_t v65 = v126[12];
    uint64_t v66 = v63[2];
    if (!v66) {
      goto LABEL_78;
    }
    BOOL v67 = v63[4] == v126[11] && v63[5] == v126[12];
    if (v67 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_70;
    }
    if (v66 == 1) {
      goto LABEL_78;
    }
    if (v63[6] == v64 && v63[7] == v65 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_70;
    }
    if (v66 == 2)
    {
LABEL_78:
      sub_100081480((uint64_t)v126);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v125 = sub_100139D50(0, v125[2] + 1, 1, v125);
      }
      unint64_t v69 = v125[2];
      unint64_t v68 = v125[3];
      if (v69 >= v68 >> 1) {
        v125 = sub_100139D50((void *)(v68 > 1), v69 + 1, 1, v125);
      }
      uint64_t v70 = v125;
      v125[2] = v69 + 1;
      memcpy(&v70[33 * v69 + 4], v126, 0x101uLL);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v63 = sub_1001393C4(0, v63[2] + 1, 1, v63);
      }
      unint64_t v72 = v63[2];
      unint64_t v71 = v63[3];
      if (v72 >= v71 >> 1) {
        char v63 = sub_1001393C4((void *)(v71 > 1), v72 + 1, 1, v63);
      }
      v63[2] = v72 + 1;
      unint64_t v73 = &v63[2 * v72];
      v73[4] = v64;
      v73[5] = v65;
    }
    else
    {
      uint64_t v74 = v63 + 9;
      uint64_t v75 = 2;
      uint64_t v122 = v61;
      while (1)
      {
        os_log_type_t v76 = v63;
        uint64_t v77 = v75 + 1;
        if (__OFADD__(v75, 1)) {
          goto LABEL_180;
        }
        BOOL v78 = *(v74 - 1) == v64 && *v74 == v65;
        if (v78 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v74 += 2;
        ++v75;
        BOOL v67 = v77 == v66;
        char v63 = v76;
        uint64_t v61 = v122;
        if (v67) {
          goto LABEL_78;
        }
      }
      char v63 = v76;
      uint64_t v61 = v122;
    }
LABEL_70:
    ++v62;
  }
  while (v62 != v61);
  swift_release_n();
  uint64_t v59 = v118;
  uint64_t v44 = v120;
LABEL_102:
  uint64_t v122 = v44[2];
  uint64_t v123 = v63;
  if (v122)
  {
    v121 = v44 + 4;
    swift_retain();
    uint64_t v79 = 0;
    uint64_t v80 = _swiftEmptyArrayStorage;
    uint64_t v124 = _swiftEmptyArrayStorage;
    while (1)
    {
      memcpy(v126, &v121[33 * v79], 0x101uLL);
      uint64_t v81 = v126[11];
      uint64_t v82 = v126[12];
      uint64_t v83 = v80[2];
      uint64_t v84 = v80;
      if (!v83) {
        goto LABEL_112;
      }
      BOOL v85 = v80[4] == v126[11] && v80[5] == v126[12];
      if (!v85 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v83 == 1) {
          goto LABEL_112;
        }
        if ((v80[6] != v81 || v80[7] != v82) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
      }
LABEL_104:
      if (++v79 == v122)
      {
        swift_release_n();
        uint64_t v59 = v118;
        goto LABEL_137;
      }
    }
    if (v83 != 2)
    {
      uint64_t v92 = v80 + 9;
      uint64_t v93 = 2;
      while (1)
      {
        uint64_t v94 = v93 + 1;
        if (__OFADD__(v93, 1)) {
          goto LABEL_181;
        }
        BOOL v95 = *(v92 - 1) == v81 && *v92 == v82;
        if (v95 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v92 += 2;
        ++v93;
        if (v94 == v83) {
          goto LABEL_112;
        }
      }
      uint64_t v80 = v84;
      goto LABEL_104;
    }
LABEL_112:
    sub_100081480((uint64_t)v126);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v124 = sub_100139D50(0, v124[2] + 1, 1, v124);
    }
    uint64_t v80 = v84;
    unint64_t v87 = v124[2];
    unint64_t v86 = v124[3];
    if (v87 >= v86 >> 1) {
      uint64_t v124 = sub_100139D50((void *)(v86 > 1), v87 + 1, 1, v124);
    }
    uint64_t v88 = v124;
    v124[2] = v87 + 1;
    memcpy(&v88[33 * v87 + 4], v126, 0x101uLL);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v80 = sub_1001393C4(0, v84[2] + 1, 1, v84);
    }
    unint64_t v90 = v80[2];
    unint64_t v89 = v80[3];
    if (v90 >= v89 >> 1) {
      uint64_t v80 = sub_1001393C4((void *)(v89 > 1), v90 + 1, 1, v80);
    }
    v80[2] = v90 + 1;
    uint64_t v91 = &v80[2 * v90];
    v91[4] = v81;
    v91[5] = v82;
    goto LABEL_104;
  }
  swift_release();
  uint64_t v80 = _swiftEmptyArrayStorage;
  uint64_t v124 = _swiftEmptyArrayStorage;
LABEL_137:
  uint64_t v122 = v59[2];
  if (!v122)
  {
    swift_release();
LABEL_173:
    v126[0] = _swiftEmptyArrayStorage;
    uint64_t v112 = swift_bridgeObjectRetain();
    sub_100040504(v112);
    uint64_t v113 = swift_bridgeObjectRetain();
    sub_100040504(v113);
    uint64_t v114 = swift_bridgeObjectRetain();
    sub_100040504(v114);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v120 = v80;
  v121 = v59 + 4;
  swift_retain();
  uint64_t v96 = 0;
  uint64_t v97 = _swiftEmptyArrayStorage;
  uint64_t v98 = _swiftEmptyArrayStorage;
  while (2)
  {
    memcpy(v126, &v121[33 * v96], 0x101uLL);
    uint64_t v100 = v126[11];
    uint64_t v99 = v126[12];
    uint64_t v101 = v97[2];
    if (!v101) {
      goto LABEL_147;
    }
    BOOL v102 = v97[4] == v126[11] && v97[5] == v126[12];
    if (v102 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_139;
    }
    if (v101 == 1) {
      goto LABEL_147;
    }
    if (v97[6] == v100 && v97[7] == v99 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_139:
      if (++v96 == v122)
      {
        swift_release_n();
        goto LABEL_173;
      }
      continue;
    }
    break;
  }
  if (v101 == 2)
  {
LABEL_147:
    sub_100081480((uint64_t)v126);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v98 = sub_100139D50(0, v98[2] + 1, 1, v98);
    }
    unint64_t v104 = v98[2];
    unint64_t v103 = v98[3];
    if (v104 >= v103 >> 1) {
      uint64_t v98 = sub_100139D50((void *)(v103 > 1), v104 + 1, 1, v98);
    }
    v98[2] = v104 + 1;
    memcpy(&v98[33 * v104 + 4], v126, 0x101uLL);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v97 = sub_1001393C4(0, v97[2] + 1, 1, v97);
    }
    unint64_t v106 = v97[2];
    unint64_t v105 = v97[3];
    if (v106 >= v105 >> 1) {
      uint64_t v97 = sub_1001393C4((void *)(v105 > 1), v106 + 1, 1, v97);
    }
    v97[2] = v106 + 1;
    uint64_t v107 = &v97[2 * v106];
    v107[4] = v100;
    v107[5] = v99;
    goto LABEL_139;
  }
  uint64_t v108 = v97 + 9;
  uint64_t v109 = 2;
  v117 = v98;
  while (1)
  {
    uint64_t v110 = v109 + 1;
    if (__OFADD__(v109, 1)) {
      break;
    }
    BOOL v111 = *(v108 - 1) == v100 && *v108 == v99;
    if (v111 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v98 = v117;
      goto LABEL_139;
    }
    v108 += 2;
    ++v109;
    BOOL v67 = v110 == v101;
    uint64_t v98 = v117;
    if (v67) {
      goto LABEL_147;
    }
  }
LABEL_182:
  __break(1u);
}

id sub_1000BBC54()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PostbackDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PostbackDatabaseSession()
{
  return self;
}

void *sub_1000BBCAC(void *__src, uint64_t a2, uint64_t a3, void **a4)
{
  memcpy(__dst, __src, 0x101uLL);
  return sub_10008F91C(__dst, a4);
}

void *sub_1000BBCF0(void *__src)
{
  objc_super v2 = *(void ***)(v1 + 16);
  memcpy(v4, __src, 0x101uLL);
  return sub_10008F91C(v4, v2);
}

ValueMetadata *type metadata accessor for ImpressionDatabaseStore()
{
  return &type metadata for ImpressionDatabaseStore;
}

uint64_t sub_1000BBD48(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  if (sub_100006764((uint64_t)a1) > 17999) {
    return 1;
  }
  uint64_t v28 = v3;
  uint64_t v29 = v2;
  while (1)
  {
    uint64_t v9 = sub_100006764((uint64_t)a1);
    if (v9 <= 17400) {
      break;
    }
    if (v9 == 17401)
    {
      uint64_t v34 = sub_1000BC2F4;
      uint64_t v35 = 0;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v31 = 1107296256;
      id v32 = sub_1000399B4;
      id v33 = &unk_1001C81F8;
      unint64_t v13 = _Block_copy(&aBlock);
      swift_release();
      int v14 = sub_100006AE0((uint64_t)a1, 18000, v13);
      _Block_release(v13);
      if (!v14) {
        goto LABEL_14;
      }
    }
    else if (v9 != 18000)
    {
      goto LABEL_20;
    }
LABEL_5:
    if (sub_100006764((uint64_t)a1) >= 18000) {
      return 1;
    }
  }
  if (v9)
  {
    if (v9 != 17400)
    {
LABEL_20:
      uint64_t v24 = Logger.impression.unsafeMutableAddressor();
      uint64_t v18 = v28;
      uint64_t v17 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v8, v24, v29);
      uint64_t v25 = a1;
      char v20 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134218240;
        uint64_t aBlock = sub_100006764((uint64_t)v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v27 + 12) = 2048;
        uint64_t aBlock = 18000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v20, v26, "Error: No database migration for %lld to %lld", (uint8_t *)v27, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        char v20 = v25;
      }
      goto LABEL_19;
    }
    uint64_t v34 = sub_1000BC310;
    uint64_t v35 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    id v32 = sub_1000399B4;
    id v33 = &unk_1001C8220;
    char v10 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v11 = (uint64_t)a1;
    uint64_t v12 = 17401;
  }
  else
  {
    uint64_t v34 = sub_1000BC314;
    uint64_t v35 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    id v32 = sub_1000399B4;
    id v33 = &unk_1001C8248;
    char v10 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v11 = (uint64_t)a1;
    uint64_t v12 = 17400;
  }
  char v15 = sub_100006AE0(v11, v12, v10);
  _Block_release(v10);
  if (v15) {
    goto LABEL_5;
  }
LABEL_14:
  uint64_t v16 = Logger.impression.unsafeMutableAddressor();
  uint64_t v18 = v28;
  uint64_t v17 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v6, v16, v29);
  uint64_t v19 = a1;
  char v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134218240;
    uint64_t aBlock = sub_100006764((uint64_t)v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v22 + 12) = 2048;
    uint64_t aBlock = 18000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Migration failed for current schema version: %lld while trying to migrate to %lld", (uint8_t *)v22, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    char v20 = v19;
  }
  uint64_t v8 = v6;
LABEL_19:

  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v17);
  return 0;
}

void sub_1000BC23C(uint64_t a1)
{
  id v2 = [(id)type metadata accessor for FrozenImpressionEntity() databaseTable];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  sub_1000BC750(v3, v5);
  swift_bridgeObjectRelease();
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v6);
}

uint64_t sub_1000BC2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000BC308()
{
  return swift_release();
}

uint64_t sub_1000BC318(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(153);
  v4._countAndFlagsBits = 0xD00000000000001BLL;
  v4._object = (void *)0x8000000100185720;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 665632;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7._object = (void *)0xED000064695F6E6FLL;
  v7._countAndFlagsBits = 0x6973736572706D69;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xA2C5458455420;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  v9._object = (void *)0x8000000100184CB0;
  v9._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x52454745544E4920;
  v10._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000012;
  v11._object = (void *)0x8000000100184760;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x52454745544E4920;
  v12._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x6F7774656E5F6461;
  v13._object = (void *)0xED000064695F6B72;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xA2C5458455420;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x6D617473656D6974;
  v15._object = (void *)0xE900000000000070;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x52454745544E4920;
  v16._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000010;
  v17._object = (void *)0x8000000100184CD0;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xA2C5458455420;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x5F746361706D6F63;
  v19._object = (void *)0xEB0000000073776ALL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xA2C5458455420;
  v20._object = (void *)0xE700000000000000;
  String.append(_:)(v20);
  v21._object = (void *)0x8000000100184CF0;
  v21._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v21);
  v22._object = (void *)0x8000000100185740;
  v22._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000012;
  v23._object = (void *)0x8000000100184760;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x6F7774656E5F6461;
  v25._object = (void *)0xED000064695F6B72;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xD000000000000018;
  v26._object = (void *)0x8000000100185760;
  String.append(_:)(v26);
  return 0;
}

void sub_1000BC624(uint64_t a1)
{
  id v2 = [(id)type metadata accessor for PendingImpressionEntity() databaseTable];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v5 = v4;

  sub_1000BC318(v3, v5);
  swift_bridgeObjectRelease();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v6);

  id v7 = [(id)type metadata accessor for ImpressionEntity() databaseTable];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v10 = v9;

  sub_1000BC318(v8, v10);
  swift_bridgeObjectRelease();
  id v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v11);
}

uint64_t sub_1000BC750(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(104);
  v4._countAndFlagsBits = 0xD00000000000001BLL;
  v4._object = (void *)0x8000000100185720;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 665632;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7._object = (void *)0x8000000100184DE0;
  v7._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xA2C424F4C4220;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0xD000000000000014;
  v9._object = (void *)0x8000000100184E00;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xA2C424F4C4220;
  v10._object = (void *)0xE700000000000000;
  String.append(_:)(v10);
  v11._object = (void *)0x8000000100184760;
  v11._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x52454745544E4920;
  v12._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x63616274736F6867;
  v13._object = (void *)0xEC00000064695F6BLL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x550A2C5458455420;
  v14._object = (void *)0xEE0028455551494ELL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x63616274736F6867;
  v15._object = (void *)0xEC00000064695F6BLL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD000000000000018;
  v16._object = (void *)0x8000000100185760;
  String.append(_:)(v16);
  return 0;
}

void sub_1000BC930(uint64_t a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x205445530ALL;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x6D6E6F7269766E65;
  v8._object = (void *)0xEB00000000746E65;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 656424224;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x69746375646F7270;
  v10._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0x2045524548570A27;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xD000000000000011;
  v12._object = (void *)0x8000000100184CB0;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x3B30203D2120;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v14);

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x205445530ALL;
  v16._object = (void *)0xE500000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6D6E6F7269766E65;
  v17._object = (void *)0xEB00000000746E65;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 656424224;
  v18._object = (void *)0xE400000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x6D706F6C65766564;
  v19._object = (void *)0xEB00000000746E65;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x2045524548570A27;
  v20._object = (void *)0xE800000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD000000000000011;
  v21._object = (void *)0x8000000100184CB0;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x3B30203D20;
  v22._object = (void *)0xE500000000000000;
  String.append(_:)(v22);
  id v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v23);
}

uint64_t sub_1000BCBD4(uint64_t a1)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  strcpy((char *)v31, "ALTER TABLE ");
  BYTE5(v31[1]) = 0;
  HIWORD(v31[1]) = -5120;
  id v2 = (void *)type metadata accessor for PendingImpressionEntity();
  id v3 = objc_msgSend(v2, "databaseTable", v31[0], v31[1]);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4C4F432044444120;
  v8._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x6D6E6F7269766E65;
  v9._object = (void *)0xEB00000000746E65;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3B5458455420;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v11);

  id v12 = [v2 databaseTable];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v15 = v14;

  sub_1000BC930(a1, v13, v15);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  strcpy((char *)v31, "ALTER TABLE ");
  BYTE5(v31[1]) = 0;
  HIWORD(v31[1]) = -5120;
  Swift::String v16 = (void *)type metadata accessor for ImpressionEntity();
  id v17 = objc_msgSend(v16, "databaseTable", v31[0], v31[1]);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v20 = v19;

  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x4C4F432044444120;
  v22._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6D6E6F7269766E65;
  v23._object = (void *)0xEB00000000746E65;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x3B5458455420;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v25);

  id v26 = [v16 databaseTable];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  sub_1000BC930(a1, v27, v29);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BCEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = Data.init(base64Encoded:options:)();
  if (v7 >> 60 != 15)
  {
    uint64_t v9 = v6;
    unint64_t v10 = v7;
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    id v12 = SecCertificateCreateWithData(0, isa);

    if (!v12)
    {
      sub_1000B2830();
      swift_allocError();
      *Swift::String v24 = 3;
      swift_willThrow();
LABEL_19:
      sub_10005E9FC(v9, v10);
      return a2;
    }
    uint64_t v13 = SecCertificateCopyKey(v12);
    if (v13)
    {
      unint64_t v42 = v12;
      id v12 = v13;
      CFDataRef v14 = SecKeyCopyExternalRepresentation(v13, 0);
      if (v14)
      {
        CFDataRef v15 = v14;
        unint64_t v40 = v12;
        uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v39 = v17;

        if (*(void *)(a3 + 16)
          && (unint64_t v18 = sub_1000AF1FC(0x746E656D656C65, 0xE700000000000000), (v19 & 1) != 0)
          && (sub_10003742C(*(void *)(a3 + 56) + 32 * v18, (uint64_t)v41), (swift_dynamicCast() & 1) != 0))
        {
          uint64_t v38 = Data.init(base64Encoded:options:)();
          unint64_t v21 = v20;
          swift_bridgeObjectRelease();
          if (v21 >> 60 != 15)
          {
            if (*(void *)(a3 + 16)
              && (unint64_t v30 = sub_1000AF1FC(0x666F6F7270, 0xE500000000000000), (v31 & 1) != 0)
              && (sub_10003742C(*(void *)(a3 + 56) + 32 * v30, (uint64_t)v41), (swift_dynamicCast() & 1) != 0))
            {
              uint64_t v37 = Data.init(base64Encoded:options:)();
              unint64_t v33 = v32;
              swift_bridgeObjectRelease();
              if (v33 >> 60 != 15)
              {
                uint64_t v36 = SKANUTClient.finalize(publicInput:evaluatedElement:proof:publicKey:)();
                if (!v3)
                {
                  a2 = v36;
                  sub_10005E9FC(v37, v33);
                  sub_10005E9FC(v38, v21);
                  sub_100020930(v16, v39);

                  sub_10005E9FC(v9, v10);
                  return a2;
                }
                sub_10005E9FC(v37, v33);
                sub_10005E9FC(v38, v21);
                uint64_t v26 = v16;
                unint64_t v27 = v39;
                goto LABEL_16;
              }
              sub_1000B2830();
              swift_allocError();
              char v35 = 9;
            }
            else
            {
              sub_1000B2830();
              swift_allocError();
              char v35 = 8;
            }
            *uint64_t v34 = v35;
            swift_willThrow();
            sub_10005E9FC(v38, v21);
LABEL_15:
            uint64_t v26 = v16;
            unint64_t v27 = v39;
LABEL_16:
            sub_100020930(v26, v27);

            goto LABEL_19;
          }
          sub_1000B2830();
          swift_allocError();
          char v23 = 7;
        }
        else
        {
          sub_1000B2830();
          swift_allocError();
          char v23 = 6;
        }
        *Swift::String v22 = v23;
        swift_willThrow();
        goto LABEL_15;
      }
      sub_1000B2830();
      swift_allocError();
      *uint64_t v28 = 5;
      swift_willThrow();
    }
    else
    {
      sub_1000B2830();
      swift_allocError();
      *NSString v25 = 4;
      swift_willThrow();
    }

    goto LABEL_19;
  }
  sub_1000B2830();
  swift_allocError();
  *Swift::String v8 = 2;
  swift_willThrow();
  return a2;
}

uint64_t sub_1000BD3CC()
{
  return type metadata accessor for PersistentTokenHandler();
}

uint64_t type metadata accessor for PersistentTokenHandler()
{
  uint64_t result = qword_1001E3170;
  if (!qword_1001E3170) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000BD420()
{
  uint64_t result = type metadata accessor for SKANUTClient();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

Swift::Int sub_1000BD4C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100012960(&qword_1001E3188);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v33 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    uint64_t v30 = v3;
    while (1)
    {
      Swift::String v5 = *(void **)(v32 + 8 * v4);
      Hasher.init(_seed:)();
      Swift::UInt v6 = v5[2];
      Hasher._combine(_:)(v6);
      uint64_t v7 = v5[2];
      if (v7)
      {
        swift_bridgeObjectRetain();
        Swift::String v8 = v5 + 5;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v8 += 2;
          --v7;
        }
        while (v7);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v33 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      uint64_t v15 = *(void *)(v3 + 48);
      if (((1 << v11) & v13) != 0) {
        break;
      }
LABEL_42:
      *(void *)(v33 + 8 * v12) = v14 | v13;
      *(void *)(v15 + 8 * v11) = v5;
      uint64_t v27 = *(void *)(v3 + 16);
      BOOL v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_50;
      }
      *(void *)(v3 + 16) = v29;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
    uint64_t v16 = ~v10;
    while (1)
    {
      unint64_t v17 = *(void **)(v15 + 8 * v11);
      if (v17[2] == v6)
      {
        if (!v6 || v17 == v5) {
          goto LABEL_3;
        }
        unint64_t v18 = v5[2];
        if (!v18) {
          goto LABEL_48;
        }
        Swift::Int result = v17[4];
        BOOL v19 = result == v5[4] && v17[5] == v5[5];
        if (v19 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          if (v6 == 1) {
            goto LABEL_3;
          }
          BOOL v20 = v18 >= 2;
          unint64_t v21 = v18 - 2;
          if (!v20) {
            goto LABEL_49;
          }
          Swift::Int result = v17[6];
          if (result == v5[6] && v17[7] == v5[7]) {
            break;
          }
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            break;
          }
        }
      }
LABEL_12:
      unint64_t v11 = (v11 + 1) & v16;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v33 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if ((v13 & (1 << v11)) == 0)
      {
        uint64_t v3 = v30;
        uint64_t v1 = v31;
        uint64_t v15 = *(void *)(v30 + 48);
        goto LABEL_42;
      }
    }
    if (v6 == 2)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      uint64_t v3 = v30;
      uint64_t v1 = v31;
      goto LABEL_4;
    }
    char v23 = v17 + 9;
    NSString v25 = v5 + 9;
    Swift::UInt v24 = v6 - 2;
    while (v24)
    {
      if (!v21) {
        goto LABEL_47;
      }
      Swift::Int result = *(v23 - 1);
      if (result != *(v25 - 1) || *v23 != *v25)
      {
        Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          goto LABEL_12;
        }
      }
      --v21;
      v25 += 2;
      v23 += 2;
      if (!--v24) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  else
  {
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_1000BD760(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100012960(&qword_1001E3198);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    uint64_t v7 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      uint64_t v8 = *(void *)(v6 + 8 * v4);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v10 = result & v7;
      unint64_t v11 = (result & (unint64_t)v7) >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * v11);
      uint64_t v13 = 1 << (result & v7);
      uint64_t v14 = *(void *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(void *)(v14 + 8 * v10) != v8)
        {
          unint64_t v10 = (v10 + 1) & v7;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v11) = v13 | v12;
        *(void *)(v14 + 8 * v10) = v8;
        uint64_t v15 = *(void *)(v3 + 16);
        BOOL v16 = __OFADD__(v15, 1);
        uint64_t v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v17;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

void *sub_1000BD870(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100012960(&qword_1001E1310);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    char v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_100029C94(&qword_1001E1300);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_100029C94(&qword_1001E1308);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          Swift::UInt v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        NSString v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

unint64_t sub_1000BDB60()
{
  uint64_t v0 = sub_100012960(&qword_1001E12F0);
  __chkstk_darwin(v0 - 8);
  unint64_t v39 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Calendar();
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DateComponents();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v34 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v34 - v11;
  Date.init()();
  sub_100012960(&qword_1001E12F8);
  uint64_t v13 = type metadata accessor for Calendar.Component();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100178B50;
  unint64_t v18 = v17 + v16;
  unint64_t v19 = *(void (**)(unint64_t, void, uint64_t))(v14 + 104);
  v19(v18, enum case for Calendar.Component.year(_:), v13);
  v19(v18 + v15, enum case for Calendar.Component.month(_:), v13);
  v19(v18 + 2 * v15, enum case for Calendar.Component.day(_:), v13);
  sub_1000BD870(v17);
  swift_setDeallocating();
  uint64_t v20 = v12;
  uint64_t v21 = v35;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  static Calendar.current.getter();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = v38;
  char v23 = *(void (**)(char *, uint64_t))(v37 + 8);
  v23(v4, v38);
  static Calendar.current.getter();
  uint64_t v24 = (uint64_t)v39;
  Calendar.date(from:)();
  NSString v25 = v4;
  uint64_t v26 = v24;
  v23(v25, v22);
  uint64_t v27 = v36;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v24, 1, v36) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v41);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v27);
    sub_100029C34(v24);
    return 0;
  }
  uint64_t v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v34, v26, v27);
  Date.timeIntervalSince1970.getter();
  double v31 = v30;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v21 + 8);
  v32(v29, v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v41);
  unint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v20, v27);
  double v33 = v31 * 1000.0;
  if ((~COERCE__INT64(v31 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v33 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v33 < 1.84467441e19) {
    return (unint64_t)v33;
  }
LABEL_9:
  __break(1u);
  return result;
}

void *sub_1000BE064(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100012960(&qword_1001E3180);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      unint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t destroy for BlindedData()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for BlindedData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BlindedData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

void *assignWithTake for BlindedData(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for BlindedData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlindedData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlindedData()
{
  return &type metadata for BlindedData;
}

uint64_t getEnumTagSinglePayload for TokenHandlerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TokenHandlerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BE5DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenHandlerError()
{
  return &type metadata for TokenHandlerError;
}

unint64_t sub_1000BE614(uint64_t a1)
{
  unint64_t result = sub_1000B2830();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000BE640()
{
  unint64_t result = qword_1001E3190;
  if (!qword_1001E3190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3190);
  }
  return result;
}

Swift::Int sub_1000BE694(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100012960(&qword_1001E1340);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v24 = v1;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      int v6 = *(unsigned __int8 *)(v25 + v4);
      Hasher.init(_seed:)();
      if (v6) {
        uint64_t v7 = 0x69746375646F7270;
      }
      else {
        uint64_t v7 = 0x6D706F6C65766564;
      }
      if (v6) {
        unint64_t v8 = 0xEA00000000006E6FLL;
      }
      else {
        unint64_t v8 = 0xEB00000000746E65;
      }
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        char v23 = v6;
        uint64_t v15 = ~v10;
        do
        {
          if (*(unsigned char *)(*(void *)(v3 + 48) + v11)) {
            uint64_t v16 = 0x69746375646F7270;
          }
          else {
            uint64_t v16 = 0x6D706F6C65766564;
          }
          if (*(unsigned char *)(*(void *)(v3 + 48) + v11)) {
            unint64_t v17 = 0xEA00000000006E6FLL;
          }
          else {
            unint64_t v17 = 0xEB00000000746E65;
          }
          if (v16 == v7 && v17 == v8)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_4;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          Swift::Int result = swift_bridgeObjectRelease();
          if (v19) {
            goto LABEL_4;
          }
          unint64_t v11 = (v11 + 1) & v15;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
        }
        while ((v13 & (1 << v11)) != 0);
        LOBYTE(v6) = v23;
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(unsigned char *)(*(void *)(v3 + 48) + v11) = v6;
      uint64_t v20 = *(void *)(v3 + 16);
      BOOL v21 = __OFADD__(v20, 1);
      uint64_t v22 = v20 + 1;
      if (v21) {
        break;
      }
      *(void *)(v3 + 16) = v22;
LABEL_4:
      if (++v4 == v24) {
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return result;
}

id sub_1000BEA48()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDistributorMetadataEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppDistributorMetadataEntity()
{
  return self;
}

unint64_t sub_1000BEAA4()
{
  unint64_t result = qword_1001E31C8;
  if (!qword_1001E31C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E31C8);
  }
  return result;
}

uint64_t sub_1000BEAF8(char *a1, char *a2)
{
  return sub_100106650(*a1, *a2);
}

Swift::Int sub_1000BEB04()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BEB98()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000BEC18()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BECA8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1D58, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1000BED08(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x736F506863746566;
  if (*v1) {
    unint64_t v2 = 0xD000000000000014;
  }
  unint64_t v3 = 0x80000001001852F0;
  if (!*v1) {
    unint64_t v3 = 0xED00006B63616274;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000BED58()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000BEDB8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000BEE08(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = a7;
  *(void *)(v8 + 176) = a8;
  *(void *)(v8 + 152) = a5;
  *(void *)(v8 + 160) = a6;
  *(void *)(v8 + 136) = a2;
  *(void *)(v8 + 144) = a4;
  *(unsigned char *)(v8 + 334) = a3;
  *(void *)(v8 + 128) = a1;
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v8 + 184) = v9;
  *(void *)(v8 + 192) = *(void *)(v9 - 8);
  *(void *)(v8 + 200) = swift_task_alloc();
  return _swift_task_switch(sub_1000BEED8, 0, 0);
}

uint64_t sub_1000BEED8()
{
  uint64_t v1 = (void *)v0[22];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = swift_allocObject();
  v0[26] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v11 = (char *)&dword_1001E49D8 + dword_1001E49D8;
  swift_bridgeObjectRetain();
  id v5 = v1;
  swift_bridgeObjectRetain();
  int v6 = (void *)swift_task_alloc();
  v0[27] = v6;
  *int v6 = v0;
  v6[1] = sub_1000BEFF8;
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[20];
  return ((uint64_t (*)(void *, double (*)@<D0>(void *@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, uint64_t))v11)(v0 + 2, sub_1000C0B10, v4, v9, v7, v8);
}

uint64_t sub_1000BEFF8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void **)(v2 + 176);
    swift_release();
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    id v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(void **)(v2 + 176);
    swift_release();
    swift_bridgeObjectRelease();

    return _swift_task_switch(sub_1000BF16C, 0, 0);
  }
}

uint64_t sub_1000BF16C()
{
  sub_1000C0B40(v0 + 16, v0 + 72);
  uint64_t v1 = *(void *)(v0 + 96);
  if (!v1)
  {
    swift_bridgeObjectRetain();
    static Date.now.getter();
    uint64_t result = Date.timeIntervalSince1970.getter();
    double v12 = v11 * 1000.0;
    if ((~*(void *)&v12 & 0x7FF0000000000000) != 0)
    {
      if (v12 > -1.0)
      {
        if (v12 < 1.84467441e19)
        {
          uint64_t v40 = *(void **)(v0 + 176);
          uint64_t v14 = *(void *)(v0 + 128);
          uint64_t v13 = *(void *)(v0 + 136);
          char v15 = *(unsigned char *)(v0 + 334) & 1;
          unint64_t v16 = (unint64_t)v12;
          (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
          *(unsigned char *)(v0 + 312) = 1;
          uint64_t v17 = swift_allocObject();
          *(void *)(v0 + 280) = v17;
          *(void *)(v17 + 16) = 0;
          *(unsigned char *)(v17 + 24) = *(unsigned char *)(v0 + 312);
          *(_DWORD *)(v17 + 25) = *(_DWORD *)(v0 + 327);
          *(_DWORD *)(v17 + 28) = *(_DWORD *)(v0 + 330);
          *(void *)(v17 + 32) = v14;
          *(void *)(v17 + 40) = v13;
          *(unsigned char *)(v17 + 48) = v15;
          *(_DWORD *)(v17 + 49) = *(_DWORD *)(v0 + 305);
          *(_DWORD *)(v17 + 52) = *(_DWORD *)(v0 + 308);
          uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4860
                                                                                             + dword_1001E4860);
          *(void *)(v17 + 56) = 1;
          *(void *)(v17 + 64) = v16;
          swift_bridgeObjectRetain();
          id v18 = v40;
          char v19 = (void *)swift_task_alloc();
          *(void *)(v0 + 288) = v19;
          *char v19 = v0;
          v19[1] = sub_1000BFD04;
          uint64_t v20 = *(void *)(v0 + 168);
          uint64_t v21 = *(void *)(v0 + 176);
          uint64_t v22 = *(void *)(v0 + 160);
          char v23 = sub_1000C0E74;
          uint64_t v24 = v17;
          uint64_t v25 = v37;
LABEL_33:
          return v25((uint64_t)v25, (uint64_t)v23, v24, v22, v20, v21);
        }
LABEL_45:
        __break(1u);
        return result;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v2 = *(void *)(v0 + 72);
  char v39 = *(unsigned char *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 112);
  if (*(unsigned char *)(v0 + 334)) {
    unint64_t v5 = 0xD000000000000014;
  }
  else {
    unint64_t v5 = 0x736F506863746566;
  }
  if (*(unsigned char *)(v0 + 334)) {
    unint64_t v6 = 0x80000001001852F0;
  }
  else {
    unint64_t v6 = 0xED00006B63616274;
  }
  int v7 = *(unsigned char *)(v0 + 104) & 1;
  if (*(unsigned char *)(v0 + 104)) {
    unint64_t v8 = 0xD000000000000014;
  }
  else {
    unint64_t v8 = 0x736F506863746566;
  }
  if (*(unsigned char *)(v0 + 104)) {
    unint64_t v9 = 0x80000001001852F0;
  }
  else {
    unint64_t v9 = 0xED00006B63616274;
  }
  if (v5 == v8 && v6 == v9)
  {
    uint64_t result = swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v26)
  {
LABEL_22:
    uint64_t v27 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
    }
    else
    {
      static Date.now.getter();
      uint64_t result = Date.timeIntervalSince1970.getter();
      double v29 = v28 * 1000.0;
      if ((~COERCE__INT64(v28 * 1000.0) & 0x7FF0000000000000) != 0)
      {
        if (v29 > -1.0)
        {
          if (v29 < 1.84467441e19)
          {
            (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
            uint64_t v30 = 10;
            if (!v7) {
              uint64_t v30 = 3;
            }
            if (v30 < v27)
            {
              uint64_t v31 = *(int **)(v0 + 144);
              sub_1000B74C4(v0 + 16);
              uint64_t v41 = (uint64_t (*)(void))((char *)v31 + *v31);
              uint64_t v32 = (void *)swift_task_alloc();
              *(void *)(v0 + 248) = v32;
              *uint64_t v32 = v0;
              v32[1] = sub_1000BF874;
              return v41();
            }
            uint64_t v38 = *(void **)(v0 + 176);
            *(unsigned char *)(v0 + 304) = v39 & 1;
            uint64_t v33 = swift_allocObject();
            *(void *)(v0 + 224) = v33;
            *(void *)(v33 + 16) = v2;
            *(unsigned char *)(v33 + 24) = *(unsigned char *)(v0 + 304);
            *(_DWORD *)(v33 + 25) = *(_DWORD *)(v0 + 313);
            *(_DWORD *)(v33 + 28) = *(_DWORD *)(v0 + 316);
            *(void *)(v33 + 32) = v3;
            *(void *)(v33 + 40) = v1;
            *(unsigned char *)(v33 + 48) = v7;
            *(_DWORD *)(v33 + 49) = *(_DWORD *)(v0 + 320);
            *(_DWORD *)(v33 + 52) = *(_DWORD *)(v0 + 323);
            unint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4860
                                                                                               + dword_1001E4860);
            *(void *)(v33 + 56) = v27;
            *(void *)(v33 + 64) = (unint64_t)v29;
            swift_bridgeObjectRetain();
            id v34 = v38;
            uint64_t v35 = (void *)swift_task_alloc();
            *(void *)(v0 + 232) = v35;
            *uint64_t v35 = v0;
            v35[1] = sub_1000BF70C;
            uint64_t v20 = *(void *)(v0 + 168);
            uint64_t v21 = *(void *)(v0 + 176);
            uint64_t v22 = *(void *)(v0 + 160);
            char v23 = sub_1000C0C34;
            uint64_t v24 = v33;
            uint64_t v25 = v42;
            goto LABEL_33;
          }
          goto LABEL_42;
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
  sub_1000B74C4(v0 + 16);
  sub_1000C0BA8();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_1000BF70C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 176);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000BFED4;
  }
  else {
    uint64_t v4 = sub_1000C0E8C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000BF874()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1000BF9C0, 0, 0);
  }
}

uint64_t sub_1000BF9C0()
{
  uint64_t v1 = (void *)v0[22];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = swift_allocObject();
  v0[32] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  double v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4860
                                                                                     + dword_1001E4860);
  swift_bridgeObjectRetain();
  id v5 = v1;
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[33] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000BFAD0;
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[20];
  return v11((uint64_t)v11, (uint64_t)sub_1000C0C50, v4, v9, v7, v8);
}

uint64_t sub_1000BFAD0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 176);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000BFCA0;
  }
  else {
    uint64_t v4 = sub_1000BFC38;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000BFC38()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(1);
}

uint64_t sub_1000BFCA0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BFD04()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 176);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000BFF38;
  }
  else {
    uint64_t v4 = sub_1000BFE6C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000BFE6C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1000BFED4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BFF38()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000BFF9C(void *a1, uint64_t a2)
{
  id v4 = [a1 connection];
  id v5 = sub_1000220AC(a2, v4);

  if (!v2) {
}
  }

uint64_t sub_1000C0008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[21] = a4;
  v5[22] = a5;
  v5[19] = a2;
  v5[20] = a3;
  v5[18] = a1;
  return _swift_task_switch(sub_1000C0030, 0, 0);
}

uint64_t sub_1000C0030()
{
  uint64_t v1 = (void *)v0[22];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = swift_allocObject();
  v0[23] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  double v11 = (char *)&dword_1001E49D8 + dword_1001E49D8;
  swift_bridgeObjectRetain();
  id v5 = v1;
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000C0150;
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[20];
  return ((uint64_t (*)(void *, double (*)@<D0>(void *@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, uint64_t))v11)(v0 + 9, sub_1000C0CD4, v4, v9, v7, v8);
}

uint64_t sub_1000C0150()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000C0354;
  }
  else {
    uint64_t v3 = sub_1000C02BC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000C02BC()
{
  sub_1000C0B40((uint64_t)(v0 + 9), (uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  if (v1)
  {
    uint64_t v2 = v0[7];
    sub_1000B74C4((uint64_t)(v0 + 9));
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (uint64_t (*)(uint64_t, BOOL))v0[1];
  return v3(v2, v1 == 0);
}

uint64_t sub_1000C0354()
{
  uint64_t v13 = v0;
  if (qword_1001E08F0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E5FF8);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[19];
  if (v4)
  {
    uint64_t v11 = v0[18];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_bridgeObjectRetain();
    v0[16] = sub_100147668(v11, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error retrieiving retry count for identifier: %s, error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (uint64_t (*)(void, uint64_t))v0[1];
  return v9(0, 1);
}

double sub_1000C0610@<D0>(void *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  id v6 = [a1 connection];
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v9 = [self predicateWithProperty:v7 equalToValue:v8];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v10 = sub_10011BF2C(v6, v9, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  v15[2] = &v16;
  sub_10012737C(a2, (uint64_t)v15, v10);

  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v19;
    double result = *(double *)&v16;
    long long v13 = v17;
    long long v14 = v18;
    *(_OWORD *)a3 = v16;
    *(_OWORD *)(a3 + 16) = v13;
    *(_OWORD *)(a3 + 32) = v14;
    *(void *)(a3 + 48) = v12;
  }
  return result;
}

void sub_1000C07A8(void *a1)
{
  id v1 = [a1 connection];
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v4 = [self predicateWithProperty:v2 equalToValue:v3];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v5 = sub_10011BF2C(v1, v4, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v5 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

unsigned char *storeEnumTagSinglePayload for RetryCountManager.Group(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C09F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RetryCountManager.Group()
{
  return &type metadata for RetryCountManager.Group;
}

unint64_t sub_1000C0A30()
{
  unint64_t result = qword_1001E31E8;
  if (!qword_1001E31E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E31E8);
  }
  return result;
}

unint64_t sub_1000C0A84()
{
  unint64_t result = qword_1001E31F0;
  if (!qword_1001E31F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E31F0);
  }
  return result;
}

uint64_t sub_1000C0AD8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

double sub_1000C0B10@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C0610(a1, (uint64_t)sub_1000C0CCC, a2);
}

uint64_t sub_1000C0B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E3200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000C0BA8()
{
  unint64_t result = qword_1001E3208;
  if (!qword_1001E3208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E3208);
  }
  return result;
}

uint64_t sub_1000C0BFC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1000C0C34(void *a1)
{
  sub_1000BFF9C(a1, v1 + 16);
}

void sub_1000C0C50(void *a1)
{
}

uint64_t sub_1000C0C6C(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 32);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = v7;
  *(void *)(a4 + 24) = v6;
  *(void *)(a4 + 32) = v8;
  *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = 1;
  return result;
}

uint64_t sub_1000C0CCC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_1000C0C6C(a1, a2, a3, *(void *)(v3 + 16));
}

double sub_1000C0CD4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C0610(a1, (uint64_t)sub_1000C0E90, a2);
}

unsigned char *storeEnumTagSinglePayload for RetryCountManagerError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000C0DA0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RetryCountManagerError()
{
  return &type metadata for RetryCountManagerError;
}

ValueMetadata *type metadata accessor for RetryCountManager()
{
  return &type metadata for RetryCountManager;
}

unint64_t sub_1000C0DE8(uint64_t a1)
{
  unint64_t result = sub_1000C0BA8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C0E14()
{
  unint64_t result = qword_1001E3218;
  if (!qword_1001E3218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3218);
  }
  return result;
}

void sub_1000C0E74(void *a1)
{
}

void sub_1000C0E94(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [v1 connection];
  NSString v8 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v9 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v10 = [self predicateWithProperty:v8 equalToValue:v9];
  swift_unknownObjectRelease();

  id v11 = sub_10011C87C(v7, v10, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v11 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    v12[1] = 8;
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_1000C1098()
{
  sub_100012960((uint64_t *)&unk_1001E3250);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B50;
  NSString v1 = String._bridgeToObjectiveC()();
  uint64_t v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v3 = self;
  id v4 = [v3 predicateWithProperty:v1 equalToValue:v2];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  id v6 = [v3 predicateWithProperty:v5 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v6;
  id v7 = self;
  NSString v8 = String._bridgeToObjectiveC()();
  type metadata accessor for UUID();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v10 = [v7 doesNotContainPredicateWithProperty:v8 values:isa];

  *(void *)(inited + 48) = v10;
  specialized Array._endMutation()();
  id v11 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v12 = [v15 connection];
  id v13 = v11;
  id v14 = sub_10011C894(v12, v11, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v14 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_1000C13A0()
{
  id v1 = [v0 connection];
  Date.timeIntervalSince1970.getter();
  double v3 = v2 * 1000.0;
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return;
  }
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v6 = [self predicateWithProperty:v4 value:v5 comparisonType:4];
  swift_unknownObjectRelease();

  id v7 = sub_10011C87C(v1, v6, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v7 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_1000C155C()
{
  id v1 = v0;
  sub_100012960((uint64_t *)&unk_1001E3250);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  Date.timeIntervalSince1970.getter();
  double v4 = v3 * 1000.0;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return;
  }
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = self;
  id v8 = [v7 predicateWithProperty:v5 value:v6 comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v8;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  id v10 = [v7 predicateWithProperty:v9 equalToValue:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v10;
  specialized Array._endMutation()();
  id v11 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v12 = [v1 connection];
  id v13 = v11;
  id v14 = sub_10011C894(v12, v11, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v14 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_1000C1830()
{
  id v1 = [v0 connection];
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v4 = [self predicateWithProperty:v2 equalToValue:v3];
  swift_unknownObjectRelease();

  id v5 = sub_10011DBB0(v1, v4, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v5 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for ImpressionDatabaseTransaction()
{
  return self;
}

id sub_1000C1A84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCBridge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for XPCBridge()
{
  return self;
}

uint64_t sub_1000C1ADC()
{
  swift_errorRetain();
  sub_100012960(&qword_1001E12E8);
  if (swift_dynamicCast()) {
    return v1;
  }
  swift_errorRetain();
  if ((swift_dynamicCast() & 1) != 0 && v1 == 4) {
    return 6;
  }
  swift_errorRetain();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (v1 == 2) {
    return 7;
  }
  return 8 * (v1 == 3);
}

uint64_t sub_1000C1BD4(uint8_t *a1, uint8_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void (**a9)(void, void))
{
  uint64_t v49 = a7;
  unint64_t v50 = a8;
  uint64_t v48 = a6;
  uint64_t v43 = a5;
  uint64_t v44 = a4;
  int v47 = a3;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v9 = sub_100012960(&qword_1001E3288);
  __chkstk_darwin(v9);
  id v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v16 - 8);
  long long v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a9;
  uint64_t v20 = self;
  _Block_copy(a9);
  id v21 = [v20 currentConnection];
  if (v21)
  {
    uint64_t v22 = v21;
    [v21 auditToken];
    sub_100086E14(v53[0], v53[1], v53[2], v53[3], (uint64_t)v54);

    sub_1000C21C0(v43, (uint64_t)v18);
    sub_100019C70(v44, (uint64_t)v53);
    sub_1000862D4((uint64_t)v54, (uint64_t)v51);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = 0;
    *(void *)(v23 + 24) = 0;
    uint64_t v24 = v46;
    *(void *)(v23 + 32) = v45;
    *(void *)(v23 + 40) = v24;
    *(unsigned char *)(v23 + 48) = v47;
    uint64_t v25 = v49;
    *(void *)(v23 + 56) = v48;
    *(void *)(v23 + 64) = v25;
    memcpy((void *)(v23 + 72), v53, 0x1C8uLL);
    long long v26 = v51[1];
    *(_OWORD *)(v23 + 528) = v51[0];
    *(_OWORD *)(v23 + 544) = v26;
    *(void *)(v23 + 560) = v52;
    uint64_t v27 = v50;
    *(void *)(v23 + 568) = v50;
    *(void *)(v23 + 576) = sub_10006C590;
    *(void *)(v23 + 584) = v19;
    swift_retain();
    id v28 = v27;
    swift_retain();
    sub_100017E98((uint64_t)v18, (uint64_t)&unk_1001E3298, v23);
    swift_release();
    sub_100086398((uint64_t)v54);
  }
  else
  {
    uint64_t v49 = v19;
    unint64_t v50 = (void *)v9;
    sub_1000C210C();
    swift_allocError();
    swift_willThrow();
    uint64_t v29 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29, v12);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc();
      int v47 = v32;
      id v34 = (uint8_t *)v33;
      uint64_t v35 = (void *)swift_slowAlloc();
      uint64_t v48 = v13;
      *(_DWORD *)id v34 = 138412290;
      uint64_t v45 = v34 + 4;
      uint64_t v46 = v34;
      swift_errorRetain();
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      v53[0] = v36;
      uint64_t v13 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v35 = v36;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v47, "Received error while getting client: %@", v46, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *id v11 = sub_1000C1ADC();
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = sub_1001482A4();
    unint64_t v39 = v38;
    sub_1000C2160((uint64_t)v11);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a9)[2](a9, isa);

    sub_100020930(v37, v39);
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1000C20D4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000C210C()
{
  unint64_t result = qword_1001E3290;
  if (!qword_1001E3290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3290);
  }
  return result;
}

uint64_t sub_1000C2160(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E3288);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C21C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E0EC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C2228()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 96);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 136);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 224);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 264);
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 328);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 368);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 408);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 448);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 488);
  if (*(void *)(v0 + 552)) {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 528);
  }

  swift_release();

  return _swift_deallocObject(v0, 592, 7);
}

uint64_t sub_1000C2310(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 56);
  uint64_t v11 = *(void *)(v1 + 64);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100012AB8;
  return sub_1001430B4(a1, v4, v5, v6, v7, v8, v13, v11);
}

unsigned char *storeEnumTagSinglePayload for XPCBridgeError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000C24C8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCBridgeError()
{
  return &type metadata for XPCBridgeError;
}

unint64_t sub_1000C2504()
{
  unint64_t result = qword_1001E32A0;
  if (!qword_1001E32A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E32A0);
  }
  return result;
}

uint64_t sub_1000C2558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_100012AB8;
  return sub_1000705C0(a3, a4, a5, a6, a7);
}

uint64_t sub_1000C2880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_100073324;
  return sub_100070ED4(a3, a4, a5);
}

uint64_t sub_1000C2B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_100013480;
  return sub_100071194(a3, a4, a5);
}

uint64_t sub_1000C2E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_100013480;
  return sub_10007134C(a3, a4, a5);
}

uint64_t sub_1000C3114()
{
  return sub_100019D7C(v0 + OBJC_IVAR____TtC20AttributionKitDaemon28TokenHandoffServiceXPCBridge_service);
}

uint64_t type metadata accessor for TokenHandoffServiceXPCBridge()
{
  return self;
}

uint64_t sub_1000C3158()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C3194(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100013480;
  return sub_1000C2E18(a1, a2, v6, v7, v8);
}

uint64_t sub_1000C3254()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C328C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(v3 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100013480;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001E32E8 + dword_1001E32E8);
  return v10(a1, a2, a3, v8);
}

uint64_t sub_1000C3360(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100013480;
  return sub_1000C2B4C(a1, a2, v6, v7, v8);
}

uint64_t sub_1000C3424()
{
  sub_100020930(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C345C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100013480;
  return sub_1000C2880(a1, a2, v6, v7, v8);
}

uint64_t sub_1000C351C()
{
  sub_100020930(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_100020930(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000C355C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100012AB8;
  return sub_1000C2558(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_1000C3648@<X0>(unint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001E08C8 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1001E5FA0;
  if (*(void *)(qword_1001E5FA0 + 16) > (int64_t)a1)
  {
    if ((sub_1000889D0(a2 & 1) & 1) == 0)
    {
      swift_bridgeObjectRetain();
      Date.addingTimeInterval(_:)();
      goto LABEL_11;
    }
    if (qword_1001E08D0 != -1) {
      goto LABEL_16;
    }
    while (1)
    {
      uint64_t v13 = qword_1001E5FA8;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
      swift_bridgeObjectRetain();
LABEL_11:
      if ((a1 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)(v13 + 16) > a1)
      {
        uint32_t v19 = *(_DWORD *)(v13 + 4 * a1 + 32);
        swift_bridgeObjectRelease();
        arc4random_uniform(v19);
        Date.addingTimeInterval(_:)();
        return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      }
      __break(1u);
LABEL_16:
      swift_once();
    }
  }
  uint64_t v14 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v14, v5);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Postback sequence index outside of known jitter thresholds", v17, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v20, v21, v9);
}

uint64_t sub_1000C3980@<X0>(unint64_t a1@<X0>, int64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>)
{
  unint64_t v5 = v4;
  LOBYTE(v6) = a3;
  int64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001E08B8 != -1) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v14 = qword_1001E5F90;
    if (*(void *)(qword_1001E5F90 + 16) <= (int64_t)a1) {
      break;
    }
    if (sub_1000889D0(v6 & 1))
    {
      if (qword_1001E08C0 != -1) {
        goto LABEL_35;
      }
      while (1)
      {
        uint64_t v15 = qword_1001E5F98;
        int64_t v10 = *(void *)(qword_1001E5F98 + 16);
        uint64_t v13 = (char *)_swiftEmptyArrayStorage;
        if (v10)
        {
          uint64_t v29 = (char *)_swiftEmptyArrayStorage;
          sub_10013A788(0, v10, 0);
          uint64_t v13 = v29;
          os_log_type_t v16 = (unint64_t *)(v15 + 32);
          LOBYTE(v6) = 60;
          while (1)
          {
            unint64_t v17 = *v16++;
            uint64_t v11 = v17;
            if (!is_mul_ok(v17, 0x3CuLL)) {
              break;
            }
            uint64_t v29 = v13;
            unint64_t v19 = *((void *)v13 + 2);
            unint64_t v18 = *((void *)v13 + 3);
            a2 = v19 + 1;
            if (v19 >= v18 >> 1)
            {
              sub_10013A788(v18 > 1, v19 + 1, 1);
              uint64_t v13 = v29;
            }
            *((void *)v13 + 2) = a2;
            *(void *)&v13[8 * v19 + 32] = 60 * v11;
            if (!--v10) {
              goto LABEL_25;
            }
          }
          __break(1u);
          goto LABEL_31;
        }
LABEL_25:
        if ((a1 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (*((void *)v13 + 2) > a1)
        {
          swift_bridgeObjectRelease();
          return Date.addingTimeInterval(_:)();
        }
        __break(1u);
LABEL_35:
        swift_once();
      }
    }
    if (*(void *)(a2 + 16) >= *(void *)(v14 + 16)) {
      int64_t v10 = a2;
    }
    else {
      int64_t v10 = v14;
    }
    a2 = *(void *)(v10 + 16);
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_25;
    }
    unint64_t v28 = v5;
    uint64_t v29 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10013A788(0, a2, 0);
    uint64_t v6 = 0;
    uint64_t v13 = v29;
    uint64_t v11 = 86400;
    while (1)
    {
      unint64_t v5 = *(void *)(v10 + 8 * v6 + 32);
      if (!is_mul_ok(v5, 0x15180uLL)) {
        break;
      }
      uint64_t v29 = v13;
      unint64_t v27 = *((void *)v13 + 2);
      unint64_t v26 = *((void *)v13 + 3);
      if (v27 >= v26 >> 1)
      {
        sub_10013A788(v26 > 1, v27 + 1, 1);
        uint64_t v13 = v29;
      }
      ++v6;
      *((void *)v13 + 2) = v27 + 1;
      *(void *)&v13[8 * v27 + 32] = 86400 * v5;
      if (a2 == v6)
      {
        swift_bridgeObjectRelease();
        unint64_t v5 = v28;
        goto LABEL_25;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    swift_once();
  }
  uint64_t v20 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, int64_t))(v11 + 16))(v13, v20, v10);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Postback sequence index outside of known window thresholds", v23, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, int64_t))(v11 + 8))(v13, v10);
  uint64_t v24 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a4, v5, v24);
}

id sub_1000C3E1C()
{
  return sub_1000C4138(type metadata accessor for PendingImpressionEntity);
}

uint64_t type metadata accessor for PendingImpressionEntity()
{
  return self;
}

id sub_1000C3EE4()
{
  return sub_1000C4138(type metadata accessor for ImpressionEntity);
}

uint64_t type metadata accessor for ImpressionEntity()
{
  return self;
}

id sub_1000C3F78(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t))
{
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a4;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v10 = swift_bridgeObjectRelease();
  v13.receiver = a1;
  v13.super_class = (Class)a5(v10);
  id v11 = objc_msgSendSuper2(&v13, "initWithPropertyValues:onConnection:", isa, v8);

  return v11;
}

id sub_1000C4068(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v8.receiver = a1;
  v8.super_class = (Class)a5();
  return objc_msgSendSuper2(&v8, "initWithPersistentID:onConnection:", a3, a4);
}

id sub_1000C40DC(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, "init");
}

id sub_1000C4120()
{
  return sub_1000C4138(type metadata accessor for FrozenImpressionEntity);
}

id sub_1000C4138(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for FrozenImpressionEntity()
{
  return self;
}

unint64_t sub_1000C4198()
{
  unint64_t result = qword_1001E33B8;
  if (!qword_1001E33B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E33B8);
  }
  return result;
}

unint64_t sub_1000C41F0()
{
  unint64_t result = qword_1001E33D8;
  if (!qword_1001E33D8)
  {
    type metadata accessor for ImpressionModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E33D8);
  }
  return result;
}

id sub_1000C4248()
{
  uint64_t v1 = (unsigned char *)swift_allocObject();
  swift_defaultActor_initialize();
  v1[112] = 2;
  v7.receiver = v1;
  v7.super_class = v0;
  id v2 = objc_msgSendSuper2(&v7, "init");
  objc_super v3 = self;
  id v4 = v2;
  id result = [v3 sharedConnection];
  if (result)
  {
    uint64_t v6 = result;
    [result registerObserver:v4];

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000C43AC()
{
  uint64_t v0 = (objc_class *)type metadata accessor for Restrictions();
  uint64_t v1 = (unsigned char *)swift_allocObject();
  swift_defaultActor_initialize();
  v1[112] = 2;
  v7.receiver = v1;
  v7.super_class = v0;
  id v2 = objc_msgSendSuper2(&v7, "init");
  objc_super v3 = self;
  id v4 = v2;
  id v5 = [v3 sharedConnection];
  if (v5)
  {
    uint64_t v6 = v5;
    [v5 registerObserver:v4];

    qword_1001E60D0 = (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000C4468()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Restrictions()
{
  return self;
}

uint64_t sub_1000C44BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1000C44DC, a4, 0);
}

uint64_t sub_1000C44DC()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 112) = 2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t getEnumTagSinglePayload for Restrictions.ValueStore(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for Restrictions.ValueStore(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C46C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Restrictions.ValueStore()
{
  return &type metadata for Restrictions.ValueStore;
}

uint64_t sub_1000C46F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  int v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  void v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_10006E9CC((uint64_t)v4);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_1001E34A8;
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    id v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000C4934()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C4974()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100012AB8;
  v3[2] = v2;
  return _swift_task_switch(sub_1000C44DC, v2, 0);
}

uint64_t sub_1000C4A1C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C4A54(const char *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v44 = a3;
  uint64_t v43 = a2;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v38 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  objc_super v13 = &v35[-v12];
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for OSSignposter();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = &v35[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v37 = a1;
  *(void *)(v5 + 16) = a1;
  char v22 = v44;
  *(void *)(v5 + 24) = v43;
  *(unsigned char *)(v5 + 32) = v22;
  uint64_t v39 = v15;
  uint64_t v40 = v14;
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v43 = a4;
  v23(v17, a4, v14);
  OSSignposter.init(logger:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v19 + 32))(v5 + OBJC_IVAR____TtC20AttributionKitDaemon16SignpostInterval_signposter, v21, v18);
  static OSSignpostID.exclusive.getter();
  uint64_t v24 = OSSignposter.logHandle.getter();
  int v25 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v27 = v42;
  int v36 = v25;
  if ((v22 & 1) == 0)
  {
    uint64_t v28 = v41;
    uint64_t v29 = v37;
    if (!v37)
    {
      __break(1u);
LABEL_5:

      uint64_t v28 = v41;
      uint64_t v27 = v42;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v42 + 16))(v38, v13, v41);
LABEL_11:
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      uint64_t v34 = OSSignpostIntervalState.init(id:isOpen:)();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v40);
      (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v13, v28);
      *(void *)(v5 + OBJC_IVAR____TtC20AttributionKitDaemon16SignpostInterval_interval) = v34;
      return v5;
    }
LABEL_10:
    uint64_t v30 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v42 + 16);
    os_log_type_t v31 = v38;
    v30(v38, v13, v28);
    int v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v32 = 0;
    os_signpost_id_t v33 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, (os_signpost_type_t)v36, v33, v29, "", v32, 2u);
    swift_slowDealloc();

    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v31, v28);
    v30(v31, v13, v28);
    goto LABEL_11;
  }
  uint64_t v28 = v41;
  if ((unint64_t)v37 >> 32)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v37 >> 11 != 27)
  {
    if (v37 >> 16 <= 0x10)
    {
      uint64_t v29 = &v45;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1000C4E5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v24[-v10];
  uint64_t v12 = *(const char **)(v0 + 16);
  char v13 = *(unsigned char *)(v0 + 32);
  uint64_t v29 = OBJC_IVAR____TtC20AttributionKitDaemon16SignpostInterval_interval;
  uint64_t v30 = (char *)v12;
  uint64_t v28 = v0 + OBJC_IVAR____TtC20AttributionKitDaemon16SignpostInterval_signposter;
  uint64_t v14 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v25 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  if ((v13 & 1) == 0)
  {
    if (!v30)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v5);
      uint64_t v16 = v28;
LABEL_14:
      uint64_t v23 = type metadata accessor for OSSignposter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
      swift_release();
      return v1;
    }
LABEL_10:
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v18 = v26;
    uint64_t v17 = v27;
    if ((*(unsigned int (**)(unsigned char *, uint64_t))(v26 + 88))(v4, v27) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v19 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v4, v17);
      uint64_t v19 = "";
    }
    uint64_t v16 = v28;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16))(v9, v11, v5);
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, (os_signpost_type_t)v25, v21, v30, v19, v20, 2u);
    swift_slowDealloc();

    char v22 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
    v22(v11, v5);
    v22(v9, v5);
    goto LABEL_14;
  }
  if ((unint64_t)v30 >> 32)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v30 >> 11 != 27)
  {
    if (v30 >> 16 <= 0x10)
    {
      uint64_t v30 = &v31;
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1000C51D8()
{
  sub_1000C4E5C();

  return swift_deallocClassInstance();
}

uint64_t sub_1000C5230()
{
  return type metadata accessor for SignpostInterval();
}

uint64_t type metadata accessor for SignpostInterval()
{
  uint64_t result = qword_1001E34E0;
  if (!qword_1001E34E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C5284()
{
  uint64_t result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000C5330()
{
  unint64_t result = qword_1001E3578;
  if (!qword_1001E3578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3578);
  }
  return result;
}

unint64_t sub_1000C5388()
{
  unint64_t result = qword_1001E3580;
  if (!qword_1001E3580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3580);
  }
  return result;
}

unint64_t sub_1000C53DC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000C540C();
  unint64_t result = sub_1000241E4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000C540C()
{
  unint64_t result = qword_1001E35D0;
  if (!qword_1001E35D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E35D0);
  }
  return result;
}

unint64_t sub_1000C5460(char a1)
{
  unint64_t result = 0x69737265766E6F63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x5F65746176697270;
      break;
    case 3:
      unint64_t result = 0x657A696C616E6966;
      break;
    case 4:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 5:
      unint64_t result = 0x6369666974726563;
      break;
    case 7:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    case 8:
      unint64_t result = 0x636F6C6C615F7369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000C55C0(char a1)
{
  unint64_t result = 0x69737265766E6F63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x5F65746176697270;
      break;
    case 3:
      unint64_t result = 0x657A696C616E6966;
      break;
    case 4:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 5:
      unint64_t result = 0x6369666974726563;
      break;
    case 7:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    case 8:
      unint64_t result = 0x636F6C6C615F7369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C5720(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E3600);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000C5388();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[9] = *(unsigned char *)(v3 + 96);
    v10[8] = 6;
    sub_10005D6CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[7] = *(unsigned char *)(v3 + 97);
    v10[6] = 7;
    sub_100046408();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[5] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000C59C8(unsigned __int8 *a1, char *a2)
{
  return sub_100106140(*a1, *a2);
}

Swift::Int sub_1000C59D4()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C5A1C()
{
  return sub_100109E5C();
}

Swift::Int sub_1000C5A24()
{
  return Hasher._finalize()();
}

unint64_t sub_1000C5A68@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000C61FC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000C5A98@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000C5460(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000C5AC4()
{
  return sub_1000C55C0(*v0);
}

unint64_t sub_1000C5ACC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000C61FC(a1);
  *a2 = result;
  return result;
}

void sub_1000C5AF4(void *a1@<X8>)
{
  *a1 = &off_1001C05F0;
}

uint64_t sub_1000C5B04(uint64_t a1)
{
  unint64_t v2 = sub_1000C5388();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C5B40(uint64_t a1)
{
  unint64_t v2 = sub_1000C5388();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1000C5B7C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000C5D04(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_DWORD *)(a2 + 95) = *(_DWORD *)&v8[15];
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1000C5BDC(void *a1)
{
  return sub_1000C5720(a1);
}

unint64_t sub_1000C5BF8()
{
  unint64_t result = qword_1001E35D8;
  if (!qword_1001E35D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E35D8);
  }
  return result;
}

unint64_t sub_1000C5C50()
{
  unint64_t result = qword_1001E35E0;
  if (!qword_1001E35E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E35E0);
  }
  return result;
}

unint64_t sub_1000C5CA8()
{
  unint64_t result = qword_1001E35E8;
  if (!qword_1001E35E8)
  {
    sub_100011ECC(&qword_1001E35F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E35E8);
  }
  return result;
}

uint64_t sub_1000C5D04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E35F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000C5388();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v47 = 1;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v46 = 2;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v35 = v10;
  char v45 = 3;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v36 = v14;
  uint64_t v32 = v13;
  char v44 = 4;
  swift_bridgeObjectRetain();
  uint64_t v34 = 0;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  char v43 = 5;
  uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
  char v42 = 0;
  uint64_t v33 = v15;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = v17;
  uint64_t v29 = v16;
  char v40 = 6;
  sub_10005D54C();
  swift_bridgeObjectRetain();
  uint64_t v34 = v18;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v28 = v41;
  char v38 = 7;
  sub_1000472D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v27 = v39;
  char v37 = 8;
  LOBYTE(v18) = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t v19 = v33;
  swift_bridgeObjectRelease();
  uint64_t v20 = v36;
  swift_bridgeObjectRelease();
  uint64_t v21 = v12;
  swift_bridgeObjectRelease();
  uint64_t v22 = v34;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v29;
  *(void *)(a2 + 24) = v22;
  uint64_t v24 = v35;
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v24;
  uint64_t v25 = v32;
  *(void *)(a2 + 48) = v21;
  *(void *)(a2 + 56) = v25;
  uint64_t v26 = v31;
  *(void *)(a2 + 64) = v20;
  *(void *)(a2 + 72) = v26;
  *(void *)(a2 + 80) = v30;
  *(void *)(a2 + 88) = v19;
  *(unsigned char *)(a2 + 96) = v28;
  *(unsigned char *)(a2 + 97) = v27;
  *(unsigned char *)(a2 + 98) = v18 & 1;
  return result;
}

unint64_t sub_1000C61FC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1DA8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

unsigned char *storeEnumTagSinglePayload for FinalizedTokenModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C6314);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinalizedTokenModel.CodingKeys()
{
  return &type metadata for FinalizedTokenModel.CodingKeys;
}

uint64_t destroy for FinalizedTokenModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FinalizedTokenModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FinalizedTokenModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(unsigned char *)(a1 + 97) = *((unsigned char *)a2 + 97);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  return a1;
}

__n128 initializeWithTake for FinalizedTokenModel(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 95) = *(_DWORD *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FinalizedTokenModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for FinalizedTokenModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 99)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FinalizedTokenModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 98) = 0;
    *(_WORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 99) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 99) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinalizedTokenModel()
{
  return &type metadata for FinalizedTokenModel;
}

unint64_t sub_1000C66A8()
{
  unint64_t result = qword_1001E3608;
  if (!qword_1001E3608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E3608);
  }
  return result;
}

uint64_t destroy for ImpressionIntakeService(id *a1)
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 3));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 8));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 19));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 24));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 32));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 37));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 42));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 47));

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 52));
}

uint64_t initializeWithCopy for ImpressionIntakeService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2 + 24;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  id v10 = v5;
  v9(a1 + 24, v6, v8);
  long long v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  uint64_t v14 = *(void **)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = v14;
  *(void *)(a1 + 128) = v13;
  uint64_t v15 = *(void **)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v15;
  long long v16 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 176) = v16;
  uint64_t v17 = v16;
  uint64_t v18 = **(void (***)(uint64_t, uint64_t, uint64_t))(v16 - 8);
  swift_bridgeObjectRetain();
  id v19 = v14;
  swift_bridgeObjectRetain();
  id v20 = v15;
  v18(a1 + 152, a2 + 152, v17);
  long long v21 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 216) = v21;
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 192, a2 + 192);
  uint64_t v22 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v22;
  uint64_t v23 = *(void **)(a2 + 248);
  *(void *)(a1 + 248) = v23;
  uint64_t v25 = *(void *)(a2 + 280);
  uint64_t v24 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = v25;
  *(void *)(a1 + 288) = v24;
  uint64_t v26 = **(void (***)(uint64_t, uint64_t, uint64_t))(v25 - 8);
  swift_bridgeObjectRetain();
  id v27 = v23;
  v26(a1 + 256, a2 + 256, v25);
  long long v28 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 320) = v28;
  (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 296, a2 + 296);
  uint64_t v29 = *(void *)(a2 + 360);
  uint64_t v30 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = v29;
  *(void *)(a1 + 368) = v30;
  (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1 + 336, a2 + 336);
  long long v31 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 400) = v31;
  (**(void (***)(uint64_t, uint64_t))(v31 - 8))(a1 + 376, a2 + 376);
  uint64_t v32 = *(void *)(a2 + 440);
  uint64_t v33 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = v32;
  *(void *)(a1 + 448) = v33;
  (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1 + 416, a2 + 416);
  return a1;
}

uint64_t *assignWithCopy for ImpressionIntakeService(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = (uint64_t)v4;
  id v6 = v4;

  sub_100017B78(a1 + 3, a2 + 3);
  sub_100017B78(a1 + 8, a2 + 8);
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v7 = (void *)a2[15];
  uint64_t v8 = (void *)a1[15];
  a1[15] = (uint64_t)v7;
  id v9 = v7;

  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = (void *)a2[18];
  long long v11 = (void *)a1[18];
  a1[18] = (uint64_t)v10;
  id v12 = v10;

  sub_100017B78(a1 + 19, a2 + 19);
  sub_100017B78(a1 + 24, a2 + 24);
  a1[29] = a2[29];
  a1[30] = a2[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)a2[31];
  uint64_t v14 = (void *)a1[31];
  a1[31] = (uint64_t)v13;
  id v15 = v13;

  sub_100017B78(a1 + 32, a2 + 32);
  sub_100017B78(a1 + 37, a2 + 37);
  sub_100017B78(a1 + 42, a2 + 42);
  sub_100017B78(a1 + 47, a2 + 47);
  sub_100017B78(a1 + 52, a2 + 52);
  return a1;
}

void *initializeWithTake for ImpressionIntakeService(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1C8uLL);
}

uint64_t assignWithTake for ImpressionIntakeService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  long long v7 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);

  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 152);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 192);
  long long v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  long long v11 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 256);
  long long v12 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v12;
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 296);
  long long v13 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v13;
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 336);
  long long v14 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v14;
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 376);
  long long v15 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v15;
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 416);
  long long v16 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v16;
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImpressionIntakeService(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 456)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImpressionIntakeService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 456) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 456) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpressionIntakeService()
{
  return &type metadata for ImpressionIntakeService;
}

uint64_t sub_1000C6F50@<X0>(void *a1@<X8>)
{
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E0940;
  id v3 = (id)qword_1001E5F88;
  uint64_t v4 = v3;
  if (v2 != -1)
  {
    swift_once();
    uint64_t v4 = (void *)qword_1001E5F88;
  }
  uint64_t v5 = qword_1001E60E8;
  uint64_t v6 = type metadata accessor for SnoutManager();
  a1[6] = v6;
  a1[7] = &off_1001CB0F8;
  a1[11] = &type metadata for AMSDogBag;
  a1[12] = &off_1001CAA18;
  *a1 = 0xD000000000000010;
  a1[1] = 0x8000000100185910;
  a1[2] = v3;
  a1[3] = v5;
  id v7 = v4;
  swift_retain();
  sub_1000CE908(a1 + 19);
  a1[27] = &type metadata for LaunchServicesRecordFactory;
  a1[28] = &off_1001C6D08;
  uint64_t v8 = qword_1001E0880;
  id v9 = v7;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1001E5F50;
  a1[35] = type metadata accessor for TaskGreyhound();
  a1[36] = &off_1001C2490;
  a1[40] = &type metadata for AMSDogBag;
  a1[41] = &off_1001CAA18;
  uint64_t v11 = qword_1001E60E8;
  a1[45] = v6;
  a1[46] = &off_1001CB0F8;
  a1[42] = v11;
  a1[13] = 0x74735F6E656B6F74;
  a1[14] = 0xEB0000000065726FLL;
  a1[15] = v9;
  a1[16] = 0xD000000000000010;
  a1[17] = 0x8000000100185910;
  a1[18] = v9;
  a1[29] = 0xD000000000000012;
  a1[30] = 0x8000000100185930;
  a1[31] = v9;
  a1[32] = v10;
  a1[50] = v6;
  a1[51] = &off_1001CB0F8;
  a1[47] = v11;
  a1[55] = &type metadata for AMSDogBag;
  a1[56] = &off_1001CAA18;
  swift_retain_n();

  return swift_retain();
}

uint64_t sub_1000C7164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[17] = a5;
  v6[18] = v5;
  v6[15] = a3;
  v6[16] = a4;
  v6[13] = a1;
  v6[14] = a2;
  uint64_t v7 = type metadata accessor for URL();
  v6[19] = v7;
  v6[20] = *(void *)(v7 - 8);
  v6[21] = swift_task_alloc();
  sub_100012960(&qword_1001E1170);
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  sub_100012960(&qword_1001E1380);
  v6[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[27] = v8;
  v6[28] = *(void *)(v8 - 8);
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  return _swift_task_switch(sub_1000C732C, 0, 0);
}

uint64_t sub_1000C732C()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = Logger.impression.unsafeMutableAddressor();
  *(void *)(v0 + 256) = v3;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 264) = v4;
  *(void *)(v0 + 272) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v30 = v4;
  uint64_t v31 = v3;
  ((void (*)(uint64_t))v4)(v1);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[ImpressionIntakeService] Process reengagement", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v9 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 224);

  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  *(void *)(v0 + 280) = v11;
  *(void *)(v0 + 288) = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v8, v9);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1000C92E4();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v14 = *(void *)(v0 + 16);
  uint64_t v15 = *(void *)(v0 + 24);
  char v16 = *(unsigned char *)(v0 + 32);
  uint64_t v18 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  *(void *)(v0 + 296) = v15;
  *(void *)(v0 + 304) = v17;
  if (v16)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRetain();
    sub_100086B50(v18, v17, v0 + 56);
    id v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v20;
    void *v20 = v0;
    v20[1] = sub_1000C7718;
    uint64_t v21 = *(void *)(v0 + 208);
    uint64_t v22 = *(void *)(v0 + 112);
    return sub_10002E514(v21, v14, v15, v22, 1);
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_10;
  }
  uint64_t v23 = *(void *)(v0 + 232);
  uint64_t v24 = *(void *)(v0 + 216);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30(v23, v31, v24);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    id v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Interaction type must be click", v27, 2u);
    swift_slowDealloc();
  }
  uint64_t v28 = *(void *)(v0 + 232);
  uint64_t v29 = *(void *)(v0 + 216);

  v11(v28, v29);
  sub_1000C9338();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1000C7718()
{
  uint64_t v2 = (void *)*v1;
  v2[40] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000C81C4, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)swift_task_alloc();
    v2[41] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1000C78B0;
    uint64_t v4 = v2[26];
    uint64_t v5 = v2[14];
    return sub_100033FFC((uint64_t)(v2 + 7), v5, v4);
  }
}

uint64_t sub_1000C78B0()
{
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C82B4;
  }
  else {
    uint64_t v2 = sub_1000C79C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C79C4()
{
  char v44 = v0;
  uint64_t v1 = v0[13];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[33];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[27];
  uint64_t v6 = v0[25];
  uint64_t v7 = v0[19];
  uint64_t v8 = v0[20];
  uint64_t v9 = v0[17];
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v0[43] = v10;
  v0[44] = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v10(v1, 1, 1, v7);
  v2(v4, v3, v5);
  sub_1000207C4(v9, v6);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = v0[24];
    uint64_t v13 = v0[25];
    uint64_t v15 = v0[19];
    uint64_t v16 = v0[20];
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    sub_1000207C4(v13, v14);
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
    uint64_t v19 = v0[24];
    if (v18 == 1)
    {
      sub_100019960(v0[24], &qword_1001E1170);
      unint64_t v20 = 0xE400000000000000;
      uint64_t v21 = 1701736302;
    }
    else
    {
      uint64_t v26 = v0[19];
      uint64_t v25 = v0[20];
      uint64_t v21 = URL.absoluteString.getter();
      unint64_t v20 = v27;
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v19, v26);
    }
    char v42 = (void (*)(uint64_t, uint64_t))v0[35];
    uint64_t v40 = v0[27];
    uint64_t v41 = v0[30];
    uint64_t v28 = v0[25];
    v0[12] = sub_100147668(v21, v20, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100019960(v28, &qword_1001E1170);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Reengagement url: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v42(v41, v40);
  }
  else
  {
    uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[35];
    uint64_t v23 = v0[30];
    uint64_t v24 = v0[27];
    sub_100019960(v0[25], &qword_1001E1170);

    v22(v23, v24);
  }
  uint64_t v29 = v0[23];
  uint64_t v30 = v0[19];
  uint64_t v31 = v0[20];
  sub_1000207C4(v0[17], v29);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_100019960(v0[23], &qword_1001E1170);
    uint64_t v32 = (void *)swift_task_alloc();
    v0[47] = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_1000C7FD0;
    uint64_t v33 = v0[26];
    uint64_t v34 = v0[14];
    return sub_10009CC30(v34, v33);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[20] + 32))(v0[21], v0[23], v0[19]);
    uint64_t v36 = (void *)swift_task_alloc();
    v0[45] = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_1000C7DB8;
    uint64_t v38 = v0[21];
    uint64_t v37 = v0[22];
    uint64_t v39 = v0[14];
    return sub_10005F5B8(v37, v38, v39);
  }
}

uint64_t sub_1000C7DB8()
{
  *(void *)(*(void *)v1 + 368) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C83A4;
  }
  else {
    uint64_t v2 = sub_1000C7ECC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C7ECC()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[43];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[13];
  (*(void (**)(void, uint64_t))(v0[20] + 8))(v0[21], v3);
  sub_100019960(v4, &qword_1001E1170);
  v1(v2, 0, 1, v3);
  sub_10004DA50(v2, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[47] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000C7FD0;
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[14];
  return sub_10009CC30(v7, v6);
}

uint64_t sub_1000C7FD0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000C80CC, 0, 0);
}

uint64_t sub_1000C80CC()
{
  sub_100019960(*(void *)(v0 + 208), &qword_1001E1380);
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C81C4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C82B4()
{
  sub_100019960(*(void *)(v0 + 208), &qword_1001E1380);
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C83A4()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[13];
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  sub_100019960(v2, &qword_1001E1170);
  sub_100019960(v1, &qword_1001E1380);
  sub_100086398((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000C84C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  sub_100012960(&qword_1001E1380);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  return _swift_task_switch(sub_1000C85C8, 0, 0);
}

uint64_t sub_1000C85C8()
{
  uint64_t v30 = v0;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1000C92E4();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  swift_release();
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  LODWORD(v6) = *(unsigned __int8 *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v28 = *(void *)(v0 + 40);
  *(void *)(v0 + 176) = v4;
  *(void *)(v0 + 184) = v7;
  uint64_t v8 = Logger.impression.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v8, v3);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v13 = *(void *)(v0 + 168);
  uint64_t v14 = *(void *)(v0 + 152);
  if (v11)
  {
    uint64_t v27 = v5;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v29 = v16;
    if (v6) {
      uint64_t v17 = 0x6B63696C63;
    }
    else {
      uint64_t v17 = 2003134838;
    }
    log = v9;
    char v18 = v6;
    if (v6) {
      unint64_t v6 = 0xE500000000000000;
    }
    else {
      unint64_t v6 = 0xE400000000000000;
    }
    *(void *)(v0 + 96) = sub_100147668(v17, v6, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    LOBYTE(v6) = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v10, "[ImpressionIntakeService] Record impression with type: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v27;
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  }
  swift_bridgeObjectRetain();
  sub_100086B50(v28, v7, v0 + 56);
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v19;
  *uint64_t v19 = v0;
  if (v6)
  {
    v19[1] = sub_1000C8CFC;
    uint64_t v20 = *(void *)(v0 + 136);
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v22 = v5;
    uint64_t v23 = v4;
    char v24 = 1;
  }
  else
  {
    v19[1] = sub_1000C89A0;
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v22 = v5;
    uint64_t v23 = v4;
    char v24 = 0;
  }
  return sub_10002E514(v20, v22, v23, v21, v24);
}

uint64_t sub_1000C89A0()
{
  uint64_t v2 = (void *)*v1;
  v2[25] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000C904C, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[26] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1000C8B30;
    uint64_t v4 = v2[18];
    uint64_t v5 = v2[13];
    return sub_10002EBEC((uint64_t)(v2 + 7), v5, v4, 1, 0);
  }
}

uint64_t sub_1000C8B30()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C90E8;
  }
  else {
    uint64_t v2 = sub_1000C8C44;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C8C44()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100019960(v1, &qword_1001E1380);
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000C8CFC()
{
  uint64_t v2 = (void *)*v1;
  v2[28] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000C9198, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[29] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1000C8E80;
    uint64_t v4 = v2[17];
    uint64_t v5 = v2[13];
    return sub_100033FFC((uint64_t)(v2 + 7), v5, v4);
  }
}

uint64_t sub_1000C8E80()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C9234;
  }
  else {
    uint64_t v2 = sub_1000C8F94;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C8F94()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100019960(v1, &qword_1001E1380);
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000C904C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C90E8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100019960(v1, &qword_1001E1380);
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000C9198()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C9234()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100019960(v1, &qword_1001E1380);
  sub_100086398(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

unint64_t sub_1000C92E4()
{
  unint64_t result = qword_1001E3618;
  if (!qword_1001E3618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3618);
  }
  return result;
}

unint64_t sub_1000C9338()
{
  unint64_t result = qword_1001E3620;
  if (!qword_1001E3620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E3620);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ImpressionIntakeServiceError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000C9428);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpressionIntakeServiceError()
{
  return &type metadata for ImpressionIntakeServiceError;
}

unint64_t sub_1000C9464()
{
  unint64_t result = qword_1001E3630;
  if (!qword_1001E3630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3630);
  }
  return result;
}

uint64_t sub_1000C94B8(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v30 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  uint64_t v29 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100012960(&qword_1001E0EE8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for ConversionBiomeEvent(0);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v25 + 64);
  __chkstk_darwin(v8 - 8);
  os_log_type_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000398B0();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  uint64_t v26 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_1000CB56C(v27, (uint64_t)v10, type metadata accessor for ConversionBiomeEvent);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v5);
  unint64_t v15 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  unint64_t v16 = (v9 + *(unsigned __int8 *)(v6 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1000CB800((uint64_t)v10, v17 + v15, type metadata accessor for ConversionBiomeEvent);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_1000CB868;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002437C;
  aBlock[3] = &unk_1001C8C98;
  char v18 = _Block_copy(aBlock);
  uint64_t v19 = v29;
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_1000CB980((unint64_t *)&qword_1001E3050, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012960((uint64_t *)&unk_1001E0F60);
  sub_100019B64();
  uint64_t v21 = v30;
  uint64_t v20 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v22 = (void *)v26;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
  return swift_release();
}

uint64_t sub_1000C99A8(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E36F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100012960(&qword_1001E12F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AdAttributionKitConversion();
  uint64_t v20 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AdAttributionKitConversion.init()();
  swift_bridgeObjectRetain();
  AdAttributionKitConversion.conversionID.setter();
  AdAttributionKitConversion.advertisedItemID.setter();
  swift_bridgeObjectRetain();
  AdAttributionKitConversion.adNetworkID.setter();
  LOBYTE(v21[0]) = 0;
  AdAttributionKitConversion.sourceID.setter();
  swift_bridgeObjectRetain();
  AdAttributionKitConversion.marketplaceID.setter();
  uint64_t v11 = type metadata accessor for ConversionBiomeEvent(0);
  uint64_t v12 = a1 + *(int *)(v11 + 44);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v7, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
  AdAttributionKitConversion.conversionDate.setter();
  sub_100081694(a1 + *(int *)(v11 + 48), (uint64_t)v7);
  AdAttributionKitConversion.impressionDate.setter();
  swift_bridgeObjectRetain();
  AdAttributionKitConversion.storefrontID.setter();
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a1 + 24) == 1) {
      unint64_t v15 = (unsigned int *)&enum case for AdAttributionKitConversionType.redownload(_:);
    }
    else {
      unint64_t v15 = (unsigned int *)&enum case for AdAttributionKitConversionType.reengagement(_:);
    }
  }
  else
  {
    unint64_t v15 = (unsigned int *)&enum case for AdAttributionKitConversionType.download(_:);
  }
  uint64_t v16 = *v15;
  uint64_t v17 = type metadata accessor for AdAttributionKitConversionType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v4, v16, v17);
  type metadata accessor for AdAttributionKitConversionType();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 0, 1, v17);
  AdAttributionKitConversion.conversionType.setter();
  if (*(unsigned char *)(a1 + 72) == 1)
  {
    swift_bridgeObjectRetain();
    AdAttributionKitConversion.sourceDomain.setter();
  }
  else
  {
    AdAttributionKitConversion.publisherItemID.setter();
  }
  type metadata accessor for Library.Streams.AdAttributionKit.AggregatedReporting.Conversion();
  sub_1000CB980(&qword_1001E3700, (void (*)(uint64_t))&type metadata accessor for Library.Streams.AdAttributionKit.AggregatedReporting.Conversion);
  static StreamResource.source()();
  sub_100012D78(v21, v21[3]);
  dispatch thunk of Source.sendEvent(_:)();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v21);
  sub_100012960(&qword_1001E0EE8);
  CheckedContinuation.resume(returning:)();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
}

uint64_t sub_1000C9F98(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v30 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  uint64_t v29 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100012960(&qword_1001E0EE8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for PurchaseBiomeEvent(0);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v25 + 64);
  __chkstk_darwin(v8 - 8);
  os_log_type_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000398B0();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  uint64_t v26 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_1000CB56C(v27, (uint64_t)v10, type metadata accessor for PurchaseBiomeEvent);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v5);
  unint64_t v15 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  unint64_t v16 = (v9 + *(unsigned __int8 *)(v6 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1000CB800((uint64_t)v10, v17 + v15, type metadata accessor for PurchaseBiomeEvent);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_1000CAC28;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002437C;
  aBlock[3] = &unk_1001C8C10;
  char v18 = _Block_copy(aBlock);
  uint64_t v19 = v29;
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_1000CB980((unint64_t *)&qword_1001E3050, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012960((uint64_t *)&unk_1001E0F60);
  sub_100019B64();
  uint64_t v21 = v30;
  uint64_t v20 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v22 = (void *)v26;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
  return swift_release();
}

uint64_t type metadata accessor for PurchaseBiomeEvent(uint64_t a1)
{
  return sub_1000CB534(a1, qword_1001E36A0);
}

uint64_t sub_1000CA4A8(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E3638);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100012960(&qword_1001E12F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AdAttributionKitPurchase();
  uint64_t v20 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AdAttributionKitPurchase.init()();
  AdAttributionKitPurchase.advertisedItemID.setter();
  swift_bridgeObjectRetain();
  AdAttributionKitPurchase.conversionID.setter();
  AdAttributionKitPurchase.amountCharged.setter();
  swift_bridgeObjectRetain();
  AdAttributionKitPurchase.storefrontID.setter();
  uint64_t v11 = type metadata accessor for PurchaseBiomeEvent(0);
  uint64_t v12 = a1 + *(int *)(v11 + 36);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v7, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
  AdAttributionKitPurchase.purchaseDate.setter();
  swift_bridgeObjectRetain();
  AdAttributionKitPurchase.currencyCode.setter();
  swift_bridgeObjectRetain();
  AdAttributionKitPurchase.inAppPurchaseSubscriptionISO8601Duration.setter();
  AdAttributionKitPurchase.amountChargedUSD.setter();
  switch(*(unsigned char *)(a1 + *(int *)(v11 + 40)))
  {
    case 1:
      unint64_t v15 = (unsigned int *)&enum case for AdAttributionKitInAppPurchaseType.nonConsumable(_:);
      break;
    case 2:
      unint64_t v15 = (unsigned int *)&enum case for AdAttributionKitInAppPurchaseType.autoRenewingSubscription(_:);
      break;
    case 3:
      unint64_t v15 = (unsigned int *)&enum case for AdAttributionKitInAppPurchaseType.nonRenewingSubscription(_:);
      break;
    default:
      unint64_t v15 = (unsigned int *)&enum case for AdAttributionKitInAppPurchaseType.consumable(_:);
      break;
  }
  uint64_t v16 = *v15;
  uint64_t v17 = type metadata accessor for AdAttributionKitInAppPurchaseType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v4, v16, v17);
  type metadata accessor for AdAttributionKitInAppPurchaseType();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 0, 1, v17);
  AdAttributionKitPurchase.inAppPurchaseType.setter();
  type metadata accessor for Library.Streams.AdAttributionKit.AggregatedReporting.Purchase();
  sub_1000CB980(&qword_1001E3640, (void (*)(uint64_t))&type metadata accessor for Library.Streams.AdAttributionKit.AggregatedReporting.Purchase);
  static StreamResource.source()();
  sub_100012D78(v21, v21[3]);
  dispatch thunk of Source.sendEvent(_:)();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v21);
  sub_100012960(&qword_1001E0EE8);
  CheckedContinuation.resume(returning:)();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
}

uint64_t sub_1000CAA84()
{
  uint64_t v1 = (int *)(type metadata accessor for PurchaseBiomeEvent(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = sub_100012960(&qword_1001E0EE8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v0 + v3 + v1[11];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_1000CAC28()
{
  return sub_1000CB894(type metadata accessor for PurchaseBiomeEvent, (uint64_t (*)(unint64_t, uint64_t))sub_1000CA4A8);
}

uint64_t sub_1000CAC54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000CAC64()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for BiomeEventStreamDog()
{
  return &type metadata for BiomeEventStreamDog;
}

void *sub_1000CAC7C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v7;
    uint64_t v8 = a3[9];
    uint64_t v21 = a1 + v8;
    uint64_t v9 = (uint64_t)a2 + v8;
    *(void *)(a1 + 56) = a2[7];
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v21, v9, v10);
    uint64_t v12 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[12];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    unsigned char v17[8] = *(unsigned char *)(v18 + 8);
    *(void *)uint64_t v17 = *(void *)v18;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000CADEC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CAE8C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = a3[9];
  uint64_t v19 = a1 + v7;
  uint64_t v8 = a2 + v7;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v19, v8, v9);
  uint64_t v11 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[12];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000CAFAC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[9];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[12];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)uint64_t v14 = v16;
  return a1;
}

uint64_t sub_1000CB0F4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[12];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  return a1;
}

uint64_t sub_1000CB1C8(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[12];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t sub_1000CB2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CB2E0);
}

uint64_t sub_1000CB2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000CB390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CB3A4);
}

uint64_t sub_1000CB3A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000CB44C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ConversionBiomeEvent(uint64_t a1)
{
  return sub_1000CB534(a1, (uint64_t *)&unk_1001E3760);
}

uint64_t sub_1000CB534(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000CB56C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CB5D4()
{
  uint64_t v1 = type metadata accessor for ConversionBiomeEvent(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v14 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v15 = sub_100012960(&qword_1001E0EE8);
  uint64_t v3 = *(void *)(v15 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = *(void *)(v3 + 64);
  uint64_t v16 = v0;
  uint64_t v5 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002AD9C(*(void *)(v5 + 56), *(void *)(v5 + 64), *(unsigned char *)(v5 + 72));
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(v1 + 44);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v5 + *(int *)(v1 + 48);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7)) {
    v9(v10, v7);
  }
  uint64_t v11 = (((v2 + 16) & ~v2) + v14 + v4) & ~v4;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v16 + v11, v15);

  return _swift_deallocObject(v16, v11 + v13, v2 | v4 | 7);
}

uint64_t sub_1000CB800(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CB868()
{
  return sub_1000CB894(type metadata accessor for ConversionBiomeEvent, (uint64_t (*)(unint64_t, uint64_t))sub_1000C99A8);
}

uint64_t sub_1000CB894(uint64_t (*a1)(void), uint64_t (*a2)(unint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(sub_100012960(&qword_1001E0EE8) - 8);
  uint64_t v7 = v2 + ((v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a2(v2 + v4, v7);
}

uint64_t sub_1000CB980(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CB9C8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *(void *)a1 = *a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    uint64_t v9 = a2[7];
    uint64_t v10 = a2[8];
    char v11 = *((unsigned char *)a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10002AE28(v9, v10, v11);
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v10;
    *(unsigned char *)(a1 + 72) = v11;
    uint64_t v12 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v12;
    uint64_t v13 = a3[11];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void (**)(void *, const void *, uint64_t))(v17 + 16);
    swift_bridgeObjectRetain();
    v18(v14, v15, v16);
    uint64_t v19 = a3[12];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (char *)a2 + v19;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))((uint64_t)a2 + v19, 1, v16))
    {
      uint64_t v22 = sub_100012960(&qword_1001E12F0);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      v18(v20, v21, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
    }
    uint64_t v24 = a3[13];
    uint64_t v25 = (void *)(a1 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000CBBDC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002AD9C(*(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = a1 + *(int *)(a2 + 48);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CBCF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  char v10 = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002AE28(v8, v9, v10);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = a3[11];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(void *, const void *, uint64_t))(v16 + 16);
  swift_bridgeObjectRetain();
  v17(v13, v14, v15);
  uint64_t v18 = a3[12];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a2 + v18, 1, v15))
  {
    uint64_t v21 = sub_100012960(&qword_1001E12F0);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    v17(v19, v20, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
  }
  uint64_t v22 = a3[13];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000CBEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 72);
  sub_10002AE28(v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  char v11 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 72) = v8;
  sub_10002AD9C(v9, v10, v11);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v27 = *(void (**)(void *, const void *, uint64_t))(v16 + 24);
  v27(v13, v14, v15);
  uint64_t v28 = a3;
  uint64_t v17 = *(int *)(a3 + 48);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(a3) = v20((const void *)(a1 + v17), 1, v15);
  int v21 = v20(v19, 1, v15);
  if (!a3)
  {
    if (!v21)
    {
      v27(v18, v19, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_100012960(&qword_1001E12F0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v18, v19, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
LABEL_7:
  uint64_t v23 = *(int *)(v28 + 52);
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CC148(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  char v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v12 = a3[12];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2 + v12, 1, v9))
  {
    uint64_t v15 = sub_100012960(&qword_1001E12F0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000CC2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  char v8 = *(unsigned char *)(a2 + 72);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  char v11 = *(unsigned char *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = v8;
  sub_10002AD9C(v9, v10, v11);
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 44);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v30 = *(void (**)(void *, const void *, uint64_t))(v17 + 40);
  v30(v14, v15, v16);
  uint64_t v31 = a3;
  uint64_t v18 = *(int *)(a3 + 48);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  int v21 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(a3) = v21((const void *)(a1 + v18), 1, v16);
  int v22 = v21(v20, 1, v16);
  if (!a3)
  {
    if (!v22)
    {
      v30(v19, v20, v16);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v23 = sub_100012960(&qword_1001E12F0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v19, v20, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
LABEL_7:
  uint64_t v24 = *(int *)(v31 + 52);
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CC520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CC534);
}

uint64_t sub_1000CC534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100012960(&qword_1001E12F0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 48);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000CC664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CC678);
}

uint64_t sub_1000CC678(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100012960(&qword_1001E12F0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 48);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000CC7A8()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_1000CC8B8();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000CC8B8()
{
  if (!qword_1001E3770)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001E3770);
    }
  }
}

uint64_t destroy for LogKey.Representation(uint64_t a1)
{
  return sub_10002AD9C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s20AttributionKitCommon6LogKeyV14RepresentationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10002AE28(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ConversionBiomeEvent.PublisherType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10002AE28(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10002AD9C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ConversionBiomeEvent.PublisherType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_10002AD9C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversionBiomeEvent.PublisherType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversionBiomeEvent.PublisherType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000CCA9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000CCAA4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConversionBiomeEvent.PublisherType()
{
  return &type metadata for ConversionBiomeEvent.PublisherType;
}

uint64_t sub_1000CCAC8()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1000CCB70(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1000CCC60(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_1000CCCDC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t sub_1000CCD68(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 40) + a1) = *(unsigned char *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t sub_1000CCDF4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 32) + a1) = *(unsigned char *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t sub_1000CCE80(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 24) + a1) = *(unsigned char *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t sub_1000CCF0C(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 - v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v6 < 0xFE)
      {
        unsigned int v16 = *((unsigned __int8 *)a1 + v8);
        if (v16 >= 2) {
          return v16 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        uint64_t v15 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);
        return v15(a1);
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1000CD0E4(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = v10 + 1;
  if (a3 <= v9)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v13 = ~v9 + a2;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v10 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1000CD344);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 < 0xFE)
        {
          a1[v10] = a2 + 1;
        }
        else
        {
          uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for SQLiteOrderedProperty()
{
  return sub_10005A688();
}

uint64_t sub_1000CD384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

unsigned char *sub_1000CD38C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CD458);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for SQLiteOrderedProperty.Direction()
{
  return sub_10005A688();
}

uint64_t sub_1000CD498()
{
  return swift_getWitnessTable();
}

BOOL sub_1000CD4B4(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1000CD4C4(uint64_t a1, char a2)
{
}

Swift::Int sub_1000CD4EC(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000CD534(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000CD4B4(*a1, *a2);
}

Swift::Int sub_1000CD540()
{
  return sub_1000CD4EC(*v0);
}

void sub_1000CD548(uint64_t a1)
{
  sub_1000CD4C4(a1, *v1);
}

Swift::Int sub_1000CD550()
{
  Hasher.init(_seed:)();
  sub_1000CD4C4((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t destroy for PostbackUpdateTestingService(id *a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 15));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 23));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 28));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 33));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 38));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 43));
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 49));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 54));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 59));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 70));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 75));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 83));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 88));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 93));

  return swift_release();
}

uint64_t initializeWithCopy for PostbackUpdateTestingService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  unsigned int v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v10 = *(void **)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v9;
  unint64_t v51 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v51;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  uint64_t v53 = *(void **)(a2 + 112);
  *(void *)(a1 + 112) = v53;
  uint64_t v54 = a2 + 120;
  long long v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v12;
  uint64_t v52 = v12;
  unint64_t v50 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  swift_bridgeObjectRetain();
  id v13 = v6;
  swift_bridgeObjectRetain();
  id v14 = v7;
  swift_bridgeObjectRetain();
  id v15 = v10;
  swift_bridgeObjectRetain();
  id v16 = v51;
  swift_bridgeObjectRetain();
  id v17 = v53;
  v50(a1 + 120, v54, v52);
  uint64_t v18 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v18;
  uint64_t v19 = *(void **)(a2 + 176);
  *(void *)(a1 + 176) = v19;
  long long v20 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 208) = v20;
  uint64_t v21 = v20;
  int v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8);
  swift_bridgeObjectRetain();
  id v23 = v19;
  v22(a1 + 184, a2 + 184, v21);
  long long v24 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 248) = v24;
  (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 224, a2 + 224);
  long long v25 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 288) = v25;
  (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 264, a2 + 264);
  uint64_t v26 = *(void *)(a2 + 328);
  uint64_t v27 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = v26;
  *(void *)(a1 + 336) = v27;
  (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1 + 304, a2 + 304);
  long long v28 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 368) = v28;
  (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 344, a2 + 344);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  long long v29 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 416) = v29;
  uint64_t v30 = v29;
  uint64_t v31 = **(void (***)(uint64_t, uint64_t, uint64_t))(v29 - 8);
  swift_bridgeObjectRetain();
  v31(a1 + 392, a2 + 392, v30);
  uint64_t v32 = *(void *)(a2 + 456);
  uint64_t v33 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = v32;
  *(void *)(a1 + 464) = v33;
  (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1 + 432, a2 + 432);
  long long v34 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 496) = v34;
  (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 472, a2 + 472);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  uint64_t v35 = *(void **)(a2 + 528);
  *(void *)(a1 + 528) = v35;
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  uint64_t v36 = *(void **)(a2 + 552);
  *(void *)(a1 + 552) = v36;
  uint64_t v37 = *(void *)(a2 + 584);
  *(void *)(a1 + 584) = v37;
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  uint64_t v38 = **(void (***)(uint64_t, uint64_t, uint64_t))(v37 - 8);
  swift_bridgeObjectRetain();
  id v39 = v35;
  swift_bridgeObjectRetain();
  id v40 = v36;
  v38(a1 + 560, a2 + 560, v37);
  long long v41 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 624) = v41;
  (**(void (***)(uint64_t, uint64_t))(v41 - 8))(a1 + 600, a2 + 600);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  char v42 = *(void **)(a2 + 656);
  *(void *)(a1 + 656) = v42;
  long long v43 = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 688) = v43;
  uint64_t v44 = v43;
  uint64_t v45 = **(void (***)(uint64_t, uint64_t, uint64_t))(v43 - 8);
  swift_bridgeObjectRetain();
  id v46 = v42;
  v45(a1 + 664, a2 + 664, v44);
  uint64_t v47 = *(void *)(a2 + 728);
  *(void *)(a1 + 728) = v47;
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  (**(void (***)(uint64_t, uint64_t))(v47 - 8))(a1 + 704, a2 + 704);
  long long v48 = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 768) = v48;
  (**(void (***)(uint64_t, uint64_t))(v48 - 8))(a1 + 744, a2 + 744);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for PostbackUpdateTestingService(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = (uint64_t)v4;
  id v6 = v4;

  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a2[5];
  uint64_t v8 = (void *)a1[5];
  a1[5] = (uint64_t)v7;
  id v9 = v7;

  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)a2[8];
  uint64_t v11 = (void *)a1[8];
  a1[8] = (uint64_t)v10;
  id v12 = v10;

  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v13 = (void *)a2[11];
  id v14 = (void *)a1[11];
  a1[11] = (uint64_t)v13;
  id v15 = v13;

  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v16 = (void *)a2[14];
  id v17 = (void *)a1[14];
  a1[14] = (uint64_t)v16;
  id v18 = v16;

  sub_100017B78(a1 + 15, a2 + 15);
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = (void *)a2[22];
  long long v20 = (void *)a1[22];
  a1[22] = (uint64_t)v19;
  id v21 = v19;

  sub_100017B78(a1 + 23, a2 + 23);
  sub_100017B78(a1 + 28, a2 + 28);
  sub_100017B78(a1 + 33, a2 + 33);
  sub_100017B78(a1 + 38, a2 + 38);
  sub_100017B78(a1 + 43, a2 + 43);
  a1[48] = a2[48];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100017B78(a1 + 49, a2 + 49);
  sub_100017B78(a1 + 54, a2 + 54);
  sub_100017B78(a1 + 59, a2 + 59);
  a1[64] = a2[64];
  a1[65] = a2[65];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v22 = (void *)a2[66];
  id v23 = (void *)a1[66];
  a1[66] = (uint64_t)v22;
  id v24 = v22;

  a1[67] = a2[67];
  a1[68] = a2[68];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v25 = (void *)a2[69];
  uint64_t v26 = (void *)a1[69];
  a1[69] = (uint64_t)v25;
  id v27 = v25;

  sub_100017B78(a1 + 70, a2 + 70);
  sub_100017B78(a1 + 75, a2 + 75);
  a1[80] = a2[80];
  a1[81] = a2[81];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v28 = (void *)a2[82];
  long long v29 = (void *)a1[82];
  a1[82] = (uint64_t)v28;
  id v30 = v28;

  sub_100017B78(a1 + 83, a2 + 83);
  sub_100017B78(a1 + 88, a2 + 88);
  sub_100017B78(a1 + 93, a2 + 93);
  a1[98] = a2[98];
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for PostbackUpdateTestingService(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x318uLL);
}

uint64_t assignWithTake for PostbackUpdateTestingService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);

  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  id v13 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  id v14 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 184);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 224);
  long long v15 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v15;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 264);
  long long v16 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v16;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 304);
  long long v17 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v17;
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 344);
  long long v18 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v18;
  uint64_t v19 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v19;
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 392);
  long long v20 = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = v20;
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 432);
  long long v21 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v21;
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 472);
  long long v22 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v22;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRelease();
  id v23 = *(void **)(a1 + 528);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);

  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRelease();
  id v24 = *(void **)(a1 + 552);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 560);
  long long v25 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = v25;
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 600);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)(a1 + 656);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 664);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 704);
  long long v27 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v27;
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 744);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackUpdateTestingService(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 792)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackUpdateTestingService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 792) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 792) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackUpdateTestingService()
{
  return &type metadata for PostbackUpdateTestingService;
}

uint64_t sub_1000CE438@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  unint64_t v2 = (void *)qword_1001E5F88;
  int v3 = self;
  id v4 = v2;
  id v5 = [v3 sharedScheduler];
  *(void *)(a1 + 144) = &type metadata for ActivityManager;
  *(void *)(a1 + 152) = &off_1001CCE58;
  uint64_t v6 = (void *)swift_allocObject();
  *(void *)(a1 + 120) = v6;
  v6[5] = &type metadata for BackgroundSystemTaskScheduler;
  v6[6] = &off_1001C30C8;
  v6[2] = v5;
  *(void *)(a1 + 208) = &type metadata for AttributionKitCanineArbiter;
  *(void *)(a1 + 216) = &off_1001C3FF8;
  uint64_t v7 = qword_1001E0880;
  id v8 = v4;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1001E5F50;
  uint64_t v24 = type metadata accessor for TaskGreyhound();
  *(void *)(a1 + 248) = v24;
  *(void *)(a1 + 256) = &off_1001C2490;
  *(void *)(a1 + 224) = v9;
  *(void *)(a1 + 288) = &type metadata for LaunchServicesRecordFactory;
  *(void *)(a1 + 296) = &off_1001C6D08;
  *(void *)(a1 + 328) = &type metadata for AMSDogBag;
  *(void *)(a1 + 336) = &off_1001CAA18;
  swift_retain();
  id v10 = [v3 sharedScheduler];
  long long v27 = &type metadata for ActivityManager;
  long long v28 = &off_1001CCE58;
  uint64_t v11 = (void *)swift_allocObject();
  v26[0] = v11;
  v11[5] = &type metadata for BackgroundSystemTaskScheduler;
  v11[6] = &off_1001C30C8;
  v11[2] = v10;
  sub_100087C5C((uint64_t)v26, a1 + 344);
  *(void *)(a1 + 416) = &type metadata for AppStoreDaemonSKANInterop;
  *(void *)(a1 + 424) = &off_1001CA740;
  uint64_t v12 = (void *)qword_1001E5F88;
  *(void *)(a1 + 456) = &type metadata for AggregatedReportingManager;
  *(void *)(a1 + 464) = &off_1001C7F28;
  id v13 = (void *)swift_allocObject();
  *(void *)(a1 + 432) = v13;
  unsigned char v13[8] = &type metadata for AMSDogBag;
  v13[9] = &off_1001CAA18;
  v13[13] = &type metadata for BiomeEventStreamDog;
  v13[14] = &off_1001C8C58;
  v13[2] = 0x74735F6E656B6F74;
  v13[3] = 0xEB0000000065726FLL;
  void v13[4] = v12;
  uint64_t v14 = qword_1001E0940;
  id v15 = v12;
  if (v14 == -1)
  {
    long long v16 = v15;
  }
  else
  {
    swift_once();
    long long v16 = (void *)qword_1001E5F88;
  }
  uint64_t v17 = qword_1001E60E8;
  uint64_t v18 = type metadata accessor for SnoutManager();
  *(void *)(a1 + 496) = v18;
  *(void *)(a1 + 504) = &off_1001CB0F8;
  *(void *)(a1 + 472) = v17;
  strcpy((char *)a1, "postback_store");
  *(unsigned char *)(a1 + 15) = -18;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = 0x63616274736F6867;
  *(void *)(a1 + 32) = 0xEF65726F74735F6BLL;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0xD000000000000010;
  *(void *)(a1 + 56) = 0x8000000100185910;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = 0x74735F6E656B6F74;
  *(void *)(a1 + 80) = 0xEB0000000065726FLL;
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = 0xD000000000000012;
  *(void *)(a1 + 104) = 0x8000000100185930;
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 160) = 0xD000000000000011;
  *(void *)(a1 + 168) = 0x8000000100185AE0;
  *(void *)(a1 + 176) = v8;
  id v19 = v16;
  swift_retain();
  sub_1000CE908((uint64_t *)(a1 + 560));
  *(void *)(a1 + 624) = &type metadata for LaunchServicesRecordFactory;
  *(void *)(a1 + 632) = &off_1001C6D08;
  uint64_t v20 = qword_1001E5F50;
  *(void *)(a1 + 688) = v24;
  *(void *)(a1 + 696) = &off_1001C2490;
  *(void *)(a1 + 664) = v20;
  *(void *)(a1 + 728) = &type metadata for AMSDogBag;
  *(void *)(a1 + 736) = &off_1001CAA18;
  *(void *)(a1 + 768) = v18;
  *(void *)(a1 + 776) = &off_1001CB0F8;
  *(void *)(a1 + 744) = v17;
  *(void *)(a1 + 512) = 0x74735F6E656B6F74;
  *(void *)(a1 + 520) = 0xEB0000000065726FLL;
  *(void *)(a1 + 528) = v19;
  *(void *)(a1 + 536) = 0xD000000000000010;
  *(void *)(a1 + 544) = 0x8000000100185910;
  *(void *)(a1 + 552) = v19;
  *(void *)(a1 + 640) = 0xD000000000000012;
  *(void *)(a1 + 648) = 0x8000000100185930;
  *(void *)(a1 + 656) = v19;
  long long v27 = &type metadata for AMSDogBag;
  long long v28 = &off_1001CAA18;
  sub_10008FDEC((uint64_t)v26, (uint64_t)v25);
  id v21 = v19;
  swift_retain();
  swift_retain();
  long long v22 = sub_10013C000(0x74735F74756F6E73, 0xEB0000000065726FLL, v21, (uint64_t)v25, 0);
  uint64_t result = sub_10008FE48((uint64_t)v26);
  *(void *)(a1 + 784) = v22;
  return result;
}

uint64_t sub_1000CE908@<X0>(uint64_t *a1@<X8>)
{
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  unint64_t v2 = (void *)qword_1001E5F88;
  int v3 = self;
  id v4 = v2;
  id v5 = [v3 sharedScheduler];
  a1[3] = (uint64_t)&type metadata for PostbackManager;
  a1[4] = (uint64_t)&off_1001C9C90;
  uint64_t v6 = swift_allocObject();
  *a1 = v6;
  *(void *)(v6 + 160) = &type metadata for ActivityManager;
  *(void *)(v6 + 168) = &off_1001CCE58;
  uint64_t v7 = (void *)swift_allocObject();
  *(void *)(v6 + 136) = v7;
  _OWORD v7[5] = &type metadata for BackgroundSystemTaskScheduler;
  v7[6] = &off_1001C30C8;
  _OWORD v7[2] = v5;
  *(void *)(v6 + 224) = &type metadata for AttributionKitCanineArbiter;
  *(void *)(v6 + 232) = &off_1001C3FF8;
  uint64_t v8 = qword_1001E0880;
  id v9 = v4;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1001E5F50;
  *(void *)(v6 + 264) = type metadata accessor for TaskGreyhound();
  *(void *)(v6 + 272) = &off_1001C2490;
  *(void *)(v6 + 240) = v10;
  *(void *)(v6 + 304) = &type metadata for LaunchServicesRecordFactory;
  *(void *)(v6 + 312) = &off_1001C6D08;
  *(void *)(v6 + 344) = &type metadata for AMSDogBag;
  *(void *)(v6 + 352) = &off_1001CAA18;
  swift_retain();
  id v11 = [v3 sharedScheduler];
  v19[3] = &type metadata for ActivityManager;
  v19[4] = &off_1001CCE58;
  uint64_t v12 = (void *)swift_allocObject();
  v19[0] = v12;
  v12[5] = &type metadata for BackgroundSystemTaskScheduler;
  v12[6] = &off_1001C30C8;
  void v12[2] = v11;
  sub_100087C5C((uint64_t)v19, v6 + 360);
  *(void *)(v6 + 432) = &type metadata for AppStoreDaemonSKANInterop;
  *(void *)(v6 + 440) = &off_1001CA740;
  id v13 = (void *)qword_1001E5F88;
  *(void *)(v6 + 472) = &type metadata for AggregatedReportingManager;
  *(void *)(v6 + 480) = &off_1001C7F28;
  uint64_t v14 = (void *)swift_allocObject();
  *(void *)(v6 + 448) = v14;
  v14[8] = &type metadata for AMSDogBag;
  v14[9] = &off_1001CAA18;
  v14[13] = &type metadata for BiomeEventStreamDog;
  v14[14] = &off_1001C8C58;
  id v14[2] = 0x74735F6E656B6F74;
  v14[3] = 0xEB0000000065726FLL;
  void v14[4] = v13;
  uint64_t v15 = qword_1001E0940;
  id v16 = v13;
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1001E60E8;
  *(void *)(v6 + 512) = type metadata accessor for SnoutManager();
  *(void *)(v6 + 520) = &off_1001CB0F8;
  *(void *)(v6 + 488) = v17;
  strcpy((char *)(v6 + 16), "postback_store");
  *(unsigned char *)(v6 + 31) = -18;
  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 40) = 0x63616274736F6867;
  *(void *)(v6 + 48) = 0xEF65726F74735F6BLL;
  *(void *)(v6 + 56) = v9;
  *(void *)(v6 + 64) = 0xD000000000000010;
  *(void *)(v6 + 72) = 0x8000000100185910;
  *(void *)(v6 + 80) = v9;
  *(void *)(v6 + 88) = 0x74735F6E656B6F74;
  *(void *)(v6 + 96) = 0xEB0000000065726FLL;
  *(void *)(v6 + 104) = v9;
  *(void *)(v6 + 112) = 0xD000000000000012;
  *(void *)(v6 + 120) = 0x8000000100185930;
  *(void *)(v6 + 128) = v9;
  *(void *)(v6 + 176) = 0xD000000000000011;
  *(void *)(v6 + 184) = 0x8000000100185AE0;
  *(void *)(v6 + 192) = v9;

  return swift_retain();
}

uint64_t sub_1000CECC0(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000CED84, 0, 0);
}

uint64_t sub_1000CED84()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1000D0968();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v4 = *(void *)(v0 + 56);
  char v5 = *(unsigned char *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 80);
  *(void *)(v0 + 136) = v7;
  uint64_t v8 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v8, v3);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[Testing service] Updating postback.", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_bridgeObjectRetain();
  sub_100086B50(v6, v7, v0 + 16);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1000CEFDC;
  return sub_1000D7968(v4, v5, 0, 0, v0 + 16);
}

uint64_t sub_1000CEFDC()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000CF168;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000CF0F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CF0F8()
{
  sub_100086398(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CF168()
{
  swift_bridgeObjectRelease();
  sub_100086398(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CF1E0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000CF2A0, 0, 0);
}

uint64_t sub_1000CF2A0()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[Testing service] Getting snout stories.", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v10 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  id v11 = (void *)swift_task_alloc();
  v0[6] = v11;
  *id v11 = v0;
  v11[1] = sub_1000CF3F4;
  return sub_1001378E0();
}

uint64_t sub_1000CF3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_1000CF51C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000CF5DC, 0, 0);
}

uint64_t sub_1000CF5DC()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetch reengagement tokens", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v10 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  id v11 = (void *)swift_task_alloc();
  v0[6] = v11;
  *id v11 = v0;
  v11[1] = sub_1000CF730;
  return sub_10009A2AC();
}

uint64_t sub_1000CF730()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000CF844(uint64_t a1, uint64_t a2)
{
  v2[61] = a1;
  v2[62] = a2;
  uint64_t v3 = type metadata accessor for Logger();
  v2[63] = v3;
  v2[64] = *(void *)(v3 - 8);
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  v2[67] = swift_task_alloc();
  return _swift_task_switch(sub_1000CF920, 0, 0);
}

uint64_t sub_1000CF920()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v29 = Logger.postback.unsafeMutableAddressor();
  id v30 = *(void (**)(uint64_t))(v2 + 16);
  v30(v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Submit conversion event", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = *(void *)(v0 + 536);
  uint64_t v8 = *(void *)(v0 + 504);
  uint64_t v7 = *(void *)(v0 + 512);

  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v32(v6, v8);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1000D0864();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v9 = *(void *)(v0 + 504);
  uint64_t v10 = *(void *)(v0 + 528);
  swift_release();
  long long v11 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 280) = v11;
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 144);
  *(unsigned char *)(v0 + 312) = *(unsigned char *)(v0 + 160);
  long long v12 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 200) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 216) = v12;
  long long v13 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 248) = v13;
  long long v14 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 168) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 184) = v14;
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v10, v29, v9);
  sub_1000D08B8(v0 + 168);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void *)(v0 + 528);
  uint64_t v19 = *(void *)(v0 + 504);
  if (v17)
  {
    uint64_t v31 = *(void *)(v0 + 528);
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    long long v21 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v0 + 432) = v21;
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 296);
    *(unsigned char *)(v0 + 464) = *(unsigned char *)(v0 + 312);
    long long v22 = *(_OWORD *)(v0 + 216);
    *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 200);
    *(_OWORD *)(v0 + 368) = v22;
    long long v23 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 400) = v23;
    long long v24 = *(_OWORD *)(v0 + 184);
    *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 168);
    *(_OWORD *)(v0 + 336) = v24;
    sub_1000D08B8(v0 + 168);
    uint64_t v25 = String.init<A>(describing:)();
    *(void *)(v0 + 480) = sub_100147668(v25, v26, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000D0910(v0 + 168);
    sub_1000D0910(v0 + 168);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Conversion event: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v32(v31, v19);
  }
  else
  {
    sub_1000D0910(v0 + 168);
    sub_1000D0910(v0 + 168);

    v32(v18, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_1000CFE98(uint64_t a1, uint64_t a2)
{
  v2[32] = a1;
  v2[33] = a2;
  uint64_t v3 = type metadata accessor for Logger();
  v2[34] = v3;
  v2[35] = *(void *)(v3 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  return _swift_task_switch(sub_1000CFF74, 0, 0);
}

uint64_t sub_1000CFF74()
{
  uint64_t v43 = v0;
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Submit purchase event", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = *(void *)(v0 + 304);
  uint64_t v11 = *(void *)(v0 + 272);
  uint64_t v10 = *(void *)(v0 + 280);

  long long v41 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v41(v9, v11);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1000D0810();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v12 = *(void *)(v0 + 272);
  uint64_t v13 = *(void *)(v0 + 296);
  swift_release();
  uint64_t v40 = *(void *)(v0 + 16);
  char v39 = *(unsigned char *)(v0 + 24);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v15 = *(void *)(v0 + 56);
  uint64_t v37 = *(void *)(v0 + 48);
  uint64_t v38 = *(void *)(v0 + 32);
  uint64_t v16 = *(void *)(v0 + 64);
  char v36 = *(unsigned char *)(v0 + 72);
  uint64_t v35 = *(void *)(v0 + 80);
  char v34 = *(unsigned char *)(v0 + 88);
  uint64_t v33 = *(void *)(v0 + 96);
  char v32 = *(unsigned char *)(v0 + 104);
  uint64_t v31 = *(void *)(v0 + 112);
  char v30 = *(unsigned char *)(v0 + 120);
  v5(v13, v4, v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  BOOL v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v21 = *(void *)(v0 + 272);
  if (v19)
  {
    uint64_t v29 = *(void *)(v0 + 296);
    long long v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)long long v22 = 136315138;
    *(void *)(v0 + 128) = v40;
    *(unsigned char *)(v0 + 136) = v39;
    *(void *)(v0 + 144) = v38;
    *(void *)(v0 + 152) = v14;
    *(void *)(v0 + 160) = v37;
    *(void *)(v0 + 168) = v15;
    *(void *)(v0 + 176) = v16;
    *(unsigned char *)(v0 + 184) = v36;
    *(void *)(v0 + 192) = v35;
    *(unsigned char *)(v0 + 200) = v34;
    *(void *)(v0 + 208) = v33;
    *(unsigned char *)(v0 + 216) = v32;
    *(void *)(v0 + 224) = v31;
    *(unsigned char *)(v0 + 232) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = String.init<A>(describing:)();
    *(void *)(v0 + 248) = sub_100147668(v23, v24, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Purchase event: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = v29;
    uint64_t v26 = v21;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v25 = v20;
    uint64_t v26 = v21;
  }
  v41(v25, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_1000D0538(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for Logger();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000D05F8, 0, 0);
}

uint64_t sub_1000D05F8()
{
  BOOL v19 = v0;
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v15 = v0[6];
    unint64_t v7 = v0[4];
    uint64_t v16 = v0[5];
    uint64_t v17 = v0[7];
    uint64_t v8 = v0[3];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100147668(v8, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Clear biome for event: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  }
  else
  {
    uint64_t v11 = v0[6];
    uint64_t v10 = v0[7];
    uint64_t v12 = v0[5];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

unint64_t sub_1000D0810()
{
  unint64_t result = qword_1001E38D0;
  if (!qword_1001E38D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E38D0);
  }
  return result;
}

unint64_t sub_1000D0864()
{
  unint64_t result = qword_1001E38E0;
  if (!qword_1001E38E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E38E0);
  }
  return result;
}

uint64_t sub_1000D08B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D0910(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000D0968()
{
  unint64_t result = qword_1001E3900;
  if (!qword_1001E3900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3900);
  }
  return result;
}

uint64_t sub_1000D09BC()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000D09F4()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1000D0A44()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 17));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 25));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 30));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 35));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 40));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 45));
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 51));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 56));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 61));

  return _swift_deallocObject(v0, 528, 7);
}

uint64_t sub_1000D0B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v13[0] = 0x696C702E6F666E49;
  v13[1] = 0xEA00000000007473;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  sub_10003985C();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_1000D0D24()
{
  id v1 = [*v0 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

id sub_1000D0D84()
{
  id v1 = [*v0 iTunesMetadata];
  id v2 = [v1 storeItemIdentifier];

  return v2;
}

uint64_t sub_1000D0DD4()
{
  id v1 = [*v0 bundleIdentifier];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000D0E3C()
{
  id v1 = [*v0 iTunesMetadata];
  id v2 = [v1 distributorInfo];

  id v3 = [v2 distributorID];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1000D0EE8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E3930);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000D2A98();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 24);
    uint64_t v12 = *(void *)(v3 + 40);
    v10[15] = 2;
    sub_1000D2AEC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D1090(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[1] = a4;
  uint64_t v6 = sub_100012960(&qword_1001E39B0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000D3818();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000D1204(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100012960(&qword_1001E3960);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000D3158();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v8 = v2[1];
  v10[0] = *v2;
  v10[1] = v8;
  v10[2] = v2[2];
  sub_1000D3200();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000D1354(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E39D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_1000D3C6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000D14DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100106524(*a1, *a2);
}

Swift::Int sub_1000D14E8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000D1594()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000D162C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000D16D4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000D2B40(*a1);
  *a2 = result;
  return result;
}

void sub_1000D1704(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xEF7265696669746ELL;
  uint64_t v5 = 0x6564692D6D657469;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E692D6E656B6F74;
    unint64_t v4 = 0xEA00000000006F66;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 6582128;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000D176C()
{
  uint64_t v1 = 0x6564692D6D657469;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E692D6E656B6F74;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 6582128;
  }
}

unint64_t sub_1000D17D0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000D2B40(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D17F8(uint64_t a1)
{
  unint64_t v2 = sub_1000D2A98();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1834(uint64_t a1)
{
  unint64_t v2 = sub_1000D2A98();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000D1870@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000D2B8C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1000D18B4(void *a1)
{
  return sub_1000D0EE8(a1);
}

uint64_t sub_1000D18CC(char *a1, char *a2)
{
  return sub_100104B80(*a1, *a2);
}

Swift::Int sub_1000D18D8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000D196C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000D19EC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000D1A7C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1F08, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1000D1ADC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x2D6465646E696C62;
  if (*v1) {
    uint64_t v2 = 0x6D617473656D6974;
  }
  unint64_t v3 = 0xEF746E656D656C65;
  if (*v1) {
    unint64_t v3 = 0xE900000000000070;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000D1B2C()
{
  if (*v0) {
    return 0x6D617473656D6974;
  }
  else {
    return 0x2D6465646E696C62;
  }
}

uint64_t sub_1000D1B78@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1F08, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1000D1BDC(uint64_t a1)
{
  unint64_t v2 = sub_1000D3818();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1C18(uint64_t a1)
{
  unint64_t v2 = sub_1000D3818();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1C54@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000D2DDC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1000D1C84(void *a1)
{
  return sub_1000D1090(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1000D1CA4@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1F58, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

uint64_t sub_1000D1CF8@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1F90, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1000D1D50(uint64_t a1)
{
  unint64_t v2 = sub_1000D3158();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1D8C(uint64_t a1)
{
  unint64_t v2 = sub_1000D3158();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000D1DC8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000D2FC8(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1000D1E0C(void *a1)
{
  return sub_1000D1204(a1);
}

uint64_t sub_1000D1E24()
{
  uint64_t v1 = 0x666F6F7270;
  if (*v0 != 1) {
    uint64_t v1 = 0x6369666974726563;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746E656D656C65;
  }
}

uint64_t sub_1000D1E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D386C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D1EAC(uint64_t a1)
{
  unint64_t v2 = sub_1000D3C6C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1EE8(uint64_t a1)
{
  unint64_t v2 = sub_1000D3C6C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000D1F24@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000D39D4(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1000D1F68(void *a1)
{
  return sub_1000D1354(a1);
}

uint64_t sub_1000D1F80(uint64_t a1, uint64_t a2)
{
  v2[14] = a1;
  v2[15] = a2;
  sub_100012960(&qword_1001E1170);
  v2[16] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000D2070, 0, 0);
}

uint64_t sub_1000D2070()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  URL.init(string:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100020764(*(void *)(v0 + 128));
    sub_1000D2774();
    swift_allocError();
    *unint64_t v4 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    uint64_t v5 = *(_OWORD **)(v0 + 120);
    (*(void (**)(void, void, void))(*(void *)(v0 + 144) + 32))(*(void *)(v0 + 152), *(void *)(v0 + 128), *(void *)(v0 + 136));
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    long long v7 = v5[1];
    long long v6 = v5[2];
    *(_OWORD *)(v0 + 16) = *v5;
    *(_OWORD *)(v0 + 32) = v7;
    *(_OWORD *)(v0 + 48) = v6;
    sub_1000D27C8();
    uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    *(void *)(v0 + 160) = v8;
    *(void *)(v0 + 168) = v9;
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    swift_release();
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, uint64_t))((char *)&dword_1001E2680
                                                                                          + dword_1001E2680);
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000D22BC;
    uint64_t v15 = *(void *)(v0 + 152);
    return v16(v15, v12, v13, 1, 2, 0, 0);
  }
}

uint64_t sub_1000D22BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[23] = a1;
  v5[24] = a2;
  v5[25] = a3;
  v5[26] = v3;
  swift_task_dealloc();
  if (v3) {
    long long v6 = sub_1000D26D4;
  }
  else {
    long long v6 = sub_1000D23D4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000D23D4()
{
  if ([*(id *)(v0 + 200) statusCode] != (id)200)
  {
    if (qword_1001E08E8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100012E74(v10, (uint64_t)qword_1001E5FE0);
    long long v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Token exchange call has failed", v13, 2u);
      swift_slowDealloc();
    }
    unint64_t v14 = *(void *)(v0 + 192);
    uint64_t v15 = *(void **)(v0 + 200);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v18 = *(void *)(v0 + 160);
    unint64_t v17 = *(void *)(v0 + 168);
    uint64_t v19 = *(void *)(v0 + 144);
    uint64_t v28 = *(void *)(v0 + 152);
    uint64_t v20 = *(void *)(v0 + 136);

    sub_1000D2774();
    swift_allocError();
    unsigned char *v21 = 1;
    swift_willThrow();

    sub_100020930(v16, v14);
    sub_100020930(v18, v17);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v28, v20);
    goto LABEL_9;
  }
  uint64_t v1 = *(void *)(v0 + 208);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1000D281C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)(v0 + 192);
  unint64_t v4 = *(void **)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 160);
  unint64_t v6 = *(void *)(v0 + 168);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 136);
  if (v2)
  {
    (*(void (**)(void, uint64_t))(v8 + 8))(*(void *)(v0 + 152), v9);
    swift_release();

    sub_100020930(v5, v3);
    sub_100020930(v7, v6);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    long long v22 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_10;
  }
  uint64_t v24 = *(void *)(v0 + 112);
  (*(void (**)(void, uint64_t))(v8 + 8))(*(void *)(v0 + 152), v9);
  swift_release();

  sub_100020930(v5, v3);
  sub_100020930(v7, v6);
  long long v27 = *(_OWORD *)(v0 + 80);
  long long v29 = *(_OWORD *)(v0 + 64);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v26 = *(void *)(v0 + 104);
  swift_task_dealloc();
  swift_task_dealloc();
  *(_OWORD *)uint64_t v24 = v29;
  *(_OWORD *)(v24 + 16) = v27;
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v26;
  long long v22 = *(uint64_t (**)(void))(v0 + 8);
LABEL_10:
  return v22();
}

uint64_t sub_1000D26D4()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  sub_100020930(v0[20], v0[21]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

unint64_t sub_1000D2774()
{
  unint64_t result = qword_1001E3910;
  if (!qword_1001E3910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3910);
  }
  return result;
}

unint64_t sub_1000D27C8()
{
  unint64_t result = qword_1001E3918;
  if (!qword_1001E3918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3918);
  }
  return result;
}

unint64_t sub_1000D281C()
{
  unint64_t result = qword_1001E3920;
  if (!qword_1001E3920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3920);
  }
  return result;
}

ValueMetadata *type metadata accessor for PODExchangeResponse()
{
  return &type metadata for PODExchangeResponse;
}

uint64_t destroy for PODExchangeRequest()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PODExchangeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PODExchangeRequest(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for PODExchangeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for PODExchangeRequest()
{
  return &type metadata for PODExchangeRequest;
}

ValueMetadata *type metadata accessor for PODExchangeTaskError()
{
  return &type metadata for PODExchangeTaskError;
}

unint64_t sub_1000D2A18(uint64_t a1)
{
  unint64_t result = sub_1000D2774();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D2A44()
{
  unint64_t result = qword_1001E3928;
  if (!qword_1001E3928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3928);
  }
  return result;
}

unint64_t sub_1000D2A98()
{
  unint64_t result = qword_1001E3938;
  if (!qword_1001E3938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3938);
  }
  return result;
}

unint64_t sub_1000D2AEC()
{
  unint64_t result = qword_1001E3940;
  if (!qword_1001E3940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3940);
  }
  return result;
}

unint64_t sub_1000D2B40(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1EA0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000D2B8C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E3970);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000D2A98();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  LOBYTE(v17) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  LOBYTE(v17) = 1;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 2;
  sub_1000D3254();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v17;
  uint64_t v12 = v18;
  uint64_t v14 = v19;
  swift_bridgeObjectRetain();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v16;
  a2[3] = v13;
  a2[4] = v12;
  a2[5] = v14;
  return result;
}

uint64_t sub_1000D2DDC(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E39D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_100012D78(a1, a1[3]);
  sub_1000D3818();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1000D2FC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E3948);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000D3158();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  sub_1000D31AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v13 = v16;
  long long v14 = v15;
  uint64_t v9 = v17;
  uint64_t v10 = v18;
  uint64_t result = _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  long long v12 = v13;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v12;
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v10;
  return result;
}

unint64_t sub_1000D3158()
{
  unint64_t result = qword_1001E3950;
  if (!qword_1001E3950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3950);
  }
  return result;
}

unint64_t sub_1000D31AC()
{
  unint64_t result = qword_1001E3958;
  if (!qword_1001E3958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3958);
  }
  return result;
}

unint64_t sub_1000D3200()
{
  unint64_t result = qword_1001E3968;
  if (!qword_1001E3968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3968);
  }
  return result;
}

unint64_t sub_1000D3254()
{
  unint64_t result = qword_1001E3978;
  if (!qword_1001E3978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3978);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PODExchangeResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000D3344);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PODExchangeResponse.CodingKeys()
{
  return &type metadata for PODExchangeResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for PODExchangeRequest.CodingKeys()
{
  return &type metadata for PODExchangeRequest.CodingKeys;
}

uint64_t _s20AttributionKitDaemon13EvaluatedInfoVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s20AttributionKitDaemon13EvaluatedInfoVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s20AttributionKitDaemon13EvaluatedInfoVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s20AttributionKitDaemon13EvaluatedInfoVwta_0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EvaluatedInfo()
{
  return &type metadata for EvaluatedInfo;
}

void *sub_1000D3528(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BlindInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for BlindInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for BlindInfo()
{
  return &type metadata for BlindInfo;
}

unint64_t sub_1000D360C()
{
  unint64_t result = qword_1001E3980;
  if (!qword_1001E3980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3980);
  }
  return result;
}

unint64_t sub_1000D3664()
{
  unint64_t result = qword_1001E3988;
  if (!qword_1001E3988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3988);
  }
  return result;
}

unint64_t sub_1000D36BC()
{
  unint64_t result = qword_1001E3990;
  if (!qword_1001E3990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3990);
  }
  return result;
}

unint64_t sub_1000D3714()
{
  unint64_t result = qword_1001E3998;
  if (!qword_1001E3998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3998);
  }
  return result;
}

unint64_t sub_1000D376C()
{
  unint64_t result = qword_1001E39A0;
  if (!qword_1001E39A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E39A0);
  }
  return result;
}

unint64_t sub_1000D37C4()
{
  unint64_t result = qword_1001E39A8;
  if (!qword_1001E39A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E39A8);
  }
  return result;
}

unint64_t sub_1000D3818()
{
  unint64_t result = qword_1001E39B8;
  if (!qword_1001E39B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E39B8);
  }
  return result;
}

uint64_t sub_1000D386C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E656D656C65 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x666F6F7270 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6369666974726563 && a2 == 0xEB00000000657461)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000D39D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E39C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_1000D3C6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  return result;
}

unint64_t sub_1000D3C6C()
{
  unint64_t result = qword_1001E39C8;
  if (!qword_1001E39C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E39C8);
  }
  return result;
}

unsigned char *_s20AttributionKitDaemon18PODExchangeRequestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D3D8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EvaluatedInfo.CodingKeys()
{
  return &type metadata for EvaluatedInfo.CodingKeys;
}

unsigned char *_s20AttributionKitDaemon20PODExchangeTaskErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D3E90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlindInfo.CodingKeys()
{
  return &type metadata for BlindInfo.CodingKeys;
}

unint64_t sub_1000D3ECC()
{
  unint64_t result = qword_1001E39E0;
  if (!qword_1001E39E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E39E0);
  }
  return result;
}

unint64_t sub_1000D3F24()
{
  unint64_t result = qword_1001E39E8;
  if (!qword_1001E39E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E39E8);
  }
  return result;
}

unint64_t sub_1000D3F7C()
{
  unint64_t result = qword_1001E39F0;
  if (!qword_1001E39F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E39F0);
  }
  return result;
}

unint64_t sub_1000D3FD4()
{
  unint64_t result = qword_1001E39F8;
  if (!qword_1001E39F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E39F8);
  }
  return result;
}

unint64_t sub_1000D402C()
{
  unint64_t result = qword_1001E3A00;
  if (!qword_1001E3A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3A00);
  }
  return result;
}

unint64_t sub_1000D4084()
{
  unint64_t result = qword_1001E3A08;
  if (!qword_1001E3A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3A08);
  }
  return result;
}

void sub_1000D40D8()
{
  id v1 = [v0 connection];
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v4 = [self predicateWithProperty:v2 equalToValue:v3];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v5 = sub_10011DEC4(v1, v4, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v5 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for GhostbackDatabaseTransaction()
{
  return self;
}

uint64_t sub_1000D430C()
{
  id v2 = [v0 connection];
  id v3 = sub_10011C244(v2, 0, (uint64_t)&off_1001BFE38, 0, 0);
  v5[2] = &v6;
  unsigned int v6 = _swiftEmptyArrayStorage;
  sub_10012792C((uint64_t)sub_1000D4C48, (uint64_t)v5, v3);

  if (v1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return (uint64_t)v6;
  }
}

void sub_1000D43E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = v2;
  uint64_t v7 = sub_100012960(&qword_1001E3A68);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012960(&qword_1001E3A60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  NSString v11 = String._bridgeToObjectiveC()();
  uint64_t v24 = a1;
  uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v13 = [self predicateWithProperty:v11 equalToValue:v12];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v13;
  uint64_t v14 = self;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 isNullPredicateWithProperty:v15];

  *(void *)(inited + 40) = v16;
  uint64_t v24 = inited;
  specialized Array._endMutation()();
  id v17 = sub_1000485A4(v24);
  swift_bridgeObjectRelease();
  id v18 = [v4 connection];
  id v19 = v17;
  id v20 = sub_10011C244(v18, v17, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  uint64_t v21 = type metadata accessor for SnoutStoryModel();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
  uint64_t v23 = v9;
  sub_10012792C((uint64_t)sub_1000D4B78, (uint64_t)v22, v20);
  if (v3) {
    sub_1000D4B80((uint64_t)v9);
  }
  else {
    sub_1000D4BE0((uint64_t)v9, a2);
  }
}

uint64_t sub_1000D468C()
{
  id v2 = v0;
  sub_100012960(&qword_1001E3A60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100178B40;
  NSString v4 = String._bridgeToObjectiveC()();
  LOBYTE(v18) = 0;
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  unsigned int v6 = self;
  id v7 = [v6 predicateWithProperty:v4 equalToValue:v5];
  swift_unknownObjectRelease();

  *(void *)(inited + 32) = v7;
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v10 = v9 * 1000.0;
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v10 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v10 >= 1.84467441e19)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v6 predicateWithProperty:v11 value:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() comparisonType:4];
  swift_unknownObjectRelease();

  *(void *)(inited + 40) = v12;
  specialized Array._endMutation()();
  id v13 = sub_1000485A4(inited);
  swift_bridgeObjectRelease();
  id v14 = [v2 connection];
  id v15 = v13;
  id v16 = sub_10011C244(v14, v13, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  id v18 = _swiftEmptyArrayStorage;
  __chkstk_darwin(v16);
  v17[2] = &v18;
  sub_10012792C((uint64_t)sub_1000D4B70, (uint64_t)v17, v16);
  if (v1)
  {

    return swift_bridgeObjectRelease();
  }
  else
  {

    return (uint64_t)v18;
  }
}

uint64_t sub_1000D4958()
{
  id v2 = [v0 connection];
  id v3 = sub_10011C5F0(v2, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  v5[2] = &v6;
  unsigned int v6 = _swiftEmptyArrayStorage;
  sub_100127D0C((uint64_t)sub_1000D4B10, (uint64_t)v5, v3);

  if (v1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return (uint64_t)v6;
  }
}

id sub_1000D4AB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SnoutDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SnoutDatabaseSession()
{
  return self;
}

double sub_1000D4B10(_OWORD *a1)
{
  objc_super v2 = *(void ***)(v1 + 16);
  long long v3 = a1[11];
  v10[10] = a1[10];
  v11[0] = v3;
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)a1 + 185);
  long long v4 = a1[7];
  v10[6] = a1[6];
  v10[7] = v4;
  long long v5 = a1[9];
  v10[8] = a1[8];
  v10[9] = v5;
  long long v6 = a1[3];
  v10[2] = a1[2];
  _OWORD v10[3] = v6;
  long long v7 = a1[5];
  v10[4] = a1[4];
  v10[5] = v7;
  long long v8 = a1[1];
  v10[0] = *a1;
  v10[1] = v8;
  *(void *)&double result = sub_10008F82C((uint64_t)v10, v2).n128_u64[0];
  return result;
}

uint64_t sub_1000D4B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008E154(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_1000D4B78(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10012728C(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1000D4B80(uint64_t a1)
{
  uint64_t v2 = sub_100012960(&qword_1001E3A68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D4BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E3A68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000D4C4C()
{
  id v1 = [v0 connection];
  Date.timeIntervalSince1970.getter();
  double v3 = v2 * 1000.0;
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return;
  }
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v6 = [self predicateWithProperty:v4 value:v5 comparisonType:4];
  swift_unknownObjectRelease();

  id v7 = sub_10011D89C(v1, v6, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v7 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100049330();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for AppLaunchDatabaseTransaction()
{
  return self;
}

ValueMetadata *type metadata accessor for GhostbackDatabaseStore()
{
  return &type metadata for GhostbackDatabaseStore;
}

uint64_t sub_1000D4EC4(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  long long v8 = (char *)&v28 - v7;
  if (sub_100006764((uint64_t)a1) > 18000) {
    return 1;
  }
  uint64_t v28 = v3;
  uint64_t v29 = v2;
  while (1)
  {
    uint64_t v9 = sub_100006764((uint64_t)a1);
    if (v9 <= 17999) {
      break;
    }
    if (v9 == 18000)
    {
      char v34 = sub_1000D5474;
      uint64_t v35 = 0;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v31 = 1107296256;
      char v32 = sub_1000399B4;
      uint64_t v33 = &unk_1001C94B8;
      id v13 = _Block_copy(&aBlock);
      swift_release();
      int v14 = sub_100006AE0((uint64_t)a1, 18001, v13);
      _Block_release(v13);
      if (!v14) {
        goto LABEL_14;
      }
    }
    else if (v9 != 18001)
    {
      goto LABEL_20;
    }
LABEL_5:
    if (sub_100006764((uint64_t)a1) >= 18001) {
      return 1;
    }
  }
  if (v9)
  {
    if (v9 != 17400)
    {
LABEL_20:
      uint64_t v24 = Logger.general.unsafeMutableAddressor();
      uint64_t v18 = v28;
      uint64_t v17 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v8, v24, v29);
      char v25 = a1;
      id v20 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134218240;
        uint64_t aBlock = sub_100006764((uint64_t)v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v27 + 12) = 2048;
        uint64_t aBlock = 18001;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v20, v26, "Error: No database migration for %lld to %lld", (uint8_t *)v27, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        id v20 = v25;
      }
      goto LABEL_19;
    }
    char v34 = sub_1000D5490;
    uint64_t v35 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    char v32 = sub_1000399B4;
    uint64_t v33 = &unk_1001C94E0;
    double v10 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v11 = (uint64_t)a1;
    uint64_t v12 = 18000;
  }
  else
  {
    char v34 = sub_1000D5494;
    uint64_t v35 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    char v32 = sub_1000399B4;
    uint64_t v33 = &unk_1001C9508;
    double v10 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v11 = (uint64_t)a1;
    uint64_t v12 = 17400;
  }
  char v15 = sub_100006AE0(v11, v12, v10);
  _Block_release(v10);
  if (v15) {
    goto LABEL_5;
  }
LABEL_14:
  uint64_t v16 = Logger.general.unsafeMutableAddressor();
  uint64_t v18 = v28;
  uint64_t v17 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v6, v16, v29);
  id v19 = a1;
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134218240;
    uint64_t aBlock = sub_100006764((uint64_t)v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v22 + 12) = 2048;
    uint64_t aBlock = 18001;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Migration failed for current schema version: %lld while trying to migrate to %lld", (uint8_t *)v22, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    id v20 = v19;
  }
  long long v8 = v6;
LABEL_19:

  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v17);
  return 0;
}

void sub_1000D53BC(uint64_t a1)
{
  id v2 = [(id)type metadata accessor for GhostbackEntity() databaseTable];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  sub_1000D5498(v3, v5);
  swift_bridgeObjectRelease();
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v6);
}

uint64_t sub_1000D5478(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D5488()
{
  return swift_release();
}

uint64_t sub_1000D5498(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(188);
  v4._countAndFlagsBits = 0xD00000000000001BLL;
  v4._object = (void *)0x8000000100185720;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 665632;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7._object = (void *)0x8000000100184760;
  v7._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x52454745544E4920;
  v8._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0xD000000000000015;
  v9._object = (void *)0x8000000100184D10;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x52454745544E4920;
  v10._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000017;
  v11._object = (void *)0x8000000100184D30;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xA2C5458455420;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x656B636F6C5F7369;
  v13._object = (void *)0xE900000000000064;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x52454745544E4920;
  v14._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x7265747369676572;
  v15._object = (void *)0xEA00000000006465;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x52454745544E4920;
  v16._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100184CF0;
  v17._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x52454745544E4920;
  v18._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000010;
  v19._object = (void *)0x8000000100184D60;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x52454745544E4920;
  v20._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x6D69745F6B636F6CLL;
  v21._object = (void *)0xEE00706D61747365;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x52454745544E4920;
  v22._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x69745F6863746566;
  v23._object = (void *)0xEF706D617473656DLL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x52454745544E4920;
  v24._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x63616274736F6867;
  v25._object = (void *)0xEC00000064695F6BLL;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xA2C5458455420;
  v26._object = (void *)0xE700000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x6C7074656B72616DLL;
  v27._object = (void *)0xEE0064695F656361;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x550A2C5458455420;
  v28._object = (void *)0xEE0028455551494ELL;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x63616274736F6867;
  v29._object = (void *)0xEC00000064695F6BLL;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0xD000000000000018;
  v30._object = (void *)0x8000000100185760;
  String.append(_:)(v30);
  return 0;
}

void sub_1000D584C(uint64_t a1)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)type metadata accessor for GhostbackEntity();
  id v3 = [v2 databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4C4F432044444120;
  v8._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x69737265766E6F63;
  v9._object = (void *)0xEF657079745F6E6FLL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3B5458455420;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v11);

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  id v12 = [v2 databaseTable];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x4C4F432044444120;
  v17._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD000000000000016;
  v18._object = (void *)0x8000000100184DB0;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x4E41454C4F4F4220;
  v19._object = (void *)0xE90000000000003BLL;
  String.append(_:)(v19);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v20);

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  id v21 = [v2 databaseTable];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v24 = v23;

  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x205445530ALL;
  v26._object = (void *)0xE500000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x69737265766E6F63;
  v27._object = (void *)0xEF657079745F6E6FLL;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 656424224;
  v28._object = (void *)0xE400000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x64616F6C6E776F64;
  v29._object = (void *)0xE800000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 39;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v31);

  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  id v32 = [v2 databaseTable];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  v36._countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 0x205445530ALL;
  v37._object = (void *)0xE500000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0xD000000000000016;
  v38._object = (void *)0x8000000100184DB0;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 807419168;
  v39._object = (void *)0xE400000000000000;
  String.append(_:)(v39);
  id v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v40);
}

void sub_1000D5C80(uint64_t a1)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)type metadata accessor for GhostbackEntity();
  id v3 = [v2 databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4C4F432044444120;
  v8._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x6D6E6F7269766E65;
  v9._object = (void *)0xEB00000000746E65;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3B5458455420;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v11);

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  id v12 = [v2 databaseTable];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x205445530ALL;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x6D6E6F7269766E65;
  v18._object = (void *)0xEB00000000746E65;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 656424224;
  v19._object = (void *)0xE400000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x69746375646F7270;
  v20._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 15143;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  id v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v22);
}

uint64_t sub_1000D5F08()
{
  v1[121] = v0;
  uint64_t v2 = sub_100012960(&qword_1001E1370);
  v1[122] = v2;
  v1[123] = *(void *)(v2 - 8);
  v1[124] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[125] = v3;
  v1[126] = *(void *)(v3 - 8);
  v1[127] = swift_task_alloc();
  v1[128] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v1[129] = v4;
  v1[130] = *(void *)(v4 - 8);
  v1[131] = swift_task_alloc();
  return _swift_task_switch(sub_1000D6094, 0, 0);
}

uint64_t sub_1000D6094()
{
  static Date.now.getter();
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v3 = v2 * 1000.0;
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v4 = (void *)v0[121];
  unint64_t v5 = (unint64_t)v3;
  (*(void (**)(void, void))(v0[130] + 8))(v0[131], v0[129]);
  uint64_t v7 = v4[3];
  uint64_t v6 = v4[4];
  v0[132] = v6;
  Swift::String v8 = (void *)v4[5];
  v0[133] = v8;
  uint64_t v9 = swift_allocObject();
  v0[134] = v9;
  *(void *)(v9 + 16) = v5;
  id v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4848 + dword_1001E4848);
  swift_bridgeObjectRetain();
  id v10 = v8;
  NSString v11 = (void *)swift_task_alloc();
  v0[135] = v11;
  *NSString v11 = v0;
  v11[1] = sub_1000D6228;
  return v12((uint64_t)sub_1001032B0, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_1000D6228(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void **)(*v2 + 1064);
  *(void *)(v3 + 1088) = a1;
  *(void *)(v3 + 1096) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v1) {
    unint64_t v5 = sub_1000D6B2C;
  }
  else {
    unint64_t v5 = sub_1000D639C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D639C()
{
  uint64_t v1 = v0[136];
  uint64_t v2 = v0[121];
  uint64_t v3 = swift_task_alloc();
  v0[138] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[139] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000D648C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000D648C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D65A4, 0, 0);
}

uint64_t sub_1000D65A4()
{
  uint64_t v1 = *(void *)(v0 + 1088);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1120) = v2;
  if (v2)
  {
    long long v3 = *(_OWORD *)(v1 + 32);
    long long v4 = *(_OWORD *)(v1 + 48);
    long long v5 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v0 + 864) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 880) = v5;
    *(_OWORD *)(v0 + 832) = v3;
    *(_OWORD *)(v0 + 848) = v4;
    long long v6 = *(_OWORD *)(v1 + 96);
    long long v7 = *(_OWORD *)(v1 + 112);
    long long v8 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v0 + 928) = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v0 + 944) = v8;
    *(_OWORD *)(v0 + 896) = v6;
    *(_OWORD *)(v0 + 912) = v7;
    uint64_t v9 = *(void *)(v0 + 888);
    uint64_t v10 = *(void *)(v0 + 896);
    *(void *)(v0 + 1144) = v9;
    *(void *)(v0 + 1136) = v10;
    *(void *)(v0 + 1128) = 1;
    sub_10005D5A0(v0 + 832);
    swift_bridgeObjectRetain();
    NSString v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 1152) = v11;
    *NSString v11 = v0;
    v11[1] = sub_1000D6718;
    return sub_1000F3BFC(v9, v10, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 1168) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1000D69C0;
    return sub_1000EFC6C();
  }
}

uint64_t sub_1000D6718()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    long long v3 = sub_1000D6D54;
  }
  else
  {
    sub_10005D5D8(v2 + 832);
    swift_bridgeObjectRelease();
    long long v3 = sub_1000D6840;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D6840()
{
  uint64_t v1 = *(void *)(v0 + 1128);
  if (v1 == *(void *)(v0 + 1120))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 1168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000D69C0;
    return sub_1000EFC6C();
  }
  else
  {
    long long v4 = (_OWORD *)(*(void *)(v0 + 1088) + (v1 << 7));
    long long v5 = v4[2];
    long long v6 = v4[3];
    long long v7 = v4[4];
    *(_OWORD *)(v0 + 880) = v4[5];
    long long v8 = v4[6];
    long long v9 = v4[7];
    long long v10 = v4[9];
    *(_OWORD *)(v0 + 928) = v4[8];
    *(_OWORD *)(v0 + 944) = v10;
    *(_OWORD *)(v0 + 896) = v8;
    *(_OWORD *)(v0 + 912) = v9;
    *(_OWORD *)(v0 + 848) = v6;
    *(_OWORD *)(v0 + 864) = v7;
    *(_OWORD *)(v0 + 832) = v5;
    uint64_t v11 = *(void *)(v0 + 888);
    uint64_t v12 = *(void *)(v0 + 896);
    *(void *)(v0 + 1144) = v11;
    *(void *)(v0 + 1136) = v12;
    *(void *)(v0 + 1128) = v1 + 1;
    sub_10005D5A0(v0 + 832);
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 1152) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1000D6718;
    return sub_1000F3BFC(v11, v12, 0);
  }
}

uint64_t sub_1000D69C0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 1176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000D72C0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000D6B2C()
{
  uint64_t v1 = v0[128];
  uint64_t v2 = v0[126];
  uint64_t v3 = v0[125];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    long long v8 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[120] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching postbacks encountered failure %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[126] + 8))(v0[128], v0[125]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000D6D54()
{
  uint64_t v1 = *(void *)(v0 + 1016);
  uint64_t v2 = *(void *)(v0 + 1008);
  uint64_t v3 = *(void *)(v0 + 1000);
  swift_bridgeObjectRelease();
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_10005D5A0(v0 + 832);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 848);
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    *(void *)(v8 + 4) = v7;
    sub_10005D5D8(v0 + 832);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to delete pre-conversion state for advertised app: %llu", (uint8_t *)v8, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    sub_10005D5D8(v0 + 832);
  }
  uint64_t v9 = *(void *)(v0 + 1160);
  uint64_t v10 = *(void *)(v0 + 1016);
  uint64_t v11 = *(void *)(v0 + 1008);
  uint64_t v12 = *(void *)(v0 + 1000);
  uint64_t v13 = *(void *)(v0 + 968);

  unsigned int v14 = *(unsigned __int8 *)(v0 + 904);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_errorRetain();
  sub_10009485C(4, 0, v9, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 448), 2u, 2u, 1u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v14 > 1,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v15 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 784) = v15;
  *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 608);
  *(_OWORD *)(v0 + 809) = *(_OWORD *)(v0 + 617);
  long long v16 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 720) = v16;
  long long v17 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 752) = v17;
  long long v18 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 656) = v18;
  long long v19 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 688) = v19;
  Swift::String v20 = sub_100012D78((void *)(v13 + 472), *(void *)(v13 + 496));
  uint64_t v21 = *v20;
  *(void *)(v0 + 1184) = *v20;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1000D6FCC, v21, 0);
}

uint64_t sub_1000D6FCC()
{
  uint64_t v1 = *(void *)(v0 + 1144);
  uint64_t v2 = *(void *)(v0 + 1136);
  uint64_t v3 = *(void *)(v0 + 992);
  uint64_t v4 = *(void *)(v0 + 984);
  uint64_t v5 = *(void *)(v0 + 976);
  long long v6 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 160) = v6;
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 800);
  long long v7 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 96) = v7;
  long long v8 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 128) = v8;
  long long v9 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 32) = v9;
  long long v10 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 64) = v10;
  *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 809);
  *(void *)(v0 + 208) = v1;
  *(void *)(v0 + 216) = v2;
  *(_WORD *)(v0 + 224) = 257;
  sub_10003675C(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 232);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 448);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100036824(v0 + 448);
  swift_bridgeObjectRelease();
  sub_10005D5D8(v0 + 832);
  return _swift_task_switch(sub_1000D7138, 0, 0);
}

uint64_t sub_1000D7138()
{
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 1128);
  if (v1 == *(void *)(v0 + 1120))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 1168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000D69C0;
    return sub_1000EFC6C();
  }
  else
  {
    uint64_t v4 = (_OWORD *)(*(void *)(v0 + 1088) + (v1 << 7));
    long long v5 = v4[2];
    long long v6 = v4[3];
    long long v7 = v4[4];
    *(_OWORD *)(v0 + 880) = v4[5];
    long long v8 = v4[6];
    long long v9 = v4[7];
    long long v10 = v4[9];
    *(_OWORD *)(v0 + 928) = v4[8];
    *(_OWORD *)(v0 + 944) = v10;
    *(_OWORD *)(v0 + 896) = v8;
    *(_OWORD *)(v0 + 912) = v9;
    *(_OWORD *)(v0 + 848) = v6;
    *(_OWORD *)(v0 + 864) = v7;
    *(_OWORD *)(v0 + 832) = v5;
    uint64_t v11 = *(void *)(v0 + 888);
    uint64_t v12 = *(void *)(v0 + 896);
    *(void *)(v0 + 1144) = v11;
    *(void *)(v0 + 1136) = v12;
    *(void *)(v0 + 1128) = v1 + 1;
    sub_10005D5A0(v0 + 832);
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 1152) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1000D6718;
    return sub_1000F3BFC(v11, v12, 0);
  }
}

uint64_t sub_1000D72C0()
{
  uint64_t v1 = v0[128];
  uint64_t v2 = v0[126];
  uint64_t v3 = v0[125];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    long long v8 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[120] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching postbacks encountered failure %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[126] + 8))(v0[128], v0[125]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

id sub_1000D74E8(void *a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10002356C(v9, a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      type metadata accessor for PostbackEntity();
      id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      id v6 = a2;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      a2 = [v5 initWithPropertyValues:isa onConnection:v6];

      if (([a2 existsInDatabase] & 1) == 0)
      {
        type metadata accessor for AKSQLError(0);
        sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
        sub_100100A94((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
        _BridgedStoredNSError.init(_:userInfo:)();
        swift_willThrow();
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_100100A94((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

id sub_1000D7728(long long *a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100023D7C(a1);
  swift_release();
  if (!v2)
  {
    sub_100012960(&qword_1001E11F8);
    if (swift_dynamicCast())
    {
      type metadata accessor for GhostbackEntity();
      id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      id v6 = a2;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      a2 = [v5 initWithPropertyValues:isa onConnection:v6];

      if (([a2 existsInDatabase] & 1) == 0)
      {
        type metadata accessor for AKSQLError(0);
        sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
        sub_100100A94((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
        _BridgedStoredNSError.init(_:userInfo:)();
        swift_willThrow();
      }
    }
    else
    {
      type metadata accessor for AKSQLError(0);
      sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
      sub_100100A94((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  return a2;
}

uint64_t sub_1000D7968(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 72) = a5;
  *(void *)(v6 + 80) = v5;
  *(unsigned char *)(v6 + 129) = a3;
  *(unsigned char *)(v6 + 128) = a2;
  *(void *)(v6 + 56) = a1;
  *(void *)(v6 + 64) = a4;
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v6 + 88) = v7;
  *(void *)(v6 + 96) = *(void *)(v7 - 8);
  *(void *)(v6 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_1000D7A34, 0, 0);
}

uint64_t sub_1000D7A34()
{
  sub_100036994(*(void *)(v0 + 72), v0 + 16, &qword_1001E1398);
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    sub_100012D78((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);
    static Date.now.getter();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000D7BA4;
    uint64_t v5 = *(void *)(v0 + 104);
    char v6 = *(unsigned char *)(v0 + 129);
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 64);
    char v9 = *(unsigned char *)(v0 + 128);
    return sub_1000DF088(v3, v7, v9, v6, v8, v5);
  }
  else
  {
    sub_100019960(v0 + 16, &qword_1001E1398);
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_1000D7BA4()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return _swift_task_switch(sub_1000D7D4C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    char v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1000D7D4C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D7DB0(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000D7E8C, 0, 0);
}

uint64_t sub_1000D7E8C()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (uint64_t *)v0[6];
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  v0[12] = v3;
  uint64_t v5 = (void *)v1[2];
  v0[13] = v5;
  uint64_t v6 = swift_allocObject();
  v0[14] = v6;
  *(void *)(v6 + 16) = v2;
  long long v10 = (char *)&dword_1001E48D8 + dword_1001E48D8;
  swift_bridgeObjectRetain();
  id v7 = v5;
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000D7FB4;
  return ((uint64_t (*)(uint64_t (*)@<X0>(void *@<X8>), uint64_t, uint64_t, uint64_t, id))v10)(sub_100102C50, v6, v4, v3, v7);
}

uint64_t sub_1000D7FB4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void **)(*v2 + 104);
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v1) {
    uint64_t v5 = sub_1000D86B4;
  }
  else {
    uint64_t v5 = sub_1000D8124;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D8124()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  v0[18] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[19] = v5;
  v0[20] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[16];
    uint64_t v23 = v0[8];
    uint64_t v24 = v0[7];
    uint64_t v25 = v0[11];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218242;
    v0[3] = *(void *)(v8 + 16);
    uint64_t v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    sub_100102D20();
    swift_bridgeObjectRetain();
    uint64_t v10 = Set.description.getter();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    v0[4] = sub_100147668(v10, v12, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Found %ld postbacks eligible for transmission for environments: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v13(v25, v24);
  }
  else
  {
    uint64_t v14 = v0[11];
    uint64_t v15 = v0[7];
    uint64_t v16 = v0[8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  v0[21] = v13;
  uint64_t v17 = v0[16];
  uint64_t v18 = v0[6];
  uint64_t v19 = swift_task_alloc();
  v0[22] = v19;
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  Swift::String v20 = (void *)swift_task_alloc();
  v0[23] = v20;
  void *v20 = v0;
  v20[1] = sub_1000D845C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000D845C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D8590, 0, 0);
}

uint64_t sub_1000D8590()
{
  (*(void (**)(void, void, void))(v0 + 152))(*(void *)(v0 + 80), *(void *)(v0 + 144), *(void *)(v0 + 56));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Postback transmission completed", v3, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 80), *(void *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000D86B4()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Transmit eligible postbacks failure: %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000D88C8(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[24] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[25] = v5;
  v2[26] = *(void *)(v5 + 64);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_1000D89EC, 0, 0);
}

uint64_t sub_1000D89EC()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[19];
  uint64_t v5 = (void *)v0[20];
  uint64_t v7 = v5[3];
  uint64_t v6 = v5[4];
  v0[28] = v6;
  uint64_t v8 = (void *)v5[5];
  v0[29] = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  v0[30] = v10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v2);
  uint64_t v14 = (uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4848 + dword_1001E4848);
  swift_bridgeObjectRetain();
  id v11 = v8;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[31] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1000D8B5C;
  return v14(sub_100103E50, v10, v7, v6, v11);
}

uint64_t sub_1000D8B5C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void **)(*v2 + 232);
  *(void *)(v3 + 256) = a1;
  *(void *)(v3 + 264) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v1) {
    uint64_t v5 = sub_1000D9094;
  }
  else {
    uint64_t v5 = sub_1000D8CCC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D8CCC()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 272) = v2;
  if (v2)
  {
    long long v3 = *(_OWORD *)(v1 + 128);
    long long v4 = *(_OWORD *)(v1 + 144);
    long long v5 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v1 + 96);
    long long v6 = *(_OWORD *)(v1 + 32);
    long long v7 = *(_OWORD *)(v1 + 48);
    long long v8 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 64) = v8;
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v10 = *(void *)(v0 + 80);
    *(void *)(v0 + 280) = 1;
    *(void *)(v0 + 288) = v10;
    *(_OWORD *)(v0 + 16) = v6;
    *(_OWORD *)(v0 + 32) = v7;
    *(_OWORD *)(v0 + 112) = v3;
    *(_OWORD *)(v0 + 128) = v4;
    *(_OWORD *)(v0 + 96) = v5;
    sub_10005D5A0(v0 + 16);
    swift_bridgeObjectRetain();
    id v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v11;
    *id v11 = v0;
    v11[1] = sub_1000D8E10;
    return sub_1000F3BFC(v9, v10, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_1000D8E10()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v3 = sub_1000D9290;
  }
  else
  {
    sub_10005D5D8(v2 + 16);
    swift_bridgeObjectRelease();
    long long v3 = sub_1000D8F4C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D8F4C()
{
  uint64_t v1 = *(void *)(v0 + 280);
  if (v1 == *(void *)(v0 + 272))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    long long v4 = (_OWORD *)(*(void *)(v0 + 256) + (v1 << 7));
    long long v5 = v4[6];
    long long v6 = v4[7];
    long long v7 = v4[9];
    *(_OWORD *)(v0 + 112) = v4[8];
    *(_OWORD *)(v0 + 128) = v7;
    *(_OWORD *)(v0 + 80) = v5;
    *(_OWORD *)(v0 + 96) = v6;
    long long v8 = v4[2];
    long long v9 = v4[3];
    long long v10 = v4[5];
    *(_OWORD *)(v0 + 48) = v4[4];
    *(_OWORD *)(v0 + 64) = v10;
    uint64_t v11 = *(void *)(v0 + 72);
    uint64_t v12 = *(void *)(v0 + 80);
    *(void *)(v0 + 280) = v1 + 1;
    *(void *)(v0 + 288) = v12;
    *(_OWORD *)(v0 + 16) = v8;
    *(_OWORD *)(v0 + 32) = v9;
    sub_10005D5A0(v0 + 16);
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1000D8E10;
    return sub_1000F3BFC(v11, v12, 0);
  }
}

uint64_t sub_1000D9094()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    long long v8 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to clean up inactive pre-conversion state: %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  swift_task_dealloc();
  swift_task_dealloc();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000D9290()
{
  sub_10005D5D8((uint64_t)(v0 + 2));
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    long long v8 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to clean up inactive pre-conversion state: %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  swift_task_dealloc();
  swift_task_dealloc();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000D9494(uint64_t a1, uint64_t a2)
{
  v3[73] = v2;
  v3[72] = a2;
  v3[71] = a1;
  return _swift_task_switch(sub_1000D94BC, 0, 0);
}

uint64_t sub_1000D94BC()
{
  uint64_t v1 = (void *)v0[73];
  uint64_t v2 = v0[72];
  uint64_t v3 = v0[71];
  uint64_t v5 = v1[12];
  uint64_t v4 = v1[13];
  v0[74] = v4;
  os_log_type_t v6 = (void *)v1[14];
  v0[75] = v6;
  uint64_t v7 = swift_allocObject();
  v0[76] = v7;
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v2;
  uint64_t v11 = (uint64_t (*)(id (*)@<X0>(uint64_t@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4978 + dword_1001E4978);
  swift_bridgeObjectRetain();
  id v8 = v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[77] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000D95EC;
  return v11(sub_100101810, v7, v5, v4, v8);
}

uint64_t sub_1000D95EC(uint64_t a1, char a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  *(void *)(*v3 + 624) = a1;
  swift_task_dealloc();
  id v8 = *(void **)(v5 + 600);
  swift_release();
  swift_bridgeObjectRelease();

  if (v2)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(unsigned char *)(v6 + 273) = a2;
    return _swift_task_switch(sub_1000D9798, 0, 0);
  }
}

uint64_t sub_1000D9798()
{
  if (*(unsigned char *)(v0 + 273))
  {
    sub_1001011D8();
    swift_allocError();
    v10[1] = 0;
    v10[2] = 0;
    *long long v10 = 8;
    swift_willThrow();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 624);
    uint64_t v2 = *(void **)(v0 + 584);
    uint64_t v4 = v2[3];
    uint64_t v3 = v2[4];
    *(void *)(v0 + 632) = v3;
    uint64_t v5 = (void *)v2[5];
    *(void *)(v0 + 640) = v5;
    uint64_t v6 = swift_allocObject();
    *(void *)(v0 + 648) = v6;
    *(void *)(v6 + 16) = v1;
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4848
                                                                              + dword_1001E4848);
    swift_bridgeObjectRetain();
    id v7 = v5;
    id v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 656) = v8;
    *id v8 = v0;
    v8[1] = sub_1000D992C;
    return v12((uint64_t)sub_1001044BC, v6, v4, v3, (uint64_t)v7);
  }
}

uint64_t sub_1000D992C(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v6 = *(void **)(v4 + 640);
  swift_release();
  if (v1)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();

    id v7 = sub_1000DC3C8;
  }
  else
  {
    swift_bridgeObjectRelease();

    *(void *)(v5 + 664) = a1;
    id v7 = sub_1000D9AB4;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000D9AB4()
{
  v0[84] = v0[83];
  uint64_t v1 = v0[78];
  uint64_t v2 = (uint64_t *)v0[73];
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[85] = v3;
  uint64_t v5 = (void *)v2[2];
  v0[86] = v5;
  uint64_t v6 = swift_allocObject();
  v0[87] = v6;
  *(void *)(v6 + 16) = v1;
  long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48D8 + dword_1001E48D8);
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = (void *)swift_task_alloc();
  v0[88] = v8;
  *id v8 = v0;
  v8[1] = sub_1000D9BDC;
  return v10((uint64_t)sub_1001044D4, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000D9BDC(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v6 = *(void **)(v4 + 688);
  swift_release();
  if (v1)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();

    id v7 = sub_1000DC4EC;
  }
  else
  {
    swift_bridgeObjectRelease();

    *(void *)(v5 + 712) = a1;
    id v7 = sub_1000D9D64;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000D9D64()
{
  v0[90] = v0[89];
  uint64_t v1 = v0[78];
  uint64_t v2 = (void *)v0[73];
  uint64_t v4 = v2[3];
  uint64_t v3 = v2[4];
  v0[91] = v3;
  uint64_t v5 = (void *)v2[5];
  v0[92] = v5;
  uint64_t v6 = swift_allocObject();
  v0[93] = v6;
  *(void *)(v6 + 16) = v1;
  long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4840
                                                                                     + dword_1001E4840);
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = (void *)swift_task_alloc();
  v0[94] = v8;
  *id v8 = v0;
  v8[1] = sub_1000D9E8C;
  return v10((uint64_t)v10, (uint64_t)sub_1001044EC, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000D9E8C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 760) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 736);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000DC610;
  }
  else
  {
    uint64_t v4 = sub_1000DA024;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000DA024()
{
  uint64_t v1 = v0[78];
  uint64_t v2 = (void *)v0[73];
  uint64_t v4 = v2[6];
  uint64_t v3 = v2[7];
  v0[96] = v3;
  uint64_t v5 = (void *)v2[8];
  v0[97] = v5;
  uint64_t v6 = swift_allocObject();
  v0[98] = v6;
  *(void *)(v6 + 16) = v1;
  long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4838
                                                                                     + dword_1001E4838);
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = (void *)swift_task_alloc();
  v0[99] = v8;
  *id v8 = v0;
  v8[1] = sub_1000DA144;
  return v10((uint64_t)v10, (uint64_t)sub_100104420, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000DA144()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 800) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 776);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000DC628;
  }
  else
  {
    uint64_t v4 = sub_1000DA2DC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000DA2DC()
{
  uint64_t v1 = v0[78];
  uint64_t v2 = (void *)v0[73];
  uint64_t v4 = v2[9];
  uint64_t v3 = v2[10];
  v0[101] = v3;
  uint64_t v5 = (void *)v2[11];
  v0[102] = v5;
  uint64_t v6 = swift_allocObject();
  v0[103] = v6;
  *(void *)(v6 + 16) = v1;
  long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48A0
                                                                                     + dword_1001E48A0);
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = (void *)swift_task_alloc();
  v0[104] = v8;
  *id v8 = v0;
  v8[1] = sub_1000DA3FC;
  return v10((uint64_t)v10, (uint64_t)sub_100104504, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000DA3FC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 840) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 816);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000DC640;
  }
  else
  {
    uint64_t v4 = sub_1000DA594;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000DA594()
{
  uint64_t v1 = v0[78];
  uint64_t v2 = (uint64_t *)v0[73];
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[106] = v3;
  uint64_t v5 = (void *)v2[2];
  v0[107] = v5;
  uint64_t v6 = swift_allocObject();
  v0[108] = v6;
  *(void *)(v6 + 16) = v1;
  long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                     + dword_1001E48F8);
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = (void *)swift_task_alloc();
  v0[109] = v8;
  *id v8 = v0;
  v8[1] = sub_1000DA6B4;
  return v10((uint64_t)v10, (uint64_t)sub_1001018B0, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000DA6B4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 880) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 856);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000DC658;
  }
  else
  {
    uint64_t v4 = sub_1000DA84C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000DA84C()
{
  uint64_t v1 = *(void *)(v0 + 672);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    *(void *)(v0 + 888) = v2;
    if (v2)
    {
      uint64_t v3 = *(void **)(v0 + 584);
      long long v4 = *(_OWORD *)(v1 + 32);
      long long v5 = *(_OWORD *)(v1 + 48);
      long long v6 = *(_OWORD *)(v1 + 80);
      *(_OWORD *)(v0 + 312) = *(_OWORD *)(v1 + 64);
      *(_OWORD *)(v0 + 328) = v6;
      *(_OWORD *)(v0 + 280) = v4;
      *(_OWORD *)(v0 + 296) = v5;
      long long v7 = *(_OWORD *)(v1 + 96);
      long long v8 = *(_OWORD *)(v1 + 112);
      long long v9 = *(_OWORD *)(v1 + 144);
      *(_OWORD *)(v0 + 376) = *(_OWORD *)(v1 + 128);
      *(_OWORD *)(v0 + 392) = v9;
      *(_OWORD *)(v0 + 344) = v7;
      *(_OWORD *)(v0 + 360) = v8;
      uint64_t v11 = *(void *)(v0 + 336);
      uint64_t v10 = *(void *)(v0 + 344);
      *(void *)(v0 + 912) = v11;
      *(void *)(v0 + 904) = v10;
      *(void *)(v0 + 896) = 1;
      uint64_t v13 = v3[20];
      uint64_t v12 = v3[21];
      *(void *)(v0 + 920) = v12;
      uint64_t v14 = (void *)v3[22];
      *(void *)(v0 + 928) = v14;
      sub_10005D5A0(v0 + 280);
      uint64_t v15 = swift_allocObject();
      *(void *)(v0 + 936) = v15;
      *(void *)(v15 + 16) = v11;
      *(void *)(v15 + 24) = v10;
      swift_bridgeObjectRetain();
      id v16 = v14;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 520) = &off_1001E2530;
      *(void *)(v0 + 488) = v13;
      *(void *)(v0 + 496) = v12;
      *(void *)(v0 + 504) = v16;
      *(void *)(v0 + 512) = &type metadata for RetryCountDatabaseStore;
      id v17 = v16;
      swift_bridgeObjectRetain();
      id v18 = v17;
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 944) = v19;
      v19[2] = v18;
      v19[3] = v0 + 488;
      v19[4] = sub_10010448C;
      void v19[5] = v15;
      Swift::String v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 952) = v20;
      void *v20 = v0;
      v20[1] = sub_1000DABF8;
      uint64_t v21 = (char *)&type metadata for () + 8;
      uint64_t v22 = v19;
LABEL_8:
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v20, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100104444, v22, v21);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v23 = *(void *)(v0 + 720);
  if (v23)
  {
    uint64_t v24 = *(void *)(v23 + 16);
    *(void *)(v0 + 1032) = v24;
    if (v24)
    {
      uint64_t v25 = *(void **)(v0 + 584);
      memcpy((void *)(v0 + 16), (const void *)(v23 + 32), 0x101uLL);
      *(void *)(v0 + 1040) = 1;
      uint64_t v27 = *(void *)(v0 + 48);
      uint64_t v26 = *(void *)(v0 + 56);
      uint64_t v29 = v25[20];
      uint64_t v28 = v25[21];
      *(void *)(v0 + 1048) = v28;
      Swift::String v30 = (void *)v25[22];
      *(void *)(v0 + 1056) = v30;
      sub_100081480(v0 + 16);
      uint64_t v31 = swift_allocObject();
      *(void *)(v0 + 1064) = v31;
      *(void *)(v31 + 16) = v27;
      *(void *)(v31 + 24) = v26;
      swift_bridgeObjectRetain();
      id v32 = v30;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 432) = &type metadata for RetryCountDatabaseStore;
      *(void *)(v0 + 440) = &off_1001E2530;
      *(void *)(v0 + 408) = v29;
      *(void *)(v0 + 416) = v28;
      *(void *)(v0 + 424) = v32;
      id v33 = v32;
      swift_bridgeObjectRetain();
      id v34 = v33;
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 1072) = v35;
      v35[2] = v34;
      v35[3] = v0 + 408;
      unsigned char v35[4] = sub_10010448C;
      v35[5] = v31;
      Swift::String v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 1080) = v20;
      void *v20 = v0;
      v20[1] = sub_1000DB8AC;
      uint64_t v21 = (char *)&type metadata for () + 8;
      uint64_t v22 = v35;
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  Swift::String v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_1000DABF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 960) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000DB7D8;
  }
  else
  {
    long long v4 = *(void **)(v2 + 928);

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 488);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000DAD58;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000DAD58()
{
  uint64_t v1 = sub_100012D78((void *)(*(void *)(v0 + 584) + 472), *(void *)(*(void *)(v0 + 584) + 496));
  uint64_t v2 = *v1;
  *(void *)(v0 + 968) = *v1;
  return _swift_task_switch(sub_1000DADCC, v2, 0);
}

uint64_t sub_1000DADCC()
{
  uint64_t v1 = (void *)v0[121];
  uint64_t v2 = v0[114];
  uint64_t v3 = v0[113];
  v0[122] = v1[14];
  v0[123] = v1[15];
  uint64_t v4 = (void *)v1[16];
  v0[124] = v4;
  uint64_t v5 = swift_allocObject();
  v0[125] = v5;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v4;
  return _swift_task_switch(sub_1000DAE8C, 0, 0);
}

uint64_t sub_1000DAE8C()
{
  uint64_t v1 = v0[125];
  uint64_t v2 = (void *)v0[124];
  uint64_t v3 = v0[123];
  uint64_t v4 = v0[122];
  v0[69] = &type metadata for SnoutDatabaseStore;
  v0[70] = &off_1001E14A0;
  v0[66] = v4;
  v0[67] = v3;
  v0[68] = v2;
  swift_bridgeObjectRetain();
  id v5 = v2;
  id v6 = (void *)swift_task_alloc();
  v0[126] = v6;
  _OWORD v6[2] = v5;
  v6[3] = v0 + 66;
  _OWORD v6[4] = sub_1001044A4;
  v6[5] = v1;
  long long v7 = (void *)swift_task_alloc();
  v0[127] = v7;
  *long long v7 = v0;
  v7[1] = sub_1000DAFD4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100104448, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1000DAFD4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1024) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000DB1A0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = v2 + 528;
    id v6 = *(void **)(v2 + 992);
    uint64_t v7 = *(void *)(v2 + 968);
    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v5);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000DB138;
    uint64_t v4 = v7;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_1000DB138()
{
  sub_10005D5D8(v0 + 280);
  return _swift_task_switch(sub_1000DB424, 0, 0);
}

uint64_t sub_1000DB1A0()
{
  uint64_t v1 = *(void **)(v0 + 992);
  uint64_t v2 = *(void *)(v0 + 968);
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 528);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_task_switch(sub_1000DB248, v2, 0);
}

uint64_t sub_1000DB248()
{
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v4 + 4) = v6;
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to delete story for conversion id: %@", (uint8_t *)v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10005D5D8(v0 + 280);
  return _swift_task_switch(sub_1000DB424, 0, 0);
}

uint64_t sub_1000DB424()
{
  uint64_t v1 = *(void *)(v0 + 896);
  if (v1 != *(void *)(v0 + 888))
  {
    id v18 = (_OWORD *)(*(void *)(v0 + 672) + (v1 << 7));
    long long v19 = v18[6];
    long long v20 = v18[7];
    long long v21 = v18[9];
    *(_OWORD *)(v0 + 376) = v18[8];
    *(_OWORD *)(v0 + 392) = v21;
    *(_OWORD *)(v0 + 360) = v20;
    long long v22 = v18[2];
    long long v23 = v18[3];
    long long v24 = v18[4];
    *(_OWORD *)(v0 + 328) = v18[5];
    *(_OWORD *)(v0 + 344) = v19;
    *(_OWORD *)(v0 + 296) = v23;
    *(_OWORD *)(v0 + 312) = v24;
    *(_OWORD *)(v0 + 280) = v22;
    uint64_t v26 = *(void *)(v0 + 336);
    uint64_t v25 = *(void *)(v0 + 344);
    *(void *)(v0 + 912) = v26;
    *(void *)(v0 + 904) = v25;
    *(void *)(v0 + 896) = v1 + 1;
    uint64_t v27 = *(void **)(v0 + 584);
    uint64_t v29 = v27[20];
    uint64_t v28 = v27[21];
    *(void *)(v0 + 920) = v28;
    Swift::String v30 = (void *)v27[22];
    *(void *)(v0 + 928) = v30;
    sub_10005D5A0(v0 + 280);
    uint64_t v31 = swift_allocObject();
    *(void *)(v0 + 936) = v31;
    *(void *)(v31 + 16) = v26;
    *(void *)(v31 + 24) = v25;
    swift_bridgeObjectRetain();
    id v32 = v30;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 520) = &off_1001E2530;
    *(void *)(v0 + 488) = v29;
    *(void *)(v0 + 496) = v28;
    *(void *)(v0 + 504) = v32;
    *(void *)(v0 + 512) = &type metadata for RetryCountDatabaseStore;
    id v33 = v32;
    swift_bridgeObjectRetain();
    id v34 = v33;
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 944) = v35;
    v35[2] = v34;
    v35[3] = v0 + 488;
    unsigned char v35[4] = sub_10010448C;
    v35[5] = v31;
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 952) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1000DABF8;
    id v16 = (char *)&type metadata for () + 8;
    id v17 = v35;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 720);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 1032) = v3;
    if (v3)
    {
      uint64_t v4 = *(void **)(v0 + 584);
      memcpy((void *)(v0 + 16), (const void *)(v2 + 32), 0x101uLL);
      *(void *)(v0 + 1040) = 1;
      uint64_t v6 = *(void *)(v0 + 48);
      uint64_t v5 = *(void *)(v0 + 56);
      uint64_t v8 = v4[20];
      uint64_t v7 = v4[21];
      *(void *)(v0 + 1048) = v7;
      uint64_t v9 = (void *)v4[22];
      *(void *)(v0 + 1056) = v9;
      sub_100081480(v0 + 16);
      uint64_t v10 = swift_allocObject();
      *(void *)(v0 + 1064) = v10;
      *(void *)(v10 + 16) = v6;
      *(void *)(v10 + 24) = v5;
      swift_bridgeObjectRetain();
      id v11 = v9;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 432) = &type metadata for RetryCountDatabaseStore;
      *(void *)(v0 + 440) = &off_1001E2530;
      *(void *)(v0 + 408) = v8;
      *(void *)(v0 + 416) = v7;
      *(void *)(v0 + 424) = v11;
      id v12 = v11;
      swift_bridgeObjectRetain();
      id v13 = v12;
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 1072) = v14;
      id v14[2] = v13;
      v14[3] = v0 + 408;
      void v14[4] = sub_10010448C;
      v14[5] = v10;
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 1080) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_1000DB8AC;
      id v16 = (char *)&type metadata for () + 8;
      id v17 = v14;
LABEL_6:
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v15, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100104444, v17, v16);
    }
    swift_bridgeObjectRelease();
  }
  Swift::String v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_1000DB7D8()
{
  uint64_t v1 = *(void **)(v0 + 928);

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 488);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005D5D8(v0 + 280);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000DB8AC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1088) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000DC300;
  }
  else
  {
    uint64_t v4 = (void *)v2[132];

    uint64_t v5 = v2[25];
    v2[137] = v2[24];
    v2[138] = v5;
    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v2 + 51));
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000DBA18;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000DBA18()
{
  uint64_t v1 = sub_100012D78((void *)(*(void *)(v0 + 584) + 472), *(void *)(*(void *)(v0 + 584) + 496));
  uint64_t v2 = *v1;
  *(void *)(v0 + 1112) = *v1;
  return _swift_task_switch(sub_1000DBA8C, v2, 0);
}

uint64_t sub_1000DBA8C()
{
  uint64_t v1 = (void *)v0[139];
  uint64_t v2 = v0[138];
  uint64_t v3 = v0[137];
  v0[140] = v1[14];
  v0[141] = v1[15];
  uint64_t v4 = (void *)v1[16];
  v0[142] = v4;
  uint64_t v5 = swift_allocObject();
  v0[143] = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  swift_bridgeObjectRetain();
  id v6 = v4;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1000DBB4C, 0, 0);
}

uint64_t sub_1000DBB4C()
{
  uint64_t v1 = v0[143];
  uint64_t v2 = (void *)v0[142];
  uint64_t v3 = v0[141];
  uint64_t v4 = v0[140];
  v0[59] = &type metadata for SnoutDatabaseStore;
  v0[60] = &off_1001E14A0;
  v0[56] = v4;
  v0[57] = v3;
  v0[58] = v2;
  swift_bridgeObjectRetain();
  id v5 = v2;
  id v6 = (void *)swift_task_alloc();
  v0[144] = v6;
  _OWORD v6[2] = v5;
  v6[3] = v0 + 56;
  _OWORD v6[4] = sub_1001018E0;
  v6[5] = v1;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[145] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000DBC8C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_1001018FC, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1000DBC8C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000DBE58;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = v2 + 448;
    id v6 = *(void **)(v2 + 1136);
    uint64_t v7 = *(void *)(v2 + 1112);
    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v5);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000DBDF0;
    uint64_t v4 = v7;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_1000DBDF0()
{
  sub_10008150C(v0 + 16);
  return _swift_task_switch(sub_1000DC0DC, 0, 0);
}

uint64_t sub_1000DBE58()
{
  uint64_t v1 = *(void **)(v0 + 1136);
  uint64_t v2 = *(void *)(v0 + 1112);
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 448);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_task_switch(sub_1000DBF00, v2, 0);
}

uint64_t sub_1000DBF00()
{
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v4 + 4) = v6;
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to delete story for conversion id: %@", (uint8_t *)v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10008150C(v0 + 16);
  return _swift_task_switch(sub_1000DC0DC, 0, 0);
}

uint64_t sub_1000DC0DC()
{
  uint64_t v1 = v0[130];
  if (v1 == v0[129])
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    memcpy(v0 + 2, (const void *)(v0[90] + 264 * v1 + 32), 0x101uLL);
    v0[130] = v1 + 1;
    uint64_t v4 = (void *)v0[73];
    uint64_t v6 = v0[6];
    uint64_t v5 = v0[7];
    uint64_t v8 = v4[20];
    uint64_t v7 = v4[21];
    v0[131] = v7;
    uint64_t v9 = (void *)v4[22];
    v0[132] = v9;
    sub_100081480((uint64_t)(v0 + 2));
    uint64_t v10 = swift_allocObject();
    v0[133] = v10;
    *(void *)(v10 + 16) = v6;
    *(void *)(v10 + 24) = v5;
    swift_bridgeObjectRetain();
    id v11 = v9;
    swift_bridgeObjectRetain();
    v0[54] = &type metadata for RetryCountDatabaseStore;
    v0[55] = &off_1001E2530;
    v0[51] = v8;
    v0[52] = v7;
    v0[53] = v11;
    id v12 = v11;
    swift_bridgeObjectRetain();
    id v13 = v12;
    uint64_t v14 = (void *)swift_task_alloc();
    v0[134] = v14;
    id v14[2] = v13;
    v14[3] = v0 + 51;
    void v14[4] = sub_10010448C;
    v14[5] = v10;
    uint64_t v15 = (void *)swift_task_alloc();
    v0[135] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1000DB8AC;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v15, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100104444, v14, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_1000DC300()
{
  uint64_t v1 = *(void **)(v0 + 1056);

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 408);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_10008150C(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000DC3C8()
{
  v0[84] = 0;
  uint64_t v1 = v0[78];
  uint64_t v2 = (uint64_t *)v0[73];
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[85] = v3;
  uint64_t v5 = (void *)v2[2];
  v0[86] = v5;
  uint64_t v6 = swift_allocObject();
  v0[87] = v6;
  *(void *)(v6 + 16) = v1;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48D8 + dword_1001E48D8);
  swift_bridgeObjectRetain();
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[88] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000D9BDC;
  return v10((uint64_t)sub_1001044D4, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000DC4EC()
{
  v0[90] = 0;
  uint64_t v1 = v0[78];
  uint64_t v2 = (void *)v0[73];
  uint64_t v4 = v2[3];
  uint64_t v3 = v2[4];
  v0[91] = v3;
  uint64_t v5 = (void *)v2[5];
  v0[92] = v5;
  uint64_t v6 = swift_allocObject();
  v0[93] = v6;
  *(void *)(v6 + 16) = v1;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4840
                                                                                     + dword_1001E4840);
  swift_bridgeObjectRetain();
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[94] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000D9E8C;
  return v10((uint64_t)v10, (uint64_t)sub_1001044EC, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000DC610()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DC628()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DC640()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DC658()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DC670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 1352) = v5;
  *(unsigned char *)(v6 + 273) = a5;
  *(void *)(v6 + 1344) = a4;
  *(void *)(v6 + 1336) = a3;
  *(void *)(v6 + 1328) = a2;
  *(void *)(v6 + 1320) = a1;
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v6 + 1360) = v7;
  *(void *)(v6 + 1368) = *(void *)(v7 - 8);
  *(void *)(v6 + 1376) = swift_task_alloc();
  return _swift_task_switch(sub_1000DC744, 0, 0);
}

uint64_t sub_1000DC744()
{
  uint64_t v1 = *(uint64_t **)(v0 + 1320);
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  sub_100103920((uint64_t)v1);
  unint64_t v4 = sub_1000B74F0();
  unint64_t v5 = sub_1000B7544();
  swift_bridgeObjectRetain();
  JWS.init(compactJWS:)(v2, v3, (unint64_t)&type metadata for Postback.JWSPayload, v4, v5, v0 + 528);
  uint64_t v6 = *(void **)(v0 + 1320);
  long long v7 = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 1224) = *(_OWORD *)(v0 + 624);
  *(_OWORD *)(v0 + 1240) = v7;
  long long v8 = *(_OWORD *)(v0 + 608);
  *(_OWORD *)(v0 + 1192) = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 1208) = v8;
  *(void *)(v0 + 1304) = *(void *)(v0 + 704);
  long long v9 = *(_OWORD *)(v0 + 688);
  long long v10 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 1272) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 1288) = v9;
  *(_OWORD *)(v0 + 1256) = v10;
  long long v11 = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 1128) = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 1144) = v11;
  long long v12 = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 1160) = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 1176) = v12;
  unint64_t v39 = *(void *)(v0 + 720);
  uint64_t v40 = *(void *)(v0 + 712);
  uint64_t v41 = v5;
  uint64_t v43 = v4;
  uint64_t v13 = v6[2];
  uint64_t v14 = (void *)v6[3];
  uint64_t v16 = v6[4];
  uint64_t v15 = v6[5];
  uint64_t v17 = v6[6];
  id v18 = (void *)v6[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100103978((uint64_t)v6);
  uint64_t v38 = v16;
  *(void *)(v0 + 280) = v13;
  *(void *)(v0 + 288) = v14;
  long long v19 = v14;
  *(void *)(v0 + 296) = v16;
  *(void *)(v0 + 304) = v15;
  *(void *)(v0 + 312) = v17;
  *(void *)(v0 + 320) = v18;
  long long v20 = v18;
  long long v21 = *(_OWORD *)(v0 + 1272);
  *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 1256);
  *(_OWORD *)(v0 + 472) = v21;
  *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 1288);
  uint64_t v22 = *(void *)(v0 + 1304);
  long long v23 = *(_OWORD *)(v0 + 1208);
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 1192);
  *(_OWORD *)(v0 + 408) = v23;
  long long v24 = *(_OWORD *)(v0 + 1240);
  *(_OWORD *)(v0 + 424) = *(_OWORD *)(v0 + 1224);
  *(_OWORD *)(v0 + 440) = v24;
  long long v25 = *(_OWORD *)(v0 + 1144);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 1128);
  *(_OWORD *)(v0 + 344) = v25;
  long long v26 = *(_OWORD *)(v0 + 1176);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 1160);
  *(_OWORD *)(v0 + 376) = v26;
  *(void *)(v0 + 504) = v22;
  *(void *)(v0 + 512) = v40;
  *(void *)(v0 + 520) = v39;
  swift_bridgeObjectRetain();
  JWS.init(compactJWS:)(v40, v39, (unint64_t)&type metadata for Postback.JWSPayload, v43, v41, v0 + 728);
  uint64_t v27 = *(void *)(v0 + 1344);
  uint64_t v28 = *(void *)(v0 + 1336);
  uint64_t v42 = *(void *)(v0 + 1328);
  char v29 = *(unsigned char *)(v0 + 273) & 1;
  long long v30 = *(_OWORD *)(v0 + 904);
  *(_OWORD *)(v0 + 1088) = *(_OWORD *)(v0 + 888);
  *(_OWORD *)(v0 + 1104) = v30;
  *(void *)(v0 + 1120) = *(void *)(v0 + 920);
  long long v31 = *(_OWORD *)(v0 + 840);
  *(_OWORD *)(v0 + 1024) = *(_OWORD *)(v0 + 824);
  *(_OWORD *)(v0 + 1040) = v31;
  long long v32 = *(_OWORD *)(v0 + 872);
  *(_OWORD *)(v0 + 1056) = *(_OWORD *)(v0 + 856);
  *(_OWORD *)(v0 + 1072) = v32;
  long long v33 = *(_OWORD *)(v0 + 776);
  *(_OWORD *)(v0 + 960) = *(_OWORD *)(v0 + 760);
  *(_OWORD *)(v0 + 976) = v33;
  long long v34 = *(_OWORD *)(v0 + 808);
  *(_OWORD *)(v0 + 992) = *(_OWORD *)(v0 + 792);
  *(_OWORD *)(v0 + 1008) = v34;
  long long v35 = *(_OWORD *)(v0 + 744);
  *(_OWORD *)(v0 + 928) = *(_OWORD *)(v0 + 728);
  *(_OWORD *)(v0 + 944) = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100080070(v0 + 928, v13, v19, v17, v20, v38, v15, v42, (void *)(v0 + 16), v28, v27, v29);
  sub_1000B7598(v0 + 280);
  Swift::String v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 1384) = v36;
  *Swift::String v36 = v0;
  v36[1] = sub_1000DCC0C;
  return sub_1000DCE78(v0 + 16);
}

uint64_t sub_1000DCC0C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 1392) = v3;
  *unint64_t v3 = v2;
  v3[1] = sub_1000DCD54;
  return sub_1000DD42C(v1 + 16);
}

uint64_t sub_1000DCD54()
{
  uint64_t v1 = *v0 + 16;
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_10008150C(v1);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_1000DCE78(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000DCF38, 0, 0);
}

uint64_t sub_1000DCF38()
{
  uint64_t v2 = (const void *)v0[3];
  uint64_t v1 = (uint64_t *)v0[4];
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  v0[8] = v3;
  uint64_t v5 = (void *)v1[2];
  v0[9] = v5;
  uint64_t v6 = swift_allocObject();
  v0[10] = v6;
  memcpy((void *)(v6 + 16), v2, 0x101uLL);
  swift_bridgeObjectRetain();
  id v7 = v5;
  sub_100081480((uint64_t)v2);
  long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                     + dword_1001E48F8);
  long long v8 = (void *)swift_task_alloc();
  v0[11] = v8;
  *long long v8 = v0;
  v8[1] = sub_1000DD064;
  return v10((uint64_t)v10, (uint64_t)sub_100103C7C, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000DD064()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000DD230;
  }
  else {
    uint64_t v3 = sub_1000DD1D0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000DD1D0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000DD230()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    long long v8 = (void *)swift_slowAlloc();
    *(_DWORD *)id v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Adding postback failed: %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  swift_task_dealloc();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000DD42C(uint64_t a1)
{
  v2[105] = v1;
  v2[104] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v2[106] = v4;
  v2[107] = *(void *)(v4 - 8);
  v2[108] = swift_task_alloc();
  v2[109] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[110] = v5;
  v2[111] = *(void *)(v5 - 8);
  v2[112] = swift_task_alloc();
  uint64_t v6 = *(void *)(a1 + 64);
  v2[113] = v6;
  id v7 = (void *)swift_task_alloc();
  v2[114] = v7;
  *id v7 = v2;
  v7[1] = sub_1000DD5A0;
  return sub_1000DE444(v6);
}

uint64_t sub_1000DD5A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 920) = a1;
  *(void *)(v5 + 928) = a2;
  *(unsigned char *)(v5 + 1169) = a3;
  *(void *)(v5 + 936) = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_1000DE228;
  }
  else {
    uint64_t v6 = sub_1000DD6C0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000DD6C0()
{
  unsigned int v1 = *(unsigned __int8 *)(*(void *)(v0 + 832) + 104);
  *(unsigned char *)(v0 + 1170) = v1;
  if (v1 >= 2 && (*(unsigned char *)(v0 + 1169) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v0 + 872);
    uint64_t v14 = *(void *)(v0 + 856);
    uint64_t v15 = *(void *)(v0 + 848);
    swift_bridgeObjectRelease();
    uint64_t v16 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      long long v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Advertised app has not opted in for copy of postback", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = *(void *)(v0 + 872);
    uint64_t v21 = *(void *)(v0 + 856);
    uint64_t v22 = *(void *)(v0 + 848);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)(v0 + 936);
  sub_1000DEC1C(*(void *)(v0 + 896));
  if (v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 864);
    uint64_t v5 = *(void *)(v0 + 856);
    uint64_t v6 = *(void *)(v0 + 848);
    uint64_t v7 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      long long v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v10 = 138412290;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 824) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Adding developer postback failed %@", v10, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(void, void))(*(void *)(v0 + 856) + 8))(*(void *)(v0 + 864), *(void *)(v0 + 848));
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
  uint64_t v66 = *(void *)(v0 + 904);
  uint64_t v23 = *(void *)(v0 + 832);
  swift_bridgeObjectRelease();
  uint64_t v65 = *(void *)v23;
  *(void *)(v0 + 944) = *(void *)v23;
  char v24 = *(unsigned char *)(v23 + 8);
  uint64_t v64 = *(void *)(v23 + 16);
  *(void *)(v0 + 952) = v64;
  uint64_t v63 = *(void *)(v23 + 24);
  *(void *)(v0 + 960) = v63;
  uint64_t v62 = *(void *)(v23 + 32);
  *(void *)(v0 + 968) = v62;
  uint64_t v61 = *(void *)(v23 + 40);
  *(void *)(v0 + 976) = v61;
  uint64_t v60 = *(void *)(v23 + 48);
  *(void *)(v0 + 984) = v60;
  uint64_t v25 = *(unsigned __int8 *)(v23 + 56);
  uint64_t v59 = *(void *)(v23 + 72);
  *(void *)(v0 + 992) = v59;
  uint64_t v58 = *(void *)(v23 + 80);
  *(void *)(v0 + 1000) = v58;
  uint64_t v57 = *(void *)(v23 + 88);
  *(void *)(v0 + 1008) = v57;
  uint64_t v56 = *(void *)(v23 + 96);
  *(void *)(v0 + 1016) = v56;
  char v55 = *(unsigned char *)(v23 + 105);
  *(unsigned char *)(v0 + 1171) = v55;
  uint64_t v54 = *(void *)(v23 + 112);
  *(void *)(v0 + 1024) = v54;
  uint64_t v53 = *(void *)(v23 + 120);
  *(void *)(v0 + 1032) = v53;
  char v26 = *(unsigned char *)(v23 + 128);
  char v36 = v26;
  char v52 = *(unsigned char *)(v23 + 129);
  *(unsigned char *)(v0 + 1172) = v52;
  uint64_t v51 = *(void *)(v23 + 136);
  *(void *)(v0 + 1040) = v51;
  uint64_t v49 = *(void *)(v23 + 144);
  *(void *)(v0 + 1048) = v49;
  char v50 = *(unsigned char *)(v23 + 168);
  *(unsigned char *)(v0 + 1173) = v50;
  char v48 = *(unsigned char *)(v23 + 169);
  *(unsigned char *)(v0 + 1174) = v48;
  char v47 = *(unsigned char *)(v23 + 170);
  *(unsigned char *)(v0 + 1175) = v47;
  char v45 = *(unsigned char *)(v23 + 171);
  *(unsigned char *)(v0 + 1177) = v45;
  uint64_t v46 = *(void *)(v23 + 176);
  *(void *)(v0 + 1056) = v46;
  uint64_t v44 = *(void *)(v23 + 184);
  *(void *)(v0 + 1064) = v44;
  char v43 = *(unsigned char *)(v23 + 192);
  *(unsigned char *)(v0 + 1178) = v43;
  uint64_t v42 = *(void *)(v23 + 200);
  *(void *)(v0 + 1072) = v42;
  uint64_t v41 = *(void *)(v23 + 208);
  *(void *)(v0 + 1080) = v41;
  uint64_t v40 = *(void *)(v23 + 216);
  *(void *)(v0 + 1088) = v40;
  char v27 = *(unsigned char *)(v23 + 224);
  uint64_t v39 = *(void *)(v23 + 232);
  *(void *)(v0 + 1096) = v39;
  char v37 = v27;
  char v38 = *(unsigned char *)(v23 + 240);
  uint64_t v28 = *(void *)(v23 + 248);
  *(void *)(v0 + 1104) = v28;
  char v29 = *(unsigned char *)(v23 + 256);
  *(_OWORD *)(v0 + 808) = *(_OWORD *)(v23 + 152);
  *(unsigned char *)(v0 + 1176) = v24;
  *(unsigned char *)(v0 + 1152) = v25;
  *(unsigned char *)(v0 + 1136) = v26;
  *(unsigned char *)(v0 + 1144) = v27;
  *(unsigned char *)(v0 + 1168) = v38;
  *(unsigned char *)(v0 + 1184) = v29;
  sub_100081480(v23);
  uint64_t v30 = URL.absoluteString.getter();
  uint64_t v32 = v31;
  *(void *)(v0 + 1112) = v30;
  *(void *)(v0 + 1120) = v31;
  swift_bridgeObjectRetain();
  sub_10008A524(v0 + 808);
  *(void *)(v0 + 544) = v65;
  *(unsigned char *)(v0 + 552) = v24;
  *(void *)(v0 + 560) = v64;
  *(void *)(v0 + 568) = v63;
  *(void *)(v0 + 576) = v62;
  *(void *)(v0 + 584) = v61;
  *(void *)(v0 + 592) = v60;
  *(unsigned char *)(v0 + 600) = v25;
  *(void *)(v0 + 608) = v66;
  *(void *)(v0 + 616) = v59;
  *(void *)(v0 + 624) = v58;
  *(void *)(v0 + 632) = v57;
  *(void *)(v0 + 640) = v56;
  *(unsigned char *)(v0 + 648) = v1;
  *(unsigned char *)(v0 + 649) = v55;
  *(void *)(v0 + 656) = v54;
  *(void *)(v0 + 664) = v53;
  *(unsigned char *)(v0 + 672) = v36;
  *(unsigned char *)(v0 + 673) = v52;
  *(void *)(v0 + 680) = v51;
  *(void *)(v0 + 688) = v49;
  *(void *)(v0 + 696) = v30;
  *(void *)(v0 + 704) = v32;
  *(unsigned char *)(v0 + 712) = v50;
  *(unsigned char *)(v0 + 713) = v48;
  *(unsigned char *)(v0 + 714) = v47;
  *(unsigned char *)(v0 + 715) = v45;
  *(unsigned char *)(v0 + 716) = 1;
  *(void *)(v0 + 720) = v46;
  *(void *)(v0 + 728) = v44;
  *(unsigned char *)(v0 + 736) = v43;
  *(void *)(v0 + 744) = v42;
  *(void *)(v0 + 752) = v41;
  *(void *)(v0 + 760) = v40;
  *(unsigned char *)(v0 + 768) = v37;
  *(void *)(v0 + 776) = v39;
  *(unsigned char *)(v0 + 784) = v38;
  *(void *)(v0 + 792) = v28;
  *(unsigned char *)(v0 + 800) = v29;
  memcpy((void *)(v0 + 16), (const void *)(v0 + 544), 0x101uLL);
  sub_100081480(v0 + 544);
  swift_bridgeObjectRelease();
  long long v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 1128) = v33;
  *long long v33 = v0;
  v33[1] = sub_1000DDD8C;
  return sub_1000DCE78(v0 + 16);
}

uint64_t sub_1000DDD8C()
{
  uint64_t v1 = *v0 + 544;
  swift_task_dealloc();
  sub_10008150C(v1);
  return _swift_task_switch(sub_1000DDE94, 0, 0);
}

uint64_t sub_1000DDE94()
{
  uint64_t v22 = *(void *)(v0 + 1112);
  uint64_t v23 = *(void *)(v0 + 1120);
  uint64_t v30 = *(void *)(v0 + 1104);
  uint64_t v29 = *(void *)(v0 + 1096);
  uint64_t v28 = *(void *)(v0 + 1088);
  long long v27 = *(_OWORD *)(v0 + 1072);
  char v26 = *(unsigned char *)(v0 + 1178);
  uint64_t v25 = *(void *)(v0 + 1064);
  uint64_t v24 = *(void *)(v0 + 1056);
  char v21 = *(unsigned char *)(v0 + 1177);
  char v20 = *(unsigned char *)(v0 + 1175);
  char v18 = *(unsigned char *)(v0 + 1173);
  char v19 = *(unsigned char *)(v0 + 1174);
  long long v17 = *(_OWORD *)(v0 + 1040);
  char v16 = *(unsigned char *)(v0 + 1172);
  uint64_t v15 = *(void *)(v0 + 1032);
  uint64_t v14 = *(void *)(v0 + 1024);
  char v13 = *(unsigned char *)(v0 + 1171);
  uint64_t v11 = *(void *)(v0 + 1016);
  uint64_t v1 = *(void *)(v0 + 1008);
  uint64_t v2 = *(void *)(v0 + 1000);
  uint64_t v3 = *(void *)(v0 + 992);
  uint64_t v4 = *(void *)(v0 + 984);
  long long v12 = *(_OWORD *)(v0 + 968);
  long long v10 = *(_OWORD *)(v0 + 952);
  uint64_t v5 = *(void *)(v0 + 944);
  char v6 = *(unsigned char *)(v0 + 1170);
  uint64_t v7 = *(void *)(v0 + 904);
  (*(void (**)(void, void))(*(void *)(v0 + 888) + 8))(*(void *)(v0 + 896), *(void *)(v0 + 880));
  *(void *)(v0 + 280) = v5;
  *(void *)(v0 + 328) = v4;
  *(void *)(v0 + 344) = v7;
  *(void *)(v0 + 352) = v3;
  *(void *)(v0 + 360) = v2;
  *(void *)(v0 + 368) = v1;
  *(void *)(v0 + 376) = v11;
  *(unsigned char *)(v0 + 384) = v6;
  *(unsigned char *)(v0 + 288) = *(unsigned char *)(v0 + 1176);
  *(_DWORD *)(v0 + 289) = *(_DWORD *)(v0 + 537);
  *(_DWORD *)(v0 + 292) = *(_DWORD *)(v0 + 540);
  *(_OWORD *)(v0 + 296) = v10;
  *(_OWORD *)(v0 + 312) = v12;
  *(unsigned char *)(v0 + 336) = *(unsigned char *)(v0 + 1152);
  *(_DWORD *)(v0 + 337) = *(_DWORD *)(v0 + 1137);
  *(_DWORD *)(v0 + 340) = *(_DWORD *)(v0 + 1140);
  *(unsigned char *)(v0 + 385) = v13;
  *(_WORD *)(v0 + 390) = *(_WORD *)(v0 + 1160);
  *(_DWORD *)(v0 + 386) = *(_DWORD *)(v0 + 1156);
  *(void *)(v0 + 392) = v14;
  *(void *)(v0 + 400) = v15;
  *(unsigned char *)(v0 + 408) = *(unsigned char *)(v0 + 1136);
  *(unsigned char *)(v0 + 409) = v16;
  *(_WORD *)(v0 + 414) = *(_WORD *)(v0 + 1166);
  *(_DWORD *)(v0 + 410) = *(_DWORD *)(v0 + 1162);
  *(_OWORD *)(v0 + 416) = v17;
  *(void *)(v0 + 432) = v22;
  *(void *)(v0 + 440) = v23;
  *(unsigned char *)(v0 + 448) = v18;
  *(unsigned char *)(v0 + 449) = v19;
  *(unsigned char *)(v0 + 450) = v20;
  *(unsigned char *)(v0 + 451) = v21;
  *(unsigned char *)(v0 + 452) = 1;
  *(unsigned char *)(v0 + 455) = *(unsigned char *)(v0 + 1155);
  *(_WORD *)(v0 + 453) = *(_WORD *)(v0 + 1153);
  *(void *)(v0 + 456) = v24;
  *(void *)(v0 + 464) = v25;
  *(unsigned char *)(v0 + 472) = v26;
  *(_DWORD *)(v0 + 473) = *(_DWORD *)(v0 + 1145);
  *(_DWORD *)(v0 + 476) = *(_DWORD *)(v0 + 1148);
  *(_OWORD *)(v0 + 480) = v27;
  *(void *)(v0 + 496) = v28;
  *(unsigned char *)(v0 + 504) = *(unsigned char *)(v0 + 1144);
  *(_DWORD *)(v0 + 508) = *(_DWORD *)(v0 + 804);
  *(_DWORD *)(v0 + 505) = *(_DWORD *)(v0 + 801);
  *(void *)(v0 + 512) = v29;
  *(unsigned char *)(v0 + 520) = *(unsigned char *)(v0 + 1168);
  *(_DWORD *)(v0 + 521) = *(_DWORD *)(v0 + 273);
  *(_DWORD *)(v0 + 524) = *(_DWORD *)(v0 + 276);
  *(void *)(v0 + 528) = v30;
  *(unsigned char *)(v0 + 536) = *(unsigned char *)(v0 + 1184);
  sub_10008150C(v0 + 280);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000DE228()
{
  uint64_t v1 = v0[108];
  uint64_t v2 = v0[107];
  uint64_t v3 = v0[106];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[103] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Adding developer postback failed %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[107] + 8))(v0[108], v0[106]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000DE444(uint64_t a1)
{
  v1[28] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[29] = v2;
  v1[30] = *(void *)(v2 - 8);
  v1[31] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[32] = v3;
  v1[33] = *(void *)(v3 - 8);
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  return _swift_task_switch(sub_1000DE59C, 0, 0);
}

uint64_t sub_1000DE59C()
{
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v1 = *(void *)(v0 + 224);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  id v2 = objc_allocWithZone((Class)LSApplicationRecord);
  *(void *)(v0 + 208) = 0;
  id v3 = [v2 initWithStoreItemIdentifier:v1 error:v0 + 208];
  uint64_t v4 = *(void **)(v0 + 208);
  if (v3)
  {
    id v5 = v3;
    *(void *)(v0 + 80) = sub_100059F58();
    *(void *)(v0 + 88) = &off_1001C8F18;
    *(void *)(v0 + 56) = v5;
    id v6 = v4;
    sub_100019960(v0 + 16, &qword_1001E1398);
    sub_100059F98(v0 + 56, v0 + 16, &qword_1001E1398);
    sub_100036994(v0 + 16, v0 + 96, &qword_1001E1398);
    if (*(void *)(v0 + 120))
    {
      sub_100012D60((long long *)(v0 + 96), v0 + 136);
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      uint64_t v7 = *(void *)(v0 + 160);
      uint64_t v8 = *(void *)(v0 + 168);
      sub_100012D78((void *)(v0 + 136), v7);
      (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
      uint64_t v9 = Data.init(contentsOf:options:)();
      unint64_t v36 = v35;
      uint64_t v37 = v9;
      (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
      sub_100103BBC();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      sub_100019960(v0 + 16, &qword_1001E1398);
      sub_100020930(v37, v36);
      swift_release();
      uint64_t v41 = *(void *)(v0 + 176);
      uint64_t v40 = *(void *)(v0 + 184);
      uint64_t v42 = *(unsigned __int8 *)(v0 + 192);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 136);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
      return v43(v41, v40, v42);
    }
    uint64_t v21 = *(void *)(v0 + 264);
    uint64_t v20 = *(void *)(v0 + 272);
    uint64_t v22 = *(void *)(v0 + 256);
    sub_100019960(v0 + 96, &qword_1001E1398);
    uint64_t v23 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v23, v22);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Could not get app record for advertised app", v26, 2u);
      swift_slowDealloc();
    }
    uint64_t v28 = *(void *)(v0 + 264);
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    sub_1001011D8();
    swift_allocError();
    v30[1] = 0;
    v30[2] = 0;
    *uint64_t v30 = 5;
    swift_willThrow();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 256);
    uint64_t v12 = *(void *)(v0 + 264);
    id v13 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v14 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v14, v11);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v44 = *(void *)(v0 + 224);
      uint64_t v17 = swift_slowAlloc();
      char v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134218242;
      *(void *)(v0 + 200) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2112;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 216) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unexpected error fetching LSApplicationRecord for itemID: %llu, error: %@", (uint8_t *)v17, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v31 = *(void *)(v0 + 280);
    uint64_t v32 = *(void *)(v0 + 256);
    uint64_t v33 = *(void *)(v0 + 264);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    sub_1001011D8();
    swift_allocError();
    v34[1] = 0;
    v34[2] = 0;
    *long long v34 = 5;
    swift_willThrow();
    swift_errorRelease();
  }
  sub_100019960(v0 + 16, &qword_1001E1398);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_1000DEC1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v28 - v7;
  uint64_t v9 = sub_100012960(&qword_1001E1170);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008DAAC();
  if (!v13)
  {
    uint64_t v23 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v23, v2);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Could not extract eTLD from developer copy URL", v26, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1001011D8();
    swift_allocError();
    uint64_t v22 = 2;
    goto LABEL_9;
  }
  v28[0] = 0x2F2F3A7370747468;
  v28[1] = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRetain();
  v14._object = (void *)0x8000000100187580;
  v14._countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v15) == 1)
  {
    sub_100019960((uint64_t)v11, &qword_1001E1170);
    uint64_t v17 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v17, v2);
    char v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create URL from developer copy URL string", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    sub_1001011D8();
    swift_allocError();
    uint64_t v22 = 3;
LABEL_9:
    uint64_t *v21 = v22;
    v21[1] = 0;
    v21[2] = 0;
    return swift_willThrow();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1, v11, v15);
}

void sub_1000DF01C(void *a1, void *a2)
{
  id v4 = [a1 connection];
  id v5 = sub_1000D74E8(a2, v4);

  if (!v2) {
}
  }

uint64_t sub_1000DF088(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 640) = v6;
  *(void *)(v7 + 632) = a6;
  *(void *)(v7 + 624) = a5;
  *(unsigned char *)(v7 + 753) = a4;
  *(unsigned char *)(v7 + 752) = a3;
  *(void *)(v7 + 616) = a2;
  *(void *)(v7 + 608) = a1;
  uint64_t v8 = sub_100012960(&qword_1001E2D98);
  *(void *)(v7 + 648) = v8;
  *(void *)(v7 + 656) = *(void *)(v8 - 8);
  *(void *)(v7 + 664) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v7 + 672) = v9;
  *(void *)(v7 + 680) = *(void *)(v9 - 8);
  *(void *)(v7 + 688) = swift_task_alloc();
  uint64_t updated = type metadata accessor for PostbackUpdateData();
  *(void *)(v7 + 696) = updated;
  uint64_t v11 = *(void *)(updated - 8);
  *(void *)(v7 + 704) = v11;
  *(void *)(v7 + 712) = *(void *)(v11 + 64);
  *(void *)(v7 + 720) = swift_task_alloc();
  *(void *)(v7 + 728) = swift_task_alloc();
  return _swift_task_switch(sub_1000DF234, 0, 0);
}

uint64_t sub_1000DF234()
{
  unint64_t v1 = *(void *)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 688);
  if (v1 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v0 + 680);
    uint64_t v29 = *(void *)(v0 + 672);
    uint64_t v8 = *(void *)(v0 + 632);
    uint64_t v9 = *(void *)(v0 + 624);
    char v10 = *(unsigned char *)(v0 + 753);
    char v11 = *(unsigned char *)(v0 + 752);
    uint64_t v12 = v2 + *(int *)(*(void *)(v0 + 696) + 32);
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, v8, v13);
    *(void *)uint64_t v2 = v1;
    *(unsigned char *)(v2 + 8) = v11;
    *(unsigned char *)(v2 + 9) = v10;
    *(void *)(v2 + 16) = v9;
    swift_bridgeObjectRetain();
    uint64_t v14 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, v14, v29);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Queueing update postback", v17, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = *(void *)(v0 + 728);
    uint64_t v19 = *(void *)(v0 + 720);
    uint64_t v20 = *(void *)(v0 + 704);
    uint64_t v21 = *(void *)(v0 + 688);
    uint64_t v22 = *(void *)(v0 + 680);
    uint64_t v23 = *(void *)(v0 + 672);
    uint64_t v24 = *(void *)(v0 + 640);
    uint64_t v30 = *(void *)(v0 + 608);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    sub_10007BFF0(v24, v0 + 16);
    sub_100100DC0(v18, v19);
    unint64_t v25 = (*(unsigned __int8 *)(v20 + 80) + 536) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v26 = swift_allocObject();
    *(void *)(v0 + 736) = v26;
    memcpy((void *)(v26 + 16), (const void *)(v0 + 16), 0x200uLL);
    *(void *)(v26 + 528) = v30;
    sub_100100FC8(v19, v26 + v25);
    uint64_t v27 = sub_100012D78((void *)(v24 + 224), *(void *)(v24 + 248));
    uint64_t v28 = *v27;
    *(void *)(v0 + 744) = *v27;
    *(void *)(v0 + 552) = sub_100012960(&qword_1001E2DB8);
    *(void *)(v0 + 560) = sub_10010111C();
    *(void *)(v0 + 528) = &unk_1001E3B50;
    *(void *)(v0 + 536) = v26;
    swift_retain();
    return _swift_task_switch(sub_1000DF56C, v28, 0);
  }
  else
  {
    sub_1001011D8();
    swift_allocError();
    v4[1] = 0;
    v4[2] = 0;
    *id v4 = 7;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1000DF56C()
{
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[81];
  sub_100029CD8((uint64_t)(v0 + 66), (uint64_t)(v0 + 71));
  sub_100012960(&qword_1001E0B08);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 66));
  return _swift_task_switch(sub_1000DF648, 0, 0);
}

uint64_t sub_1000DF648()
{
  uint64_t v1 = *(void *)(v0 + 728);
  swift_release();
  sub_100101178(v1, (uint64_t (*)(void))type metadata accessor for PostbackUpdateData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000DF700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000DF7C4, 0, 0);
}

uint64_t sub_1000DF7C4()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Begin update postback", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v10 = v0[5];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  char v11 = (void *)swift_task_alloc();
  v0[8] = v11;
  *char v11 = v0;
  v11[1] = sub_1000DF918;
  uint64_t v13 = v0[3];
  uint64_t v12 = v0[4];
  return sub_1000DFA28(v13, v12);
}

uint64_t sub_1000DF918()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000DFA28(uint64_t a1, uint64_t a2)
{
  v3[287] = v2;
  v3[286] = a2;
  v3[285] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[288] = v4;
  v3[289] = *(void *)(v4 - 8);
  v3[290] = swift_task_alloc();
  v3[291] = swift_task_alloc();
  v3[292] = swift_task_alloc();
  v3[293] = type metadata accessor for PostbackUpdateData();
  v3[294] = swift_task_alloc();
  uint64_t v5 = sub_100012960(&qword_1001E1370);
  v3[295] = v5;
  v3[296] = *(void *)(v5 - 8);
  v3[297] = swift_task_alloc();
  uint64_t v8 = (uint64_t (*)(char))((char *)&dword_1001E4078 + dword_1001E4078);
  os_log_type_t v6 = (void *)swift_task_alloc();
  v3[298] = v6;
  *os_log_type_t v6 = v3;
  v6[1] = sub_1000DFBE0;
  return v8(17);
}

uint64_t sub_1000DFBE0(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  uint64_t v7 = *v2;
  *(void *)(v3 + 2392) = a1;
  *(unsigned char *)(v3 + 273) = a2;
  swift_task_dealloc();
  os_log_type_t v6 = (uint64_t (*)(char))((char *)&dword_1001E4078 + dword_1001E4078);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 2400) = v4;
  *uint64_t v4 = v7;
  v4[1] = sub_1000DFD28;
  return v6(18);
}

uint64_t sub_1000DFD28(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 2408) = a1;
  *(unsigned char *)(v3 + 274) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000DFE2C, 0, 0);
}

uint64_t sub_1000DFE2C()
{
  uint64_t v1 = v0[286];
  if (*(void *)(v1 + 16)) {
    uint64_t v2 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v2 = static ConversionType.allCasesSet.getter();
  }
  v0[302] = v2;
  uint64_t v3 = (void *)v0[287];
  uint64_t v4 = v0[285];
  uint64_t v6 = v3[3];
  uint64_t v5 = v3[4];
  v0[303] = v5;
  uint64_t v7 = (void *)v3[5];
  v0[304] = v7;
  uint64_t v8 = swift_allocObject();
  v0[305] = v8;
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = v2;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4848 + dword_1001E4848);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v7;
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[306] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000DFF84;
  return v12((uint64_t)sub_100101264, v8, v6, v5, (uint64_t)v9);
}

uint64_t sub_1000DFF84(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 2456) = a1;
  *(void *)(v4 + 2464) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void **)(v3 + 2432);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v6 = sub_1000E4558;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v6 = sub_1000E0120;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E0120()
{
  uint64_t v60 = v0;
  uint64_t v1 = *(void *)(v0 + 2456);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 2472) = v2;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v0 + 2216;
    uint64_t v5 = (uint64_t *)(v0 + 2464);
    uint64_t v6 = (uint64_t *)(v0 + 2536);
    uint64_t v7 = (unsigned char *)(v0 + 1963);
    while (1)
    {
      uint64_t v8 = *v5;
      *(void *)(v0 + 2480) = v3;
      id v9 = *(void **)(v0 + 2288);
      uint64_t v10 = (_OWORD *)(v1 + (v3 << 7));
      char v11 = v10 + 2;
      long long v12 = v10[4];
      long long v13 = v10[5];
      long long v14 = v10[3];
      *(_OWORD *)(v0 + 1912) = v10[2];
      *(_OWORD *)(v0 + 1928) = v14;
      *(_OWORD *)(v0 + 1944) = v12;
      *(_OWORD *)(v0 + 1960) = v13;
      long long v15 = v10[9];
      long long v17 = v10[6];
      long long v16 = v10[7];
      *(_OWORD *)(v0 + 2008) = v10[8];
      *(_OWORD *)(v0 + 2024) = v15;
      *(_OWORD *)(v0 + 1976) = v17;
      *(_OWORD *)(v0 + 1992) = v16;
      uint64_t v18 = swift_allocObject();
      *(void *)(v0 + 2488) = v18;
      memmove((void *)(v18 + 16), v11, 0x80uLL);
      swift_beginAccess();
      sub_10005D5A0(v0 + 1912);
      sub_10005C054(v9);
      if (!v8) {
        break;
      }
      swift_endAccess();
      uint64_t v19 = *(void *)(v0 + 2328);
      uint64_t v20 = *(void *)(v0 + 2312);
      uint64_t v21 = *(void *)(v0 + 2304);
      uint64_t v22 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v22, v21);
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      BOOL v24 = os_log_type_enabled(v23, v57);
      uint64_t v25 = *(void *)(v0 + 2488);
      uint64_t v26 = *(void *)(v0 + 2328);
      uint64_t v27 = *(void *)(v0 + 2312);
      uint64_t v58 = *(void *)(v0 + 2304);
      if (v24)
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v54 = (void *)swift_slowAlloc();
        v59[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136315394;
        log = v23;
        uint64_t v29 = v4;
        uint64_t v56 = v26;
        uint64_t v30 = v7;
        uint64_t v31 = *(void *)(v25 + 72);
        unint64_t v32 = *(void *)(v25 + 80);
        swift_bridgeObjectRetain();
        uint64_t v33 = v31;
        uint64_t v4 = v29;
        *(void *)(v28 + 4) = sub_100147668(v33, v32, v59);
        uint64_t v7 = v30;
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v28 + 12) = 2112;
        swift_errorRetain();
        uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v28 + 14) = v34;
        *uint64_t v54 = v34;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v57, "Failed to update ghostback %s with error: %@", (uint8_t *)v28, 0x16u);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v6 = (uint64_t *)(v0 + 2536);
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v56, v58);
      }
      else
      {
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v58);
      }
      *(void *)(v0 + 2544) = v8;
      *(void *)(v0 + 2536) = 0;
      if ((*v7 & 1) == 0)
      {
        uint64_t v43 = *(void *)(v0 + 2488);
        uint64_t v44 = *(void *)(v0 + 2296);
        swift_errorRetain();
        sub_10009485C(4, 2, v8, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1144), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
          0,
          1u,
          2u,
          3u,
          0,
          1u,
          0,
          0,
          2u);
        long long v45 = *(_OWORD *)(v0 + 1288);
        *(_OWORD *)(v0 + 1656) = *(_OWORD *)(v0 + 1272);
        *(_OWORD *)(v0 + 1672) = v45;
        *(_OWORD *)(v0 + 1688) = *(_OWORD *)(v0 + 1304);
        *(_OWORD *)(v0 + 1697) = *(_OWORD *)(v0 + 1313);
        long long v46 = *(_OWORD *)(v0 + 1224);
        *(_OWORD *)(v0 + 1592) = *(_OWORD *)(v0 + 1208);
        *(_OWORD *)(v0 + 1608) = v46;
        long long v47 = *(_OWORD *)(v0 + 1256);
        *(_OWORD *)(v0 + 1624) = *(_OWORD *)(v0 + 1240);
        *(_OWORD *)(v0 + 1640) = v47;
        long long v48 = *(_OWORD *)(v0 + 1160);
        *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v0 + 1144);
        *(_OWORD *)(v0 + 1544) = v48;
        long long v49 = *(_OWORD *)(v0 + 1192);
        *(_OWORD *)(v0 + 1560) = *(_OWORD *)(v0 + 1176);
        *(_OWORD *)(v0 + 1576) = v49;
        char v50 = sub_100012D78((void *)(v44 + 472), *(void *)(v44 + 496));
        *(void *)(v0 + 2552) = *(void *)(v43 + 72);
        *(void *)(v0 + 2560) = *(void *)(v43 + 80);
        uint64_t v51 = *v50;
        *(void *)(v0 + 2568) = *v50;
        swift_bridgeObjectRetain();
        return _swift_task_switch(sub_1000E1714, v51, 0);
      }
      swift_errorRelease();
      swift_release();
      uint64_t v3 = *(void *)(v0 + 2480) + 1;
      if (v3 == *(void *)(v0 + 2472)) {
        goto LABEL_16;
      }
      uint64_t v1 = *(void *)(v0 + 2456);
      uint64_t v5 = v6;
    }
    unint64_t v35 = *(void **)(v0 + 2296);
    swift_endAccess();
    uint64_t v37 = v35[3];
    uint64_t v36 = v35[4];
    *(void *)(v0 + 2496) = v36;
    char v38 = (void *)v35[5];
    *(void *)(v0 + 2504) = v38;
    swift_bridgeObjectRetain();
    id v39 = v38;
    swift_retain();
    *(void *)(v0 + 2160) = &type metadata for GhostbackDatabaseStore;
    *(void *)(v0 + 2168) = &off_1001E3A98;
    *(void *)(v0 + 2136) = v37;
    *(void *)(v0 + 2144) = v36;
    *(void *)(v0 + 2152) = v39;
    swift_bridgeObjectRetain();
    id v40 = v39;
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 2512) = v41;
    v41[2] = v40;
    v41[3] = v0 + 2136;
    v41[4] = sub_100100CA8;
    v41[5] = v18;
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 2520) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1000E0800;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v42, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100104440, v41, (char *)&type metadata for () + 8);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    char v52 = (void *)swift_task_alloc();
    *(void *)(v0 + 2576) = v52;
    *char v52 = v0;
    v52[1] = sub_1000E1F64;
    return sub_1000E4A18();
  }
}

uint64_t sub_1000E0800()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2528) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000E1030;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 2504);
    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 2136);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000E0950;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E0950()
{
  uint64_t v57 = v0;
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(v0 + 2528);
  *(void *)(v0 + 2544) = 0;
  *(void *)(v0 + 2536) = v2;
  if (*(unsigned char *)(v0 + 1963) == 1)
  {
    uint64_t v3 = v0 + 2216;
    uint64_t v4 = (unsigned char *)(v0 + 1963);
    while (1)
    {
      swift_errorRelease();
      swift_release();
      uint64_t v7 = *(void *)(v0 + 2480) + 1;
      if (v7 == *(void *)(v0 + 2472)) {
        break;
      }
      uint64_t v1 = *(void *)(v0 + 2536);
      *(void *)(v0 + 2480) = v7;
      uint64_t v8 = *(void **)(v0 + 2288);
      id v9 = (_OWORD *)(*(void *)(v0 + 2456) + (v7 << 7));
      uint64_t v10 = v9 + 2;
      long long v11 = v9[4];
      long long v12 = v9[5];
      long long v13 = v9[3];
      *(_OWORD *)(v0 + 1912) = v9[2];
      *(_OWORD *)(v0 + 1928) = v13;
      *(_OWORD *)(v0 + 1944) = v11;
      *(_OWORD *)(v0 + 1960) = v12;
      long long v14 = v9[9];
      long long v16 = v9[6];
      long long v15 = v9[7];
      *(_OWORD *)(v0 + 2008) = v9[8];
      *(_OWORD *)(v0 + 2024) = v14;
      *(_OWORD *)(v0 + 1976) = v16;
      *(_OWORD *)(v0 + 1992) = v15;
      uint64_t v17 = swift_allocObject();
      *(void *)(v0 + 2488) = v17;
      memmove((void *)(v17 + 16), v10, 0x80uLL);
      swift_beginAccess();
      sub_10005D5A0(v0 + 1912);
      sub_10005C054(v8);
      if (!v1)
      {
        uint64_t v43 = *(void **)(v0 + 2296);
        swift_endAccess();
        uint64_t v45 = v43[3];
        uint64_t v44 = v43[4];
        *(void *)(v0 + 2496) = v44;
        long long v46 = (void *)v43[5];
        *(void *)(v0 + 2504) = v46;
        swift_bridgeObjectRetain();
        id v47 = v46;
        swift_retain();
        *(void *)(v0 + 2160) = &type metadata for GhostbackDatabaseStore;
        *(void *)(v0 + 2168) = &off_1001E3A98;
        *(void *)(v0 + 2136) = v45;
        *(void *)(v0 + 2144) = v44;
        *(void *)(v0 + 2152) = v47;
        swift_bridgeObjectRetain();
        id v48 = v47;
        long long v49 = (void *)swift_task_alloc();
        *(void *)(v0 + 2512) = v49;
        v49[2] = v48;
        v49[3] = v0 + 2136;
        v49[4] = sub_100100CA8;
        v49[5] = v17;
        char v50 = (void *)swift_task_alloc();
        *(void *)(v0 + 2520) = v50;
        void *v50 = v0;
        v50[1] = sub_1000E0800;
        return withCheckedThrowingContinuation<A>(isolation:function:_:)(v50, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100104440, v49, (char *)&type metadata for () + 8);
      }
      swift_endAccess();
      uint64_t v18 = *(void *)(v0 + 2328);
      uint64_t v19 = *(void *)(v0 + 2312);
      uint64_t v20 = *(void *)(v0 + 2304);
      uint64_t v21 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      BOOL v24 = os_log_type_enabled(v22, v23);
      uint64_t v25 = *(void *)(v0 + 2488);
      uint64_t v26 = *(void *)(v0 + 2312);
      if (v24)
      {
        uint64_t v54 = *(void *)(v0 + 2328);
        uint64_t v55 = *(void *)(v0 + 2304);
        uint64_t v27 = swift_slowAlloc();
        char v52 = (void *)swift_slowAlloc();
        v56[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v53 = v22;
        uint64_t v28 = v3;
        uint64_t v29 = *(void *)(v25 + 72);
        unint64_t v30 = *(void *)(v25 + 80);
        swift_bridgeObjectRetain();
        uint64_t v31 = v29;
        uint64_t v3 = v28;
        *(void *)(v27 + 4) = sub_100147668(v31, v30, v56);
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v27 + 12) = 2112;
        swift_errorRetain();
        uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v27 + 14) = v32;
        *char v52 = v32;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v53, v23, "Failed to update ghostback %s with error: %@", (uint8_t *)v27, 0x16u);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v4 = (unsigned char *)(v0 + 1963);
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v54, v55);
      }
      else
      {
        uint64_t v5 = *(void *)(v0 + 2304);
        uint64_t v6 = *(void *)(v0 + 2328);
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v6, v5);
      }
      *(void *)(v0 + 2544) = v1;
      *(void *)(v0 + 2536) = 0;
      if ((*v4 & 1) == 0) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 2576) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1000E1F64;
    return sub_1000E4A18();
  }
  else
  {
LABEL_9:
    uint64_t v33 = *(void *)(v0 + 2488);
    uint64_t v34 = *(void *)(v0 + 2296);
    swift_errorRetain();
    sub_10009485C(4, 2, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1144), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      2u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v35 = *(_OWORD *)(v0 + 1288);
    *(_OWORD *)(v0 + 1656) = *(_OWORD *)(v0 + 1272);
    *(_OWORD *)(v0 + 1672) = v35;
    *(_OWORD *)(v0 + 1688) = *(_OWORD *)(v0 + 1304);
    *(_OWORD *)(v0 + 1697) = *(_OWORD *)(v0 + 1313);
    long long v36 = *(_OWORD *)(v0 + 1224);
    *(_OWORD *)(v0 + 1592) = *(_OWORD *)(v0 + 1208);
    *(_OWORD *)(v0 + 1608) = v36;
    long long v37 = *(_OWORD *)(v0 + 1256);
    *(_OWORD *)(v0 + 1624) = *(_OWORD *)(v0 + 1240);
    *(_OWORD *)(v0 + 1640) = v37;
    long long v38 = *(_OWORD *)(v0 + 1160);
    *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v0 + 1144);
    *(_OWORD *)(v0 + 1544) = v38;
    long long v39 = *(_OWORD *)(v0 + 1192);
    *(_OWORD *)(v0 + 1560) = *(_OWORD *)(v0 + 1176);
    *(_OWORD *)(v0 + 1576) = v39;
    id v40 = sub_100012D78((void *)(v34 + 472), *(void *)(v34 + 496));
    *(void *)(v0 + 2552) = *(void *)(v33 + 72);
    *(void *)(v0 + 2560) = *(void *)(v33 + 80);
    uint64_t v41 = *v40;
    *(void *)(v0 + 2568) = *v40;
    swift_bridgeObjectRetain();
    return _swift_task_switch(sub_1000E1714, v41, 0);
  }
}

uint64_t sub_1000E1030()
{
  uint64_t v55 = v0;
  uint64_t v1 = v0 + 2216;
  uint64_t v2 = *(void **)(v0 + 2504);
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 2136);
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v3 = *(void *)(v0 + 2528);
  uint64_t v4 = (unsigned char *)(v0 + 1963);
  while (1)
  {
    uint64_t v5 = *(void *)(v0 + 2328);
    uint64_t v6 = *(void *)(v0 + 2312);
    uint64_t v7 = *(void *)(v0 + 2304);
    uint64_t v8 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 2488);
    uint64_t v13 = *(void *)(v0 + 2312);
    uint64_t v52 = *(void *)(v0 + 2304);
    uint64_t v53 = *(void *)(v0 + 2328);
    if (v11)
    {
      uint64_t v14 = swift_slowAlloc();
      char v50 = (void *)swift_slowAlloc();
      v54[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      uint64_t v51 = v9;
      uint64_t v15 = v1;
      uint64_t v16 = *(void *)(v12 + 72);
      unint64_t v17 = *(void *)(v12 + 80);
      swift_bridgeObjectRetain();
      uint64_t v18 = v16;
      uint64_t v1 = v15;
      *(void *)(v14 + 4) = sub_100147668(v18, v17, v54);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v14 + 12) = 2112;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v14 + 14) = v19;
      void *v50 = v19;
      swift_errorRelease();
      swift_errorRelease();
      id v9 = v51;
      _os_log_impl((void *)&_mh_execute_header, v51, v10, "Failed to update ghostback %s with error: %@", (uint8_t *)v14, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = (unsigned char *)(v0 + 1963);
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v53, v52);
    *(void *)(v0 + 2544) = v3;
    *(void *)(v0 + 2536) = 0;
    if ((*v4 & 1) == 0) {
      break;
    }
    swift_errorRelease();
    swift_release();
    uint64_t v20 = *(void *)(v0 + 2480) + 1;
    if (v20 == *(void *)(v0 + 2472))
    {
      swift_bridgeObjectRelease();
      id v40 = (void *)swift_task_alloc();
      *(void *)(v0 + 2576) = v40;
      *id v40 = v0;
      v40[1] = sub_1000E1F64;
      return sub_1000E4A18();
    }
    uint64_t v3 = *(void *)(v0 + 2536);
    *(void *)(v0 + 2480) = v20;
    uint64_t v21 = *(void **)(v0 + 2288);
    uint64_t v22 = (_OWORD *)(*(void *)(v0 + 2456) + (v20 << 7));
    os_log_type_t v23 = v22 + 2;
    long long v24 = v22[4];
    long long v25 = v22[5];
    long long v26 = v22[3];
    *(_OWORD *)(v0 + 1912) = v22[2];
    *(_OWORD *)(v0 + 1928) = v26;
    *(_OWORD *)(v0 + 1944) = v24;
    *(_OWORD *)(v0 + 1960) = v25;
    long long v27 = v22[9];
    long long v29 = v22[6];
    long long v28 = v22[7];
    *(_OWORD *)(v0 + 2008) = v22[8];
    *(_OWORD *)(v0 + 2024) = v27;
    *(_OWORD *)(v0 + 1976) = v29;
    *(_OWORD *)(v0 + 1992) = v28;
    uint64_t v30 = swift_allocObject();
    *(void *)(v0 + 2488) = v30;
    memmove((void *)(v30 + 16), v23, 0x80uLL);
    swift_beginAccess();
    sub_10005D5A0(v0 + 1912);
    sub_10005C054(v21);
    if (!v3)
    {
      uint64_t v41 = *(void **)(v0 + 2296);
      swift_endAccess();
      uint64_t v43 = v41[3];
      uint64_t v42 = v41[4];
      *(void *)(v0 + 2496) = v42;
      uint64_t v44 = (void *)v41[5];
      *(void *)(v0 + 2504) = v44;
      swift_bridgeObjectRetain();
      id v45 = v44;
      swift_retain();
      *(void *)(v0 + 2160) = &type metadata for GhostbackDatabaseStore;
      *(void *)(v0 + 2168) = &off_1001E3A98;
      *(void *)(v0 + 2136) = v43;
      *(void *)(v0 + 2144) = v42;
      *(void *)(v0 + 2152) = v45;
      swift_bridgeObjectRetain();
      id v46 = v45;
      id v47 = (void *)swift_task_alloc();
      *(void *)(v0 + 2512) = v47;
      v47[2] = v46;
      v47[3] = v0 + 2136;
      v47[4] = sub_100100CA8;
      v47[5] = v30;
      id v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 2520) = v48;
      void *v48 = v0;
      v48[1] = sub_1000E0800;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v48, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100104440, v47, (char *)&type metadata for () + 8);
    }
    swift_endAccess();
  }
  uint64_t v31 = *(void *)(v0 + 2488);
  uint64_t v32 = *(void *)(v0 + 2296);
  swift_errorRetain();
  sub_10009485C(4, 2, v3, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1144), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v33 = *(_OWORD *)(v0 + 1288);
  *(_OWORD *)(v0 + 1656) = *(_OWORD *)(v0 + 1272);
  *(_OWORD *)(v0 + 1672) = v33;
  *(_OWORD *)(v0 + 1688) = *(_OWORD *)(v0 + 1304);
  *(_OWORD *)(v0 + 1697) = *(_OWORD *)(v0 + 1313);
  long long v34 = *(_OWORD *)(v0 + 1224);
  *(_OWORD *)(v0 + 1592) = *(_OWORD *)(v0 + 1208);
  *(_OWORD *)(v0 + 1608) = v34;
  long long v35 = *(_OWORD *)(v0 + 1256);
  *(_OWORD *)(v0 + 1624) = *(_OWORD *)(v0 + 1240);
  *(_OWORD *)(v0 + 1640) = v35;
  long long v36 = *(_OWORD *)(v0 + 1160);
  *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v0 + 1144);
  *(_OWORD *)(v0 + 1544) = v36;
  long long v37 = *(_OWORD *)(v0 + 1192);
  *(_OWORD *)(v0 + 1560) = *(_OWORD *)(v0 + 1176);
  *(_OWORD *)(v0 + 1576) = v37;
  long long v38 = sub_100012D78((void *)(v32 + 472), *(void *)(v32 + 496));
  *(void *)(v0 + 2552) = *(void *)(v31 + 72);
  *(void *)(v0 + 2560) = *(void *)(v31 + 80);
  uint64_t v39 = *v38;
  *(void *)(v0 + 2568) = *v38;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1000E1714, v39, 0);
}

uint64_t sub_1000E1714()
{
  uint64_t v1 = *(void *)(v0 + 2560);
  uint64_t v2 = *(void *)(v0 + 2552);
  uint64_t v3 = *(void *)(v0 + 2376);
  uint64_t v4 = *(void *)(v0 + 2368);
  uint64_t v5 = *(void *)(v0 + 2360);
  long long v6 = *(_OWORD *)(v0 + 1672);
  *(_OWORD *)(v0 + 1056) = *(_OWORD *)(v0 + 1656);
  *(_OWORD *)(v0 + 1072) = v6;
  *(_OWORD *)(v0 + 1088) = *(_OWORD *)(v0 + 1688);
  *(_OWORD *)(v0 + 1097) = *(_OWORD *)(v0 + 1697);
  long long v7 = *(_OWORD *)(v0 + 1608);
  *(_OWORD *)(v0 + 992) = *(_OWORD *)(v0 + 1592);
  *(_OWORD *)(v0 + 1008) = v7;
  long long v8 = *(_OWORD *)(v0 + 1640);
  *(_OWORD *)(v0 + 1024) = *(_OWORD *)(v0 + 1624);
  *(_OWORD *)(v0 + 1040) = v8;
  long long v9 = *(_OWORD *)(v0 + 1544);
  *(_OWORD *)(v0 + 928) = *(_OWORD *)(v0 + 1528);
  *(_OWORD *)(v0 + 944) = v9;
  long long v10 = *(_OWORD *)(v0 + 1576);
  *(_OWORD *)(v0 + 960) = *(_OWORD *)(v0 + 1560);
  *(_OWORD *)(v0 + 976) = v10;
  *(void *)(v0 + 1120) = v2;
  *(void *)(v0 + 1128) = v1;
  *(_WORD *)(v0 + 1136) = 257;
  sub_10003675C(v0 + 928);
  sub_1000367C8(v0 + 928, v0 + 280);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 1144);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100036824(v0 + 1144);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000E1878, 0, 0);
}

uint64_t sub_1000E1878()
{
  uint64_t v56 = v0;
  swift_errorRelease();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 2480) + 1;
  if (v1 == *(void *)(v0 + 2472))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 2576) = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_1000E1F64;
    return sub_1000E4A18();
  }
  else
  {
    uint64_t v2 = v0 + 2216;
    uint64_t v3 = (unsigned char *)(v0 + 1963);
    while (1)
    {
      uint64_t v4 = *(void *)(v0 + 2536);
      *(void *)(v0 + 2480) = v1;
      uint64_t v5 = *(void **)(v0 + 2288);
      long long v6 = (_OWORD *)(*(void *)(v0 + 2456) + (v1 << 7));
      long long v7 = v6 + 2;
      long long v8 = v6[4];
      long long v9 = v6[5];
      long long v10 = v6[3];
      *(_OWORD *)(v0 + 1912) = v6[2];
      *(_OWORD *)(v0 + 1928) = v10;
      *(_OWORD *)(v0 + 1944) = v8;
      *(_OWORD *)(v0 + 1960) = v9;
      long long v11 = v6[9];
      long long v13 = v6[6];
      long long v12 = v6[7];
      *(_OWORD *)(v0 + 2008) = v6[8];
      *(_OWORD *)(v0 + 2024) = v11;
      *(_OWORD *)(v0 + 1976) = v13;
      *(_OWORD *)(v0 + 1992) = v12;
      uint64_t v14 = swift_allocObject();
      *(void *)(v0 + 2488) = v14;
      memmove((void *)(v14 + 16), v7, 0x80uLL);
      swift_beginAccess();
      sub_10005D5A0(v0 + 1912);
      sub_10005C054(v5);
      if (!v4) {
        break;
      }
      swift_endAccess();
      uint64_t v15 = *(void *)(v0 + 2328);
      uint64_t v16 = *(void *)(v0 + 2312);
      uint64_t v17 = *(void *)(v0 + 2304);
      uint64_t v18 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18, v17);
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      BOOL v21 = os_log_type_enabled(v19, v20);
      uint64_t v22 = *(void *)(v0 + 2488);
      uint64_t v23 = *(void *)(v0 + 2312);
      if (v21)
      {
        uint64_t v53 = *(void *)(v0 + 2328);
        uint64_t v54 = *(void *)(v0 + 2304);
        uint64_t v24 = swift_slowAlloc();
        uint64_t v51 = (void *)swift_slowAlloc();
        v55[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315394;
        uint64_t v52 = v19;
        uint64_t v25 = v2;
        uint64_t v26 = *(void *)(v22 + 72);
        unint64_t v27 = *(void *)(v22 + 80);
        swift_bridgeObjectRetain();
        uint64_t v28 = v26;
        uint64_t v2 = v25;
        *(void *)(v24 + 4) = sub_100147668(v28, v27, v55);
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v24 + 12) = 2112;
        swift_errorRetain();
        uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v24 + 14) = v29;
        void *v51 = v29;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, v20, "Failed to update ghostback %s with error: %@", (uint8_t *)v24, 0x16u);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v3 = (unsigned char *)(v0 + 1963);
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v53, v54);
      }
      else
      {
        uint64_t v30 = *(void *)(v0 + 2304);
        uint64_t v31 = *(void *)(v0 + 2328);
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v31, v30);
      }
      *(void *)(v0 + 2544) = v4;
      *(void *)(v0 + 2536) = 0;
      if ((*v3 & 1) == 0)
      {
        uint64_t v42 = *(void *)(v0 + 2488);
        uint64_t v43 = *(void *)(v0 + 2296);
        swift_errorRetain();
        sub_10009485C(4, 2, v4, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1144), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
          0,
          1u,
          2u,
          3u,
          0,
          1u,
          0,
          0,
          2u);
        long long v44 = *(_OWORD *)(v0 + 1288);
        *(_OWORD *)(v0 + 1656) = *(_OWORD *)(v0 + 1272);
        *(_OWORD *)(v0 + 1672) = v44;
        *(_OWORD *)(v0 + 1688) = *(_OWORD *)(v0 + 1304);
        *(_OWORD *)(v0 + 1697) = *(_OWORD *)(v0 + 1313);
        long long v45 = *(_OWORD *)(v0 + 1224);
        *(_OWORD *)(v0 + 1592) = *(_OWORD *)(v0 + 1208);
        *(_OWORD *)(v0 + 1608) = v45;
        long long v46 = *(_OWORD *)(v0 + 1256);
        *(_OWORD *)(v0 + 1624) = *(_OWORD *)(v0 + 1240);
        *(_OWORD *)(v0 + 1640) = v46;
        long long v47 = *(_OWORD *)(v0 + 1160);
        *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v0 + 1144);
        *(_OWORD *)(v0 + 1544) = v47;
        long long v48 = *(_OWORD *)(v0 + 1192);
        *(_OWORD *)(v0 + 1560) = *(_OWORD *)(v0 + 1176);
        *(_OWORD *)(v0 + 1576) = v48;
        long long v49 = sub_100012D78((void *)(v43 + 472), *(void *)(v43 + 496));
        *(void *)(v0 + 2552) = *(void *)(v42 + 72);
        *(void *)(v0 + 2560) = *(void *)(v42 + 80);
        uint64_t v50 = *v49;
        *(void *)(v0 + 2568) = *v49;
        swift_bridgeObjectRetain();
        return _swift_task_switch(sub_1000E1714, v50, 0);
      }
      swift_errorRelease();
      swift_release();
      uint64_t v1 = *(void *)(v0 + 2480) + 1;
      if (v1 == *(void *)(v0 + 2472)) {
        goto LABEL_9;
      }
    }
    long long v34 = *(void **)(v0 + 2296);
    swift_endAccess();
    uint64_t v36 = v34[3];
    uint64_t v35 = v34[4];
    *(void *)(v0 + 2496) = v35;
    long long v37 = (void *)v34[5];
    *(void *)(v0 + 2504) = v37;
    swift_bridgeObjectRetain();
    id v38 = v37;
    swift_retain();
    *(void *)(v0 + 2160) = &type metadata for GhostbackDatabaseStore;
    *(void *)(v0 + 2168) = &off_1001E3A98;
    *(void *)(v0 + 2136) = v36;
    *(void *)(v0 + 2144) = v35;
    *(void *)(v0 + 2152) = v38;
    swift_bridgeObjectRetain();
    id v39 = v38;
    id v40 = (void *)swift_task_alloc();
    *(void *)(v0 + 2512) = v40;
    _OWORD v40[2] = v39;
    v40[3] = v0 + 2136;
    v40[4] = sub_100100CA8;
    v40[5] = v14;
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 2520) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_1000E0800;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v41, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100104440, v40, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_1000E1F64(uint64_t a1)
{
  *(void *)(*(void *)v1 + 2584) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E2064, 0, 0);
}

uint64_t sub_1000E2064()
{
  uint64_t v15 = v0;
  uint64_t v1 = v0[302];
  uint64_t v2 = (uint64_t *)v0[287];
  uint64_t v3 = v0[285];
  id v4 = [self sharedScheduler];
  v14[3] = &type metadata for ActivityManager;
  void v14[4] = &off_1001CCE58;
  uint64_t v5 = (void *)swift_allocObject();
  v14[0] = v5;
  v5[5] = &type metadata for BackgroundSystemTaskScheduler;
  v5[6] = &off_1001C30C8;
  v5[2] = v4;
  sub_100087C5C((uint64_t)v14, (uint64_t)(v0 + 255));
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  v0[324] = v6;
  long long v8 = (void *)v2[2];
  v0[325] = v8;
  uint64_t v9 = swift_allocObject();
  v0[326] = v9;
  *(void *)(v9 + 16) = v3;
  *(void *)(v9 + 24) = v1;
  long long v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48D8 + dword_1001E48D8);
  swift_bridgeObjectRetain();
  id v10 = v8;
  long long v11 = (void *)swift_task_alloc();
  v0[327] = v11;
  *long long v11 = v0;
  v11[1] = sub_1000E2208;
  return v13((uint64_t)sub_100101290, v9, v7, v6, (uint64_t)v10);
}

uint64_t sub_1000E2208(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 2624) = a1;
  *(void *)(v4 + 2632) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void **)(v3 + 2600);
  swift_release();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();

    uint64_t v6 = sub_1000E47B4;
  }
  else
  {

    uint64_t v6 = sub_1000E23A0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E23A0()
{
  uint64_t v61 = v0;
  unint64_t v1 = v0 + 2040;
  uint64_t v2 = *(void *)(*(void *)(v0 + 2624) + 16);
  *(void *)(v0 + 2640) = v2;
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10005D720(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
    return v36();
  }
  uint64_t v3 = 0;
  uint64_t v4 = (void *)(v0 + 16);
  uint64_t v56 = (_OWORD *)(v0 + 1720);
  unint64_t v59 = v0 + 2088;
  uint64_t v5 = (uint64_t *)(v0 + 2632);
  uint64_t v6 = (unsigned char *)(v0 + 275);
  while (1)
  {
    uint64_t v7 = *v5;
    *(void *)(v0 + 2648) = v3;
    uint64_t v8 = (const void *)(*(void *)(v0 + 2624) + 264 * v3 + 32);
    memcpy(v4, v8, 0x101uLL);
    char v9 = *(unsigned char *)(v0 + 121);
    uint64_t v10 = swift_allocObject();
    *(void *)(v0 + 2656) = v10;
    memmove((void *)(v10 + 16), v8, 0x101uLL);
    uint64_t v11 = *(void *)(v0 + 2352);
    uint64_t v12 = *(void *)(v0 + 2288);
    if (v9)
    {
      char v13 = *(unsigned char *)(v0 + 187);
      sub_100100DC0(v12, v11);
      sub_10008A550(v1, v59);
      if ((v13 & 1) == 0)
      {
        uint64_t v14 = *(void *)(v0 + 2584);
        uint64_t v15 = *(void *)(v0 + 2352) + *(int *)(*(void *)(v0 + 2344) + 32);
        sub_100081480((uint64_t)v4);
        sub_100081480((uint64_t)v4);
        char v16 = sub_10007DFA4(v15, v14, v59);
        goto LABEL_8;
      }
    }
    else
    {
      sub_100100DC0(v12, v11);
      sub_10008A550(v1, v59);
    }
    sub_100081480((uint64_t)v4);
    sub_100081480((uint64_t)v4);
    char v16 = 0;
LABEL_8:
    *uint64_t v6 = v16 & 1;
    uint64_t v17 = *(void *)(v0 + 2584);
    uint64_t v18 = *(void *)(v0 + 2352);
    uint64_t v19 = *(void *)(v0 + 2288);
    sub_10005D720(v59);
    sub_100101178(v18, (uint64_t (*)(void))type metadata accessor for PostbackUpdateData);
    sub_10008150C((uint64_t)v4);
    swift_beginAccess();
    sub_10007E914(v19, v17, v1);
    if (!v7) {
      break;
    }
    swift_endAccess();
    uint64_t v20 = *(void *)(v0 + 2320);
    uint64_t v21 = *(void *)(v0 + 2312);
    uint64_t v22 = *(void *)(v0 + 2304);
    uint64_t v23 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v23, v22);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void *)(v0 + 2656);
    uint64_t v28 = *(void *)(v0 + 2320);
    uint64_t v29 = *(void *)(v0 + 2312);
    uint64_t v30 = *(void *)(v0 + 2304);
    if (v26)
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v58 = v28;
      uint64_t v57 = v30;
      uint64_t v33 = *(void *)(v27 + 48);
      unint64_t v34 = *(void *)(v27 + 56);
      swift_bridgeObjectRetain();
      *(void *)(v31 + 4) = sub_100147668(v33, v34, v60);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2112;
      swift_errorRetain();
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v31 + 14) = v35;
      *uint64_t v32 = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to update postback %s with error: %@", (uint8_t *)v31, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      unint64_t v1 = v0 + 2040;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v58, v57);
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    }
    *(void *)(v0 + 2712) = v7;
    *(void *)(v0 + 2704) = 0;
    uint64_t v6 = (unsigned char *)(v0 + 275);
    uint64_t v4 = (void *)(v0 + 16);
    if (*(unsigned char *)(v0 + 275))
    {
      long long v46 = *(void **)(v0 + 2656);
      uint64_t v47 = *(void *)(v0 + 2296);
      uint64_t v48 = v46[16];
      swift_errorRetain();
      sub_10009485C(4, 2, v7, 0, 0, 0, 2, 2, v56, 2u, 2u, 1u, v48, 0, 0, 1u, 3u, 0, 1u,
        0,
        1u,
        2u,
        3u,
        0,
        1u,
        0,
        0,
        2u);
      long long v49 = *(_OWORD *)(v0 + 1864);
      *(_OWORD *)(v0 + 1464) = *(_OWORD *)(v0 + 1848);
      *(_OWORD *)(v0 + 1480) = v49;
      *(_OWORD *)(v0 + 1496) = *(_OWORD *)(v0 + 1880);
      *(_OWORD *)(v0 + 1505) = *(_OWORD *)(v0 + 1889);
      long long v50 = *(_OWORD *)(v0 + 1800);
      *(_OWORD *)(v0 + 1400) = *(_OWORD *)(v0 + 1784);
      *(_OWORD *)(v0 + 1416) = v50;
      long long v51 = *(_OWORD *)(v0 + 1832);
      *(_OWORD *)(v0 + 1432) = *(_OWORD *)(v0 + 1816);
      *(_OWORD *)(v0 + 1448) = v51;
      long long v52 = *(_OWORD *)(v0 + 1736);
      *(_OWORD *)(v0 + 1336) = *v56;
      *(_OWORD *)(v0 + 1352) = v52;
      long long v53 = *(_OWORD *)(v0 + 1768);
      *(_OWORD *)(v0 + 1368) = *(_OWORD *)(v0 + 1752);
      *(_OWORD *)(v0 + 1384) = v53;
      uint64_t v54 = sub_100012D78((void *)(v47 + 472), *(void *)(v47 + 496));
      *(void *)(v0 + 2720) = v46[24];
      *(void *)(v0 + 2728) = v46[25];
      uint64_t v55 = *v54;
      *(void *)(v0 + 2736) = *v54;
      swift_bridgeObjectRetain();
      return _swift_task_switch(sub_1000E3C40, v55, 0);
    }
    swift_errorRelease();
    swift_release();
    uint64_t v3 = *(void *)(v0 + 2648) + 1;
    uint64_t v5 = (uint64_t *)(v0 + 2704);
    if (v3 == *(void *)(v0 + 2640)) {
      goto LABEL_14;
    }
  }
  id v38 = *(uint64_t **)(v0 + 2296);
  swift_endAccess();
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *(void *)(v0 + 2664) = v39;
  uint64_t v41 = (void *)v38[2];
  *(void *)(v0 + 2672) = v41;
  swift_bridgeObjectRetain();
  id v42 = v41;
  swift_retain();
  *(void *)(v0 + 2200) = &type metadata for PostbackDatabaseStore;
  *(void *)(v0 + 2208) = &off_1001E1450;
  *(void *)(v0 + 2176) = v40;
  *(void *)(v0 + 2184) = v39;
  *(void *)(v0 + 2192) = v42;
  swift_bridgeObjectRetain();
  id v43 = v42;
  long long v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 2680) = v44;
  v44[2] = v43;
  v44[3] = v0 + 2176;
  v44[4] = sub_100100D4C;
  v44[5] = v10;
  long long v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 2688) = v45;
  *long long v45 = v0;
  v45[1] = sub_1000E2B60;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v45, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10010443C, v44, (char *)&type metadata for () + 8);
}

uint64_t sub_1000E2B60()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2696) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000E345C;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 2672);
    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 2176);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000E2CB0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E2CB0()
{
  uint64_t v59 = v0;
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(v0 + 2696);
  *(void *)(v0 + 2712) = 0;
  *(void *)(v0 + 2704) = v2;
  if (*(unsigned char *)(v0 + 275))
  {
LABEL_2:
    uint64_t v3 = *(void **)(v0 + 2656);
    uint64_t v4 = *(void *)(v0 + 2296);
    uint64_t v5 = v3[16];
    swift_errorRetain();
    sub_10009485C(4, 2, v1, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1720), 2u, 2u, 1u, v5, 0, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      2u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v6 = *(_OWORD *)(v0 + 1864);
    *(_OWORD *)(v0 + 1464) = *(_OWORD *)(v0 + 1848);
    *(_OWORD *)(v0 + 1480) = v6;
    *(_OWORD *)(v0 + 1496) = *(_OWORD *)(v0 + 1880);
    *(_OWORD *)(v0 + 1505) = *(_OWORD *)(v0 + 1889);
    long long v7 = *(_OWORD *)(v0 + 1800);
    *(_OWORD *)(v0 + 1400) = *(_OWORD *)(v0 + 1784);
    *(_OWORD *)(v0 + 1416) = v7;
    long long v8 = *(_OWORD *)(v0 + 1832);
    *(_OWORD *)(v0 + 1432) = *(_OWORD *)(v0 + 1816);
    *(_OWORD *)(v0 + 1448) = v8;
    long long v9 = *(_OWORD *)(v0 + 1736);
    *(_OWORD *)(v0 + 1336) = *(_OWORD *)(v0 + 1720);
    *(_OWORD *)(v0 + 1352) = v9;
    long long v10 = *(_OWORD *)(v0 + 1768);
    *(_OWORD *)(v0 + 1368) = *(_OWORD *)(v0 + 1752);
    *(_OWORD *)(v0 + 1384) = v10;
    uint64_t v11 = sub_100012D78((void *)(v4 + 472), *(void *)(v4 + 496));
    *(void *)(v0 + 2720) = v3[24];
    *(void *)(v0 + 2728) = v3[25];
    uint64_t v12 = *v11;
    *(void *)(v0 + 2736) = *v11;
    swift_bridgeObjectRetain();
    return _swift_task_switch(sub_1000E3C40, v12, 0);
  }
  char v13 = (void *)(v0 + 16);
  unint64_t v14 = v0 + 2040;
  unint64_t v57 = v0 + 2088;
  uint64_t v15 = (unsigned char *)(v0 + 275);
  while (1)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v16 = *(void *)(v0 + 2648) + 1;
    if (v16 == *(void *)(v0 + 2640)) {
      break;
    }
    uint64_t v1 = *(void *)(v0 + 2704);
    *(void *)(v0 + 2648) = v16;
    uint64_t v17 = (const void *)(*(void *)(v0 + 2624) + 264 * v16 + 32);
    memcpy(v13, v17, 0x101uLL);
    char v18 = *(unsigned char *)(v0 + 121);
    uint64_t v19 = swift_allocObject();
    *(void *)(v0 + 2656) = v19;
    memmove((void *)(v19 + 16), v17, 0x101uLL);
    uint64_t v20 = *(void *)(v0 + 2352);
    uint64_t v21 = *(void *)(v0 + 2288);
    if (v18)
    {
      char v22 = *(unsigned char *)(v0 + 187);
      sub_100100DC0(v21, v20);
      sub_10008A550(v14, v57);
      if ((v22 & 1) == 0)
      {
        uint64_t v23 = *(void *)(v0 + 2584);
        uint64_t v24 = *(void *)(v0 + 2352) + *(int *)(*(void *)(v0 + 2344) + 32);
        sub_100081480((uint64_t)v13);
        sub_100081480((uint64_t)v13);
        char v25 = sub_10007DFA4(v24, v23, v57);
        goto LABEL_14;
      }
    }
    else
    {
      sub_100100DC0(v21, v20);
      sub_10008A550(v14, v57);
    }
    sub_100081480((uint64_t)v13);
    sub_100081480((uint64_t)v13);
    char v25 = 0;
LABEL_14:
    *uint64_t v15 = v25 & 1;
    uint64_t v26 = *(void *)(v0 + 2584);
    uint64_t v27 = *(void *)(v0 + 2352);
    uint64_t v28 = *(void *)(v0 + 2288);
    sub_10005D720(v57);
    sub_100101178(v27, (uint64_t (*)(void))type metadata accessor for PostbackUpdateData);
    sub_10008150C((uint64_t)v13);
    swift_beginAccess();
    sub_10007E914(v28, v26, v14);
    if (!v1)
    {
      long long v46 = *(uint64_t **)(v0 + 2296);
      swift_endAccess();
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      *(void *)(v0 + 2664) = v47;
      long long v49 = (void *)v46[2];
      *(void *)(v0 + 2672) = v49;
      swift_bridgeObjectRetain();
      id v50 = v49;
      swift_retain();
      *(void *)(v0 + 2200) = &type metadata for PostbackDatabaseStore;
      *(void *)(v0 + 2208) = &off_1001E1450;
      *(void *)(v0 + 2176) = v48;
      *(void *)(v0 + 2184) = v47;
      *(void *)(v0 + 2192) = v50;
      swift_bridgeObjectRetain();
      id v51 = v50;
      long long v52 = (void *)swift_task_alloc();
      *(void *)(v0 + 2680) = v52;
      v52[2] = v51;
      v52[3] = v0 + 2176;
      v52[4] = sub_100100D4C;
      v52[5] = v19;
      long long v53 = (void *)swift_task_alloc();
      *(void *)(v0 + 2688) = v53;
      void *v53 = v0;
      v53[1] = sub_1000E2B60;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v53, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10010443C, v52, (char *)&type metadata for () + 8);
    }
    swift_endAccess();
    uint64_t v29 = *(void *)(v0 + 2320);
    uint64_t v30 = *(void *)(v0 + 2312);
    uint64_t v31 = *(void *)(v0 + 2304);
    uint64_t v32 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v32, v31);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void *)(v0 + 2656);
    uint64_t v37 = *(void *)(v0 + 2320);
    uint64_t v38 = *(void *)(v0 + 2312);
    uint64_t v39 = *(void *)(v0 + 2304);
    if (v35)
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315394;
      uint64_t v55 = v37;
      uint64_t v56 = v39;
      uint64_t v43 = *(void *)(v36 + 48);
      unint64_t v42 = *(void *)(v36 + 56);
      swift_bridgeObjectRetain();
      *(void *)(v40 + 4) = sub_100147668(v43, v42, v58);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v40 + 12) = 2112;
      swift_errorRetain();
      uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v40 + 14) = v44;
      *uint64_t v41 = v44;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to update postback %s with error: %@", (uint8_t *)v40, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      unint64_t v14 = v0 + 2040;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      char v13 = (void *)(v0 + 16);
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v55, v56);
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    }
    uint64_t v15 = (unsigned char *)(v0 + 275);
    *(void *)(v0 + 2712) = v1;
    *(void *)(v0 + 2704) = 0;
    if (*(unsigned char *)(v0 + 275)) {
      goto LABEL_2;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005D720(v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45();
}

uint64_t sub_1000E345C()
{
  uint64_t v60 = v0;
  unint64_t v57 = (void *)(v0 + 16);
  long long v53 = (_OWORD *)(v0 + 1720);
  unint64_t v1 = v0 + 2040;
  unint64_t v56 = v0 + 2088;
  uint64_t v2 = *(void **)(v0 + 2672);
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 2176);
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v3 = *(void *)(v0 + 2696);
  uint64_t v58 = (unsigned char *)(v0 + 275);
  while (1)
  {
    uint64_t v4 = *(void *)(v0 + 2320);
    uint64_t v5 = *(void *)(v0 + 2312);
    uint64_t v6 = *(void *)(v0 + 2304);
    uint64_t v7 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    long long v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 2656);
    uint64_t v12 = *(void *)(v0 + 2320);
    uint64_t v13 = *(void *)(v0 + 2312);
    uint64_t v14 = *(void *)(v0 + 2304);
    if (v10)
    {
      uint64_t v55 = *(void *)(v0 + 2304);
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v54 = v12;
      uint64_t v17 = *(void *)(v11 + 48);
      unint64_t v18 = *(void *)(v11 + 56);
      swift_bridgeObjectRetain();
      *(void *)(v15 + 4) = sub_100147668(v17, v18, v59);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v15 + 12) = 2112;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v15 + 14) = v19;
      *uint64_t v16 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to update postback %s with error: %@", (uint8_t *)v15, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      unint64_t v1 = v0 + 2040;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v54, v55);
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    *(void *)(v0 + 2712) = v3;
    *(void *)(v0 + 2704) = 0;
    if (*v58) {
      break;
    }
    swift_errorRelease();
    swift_release();
    uint64_t v20 = *(void *)(v0 + 2648) + 1;
    if (v20 == *(void *)(v0 + 2640))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10005D720(v1);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
      return v43();
    }
    uint64_t v3 = *(void *)(v0 + 2704);
    *(void *)(v0 + 2648) = v20;
    uint64_t v21 = (const void *)(*(void *)(v0 + 2624) + 264 * v20 + 32);
    memcpy(v57, v21, 0x101uLL);
    char v22 = *(unsigned char *)(v0 + 121);
    uint64_t v23 = swift_allocObject();
    *(void *)(v0 + 2656) = v23;
    memmove((void *)(v23 + 16), v21, 0x101uLL);
    uint64_t v24 = *(void *)(v0 + 2352);
    uint64_t v25 = *(void *)(v0 + 2288);
    if (v22)
    {
      char v26 = *(unsigned char *)(v0 + 187);
      sub_100100DC0(v25, v24);
      sub_10008A550(v1, v56);
      if ((v26 & 1) == 0)
      {
        uint64_t v27 = *(void *)(v0 + 2584);
        uint64_t v28 = *(void *)(v0 + 2352) + *(int *)(*(void *)(v0 + 2344) + 32);
        sub_100081480((uint64_t)v57);
        sub_100081480((uint64_t)v57);
        char v29 = sub_10007DFA4(v28, v27, v56);
        goto LABEL_12;
      }
    }
    else
    {
      sub_100100DC0(v25, v24);
      sub_10008A550(v1, v56);
    }
    sub_100081480((uint64_t)v57);
    sub_100081480((uint64_t)v57);
    char v29 = 0;
LABEL_12:
    *uint64_t v58 = v29 & 1;
    uint64_t v30 = *(void *)(v0 + 2584);
    uint64_t v31 = *(void *)(v0 + 2352);
    uint64_t v32 = *(void *)(v0 + 2288);
    sub_10005D720(v56);
    sub_100101178(v31, (uint64_t (*)(void))type metadata accessor for PostbackUpdateData);
    sub_10008150C((uint64_t)v57);
    swift_beginAccess();
    sub_10007E914(v32, v30, v1);
    if (!v3)
    {
      uint64_t v44 = *(uint64_t **)(v0 + 2296);
      swift_endAccess();
      uint64_t v46 = *v44;
      uint64_t v45 = v44[1];
      *(void *)(v0 + 2664) = v45;
      uint64_t v47 = (void *)v44[2];
      *(void *)(v0 + 2672) = v47;
      swift_bridgeObjectRetain();
      id v48 = v47;
      swift_retain();
      *(void *)(v0 + 2200) = &type metadata for PostbackDatabaseStore;
      *(void *)(v0 + 2208) = &off_1001E1450;
      *(void *)(v0 + 2176) = v46;
      *(void *)(v0 + 2184) = v45;
      *(void *)(v0 + 2192) = v48;
      swift_bridgeObjectRetain();
      id v49 = v48;
      id v50 = (void *)swift_task_alloc();
      *(void *)(v0 + 2680) = v50;
      v50[2] = v49;
      v50[3] = v0 + 2176;
      v50[4] = sub_100100D4C;
      v50[5] = v23;
      id v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 2688) = v51;
      void *v51 = v0;
      v51[1] = sub_1000E2B60;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v51, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10010443C, v50, (char *)&type metadata for () + 8);
    }
    swift_endAccess();
  }
  uint64_t v33 = *(void **)(v0 + 2656);
  uint64_t v34 = *(void *)(v0 + 2296);
  uint64_t v35 = v33[16];
  swift_errorRetain();
  sub_10009485C(4, 2, v3, 0, 0, 0, 2, 2, v53, 2u, 2u, 1u, v35, 0, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v36 = *(_OWORD *)(v0 + 1864);
  *(_OWORD *)(v0 + 1464) = *(_OWORD *)(v0 + 1848);
  *(_OWORD *)(v0 + 1480) = v36;
  *(_OWORD *)(v0 + 1496) = *(_OWORD *)(v0 + 1880);
  *(_OWORD *)(v0 + 1505) = *(_OWORD *)(v0 + 1889);
  long long v37 = *(_OWORD *)(v0 + 1800);
  *(_OWORD *)(v0 + 1400) = *(_OWORD *)(v0 + 1784);
  *(_OWORD *)(v0 + 1416) = v37;
  long long v38 = *(_OWORD *)(v0 + 1832);
  *(_OWORD *)(v0 + 1432) = *(_OWORD *)(v0 + 1816);
  *(_OWORD *)(v0 + 1448) = v38;
  long long v39 = *(_OWORD *)(v0 + 1736);
  *(_OWORD *)(v0 + 1336) = *v53;
  *(_OWORD *)(v0 + 1352) = v39;
  long long v40 = *(_OWORD *)(v0 + 1768);
  *(_OWORD *)(v0 + 1368) = *(_OWORD *)(v0 + 1752);
  *(_OWORD *)(v0 + 1384) = v40;
  uint64_t v41 = sub_100012D78((void *)(v34 + 472), *(void *)(v34 + 496));
  *(void *)(v0 + 2720) = v33[24];
  *(void *)(v0 + 2728) = v33[25];
  uint64_t v42 = *v41;
  *(void *)(v0 + 2736) = *v41;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1000E3C40, v42, 0);
}

uint64_t sub_1000E3C40()
{
  uint64_t v1 = *(void *)(v0 + 2728);
  uint64_t v2 = *(void *)(v0 + 2720);
  uint64_t v3 = *(void *)(v0 + 2376);
  uint64_t v4 = *(void *)(v0 + 2368);
  uint64_t v5 = *(void *)(v0 + 2360);
  long long v6 = *(_OWORD *)(v0 + 1480);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 1464);
  *(_OWORD *)(v0 + 640) = v6;
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 1496);
  *(_OWORD *)(v0 + 665) = *(_OWORD *)(v0 + 1505);
  long long v7 = *(_OWORD *)(v0 + 1416);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 1400);
  *(_OWORD *)(v0 + 576) = v7;
  long long v8 = *(_OWORD *)(v0 + 1448);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 1432);
  *(_OWORD *)(v0 + 608) = v8;
  long long v9 = *(_OWORD *)(v0 + 1352);
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 1336);
  *(_OWORD *)(v0 + 512) = v9;
  long long v10 = *(_OWORD *)(v0 + 1384);
  *(_OWORD *)(v0 + 528) = *(_OWORD *)(v0 + 1368);
  *(_OWORD *)(v0 + 544) = v10;
  *(void *)(v0 + 688) = v2;
  *(void *)(v0 + 696) = v1;
  *(_WORD *)(v0 + 704) = 257;
  sub_10003675C(v0 + 496);
  sub_1000367C8(v0 + 496, v0 + 712);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 1720);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100036824(v0 + 1720);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000E3D9C, 0, 0);
}

uint64_t sub_1000E3D9C()
{
  uint64_t v59 = v0;
  unint64_t v1 = v0 + 2040;
  swift_errorRelease();
  swift_release();
  uint64_t v2 = *(void *)(v0 + 2648) + 1;
  if (v2 == *(void *)(v0 + 2640))
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10005D720(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
  uint64_t v3 = (void *)(v0 + 16);
  uint64_t v54 = (_OWORD *)(v0 + 1720);
  unint64_t v57 = v0 + 2088;
  uint64_t v4 = (unsigned char *)(v0 + 275);
  while (1)
  {
    uint64_t v5 = *(void *)(v0 + 2704);
    *(void *)(v0 + 2648) = v2;
    long long v6 = (const void *)(*(void *)(v0 + 2624) + 264 * v2 + 32);
    memcpy(v3, v6, 0x101uLL);
    char v7 = *(unsigned char *)(v0 + 121);
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 2656) = v8;
    memmove((void *)(v8 + 16), v6, 0x101uLL);
    uint64_t v9 = *(void *)(v0 + 2352);
    uint64_t v10 = *(void *)(v0 + 2288);
    if (v7)
    {
      char v11 = *(unsigned char *)(v0 + 187);
      sub_100100DC0(v10, v9);
      sub_10008A550(v1, v57);
      if ((v11 & 1) == 0)
      {
        uint64_t v12 = *(void *)(v0 + 2584);
        uint64_t v13 = *(void *)(v0 + 2352) + *(int *)(*(void *)(v0 + 2344) + 32);
        sub_100081480((uint64_t)v3);
        sub_100081480((uint64_t)v3);
        char v14 = sub_10007DFA4(v13, v12, v57);
        goto LABEL_8;
      }
    }
    else
    {
      sub_100100DC0(v10, v9);
      sub_10008A550(v1, v57);
    }
    sub_100081480((uint64_t)v3);
    sub_100081480((uint64_t)v3);
    char v14 = 0;
LABEL_8:
    *uint64_t v4 = v14 & 1;
    uint64_t v15 = *(void *)(v0 + 2584);
    uint64_t v16 = *(void *)(v0 + 2352);
    uint64_t v17 = *(void *)(v0 + 2288);
    sub_10005D720(v57);
    sub_100101178(v16, (uint64_t (*)(void))type metadata accessor for PostbackUpdateData);
    sub_10008150C((uint64_t)v3);
    swift_beginAccess();
    sub_10007E914(v17, v15, v1);
    if (!v5) {
      break;
    }
    swift_endAccess();
    uint64_t v18 = *(void *)(v0 + 2320);
    uint64_t v19 = *(void *)(v0 + 2312);
    uint64_t v20 = *(void *)(v0 + 2304);
    uint64_t v21 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    char v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = *(void *)(v0 + 2656);
    uint64_t v26 = *(void *)(v0 + 2320);
    uint64_t v27 = *(void *)(v0 + 2312);
    uint64_t v28 = *(void *)(v0 + 2304);
    if (v24)
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      uint64_t v55 = v28;
      uint64_t v56 = v26;
      uint64_t v31 = *(void *)(v25 + 48);
      unint64_t v32 = *(void *)(v25 + 56);
      swift_bridgeObjectRetain();
      *(void *)(v29 + 4) = sub_100147668(v31, v32, v58);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v29 + 12) = 2112;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v29 + 14) = v33;
      *uint64_t v30 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to update postback %s with error: %@", (uint8_t *)v29, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      unint64_t v1 = v0 + 2040;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = (void *)(v0 + 16);
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v56, v55);
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    }
    uint64_t v4 = (unsigned char *)(v0 + 275);
    *(void *)(v0 + 2712) = v5;
    *(void *)(v0 + 2704) = 0;
    uint64_t v34 = *(void **)(v0 + 2656);
    if (*(unsigned char *)(v0 + 275))
    {
      uint64_t v45 = *(void *)(v0 + 2296);
      uint64_t v46 = v34[16];
      swift_errorRetain();
      sub_10009485C(4, 2, v5, 0, 0, 0, 2, 2, v54, 2u, 2u, 1u, v46, 0, 0, 1u, 3u, 0, 1u,
        0,
        1u,
        2u,
        3u,
        0,
        1u,
        0,
        0,
        2u);
      long long v47 = *(_OWORD *)(v0 + 1864);
      *(_OWORD *)(v0 + 1464) = *(_OWORD *)(v0 + 1848);
      *(_OWORD *)(v0 + 1480) = v47;
      *(_OWORD *)(v0 + 1496) = *(_OWORD *)(v0 + 1880);
      *(_OWORD *)(v0 + 1505) = *(_OWORD *)(v0 + 1889);
      long long v48 = *(_OWORD *)(v0 + 1800);
      *(_OWORD *)(v0 + 1400) = *(_OWORD *)(v0 + 1784);
      *(_OWORD *)(v0 + 1416) = v48;
      long long v49 = *(_OWORD *)(v0 + 1832);
      *(_OWORD *)(v0 + 1432) = *(_OWORD *)(v0 + 1816);
      *(_OWORD *)(v0 + 1448) = v49;
      long long v50 = *(_OWORD *)(v0 + 1736);
      *(_OWORD *)(v0 + 1336) = *v54;
      *(_OWORD *)(v0 + 1352) = v50;
      long long v51 = *(_OWORD *)(v0 + 1768);
      *(_OWORD *)(v0 + 1368) = *(_OWORD *)(v0 + 1752);
      *(_OWORD *)(v0 + 1384) = v51;
      long long v52 = sub_100012D78((void *)(v45 + 472), *(void *)(v45 + 496));
      *(void *)(v0 + 2720) = v34[24];
      *(void *)(v0 + 2728) = v34[25];
      uint64_t v53 = *v52;
      *(void *)(v0 + 2736) = *v52;
      swift_bridgeObjectRetain();
      return _swift_task_switch(sub_1000E3C40, v53, 0);
    }
    swift_errorRelease();
    swift_release();
    uint64_t v2 = *(void *)(v0 + 2648) + 1;
    if (v2 == *(void *)(v0 + 2640)) {
      goto LABEL_14;
    }
  }
  long long v37 = *(uint64_t **)(v0 + 2296);
  swift_endAccess();
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *(void *)(v0 + 2664) = v38;
  long long v40 = (void *)v37[2];
  *(void *)(v0 + 2672) = v40;
  swift_bridgeObjectRetain();
  id v41 = v40;
  swift_retain();
  *(void *)(v0 + 2200) = &type metadata for PostbackDatabaseStore;
  *(void *)(v0 + 2208) = &off_1001E1450;
  *(void *)(v0 + 2176) = v39;
  *(void *)(v0 + 2184) = v38;
  *(void *)(v0 + 2192) = v41;
  swift_bridgeObjectRetain();
  id v42 = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  *(void *)(v0 + 2680) = v43;
  v43[2] = v42;
  v43[3] = v0 + 2176;
  v43[4] = sub_100100D4C;
  v43[5] = v8;
  uint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 2688) = v44;
  *uint64_t v44 = v0;
  v44[1] = sub_1000E2B60;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v44, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10010443C, v43, (char *)&type metadata for () + 8);
}

uint64_t sub_1000E4558()
{
  uint64_t v1 = v0[292];
  uint64_t v2 = v0[289];
  uint64_t v3 = v0[288];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[285];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218242;
    v0[283] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[284] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "updatePostback failed for app %llu with error: %@", (uint8_t *)v8, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[289] + 8))(v0[292], v0[288]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000E47B4()
{
  sub_10005D720((uint64_t)(v0 + 255));
  uint64_t v1 = v0[292];
  uint64_t v2 = v0[289];
  uint64_t v3 = v0[288];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[285];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218242;
    v0[283] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[284] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "updatePostback failed for app %llu with error: %@", (uint8_t *)v8, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[289] + 8))(v0[292], v0[288]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000E4A18()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[10] = v1;
  v0[11] = *(void *)(v1 - 8);
  v0[12] = swift_task_alloc();
  uint64_t v4 = (uint64_t (*)(char))((char *)&dword_1001E4090 + dword_1001E4090);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000E4B18;
  return v4(3);
}

uint64_t sub_1000E4B18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v3[14] = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E4C20, 0, 0);
}

uint64_t sub_1000E4C20()
{
  long long v40 = v0;
  v0[5] = 58;
  uint64_t v1 = v0 + 5;
  uint64_t v2 = v0[14];
  if (v2) {
    uint64_t v3 = v0[3];
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2) {
    unint64_t v4 = v0[14];
  }
  else {
    unint64_t v4 = 0xE000000000000000;
  }
  v0[6] = 0xE100000000000000;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v1;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000FF9F8(0x7FFFFFFFFFFFFFFFLL, 1, sub_1001012FC, v5, v3, v4);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = (unint64_t *)(v6 + 56);
  uint64_t v9 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v11 = *(v8 - 3);
    unint64_t v10 = *(v8 - 2);
    if ((v10 ^ v11) < 0x4000) {
      goto LABEL_10;
    }
    unint64_t v13 = *(v8 - 1);
    unint64_t v12 = *v8;
    if ((*v8 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = (uint64_t)sub_100100088(v11, v10, v13, v12, 10);
      char v20 = v19;
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_10;
      }
    }
    else
    {
      if ((v12 & 0x2000000000000000) != 0)
      {
        v0[7] = v13;
        v0[8] = v12 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v14 = (uint64_t)(v0 + 7);
      }
      else if ((v13 & 0x1000000000000000) != 0)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        uint64_t v14 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v15 = sub_100101354(v14, v11, v10, v13, v12, 10);
      LOBYTE(v39) = v16 & 1;
      if (v16) {
        goto LABEL_10;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_10013A244(0, v9[2] + 1, 1, v9);
    }
    unint64_t v18 = v9[2];
    unint64_t v17 = v9[3];
    if (v18 >= v17 >> 1) {
      uint64_t v9 = sub_10013A244((void *)(v17 > 1), v18 + 1, 1, v9);
    }
    v9[2] = v18 + 1;
    v9[v18 + 4] = v15;
LABEL_10:
    v8 += 4;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + 5;
LABEL_27:
  uint64_t v21 = v0[10];
  uint64_t v22 = v0[11];
  uint64_t v23 = v0[12];
  swift_bridgeObjectRelease();
  uint64_t v24 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v24, v21);
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v29 = v0[11];
  uint64_t v28 = v0[12];
  uint64_t v30 = v0[10];
  if (v27)
  {
    uint64_t v38 = v0[10];
    uint64_t v37 = v0[12];
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v32 = Array.description.getter();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    v1[4] = sub_100147668(v32, v34, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Retrieved conversion window thresholds: %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v37, v38);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  }
  swift_task_dealloc();
  uint64_t v35 = (uint64_t (*)(void *))v0[1];
  return v35(v9);
}

uint64_t sub_1000E5070(uint64_t a1)
{
  v2[68] = v1;
  v2[67] = a1;
  uint64_t v3 = type metadata accessor for Date();
  v2[69] = v3;
  v2[70] = *(void *)(v3 - 8);
  v2[71] = swift_task_alloc();
  unsigned char v2[72] = swift_task_alloc();
  v2[73] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[74] = v4;
  v2[75] = *(void *)(v4 - 8);
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  v2[78] = swift_task_alloc();
  v2[79] = swift_task_alloc();
  return _swift_task_switch(sub_1000E51D4, 0, 0);
}

uint64_t sub_1000E51D4()
{
  char v1 = *(unsigned char *)(*(void *)(v0 + 536) + 50);
  *(unsigned char *)(v0 + 273) = v1;
  if (v1)
  {
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 640) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000E53CC;
    return sub_1000E4A18();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 624);
    uint64_t v3 = *(void *)(v0 + 600);
    uint64_t v4 = *(void *)(v0 + 592);
    uint64_t v5 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "ghostback unregistered, skipping imprint", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void *)(v0 + 624);
    uint64_t v10 = *(void *)(v0 + 600);
    uint64_t v11 = *(void *)(v0 + 592);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

uint64_t sub_1000E53CC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 648) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E54CC, 0, 0);
}

uint64_t sub_1000E54CC()
{
  char v20 = v0;
  uint64_t v1 = (uint64_t *)v0[68];
  uint64_t v2 = (long long *)v0[67];
  id v3 = [self sharedScheduler];
  v19[3] = &type metadata for ActivityManager;
  v19[4] = &off_1001CCE58;
  uint64_t v4 = (void *)swift_allocObject();
  v19[0] = v4;
  v4[5] = &type metadata for BackgroundSystemTaskScheduler;
  v4[6] = &off_1001C30C8;
  v4[2] = v3;
  sub_100087C5C((uint64_t)v19, (uint64_t)(v0 + 35));
  uint64_t v5 = *v1;
  uint64_t v6 = v1[1];
  v0[82] = v6;
  os_log_type_t v7 = (void *)v1[2];
  v0[83] = v7;
  uint64_t v8 = (_OWORD *)swift_allocObject();
  v0[84] = v8;
  long long v9 = v2[3];
  long long v11 = *v2;
  long long v10 = v2[1];
  void v8[3] = v2[2];
  v8[4] = v9;
  v8[1] = v11;
  v8[2] = v10;
  long long v12 = v2[7];
  long long v14 = v2[4];
  long long v13 = v2[5];
  v8[7] = v2[6];
  v8[8] = v12;
  v8[5] = v14;
  v8[6] = v13;
  swift_bridgeObjectRetain();
  id v15 = v7;
  sub_10005D5A0((uint64_t)v2);
  unint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48D8 + dword_1001E48D8);
  char v16 = (void *)swift_task_alloc();
  v0[85] = v16;
  *char v16 = v0;
  v16[1] = sub_1000E5684;
  return v18((uint64_t)sub_10010388C, (uint64_t)v8, v5, v6, (uint64_t)v15);
}

uint64_t sub_1000E5684(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 688) = a1;
  *(void *)(v4 + 696) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void **)(v3 + 664);
  swift_release();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();

    uint64_t v6 = sub_1000E78D8;
  }
  else
  {

    uint64_t v6 = sub_1000E581C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E581C()
{
  uint64_t v98 = v0;
  uint64_t v1 = *(void *)(v0 + 688);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 704) = v2;
  if (v2)
  {
    uint64_t v3 = v0 + 16;
    memcpy((void *)(v0 + 16), (const void *)(v1 + 32), 0x101uLL);
    *(void *)(v0 + 712) = 1;
    uint64_t v4 = swift_allocObject();
    *(void *)(v0 + 720) = v4;
    memcpy((void *)(v4 + 16), (const void *)(v0 + 16), 0x101uLL);
    swift_beginAccess();
    if (*(unsigned char *)(v4 + 186))
    {
      uint64_t v5 = *(void *)(v0 + 632);
      uint64_t v6 = *(void *)(v0 + 600);
      uint64_t v7 = *(void *)(v0 + 592);
      sub_100081480(v0 + 16);
      uint64_t v8 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
      long long v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        long long v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Registered postback should not be imprinted", v11, 2u);
        swift_slowDealloc();
      }
      uint64_t v12 = *(void *)(v0 + 632);
      uint64_t v13 = *(void *)(v0 + 600);
      uint64_t v14 = *(void *)(v0 + 592);

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      sub_1000816FC();
      swift_allocError();
      *id v15 = 3;
      swift_willThrow();
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v16 = *(void *)(v0 + 616);
      uint64_t v17 = *(void *)(v0 + 600);
      uint64_t v18 = *(void *)(v0 + 592);
      uint64_t v19 = *(void *)(v0 + 536);
      uint64_t v20 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
      sub_10005D5A0(v19);
      swift_errorRetain();
      sub_10005D5A0(v19);
      swift_errorRetain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      BOOL v23 = os_log_type_enabled(v21, v22);
      uint64_t v95 = *(void *)(v0 + 616);
      uint64_t v24 = *(void *)(v0 + 600);
      uint64_t v25 = *(void *)(v0 + 592);
      uint64_t v26 = *(void *)(v0 + 536);
      if (v23)
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v92 = (void *)swift_slowAlloc();
        uint64_t v97 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v93 = v25;
        uint64_t v28 = *(void *)(v26 + 56);
        unint64_t v29 = *(void *)(v26 + 64);
        swift_bridgeObjectRetain();
        *(void *)(v0 + 512) = sub_100147668(v28, v29, &v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10005D5D8(v26);
        sub_10005D5D8(v26);
        *(_WORD *)(v27 + 12) = 2112;
        swift_errorRetain();
        uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 504) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v92 = v30;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to imprint postbacks for conversion id %s, with error: %@", (uint8_t *)v27, 0x16u);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v95, v93);
      }
      else
      {
        sub_10005D5D8(*(void *)(v0 + 536));
        sub_10005D5D8(v26);
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v95, v25);
      }
      swift_willThrow();
      sub_10005D720(v0 + 280);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_20;
    }
    uint64_t v33 = *(void *)(v0 + 536);
    *(void *)(v4 + 216) = *(void *)(v33 + 80);
    if (*(unsigned char *)(v4 + 121))
    {
      sub_100059F98(v33 + 88, v0 + 408, &qword_1001E28D8);
      sub_100059F98(v0 + 408, v4 + 232, &qword_1001E28D8);
      if (*(void *)(v4 + 128)) {
        goto LABEL_14;
      }
      uint64_t v94 = (unsigned char *)(v4 + 256);
      uint64_t v34 = *(void *)(v0 + 536);
      *(unsigned char *)(v4 + 186) = *(unsigned char *)(v0 + 273);
      sub_100059F98(v34 + 40, v0 + 424, &qword_1001E3CE8);
      sub_100059F98(v0 + 424, v4 + 136, &qword_1001E3CE8);
      sub_100059F98(v34 + 49, v0 + 274, &qword_1001E1D40);
      sub_100059F98(v0 + 274, v4 + 145, &qword_1001E1D40);
      if (*(unsigned char *)(v34 + 51))
      {
        sub_100059F98(*(void *)(v0 + 536) + 104, v0 + 456, &qword_1001E28D8);
        sub_100059F98(v0 + 456, v0 + 440, &qword_1001E28D8);
        if ((*(unsigned char *)(v0 + 448) & 1) == 0)
        {
          sub_100081480(v0 + 16);
          Date.init(timeIntervalSince1970:)();
          *(unsigned char *)(v4 + 187) = 1;
          uint64_t v56 = (void *)Date.timeIntervalSince1970.getter();
          double v84 = v83 * 1000.0;
          if ((~*(void *)&v84 & 0x7FF0000000000000) != 0)
          {
            uint64_t v57 = v0 + 280;
            if (v84 > -1.0)
            {
              if (v84 < 1.84467441e19)
              {
                uint64_t v85 = *(void *)(v0 + 576);
                *(void *)(v4 + 248) = (unint64_t)v84;
                unsigned char *v94 = 0;
                sub_1000C3648(*(void *)(v4 + 128), *(unsigned char *)(v4 + 208), v85);
                uint64_t v56 = (void *)Date.timeIntervalSince1970.getter();
                double v87 = v86 * 1000.0;
                if ((~*(void *)&v87 & 0x7FF0000000000000) != 0)
                {
                  if (v87 > -1.0)
                  {
                    if (v87 < 1.84467441e19)
                    {
                      uint64_t v88 = *(void *)(v0 + 584);
                      uint64_t v89 = *(void *)(v0 + 552);
                      unint64_t v90 = (unint64_t)v87;
                      uint64_t v91 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 560) + 8);
                      v91(*(void *)(v0 + 576), v89);
                      *(void *)(v4 + 264) = v90;
                      *(unsigned char *)(v4 + 272) = 0;
                      v91(v88, v89);
LABEL_33:
                      uint64_t v75 = *(uint64_t **)(v0 + 544);
                      swift_endAccess();
                      uint64_t v77 = *v75;
                      uint64_t v76 = v75[1];
                      *(void *)(v0 + 728) = v76;
                      BOOL v78 = (void *)v75[2];
                      *(void *)(v0 + 736) = v78;
                      swift_bridgeObjectRetain();
                      id v79 = v78;
                      swift_retain();
                      *(void *)(v0 + 352) = &type metadata for PostbackDatabaseStore;
                      *(void *)(v0 + 360) = &off_1001E1450;
                      *(void *)(v0 + 328) = v77;
                      *(void *)(v0 + 336) = v76;
                      *(void *)(v0 + 344) = v79;
                      id v80 = v79;
                      swift_bridgeObjectRetain();
                      id v81 = v80;
                      uint64_t v82 = (void *)swift_task_alloc();
                      *(void *)(v0 + 744) = v82;
                      v82[2] = v81;
                      v82[3] = v0 + 328;
                      v82[4] = sub_100100D4C;
                      v82[5] = v4;
                      uint64_t v56 = (void *)swift_task_alloc();
                      *(void *)(v0 + 752) = v56;
                      *uint64_t v56 = v0;
                      v56[1] = sub_1000E64C8;
                      uint64_t v63 = (char *)&type metadata for () + 8;
                      unint64_t v60 = 0x8000000100186A10;
                      uint64_t v61 = sub_10010443C;
                      uint64_t v57 = 0;
                      uint64_t v58 = 0;
                      unint64_t v59 = 0xD00000000000001BLL;
                      uint64_t v62 = v82;
                      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v56, v57, v58, v59, v60, v61, v62, v63);
                    }
LABEL_53:
                    __break(1u);
                    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v56, v57, v58, v59, v60, v61, v62, v63);
                  }
LABEL_52:
                  __break(1u);
                  goto LABEL_53;
                }
LABEL_51:
                __break(1u);
                goto LABEL_52;
              }
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
LABEL_49:
            __break(1u);
            goto LABEL_50;
          }
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
      }
      sub_100059F98(v0 + 408, v0 + 472, &qword_1001E28D8);
      if (*(unsigned char *)(v0 + 480))
      {
LABEL_14:
        sub_100081480(v0 + 16);
        goto LABEL_33;
      }
LABEL_29:
      int64_t v67 = *(void *)(v0 + 648);
      uint64_t v68 = *(void *)(v0 + 584);
      uint64_t v69 = *(void *)(v0 + 576);
      uint64_t v70 = *(void *)(v0 + 568);
      uint64_t v71 = *(void *)(v0 + 560);
      uint64_t v72 = *(void *)(v0 + 552);
      sub_100081480(v3);
      Date.init(timeIntervalSince1970:)();
      sub_1000C3980(0, v67, *(unsigned char *)(v4 + 208), v69);
      uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
      v55(v70, v72);
      sub_1000C3648(0, *(unsigned char *)(v4 + 208), v68);
      v55(v69, v72);
      uint64_t v56 = (void *)Date.timeIntervalSince1970.getter();
      double v65 = v73 * 1000.0;
      if ((~*(void *)&v65 & 0x7FF0000000000000) != 0)
      {
        uint64_t v66 = v94;
        if (v65 > -1.0)
        {
          if (v65 < 1.84467441e19) {
            goto LABEL_32;
          }
          goto LABEL_47;
        }
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    *(unsigned char *)(v4 + 186) = *(unsigned char *)(v0 + 273);
    sub_100059F98(v33 + 88, v0 + 392, &qword_1001E28D8);
    sub_100059F98(v0 + 392, v4 + 232, &qword_1001E28D8);
    sub_100059F98(v0 + 392, v0 + 488, &qword_1001E28D8);
    if (*(unsigned char *)(v0 + 496)) {
      goto LABEL_14;
    }
    uint64_t v94 = (unsigned char *)(v4 + 256);
    int64_t v49 = *(void *)(v0 + 648);
    uint64_t v50 = *(void *)(v0 + 584);
    uint64_t v51 = *(void *)(v0 + 576);
    uint64_t v52 = *(void *)(v0 + 568);
    uint64_t v53 = *(void *)(v0 + 560);
    uint64_t v54 = *(void *)(v0 + 552);
    sub_100081480(v0 + 16);
    Date.init(timeIntervalSince1970:)();
    sub_1000C3980(0, v49, *(unsigned char *)(v4 + 208), v51);
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v55(v52, v54);
    sub_1000C3648(0, *(unsigned char *)(v4 + 208), v50);
    v55(v51, v54);
    uint64_t v3 = v50;
    uint64_t v56 = (void *)Date.timeIntervalSince1970.getter();
    double v65 = v64 * 1000.0;
    if ((~*(void *)&v65 & 0x7FF0000000000000) != 0)
    {
      uint64_t v66 = (unsigned char *)(v4 + 256);
      if (v65 > -1.0)
      {
        if (v65 < 1.84467441e19)
        {
LABEL_32:
          unint64_t v74 = (unint64_t)v65;
          v55(*(void *)(v0 + 584), *(void *)(v0 + 552));
          *(void *)(v4 + 264) = v74;
          v66[16] = 0;
          goto LABEL_33;
        }
        __break(1u);
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v0 + 536);
  if ((*(unsigned char *)(v31 + 74) & 1) == 0)
  {
    sub_10005D720(v0 + 280);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
    return v32();
  }
  uint64_t v35 = *(uint64_t **)(v0 + 544);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)(v0 + 768) = v36;
  uint64_t v38 = (void *)v35[2];
  *(void *)(v0 + 776) = v38;
  uint64_t v39 = (_OWORD *)swift_allocObject();
  *(void *)(v0 + 784) = v39;
  long long v40 = *(_OWORD *)(v31 + 48);
  long long v42 = *(_OWORD *)v31;
  long long v41 = *(_OWORD *)(v31 + 16);
  v39[3] = *(_OWORD *)(v31 + 32);
  v39[4] = v40;
  v39[1] = v42;
  v39[2] = v41;
  long long v43 = *(_OWORD *)(v31 + 112);
  long long v45 = *(_OWORD *)(v31 + 64);
  long long v44 = *(_OWORD *)(v31 + 80);
  v39[7] = *(_OWORD *)(v31 + 96);
  v39[8] = v43;
  v39[5] = v45;
  v39[6] = v44;
  sub_10005D5A0(v31);
  uint64_t v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                     + dword_1001E48F8);
  swift_bridgeObjectRetain();
  id v46 = v38;
  long long v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 792) = v47;
  *long long v47 = v0;
  v47[1] = sub_1000E76AC;
  return v96((uint64_t)v96, (uint64_t)sub_1001038EC, (uint64_t)v39, v37, v36, (uint64_t)v46);
}

uint64_t sub_1000E64C8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 760) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000E72EC;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 736);

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 328);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000E6628;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E6628()
{
  uint64_t v100 = v0;
  uint64_t v1 = *(void *)(v0 + 712);
  uint64_t v2 = *(void *)(v0 + 704);
  swift_release();
  if (v1 != v2)
  {
    uint64_t v5 = v0 + 16;
    uint64_t v6 = *(void *)(v0 + 712);
    memcpy((void *)(v0 + 16), (const void *)(*(void *)(v0 + 688) + 264 * v6 + 32), 0x101uLL);
    *(void *)(v0 + 712) = v6 + 1;
    uint64_t v7 = swift_allocObject();
    *(void *)(v0 + 720) = v7;
    memcpy((void *)(v7 + 16), (const void *)(v0 + 16), 0x101uLL);
    swift_beginAccess();
    if (*(unsigned char *)(v7 + 186))
    {
      uint64_t v8 = *(void *)(v0 + 632);
      uint64_t v9 = *(void *)(v0 + 600);
      uint64_t v10 = *(void *)(v0 + 592);
      sub_100081480(v0 + 16);
      uint64_t v11 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Registered postback should not be imprinted", v14, 2u);
        swift_slowDealloc();
      }
      uint64_t v15 = *(void *)(v0 + 632);
      uint64_t v16 = *(void *)(v0 + 600);
      uint64_t v17 = *(void *)(v0 + 592);

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      sub_1000816FC();
      swift_allocError();
      unsigned char *v18 = 3;
      swift_willThrow();
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v19 = *(void *)(v0 + 616);
      uint64_t v20 = *(void *)(v0 + 600);
      uint64_t v21 = *(void *)(v0 + 592);
      uint64_t v22 = *(void *)(v0 + 536);
      uint64_t v23 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v23, v21);
      sub_10005D5A0(v22);
      swift_errorRetain();
      sub_10005D5A0(v22);
      swift_errorRetain();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v97 = *(void *)(v0 + 616);
      uint64_t v27 = *(void *)(v0 + 600);
      uint64_t v28 = *(void *)(v0 + 592);
      uint64_t v29 = *(void *)(v0 + 536);
      if (v26)
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v94 = (void *)swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315394;
        uint64_t v95 = v28;
        uint64_t v31 = *(void *)(v29 + 56);
        unint64_t v32 = *(void *)(v29 + 64);
        swift_bridgeObjectRetain();
        *(void *)(v0 + 512) = sub_100147668(v31, v32, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10005D5D8(v29);
        sub_10005D5D8(v29);
        *(_WORD *)(v30 + 12) = 2112;
        swift_errorRetain();
        uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 504) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v94 = v33;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to imprint postbacks for conversion id %s, with error: %@", (uint8_t *)v30, 0x16u);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v97, v95);
      }
      else
      {
        sub_10005D5D8(*(void *)(v0 + 536));
        sub_10005D5D8(v29);
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v97, v28);
      }
      swift_willThrow();
      sub_10005D720(v0 + 280);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_20;
    }
    uint64_t v48 = *(void *)(v0 + 536);
    *(void *)(v7 + 216) = *(void *)(v48 + 80);
    uint64_t v49 = v48 + 88;
    if (*(unsigned char *)(v7 + 121))
    {
      sub_100059F98(v49, v0 + 408, &qword_1001E28D8);
      sub_100059F98(v0 + 408, v7 + 232, &qword_1001E28D8);
      if (*(void *)(v7 + 128)) {
        goto LABEL_17;
      }
      uint64_t v96 = (unsigned char *)(v7 + 256);
      uint64_t v50 = *(void *)(v0 + 536);
      *(unsigned char *)(v7 + 186) = *(unsigned char *)(v0 + 273);
      sub_100059F98(v50 + 40, v0 + 424, &qword_1001E3CE8);
      sub_100059F98(v0 + 424, v7 + 136, &qword_1001E3CE8);
      sub_100059F98(v50 + 49, v0 + 274, &qword_1001E1D40);
      sub_100059F98(v0 + 274, v7 + 145, &qword_1001E1D40);
      if (*(unsigned char *)(v50 + 51))
      {
        sub_100059F98(*(void *)(v0 + 536) + 104, v0 + 456, &qword_1001E28D8);
        sub_100059F98(v0 + 456, v0 + 440, &qword_1001E28D8);
        if ((*(unsigned char *)(v0 + 448) & 1) == 0)
        {
          sub_100081480(v0 + 16);
          Date.init(timeIntervalSince1970:)();
          *(unsigned char *)(v7 + 187) = 1;
          uint64_t v58 = (void *)Date.timeIntervalSince1970.getter();
          double v86 = v85 * 1000.0;
          if ((~*(void *)&v86 & 0x7FF0000000000000) != 0)
          {
            uint64_t v59 = v0 + 280;
            if (v86 > -1.0)
            {
              if (v86 < 1.84467441e19)
              {
                uint64_t v87 = *(void *)(v0 + 576);
                *(void *)(v7 + 248) = (unint64_t)v86;
                *uint64_t v96 = 0;
                sub_1000C3648(*(void *)(v7 + 128), *(unsigned char *)(v7 + 208), v87);
                uint64_t v58 = (void *)Date.timeIntervalSince1970.getter();
                double v89 = v88 * 1000.0;
                if ((~*(void *)&v89 & 0x7FF0000000000000) != 0)
                {
                  if (v89 > -1.0)
                  {
                    if (v89 < 1.84467441e19)
                    {
                      uint64_t v90 = *(void *)(v0 + 584);
                      uint64_t v91 = *(void *)(v0 + 552);
                      unint64_t v92 = (unint64_t)v89;
                      uint64_t v93 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 560) + 8);
                      v93(*(void *)(v0 + 576), v91);
                      *(void *)(v7 + 264) = v92;
                      *(unsigned char *)(v7 + 272) = 0;
                      v93(v90, v91);
LABEL_33:
                      uint64_t v77 = *(uint64_t **)(v0 + 544);
                      swift_endAccess();
                      uint64_t v79 = *v77;
                      uint64_t v78 = v77[1];
                      *(void *)(v0 + 728) = v78;
                      id v80 = (void *)v77[2];
                      *(void *)(v0 + 736) = v80;
                      swift_bridgeObjectRetain();
                      id v81 = v80;
                      swift_retain();
                      *(void *)(v0 + 352) = &type metadata for PostbackDatabaseStore;
                      *(void *)(v0 + 360) = &off_1001E1450;
                      *(void *)(v0 + 328) = v79;
                      *(void *)(v0 + 336) = v78;
                      *(void *)(v0 + 344) = v81;
                      id v82 = v81;
                      swift_bridgeObjectRetain();
                      id v83 = v82;
                      double v84 = (void *)swift_task_alloc();
                      *(void *)(v0 + 744) = v84;
                      v84[2] = v83;
                      v84[3] = v0 + 328;
                      v84[4] = sub_100100D4C;
                      v84[5] = v7;
                      uint64_t v58 = (void *)swift_task_alloc();
                      *(void *)(v0 + 752) = v58;
                      *uint64_t v58 = v0;
                      v58[1] = sub_1000E64C8;
                      double v65 = (char *)&type metadata for () + 8;
                      unint64_t v62 = 0x8000000100186A10;
                      uint64_t v63 = sub_10010443C;
                      uint64_t v59 = 0;
                      uint64_t v60 = 0;
                      unint64_t v61 = 0xD00000000000001BLL;
                      double v64 = v84;
                      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v58, v59, v60, v61, v62, v63, v64, v65);
                    }
LABEL_53:
                    __break(1u);
                    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v58, v59, v60, v61, v62, v63, v64, v65);
                  }
LABEL_52:
                  __break(1u);
                  goto LABEL_53;
                }
LABEL_51:
                __break(1u);
                goto LABEL_52;
              }
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
LABEL_49:
            __break(1u);
            goto LABEL_50;
          }
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
      }
      sub_100059F98(v0 + 408, v0 + 472, &qword_1001E28D8);
      if (*(unsigned char *)(v0 + 480))
      {
LABEL_17:
        sub_100081480(v0 + 16);
        goto LABEL_33;
      }
LABEL_29:
      int64_t v69 = *(void *)(v0 + 648);
      uint64_t v70 = *(void *)(v0 + 584);
      uint64_t v71 = *(void *)(v0 + 576);
      uint64_t v72 = *(void *)(v0 + 568);
      uint64_t v73 = *(void *)(v0 + 560);
      uint64_t v74 = *(void *)(v0 + 552);
      sub_100081480(v5);
      Date.init(timeIntervalSince1970:)();
      sub_1000C3980(0, v69, *(unsigned char *)(v7 + 208), v71);
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v57(v72, v74);
      sub_1000C3648(0, *(unsigned char *)(v7 + 208), v70);
      v57(v71, v74);
      uint64_t v58 = (void *)Date.timeIntervalSince1970.getter();
      double v67 = v75 * 1000.0;
      if ((~*(void *)&v67 & 0x7FF0000000000000) != 0)
      {
        uint64_t v68 = v96;
        if (v67 > -1.0)
        {
          if (v67 < 1.84467441e19) {
            goto LABEL_32;
          }
          goto LABEL_47;
        }
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    *(unsigned char *)(v7 + 186) = *(unsigned char *)(v0 + 273);
    sub_100059F98(v49, v0 + 392, &qword_1001E28D8);
    sub_100059F98(v0 + 392, v7 + 232, &qword_1001E28D8);
    sub_100059F98(v0 + 392, v0 + 488, &qword_1001E28D8);
    if (*(unsigned char *)(v0 + 496)) {
      goto LABEL_17;
    }
    uint64_t v96 = (unsigned char *)(v7 + 256);
    int64_t v51 = *(void *)(v0 + 648);
    uint64_t v52 = *(void *)(v0 + 584);
    uint64_t v53 = *(void *)(v0 + 576);
    uint64_t v54 = *(void *)(v0 + 568);
    uint64_t v55 = *(void *)(v0 + 560);
    uint64_t v56 = *(void *)(v0 + 552);
    sub_100081480(v0 + 16);
    Date.init(timeIntervalSince1970:)();
    sub_1000C3980(0, v51, *(unsigned char *)(v7 + 208), v53);
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v57(v54, v56);
    sub_1000C3648(0, *(unsigned char *)(v7 + 208), v52);
    v57(v53, v56);
    uint64_t v5 = v52;
    uint64_t v58 = (void *)Date.timeIntervalSince1970.getter();
    double v67 = v66 * 1000.0;
    if ((~*(void *)&v67 & 0x7FF0000000000000) != 0)
    {
      uint64_t v68 = (unsigned char *)(v7 + 256);
      if (v67 > -1.0)
      {
        if (v67 < 1.84467441e19)
        {
LABEL_32:
          unint64_t v76 = (unint64_t)v67;
          v57(*(void *)(v0 + 584), *(void *)(v0 + 552));
          *(void *)(v7 + 264) = v76;
          v68[16] = 0;
          goto LABEL_33;
        }
        __break(1u);
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 536);
  if ((*(unsigned char *)(v3 + 74) & 1) == 0)
  {
    sub_10005D720(v0 + 280);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
    return v4();
  }
  uint64_t v34 = *(uint64_t **)(v0 + 544);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)(v0 + 768) = v35;
  uint64_t v37 = (void *)v34[2];
  *(void *)(v0 + 776) = v37;
  uint64_t v38 = (_OWORD *)swift_allocObject();
  *(void *)(v0 + 784) = v38;
  long long v39 = *(_OWORD *)(v3 + 48);
  long long v41 = *(_OWORD *)v3;
  long long v40 = *(_OWORD *)(v3 + 16);
  v38[3] = *(_OWORD *)(v3 + 32);
  v38[4] = v39;
  v38[1] = v41;
  v38[2] = v40;
  long long v42 = *(_OWORD *)(v3 + 112);
  long long v44 = *(_OWORD *)(v3 + 64);
  long long v43 = *(_OWORD *)(v3 + 80);
  v38[7] = *(_OWORD *)(v3 + 96);
  v38[8] = v42;
  v38[5] = v44;
  v38[6] = v43;
  sub_10005D5A0(v3);
  uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                     + dword_1001E48F8);
  swift_bridgeObjectRetain();
  id v45 = v37;
  id v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 792) = v46;
  *id v46 = v0;
  v46[1] = sub_1000E76AC;
  return v98((uint64_t)v98, (uint64_t)sub_1001038EC, (uint64_t)v38, v36, v35, (uint64_t)v45);
}

uint64_t sub_1000E72EC()
{
  os_log_type_t v25 = v0;
  uint64_t v1 = (void *)v0[92];

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 41));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = v0[77];
  uint64_t v3 = v0[75];
  uint64_t v4 = v0[74];
  uint64_t v5 = v0[67];
  uint64_t v6 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10005D5A0(v5);
  swift_errorRetain();
  sub_10005D5A0(v5);
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v21 = v0[75];
    uint64_t v22 = v0[74];
    uint64_t v23 = v0[77];
    uint64_t v9 = v0[67];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v13 = *(void *)(v9 + 56);
    unint64_t v12 = *(void *)(v9 + 64);
    swift_bridgeObjectRetain();
    v0[64] = sub_100147668(v13, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v9);
    sub_10005D5D8(v9);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[63] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to imprint postbacks for conversion id %s, with error: %@", (uint8_t *)v10, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }
  else
  {
    uint64_t v15 = v0[77];
    uint64_t v16 = v0[75];
    uint64_t v17 = v0[74];
    uint64_t v18 = v0[67];
    sub_10005D5D8(v18);
    sub_10005D5D8(v18);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  swift_willThrow();
  sub_10005D720((uint64_t)(v0 + 35));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1000E76AC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 800) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 776);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000E7C3C;
  }
  else {
    uint64_t v4 = sub_1000E7814;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000E7814()
{
  sub_10005D720(v0 + 280);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E78D8()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  uint64_t v4 = v0[67];
  uint64_t v5 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  sub_10005D5A0(v4);
  swift_errorRetain();
  sub_10005D5A0(v4);
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v20 = v0[75];
    uint64_t v21 = v0[74];
    uint64_t v22 = v0[77];
    uint64_t v8 = v0[67];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v12 = *(void *)(v8 + 56);
    unint64_t v11 = *(void *)(v8 + 64);
    swift_bridgeObjectRetain();
    v0[64] = sub_100147668(v12, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v8);
    sub_10005D5D8(v8);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[63] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to imprint postbacks for conversion id %s, with error: %@", (uint8_t *)v9, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    uint64_t v14 = v0[77];
    uint64_t v15 = v0[75];
    uint64_t v16 = v0[74];
    uint64_t v17 = v0[67];
    sub_10005D5D8(v17);
    sub_10005D5D8(v17);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  swift_willThrow();
  sub_10005D720((uint64_t)(v0 + 35));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000E7C3C()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  uint64_t v4 = v0[67];
  uint64_t v5 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  sub_10005D5A0(v4);
  swift_errorRetain();
  sub_10005D5A0(v4);
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v20 = v0[75];
    uint64_t v21 = v0[74];
    uint64_t v22 = v0[76];
    uint64_t v8 = v0[67];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = *(void *)(v8 + 56);
    unint64_t v11 = *(void *)(v8 + 64);
    swift_bridgeObjectRetain();
    v0[65] = sub_100147668(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v8);
    sub_10005D5D8(v8);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[66] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to clear unregistered postbacks for completed conversion id %s, with error: %@", (uint8_t *)v9, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    uint64_t v13 = v0[76];
    uint64_t v14 = v0[75];
    uint64_t v15 = v0[74];
    uint64_t v16 = v0[67];
    sub_10005D5D8(v16);
    sub_10005D5D8(v16);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  swift_willThrow();
  sub_10005D720((uint64_t)(v0 + 35));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

void sub_1000E7FA8(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v13 = *(_OWORD *)(a2 + 56);
  id v6 = [a1 connection];
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  long long v12 = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v9 = [self predicateWithProperty:v7 equalToValue:v8];
  swift_unknownObjectRelease();

  sub_10008A524((uint64_t)&v13);
  id v10 = sub_10011CC88(v6, v9, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  *(void *)&long long v12 = _swiftEmptyArrayStorage;
  _OWORD v11[2] = &v12;
  sub_1001283A4((uint64_t)sub_100103918, (uint64_t)v11, v10);

  if (v3) {
    swift_bridgeObjectRelease();
  }
  else {
    *a3 = v12;
  }
}

uint64_t sub_1000E8148@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  sub_1000BABC4((uint64_t)v8, a1);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v11 = v9;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v11;
  return result;
}

uint64_t sub_1000E826C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[108] = a4;
  v4[107] = a3;
  v4[106] = a2;
  sub_100012960(&qword_1001E0EC0);
  v4[109] = swift_task_alloc();
  v4[110] = swift_task_alloc();
  return _swift_task_switch(sub_1000E8318, 0, 0);
}

uint64_t sub_1000E8318()
{
  uint64_t v1 = *(void *)(v0 + 856);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v27 = (const void *)(v0 + 16);
    uint64_t v3 = (char *)(v1 + 32);
    uint64_t v4 = type metadata accessor for TaskPriority();
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    uint64_t v24 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v23 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    swift_bridgeObjectRetain();
    uint64_t v26 = v4;
    uint64_t v6 = (void *)(v0 + 528);
    while (1)
    {
      uint64_t v8 = *(void *)(v0 + 880);
      uint64_t v9 = *(void *)(v0 + 872);
      uint64_t v10 = *(void *)(v0 + 864);
      memcpy(v6, v3, 0x101uLL);
      v25(v8, 1, 1, v4);
      sub_10007BFF0(v10, (uint64_t)v27);
      uint64_t v11 = (void *)swift_allocObject();
      _OWORD v11[2] = 0;
      uint64_t v12 = v11 + 2;
      v11[3] = 0;
      memcpy(v11 + 4, v6, 0x101uLL);
      memcpy(v11 + 37, v27, 0x200uLL);
      sub_100036994(v8, v9, &qword_1001E0EC0);
      LODWORD(v9) = (*v24)(v9, 1, v4);
      sub_100081480((uint64_t)v6);
      uint64_t v13 = *(void *)(v0 + 872);
      if (v9 == 1)
      {
        sub_100019960(*(void *)(v0 + 872), &qword_1001E0EC0);
        if (!*v12) {
          goto LABEL_8;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v23)(v13, v4);
        if (!*v12)
        {
LABEL_8:
          uint64_t v14 = 0;
          uint64_t v16 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v15;
      swift_unknownObjectRelease();
LABEL_9:
      uint64_t v17 = **(void **)(v0 + 848);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = &unk_1001E3C50;
      *(void *)(v18 + 24) = v11;
      uint64_t v19 = v16 | v14;
      if (v16 | v14)
      {
        uint64_t v19 = v0 + 792;
        *(void *)(v0 + 792) = 0;
        *(void *)(v0 + 800) = 0;
        *(void *)(v0 + 808) = v14;
        *(void *)(v0 + 816) = v16;
      }
      uint64_t v7 = *(void *)(v0 + 880);
      *(void *)(v0 + 824) = 1;
      *(void *)(v0 + 832) = v19;
      *(void *)(v0 + 840) = v17;
      swift_task_create();
      swift_release();
      sub_100019960(v7, &qword_1001E0EC0);
      v3 += 264;
      --v2;
      uint64_t v4 = v26;
      if (!v2)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 888) = v20;
  uint64_t v21 = sub_100012960(&qword_1001E3C60);
  void *v20 = v0;
  v20[1] = sub_1000E8690;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v21);
}

uint64_t sub_1000E8690()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000E87BC(int a1, int a2, int a3, void *__src, uint64_t a5)
{
  v5[318] = a5;
  v5[317] = __src;
  memcpy(v5 + 74, __src, 0x101uLL);
  uint64_t v6 = sub_100012960(&qword_1001E1370);
  v5[319] = v6;
  v5[320] = *(void *)(v6 - 8);
  v5[321] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[322] = v7;
  v5[323] = *(void *)(v7 - 8);
  v5[324] = swift_task_alloc();
  v5[325] = swift_task_alloc();
  v5[326] = swift_task_alloc();
  v5[327] = swift_task_alloc();
  return _swift_task_switch(sub_1000E8918, 0, 0);
}

uint64_t sub_1000E8918()
{
  uint64_t v1 = (void *)v0[318];
  uint64_t v2 = (void *)v0[317];
  v0[328] = v2[22];
  v0[329] = v2[23];
  uint64_t v4 = v1[20];
  uint64_t v3 = v1[21];
  uint64_t v5 = v1[22];
  uint64_t v6 = v2[4];
  v0[330] = v6;
  uint64_t v7 = v2[5];
  v0[331] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[332] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000E89F8;
  return sub_1000C0008(v6, v7, v4, v3, v5);
}

uint64_t sub_1000E89F8(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 2664) = a1;
  *(unsigned char *)(v3 + 850) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E8AFC, 0, 0);
}

uint64_t sub_1000E8AFC()
{
  uint64_t v1 = *(void *)(v0 + 2536);
  sub_10009485C(5, 4, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2296), 2u, 2u, 2u, 0, 1u, *(void *)(v0 + 2664), *(unsigned char *)(v0 + 850) & 1, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  sub_100092140(v1);
  uint64_t v2 = self;
  sub_100081480(v1);
  id v3 = [v2 standardUserDefaults];
  memcpy((void *)(v0 + 16), (const void *)(v0 + 592), 0x101uLL);
  *(void *)(v0 + 280) = &type metadata for HTTP;
  *(void *)(v0 + 288) = &off_1001C5F78;
  *(void *)(v0 + 296) = v3;
  memcpy((void *)(v0 + 304), (const void *)(v0 + 16), 0x120uLL);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 2672) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000E8CAC;
  return sub_10008FE9C();
}

uint64_t sub_1000E8CAC()
{
  *(void *)(*(void *)v1 + 2680) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000E9074;
  }
  else {
    uint64_t v2 = sub_1000E8DC0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E8DC0()
{
  uint64_t v27 = v0;
  sub_100103048(v0 + 16);
  *(_WORD *)(v0 + 851) = 0;
  uint64_t v1 = *(void *)(v0 + 2616);
  uint64_t v2 = *(void *)(v0 + 2584);
  uint64_t v3 = *(void *)(v0 + 2576);
  uint64_t v4 = *(void *)(v0 + 2536);
  uint64_t v5 = Logger.postback.unsafeMutableAddressor();
  *(void *)(v0 + 2688) = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 2696) = v6;
  *(void *)(v0 + 2704) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v3);
  sub_100081480(v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v0 + 2536);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134218242;
    *(void *)(v0 + 2504) = *(void *)(v9 + 64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10008150C(v9);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v11 = *(void *)(v0 + 2616);
    uint64_t v12 = *(void *)(v0 + 2584);
    uint64_t v13 = *(void *)(v0 + 2576);
    *(void *)(v0 + 2512) = sub_100147668(0x73736563637573, 0xE700000000000000, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Postback transmission for app %llu completed with result: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v14(v11, v13);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 2616);
    uint64_t v16 = *(void *)(v0 + 2584);
    uint64_t v17 = *(void *)(v0 + 2576);
    sub_10008150C(*(void *)(v0 + 2536));

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v14(v15, v17);
  }
  *(void *)(v0 + 2712) = v14;
  uint64_t v18 = sub_100012D78((void *)(*(void *)(v0 + 2544) + 472), *(void *)(*(void *)(v0 + 2544) + 496));
  long long v19 = *(_OWORD *)(v0 + 2440);
  *(_OWORD *)(v0 + 2040) = *(_OWORD *)(v0 + 2424);
  *(_OWORD *)(v0 + 2056) = v19;
  *(_OWORD *)(v0 + 2072) = *(_OWORD *)(v0 + 2456);
  *(_OWORD *)(v0 + 2081) = *(_OWORD *)(v0 + 2465);
  long long v20 = *(_OWORD *)(v0 + 2376);
  *(_OWORD *)(v0 + 1976) = *(_OWORD *)(v0 + 2360);
  *(_OWORD *)(v0 + 1992) = v20;
  long long v21 = *(_OWORD *)(v0 + 2408);
  *(_OWORD *)(v0 + 2008) = *(_OWORD *)(v0 + 2392);
  *(_OWORD *)(v0 + 2024) = v21;
  long long v22 = *(_OWORD *)(v0 + 2312);
  *(_OWORD *)(v0 + 1912) = *(_OWORD *)(v0 + 2296);
  *(_OWORD *)(v0 + 1928) = v22;
  long long v23 = *(_OWORD *)(v0 + 2344);
  *(_OWORD *)(v0 + 1944) = *(_OWORD *)(v0 + 2328);
  *(_OWORD *)(v0 + 1960) = v23;
  uint64_t v24 = *v18;
  *(void *)(v0 + 2720) = *v18;
  return _swift_task_switch(sub_1000E971C, v24, 0);
}

uint64_t sub_1000E9074()
{
  uint64_t v76 = v0;
  uint64_t v1 = (unsigned char *)(v0 + 849);
  uint64_t v2 = *(void *)(v0 + 2680);
  sub_100103048(v0 + 16);
  *(void *)(v0 + 2496) = v2;
  swift_errorRetain();
  sub_100012960(&qword_1001E12E8);
  if ((swift_dynamicCast() & 1) != 0 && (*v1 & 1) == 0)
  {
    uint64_t v29 = *(void *)(v0 + 2608);
    uint64_t v30 = *(void *)(v0 + 2584);
    uint64_t v31 = *(void *)(v0 + 2576);
    swift_errorRelease();
    uint64_t v32 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v32, v31);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Postback has invalid URL, deleting", v35, 2u);
      swift_slowDealloc();
    }
    uint64_t v36 = *(void *)(v0 + 2608);
    uint64_t v37 = *(void *)(v0 + 2584);
    uint64_t v38 = *(void *)(v0 + 2576);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    sub_100090E74();
    uint64_t v39 = swift_allocError();
    *long long v40 = 0;
    uint64_t v41 = sub_100094708(v39);
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2304) = v41;
    *(void *)(v0 + 2312) = v43;
    swift_bridgeObjectRelease();
    swift_errorRelease();
    *(void *)(v0 + 2320) = v45;
    *(void *)(v0 + 2328) = v47;
    swift_errorRelease();
    char v27 = 0;
    char v28 = 2;
    int v26 = 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 2600);
    uint64_t v4 = *(void *)(v0 + 2584);
    uint64_t v5 = *(void *)(v0 + 2576);
    uint64_t v6 = *(void *)(v0 + 2536);
    swift_errorRelease();
    uint64_t v7 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
    sub_100081480(v6);
    swift_errorRetain();
    sub_100081480(v6);
    swift_errorRetain();
    os_log_type_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 2536);
    if (v10)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134218242;
      sub_10008150C(v11);
      *(void *)(v0 + 2520) = *(void *)(v11 + 64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10008150C(v11);
      *(_WORD *)(v12 + 12) = 2112;
      swift_errorRetain();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 2528) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Postback transmission failed for app: %llu with error: %@", (uint8_t *)v12, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      uint64_t v1 = (unsigned char *)(v0 + 849);
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10008150C(*(void *)(v0 + 2536));
      sub_10008150C(v11);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v15 = *(void *)(v0 + 2680);
    uint64_t v16 = *(void *)(v0 + 2600);
    uint64_t v17 = *(void *)(v0 + 2584);
    uint64_t v18 = *(void *)(v0 + 2576);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    uint64_t v19 = sub_100094708(v15);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2304) = v19;
    *(void *)(v0 + 2312) = v21;
    swift_bridgeObjectRelease();
    swift_errorRelease();
    int v26 = 0;
    *(void *)(v0 + 2320) = v23;
    *(void *)(v0 + 2328) = v25;
    char v27 = 1;
    char v28 = 1;
  }
  *(unsigned char *)(v0 + 852) = v28;
  v1[2] = v27;
  uint64_t v48 = *(void *)(v0 + 2616);
  uint64_t v49 = *(void *)(v0 + 2584);
  uint64_t v50 = *(void *)(v0 + 2576);
  uint64_t v51 = *(void *)(v0 + 2536);
  uint64_t v52 = Logger.postback.unsafeMutableAddressor();
  *(void *)(v0 + 2688) = v52;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
  *(void *)(v0 + 2696) = v53;
  *(void *)(v0 + 2704) = (v49 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v53(v48, v52, v50);
  sub_100081480(v51);
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = *(void *)(v0 + 2536);
    uint64_t v57 = swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 134218242;
    *(void *)(v0 + 2504) = *(void *)(v56 + 64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10008150C(v56);
    *(_WORD *)(v57 + 12) = 2080;
    if (v26) {
      uint64_t v58 = 0xD000000000000014;
    }
    else {
      uint64_t v58 = 0x6572756C696166;
    }
    if (v26) {
      unint64_t v59 = 0x8000000100187560;
    }
    else {
      unint64_t v59 = 0xE700000000000000;
    }
    uint64_t v74 = *(void *)(v0 + 2616);
    uint64_t v60 = *(void *)(v0 + 2584);
    uint64_t v61 = *(void *)(v0 + 2576);
    *(void *)(v0 + 2512) = sub_100147668(v58, v59, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Postback transmission for app %llu completed with result: %s", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v62 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v62(v74, v61);
  }
  else
  {
    uint64_t v63 = *(void *)(v0 + 2616);
    uint64_t v64 = *(void *)(v0 + 2584);
    uint64_t v65 = *(void *)(v0 + 2576);
    sub_10008150C(*(void *)(v0 + 2536));

    unint64_t v62 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v62(v63, v65);
  }
  *(void *)(v0 + 2712) = v62;
  double v66 = sub_100012D78((void *)(*(void *)(v0 + 2544) + 472), *(void *)(*(void *)(v0 + 2544) + 496));
  long long v67 = *(_OWORD *)(v0 + 2440);
  *(_OWORD *)(v0 + 2040) = *(_OWORD *)(v0 + 2424);
  *(_OWORD *)(v0 + 2056) = v67;
  *(_OWORD *)(v0 + 2072) = *(_OWORD *)(v0 + 2456);
  *(_OWORD *)(v0 + 2081) = *(_OWORD *)(v0 + 2465);
  long long v68 = *(_OWORD *)(v0 + 2376);
  *(_OWORD *)(v0 + 1976) = *(_OWORD *)(v0 + 2360);
  *(_OWORD *)(v0 + 1992) = v68;
  long long v69 = *(_OWORD *)(v0 + 2408);
  *(_OWORD *)(v0 + 2008) = *(_OWORD *)(v0 + 2392);
  *(_OWORD *)(v0 + 2024) = v69;
  long long v70 = *(_OWORD *)(v0 + 2312);
  *(_OWORD *)(v0 + 1912) = *(_OWORD *)(v0 + 2296);
  *(_OWORD *)(v0 + 1928) = v70;
  long long v71 = *(_OWORD *)(v0 + 2344);
  *(_OWORD *)(v0 + 1944) = *(_OWORD *)(v0 + 2328);
  *(_OWORD *)(v0 + 1960) = v71;
  uint64_t v72 = *v66;
  *(void *)(v0 + 2720) = *v66;
  return _swift_task_switch(sub_1000E971C, v72, 0);
}

uint64_t sub_1000E971C()
{
  long long v1 = *(_OWORD *)(v0 + 2056);
  *(_OWORD *)(v0 + 1632) = *(_OWORD *)(v0 + 2040);
  *(_OWORD *)(v0 + 1648) = v1;
  *(_OWORD *)(v0 + 1664) = *(_OWORD *)(v0 + 2072);
  *(_OWORD *)(v0 + 1673) = *(_OWORD *)(v0 + 2081);
  long long v2 = *(_OWORD *)(v0 + 1992);
  *(_OWORD *)(v0 + 1568) = *(_OWORD *)(v0 + 1976);
  *(_OWORD *)(v0 + 1584) = v2;
  long long v3 = *(_OWORD *)(v0 + 2024);
  *(_OWORD *)(v0 + 1600) = *(_OWORD *)(v0 + 2008);
  *(_OWORD *)(v0 + 1616) = v3;
  long long v4 = *(_OWORD *)(v0 + 1928);
  *(_OWORD *)(v0 + 1504) = *(_OWORD *)(v0 + 1912);
  *(_OWORD *)(v0 + 1520) = v4;
  long long v5 = *(_OWORD *)(v0 + 1960);
  *(_OWORD *)(v0 + 1536) = *(_OWORD *)(v0 + 1944);
  uint64_t v6 = *(void *)(v0 + 2632);
  uint64_t v7 = *(void *)(v0 + 2624);
  uint64_t v8 = *(void *)(v0 + 2568);
  uint64_t v9 = *(void *)(v0 + 2560);
  uint64_t v10 = *(void *)(v0 + 2552);
  *(_OWORD *)(v0 + 1552) = v5;
  *(void *)(v0 + 1696) = v7;
  *(void *)(v0 + 1704) = v6;
  *(_WORD *)(v0 + 1712) = 257;
  sub_10003675C(v0 + 1504);
  sub_1000367C8(v0 + 1504, v0 + 856);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 1912);
  *(void *)(v0 + 2728) = sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(void *)(v0 + 2736) = v11;
  *(void *)(v0 + 2744) = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v8, v10);
  sub_100036824(v0 + 1912);
  return _swift_task_switch(sub_1000E9894, 0, 0);
}

uint64_t sub_1000E9894()
{
  long long v1 = *(void **)(v0 + 2544);
  long long v2 = *(const void **)(v0 + 2536);
  if (*(unsigned char *)(v0 + 851) == 1)
  {
    uint64_t v4 = v1[20];
    uint64_t v3 = v1[21];
    uint64_t v5 = v1[22];
    uint64_t v6 = swift_task_alloc();
    *(void *)(v0 + 2752) = v6;
    *(void *)(v6 + 16) = v1;
    *(void *)(v6 + 24) = v2;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 2760) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000E9A98;
    uint64_t v8 = *(void *)(v0 + 2648);
    uint64_t v9 = *(void *)(v0 + 2640);
    return sub_1000BEE08(v9, v8, 1, (uint64_t)&unk_1001E3C78, v6, v4, v3, v5);
  }
  else
  {
    *(void *)(v0 + 2776) = v1[1];
    uint64_t v11 = (void *)v1[2];
    *(void *)(v0 + 2784) = v11;
    uint64_t v12 = swift_allocObject();
    *(void *)(v0 + 2792) = v12;
    memcpy((void *)(v12 + 16), v2, 0x101uLL);
    sub_100081480((uint64_t)v2);
    uint64_t v14 = (uint64_t (*)(void))((char *)&dword_1001E48F8 + dword_1001E48F8);
    swift_bridgeObjectRetain();
    v11;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 2800) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1000E9C2C;
    return v14();
  }
}

uint64_t sub_1000E9A98()
{
  long long v2 = (void *)*v1;
  v2[346] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000EA7FC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2[317] + 64);
    uint64_t v4 = (void *)swift_task_alloc();
    v2[357] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_1000EA450;
    uint64_t v5 = v2[329];
    uint64_t v6 = v2[328];
    return sub_1000EB1DC(v3, v6, v5);
  }
}

uint64_t sub_1000E9C2C()
{
  long long v2 = *(void **)(*(void *)v1 + 2784);
  *(void *)(*(void *)v1 + 2808) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000EAB7C;
  }
  else {
    uint64_t v3 = sub_1000E9D98;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E9D98()
{
  uint64_t v1 = v0[331];
  uint64_t v2 = v0[330];
  uint64_t v3 = v0[318];
  v0[352] = *(void *)(v3 + 168);
  uint64_t v4 = *(void **)(v3 + 176);
  v0[353] = v4;
  uint64_t v5 = swift_allocObject();
  v0[354] = v5;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  uint64_t v8 = (uint64_t (*)(void))((char *)&dword_1001E4860 + dword_1001E4860);
  swift_bridgeObjectRetain();
  v4;
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[355] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000E9EC8;
  return v8();
}

uint64_t sub_1000E9EC8()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 2824);
  *(void *)(*(void *)v1 + 2848) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000EA0D8;
  }
  else {
    uint64_t v3 = sub_1000EA034;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000EA034()
{
  uint64_t v1 = *(void *)(v0[317] + 64);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[357] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000EA450;
  uint64_t v3 = v0[329];
  uint64_t v4 = v0[328];
  return sub_1000EB1DC(v1, v4, v3);
}

uint64_t sub_1000EA0D8()
{
  uint64_t v1 = *(void *)(v0 + 2848);
  *(void *)(v0 + 2864) = v1;
  (*(void (**)(void, void, void))(v0 + 2696))(*(void *)(v0 + 2592), *(void *)(v0 + 2688), *(void *)(v0 + 2576));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 2488) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during cleanup after postback transmission: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 2712);
  int v8 = *(unsigned __int8 *)(v0 + 852);
  uint64_t v9 = *(void *)(v0 + 2592);
  uint64_t v10 = *(void *)(v0 + 2576);

  v7(v9, v10);
  if (v8)
  {
    if (v8 == 1)
    {
      unint64_t v11 = 0xE700000000000000;
      unint64_t v12 = 0x6572756C696166;
    }
    else
    {
      unint64_t v11 = 0x8000000100187560;
      unint64_t v12 = 0xD000000000000014;
    }
  }
  else
  {
    unint64_t v11 = 0xE700000000000000;
    unint64_t v12 = 0x73736563637573;
  }
  *(void *)(v0 + 2872) = v11;
  uint64_t v13 = *(void *)(v0 + 2544);
  uint64_t v14 = *(void *)(v0 + 2536);
  unsigned __int8 v15 = *(unsigned __int8 *)(v14 + 104) > 1u;
  sub_1001011D8();
  uint64_t v16 = swift_allocError();
  *uint64_t v17 = v1;
  v17[1] = v12;
  v17[2] = v11;
  uint64_t v18 = *(void *)(v14 + 112);
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(4, 3, v16, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2104), 2u, 2u, 1u, v18, 0, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v15,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v19 = *(_OWORD *)(v0 + 2248);
  *(_OWORD *)(v0 + 1848) = *(_OWORD *)(v0 + 2232);
  *(_OWORD *)(v0 + 1864) = v19;
  *(_OWORD *)(v0 + 1880) = *(_OWORD *)(v0 + 2264);
  *(_OWORD *)(v0 + 1889) = *(_OWORD *)(v0 + 2273);
  long long v20 = *(_OWORD *)(v0 + 2184);
  *(_OWORD *)(v0 + 1784) = *(_OWORD *)(v0 + 2168);
  *(_OWORD *)(v0 + 1800) = v20;
  long long v21 = *(_OWORD *)(v0 + 2216);
  *(_OWORD *)(v0 + 1816) = *(_OWORD *)(v0 + 2200);
  *(_OWORD *)(v0 + 1832) = v21;
  long long v22 = *(_OWORD *)(v0 + 2120);
  *(_OWORD *)(v0 + 1720) = *(_OWORD *)(v0 + 2104);
  *(_OWORD *)(v0 + 1736) = v22;
  long long v23 = *(_OWORD *)(v0 + 2152);
  *(_OWORD *)(v0 + 1752) = *(_OWORD *)(v0 + 2136);
  *(_OWORD *)(v0 + 1768) = v23;
  uint64_t v24 = sub_100012D78((void *)(v13 + 472), *(void *)(v13 + 496));
  uint64_t v25 = *v24;
  *(void *)(v0 + 2880) = *v24;
  return _swift_task_switch(sub_1000EA5E4, v25, 0);
}

uint64_t sub_1000EA450()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000EA54C, 0, 0);
}

uint64_t sub_1000EA54C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EA5E4()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 2736);
  uint64_t v2 = *(void *)(v0 + 2632);
  uint64_t v3 = *(void *)(v0 + 2624);
  uint64_t v4 = *(void *)(v0 + 2568);
  uint64_t v5 = *(void *)(v0 + 2552);
  long long v6 = *(_OWORD *)(v0 + 1864);
  *(_OWORD *)(v0 + 1416) = *(_OWORD *)(v0 + 1848);
  *(_OWORD *)(v0 + 1432) = v6;
  *(_OWORD *)(v0 + 1448) = *(_OWORD *)(v0 + 1880);
  *(_OWORD *)(v0 + 1457) = *(_OWORD *)(v0 + 1889);
  long long v7 = *(_OWORD *)(v0 + 1800);
  *(_OWORD *)(v0 + 1352) = *(_OWORD *)(v0 + 1784);
  *(_OWORD *)(v0 + 1368) = v7;
  long long v8 = *(_OWORD *)(v0 + 1832);
  *(_OWORD *)(v0 + 1384) = *(_OWORD *)(v0 + 1816);
  *(_OWORD *)(v0 + 1400) = v8;
  long long v9 = *(_OWORD *)(v0 + 1736);
  *(_OWORD *)(v0 + 1288) = *(_OWORD *)(v0 + 1720);
  *(_OWORD *)(v0 + 1304) = v9;
  long long v10 = *(_OWORD *)(v0 + 1768);
  *(_OWORD *)(v0 + 1320) = *(_OWORD *)(v0 + 1752);
  *(_OWORD *)(v0 + 1336) = v10;
  *(void *)(v0 + 1480) = v3;
  *(void *)(v0 + 1488) = v2;
  *(_WORD *)(v0 + 1496) = 257;
  sub_10003675C(v0 + 1288);
  sub_1000367C8(v0 + 1288, v0 + 1072);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 2104);
  AsyncStream.Continuation.yield(_:)();
  v1(v4, v5);
  sub_100036824(v0 + 2104);
  return _swift_task_switch(sub_1000EA738, 0, 0);
}

uint64_t sub_1000EA738()
{
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0[317] + 64);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[357] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000EA450;
  uint64_t v3 = v0[329];
  uint64_t v4 = v0[328];
  return sub_1000EB1DC(v1, v4, v3);
}

uint64_t sub_1000EA7FC()
{
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 2768);
  *(void *)(v0 + 2864) = v1;
  (*(void (**)(void, void, void))(v0 + 2696))(*(void *)(v0 + 2592), *(void *)(v0 + 2688), *(void *)(v0 + 2576));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 2488) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during cleanup after postback transmission: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  long long v7 = *(void (**)(uint64_t, uint64_t))(v0 + 2712);
  int v8 = *(unsigned __int8 *)(v0 + 852);
  uint64_t v9 = *(void *)(v0 + 2592);
  uint64_t v10 = *(void *)(v0 + 2576);

  v7(v9, v10);
  if (v8)
  {
    if (v8 == 1)
    {
      unint64_t v11 = 0xE700000000000000;
      unint64_t v12 = 0x6572756C696166;
    }
    else
    {
      unint64_t v11 = 0x8000000100187560;
      unint64_t v12 = 0xD000000000000014;
    }
  }
  else
  {
    unint64_t v11 = 0xE700000000000000;
    unint64_t v12 = 0x73736563637573;
  }
  *(void *)(v0 + 2872) = v11;
  uint64_t v13 = *(void *)(v0 + 2544);
  uint64_t v14 = *(void *)(v0 + 2536);
  unsigned __int8 v15 = *(unsigned __int8 *)(v14 + 104) > 1u;
  sub_1001011D8();
  uint64_t v16 = swift_allocError();
  *uint64_t v17 = v1;
  v17[1] = v12;
  v17[2] = v11;
  uint64_t v18 = *(void *)(v14 + 112);
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(4, 3, v16, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2104), 2u, 2u, 1u, v18, 0, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v15,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v19 = *(_OWORD *)(v0 + 2248);
  *(_OWORD *)(v0 + 1848) = *(_OWORD *)(v0 + 2232);
  *(_OWORD *)(v0 + 1864) = v19;
  *(_OWORD *)(v0 + 1880) = *(_OWORD *)(v0 + 2264);
  *(_OWORD *)(v0 + 1889) = *(_OWORD *)(v0 + 2273);
  long long v20 = *(_OWORD *)(v0 + 2184);
  *(_OWORD *)(v0 + 1784) = *(_OWORD *)(v0 + 2168);
  *(_OWORD *)(v0 + 1800) = v20;
  long long v21 = *(_OWORD *)(v0 + 2216);
  *(_OWORD *)(v0 + 1816) = *(_OWORD *)(v0 + 2200);
  *(_OWORD *)(v0 + 1832) = v21;
  long long v22 = *(_OWORD *)(v0 + 2120);
  *(_OWORD *)(v0 + 1720) = *(_OWORD *)(v0 + 2104);
  *(_OWORD *)(v0 + 1736) = v22;
  long long v23 = *(_OWORD *)(v0 + 2152);
  *(_OWORD *)(v0 + 1752) = *(_OWORD *)(v0 + 2136);
  *(_OWORD *)(v0 + 1768) = v23;
  uint64_t v24 = sub_100012D78((void *)(v13 + 472), *(void *)(v13 + 496));
  uint64_t v25 = *v24;
  *(void *)(v0 + 2880) = *v24;
  return _swift_task_switch(sub_1000EA5E4, v25, 0);
}

uint64_t sub_1000EAB7C()
{
  uint64_t v1 = *(void *)(v0 + 2808);
  *(void *)(v0 + 2864) = v1;
  (*(void (**)(void, void, void))(v0 + 2696))(*(void *)(v0 + 2592), *(void *)(v0 + 2688), *(void *)(v0 + 2576));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 2488) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during cleanup after postback transmission: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  long long v7 = *(void (**)(uint64_t, uint64_t))(v0 + 2712);
  int v8 = *(unsigned __int8 *)(v0 + 852);
  uint64_t v9 = *(void *)(v0 + 2592);
  uint64_t v10 = *(void *)(v0 + 2576);

  v7(v9, v10);
  if (v8)
  {
    if (v8 == 1)
    {
      unint64_t v11 = 0xE700000000000000;
      unint64_t v12 = 0x6572756C696166;
    }
    else
    {
      unint64_t v11 = 0x8000000100187560;
      unint64_t v12 = 0xD000000000000014;
    }
  }
  else
  {
    unint64_t v11 = 0xE700000000000000;
    unint64_t v12 = 0x73736563637573;
  }
  *(void *)(v0 + 2872) = v11;
  uint64_t v13 = *(void *)(v0 + 2544);
  uint64_t v14 = *(void *)(v0 + 2536);
  unsigned __int8 v15 = *(unsigned __int8 *)(v14 + 104) > 1u;
  sub_1001011D8();
  uint64_t v16 = swift_allocError();
  *uint64_t v17 = v1;
  v17[1] = v12;
  v17[2] = v11;
  uint64_t v18 = *(void *)(v14 + 112);
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10009485C(4, 3, v16, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2104), 2u, 2u, 1u, v18, 0, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v15,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v19 = *(_OWORD *)(v0 + 2248);
  *(_OWORD *)(v0 + 1848) = *(_OWORD *)(v0 + 2232);
  *(_OWORD *)(v0 + 1864) = v19;
  *(_OWORD *)(v0 + 1880) = *(_OWORD *)(v0 + 2264);
  *(_OWORD *)(v0 + 1889) = *(_OWORD *)(v0 + 2273);
  long long v20 = *(_OWORD *)(v0 + 2184);
  *(_OWORD *)(v0 + 1784) = *(_OWORD *)(v0 + 2168);
  *(_OWORD *)(v0 + 1800) = v20;
  long long v21 = *(_OWORD *)(v0 + 2216);
  *(_OWORD *)(v0 + 1816) = *(_OWORD *)(v0 + 2200);
  *(_OWORD *)(v0 + 1832) = v21;
  long long v22 = *(_OWORD *)(v0 + 2120);
  *(_OWORD *)(v0 + 1720) = *(_OWORD *)(v0 + 2104);
  *(_OWORD *)(v0 + 1736) = v22;
  long long v23 = *(_OWORD *)(v0 + 2152);
  *(_OWORD *)(v0 + 1752) = *(_OWORD *)(v0 + 2136);
  *(_OWORD *)(v0 + 1768) = v23;
  uint64_t v24 = sub_100012D78((void *)(v13 + 472), *(void *)(v13 + 496));
  uint64_t v25 = *v24;
  *(void *)(v0 + 2880) = *v24;
  return _swift_task_switch(sub_1000EA5E4, v25, 0);
}

uint64_t sub_1000EAEF4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1000EAF14, 0, 0);
}

uint64_t sub_1000EAF14()
{
  uint64_t v1 = (uint64_t *)v0[2];
  uint64_t v2 = (const void *)v0[3];
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  v0[4] = v3;
  uint64_t v5 = (void *)v1[2];
  v0[5] = v5;
  uint64_t v6 = swift_allocObject();
  v0[6] = v6;
  memcpy((void *)(v6 + 16), v2, 0x101uLL);
  swift_bridgeObjectRetain();
  id v7 = v5;
  sub_100081480((uint64_t)v2);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                     + dword_1001E48F8);
  int v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  *int v8 = v0;
  v8[1] = sub_1000EB040;
  return v10((uint64_t)v10, (uint64_t)sub_1001030E4, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000EB040()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000EB1C4;
  }
  else {
    uint64_t v3 = sub_1000EB1AC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000EB1AC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB1C4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[59] = a3;
  v4[60] = v3;
  v4[57] = a1;
  v4[58] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[61] = v5;
  v4[62] = *(void *)(v5 - 8);
  v4[63] = swift_task_alloc();
  uint64_t v6 = sub_100012960(&qword_1001E1370);
  v4[64] = v6;
  v4[65] = *(void *)(v6 - 8);
  v4[66] = swift_task_alloc();
  return _swift_task_switch(sub_1000EB300, 0, 0);
}

uint64_t sub_1000EB300()
{
  uint64_t v1 = (uint64_t *)v0[60];
  uint64_t v2 = v0[57];
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  v0[67] = v3;
  uint64_t v5 = (void *)v1[2];
  v0[68] = v5;
  uint64_t v6 = swift_allocObject();
  v0[69] = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E49E8 + dword_1001E49E8);
  swift_bridgeObjectRetain();
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[70] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000EB420;
  return v10((uint64_t)sub_1001031EC, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000EB420(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 544);
  *(void *)(*v2 + 568) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v1)
  {
    uint64_t v6 = sub_1000EB774;
  }
  else
  {
    *(void *)(v4 + 576) = a1;
    uint64_t v6 = sub_1000EB5A8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000EB5A8()
{
  if (v0[72])
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v3 = sub_100012D78((void *)(v0[60] + 472), *(void *)(v0[60] + 496));
    uint64_t v4 = *v3;
    v0[73] = *v3;
    return _swift_task_switch(sub_1000EB668, v4, 0);
  }
}

uint64_t sub_1000EB668()
{
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 520);
  uint64_t v3 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 472);
  *(void *)(v0 + 16) = *(void *)(v0 + 464);
  *(void *)(v0 + 24) = v4;
  *(unsigned char *)(v0 + 32) = 1;
  sub_100103230(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 232);
  swift_bridgeObjectRetain();
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000EB774()
{
  uint64_t v2 = v0[62];
  uint64_t v1 = v0[63];
  uint64_t v3 = v0[61];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[56] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to check if snout story should be completed: %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[62] + 8))(v0[63], v0[61]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000EB988(char *a1, char *a2)
{
  return sub_100106F38(*a1, *a2);
}

Swift::Int sub_1000EB994()
{
  return sub_100109558();
}

uint64_t sub_1000EB99C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000EBA10()
{
  return sub_10010AEB4();
}

uint64_t sub_1000EBA18@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1FC8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1000EBA78(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000035;
  }
  else {
    unint64_t v2 = 0xD000000000000017;
  }
  unint64_t v3 = 0x8000000100185340;
  if (*v1) {
    unint64_t v3 = 0x8000000100185360;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1000EBABC()
{
  if (*v0) {
    return 0xD000000000000035;
  }
  else {
    return 0xD000000000000017;
  }
}

uint64_t sub_1000EBAFC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C1FC8, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1000EBB60(uint64_t a1)
{
  unint64_t v2 = sub_1001041C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EBB9C(uint64_t a1)
{
  unint64_t v2 = sub_1001041C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EBBD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001039D0(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000EBC08(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v8 + 1680) = v7;
  *(unsigned char *)(v8 + 229) = a7;
  *(void *)(v8 + 1672) = a6;
  *(void *)(v8 + 1664) = a5;
  *(unsigned char *)(v8 + 228) = a4;
  *(void *)(v8 + 1656) = a3;
  *(void *)(v8 + 1648) = a2;
  *(void *)(v8 + 1640) = a1;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 1688) = v9;
  *(void *)(v8 + 1696) = *(void *)(v9 - 8);
  *(void *)(v8 + 1704) = swift_task_alloc();
  uint64_t v10 = sub_100012960(&qword_1001E1370);
  *(void *)(v8 + 1712) = v10;
  *(void *)(v8 + 1720) = *(void *)(v10 - 8);
  *(void *)(v8 + 1728) = swift_task_alloc();
  type metadata accessor for Date();
  *(void *)(v8 + 1736) = swift_task_alloc();
  return _swift_task_switch(sub_1000EBD70, 0, 0);
}

uint64_t sub_1000EBD70()
{
  uint64_t v1 = *(void *)(v0 + 1736);
  uint64_t v2 = *(void *)(v0 + 1680);
  uint64_t v3 = *(void *)(v0 + 1672);
  uint64_t v22 = *(void *)(v0 + 1664);
  uint64_t v4 = *(void *)(v0 + 1656);
  uint64_t v20 = *(void *)(v0 + 1648);
  uint64_t v5 = *(void *)(v0 + 1640);
  char v21 = *(unsigned char *)(v0 + 229) & 1;
  unsigned int v6 = *(unsigned __int8 *)(v0 + 228);
  sub_10009485C(4, 0, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1264), 2u, 2u, 0, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v6 > 1,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_WORD *)(v0 + 230) = *(_WORD *)(v0 + 1264);
  *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 1272);
  *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 1288);
  *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 1304);
  *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 1320);
  *(void *)(v0 + 1808) = *(void *)(v0 + 1336);
  *(_DWORD *)(v0 + 442) = *(_DWORD *)(v0 + 1344);
  *(unsigned char *)(v0 + 446) = *(unsigned char *)(v0 + 1348);
  *(unsigned char *)(v0 + 447) = *(unsigned char *)(v0 + 1349);
  *(_WORD *)(v0 + 226) = *(_WORD *)(v0 + 1350);
  *(void *)(v0 + 1816) = *(void *)(v0 + 1352);
  char v7 = *(unsigned char *)(v0 + 1360);
  *(unsigned char *)(v0 + 658) = v7;
  *(unsigned char *)(v0 + 1992) = v7;
  *(void *)(v0 + 1824) = *(void *)(v0 + 1368);
  char v8 = *(unsigned char *)(v0 + 1376);
  *(unsigned char *)(v0 + 659) = v8;
  *(unsigned char *)(v0 + 1984) = v8;
  *(unsigned char *)(v0 + 660) = *(unsigned char *)(v0 + 1377);
  *(void *)(v0 + 1832) = *(void *)(v0 + 1384);
  char v9 = *(unsigned char *)(v0 + 1392);
  *(unsigned char *)(v0 + 661) = v9;
  *(unsigned char *)(v0 + 1968) = v9;
  *(void *)(v0 + 1840) = *(void *)(v0 + 1400);
  char v10 = *(unsigned char *)(v0 + 1408);
  *(unsigned char *)(v0 + 662) = v10;
  *(unsigned char *)(v0 + 1976) = v10;
  *(unsigned char *)(v0 + 663) = *(unsigned char *)(v0 + 1409);
  *(unsigned char *)(v0 + 874) = *(unsigned char *)(v0 + 1410);
  *(void *)(v0 + 1848) = *(void *)(v0 + 1416);
  char v11 = *(unsigned char *)(v0 + 1424);
  *(unsigned char *)(v0 + 875) = v11;
  *(unsigned char *)(v0 + 2000) = v11;
  *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 1432);
  *(unsigned char *)(v0 + 876) = *(unsigned char *)(v0 + 1448);
  sub_10008A550(v2 + 344, v0 + 1584);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Date.now.getter();
  sub_10005CBFC(v5, v20, v4, v22, v3, v6, v21, v1, v0 + 1456, v0 + 1584);
  *(void *)(v0 + 1872) = *(void *)(v2 + 32);
  uint64_t v12 = *(void **)(v2 + 40);
  *(void *)(v0 + 1880) = v12;
  uint64_t v13 = (_OWORD *)swift_allocObject();
  *(void *)(v0 + 1888) = v13;
  long long v14 = *(_OWORD *)(v0 + 1536);
  v13[5] = *(_OWORD *)(v0 + 1520);
  v13[6] = v14;
  long long v15 = *(_OWORD *)(v0 + 1568);
  v13[7] = *(_OWORD *)(v0 + 1552);
  unsigned char v13[8] = v15;
  long long v16 = *(_OWORD *)(v0 + 1472);
  v13[1] = *(_OWORD *)(v0 + 1456);
  void v13[2] = v16;
  long long v17 = *(_OWORD *)(v0 + 1504);
  v13[3] = *(_OWORD *)(v0 + 1488);
  void v13[4] = v17;
  swift_bridgeObjectRetain();
  v12;
  sub_10005D5A0(v0 + 1456);
  long long v23 = (uint64_t (*)(void))((char *)&dword_1001E4840 + dword_1001E4840);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 1896) = v18;
  void *v18 = v0;
  v18[1] = sub_1000EC0CC;
  return v23();
}

uint64_t sub_1000EC0CC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1904) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 1880);
  swift_release();
  if (v0)
  {
    sub_10005D5D8(v2 + 1456);
    swift_bridgeObjectRelease();

    uint64_t v4 = sub_1000ECBEC;
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v4 = sub_1000EC22C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EC22C()
{
  char v1 = *(unsigned char *)(v0 + 229);
  uint64_t v2 = *(void *)(v0 + 1512);
  uint64_t v3 = *(void *)(v0 + 1520);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 1912) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000EC2F0;
  uint64_t v5 = *(void *)(v0 + 1672);
  uint64_t v6 = *(void *)(v0 + 1664);
  uint64_t v7 = *(void *)(v0 + 1640);
  char v8 = *(unsigned char *)(v0 + 228);
  return sub_1000ED728(v7, v8, v6, v5, v2, v3, v1 & 1);
}

uint64_t sub_1000EC2F0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 1920) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000ECF84, 0, 0);
  }
  else
  {
    sub_10005D5D8(v2 + 1456);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 1928) = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1000EC464;
    return sub_1000EFC6C();
  }
}

uint64_t sub_1000EC464()
{
  *(void *)(*(void *)v1 + 1936) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000ED324;
  }
  else {
    uint64_t v2 = sub_1000EC578;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EC578()
{
  char v28 = *(unsigned char *)(v0 + 876);
  uint64_t v26 = *(void *)(v0 + 1856);
  uint64_t v27 = *(void *)(v0 + 1864);
  char v25 = *(unsigned char *)(v0 + 875);
  uint64_t v24 = *(void *)(v0 + 1848);
  __int16 v22 = *(_WORD *)(v0 + 662);
  char v23 = *(unsigned char *)(v0 + 874);
  uint64_t v21 = *(void *)(v0 + 1840);
  char v20 = *(unsigned char *)(v0 + 661);
  uint64_t v19 = *(void *)(v0 + 1832);
  __int16 v18 = *(_WORD *)(v0 + 659);
  uint64_t v17 = *(void *)(v0 + 1824);
  char v16 = *(unsigned char *)(v0 + 658);
  uint64_t v15 = *(void *)(v0 + 1816);
  __int16 v14 = *(_WORD *)(v0 + 226);
  __int16 v13 = *(_WORD *)(v0 + 446);
  uint64_t v12 = *(void *)(v0 + 1808);
  long long v10 = *(_OWORD *)(v0 + 1776);
  long long v11 = *(_OWORD *)(v0 + 1792);
  long long v8 = *(_OWORD *)(v0 + 1744);
  long long v9 = *(_OWORD *)(v0 + 1760);
  int v1 = *(_DWORD *)(v0 + 442);
  __int16 v2 = *(_WORD *)(v0 + 230);
  uint64_t v3 = sub_100012D78((void *)(*(void *)(v0 + 1680) + 472), *(void *)(*(void *)(v0 + 1680) + 496));
  *(_WORD *)(v0 + 880) = v2;
  *(_DWORD *)(v0 + 882) = *(_DWORD *)(v0 + 1266);
  *(_WORD *)(v0 + 886) = *(_WORD *)(v0 + 1270);
  *(_OWORD *)(v0 + 888) = v8;
  *(_OWORD *)(v0 + 904) = v9;
  *(_OWORD *)(v0 + 920) = v10;
  *(_OWORD *)(v0 + 936) = v11;
  *(void *)(v0 + 952) = v12;
  *(_DWORD *)(v0 + 960) = v1;
  *(_WORD *)(v0 + 964) = v13;
  *(_WORD *)(v0 + 966) = v14;
  *(void *)(v0 + 968) = v15;
  *(unsigned char *)(v0 + 976) = v16;
  int v4 = *(_DWORD *)(v0 + 1361);
  *(_DWORD *)(v0 + 980) = *(_DWORD *)(v0 + 1364);
  *(_DWORD *)(v0 + 977) = v4;
  *(void *)(v0 + 984) = v17;
  *(_WORD *)(v0 + 992) = v18;
  *(_DWORD *)(v0 + 994) = *(_DWORD *)(v0 + 1378);
  *(_WORD *)(v0 + 998) = *(_WORD *)(v0 + 1382);
  *(void *)(v0 + 1000) = v19;
  *(unsigned char *)(v0 + 1008) = v20;
  *(_DWORD *)(v0 + 1009) = *(_DWORD *)(v0 + 1393);
  *(_DWORD *)(v0 + 1012) = *(_DWORD *)(v0 + 1396);
  *(void *)(v0 + 1016) = v21;
  *(_WORD *)(v0 + 1024) = v22;
  *(unsigned char *)(v0 + 1026) = v23;
  int v5 = *(_DWORD *)(v0 + 1411);
  *(unsigned char *)(v0 + 1031) = *(unsigned char *)(v0 + 1415);
  *(_DWORD *)(v0 + 1027) = v5;
  *(void *)(v0 + 1032) = v24;
  *(unsigned char *)(v0 + 1040) = v25;
  *(_DWORD *)(v0 + 1044) = *(_DWORD *)(v0 + 1428);
  *(_DWORD *)(v0 + 1041) = *(_DWORD *)(v0 + 1425);
  *(void *)(v0 + 1048) = v26;
  *(void *)(v0 + 1056) = v27;
  *(unsigned char *)(v0 + 1064) = v28;
  uint64_t v6 = *v3;
  *(void *)(v0 + 1944) = *v3;
  return _swift_task_switch(sub_1000EC824, v6, 0);
}

uint64_t sub_1000EC824()
{
  uint64_t v1 = *(void *)(v0 + 1728);
  uint64_t v2 = *(void *)(v0 + 1720);
  uint64_t v3 = *(void *)(v0 + 1712);
  uint64_t v4 = *(void *)(v0 + 1656);
  uint64_t v5 = *(void *)(v0 + 1648);
  long long v6 = *(_OWORD *)(v0 + 1024);
  *(_OWORD *)(v0 + 792) = *(_OWORD *)(v0 + 1008);
  *(_OWORD *)(v0 + 808) = v6;
  *(_OWORD *)(v0 + 824) = *(_OWORD *)(v0 + 1040);
  long long v7 = *(_OWORD *)(v0 + 960);
  *(_OWORD *)(v0 + 728) = *(_OWORD *)(v0 + 944);
  *(_OWORD *)(v0 + 744) = v7;
  long long v8 = *(_OWORD *)(v0 + 992);
  *(_OWORD *)(v0 + 760) = *(_OWORD *)(v0 + 976);
  *(_OWORD *)(v0 + 776) = v8;
  long long v9 = *(_OWORD *)(v0 + 896);
  *(_OWORD *)(v0 + 664) = *(_OWORD *)(v0 + 880);
  *(_OWORD *)(v0 + 680) = v9;
  long long v10 = *(_OWORD *)(v0 + 928);
  *(_OWORD *)(v0 + 696) = *(_OWORD *)(v0 + 912);
  *(_OWORD *)(v0 + 712) = v10;
  *(_OWORD *)(v0 + 833) = *(_OWORD *)(v0 + 1049);
  *(void *)(v0 + 856) = v5;
  *(void *)(v0 + 864) = v4;
  *(_WORD *)(v0 + 872) = 257;
  sub_10003675C(v0 + 664);
  sub_1000367C8(v0 + 664, v0 + 16);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 880);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 880);
  return _swift_task_switch(sub_1000EC974, 0, 0);
}

uint64_t sub_1000EC974()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EC9F0()
{
  uint64_t v1 = *(void *)(v0 + 1728);
  uint64_t v2 = *(void *)(v0 + 1720);
  uint64_t v3 = *(void *)(v0 + 1712);
  uint64_t v4 = *(void *)(v0 + 1656);
  uint64_t v5 = *(void *)(v0 + 1648);
  long long v6 = *(_OWORD *)(v0 + 1216);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 1200);
  *(_OWORD *)(v0 + 376) = v6;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 1232);
  long long v7 = *(_OWORD *)(v0 + 1152);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 1136);
  *(_OWORD *)(v0 + 312) = v7;
  long long v8 = *(_OWORD *)(v0 + 1184);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 1168);
  *(_OWORD *)(v0 + 344) = v8;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 1072);
  *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 1088);
  long long v9 = *(_OWORD *)(v0 + 1120);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 1104);
  *(_OWORD *)(v0 + 280) = v9;
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 1241);
  *(void *)(v0 + 424) = v5;
  *(void *)(v0 + 432) = v4;
  *(_WORD *)(v0 + 440) = 257;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 448);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 1072);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1072);
  return _swift_task_switch(sub_1000ECB54, 0, 0);
}

uint64_t sub_1000ECB54()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000ECBEC()
{
  uint64_t v1 = *(void *)(v0 + 1904);
  *(void *)(v0 + 1952) = v1;
  uint64_t v2 = *(void *)(v0 + 1704);
  uint64_t v3 = *(void *)(v0 + 1696);
  uint64_t v4 = *(void *)(v0 + 1688);
  uint64_t v5 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  long long v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    long long v8 = (uint8_t *)swift_slowAlloc();
    long long v9 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1632) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Creation of ghostback failed %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v6;
  char v47 = *(unsigned char *)(v0 + 876);
  uint64_t v45 = *(void *)(v0 + 1856);
  uint64_t v46 = *(void *)(v0 + 1864);
  uint64_t v44 = *(void *)(v0 + 1848);
  char v42 = *(unsigned char *)(v0 + 663);
  char v43 = *(unsigned char *)(v0 + 874);
  uint64_t v40 = *(void *)(v0 + 1832);
  uint64_t v41 = *(void *)(v0 + 1840);
  char v39 = *(unsigned char *)(v0 + 660);
  uint64_t v37 = *(void *)(v0 + 1816);
  uint64_t v38 = *(void *)(v0 + 1824);
  __int16 v36 = *(_WORD *)(v0 + 446);
  uint64_t v35 = *(void *)(v0 + 1808);
  long long v33 = *(_OWORD *)(v0 + 1776);
  long long v34 = *(_OWORD *)(v0 + 1792);
  __int16 v32 = *(_WORD *)(v0 + 230);
  uint64_t v12 = *(void *)(v0 + 1704);
  uint64_t v13 = *(void *)(v0 + 1696);
  uint64_t v14 = *(void *)(v0 + 1688);
  uint64_t v15 = *(void *)(v0 + 1680);
  int v31 = *(_DWORD *)(v0 + 442);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  uint64_t v16 = sub_100094708(v1);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v23 = sub_100012D78((void *)(v15 + 472), *(void *)(v15 + 496));
  char v24 = *(unsigned char *)(v0 + 1992);
  char v25 = *(unsigned char *)(v0 + 1984);
  char v26 = *(unsigned char *)(v0 + 1968);
  char v27 = *(unsigned char *)(v0 + 1976);
  char v28 = *(unsigned char *)(v0 + 2000);
  *(_WORD *)(v0 + 1072) = v32;
  *(void *)(v0 + 1080) = v16;
  *(void *)(v0 + 1088) = v18;
  *(void *)(v0 + 1096) = v20;
  *(void *)(v0 + 1104) = v22;
  *(_OWORD *)(v0 + 1112) = v33;
  *(_OWORD *)(v0 + 1128) = v34;
  *(void *)(v0 + 1144) = v35;
  *(_DWORD *)(v0 + 1152) = v31;
  *(_WORD *)(v0 + 1156) = v36;
  *(void *)(v0 + 1160) = v37;
  *(unsigned char *)(v0 + 1168) = v24;
  *(void *)(v0 + 1176) = v38;
  *(unsigned char *)(v0 + 1184) = v25;
  *(unsigned char *)(v0 + 1185) = v39;
  *(void *)(v0 + 1192) = v40;
  *(unsigned char *)(v0 + 1200) = v26;
  *(void *)(v0 + 1208) = v41;
  *(unsigned char *)(v0 + 1216) = v27;
  *(unsigned char *)(v0 + 1217) = v42;
  *(unsigned char *)(v0 + 1218) = v43;
  *(void *)(v0 + 1224) = v44;
  *(unsigned char *)(v0 + 1232) = v28;
  *(void *)(v0 + 1240) = v45;
  *(void *)(v0 + 1248) = v46;
  *(unsigned char *)(v0 + 1256) = v47;
  uint64_t v29 = *v23;
  *(void *)(v0 + 1960) = *v23;
  return _swift_task_switch(sub_1000EC9F0, v29, 0);
}

uint64_t sub_1000ECF84()
{
  sub_10005D5D8(v0 + 1456);
  uint64_t v1 = *(void *)(v0 + 1920);
  *(void *)(v0 + 1952) = v1;
  uint64_t v2 = *(void *)(v0 + 1704);
  uint64_t v3 = *(void *)(v0 + 1696);
  uint64_t v4 = *(void *)(v0 + 1688);
  uint64_t v5 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  long long v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    long long v8 = (uint8_t *)swift_slowAlloc();
    long long v9 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1632) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Creation of ghostback failed %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v6;
  char v47 = *(unsigned char *)(v0 + 876);
  uint64_t v45 = *(void *)(v0 + 1856);
  uint64_t v46 = *(void *)(v0 + 1864);
  uint64_t v44 = *(void *)(v0 + 1848);
  char v42 = *(unsigned char *)(v0 + 663);
  char v43 = *(unsigned char *)(v0 + 874);
  uint64_t v40 = *(void *)(v0 + 1832);
  uint64_t v41 = *(void *)(v0 + 1840);
  char v39 = *(unsigned char *)(v0 + 660);
  uint64_t v37 = *(void *)(v0 + 1816);
  uint64_t v38 = *(void *)(v0 + 1824);
  __int16 v36 = *(_WORD *)(v0 + 446);
  uint64_t v35 = *(void *)(v0 + 1808);
  long long v33 = *(_OWORD *)(v0 + 1776);
  long long v34 = *(_OWORD *)(v0 + 1792);
  __int16 v32 = *(_WORD *)(v0 + 230);
  uint64_t v12 = *(void *)(v0 + 1704);
  uint64_t v13 = *(void *)(v0 + 1696);
  uint64_t v14 = *(void *)(v0 + 1688);
  uint64_t v15 = *(void *)(v0 + 1680);
  int v31 = *(_DWORD *)(v0 + 442);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  uint64_t v16 = sub_100094708(v1);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v23 = sub_100012D78((void *)(v15 + 472), *(void *)(v15 + 496));
  char v24 = *(unsigned char *)(v0 + 1992);
  char v25 = *(unsigned char *)(v0 + 1984);
  char v26 = *(unsigned char *)(v0 + 1968);
  char v27 = *(unsigned char *)(v0 + 1976);
  char v28 = *(unsigned char *)(v0 + 2000);
  *(_WORD *)(v0 + 1072) = v32;
  *(void *)(v0 + 1080) = v16;
  *(void *)(v0 + 1088) = v18;
  *(void *)(v0 + 1096) = v20;
  *(void *)(v0 + 1104) = v22;
  *(_OWORD *)(v0 + 1112) = v33;
  *(_OWORD *)(v0 + 1128) = v34;
  *(void *)(v0 + 1144) = v35;
  *(_DWORD *)(v0 + 1152) = v31;
  *(_WORD *)(v0 + 1156) = v36;
  *(void *)(v0 + 1160) = v37;
  *(unsigned char *)(v0 + 1168) = v24;
  *(void *)(v0 + 1176) = v38;
  *(unsigned char *)(v0 + 1184) = v25;
  *(unsigned char *)(v0 + 1185) = v39;
  *(void *)(v0 + 1192) = v40;
  *(unsigned char *)(v0 + 1200) = v26;
  *(void *)(v0 + 1208) = v41;
  *(unsigned char *)(v0 + 1216) = v27;
  *(unsigned char *)(v0 + 1217) = v42;
  *(unsigned char *)(v0 + 1218) = v43;
  *(void *)(v0 + 1224) = v44;
  *(unsigned char *)(v0 + 1232) = v28;
  *(void *)(v0 + 1240) = v45;
  *(void *)(v0 + 1248) = v46;
  *(unsigned char *)(v0 + 1256) = v47;
  uint64_t v29 = *v23;
  *(void *)(v0 + 1960) = *v23;
  return _swift_task_switch(sub_1000EC9F0, v29, 0);
}

uint64_t sub_1000ED324()
{
  uint64_t v1 = *(void *)(v0 + 1936);
  *(void *)(v0 + 1952) = v1;
  uint64_t v2 = *(void *)(v0 + 1704);
  uint64_t v3 = *(void *)(v0 + 1696);
  uint64_t v4 = *(void *)(v0 + 1688);
  uint64_t v5 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  long long v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    long long v8 = (uint8_t *)swift_slowAlloc();
    long long v9 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1632) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Creation of ghostback failed %@", v8, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v6;
  char v47 = *(unsigned char *)(v0 + 876);
  uint64_t v45 = *(void *)(v0 + 1856);
  uint64_t v46 = *(void *)(v0 + 1864);
  uint64_t v44 = *(void *)(v0 + 1848);
  char v42 = *(unsigned char *)(v0 + 663);
  char v43 = *(unsigned char *)(v0 + 874);
  uint64_t v40 = *(void *)(v0 + 1832);
  uint64_t v41 = *(void *)(v0 + 1840);
  char v39 = *(unsigned char *)(v0 + 660);
  uint64_t v37 = *(void *)(v0 + 1816);
  uint64_t v38 = *(void *)(v0 + 1824);
  __int16 v36 = *(_WORD *)(v0 + 446);
  uint64_t v35 = *(void *)(v0 + 1808);
  long long v33 = *(_OWORD *)(v0 + 1776);
  long long v34 = *(_OWORD *)(v0 + 1792);
  __int16 v32 = *(_WORD *)(v0 + 230);
  uint64_t v12 = *(void *)(v0 + 1704);
  uint64_t v13 = *(void *)(v0 + 1696);
  uint64_t v14 = *(void *)(v0 + 1688);
  uint64_t v15 = *(void *)(v0 + 1680);
  int v31 = *(_DWORD *)(v0 + 442);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  uint64_t v16 = sub_100094708(v1);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v23 = sub_100012D78((void *)(v15 + 472), *(void *)(v15 + 496));
  char v24 = *(unsigned char *)(v0 + 1992);
  char v25 = *(unsigned char *)(v0 + 1984);
  char v26 = *(unsigned char *)(v0 + 1968);
  char v27 = *(unsigned char *)(v0 + 1976);
  char v28 = *(unsigned char *)(v0 + 2000);
  *(_WORD *)(v0 + 1072) = v32;
  *(void *)(v0 + 1080) = v16;
  *(void *)(v0 + 1088) = v18;
  *(void *)(v0 + 1096) = v20;
  *(void *)(v0 + 1104) = v22;
  *(_OWORD *)(v0 + 1112) = v33;
  *(_OWORD *)(v0 + 1128) = v34;
  *(void *)(v0 + 1144) = v35;
  *(_DWORD *)(v0 + 1152) = v31;
  *(_WORD *)(v0 + 1156) = v36;
  *(void *)(v0 + 1160) = v37;
  *(unsigned char *)(v0 + 1168) = v24;
  *(void *)(v0 + 1176) = v38;
  *(unsigned char *)(v0 + 1184) = v25;
  *(unsigned char *)(v0 + 1185) = v39;
  *(void *)(v0 + 1192) = v40;
  *(unsigned char *)(v0 + 1200) = v26;
  *(void *)(v0 + 1208) = v41;
  *(unsigned char *)(v0 + 1216) = v27;
  *(unsigned char *)(v0 + 1217) = v42;
  *(unsigned char *)(v0 + 1218) = v43;
  *(void *)(v0 + 1224) = v44;
  *(unsigned char *)(v0 + 1232) = v28;
  *(void *)(v0 + 1240) = v45;
  *(void *)(v0 + 1248) = v46;
  *(unsigned char *)(v0 + 1256) = v47;
  uint64_t v29 = *v23;
  *(void *)(v0 + 1960) = *v23;
  return _swift_task_switch(sub_1000EC9F0, v29, 0);
}

void sub_1000ED6BC(void *a1, long long *a2)
{
  id v4 = [a1 connection];
  id v5 = sub_1000D7728(a2, v4);

  if (!v2) {
}
  }

uint64_t sub_1000ED728(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v8 + 850) = a7;
  *(void *)(v8 + 456) = a6;
  *(void *)(v8 + 464) = v7;
  *(void *)(v8 + 440) = a4;
  *(void *)(v8 + 448) = a5;
  *(unsigned char *)(v8 + 849) = a2;
  *(void *)(v8 + 424) = a1;
  *(void *)(v8 + 432) = a3;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 472) = v9;
  *(void *)(v8 + 480) = *(void *)(v9 - 8);
  *(void *)(v8 + 488) = swift_task_alloc();
  *(void *)(v8 + 496) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 504) = v10;
  *(void *)(v8 + 512) = *(void *)(v10 - 8);
  *(void *)(v8 + 520) = swift_task_alloc();
  *(void *)(v8 + 528) = sub_100012960(&qword_1001E1380);
  *(void *)(v8 + 536) = swift_task_alloc();
  return _swift_task_switch(sub_1000ED898, 0, 0);
}

uint64_t sub_1000ED898()
{
  if (*(void *)(v0 + 432) == 0xD000000000000012 && *(void *)(v0 + 440) == 0x8000000100185D10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (*(unsigned char *)(v0 + 849) && *(unsigned char *)(v0 + 849) != 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v1 & 1) == 0)
      {
        id v2 = [self sharedInstance];
        *(void *)(v0 + 608) = v2;
        Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
        *(void *)(v0 + 616) = isa;
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 56) = v0 + 368;
        *(void *)(v0 + 24) = sub_1000EE24C;
        uint64_t v4 = swift_continuation_init();
        *(void *)(v0 + 304) = _NSConcreteStackBlock;
        *(void *)(v0 + 312) = 0x40000000;
        *(void *)(v0 + 320) = sub_1000FF968;
        *(void *)(v0 + 328) = &unk_1001C9760;
        *(void *)(v0 + 336) = v4;
        [v2 getImpressionsForApp:isa completionHandler:v0 + 304];
        return _swift_continuation_await(v0 + 16);
      }
    }
  }
  id v5 = *(void **)(v0 + 464);
  uint64_t v6 = *(void *)(v0 + 424);
  char v7 = *(unsigned char *)(v0 + 850) & 1;
  uint64_t v9 = v5[6];
  uint64_t v8 = v5[7];
  *(void *)(v0 + 544) = v8;
  uint64_t v10 = (void *)v5[8];
  *(void *)(v0 + 552) = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 560) = v11;
  *(void *)(v11 + 16) = v6;
  *(unsigned char *)(v11 + 24) = v7;
  uint64_t v15 = (uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4888 + dword_1001E4888);
  swift_bridgeObjectRetain();
  id v12 = v10;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1000EDBB4;
  return v15(sub_1001009A4, v11, v9, v8, v12);
}

uint64_t sub_1000EDBB4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 576) = a1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = *(void **)(v4 + 552);
    swift_release();
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v4 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void **)(v4 + 552);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E16B0 + dword_1001E16B0);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v4 + 584) = v9;
    *uint64_t v9 = v4;
    v9[1] = sub_1000EDDAC;
    uint64_t v10 = *(void *)(v4 + 432);
    uint64_t v11 = *(void *)(v4 + 440);
    uint64_t v12 = *(unsigned __int8 *)(v4 + 849);
    return v13(a1, v12, v10, v11);
  }
}

uint64_t sub_1000EDDAC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 592) = a1;
  *(void *)(v3 + 600) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1000EE1B8;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000EDECC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EDECC()
{
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 592);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *(void *)(v0 + 400) = v2;
  swift_bridgeObjectRetain();
  sub_100012960(&qword_1001E3AE8);
  sub_100103C98(&qword_1001E3AF0, &qword_1001E3AE8, (void (*)(void))sub_1001009BC);
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    swift_release();
    uint64_t v8 = *(void *)(v0 + 592);
    *(_OWORD *)(v0 + 752) = xmmword_10017E6E0;
    *(void *)(v0 + 744) = v5;
    *(void *)(v0 + 736) = v3;
    *(void *)(v0 + 728) = v8;
    uint64_t v10 = *(void *)(v0 + 456);
    uint64_t v9 = *(void **)(v0 + 464);
    uint64_t v11 = *(void *)(v0 + 448);
    uint64_t v12 = *(void *)(v0 + 424);
    *(unsigned char *)(v0 + 848) = 1;
    uint64_t v13 = v9[7];
    uint64_t v19 = v9[6];
    *(void *)(v0 + 768) = v13;
    uint64_t v14 = (void *)v9[8];
    *(void *)(v0 + 776) = v14;
    uint64_t v15 = swift_allocObject();
    *(void *)(v0 + 784) = v15;
    *(void *)(v15 + 16) = 0;
    *(unsigned char *)(v15 + 24) = *(unsigned char *)(v0 + 848);
    *(_DWORD *)(v15 + 25) = *(_DWORD *)(v0 + 297);
    *(_DWORD *)(v15 + 28) = *(_DWORD *)(v0 + 300);
    *(void *)(v15 + 32) = v3;
    *(void *)(v15 + 40) = v5;
    *(_OWORD *)(v15 + 48) = xmmword_10017E6E0;
    *(void *)(v15 + 64) = v12;
    *(void *)(v15 + 72) = v11;
    *(void *)(v15 + 80) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v14;
    sub_10005EA64(v3, v5);
    sub_10005EA64(0, 0xF000000000000000);
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4838
                                                                                       + dword_1001E4838);
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1000EF040;
    return v18((uint64_t)v18, (uint64_t)sub_100100A78, v15, v19, v13, (uint64_t)v16);
  }
}

uint64_t sub_1000EE1B8()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EE24C()
{
  return _swift_task_switch(sub_1000EE32C, 0, 0);
}

uint64_t sub_1000EE32C()
{
  uint64_t v1 = *(void **)(v0 + 616);
  uint64_t v2 = *(void **)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 368);
  unint64_t v4 = *(void *)(v0 + 376);
  *(void *)(v0 + 624) = v3;
  *(void *)(v0 + 632) = v4;

  if (v4 >> 60 == 15)
  {
    unint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v6 = _swiftEmptyArrayStorage[2];
    if (v6)
    {
LABEL_3:
      char v7 = (_OWORD *)(v0 + 80);
      uint64_t v8 = v6 - 1;
      for (uint64_t i = 4; ; i += 28)
      {
        char v10 = *(unsigned char *)(v0 + 850);
        long long v11 = *(_OWORD *)&v5[i + 2];
        *char v7 = *(_OWORD *)&v5[i];
        *(_OWORD *)(v0 + 96) = v11;
        long long v12 = *(_OWORD *)&v5[i + 10];
        long long v14 = *(_OWORD *)&v5[i + 4];
        long long v13 = *(_OWORD *)&v5[i + 6];
        *(_OWORD *)(v0 + 144) = *(_OWORD *)&v5[i + 8];
        *(_OWORD *)(v0 + 160) = v12;
        *(_OWORD *)(v0 + 112) = v14;
        *(_OWORD *)(v0 + 128) = v13;
        long long v15 = *(_OWORD *)&v5[i + 18];
        long long v17 = *(_OWORD *)&v5[i + 12];
        long long v16 = *(_OWORD *)&v5[i + 14];
        *(_OWORD *)(v0 + 208) = *(_OWORD *)&v5[i + 16];
        *(_OWORD *)(v0 + 224) = v15;
        *(_OWORD *)(v0 + 176) = v17;
        *(_OWORD *)(v0 + 192) = v16;
        long long v19 = *(_OWORD *)&v5[i + 22];
        long long v18 = *(_OWORD *)&v5[i + 24];
        long long v20 = *(_OWORD *)&v5[i + 20];
        *(_OWORD *)(v0 + 281) = *(_OWORD *)((char *)&v5[i + 25] + 1);
        *(_OWORD *)(v0 + 256) = v19;
        *(_OWORD *)(v0 + 272) = v18;
        *(_OWORD *)(v0 + 240) = v20;
        int v21 = *(unsigned __int8 *)(v0 + 281);
        if (v10)
        {
          if (v21 == 2)
          {
            sub_100013AE8(v0 + 80);
          }
          else
          {
            if (v21) {
              goto LABEL_15;
            }
            char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_100013AE8(v0 + 80);
            swift_bridgeObjectRelease();
            if ((v22 & 1) == 0) {
              goto LABEL_14;
            }
          }
        }
        else
        {
          if (v21 == 2) {
            goto LABEL_21;
          }
          if ((v21 & 1) == 0)
          {
LABEL_15:
            sub_100013AE8(v0 + 80);
            swift_bridgeObjectRelease();
            goto LABEL_16;
          }
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100013AE8(v0 + 80);
          swift_bridgeObjectRelease();
          if ((v23 & 1) == 0)
          {
LABEL_14:
            sub_100013B74(v0 + 80);
            goto LABEL_21;
          }
        }
LABEL_16:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_10013A6F8(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v25 = _swiftEmptyArrayStorage[2];
        unint64_t v24 = _swiftEmptyArrayStorage[3];
        if (v25 >= v24 >> 1) {
          sub_10013A6F8(v24 > 1, v25 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v25 + 1;
        char v26 = &_swiftEmptyArrayStorage[28 * v25];
        long long v27 = *(_OWORD *)(v0 + 96);
        v26[2] = *v7;
        void v26[3] = v27;
        long long v28 = *(_OWORD *)(v0 + 112);
        long long v29 = *(_OWORD *)(v0 + 128);
        long long v30 = *(_OWORD *)(v0 + 160);
        v26[6] = *(_OWORD *)(v0 + 144);
        v26[7] = v30;
        v26[4] = v28;
        v26[5] = v29;
        long long v31 = *(_OWORD *)(v0 + 176);
        long long v32 = *(_OWORD *)(v0 + 192);
        long long v33 = *(_OWORD *)(v0 + 224);
        v26[10] = *(_OWORD *)(v0 + 208);
        v26[11] = v33;
        v26[8] = v31;
        v26[9] = v32;
        long long v34 = *(_OWORD *)(v0 + 240);
        long long v35 = *(_OWORD *)(v0 + 256);
        long long v36 = *(_OWORD *)(v0 + 272);
        *(_OWORD *)((char *)v26 + 233) = *(_OWORD *)(v0 + 281);
        v26[13] = v35;
        v26[14] = v36;
        v26[12] = v34;
LABEL_21:
        if (!v8) {
          break;
        }
        --v8;
      }
    }
  }
  else
  {
    uint64_t v37 = v0 + 392;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    sub_10003CF30(v3, v4);
    JSONDecoder.init()();
    sub_100012960(&qword_1001E3B00);
    sub_100103C98(&qword_1001E3B18, &qword_1001E3B00, (void (*)(void))sub_100100B98);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10005E9FC(v3, v4);
    swift_release();
    unint64_t v5 = *(void **)v37;
    uint64_t v6 = *(void *)(*(void *)v37 + 16);
    if (v6) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 640) = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void **)(v0 + 464);
  uint64_t v39 = *(void *)(v0 + 424);
  char v40 = *(unsigned char *)(v0 + 850) & 1;
  uint64_t v42 = v38[6];
  uint64_t v41 = v38[7];
  *(void *)(v0 + 648) = v41;
  char v43 = (void *)v38[8];
  *(void *)(v0 + 656) = v43;
  uint64_t v44 = swift_allocObject();
  *(void *)(v0 + 664) = v44;
  *(void *)(v44 + 16) = v39;
  *(unsigned char *)(v44 + 24) = v40;
  uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4888 + dword_1001E4888);
  swift_bridgeObjectRetain();
  id v45 = v43;
  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 672) = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_1000EE838;
  return v48((uint64_t)sub_1001009A4, v44, v42, v41, (uint64_t)v45);
}

uint64_t sub_1000EE838(uint64_t a1)
{
  unint64_t v4 = (void *)*v2;
  unint64_t v5 = (void *)*v2;
  v4[85] = a1;
  v4[86] = v1;
  swift_task_dealloc();
  uint64_t v6 = (void *)v4[82];
  uint64_t v7 = v4[80];
  swift_release();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();

    return _swift_task_switch(sub_1000EFA58, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();

    long long v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E1688 + dword_1001E1688);
    uint64_t v8 = (void *)swift_task_alloc();
    v4[87] = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_1000EEA60;
    uint64_t v9 = v4[54];
    uint64_t v10 = v4[55];
    return v12(a1, v7, v9, v10);
  }
}

uint64_t sub_1000EEA60(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)*v3;
  v4[88] = a1;
  v4[89] = a2;
  v4[90] = v2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v5 = sub_1000EEF90;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v5 = sub_1000EEB90;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000EEB90()
{
  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 704);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *(void *)(v0 + 408) = v2;
  swift_bridgeObjectRetain();
  sub_100012960(&qword_1001E3AE8);
  sub_100103C98(&qword_1001E3AF0, &qword_1001E3AE8, (void (*)(void))sub_1001009BC);
  uint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v5 = *(void *)(v0 + 712);
  if (v1)
  {
    unint64_t v6 = *(void *)(v0 + 632);
    uint64_t v7 = *(void *)(v0 + 624);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_10005E9FC(v7, v6);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    unint64_t v8 = v3;
    swift_bridgeObjectRelease();
    swift_release();
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)(v0 + 416) = v5;
    sub_100012960(&qword_1001E3B00);
    sub_100103C98(&qword_1001E3B08, &qword_1001E3B00, (void (*)(void))sub_100100B44);
    uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v13 = v9;
    unint64_t v14 = *(void *)(v0 + 632);
    uint64_t v15 = *(void *)(v0 + 624);
    swift_bridgeObjectRelease();
    sub_10005E9FC(v15, v14);
    swift_release();
    uint64_t v16 = *(void *)(v0 + 704);
    *(void *)(v0 + 760) = v13;
    *(void *)(v0 + 752) = v10;
    *(void *)(v0 + 744) = v8;
    *(void *)(v0 + 736) = v4;
    *(void *)(v0 + 728) = v16;
    uint64_t v18 = *(void *)(v0 + 456);
    uint64_t v17 = *(void *)(v0 + 464);
    uint64_t v22 = *(void *)(v0 + 424);
    uint64_t v23 = *(void *)(v0 + 448);
    *(unsigned char *)(v0 + 848) = 1;
    *(void *)(v0 + 768) = *(void *)(v17 + 56);
    long long v19 = *(void **)(v17 + 64);
    *(void *)(v0 + 776) = v19;
    uint64_t v20 = swift_allocObject();
    *(void *)(v0 + 784) = v20;
    *(void *)(v20 + 16) = 0;
    *(unsigned char *)(v20 + 24) = *(unsigned char *)(v0 + 848);
    *(_DWORD *)(v20 + 25) = *(_DWORD *)(v0 + 297);
    *(_DWORD *)(v20 + 28) = *(_DWORD *)(v0 + 300);
    *(void *)(v20 + 32) = v4;
    *(void *)(v20 + 40) = v8;
    *(void *)(v20 + 48) = v10;
    *(void *)(v20 + 56) = v13;
    *(void *)(v20 + 64) = v22;
    *(void *)(v20 + 72) = v23;
    *(void *)(v20 + 80) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19;
    sub_10005EA64(v4, v8);
    sub_10005EA64(v10, v13);
    unint64_t v24 = (uint64_t (*)(void))((char *)&dword_1001E4838 + dword_1001E4838);
    swift_bridgeObjectRetain();
    int v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v21;
    void *v21 = v0;
    v21[1] = sub_1000EF040;
    return v24();
  }
}

uint64_t sub_1000EEF90()
{
  sub_10005E9FC(v0[78], v0[79]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000EF040()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 800) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 776);
  swift_release();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();

    uint64_t v4 = sub_1000EFAF0;
  }
  else
  {

    uint64_t v4 = sub_1000EF1CC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EF1CC()
{
  unint64_t v59 = v0;
  uint64_t v1 = v0[91];
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2;
  v0[101] = v2;
  *(void *)(v2 + 16) = _swiftEmptyArrayStorage;
  uint64_t v50 = (unint64_t *)(v2 + 16);
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    uint64_t v47 = v2;
    uint64_t v5 = v0[60];
    uint64_t v6 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v7 = (void (**)(void, void))(v5 + 8);
    uint64_t v48 = v0[64];
    uint64_t v49 = v0[66];
    uint64_t v8 = v0[100];
    unint64_t v55 = type metadata accessor for AppImpressionPayload();
    unint64_t v53 = sub_100036B14();
    uint64_t v51 = sub_100100A94(&qword_1001E13C0, (void (*)(uint64_t))type metadata accessor for AppImpressionPayload);
    unint64_t v9 = (unint64_t *)(v1 + 40);
    do
    {
      uint64_t v10 = v0[67];
      uint64_t v11 = *(v9 - 1);
      unint64_t v12 = *v9;
      swift_bridgeObjectRetain();
      JWS.init(compactJWS:)(v11, v12, v55, v53, v51, v10);
      if (v8)
      {
        uint64_t v13 = v0[61];
        uint64_t v14 = v0[59];
        uint64_t v15 = Logger.postback.unsafeMutableAddressor();
        (*v6)(v13, v15, v14);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = swift_slowAlloc();
          long long v19 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = 138412290;
          swift_errorRetain();
          uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v18 + 4) = v20;
          *long long v19 = v20;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to get JWS impression: %@", (uint8_t *)v18, 0xCu);
          sub_100012960(&qword_1001E0B30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        (*v7)(v0[61], v0[59]);
      }
      else
      {
        (*(void (**)(void, void, void))(v48 + 16))(v0[65], v0[67] + *(int *)(v49 + 52), v0[63]);
        unint64_t v21 = *v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          unint64_t v21 = sub_100139EAC(0, *(void *)(v21 + 16) + 1, 1, v21);
          unint64_t *v50 = v21;
        }
        unint64_t v23 = *(void *)(v21 + 16);
        unint64_t v22 = *(void *)(v21 + 24);
        if (v23 >= v22 >> 1)
        {
          unint64_t v21 = sub_100139EAC(v22 > 1, v23 + 1, 1, v21);
          unint64_t *v50 = v21;
        }
        uint64_t v24 = v0[67];
        uint64_t v25 = v0[65];
        uint64_t v26 = v0[63];
        *(void *)(v21 + 16) = v23 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 32))(v21+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v23, v25, v26);
        sub_100019960(v24, &qword_1001E1380);
      }
      uint64_t v8 = 0;
      v9 += 8;
      --v4;
    }
    while (v4);
    uint64_t v3 = v47;
  }
  uint64_t v27 = v0[62];
  uint64_t v28 = v0[59];
  uint64_t v29 = v0[60];
  swift_bridgeObjectRelease();
  uint64_t v30 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v30, v28);
  swift_retain_n();
  long long v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v52 = v0[60];
    uint64_t v54 = v0[59];
    uint64_t v56 = v0[62];
    long long v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)long long v33 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v34 = Array.description.getter();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    v0[48] = sub_100147668(v34, v36, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Deleting impressions: %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v56, v54);
  }
  else
  {
    uint64_t v37 = v0[62];
    uint64_t v38 = v0[59];
    uint64_t v39 = v0[60];
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
  }
  char v40 = (void *)v0[58];
  uint64_t v42 = v40[6];
  uint64_t v41 = v40[7];
  v0[102] = v41;
  char v43 = (void *)v40[8];
  v0[103] = v43;
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4838
                                                                                     + dword_1001E4838);
  swift_retain();
  swift_bridgeObjectRetain();
  id v44 = v43;
  id v45 = (void *)swift_task_alloc();
  v0[104] = v45;
  *id v45 = v0;
  v45[1] = sub_1000EF810;
  return v57((uint64_t)v57, (uint64_t)sub_100100ADC, v3, v42, v41, (uint64_t)v44);
}

uint64_t sub_1000EF810()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 840) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 824);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000EFBA8;
  }
  else {
    uint64_t v4 = sub_1000EF980;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EF980()
{
  unint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  sub_10005E9FC(v0[92], v0[93]);
  sub_10005E9FC(v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000EFA58()
{
  sub_10005E9FC(v0[78], v0[79]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000EFAF0()
{
  unint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  sub_10005E9FC(v0[92], v0[93]);
  sub_10005E9FC(v2, v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000EFBA8()
{
  unint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  sub_10005E9FC(v0[92], v0[93]);
  sub_10005E9FC(v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000EFC6C()
{
  v1[25] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[26] = v2;
  v1[27] = *(void *)(v2 - 8);
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = type metadata accessor for BarktivityType();
  v1[32] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v1[33] = v3;
  v1[34] = *(void *)(v3 - 8);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  return _swift_task_switch(sub_1000EFDF0, 0, 0);
}

uint64_t sub_1000EFDF0()
{
  unint64_t v1 = (void *)v0[25];
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  v0[38] = v2;
  uint64_t v4 = (void *)v1[5];
  v0[39] = v4;
  uint64_t v8 = (char *)&dword_1001E4848 + dword_1001E4848;
  swift_bridgeObjectRetain();
  id v5 = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[40] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000EFEE8;
  return ((uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), void, uint64_t, uint64_t, id))v8)(sub_1000FF3C8, 0, v3, v2, v5);
}

uint64_t sub_1000EFEE8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 328) = a1;
  *(void *)(v4 + 336) = v1;
  swift_task_dealloc();
  id v5 = *(void **)(v3 + 312);
  swift_bridgeObjectRelease();

  if (v1) {
    uint64_t v6 = sub_1000F0828;
  }
  else {
    uint64_t v6 = sub_1000F003C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F003C()
{
  uint64_t v73 = v0;
  uint64_t v1 = *(void *)(v0 + 328);
  if (!*(void *)(v1 + 16))
  {
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v15 = *(void *)(v0 + 216);
    swift_bridgeObjectRelease();
    uint64_t v16 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v16, v14);
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      long long v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No ghostbacks found to schedule for.", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = *(void *)(v0 + 232);
    uint64_t v21 = *(void *)(v0 + 208);
    uint64_t v22 = *(void *)(v0 + 216);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    goto LABEL_23;
  }
  long long v2 = *(_OWORD *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 32);
  long long v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v0 + 64) = v2;
  *(_OWORD *)(v0 + 16) = v4;
  *(_OWORD *)(v0 + 32) = v3;
  long long v5 = *(_OWORD *)(v1 + 144);
  long long v7 = *(_OWORD *)(v1 + 96);
  long long v6 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v0 + 128) = v5;
  *(_OWORD *)(v0 + 80) = v7;
  *(_OWORD *)(v0 + 96) = v6;
  sub_10005D5A0(v0 + 16);
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void *)(v0 + 136);
  static Date.now.getter();
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v11 = v10 * 1000.0;
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 <= -1.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= 1.84467441e19)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  unint64_t v12 = (unint64_t)v11;
  long long v71 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 272) + 8);
  v71(*(void *)(v0 + 288), *(void *)(v0 + 264));
  long long v69 = (void *)(v0 + 144);
  if (v8 <= v12) {
    static Date.now.getter();
  }
  else {
    Date.init(timeIntervalSince1970:)();
  }
  uint64_t v23 = *(void *)(v0 + 200);
  uint64_t v66 = *(void *)(v0 + 336);
  uint64_t v24 = *(void *)(v0 + 296);
  uint64_t v25 = *(void *)(v0 + 264);
  uint64_t v26 = *(void *)(v0 + 272);
  uint64_t v27 = *(void *)(v0 + 256);
  int v28 = *(unsigned __int8 *)(v0 + 89);
  v72[0] = 0;
  v72[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  sub_10005D5D8(v0 + 16);
  if (v28) {
    double v29 = 7200.0;
  }
  else {
    double v29 = 60.0;
  }
  sub_100012D78((void *)(v23 + 120), *(void *)(v23 + 144));
  *(void *)(v0 + 168) = &type metadata for DelayedWoof;
  *(void *)(v0 + 176) = &off_1001C4410;
  uint64_t v30 = swift_allocObject();
  *(void *)(v0 + 144) = v30;
  *(void *)(v30 + 16) = 0xD000000000000028;
  *(void *)(v30 + 24) = 0x8000000100186BE0;
  *(void *)(v30 + 32) = 2;
  *(_WORD *)(v30 + 40) = 1;
  *(unsigned char *)(v30 + 42) = 1;
  *(double *)(v30 + 48) = v29;
  *(void *)(v30 + 56) = 0;
  long long v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  v31(v27, v24, v25);
  swift_storeEnumTagMultiPayload();
  sub_10008B480(v69, v27);
  uint64_t v32 = *(void *)(v0 + 296);
  if (v66)
  {
    uint64_t v33 = *(void *)(v0 + 264);
    sub_100101178(*(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for BarktivityType);
    v71(v32, v33);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v69);
    uint64_t v35 = *(void *)(v0 + 216);
    uint64_t v34 = *(void *)(v0 + 224);
    uint64_t v36 = *(void *)(v0 + 208);
    uint64_t v37 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v34, v37, v36);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      char v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      *(_DWORD *)char v40 = 138412290;
      swift_errorRetain();
      uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 184) = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v41 = v42;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Encountered error while scheduling follow up postback fetch %@", v40, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v60 = v38;
    uint64_t v62 = *(void *)(v0 + 216);
    uint64_t v61 = *(void *)(v0 + 224);
    uint64_t v63 = *(void *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_24;
  }
  uint64_t v43 = *(void *)(v0 + 280);
  uint64_t v67 = *(void *)(v0 + 264);
  uint64_t v44 = *(void *)(v0 + 240);
  uint64_t v45 = *(void *)(v0 + 208);
  uint64_t v46 = *(void *)(v0 + 216);
  sub_100101178(*(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for BarktivityType);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v69);
  uint64_t v47 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v44, v47, v45);
  v31(v43, v32, v67);
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  BOOL v50 = os_log_type_enabled(v48, v49);
  uint64_t v70 = *(void *)(v0 + 296);
  uint64_t v51 = *(void *)(v0 + 280);
  uint64_t v52 = *(void *)(v0 + 264);
  uint64_t v53 = *(void *)(v0 + 240);
  uint64_t v55 = *(void *)(v0 + 208);
  uint64_t v54 = *(void *)(v0 + 216);
  if (v50)
  {
    uint64_t v68 = *(void *)(v0 + 208);
    uint64_t v65 = *(void *)(v0 + 240);
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    v72[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 136315138;
    sub_100100A94(&qword_1001E13A8, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 192) = sub_100147668(v57, v58, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v59 = v71;
    v71(v51, v52);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Scheduling boot follow up for %s", v56, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v65, v68);
  }
  else
  {

    unint64_t v59 = v71;
    v71(v51, v52);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
  }
  v59(v70, v52);
LABEL_23:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
LABEL_24:
  return v64();
}

uint64_t sub_1000F0828()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    unint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[23] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Encountered error while scheduling follow up postback fetch %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  double v10 = v5;
  uint64_t v12 = v0[27];
  uint64_t v11 = v0[28];
  uint64_t v13 = v0[26];

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000F0A68(uint64_t a1)
{
  v2[92] = v1;
  v2[91] = a1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[93] = v3;
  v2[94] = *(void *)(v3 - 8);
  v2[95] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[96] = v4;
  v2[97] = *(void *)(v4 - 8);
  v2[98] = swift_task_alloc();
  v2[99] = swift_task_alloc();
  return _swift_task_switch(sub_1000F0B98, 0, 0);
}

uint64_t sub_1000F0B98()
{
  uint64_t v1 = (void *)v0[92];
  uint64_t v2 = v0[91];
  uint64_t v4 = v1[3];
  uint64_t v3 = v1[4];
  v0[100] = v3;
  long long v5 = (void *)v1[5];
  v0[101] = v5;
  uint64_t v6 = swift_allocObject();
  v0[102] = v6;
  *(void *)(v6 + 16) = v2;
  double v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4848 + dword_1001E4848);
  swift_bridgeObjectRetain();
  id v7 = v5;
  unint64_t v8 = (void *)swift_task_alloc();
  v0[103] = v8;
  *unint64_t v8 = v0;
  v8[1] = sub_1000F0CB8;
  return v10((uint64_t)sub_100100BFC, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000F0CB8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 832) = a1;
  *(void *)(v4 + 840) = v1;
  swift_task_dealloc();
  long long v5 = *(void **)(v3 + 808);
  swift_release();
  swift_bridgeObjectRelease();

  if (v1) {
    uint64_t v6 = sub_1000F306C;
  }
  else {
    uint64_t v6 = sub_1000F0E2C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F0E2C()
{
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 848) = v2;
  if (v2)
  {
    long long v3 = *(_OWORD *)(v1 + 128);
    long long v4 = *(_OWORD *)(v1 + 144);
    long long v5 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v0 + 344) = *(_OWORD *)(v1 + 96);
    long long v6 = *(_OWORD *)(v1 + 32);
    long long v7 = *(_OWORD *)(v1 + 48);
    long long v8 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v0 + 312) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 328) = v8;
    *(_OWORD *)(v0 + 280) = v6;
    *(_OWORD *)(v0 + 296) = v7;
    *(_OWORD *)(v0 + 376) = v3;
    *(_OWORD *)(v0 + 392) = v4;
    *(_OWORD *)(v0 + 360) = v5;
    *(void *)(v0 + 856) = 1;
    uint64_t v9 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 344);
    *(void *)(v0 + 864) = v10;
    sub_10005D5A0(v0 + 280);
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 872) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000F1028;
    return sub_1000F3BFC(v9, v10, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = *(uint64_t **)(v0 + 736);
    uint64_t v14 = *(void *)(v0 + 728);
    uint64_t v16 = *v13;
    uint64_t v15 = v13[1];
    *(void *)(v0 + 888) = v15;
    os_log_type_t v17 = (void *)v13[2];
    *(void *)(v0 + 896) = v17;
    uint64_t v18 = swift_allocObject();
    *(void *)(v0 + 904) = v18;
    *(void *)(v18 + 16) = v14;
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                       + dword_1001E48F8);
    swift_bridgeObjectRetain();
    id v19 = v17;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 912) = v20;
    void *v20 = v0;
    v20[1] = sub_1000F1364;
    return v21((uint64_t)v21, (uint64_t)sub_100100C38, v18, v16, v15, (uint64_t)v19);
  }
}

uint64_t sub_1000F1028()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 880) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v3 = sub_1000F32AC;
  }
  else
  {
    sub_10005D5D8(v2 + 280);
    swift_bridgeObjectRelease();
    long long v3 = sub_1000F1164;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F1164()
{
  uint64_t v1 = *(void *)(v0 + 856);
  if (v1 == *(void *)(v0 + 848))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(uint64_t **)(v0 + 736);
    uint64_t v3 = *(void *)(v0 + 728);
    uint64_t v5 = *v2;
    uint64_t v4 = v2[1];
    *(void *)(v0 + 888) = v4;
    long long v6 = (void *)v2[2];
    *(void *)(v0 + 896) = v6;
    uint64_t v7 = swift_allocObject();
    *(void *)(v0 + 904) = v7;
    *(void *)(v7 + 16) = v3;
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48F8
                                                                                       + dword_1001E48F8);
    swift_bridgeObjectRetain();
    id v8 = v6;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 912) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000F1364;
    return v21((uint64_t)v21, (uint64_t)sub_100100C38, v7, v5, v4, (uint64_t)v8);
  }
  else
  {
    uint64_t v11 = (_OWORD *)(*(void *)(v0 + 832) + (v1 << 7));
    long long v12 = v11[6];
    long long v13 = v11[7];
    long long v14 = v11[9];
    *(_OWORD *)(v0 + 376) = v11[8];
    *(_OWORD *)(v0 + 392) = v14;
    *(_OWORD *)(v0 + 344) = v12;
    *(_OWORD *)(v0 + 360) = v13;
    long long v15 = v11[2];
    long long v16 = v11[3];
    long long v17 = v11[5];
    *(_OWORD *)(v0 + 312) = v11[4];
    *(_OWORD *)(v0 + 328) = v17;
    *(_OWORD *)(v0 + 280) = v15;
    *(_OWORD *)(v0 + 296) = v16;
    *(void *)(v0 + 856) = v1 + 1;
    uint64_t v18 = *(void *)(v0 + 336);
    uint64_t v19 = *(void *)(v0 + 344);
    *(void *)(v0 + 864) = v19;
    sub_10005D5A0(v0 + 280);
    swift_bridgeObjectRetain();
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 872) = v20;
    void *v20 = v0;
    v20[1] = sub_1000F1028;
    return sub_1000F3BFC(v18, v19, 0);
  }
}

uint64_t sub_1000F1364()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 920) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 896);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v4 = sub_1000F34F4;
  }
  else {
    uint64_t v4 = sub_1000F14CC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F14CC()
{
  uint64_t v1 = (void *)v0[92];
  uint64_t v2 = v0[91];
  static Date.now.getter();
  uint64_t v4 = v1[3];
  uint64_t v3 = v1[4];
  v0[116] = v3;
  uint64_t v5 = (void *)v1[5];
  v0[117] = v5;
  uint64_t v6 = swift_allocObject();
  v0[118] = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4848 + dword_1001E4848);
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = (void *)swift_task_alloc();
  v0[119] = v8;
  *id v8 = v0;
  v8[1] = sub_1000F15F4;
  return v10((uint64_t)sub_100100C74, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000F15F4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 960) = a1;
  *(void *)(v4 + 968) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void **)(v3 + 936);
  swift_release();
  swift_bridgeObjectRelease();

  if (v1) {
    uint64_t v6 = sub_1000F3734;
  }
  else {
    uint64_t v6 = sub_1000F1768;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F1768()
{
  uint64_t v45 = v0;
  uint64_t v1 = *(void *)(v0 + 960);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 976) = v2;
  if (v2)
  {
    long long v3 = *(_OWORD *)(v1 + 32);
    long long v4 = *(_OWORD *)(v1 + 48);
    long long v5 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v0 + 440) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 456) = v5;
    *(_OWORD *)(v0 + 408) = v3;
    *(_OWORD *)(v0 + 424) = v4;
    long long v6 = *(_OWORD *)(v1 + 96);
    long long v7 = *(_OWORD *)(v1 + 112);
    long long v8 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v0 + 504) = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v0 + 520) = v8;
    *(_OWORD *)(v0 + 472) = v6;
    *(_OWORD *)(v0 + 488) = v7;
    *(void *)(v0 + 984) = 1;
    uint64_t v9 = swift_allocObject();
    *(void *)(v0 + 992) = v9;
    long long v10 = *(_OWORD *)(v0 + 488);
    *(_OWORD *)(v9 + 80) = *(_OWORD *)(v0 + 472);
    *(_OWORD *)(v9 + 96) = v10;
    long long v11 = *(_OWORD *)(v0 + 520);
    *(_OWORD *)(v9 + 112) = *(_OWORD *)(v0 + 504);
    *(_OWORD *)(v9 + 128) = v11;
    long long v12 = *(_OWORD *)(v0 + 424);
    *(_OWORD *)(v9 + 16) = *(_OWORD *)(v0 + 408);
    *(_OWORD *)(v9 + 32) = v12;
    long long v13 = *(_OWORD *)(v0 + 456);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(v0 + 440);
    *(_OWORD *)(v9 + 64) = v13;
    swift_beginAccess();
    *(unsigned char *)(v9 + 67) = 1;
    sub_10005D5A0(v0 + 408);
    long long v14 = (void *)Date.timeIntervalSince1970.getter();
    double v23 = v22 * 1000.0;
    if ((~*(void *)&v23 & 0x7FF0000000000000) != 0)
    {
      if (v23 > -1.0)
      {
        if (v23 < 1.84467441e19)
        {
          uint64_t v24 = *(void **)(v0 + 736);
          *(void *)(v9 + 120) = (unint64_t)v23;
          *(unsigned char *)(v9 + 128) = 0;
          *(unsigned char *)(v9 + 90) = 1;
          swift_endAccess();
          uint64_t v26 = v24[3];
          uint64_t v25 = v24[4];
          *(void *)(v0 + 1000) = v25;
          uint64_t v27 = (void *)v24[5];
          *(void *)(v0 + 1008) = v27;
          swift_bridgeObjectRetain();
          id v28 = v27;
          swift_retain();
          *(void *)(v0 + 648) = &type metadata for GhostbackDatabaseStore;
          *(void *)(v0 + 656) = &off_1001E3A98;
          *(void *)(v0 + 624) = v26;
          *(void *)(v0 + 632) = v25;
          *(void *)(v0 + 640) = v28;
          id v29 = v28;
          swift_bridgeObjectRetain();
          id v30 = v29;
          long long v31 = (void *)swift_task_alloc();
          *(void *)(v0 + 1016) = v31;
          void v31[2] = v30;
          v31[3] = v0 + 624;
          v31[4] = sub_100100CA8;
          void v31[5] = v9;
          long long v14 = (void *)swift_task_alloc();
          *(void *)(v0 + 1024) = v14;
          *long long v14 = v0;
          v14[1] = sub_1000F1B60;
          uint64_t v21 = (char *)&type metadata for () + 8;
          unint64_t v18 = 0x8000000100186A10;
          uint64_t v19 = sub_100100CC4;
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          unint64_t v17 = 0xD00000000000001BLL;
          uint64_t v20 = v31;
          return withCheckedThrowingContinuation<A>(isolation:function:_:)(v14, v15, v16, v17, v18, v19, v20, v21);
        }
LABEL_13:
        __break(1u);
        return withCheckedThrowingContinuation<A>(isolation:function:_:)(v14, v15, v16, v17, v18, v19, v20, v21);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = *(uint64_t **)(v0 + 736);
  uint64_t v33 = *(void *)(v0 + 728);
  id v34 = [self sharedScheduler];
  v44[3] = &type metadata for ActivityManager;
  v44[4] = &off_1001CCE58;
  uint64_t v35 = (void *)swift_allocObject();
  v44[0] = v35;
  v35[5] = &type metadata for BackgroundSystemTaskScheduler;
  v35[6] = &off_1001C30C8;
  v35[2] = v34;
  sub_100087C5C((uint64_t)v44, v0 + 536);
  uint64_t v37 = *v32;
  uint64_t v36 = v32[1];
  *(void *)(v0 + 1040) = v36;
  uint64_t v38 = (void *)v32[2];
  *(void *)(v0 + 1048) = v38;
  uint64_t v39 = swift_allocObject();
  *(void *)(v0 + 1056) = v39;
  *(void *)(v39 + 16) = v33;
  uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48D8 + dword_1001E48D8);
  swift_bridgeObjectRetain();
  id v40 = v38;
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 1064) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_1000F2384;
  return v43((uint64_t)sub_100100D18, v39, v37, v36, (uint64_t)v40);
}

uint64_t sub_1000F1B60()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1032) = v0;
  swift_task_dealloc();
  if (v0)
  {
    long long v3 = sub_1000F20D0;
  }
  else
  {
    long long v4 = *(void **)(v2 + 1008);

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 624);
    swift_release();
    swift_bridgeObjectRelease();

    long long v3 = sub_1000F1CC0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F1CC0()
{
  uint64_t v47 = v0;
  uint64_t v1 = *(void *)(v0 + 984);
  uint64_t v2 = *(void *)(v0 + 976);
  swift_release();
  if (v1 != v2)
  {
    uint64_t v14 = *(void *)(v0 + 984);
    uint64_t v15 = (_OWORD *)(*(void *)(v0 + 960) + (v14 << 7));
    long long v16 = v15[2];
    long long v17 = v15[3];
    long long v18 = v15[5];
    *(_OWORD *)(v0 + 440) = v15[4];
    *(_OWORD *)(v0 + 456) = v18;
    *(_OWORD *)(v0 + 408) = v16;
    *(_OWORD *)(v0 + 424) = v17;
    long long v19 = v15[6];
    long long v20 = v15[7];
    long long v21 = v15[9];
    *(_OWORD *)(v0 + 504) = v15[8];
    *(_OWORD *)(v0 + 520) = v21;
    *(_OWORD *)(v0 + 472) = v19;
    *(_OWORD *)(v0 + 488) = v20;
    *(void *)(v0 + 984) = v14 + 1;
    uint64_t v22 = swift_allocObject();
    *(void *)(v0 + 992) = v22;
    long long v23 = *(_OWORD *)(v0 + 488);
    *(_OWORD *)(v22 + 80) = *(_OWORD *)(v0 + 472);
    *(_OWORD *)(v22 + 96) = v23;
    long long v24 = *(_OWORD *)(v0 + 520);
    *(_OWORD *)(v22 + 112) = *(_OWORD *)(v0 + 504);
    *(_OWORD *)(v22 + 128) = v24;
    long long v25 = *(_OWORD *)(v0 + 424);
    *(_OWORD *)(v22 + 16) = *(_OWORD *)(v0 + 408);
    *(_OWORD *)(v22 + 32) = v25;
    long long v26 = *(_OWORD *)(v0 + 456);
    *(_OWORD *)(v22 + 48) = *(_OWORD *)(v0 + 440);
    *(_OWORD *)(v22 + 64) = v26;
    swift_beginAccess();
    *(unsigned char *)(v22 + 67) = 1;
    sub_10005D5A0(v0 + 408);
    uint64_t v27 = (void *)Date.timeIntervalSince1970.getter();
    double v36 = v35 * 1000.0;
    if ((~*(void *)&v36 & 0x7FF0000000000000) != 0)
    {
      if (v36 > -1.0)
      {
        if (v36 < 1.84467441e19)
        {
          uint64_t v37 = *(void **)(v0 + 736);
          *(void *)(v22 + 120) = (unint64_t)v36;
          *(unsigned char *)(v22 + 128) = 0;
          *(unsigned char *)(v22 + 90) = 1;
          swift_endAccess();
          uint64_t v39 = v37[3];
          uint64_t v38 = v37[4];
          *(void *)(v0 + 1000) = v38;
          id v40 = (void *)v37[5];
          *(void *)(v0 + 1008) = v40;
          swift_bridgeObjectRetain();
          id v41 = v40;
          swift_retain();
          *(void *)(v0 + 648) = &type metadata for GhostbackDatabaseStore;
          *(void *)(v0 + 656) = &off_1001E3A98;
          *(void *)(v0 + 624) = v39;
          *(void *)(v0 + 632) = v38;
          *(void *)(v0 + 640) = v41;
          id v42 = v41;
          swift_bridgeObjectRetain();
          id v43 = v42;
          uint64_t v44 = (void *)swift_task_alloc();
          *(void *)(v0 + 1016) = v44;
          v44[2] = v43;
          v44[3] = v0 + 624;
          v44[4] = sub_100100CA8;
          void v44[5] = v22;
          uint64_t v27 = (void *)swift_task_alloc();
          *(void *)(v0 + 1024) = v27;
          *uint64_t v27 = v0;
          v27[1] = sub_1000F1B60;
          id v34 = (char *)&type metadata for () + 8;
          unint64_t v31 = 0x8000000100186A10;
          uint64_t v32 = sub_100100CC4;
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          unint64_t v30 = 0xD00000000000001BLL;
          uint64_t v33 = v44;
          return withCheckedThrowingContinuation<A>(isolation:function:_:)(v27, v28, v29, v30, v31, v32, v33, v34);
        }
LABEL_13:
        __break(1u);
        return withCheckedThrowingContinuation<A>(isolation:function:_:)(v27, v28, v29, v30, v31, v32, v33, v34);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  long long v3 = *(uint64_t **)(v0 + 736);
  uint64_t v4 = *(void *)(v0 + 728);
  id v5 = [self sharedScheduler];
  v46[3] = &type metadata for ActivityManager;
  v46[4] = &off_1001CCE58;
  uint64_t v6 = (void *)swift_allocObject();
  v46[0] = v6;
  v6[5] = &type metadata for BackgroundSystemTaskScheduler;
  v6[6] = &off_1001C30C8;
  _OWORD v6[2] = v5;
  sub_100087C5C((uint64_t)v46, v0 + 536);
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  *(void *)(v0 + 1040) = v7;
  uint64_t v9 = (void *)v3[2];
  *(void *)(v0 + 1048) = v9;
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 1056) = v10;
  *(void *)(v10 + 16) = v4;
  uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48D8 + dword_1001E48D8);
  swift_bridgeObjectRetain();
  id v11 = v9;
  long long v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 1064) = v12;
  *long long v12 = v0;
  v12[1] = sub_1000F2384;
  return v45((uint64_t)sub_100100D18, v10, v8, v7, (uint64_t)v11);
}

uint64_t sub_1000F20D0()
{
  uint64_t v1 = (void *)v0[126];
  uint64_t v2 = v0[99];
  uint64_t v3 = v0[97];
  uint64_t v4 = v0[96];

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 78));
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  uint64_t v5 = v0[95];
  uint64_t v6 = v0[94];
  uint64_t v7 = v0[93];
  uint64_t v8 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = v0[91];
    uint64_t v12 = swift_slowAlloc();
    long long v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134218242;
    v0[90] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[89] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v13 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to lock attribution for app: %llu, error: %@", (uint8_t *)v12, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v15 = v0[95];
  uint64_t v16 = v0[94];
  uint64_t v17 = v0[93];

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000F2384(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 1072) = a1;
  *(void *)(v4 + 1080) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void **)(v3 + 1048);
  swift_release();
  swift_bridgeObjectRelease();

  if (v1) {
    uint64_t v6 = sub_1000F3990;
  }
  else {
    uint64_t v6 = sub_1000F24F8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F24F8()
{
  uint64_t v1 = v0[134];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[136] = v2;
  if (v2)
  {
    memcpy(v0 + 2, (const void *)(v1 + 32), 0x101uLL);
    v0[137] = 1;
    uint64_t v3 = swift_allocObject();
    v0[138] = v3;
    memcpy((void *)(v3 + 16), v0 + 2, 0x101uLL);
    swift_beginAccess();
    *(unsigned char *)(v3 + 187) = 1;
    sub_100081480((uint64_t)(v0 + 2));
    uint64_t v4 = (void *)Date.timeIntervalSince1970.getter();
    double v13 = v12 * 1000.0;
    if ((~*(void *)&v13 & 0x7FF0000000000000) != 0)
    {
      if (v13 > -1.0)
      {
        if (v13 < 1.84467441e19)
        {
          uint64_t v14 = v0[98];
          *(void *)(v3 + 248) = (unint64_t)v13;
          *(unsigned char *)(v3 + 256) = 0;
          sub_1000C3648(*(void *)(v3 + 128), *(unsigned char *)(v3 + 208), v14);
          uint64_t v4 = (void *)Date.timeIntervalSince1970.getter();
          double v16 = v15 * 1000.0;
          if ((~*(void *)&v16 & 0x7FF0000000000000) != 0)
          {
            if (v16 > -1.0)
            {
              if (v16 < 1.84467441e19)
              {
                uint64_t v17 = v0[98];
                uint64_t v18 = v0[97];
                uint64_t v19 = v0[96];
                uint64_t v20 = (uint64_t *)v0[92];
                unint64_t v21 = (unint64_t)v16;
                uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
                v0[139] = v22;
                v0[140] = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
                v22(v17, v19);
                *(void *)(v3 + 264) = v21;
                *(unsigned char *)(v3 + 272) = 0;
                swift_endAccess();
                uint64_t v24 = *v20;
                uint64_t v23 = v20[1];
                v0[141] = v23;
                long long v25 = (void *)v20[2];
                v0[142] = v25;
                swift_bridgeObjectRetain();
                id v26 = v25;
                swift_retain();
                v0[76] = &type metadata for PostbackDatabaseStore;
                v0[77] = &off_1001E1450;
                v0[73] = v24;
                v0[74] = v23;
                v0[75] = v26;
                id v27 = v26;
                swift_bridgeObjectRetain();
                id v28 = v27;
                uint64_t v29 = (void *)swift_task_alloc();
                v0[143] = v29;
                v29[2] = v28;
                v29[3] = v0 + 73;
                v29[4] = sub_100100D4C;
                v29[5] = v3;
                uint64_t v4 = (void *)swift_task_alloc();
                v0[144] = v4;
                *uint64_t v4 = v0;
                v4[1] = sub_1000F2898;
                uint64_t v11 = (char *)&type metadata for () + 8;
                unint64_t v8 = 0x8000000100186A10;
                uint64_t v9 = sub_100100D68;
                uint64_t v5 = 0;
                uint64_t v6 = 0;
                unint64_t v7 = 0xD00000000000001BLL;
                os_log_type_t v10 = v29;
                return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, v5, v6, v7, v8, v9, v10, v11);
              }
LABEL_19:
              __break(1u);
              return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, v5, v6, v7, v8, v9, v10, v11);
            }
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = v0[99];
  uint64_t v31 = v0[97];
  uint64_t v32 = v0[96];
  sub_10005D720((uint64_t)(v0 + 67));
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_1000F2898()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000F2DAC;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 1136);

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 584);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000F29F8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F29F8()
{
  uint64_t v1 = v0[137];
  uint64_t v2 = v0[136];
  swift_release();
  if (v1 != v2)
  {
    uint64_t v8 = v0[137];
    memcpy(v0 + 2, (const void *)(v0[134] + 264 * v8 + 32), 0x101uLL);
    v0[137] = v8 + 1;
    uint64_t v9 = swift_allocObject();
    v0[138] = v9;
    memcpy((void *)(v9 + 16), v0 + 2, 0x101uLL);
    swift_beginAccess();
    *(unsigned char *)(v9 + 187) = 1;
    sub_100081480((uint64_t)(v0 + 2));
    os_log_type_t v10 = (void *)Date.timeIntervalSince1970.getter();
    double v19 = v18 * 1000.0;
    if ((~*(void *)&v19 & 0x7FF0000000000000) != 0)
    {
      if (v19 > -1.0)
      {
        if (v19 < 1.84467441e19)
        {
          uint64_t v20 = v0[98];
          *(void *)(v9 + 248) = (unint64_t)v19;
          *(unsigned char *)(v9 + 256) = 0;
          sub_1000C3648(*(void *)(v9 + 128), *(unsigned char *)(v9 + 208), v20);
          os_log_type_t v10 = (void *)Date.timeIntervalSince1970.getter();
          double v22 = v21 * 1000.0;
          if ((~*(void *)&v22 & 0x7FF0000000000000) != 0)
          {
            if (v22 > -1.0)
            {
              if (v22 < 1.84467441e19)
              {
                uint64_t v23 = v0[98];
                uint64_t v24 = v0[97];
                uint64_t v25 = v0[96];
                id v26 = (uint64_t *)v0[92];
                unint64_t v27 = (unint64_t)v22;
                id v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
                v0[139] = v28;
                v0[140] = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
                v28(v23, v25);
                *(void *)(v9 + 264) = v27;
                *(unsigned char *)(v9 + 272) = 0;
                swift_endAccess();
                uint64_t v30 = *v26;
                uint64_t v29 = v26[1];
                v0[141] = v29;
                uint64_t v31 = (void *)v26[2];
                v0[142] = v31;
                swift_bridgeObjectRetain();
                id v32 = v31;
                swift_retain();
                v0[76] = &type metadata for PostbackDatabaseStore;
                v0[77] = &off_1001E1450;
                v0[73] = v30;
                v0[74] = v29;
                v0[75] = v32;
                id v33 = v32;
                swift_bridgeObjectRetain();
                id v34 = v33;
                uint64_t v35 = (void *)swift_task_alloc();
                v0[143] = v35;
                v35[2] = v34;
                v35[3] = v0 + 73;
                unsigned char v35[4] = sub_100100D4C;
                v35[5] = v9;
                os_log_type_t v10 = (void *)swift_task_alloc();
                v0[144] = v10;
                *os_log_type_t v10 = v0;
                v10[1] = sub_1000F2898;
                uint64_t v17 = (char *)&type metadata for () + 8;
                unint64_t v14 = 0x8000000100186A10;
                double v15 = sub_100100D68;
                uint64_t v11 = 0;
                uint64_t v12 = 0;
                unint64_t v13 = 0xD00000000000001BLL;
                double v16 = v35;
                return withCheckedThrowingContinuation<A>(isolation:function:_:)(v10, v11, v12, v13, v14, v15, v16, v17);
              }
LABEL_19:
              __break(1u);
              return withCheckedThrowingContinuation<A>(isolation:function:_:)(v10, v11, v12, v13, v14, v15, v16, v17);
            }
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = v0[99];
  uint64_t v4 = v0[97];
  uint64_t v5 = v0[96];
  sub_10005D720((uint64_t)(v0 + 67));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000F2DAC()
{
  uint64_t v1 = (void *)v0[142];
  double v19 = (void (*)(uint64_t, uint64_t))v0[139];
  uint64_t v2 = v0[99];
  uint64_t v3 = v0[96];

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 73));
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_10005D720((uint64_t)(v0 + 67));
  v19(v2, v3);
  swift_release();
  uint64_t v4 = v0[95];
  uint64_t v5 = v0[94];
  uint64_t v6 = v0[93];
  uint64_t v7 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = v0[91];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134218242;
    v0[90] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[89] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to lock attribution for app: %llu, error: %@", (uint8_t *)v11, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v14 = v0[95];
  uint64_t v15 = v0[94];
  uint64_t v16 = v0[93];

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000F306C()
{
  uint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  uint64_t v3 = v0[93];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[91];
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218242;
    v0[90] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[89] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to lock attribution for app: %llu, error: %@", (uint8_t *)v8, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v0[95];
  uint64_t v12 = v0[94];
  uint64_t v13 = v0[93];

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000F32AC()
{
  sub_10005D5D8((uint64_t)(v0 + 35));
  uint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  uint64_t v3 = v0[93];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[91];
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218242;
    v0[90] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[89] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to lock attribution for app: %llu, error: %@", (uint8_t *)v8, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v0[95];
  uint64_t v12 = v0[94];
  uint64_t v13 = v0[93];

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000F34F4()
{
  uint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  uint64_t v3 = v0[93];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[91];
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218242;
    v0[90] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[89] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to lock attribution for app: %llu, error: %@", (uint8_t *)v8, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v0[95];
  uint64_t v12 = v0[94];
  uint64_t v13 = v0[93];

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000F3734()
{
  (*(void (**)(void, void))(v0[97] + 8))(v0[99], v0[96]);
  uint64_t v1 = v0[95];
  uint64_t v2 = v0[94];
  uint64_t v3 = v0[93];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[91];
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218242;
    v0[90] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[89] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to lock attribution for app: %llu, error: %@", (uint8_t *)v8, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v0[95];
  uint64_t v12 = v0[94];
  uint64_t v13 = v0[93];

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000F3990()
{
  uint64_t v1 = v0[99];
  uint64_t v2 = v0[97];
  uint64_t v3 = v0[96];
  sub_10005D720((uint64_t)(v0 + 67));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[95];
  uint64_t v5 = v0[94];
  uint64_t v6 = v0[93];
  uint64_t v7 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = v0[91];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134218242;
    v0[90] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[89] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to lock attribution for app: %llu, error: %@", (uint8_t *)v11, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v14 = v0[95];
  uint64_t v15 = v0[94];
  uint64_t v16 = v0[93];

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000F3BFC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 208) = a2;
  *(void *)(v4 + 216) = v3;
  *(unsigned char *)(v4 + 648) = a3;
  *(void *)(v4 + 200) = a1;
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v4 + 224) = v5;
  *(void *)(v4 + 232) = *(void *)(v5 - 8);
  *(void *)(v4 + 240) = swift_task_alloc();
  return _swift_task_switch(sub_1000F3CC4, 0, 0);
}

uint64_t sub_1000F3CC4()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (*(unsigned char *)(v0 + 648))
  {
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v10 = v1[3];
    uint64_t v9 = v1[4];
    *(void *)(v0 + 408) = v9;
    uint64_t v11 = (void *)v1[5];
    *(void *)(v0 + 416) = v11;
    uint64_t v12 = swift_allocObject();
    *(void *)(v0 + 424) = v12;
    *(void *)(v12 + 16) = v8;
    uint64_t v16 = (uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4848 + dword_1001E4848);
    swift_bridgeObjectRetain();
    id v13 = v11;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 432) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000F4898;
    return v16(sub_1001044BC, v12, v10, v9, v13);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v2 = *(void *)(v0 + 208);
    *(void *)(v0 + 248) = v1[4];
    uint64_t v4 = (void *)v1[5];
    *(void *)(v0 + 256) = v4;
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 264) = v5;
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v2;
    swift_bridgeObjectRetain();
    v4;
    sub_100100030(v3, v2, 0);
    uint64_t v15 = (uint64_t (*)(void))((char *)&dword_1001E4840 + dword_1001E4840);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000F3EE8;
    return v15();
  }
}

uint64_t sub_1000F3EE8()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000F5B24;
  }
  else {
    uint64_t v3 = sub_1000F4054;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F4054()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  v0[36] = *(void *)(v1 + 56);
  uint64_t v4 = *(void **)(v1 + 64);
  v0[37] = v4;
  uint64_t v5 = swift_allocObject();
  v0[38] = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  sub_100100030(v3, v2, 0);
  uint64_t v8 = (uint64_t (*)(void))((char *)&dword_1001E4838 + dword_1001E4838);
  swift_bridgeObjectRetain();
  v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[39] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000F4188;
  return v8();
}

uint64_t sub_1000F4188()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 296);
  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000F5B88;
  }
  else {
    uint64_t v3 = sub_1000F42F4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F42F4()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  v0[41] = *(void *)(v1 + 80);
  uint64_t v4 = *(void **)(v1 + 88);
  v0[42] = v4;
  uint64_t v5 = swift_allocObject();
  v0[43] = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  sub_100100030(v3, v2, 0);
  uint64_t v8 = (uint64_t (*)(void))((char *)&dword_1001E48A0 + dword_1001E48A0);
  swift_bridgeObjectRetain();
  v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[44] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000F4428;
  return v8();
}

uint64_t sub_1000F4428()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 336);
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000F5BEC;
  }
  else {
    uint64_t v3 = sub_1000F4594;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F4594()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  v0[46] = *(void *)(v1 + 168);
  uint64_t v4 = *(void **)(v1 + 176);
  v0[47] = v4;
  uint64_t v5 = swift_allocObject();
  v0[48] = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  sub_100100030(v3, v2, 0);
  uint64_t v8 = (uint64_t (*)(void))((char *)&dword_1001E4860 + dword_1001E4860);
  swift_bridgeObjectRetain();
  v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[49] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000F46C8;
  return v8();
}

uint64_t sub_1000F46C8()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000F4834;
  }
  else {
    uint64_t v3 = sub_100104438;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F4834()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F4898(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void **)(*v2 + 416);
  *(void *)(v3 + 440) = a1;
  *(void *)(v3 + 448) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v1) {
    uint64_t v5 = sub_1000F5C50;
  }
  else {
    uint64_t v5 = sub_1000F4A08;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F4A08()
{
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 456) = v2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 216);
    long long v4 = *(_OWORD *)(v1 + 80);
    long long v6 = *(_OWORD *)(v1 + 32);
    long long v5 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 64) = v4;
    *(_OWORD *)(v0 + 16) = v6;
    *(_OWORD *)(v0 + 32) = v5;
    long long v7 = *(_OWORD *)(v1 + 144);
    long long v9 = *(_OWORD *)(v1 + 96);
    long long v8 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v0 + 128) = v7;
    *(_OWORD *)(v0 + 80) = v9;
    *(_OWORD *)(v0 + 96) = v8;
    uint64_t v10 = v3[20];
    *(void *)(v0 + 464) = v10;
    uint64_t v11 = v3[21];
    *(void *)(v0 + 472) = v11;
    uint64_t v12 = (void *)v3[22];
    *(void *)(v0 + 480) = v12;
    *(void *)(v0 + 488) = 1;
    uint64_t v14 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 80);
    sub_10005D5A0(v0 + 16);
    uint64_t v15 = swift_allocObject();
    *(void *)(v0 + 496) = v15;
    *(void *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = v13;
    swift_bridgeObjectRetain();
    id v16 = v12;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 168) = &type metadata for RetryCountDatabaseStore;
    *(void *)(v0 + 176) = &off_1001E2530;
    *(void *)(v0 + 144) = v10;
    *(void *)(v0 + 152) = v11;
    *(void *)(v0 + 160) = v16;
    id v17 = v16;
    swift_bridgeObjectRetain();
    id v18 = v17;
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v19;
    v19[2] = v18;
    v19[3] = v0 + 144;
    v19[4] = sub_1000C0C50;
    void v19[5] = v15;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 512) = v20;
    void *v20 = v0;
    v20[1] = sub_1000F4CE0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v20, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_1000FFFF8, v19, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)(v0 + 216);
    uint64_t v22 = *(void *)(v0 + 200);
    *(void *)(v0 + 528) = *(void *)(v21 + 32);
    uint64_t v23 = *(void **)(v21 + 40);
    *(void *)(v0 + 536) = v23;
    uint64_t v24 = swift_allocObject();
    *(void *)(v0 + 544) = v24;
    *(void *)(v24 + 16) = v22;
    unint64_t v27 = (uint64_t (*)(void))((char *)&dword_1001E4840 + dword_1001E4840);
    swift_bridgeObjectRetain();
    v23;
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_1000F543C;
    return v27();
  }
}

uint64_t sub_1000F4CE0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000F5118;
  }
  else
  {
    long long v4 = *(void **)(v2 + 480);

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 144);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_1000F4E38;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F4E38()
{
  uint64_t v1 = *(void *)(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 456);
  sub_10005D5D8(v0 + 16);
  if (v1 == v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 200);
    *(void *)(v0 + 528) = *(void *)(v3 + 32);
    long long v5 = *(void **)(v3 + 40);
    *(void *)(v0 + 536) = v5;
    uint64_t v6 = swift_allocObject();
    *(void *)(v0 + 544) = v6;
    *(void *)(v6 + 16) = v4;
    uint64_t v29 = (uint64_t (*)(void))((char *)&dword_1001E4840 + dword_1001E4840);
    swift_bridgeObjectRetain();
    v5;
    long long v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v7;
    *long long v7 = v0;
    v7[1] = sub_1000F543C;
    return v29();
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 488);
    uint64_t v11 = (_OWORD *)(*(void *)(v0 + 440) + (v9 << 7));
    long long v12 = v11[6];
    long long v14 = v11[8];
    long long v13 = v11[9];
    *(_OWORD *)(v0 + 96) = v11[7];
    *(_OWORD *)(v0 + 112) = v14;
    long long v15 = v11[2];
    long long v16 = v11[3];
    long long v17 = v11[4];
    long long v18 = v11[5];
    *(_OWORD *)(v0 + 128) = v13;
    *(_OWORD *)(v0 + 64) = v18;
    *(_OWORD *)(v0 + 80) = v12;
    *(_OWORD *)(v0 + 32) = v16;
    *(_OWORD *)(v0 + 48) = v17;
    *(_OWORD *)(v0 + 16) = v15;
    *(void *)(v0 + 488) = v9 + 1;
    uint64_t v20 = *(void *)(v0 + 464);
    uint64_t v19 = *(void *)(v0 + 472);
    uint64_t v22 = *(void *)(v0 + 72);
    uint64_t v21 = *(void *)(v0 + 80);
    sub_10005D5A0(v0 + 16);
    uint64_t v23 = swift_allocObject();
    *(void *)(v0 + 496) = v23;
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v21;
    swift_bridgeObjectRetain();
    id v24 = v10;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 168) = &type metadata for RetryCountDatabaseStore;
    *(void *)(v0 + 176) = &off_1001E2530;
    *(void *)(v0 + 144) = v20;
    *(void *)(v0 + 152) = v19;
    *(void *)(v0 + 160) = v24;
    id v25 = v24;
    swift_bridgeObjectRetain();
    id v26 = v25;
    unint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v27;
    v27[2] = v26;
    void v27[3] = v0 + 144;
    v27[4] = sub_1000C0C50;
    v27[5] = v23;
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 512) = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_1000F4CE0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v28, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_1000FFFF8, v27, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_1000F5118()
{
  uint64_t v1 = (void *)v0[60];

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 18));
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_10005D5D8((uint64_t)(v0 + 2));
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v4 = v0[28];
  uint64_t v5 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[25];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    v0[23] = v8;
    *(_DWORD *)uint64_t v9 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[24] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v20 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to delete retry counts for app %llu with error: %@", (uint8_t *)v9, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[29] + 8))(v0[30], v0[28]);
  uint64_t v11 = (void *)v0[27];
  uint64_t v12 = v0[25];
  uint64_t v14 = v11[3];
  uint64_t v13 = v11[4];
  v0[66] = v13;
  long long v15 = (void *)v11[5];
  v0[67] = v15;
  uint64_t v16 = swift_allocObject();
  v0[68] = v16;
  *(void *)(v16 + 16) = v12;
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4840
                                                                                     + dword_1001E4840);
  swift_bridgeObjectRetain();
  id v17 = v15;
  long long v18 = (void *)swift_task_alloc();
  v0[69] = v18;
  void *v18 = v0;
  v18[1] = sub_1000F543C;
  return v21((uint64_t)v21, (uint64_t)sub_1000FF7E0, v16, v14, v13, (uint64_t)v17);
}

uint64_t sub_1000F543C()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 536);
  *(void *)(*(void *)v1 + 560) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000F5F28;
  }
  else {
    uint64_t v3 = sub_1000F55A8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F55A8()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[25];
  uint64_t v4 = v1[6];
  uint64_t v3 = v1[7];
  v0[71] = v3;
  uint64_t v5 = (void *)v1[8];
  v0[72] = v5;
  uint64_t v6 = swift_allocObject();
  v0[73] = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4838
                                                                                     + dword_1001E4838);
  swift_bridgeObjectRetain();
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[74] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000F56C8;
  return v10((uint64_t)v10, (uint64_t)sub_1000FF820, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000F56C8()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 576);
  *(void *)(*(void *)v1 + 600) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000F5F8C;
  }
  else {
    uint64_t v3 = sub_1000F5834;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F5834()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[25];
  uint64_t v4 = v1[9];
  uint64_t v3 = v1[10];
  v0[76] = v3;
  uint64_t v5 = (void *)v1[11];
  v0[77] = v5;
  uint64_t v6 = swift_allocObject();
  v0[78] = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E48A0
                                                                                     + dword_1001E48A0);
  swift_bridgeObjectRetain();
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[79] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000F5954;
  return v10((uint64_t)v10, (uint64_t)sub_1000FF85C, v6, v4, v3, (uint64_t)v7);
}

uint64_t sub_1000F5954()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 616);
  *(void *)(*(void *)v1 + 640) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v3 = sub_1000F5FF0;
  }
  else {
    uint64_t v3 = sub_1000F5AC0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F5AC0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5B24()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5B88()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5BEC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5C50()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[25];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    v0[23] = v7;
    *(_DWORD *)uint64_t v8 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[24] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to delete retry counts for app %llu with error: %@", (uint8_t *)v8, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[29] + 8))(v0[30], v0[28]);
  uint64_t v10 = (void *)v0[27];
  uint64_t v11 = v0[25];
  uint64_t v13 = v10[3];
  uint64_t v12 = v10[4];
  v0[66] = v12;
  uint64_t v14 = (void *)v10[5];
  v0[67] = v14;
  uint64_t v15 = swift_allocObject();
  v0[68] = v15;
  *(void *)(v15 + 16) = v11;
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4840
                                                                                     + dword_1001E4840);
  swift_bridgeObjectRetain();
  id v16 = v14;
  id v17 = (void *)swift_task_alloc();
  v0[69] = v17;
  *id v17 = v0;
  v17[1] = sub_1000F543C;
  return v20((uint64_t)v20, (uint64_t)sub_1000FF7E0, v15, v13, v12, (uint64_t)v16);
}

uint64_t sub_1000F5F28()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5F8C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5FF0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F6054(void *a1, _OWORD *a2)
{
  swift_beginAccess();
  long long v5 = a2[6];
  v12[4] = a2[5];
  v12[5] = v5;
  long long v6 = a2[8];
  v12[6] = a2[7];
  v12[7] = v6;
  long long v7 = a2[2];
  v12[0] = a2[1];
  v12[1] = v7;
  long long v8 = a2[4];
  void v12[2] = a2[3];
  v12[3] = v8;
  sub_10005D5A0((uint64_t)v12);
  id v9 = [a1 connection];
  id v10 = sub_100022A00(v12, v9);

  if (!v2) {
  return sub_10005D5D8((uint64_t)v12);
  }
}

uint64_t sub_1000F6114(void *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)(a2 + 16);
  swift_beginAccess();
  memcpy(__dst, v4, 0x101uLL);
  sub_100081480((uint64_t)__dst);
  id v5 = [a1 connection];
  id v6 = sub_100021AD8(__dst, v5);

  if (!v2) {
  return sub_10008150C((uint64_t)__dst);
  }
}

void sub_1000F61C4(void *a1, long long *a2)
{
  id v4 = [a1 connection];
  id v5 = sub_100022714(a2, v4);

  if (!v2) {
}
  }

void sub_1000F6230(void *a1)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v2 = [a1 connection];
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  sub_100012960(&qword_1001E3B28);
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v5 = [self containsPredicateWithProperty:v3 values:v4];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v6 = sub_10011C894(v2, v5, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v6 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100100A94((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1000F641C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[91] = a4;
  v4[90] = a3;
  v4[89] = a2;
  sub_100012960(&qword_1001E0EC0);
  v4[92] = swift_task_alloc();
  v4[93] = swift_task_alloc();
  return _swift_task_switch(sub_1000F64C8, 0, 0);
}

uint64_t sub_1000F64C8()
{
  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    NSString v3 = (_OWORD *)(v0 + 528);
    uint64_t v38 = (const void *)(v0 + 16);
    uint64_t v4 = (long long *)(v1 + 32);
    uint64_t v37 = type metadata accessor for TaskPriority();
    uint64_t v5 = *(void *)(v37 - 8);
    uint64_t v36 = *(void (**)(void))(v5 + 56);
    uint64_t v35 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    id v34 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v39 = v2;
      uint64_t v41 = *(void *)(v0 + 744);
      uint64_t v7 = *(void *)(v0 + 736);
      uint64_t v8 = *(void *)(v0 + 728);
      long long v9 = *v4;
      long long v10 = v4[1];
      long long v11 = v4[3];
      *(_OWORD *)(v0 + 560) = v4[2];
      *(_OWORD *)(v0 + 576) = v11;
      *(_OWORD *)(v0 + 544) = v10;
      long long v12 = v4[4];
      long long v13 = v4[5];
      long long v14 = v4[7];
      *(_OWORD *)(v0 + 624) = v4[6];
      *(_OWORD *)(v0 + 640) = v14;
      *(_OWORD *)(v0 + 592) = v12;
      *(_OWORD *)(v0 + 608) = v13;
      *NSString v3 = v9;
      uint64_t v44 = *(void *)(v0 + 608);
      uint64_t v45 = v7;
      char v43 = *(unsigned char *)(v0 + 601);
      uint64_t v42 = *(void *)(v0 + 584);
      uint64_t v15 = *(void *)(v0 + 592);
      uint64_t v16 = *(void *)(v0 + 552);
      uint64_t v17 = *(void *)(v0 + 560);
      uint64_t v40 = *(void *)(v0 + 544);
      v36();
      sub_10007BFF0(v8, (uint64_t)v38);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = 0;
      uint64_t v19 = (void *)(v18 + 16);
      *(void *)(v18 + 24) = 0;
      long long v20 = *(_OWORD *)(v0 + 608);
      *(_OWORD *)(v18 + 96) = *(_OWORD *)(v0 + 592);
      *(_OWORD *)(v18 + 112) = v20;
      long long v21 = *(_OWORD *)(v0 + 640);
      *(_OWORD *)(v18 + 128) = *(_OWORD *)(v0 + 624);
      *(_OWORD *)(v18 + 144) = v21;
      long long v22 = *(_OWORD *)(v0 + 544);
      *(_OWORD *)(v18 + 32) = *v3;
      *(_OWORD *)(v18 + 48) = v22;
      long long v23 = *(_OWORD *)(v0 + 576);
      *(_OWORD *)(v18 + 64) = *(_OWORD *)(v0 + 560);
      *(_OWORD *)(v18 + 80) = v23;
      *(void *)(v18 + 160) = v16;
      *(void *)(v18 + 168) = v17;
      memcpy((void *)(v18 + 176), v38, 0x200uLL);
      *(void *)(v18 + 688) = v42;
      *(void *)(v18 + 696) = v15;
      *(void *)(v18 + 704) = v40;
      *(void *)(v18 + 712) = v44;
      *(unsigned char *)(v18 + 720) = v43;
      sub_100036994(v41, v45, &qword_1001E0EC0);
      LODWORD(v16) = (*v35)(v45, 1, v37);
      sub_10005D5A0(v0 + 528);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = *(void *)(v0 + 736);
      if (v16 == 1)
      {
        sub_100019960(*(void *)(v0 + 736), &qword_1001E0EC0);
        if (!*v19) {
          goto LABEL_8;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v34)(v24, v37);
        if (!*v19)
        {
LABEL_8:
          uint64_t v25 = 0;
          uint64_t v27 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v25 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v27 = v26;
      swift_unknownObjectRelease();
LABEL_9:
      uint64_t v28 = **(void **)(v0 + 712);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = &unk_1001E3CA0;
      *(void *)(v29 + 24) = v18;
      uint64_t v30 = v27 | v25;
      if (v27 | v25)
      {
        uint64_t v30 = v0 + 656;
        *(void *)(v0 + 656) = 0;
        *(void *)(v0 + 664) = 0;
        *(void *)(v0 + 672) = v25;
        *(void *)(v0 + 680) = v27;
      }
      uint64_t v6 = *(void *)(v0 + 744);
      *(void *)(v0 + 688) = 1;
      *(void *)(v0 + 696) = v30;
      *(void *)(v0 + 704) = v28;
      swift_task_create();
      swift_release();
      sub_100019960(v6, &qword_1001E0EC0);
      v4 += 8;
      uint64_t v2 = v39 - 1;
      if (v39 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 752) = v31;
  uint64_t v32 = sub_100012960(&qword_1001E3C60);
  void *v31 = v0;
  v31[1] = sub_1000F68D4;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v32);
}

uint64_t sub_1000F68D4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000F6A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 2107) = v15;
  *(void *)(v8 + 3432) = v14;
  *(_OWORD *)(v8 + 3416) = v13;
  *(void *)(v8 + 3408) = a8;
  *(void *)(v8 + 3400) = a7;
  *(void *)(v8 + 3392) = a6;
  *(void *)(v8 + 3384) = a5;
  *(void *)(v8 + 3376) = a4;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 3440) = v9;
  *(void *)(v8 + 3448) = *(void *)(v9 - 8);
  *(void *)(v8 + 3456) = swift_task_alloc();
  *(void *)(v8 + 3464) = swift_task_alloc();
  *(void *)(v8 + 3472) = swift_task_alloc();
  uint64_t v10 = sub_100012960(&qword_1001E1370);
  *(void *)(v8 + 3480) = v10;
  *(void *)(v8 + 3488) = *(void *)(v10 - 8);
  *(void *)(v8 + 3496) = swift_task_alloc();
  return _swift_task_switch(sub_1000F6B6C, 0, 0);
}

uint64_t sub_1000F6B6C()
{
  uint64_t v15 = *(void *)(v0 + 3416);
  uint64_t v13 = *(void *)(v0 + 3408);
  uint64_t v1 = *(void **)(v0 + 3400);
  uint64_t v2 = *(void *)(v0 + 3384);
  unsigned int v3 = *(unsigned __int8 *)(*(void *)(v0 + 3376) + 72);
  *(unsigned char *)(v0 + 2108) = v3;
  unsigned __int8 v4 = v3 > 1;
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_10009485C(5, 6, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 1912), 2u, 2u, 2u, 0, 1u, 0, 1u, 1u, 0, 1u,
    0,
    1u,
    v4,
    3u,
    0,
    1u,
    v2,
    v5,
    2u);
  *(_WORD *)(v0 + 2109) = *(_WORD *)(v0 + 1912);
  *(_DWORD *)(v0 + 442) = *(_DWORD *)(v0 + 1914);
  *(_WORD *)(v0 + 446) = *(_WORD *)(v0 + 1918);
  *(_OWORD *)(v0 + 3504) = *(_OWORD *)(v0 + 1920);
  *(_OWORD *)(v0 + 3520) = *(_OWORD *)(v0 + 1936);
  *(_OWORD *)(v0 + 3536) = *(_OWORD *)(v0 + 1952);
  *(_OWORD *)(v0 + 3552) = *(_OWORD *)(v0 + 1968);
  *(void *)(v0 + 3568) = *(void *)(v0 + 1984);
  *(unsigned char *)(v0 + 2111) = *(unsigned char *)(v0 + 1992);
  *(_DWORD *)(v0 + 2297) = *(_DWORD *)(v0 + 1993);
  *(unsigned char *)(v0 + 2301) = *(unsigned char *)(v0 + 1997);
  *(_WORD *)(v0 + 1090) = *(_WORD *)(v0 + 1998);
  *(void *)(v0 + 3576) = *(void *)(v0 + 2000);
  *(unsigned char *)(v0 + 4288) = *(unsigned char *)(v0 + 2008);
  *(_DWORD *)(v0 + 1308) = *(_DWORD *)(v0 + 2009);
  *(_DWORD *)(v0 + 1311) = *(_DWORD *)(v0 + 2012);
  *(void *)(v0 + 3584) = *(void *)(v0 + 2016);
  *(unsigned char *)(v0 + 4272) = *(unsigned char *)(v0 + 2024);
  *(unsigned char *)(v0 + 2302) = *(unsigned char *)(v0 + 2025);
  *(_WORD *)(v0 + 878) = *(_WORD *)(v0 + 2030);
  *(_DWORD *)(v0 + 874) = *(_DWORD *)(v0 + 2026);
  *(void *)(v0 + 3592) = *(void *)(v0 + 2032);
  *(unsigned char *)(v0 + 4240) = *(unsigned char *)(v0 + 2040);
  *(_DWORD *)(v0 + 1332) = *(_DWORD *)(v0 + 2044);
  *(_DWORD *)(v0 + 1329) = *(_DWORD *)(v0 + 2041);
  *(void *)(v0 + 3600) = *(void *)(v0 + 2048);
  *(unsigned char *)(v0 + 4264) = *(unsigned char *)(v0 + 2056);
  *(unsigned char *)(v0 + 2303) = *(unsigned char *)(v0 + 2057);
  *(unsigned char *)(v0 + 2489) = *(unsigned char *)(v0 + 2058);
  *(unsigned char *)(v0 + 2106) = *(unsigned char *)(v0 + 2063);
  *(_DWORD *)(v0 + 2102) = *(_DWORD *)(v0 + 2059);
  *(void *)(v0 + 3608) = *(void *)(v0 + 2064);
  *(unsigned char *)(v0 + 4304) = *(unsigned char *)(v0 + 2072);
  *(_DWORD *)(v0 + 1325) = *(_DWORD *)(v0 + 2076);
  *(_DWORD *)(v0 + 1322) = *(_DWORD *)(v0 + 2073);
  *(_OWORD *)(v0 + 3616) = *(_OWORD *)(v0 + 2080);
  *(unsigned char *)(v0 + 2490) = *(unsigned char *)(v0 + 2096);
  uint64_t v6 = v1[9];
  uint64_t v7 = v1[10];
  *(void *)(v0 + 3632) = v7;
  uint64_t v8 = (void *)v1[11];
  *(void *)(v0 + 3640) = v8;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 3648) = v9;
  *(void *)(v9 + 16) = v13;
  *(void *)(v9 + 24) = v15;
  uint64_t v14 = (uint64_t (*)(uint64_t, double (*)@<D0>(void *@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E48B8 + dword_1001E48B8);
  swift_bridgeObjectRetain();
  id v10 = v8;
  swift_bridgeObjectRetain();
  long long v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 3656) = v11;
  *long long v11 = v0;
  v11[1] = sub_1000F6ED0;
  return v14(v0 + 3064, sub_1001035E8, v9, v6, v7, v10);
}

uint64_t sub_1000F6ED0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 3664) = v0;
  swift_task_dealloc();
  unsigned int v3 = *(void **)(v2 + 3640);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    unsigned __int8 v4 = sub_1000FAE18;
  }
  else {
    unsigned __int8 v4 = sub_1000F7038;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F7038()
{
  uint64_t v82 = v0;
  *(void *)(v0 + 3672) = *(void *)(v0 + 3064);
  *(_OWORD *)(v0 + 3680) = *(_OWORD *)(v0 + 3072);
  long long v1 = *(_OWORD *)(v0 + 3088);
  *(_OWORD *)(v0 + 3696) = v1;
  *(_OWORD *)(v0 + 3712) = *(_OWORD *)(v0 + 3104);
  *(_OWORD *)(v0 + 3728) = *(_OWORD *)(v0 + 3120);
  *(_OWORD *)(v0 + 3744) = *(_OWORD *)(v0 + 3136);
  *(void *)(v0 + 3760) = *(void *)(v0 + 3152);
  __int16 v2 = *(_WORD *)(v0 + 3160);
  *(unsigned char *)(v0 + 1094) = *(unsigned char *)(v0 + 3162);
  *(_WORD *)(v0 + 1092) = v2;
  if ((void)v1)
  {
    uint64_t v3 = *(void *)(v0 + 3424);
    unsigned __int8 v4 = *(void **)(v0 + 3400);
    uint64_t v5 = *(long long **)(v0 + 3376);
    uint64_t v6 = v4[6];
    uint64_t v7 = v4[7];
    *(void *)(v0 + 3768) = v7;
    uint64_t v8 = (void *)v4[8];
    *(void *)(v0 + 3776) = v8;
    uint64_t v9 = swift_allocObject();
    *(void *)(v0 + 3784) = v9;
    *(void *)(v9 + 16) = v3;
    long long v10 = v5[4];
    long long v11 = v5[5];
    long long v12 = v5[6];
    *(_OWORD *)(v9 + 136) = v5[7];
    *(_OWORD *)(v9 + 120) = v12;
    *(_OWORD *)(v9 + 104) = v11;
    *(_OWORD *)(v9 + 88) = v10;
    long long v13 = *v5;
    long long v14 = v5[1];
    long long v15 = v5[2];
    *(_OWORD *)(v9 + 72) = v5[3];
    *(_OWORD *)(v9 + 56) = v15;
    *(_OWORD *)(v9 + 40) = v14;
    *(_OWORD *)(v9 + 24) = v13;
    swift_bridgeObjectRetain();
    id v16 = v8;
    sub_10005D5A0((uint64_t)v5);
    uint64_t v78 = (uint64_t (*)(uint64_t, void (*)(uint64_t@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4A08 + dword_1001E4A08);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 3792) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1000F7750;
    return v78(v0 + 3168, sub_100103698, v9, v6, v7, v16);
  }
  else
  {
    sub_100103604();
    uint64_t v19 = swift_allocError();
    unsigned char *v20 = 3;
    swift_willThrow();
    *(void *)(v0 + 4208) = v19;
    uint64_t v21 = *(void *)(v0 + 3464);
    uint64_t v22 = *(void *)(v0 + 3448);
    uint64_t v23 = *(void *)(v0 + 3440);
    uint64_t v24 = *(void *)(v0 + 3376);
    uint64_t v25 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v25, v23);
    sub_10005D5A0(v24);
    swift_errorRetain();
    sub_10005D5A0(v24);
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(void *)(v0 + 3464);
    uint64_t v30 = *(void *)(v0 + 3448);
    uint64_t v31 = *(void *)(v0 + 3440);
    uint64_t v32 = *(void *)(v0 + 3376);
    if (v28)
    {
      uint64_t v79 = *(void *)(v0 + 3440);
      uint64_t v33 = swift_slowAlloc();
      uint64_t v73 = (void *)swift_slowAlloc();
      v81[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v77 = v29;
      uint64_t v34 = *(void *)(v32 + 56);
      unint64_t v35 = *(void *)(v32 + 64);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 3328) = sub_100147668(v34, v35, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10005D5D8(v32);
      sub_10005D5D8(v32);
      *(_WORD *)(v33 + 12) = 2112;
      swift_errorRetain();
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 3320) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v36;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Fetch postback failed for conversion ID: %s, error: %@", (uint8_t *)v33, 0x16u);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v77, v79);
    }
    else
    {
      sub_10005D5D8(*(void *)(v0 + 3376));
      sub_10005D5D8(v32);
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    }
    uint64_t v69 = v19;
    char v76 = *(unsigned char *)(v0 + 2490);
    uint64_t v74 = *(void *)(v0 + 3616);
    uint64_t v75 = *(void *)(v0 + 3624);
    os_log_t log = *(os_log_t *)(v0 + 3608);
    char v70 = *(unsigned char *)(v0 + 2303);
    char v71 = *(unsigned char *)(v0 + 2489);
    uint64_t v67 = *(void *)(v0 + 3592);
    uint64_t v68 = *(void *)(v0 + 3600);
    char v66 = *(unsigned char *)(v0 + 2302);
    uint64_t v64 = *(void *)(v0 + 3576);
    uint64_t v65 = *(void *)(v0 + 3584);
    char v62 = *(unsigned char *)(v0 + 2111);
    char v63 = *(unsigned char *)(v0 + 2301);
    uint64_t v61 = *(void *)(v0 + 3568);
    long long v59 = *(_OWORD *)(v0 + 3536);
    long long v60 = *(_OWORD *)(v0 + 3552);
    __int16 v58 = *(_WORD *)(v0 + 2109);
    uint64_t v37 = *(void *)(v0 + 3400);
    uint64_t v80 = *(void *)(v0 + 3416);
    int v38 = *(_DWORD *)(v0 + 2297);
    uint64_t v39 = sub_100094708(v19);
    uint64_t v56 = v40;
    uint64_t v57 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100012D78((void *)(v37 + 472), *(void *)(v37 + 496));
    *(_DWORD *)(v0 + 2769) = v38;
    *(unsigned char *)(v0 + 2784) = *(unsigned char *)(v0 + 4288);
    *(unsigned char *)(v0 + 2800) = *(unsigned char *)(v0 + 4272);
    *(unsigned char *)(v0 + 2816) = *(unsigned char *)(v0 + 4240);
    *(unsigned char *)(v0 + 2832) = *(unsigned char *)(v0 + 4264);
    *(unsigned char *)(v0 + 2848) = *(unsigned char *)(v0 + 4304);
    *(_WORD *)(v0 + 2688) = v58;
    *(void *)(v0 + 2696) = v57;
    *(void *)(v0 + 2704) = v56;
    *(void *)(v0 + 2712) = v42;
    *(void *)(v0 + 2720) = v44;
    *(_OWORD *)(v0 + 2728) = v59;
    *(_OWORD *)(v0 + 2744) = v60;
    *(void *)(v0 + 2760) = v61;
    *(unsigned char *)(v0 + 2768) = v62;
    *(unsigned char *)(v0 + 2773) = v63;
    *(void *)(v0 + 2776) = v64;
    *(void *)(v0 + 2792) = v65;
    *(unsigned char *)(v0 + 2801) = v66;
    *(void *)(v0 + 2808) = v67;
    *(void *)(v0 + 2824) = v68;
    *(unsigned char *)(v0 + 2833) = v70;
    *(unsigned char *)(v0 + 2834) = v71;
    *(void *)(v0 + 2840) = log;
    *(void *)(v0 + 2856) = v74;
    *(void *)(v0 + 2864) = v75;
    *(unsigned char *)(v0 + 2872) = v76;
    long long v45 = *(_OWORD *)(v0 + 2857);
    long long v46 = *(_OWORD *)(v0 + 2688);
    long long v47 = *(_OWORD *)(v0 + 2704);
    *(_OWORD *)(v0 + 2544) = *(_OWORD *)(v0 + 2736);
    *(_OWORD *)(v0 + 2528) = *(_OWORD *)(v0 + 2720);
    *(_OWORD *)(v0 + 2512) = v47;
    *(_OWORD *)(v0 + 2496) = v46;
    long long v48 = *(_OWORD *)(v0 + 2752);
    long long v49 = *(_OWORD *)(v0 + 2768);
    *(_OWORD *)(v0 + 2608) = *(_OWORD *)(v0 + 2800);
    *(_OWORD *)(v0 + 2592) = *(_OWORD *)(v0 + 2784);
    *(_OWORD *)(v0 + 2576) = v49;
    *(_OWORD *)(v0 + 2560) = v48;
    long long v50 = *(_OWORD *)(v0 + 2816);
    long long v51 = *(_OWORD *)(v0 + 2832);
    long long v52 = *(_OWORD *)(v0 + 2848);
    *(_OWORD *)(v0 + 2665) = v45;
    *(_OWORD *)(v0 + 2656) = v52;
    *(_OWORD *)(v0 + 2640) = v51;
    *(_OWORD *)(v0 + 2624) = v50;
    swift_errorRetain();
    uint64_t v53 = (void *)swift_task_alloc();
    *(void *)(v0 + 4216) = v53;
    void *v53 = v0;
    v53[1] = sub_1000FAC60;
    uint64_t v54 = *(void *)(v0 + 3424);
    uint64_t v55 = *(void *)(v0 + 3408);
    return sub_10012D974((_OWORD *)(v0 + 2496), v55, v80, 1, v54, v69);
  }
}

uint64_t sub_1000F7750()
{
  __int16 v2 = (void *)*v1;
  v2[475] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)v2[472];
  if (v0)
  {
    uint64_t v4 = v2[462];
    uint64_t v5 = v2[461];
    uint64_t v6 = v2[460];
    uint64_t v7 = v2[459];
    swift_release();
    sub_10004EC7C(v7, v6, v5, v4);
    swift_bridgeObjectRelease();

    uint64_t v8 = sub_1000FB38C;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v8 = sub_1000F7968;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000F7968()
{
  uint64_t v110 = v0;
  uint64_t v1 = *(void *)(v0 + 3168);
  __int16 v2 = (unsigned __int16 *)(v0 + 1092);
  *(void *)(v0 + 3808) = v1;
  uint64_t v3 = *(void *)(v0 + 3176);
  *(void *)(v0 + 3816) = v3;
  uint64_t v4 = *(void *)(v0 + 3184);
  *(void *)(v0 + 3824) = v4;
  unint64_t v5 = *(void *)(v0 + 3192);
  *(void *)(v0 + 3832) = v5;
  uint64_t v6 = *(void *)(v0 + 3200);
  *(void *)(v0 + 3840) = v6;
  unint64_t v7 = *(void *)(v0 + 3208);
  *(void *)(v0 + 3848) = v7;
  uint64_t v8 = *(void *)(v0 + 3216);
  *(void *)(v0 + 3856) = v8;
  uint64_t v106 = *(void *)(v0 + 3224);
  *(void *)(v0 + 3864) = v106;
  uint64_t v9 = *(void *)(v0 + 3232);
  *(void *)(v0 + 3872) = v9;
  if (!v9)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    long long v11 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  uint64_t v105 = *(void *)(v0 + 3800);
  if (v5 >> 60 == 15)
  {
    uint64_t v96 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v99 = v3;
    uint64_t v102 = v1;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    sub_10003CF30(v4, v5);
    JSONDecoder.init()();
    sub_100012960(&qword_1001E3AE8);
    sub_100103C98(&qword_1001E3CD8, &qword_1001E3AE8, (void (*)(void))sub_100103834);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v105)
    {
      uint64_t v83 = *(void *)(v0 + 3688);
      uint64_t v86 = *(void *)(v0 + 3696);
      uint64_t v12 = *(void *)(v0 + 3680);
      uint64_t v13 = *(void *)(v0 + 3672);
      sub_10008F6B0(v102, v99, v4, v5, v6, v7, v8, v106, v9);
      swift_release();
      sub_10005E9FC(v4, v5);
      uint64_t v14 = v13;
      uint64_t v15 = v12;
      uint64_t v16 = v83;
      uint64_t v17 = v86;
      goto LABEL_12;
    }
    sub_10005E9FC(v4, v5);
    swift_release();
    uint64_t v105 = 0;
    uint64_t v96 = *(void **)(v0 + 3368);
  }
  sub_10005EA64(v6, v7);
  sub_1001037C4(v1, v3, v4, v5, v6, v7, v8, v106, v9);
  sub_10005E9FC(v4, v5);
  sub_10005E9FC(v6, v7);
  swift_bridgeObjectRelease();
  if (v7 >> 60 == 15)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_19:
    __int16 v2 = (unsigned __int16 *)(v0 + 1092);
    long long v11 = v96;
LABEL_20:
    *(void *)(v0 + 3888) = v11;
    *(void *)(v0 + 3880) = v10;
    int v55 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
    uint64_t v56 = *(void *)(v0 + 3760);
    uint64_t v57 = *(void *)(v0 + 3752);
    uint64_t v58 = *(void *)(v0 + 3744);
    uint64_t v59 = *(void *)(v0 + 3736);
    uint64_t v60 = *(void *)(v0 + 3728);
    uint64_t v61 = *(void *)(v0 + 3720);
    uint64_t v62 = *(void *)(v0 + 3712);
    uint64_t v63 = *(void *)(v0 + 3704);
    uint64_t v64 = *(void *)(v0 + 3696);
    uint64_t v65 = *(void *)(v0 + 3688);
    uint64_t v66 = *(void *)(v0 + 3680);
    uint64_t v67 = *(void *)(v0 + 3672);
    uint64_t v68 = *(void *)(v0 + 3392);
    uint64_t v69 = *(void *)(v0 + 3384);
    if (*v2 > 1u)
    {
      *(void *)(v0 + 3048) = &type metadata for AMSDogBag;
      *(void *)(v0 + 3056) = &off_1001CAA18;
      *(void *)(v0 + 2880) = v67;
      *((unsigned char *)v2 + 1796) = v66 & 1;
      *(void *)(v0 + 2896) = v65;
      *(void *)(v0 + 2904) = v64;
      *(void *)(v0 + 2912) = v63;
      *(void *)(v0 + 2920) = v62;
      *(void *)(v0 + 2928) = v61;
      *(void *)(v0 + 2936) = v60;
      *(void *)(v0 + 2944) = v59;
      *(void *)(v0 + 2952) = v58;
      *(void *)(v0 + 2960) = v57;
      *(void *)(v0 + 2968) = v56;
      *(unsigned char *)(v0 + 2976) = 2;
      *(unsigned char *)(v0 + 2977) = BYTE1(v55) & 1;
      *(unsigned char *)(v0 + 2978) = BYTE2(v55) & 1;
      *(void *)(v0 + 2984) = v11;
      *(void *)(v0 + 2992) = v69;
      *(void *)(v0 + 3000) = v68;
      *(void *)(v0 + 3008) = &type metadata for HTTP;
      *(void *)(v0 + 3016) = &off_1001C5F78;
      uint64_t v98 = v64;
      uint64_t v71 = v65;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001036B8(v67, v66, v71, v98);
      uint64_t v72 = (void *)swift_task_alloc();
      *(void *)(v0 + 3912) = v72;
      *uint64_t v72 = v0;
      v72[1] = sub_1000F8DB0;
      return sub_10005A6B8();
    }
    else
    {
      *(void *)(v0 + 1512) = &type metadata for AMSDogBag;
      *(void *)(v0 + 1520) = &off_1001CAA18;
      *(void *)(v0 + 1336) = v67;
      *((unsigned char *)v2 + 252) = v66 & 1;
      *(void *)(v0 + 1352) = v65;
      *(void *)(v0 + 1360) = v64;
      *(void *)(v0 + 1368) = v63;
      *(void *)(v0 + 1376) = v62;
      *(void *)(v0 + 1384) = v61;
      *(void *)(v0 + 1392) = v60;
      *(void *)(v0 + 1400) = v59;
      *(void *)(v0 + 1408) = v58;
      *(void *)(v0 + 1416) = v57;
      *(void *)(v0 + 1424) = v56;
      *(unsigned char *)(v0 + 1432) = v55;
      *(unsigned char *)(v0 + 1433) = BYTE1(v55) & 1;
      *(unsigned char *)(v0 + 1434) = BYTE2(v55) & 1;
      *(void *)(v0 + 1440) = v11;
      *(void *)(v0 + 1448) = v10;
      *(void *)(v0 + 1456) = v69;
      *(void *)(v0 + 1464) = v68;
      *(void *)(v0 + 1472) = &type metadata for HTTP;
      *(void *)(v0 + 1480) = &off_1001C5F78;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v70 = (void *)swift_task_alloc();
      *(void *)(v0 + 3896) = v70;
      *char v70 = v0;
      v70[1] = sub_1000F85C0;
      return sub_10001FB80();
    }
  }
  uint64_t v100 = v3;
  uint64_t v103 = v1;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100012960(&qword_1001E3B00);
  sub_100103C98(&qword_1001E3B18, &qword_1001E3B00, (void (*)(void))sub_100100B98);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (!v105)
  {
    sub_10005E9FC(v6, v7);
    swift_release();
    uint64_t v10 = *(void **)(v0 + 3344);
    goto LABEL_19;
  }
  uint64_t v81 = *(void *)(v0 + 3688);
  uint64_t v84 = *(void *)(v0 + 3696);
  uint64_t v18 = *(void *)(v0 + 3680);
  uint64_t v19 = *(void *)(v0 + 3672);
  swift_bridgeObjectRelease();
  sub_10008F6B0(v103, v100, v4, v5, v6, v7, v8, v106, v9);
  swift_release();
  sub_10005E9FC(v6, v7);
  uint64_t v14 = v19;
  uint64_t v15 = v18;
  uint64_t v16 = v81;
  uint64_t v17 = v84;
LABEL_12:
  sub_10004EC7C(v14, v15, v16, v17);
  *(void *)(v0 + 4208) = v105;
  uint64_t v20 = *(void *)(v0 + 3464);
  uint64_t v21 = *(void *)(v0 + 3448);
  uint64_t v22 = *(void *)(v0 + 3440);
  uint64_t v23 = *(void *)(v0 + 3376);
  uint64_t v24 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v24, v22);
  sub_10005D5A0(v23);
  swift_errorRetain();
  sub_10005D5A0(v23);
  swift_errorRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = *(void *)(v0 + 3464);
  uint64_t v29 = *(void *)(v0 + 3448);
  uint64_t v30 = *(void *)(v0 + 3440);
  uint64_t v31 = *(void *)(v0 + 3376);
  if (v27)
  {
    uint64_t v107 = *(void *)(v0 + 3440);
    uint64_t v32 = swift_slowAlloc();
    uint64_t v94 = (void *)swift_slowAlloc();
    v109[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v104 = v28;
    uint64_t v34 = *(void *)(v31 + 56);
    unint64_t v33 = *(void *)(v31 + 64);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 3328) = sub_100147668(v34, v33, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v31);
    sub_10005D5D8(v31);
    *(_WORD *)(v32 + 12) = 2112;
    swift_errorRetain();
    uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3320) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v94 = v35;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Fetch postback failed for conversion ID: %s, error: %@", (uint8_t *)v32, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v104, v107);
  }
  else
  {
    sub_10005D5D8(*(void *)(v0 + 3376));
    sub_10005D5D8(v31);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  }
  char v101 = *(unsigned char *)(v0 + 2490);
  uint64_t v95 = *(void *)(v0 + 3616);
  uint64_t v97 = *(void *)(v0 + 3624);
  uint64_t v93 = *(void *)(v0 + 3608);
  char v92 = *(unsigned char *)(v0 + 2489);
  char v91 = *(unsigned char *)(v0 + 2303);
  uint64_t v90 = *(void *)(v0 + 3600);
  uint64_t v89 = *(void *)(v0 + 3592);
  char v88 = *(unsigned char *)(v0 + 2302);
  uint64_t v85 = *(void *)(v0 + 3576);
  uint64_t v87 = *(void *)(v0 + 3584);
  char v82 = *(unsigned char *)(v0 + 2301);
  char v80 = *(unsigned char *)(v0 + 2111);
  uint64_t v79 = *(void *)(v0 + 3568);
  long long v77 = *(_OWORD *)(v0 + 3536);
  long long v78 = *(_OWORD *)(v0 + 3552);
  __int16 v76 = *(_WORD *)(v0 + 2109);
  uint64_t v36 = *(void *)(v0 + 3400);
  uint64_t v108 = *(void *)(v0 + 3416);
  int v37 = *(_DWORD *)(v0 + 2297);
  uint64_t v38 = sub_100094708(v105);
  uint64_t v74 = v39;
  uint64_t v75 = v38;
  uint64_t v73 = v40;
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100012D78((void *)(v36 + 472), *(void *)(v36 + 496));
  *(_DWORD *)(v0 + 2769) = v37;
  *(unsigned char *)(v0 + 2784) = *(unsigned char *)(v0 + 4288);
  *(unsigned char *)(v0 + 2800) = *(unsigned char *)(v0 + 4272);
  *(unsigned char *)(v0 + 2816) = *(unsigned char *)(v0 + 4240);
  *(unsigned char *)(v0 + 2832) = *(unsigned char *)(v0 + 4264);
  *(unsigned char *)(v0 + 2848) = *(unsigned char *)(v0 + 4304);
  *(_WORD *)(v0 + 2688) = v76;
  *(void *)(v0 + 2696) = v75;
  *(void *)(v0 + 2704) = v74;
  *(void *)(v0 + 2712) = v73;
  *(void *)(v0 + 2720) = v42;
  *(_OWORD *)(v0 + 2728) = v77;
  *(_OWORD *)(v0 + 2744) = v78;
  *(void *)(v0 + 2760) = v79;
  *(unsigned char *)(v0 + 2768) = v80;
  *(unsigned char *)(v0 + 2773) = v82;
  *(void *)(v0 + 2776) = v85;
  *(void *)(v0 + 2792) = v87;
  *(unsigned char *)(v0 + 2801) = v88;
  *(void *)(v0 + 2808) = v89;
  *(void *)(v0 + 2824) = v90;
  *(unsigned char *)(v0 + 2833) = v91;
  *(unsigned char *)(v0 + 2834) = v92;
  *(void *)(v0 + 2840) = v93;
  *(void *)(v0 + 2856) = v95;
  *(void *)(v0 + 2864) = v97;
  *(unsigned char *)(v0 + 2872) = v101;
  long long v43 = *(_OWORD *)(v0 + 2857);
  long long v44 = *(_OWORD *)(v0 + 2688);
  long long v45 = *(_OWORD *)(v0 + 2704);
  *(_OWORD *)(v0 + 2544) = *(_OWORD *)(v0 + 2736);
  *(_OWORD *)(v0 + 2528) = *(_OWORD *)(v0 + 2720);
  *(_OWORD *)(v0 + 2512) = v45;
  *(_OWORD *)(v0 + 2496) = v44;
  long long v46 = *(_OWORD *)(v0 + 2752);
  long long v47 = *(_OWORD *)(v0 + 2768);
  *(_OWORD *)(v0 + 2608) = *(_OWORD *)(v0 + 2800);
  *(_OWORD *)(v0 + 2592) = *(_OWORD *)(v0 + 2784);
  *(_OWORD *)(v0 + 2576) = v47;
  *(_OWORD *)(v0 + 2560) = v46;
  long long v48 = *(_OWORD *)(v0 + 2816);
  long long v49 = *(_OWORD *)(v0 + 2832);
  long long v50 = *(_OWORD *)(v0 + 2848);
  *(_OWORD *)(v0 + 2665) = v43;
  *(_OWORD *)(v0 + 2656) = v50;
  *(_OWORD *)(v0 + 2640) = v49;
  *(_OWORD *)(v0 + 2624) = v48;
  swift_errorRetain();
  long long v51 = (void *)swift_task_alloc();
  *(void *)(v0 + 4216) = v51;
  void *v51 = v0;
  v51[1] = sub_1000FAC60;
  uint64_t v52 = *(void *)(v0 + 3424);
  uint64_t v53 = *(void *)(v0 + 3408);
  return sub_10012D974((_OWORD *)(v0 + 2496), v53, v108, 1, v52, v105);
}

uint64_t sub_1000F85C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)*v4;
  v5[405] = v4;
  v5[406] = a1;
  v5[407] = a2;
  v5[408] = a3;
  v5[409] = v3;
  v5[488] = v3;
  swift_task_dealloc();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1000F8804;
  }
  else
  {
    uint64_t v6 = sub_1000F86FC;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F86FC()
{
  sub_100103770(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 3264);
  uint64_t v2 = *(void *)(v0 + 3888);
  uint64_t v3 = *(void *)(v0 + 3880);
  *(_OWORD *)(v0 + 3928) = *(_OWORD *)(v0 + 3248);
  *(void *)(v0 + 3944) = v1;
  uint64_t v4 = sub_100013484(v2, v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 3952) = v4;
  *(void *)(v0 + 3960) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 3968) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_1000F9674;
  uint64_t v8 = *(void *)(v0 + 3424);
  uint64_t v9 = *(void *)(v0 + 3416);
  uint64_t v10 = *(void *)(v0 + 3408);
  return sub_1000FC6B4(v1, v8, v10, v9, (uint64_t)v4, v6);
}

uint64_t sub_1000F8804()
{
  uint64_t v65 = v0;
  sub_10008F6B0(*(void *)(v0 + 3808), *(void *)(v0 + 3816), *(void *)(v0 + 3824), *(void *)(v0 + 3832), *(void *)(v0 + 3840), *(void *)(v0 + 3848), *(void *)(v0 + 3856), *(void *)(v0 + 3864), *(void *)(v0 + 3872));
  sub_100103770(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 3904);
  *(void *)(v0 + 4208) = v1;
  uint64_t v2 = *(void *)(v0 + 3464);
  uint64_t v3 = *(void *)(v0 + 3448);
  uint64_t v4 = *(void *)(v0 + 3440);
  uint64_t v5 = *(void *)(v0 + 3376);
  uint64_t v6 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10005D5A0(v5);
  swift_errorRetain();
  sub_10005D5A0(v5);
  swift_errorRetain();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v60 = *(void *)(v0 + 3448);
    uint64_t v61 = *(void *)(v0 + 3440);
    uint64_t v62 = *(void *)(v0 + 3464);
    uint64_t v9 = *(void *)(v0 + 3376);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = v1;
    uint64_t v13 = *(void *)(v9 + 56);
    unint64_t v12 = *(void *)(v9 + 64);
    swift_bridgeObjectRetain();
    uint64_t v14 = v13;
    uint64_t v1 = v11;
    *(void *)(v0 + 3328) = sub_100147668(v14, v12, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v9);
    sub_10005D5D8(v9);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3320) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v56 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Fetch postback failed for conversion ID: %s, error: %@", (uint8_t *)v10, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 3464);
    uint64_t v17 = *(void *)(v0 + 3448);
    uint64_t v18 = *(void *)(v0 + 3440);
    uint64_t v19 = *(void *)(v0 + 3376);
    sub_10005D5D8(v19);
    sub_10005D5D8(v19);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  uint64_t v54 = v1;
  char v59 = *(unsigned char *)(v0 + 2490);
  uint64_t v57 = *(void *)(v0 + 3616);
  uint64_t v58 = *(void *)(v0 + 3624);
  uint64_t v55 = *(void *)(v0 + 3608);
  char v52 = *(unsigned char *)(v0 + 2303);
  char v53 = *(unsigned char *)(v0 + 2489);
  uint64_t v50 = *(void *)(v0 + 3592);
  uint64_t v51 = *(void *)(v0 + 3600);
  char v49 = *(unsigned char *)(v0 + 2302);
  uint64_t v47 = *(void *)(v0 + 3576);
  uint64_t v48 = *(void *)(v0 + 3584);
  char v45 = *(unsigned char *)(v0 + 2111);
  char v46 = *(unsigned char *)(v0 + 2301);
  uint64_t v44 = *(void *)(v0 + 3568);
  long long v42 = *(_OWORD *)(v0 + 3536);
  long long v43 = *(_OWORD *)(v0 + 3552);
  __int16 v41 = *(_WORD *)(v0 + 2109);
  uint64_t v63 = *(void *)(v0 + 3416);
  uint64_t v20 = *(void *)(v0 + 3400);
  int v21 = *(_DWORD *)(v0 + 2297);
  uint64_t v40 = sub_100094708(v1);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100012D78((void *)(v20 + 472), *(void *)(v20 + 496));
  *(_DWORD *)(v0 + 2769) = v21;
  *(unsigned char *)(v0 + 2784) = *(unsigned char *)(v0 + 4288);
  *(unsigned char *)(v0 + 2800) = *(unsigned char *)(v0 + 4272);
  *(unsigned char *)(v0 + 2816) = *(unsigned char *)(v0 + 4240);
  *(unsigned char *)(v0 + 2832) = *(unsigned char *)(v0 + 4264);
  *(unsigned char *)(v0 + 2848) = *(unsigned char *)(v0 + 4304);
  *(_WORD *)(v0 + 2688) = v41;
  *(void *)(v0 + 2696) = v40;
  *(void *)(v0 + 2704) = v23;
  *(void *)(v0 + 2712) = v25;
  *(void *)(v0 + 2720) = v27;
  *(_OWORD *)(v0 + 2728) = v42;
  *(_OWORD *)(v0 + 2744) = v43;
  *(void *)(v0 + 2760) = v44;
  *(unsigned char *)(v0 + 2768) = v45;
  *(unsigned char *)(v0 + 2773) = v46;
  *(void *)(v0 + 2776) = v47;
  *(void *)(v0 + 2792) = v48;
  *(unsigned char *)(v0 + 2801) = v49;
  *(void *)(v0 + 2808) = v50;
  *(void *)(v0 + 2824) = v51;
  *(unsigned char *)(v0 + 2833) = v52;
  *(unsigned char *)(v0 + 2834) = v53;
  *(void *)(v0 + 2840) = v55;
  *(void *)(v0 + 2856) = v57;
  *(void *)(v0 + 2864) = v58;
  *(unsigned char *)(v0 + 2872) = v59;
  long long v28 = *(_OWORD *)(v0 + 2857);
  long long v29 = *(_OWORD *)(v0 + 2688);
  long long v30 = *(_OWORD *)(v0 + 2704);
  *(_OWORD *)(v0 + 2544) = *(_OWORD *)(v0 + 2736);
  *(_OWORD *)(v0 + 2528) = *(_OWORD *)(v0 + 2720);
  *(_OWORD *)(v0 + 2512) = v30;
  *(_OWORD *)(v0 + 2496) = v29;
  long long v31 = *(_OWORD *)(v0 + 2752);
  long long v32 = *(_OWORD *)(v0 + 2768);
  *(_OWORD *)(v0 + 2608) = *(_OWORD *)(v0 + 2800);
  *(_OWORD *)(v0 + 2592) = *(_OWORD *)(v0 + 2784);
  *(_OWORD *)(v0 + 2576) = v32;
  *(_OWORD *)(v0 + 2560) = v31;
  long long v33 = *(_OWORD *)(v0 + 2816);
  long long v34 = *(_OWORD *)(v0 + 2832);
  long long v35 = *(_OWORD *)(v0 + 2848);
  *(_OWORD *)(v0 + 2665) = v28;
  *(_OWORD *)(v0 + 2656) = v35;
  *(_OWORD *)(v0 + 2640) = v34;
  *(_OWORD *)(v0 + 2624) = v33;
  swift_errorRetain();
  uint64_t v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 4216) = v36;
  *uint64_t v36 = v0;
  v36[1] = sub_1000FAC60;
  uint64_t v37 = *(void *)(v0 + 3424);
  uint64_t v38 = *(void *)(v0 + 3408);
  return sub_10012D974((_OWORD *)(v0 + 2496), v38, v63, 1, v37, v54);
}

uint64_t sub_1000F8DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[410] = v4;
  v5[411] = a1;
  v5[412] = a2;
  v5[413] = a3;
  v5[414] = v3;
  v5[490] = v3;
  swift_task_dealloc();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1000F9050;
  }
  else
  {
    uint64_t v6 = sub_1000F8EEC;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F8EEC()
{
  sub_10004EC7C(v0[459], v0[460], v0[461], v0[462]);
  sub_10010371C((uint64_t)(v0 + 360));
  uint64_t v1 = v0[412];
  uint64_t v2 = v0[413];
  uint64_t v3 = v0[486];
  uint64_t v4 = v0[485];
  v0[491] = v0[411];
  v0[492] = v1;
  v0[493] = v2;
  uint64_t v5 = sub_100013484(v3, v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[494] = v5;
  v0[495] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[496] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000F9674;
  uint64_t v9 = v0[428];
  uint64_t v10 = v0[427];
  uint64_t v11 = v0[426];
  return sub_1000FC6B4(v2, v9, v11, v10, (uint64_t)v5, v7);
}

uint64_t sub_1000F9050()
{
  uint64_t v75 = v0;
  uint64_t v1 = *(void *)(v0 + 3872);
  uint64_t v70 = *(void *)(v0 + 3864);
  uint64_t v2 = *(void *)(v0 + 3856);
  unint64_t v3 = *(void *)(v0 + 3848);
  uint64_t v4 = *(void *)(v0 + 3840);
  unint64_t v5 = *(void *)(v0 + 3832);
  uint64_t v6 = *(void *)(v0 + 3824);
  uint64_t v7 = *(void *)(v0 + 3816);
  uint64_t v8 = *(void *)(v0 + 3808);
  sub_10004EC7C(*(void *)(v0 + 3672), *(void *)(v0 + 3680), *(void *)(v0 + 3688), *(void *)(v0 + 3696));
  sub_10008F6B0(v8, v7, v6, v5, v4, v3, v2, v70, v1);
  sub_10010371C(v0 + 2880);
  uint64_t v9 = *(void *)(v0 + 3920);
  *(void *)(v0 + 4208) = v9;
  uint64_t v10 = *(void *)(v0 + 3464);
  uint64_t v11 = *(void *)(v0 + 3448);
  uint64_t v12 = *(void *)(v0 + 3440);
  uint64_t v13 = *(void *)(v0 + 3376);
  uint64_t v14 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v14, v12);
  sub_10005D5A0(v13);
  swift_errorRetain();
  sub_10005D5A0(v13);
  swift_errorRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v69 = *(void *)(v0 + 3448);
    uint64_t v71 = *(void *)(v0 + 3440);
    uint64_t v72 = *(void *)(v0 + 3464);
    uint64_t v17 = *(void *)(v0 + 3376);
    uint64_t v18 = swift_slowAlloc();
    uint64_t v65 = (void *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = v9;
    uint64_t v21 = *(void *)(v17 + 56);
    unint64_t v20 = *(void *)(v17 + 64);
    swift_bridgeObjectRetain();
    uint64_t v22 = v21;
    uint64_t v9 = v19;
    *(void *)(v0 + 3328) = sub_100147668(v22, v20, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v17);
    sub_10005D5D8(v17);
    *(_WORD *)(v18 + 12) = 2112;
    swift_errorRetain();
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3320) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v65 = v23;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetch postback failed for conversion ID: %s, error: %@", (uint8_t *)v18, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v72, v71);
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 3464);
    uint64_t v25 = *(void *)(v0 + 3448);
    uint64_t v26 = *(void *)(v0 + 3440);
    uint64_t v27 = *(void *)(v0 + 3376);
    sub_10005D5D8(v27);
    sub_10005D5D8(v27);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  uint64_t v61 = v9;
  char v68 = *(unsigned char *)(v0 + 2490);
  uint64_t v66 = *(void *)(v0 + 3616);
  uint64_t v67 = *(void *)(v0 + 3624);
  uint64_t v64 = *(void *)(v0 + 3608);
  char v62 = *(unsigned char *)(v0 + 2303);
  char v63 = *(unsigned char *)(v0 + 2489);
  uint64_t v59 = *(void *)(v0 + 3592);
  uint64_t v60 = *(void *)(v0 + 3600);
  char v58 = *(unsigned char *)(v0 + 2302);
  uint64_t v56 = *(void *)(v0 + 3576);
  uint64_t v57 = *(void *)(v0 + 3584);
  char v54 = *(unsigned char *)(v0 + 2111);
  char v55 = *(unsigned char *)(v0 + 2301);
  uint64_t v53 = *(void *)(v0 + 3568);
  long long v51 = *(_OWORD *)(v0 + 3536);
  long long v52 = *(_OWORD *)(v0 + 3552);
  __int16 v50 = *(_WORD *)(v0 + 2109);
  uint64_t v28 = *(void *)(v0 + 3400);
  uint64_t v73 = *(void *)(v0 + 3416);
  int v29 = *(_DWORD *)(v0 + 2297);
  uint64_t v30 = sub_100094708(v9);
  uint64_t v48 = v31;
  uint64_t v49 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100012D78((void *)(v28 + 472), *(void *)(v28 + 496));
  *(_DWORD *)(v0 + 2769) = v29;
  *(unsigned char *)(v0 + 2784) = *(unsigned char *)(v0 + 4288);
  *(unsigned char *)(v0 + 2800) = *(unsigned char *)(v0 + 4272);
  *(unsigned char *)(v0 + 2816) = *(unsigned char *)(v0 + 4240);
  *(unsigned char *)(v0 + 2832) = *(unsigned char *)(v0 + 4264);
  *(unsigned char *)(v0 + 2848) = *(unsigned char *)(v0 + 4304);
  *(_WORD *)(v0 + 2688) = v50;
  *(void *)(v0 + 2696) = v49;
  *(void *)(v0 + 2704) = v48;
  *(void *)(v0 + 2712) = v33;
  *(void *)(v0 + 2720) = v35;
  *(_OWORD *)(v0 + 2728) = v51;
  *(_OWORD *)(v0 + 2744) = v52;
  *(void *)(v0 + 2760) = v53;
  *(unsigned char *)(v0 + 2768) = v54;
  *(unsigned char *)(v0 + 2773) = v55;
  *(void *)(v0 + 2776) = v56;
  *(void *)(v0 + 2792) = v57;
  *(unsigned char *)(v0 + 2801) = v58;
  *(void *)(v0 + 2808) = v59;
  *(void *)(v0 + 2824) = v60;
  *(unsigned char *)(v0 + 2833) = v62;
  *(unsigned char *)(v0 + 2834) = v63;
  *(void *)(v0 + 2840) = v64;
  *(void *)(v0 + 2856) = v66;
  *(void *)(v0 + 2864) = v67;
  *(unsigned char *)(v0 + 2872) = v68;
  long long v36 = *(_OWORD *)(v0 + 2857);
  long long v37 = *(_OWORD *)(v0 + 2688);
  long long v38 = *(_OWORD *)(v0 + 2704);
  *(_OWORD *)(v0 + 2544) = *(_OWORD *)(v0 + 2736);
  *(_OWORD *)(v0 + 2528) = *(_OWORD *)(v0 + 2720);
  *(_OWORD *)(v0 + 2512) = v38;
  *(_OWORD *)(v0 + 2496) = v37;
  long long v39 = *(_OWORD *)(v0 + 2752);
  long long v40 = *(_OWORD *)(v0 + 2768);
  *(_OWORD *)(v0 + 2608) = *(_OWORD *)(v0 + 2800);
  *(_OWORD *)(v0 + 2592) = *(_OWORD *)(v0 + 2784);
  *(_OWORD *)(v0 + 2576) = v40;
  *(_OWORD *)(v0 + 2560) = v39;
  long long v41 = *(_OWORD *)(v0 + 2816);
  long long v42 = *(_OWORD *)(v0 + 2832);
  long long v43 = *(_OWORD *)(v0 + 2848);
  *(_OWORD *)(v0 + 2665) = v36;
  *(_OWORD *)(v0 + 2656) = v43;
  *(_OWORD *)(v0 + 2640) = v42;
  *(_OWORD *)(v0 + 2624) = v41;
  swift_errorRetain();
  uint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 4216) = v44;
  *uint64_t v44 = v0;
  v44[1] = sub_1000FAC60;
  uint64_t v45 = *(void *)(v0 + 3424);
  uint64_t v46 = *(void *)(v0 + 3408);
  return sub_10012D974((_OWORD *)(v0 + 2496), v46, v73, 1, v45, v61);
}

uint64_t sub_1000F9674()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F9770, 0, 0);
}

uint64_t sub_1000F9770()
{
  char v24 = *(unsigned char *)(v0 + 2490);
  uint64_t v22 = *(void *)(v0 + 3616);
  uint64_t v23 = *(void *)(v0 + 3624);
  uint64_t v21 = *(void *)(v0 + 3608);
  char v19 = *(unsigned char *)(v0 + 2303);
  char v20 = *(unsigned char *)(v0 + 2489);
  uint64_t v18 = *(void *)(v0 + 3600);
  uint64_t v17 = *(void *)(v0 + 3592);
  char v16 = *(unsigned char *)(v0 + 2302);
  uint64_t v14 = *(void *)(v0 + 3576);
  uint64_t v15 = *(void *)(v0 + 3584);
  char v12 = *(unsigned char *)(v0 + 2301);
  __int16 v13 = *(_WORD *)(v0 + 1090);
  char v11 = *(unsigned char *)(v0 + 2111);
  uint64_t v1 = *(void *)(v0 + 3568);
  long long v9 = *(_OWORD *)(v0 + 3536);
  long long v10 = *(_OWORD *)(v0 + 3552);
  long long v7 = *(_OWORD *)(v0 + 3504);
  long long v8 = *(_OWORD *)(v0 + 3520);
  __int16 v2 = *(_WORD *)(v0 + 2109);
  int v3 = *(_DWORD *)(v0 + 2297);
  uint64_t v4 = sub_100012D78((void *)(*(void *)(v0 + 3400) + 472), *(void *)(*(void *)(v0 + 3400) + 496));
  *(_WORD *)(v0 + 2304) = v2;
  *(_DWORD *)(v0 + 2306) = *(_DWORD *)(v0 + 442);
  *(_WORD *)(v0 + 2310) = *(_WORD *)(v0 + 446);
  *(_OWORD *)(v0 + 2312) = v7;
  *(_OWORD *)(v0 + 2328) = v8;
  *(_OWORD *)(v0 + 2344) = v9;
  *(_OWORD *)(v0 + 2360) = v10;
  *(void *)(v0 + 2376) = v1;
  *(unsigned char *)(v0 + 2384) = v11;
  *(_DWORD *)(v0 + 2385) = v3;
  *(unsigned char *)(v0 + 2389) = v12;
  *(_WORD *)(v0 + 2390) = v13;
  *(void *)(v0 + 2392) = v14;
  *(unsigned char *)(v0 + 2400) = *(unsigned char *)(v0 + 4288);
  *(_DWORD *)(v0 + 2401) = *(_DWORD *)(v0 + 1308);
  *(_DWORD *)(v0 + 2404) = *(_DWORD *)(v0 + 1311);
  *(void *)(v0 + 2408) = v15;
  *(unsigned char *)(v0 + 2416) = *(unsigned char *)(v0 + 4272);
  *(unsigned char *)(v0 + 2417) = v16;
  *(_DWORD *)(v0 + 2418) = *(_DWORD *)(v0 + 874);
  *(_WORD *)(v0 + 2422) = *(_WORD *)(v0 + 878);
  *(void *)(v0 + 2424) = v17;
  *(unsigned char *)(v0 + 2432) = *(unsigned char *)(v0 + 4240);
  *(_DWORD *)(v0 + 2433) = *(_DWORD *)(v0 + 1329);
  *(_DWORD *)(v0 + 2436) = *(_DWORD *)(v0 + 1332);
  *(void *)(v0 + 2440) = v18;
  *(unsigned char *)(v0 + 2448) = *(unsigned char *)(v0 + 4264);
  *(unsigned char *)(v0 + 2449) = v19;
  *(unsigned char *)(v0 + 2450) = v20;
  *(unsigned char *)(v0 + 2455) = *(unsigned char *)(v0 + 2106);
  *(_DWORD *)(v0 + 2451) = *(_DWORD *)(v0 + 2102);
  *(void *)(v0 + 2456) = v21;
  *(unsigned char *)(v0 + 2464) = *(unsigned char *)(v0 + 4304);
  *(_DWORD *)(v0 + 2468) = *(_DWORD *)(v0 + 1325);
  *(_DWORD *)(v0 + 2465) = *(_DWORD *)(v0 + 1322);
  *(void *)(v0 + 2472) = v22;
  *(void *)(v0 + 2480) = v23;
  *(unsigned char *)(v0 + 2488) = v24;
  uint64_t v5 = *v4;
  *(void *)(v0 + 3976) = *v4;
  return _swift_task_switch(sub_1000F9A1C, v5, 0);
}

uint64_t sub_1000F9A1C()
{
  uint64_t v1 = *(void *)(v0 + 3496);
  uint64_t v2 = *(void *)(v0 + 3488);
  uint64_t v3 = *(void *)(v0 + 3480);
  uint64_t v4 = *(void *)(v0 + 3416);
  uint64_t v5 = *(void *)(v0 + 3408);
  long long v6 = *(_OWORD *)(v0 + 2448);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 2432);
  *(_OWORD *)(v0 + 160) = v6;
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 2464);
  long long v7 = *(_OWORD *)(v0 + 2384);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 2368);
  *(_OWORD *)(v0 + 96) = v7;
  long long v8 = *(_OWORD *)(v0 + 2416);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 2400);
  *(_OWORD *)(v0 + 128) = v8;
  long long v9 = *(_OWORD *)(v0 + 2320);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 2304);
  *(_OWORD *)(v0 + 32) = v9;
  long long v10 = *(_OWORD *)(v0 + 2352);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 2336);
  *(_OWORD *)(v0 + 64) = v10;
  *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 2473);
  *(void *)(v0 + 208) = v5;
  *(void *)(v0 + 216) = v4;
  *(_WORD *)(v0 + 224) = 257;
  sub_10003675C(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 232);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 2304);
  *(void *)(v0 + 3984) = sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  char v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 3992) = v11;
  *(void *)(v0 + 4000) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v1, v3);
  uint64_t v12 = *(void *)(v0 + 2344);
  uint64_t v13 = *(void *)(v0 + 2352);
  char v22 = *(unsigned char *)(v0 + 2389);
  uint64_t v14 = *(void *)(v0 + 2424);
  LOBYTE(v4) = *(unsigned char *)(v0 + 2432);
  char v15 = *(unsigned char *)(v0 + 2417);
  LOBYTE(v2) = *(unsigned char *)(v0 + 2387);
  char v16 = *(unsigned char *)(v0 + 2384);
  __int16 v17 = *(_WORD *)(v0 + 2304);
  sub_100012960(&qword_1001E3CC0);
  uint64_t v18 = swift_allocObject();
  *(void *)(v0 + 4008) = v18;
  *(_OWORD *)(v18 + 16) = xmmword_100179990;
  *(_WORD *)(v18 + 32) = v17;
  *(void *)(v18 + 40) = v12;
  *(void *)(v18 + 48) = v13;
  *(unsigned char *)(v18 + 56) = v16;
  *(unsigned char *)(v18 + 57) = v2;
  *(unsigned char *)(v18 + 58) = v15;
  *(void *)(v18 + 64) = v14;
  *(unsigned char *)(v18 + 72) = v4;
  *(unsigned char *)(v18 + 73) = v22;
  *(void *)(v18 + 88) = 0;
  *(void *)(v18 + 96) = 0;
  *(void *)(v18 + 80) = 0;
  *(unsigned char *)(v18 + 104) = 1;
  swift_bridgeObjectRetain();
  char v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 4016) = v19;
  *char v19 = v0;
  v19[1] = sub_1000F9C5C;
  uint64_t v20 = *(void *)(v0 + 3424);
  return sub_100137FE8(v18, v20);
}

uint64_t sub_1000F9C5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 3976);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000F9D88, v1, 0);
}

uint64_t sub_1000F9D88()
{
  sub_100036824(v0 + 2304);
  return _swift_task_switch(sub_1000F9DF0, 0, 0);
}

uint64_t sub_1000F9DF0()
{
  char v1 = *(unsigned char *)(v0 + 2107);
  unsigned __int8 v2 = *(unsigned __int8 *)(v0 + 2108) > 1u;
  sub_10008F6B0(*(void *)(v0 + 3808), *(void *)(v0 + 3816), *(void *)(v0 + 3824), *(void *)(v0 + 3832), *(void *)(v0 + 3840), *(void *)(v0 + 3848), *(void *)(v0 + 3856), *(void *)(v0 + 3864), *(void *)(v0 + 3872));
  sub_10009485C(4, 0, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 2112), 2u, 2u, 1u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    v2,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_WORD *)(v0 + 2491) = *(_WORD *)(v0 + 2112);
  *(_DWORD *)(v0 + 226) = *(_DWORD *)(v0 + 2114);
  *(_WORD *)(v0 + 230) = *(_WORD *)(v0 + 2118);
  *(void *)(v0 + 4024) = *(void *)(v0 + 2120);
  *(_OWORD *)(v0 + 4032) = *(_OWORD *)(v0 + 2128);
  *(_OWORD *)(v0 + 4048) = *(_OWORD *)(v0 + 2144);
  *(_OWORD *)(v0 + 4064) = *(_OWORD *)(v0 + 2160);
  *(void *)(v0 + 4080) = *(void *)(v0 + 2176);
  *(void *)(v0 + 4088) = *(void *)(v0 + 2184);
  *(unsigned char *)(v0 + 2493) = *(unsigned char *)(v0 + 2192);
  *(_WORD *)(v0 + 2494) = *(_WORD *)(v0 + 2193);
  *(unsigned char *)(v0 + 2681) = *(unsigned char *)(v0 + 2195);
  *(_WORD *)(v0 + 2682) = *(_WORD *)(v0 + 2196);
  *(_WORD *)(v0 + 1306) = *(_WORD *)(v0 + 2198);
  *(void *)(v0 + 4096) = *(void *)(v0 + 2200);
  *(unsigned char *)(v0 + 4256) = *(unsigned char *)(v0 + 2208);
  *(_DWORD *)(v0 + 1315) = *(_DWORD *)(v0 + 2209);
  *(_DWORD *)(v0 + 1318) = *(_DWORD *)(v0 + 2212);
  *(void *)(v0 + 4104) = *(void *)(v0 + 2216);
  *(unsigned char *)(v0 + 4248) = *(unsigned char *)(v0 + 2224);
  *(unsigned char *)(v0 + 2684) = *(unsigned char *)(v0 + 2225);
  *(_WORD *)(v0 + 662) = *(_WORD *)(v0 + 2230);
  *(_DWORD *)(v0 + 658) = *(_DWORD *)(v0 + 2226);
  *(void *)(v0 + 4112) = *(void *)(v0 + 2232);
  *(unsigned char *)(v0 + 4280) = *(unsigned char *)(v0 + 2240);
  *(_DWORD *)(v0 + 1908) = *(_DWORD *)(v0 + 2244);
  *(_DWORD *)(v0 + 1905) = *(_DWORD *)(v0 + 2241);
  *(void *)(v0 + 4120) = *(void *)(v0 + 2248);
  *(unsigned char *)(v0 + 4296) = *(unsigned char *)(v0 + 2256);
  *(unsigned char *)(v0 + 2685) = *(unsigned char *)(v0 + 2257);
  *(unsigned char *)(v0 + 2686) = *(unsigned char *)(v0 + 2258);
  int v3 = *(_DWORD *)(v0 + 2259);
  *(unsigned char *)(v0 + 2101) = *(unsigned char *)(v0 + 2263);
  *(_DWORD *)(v0 + 2097) = v3;
  *(void *)(v0 + 4128) = *(void *)(v0 + 2264);
  *(unsigned char *)(v0 + 4312) = *(unsigned char *)(v0 + 2272);
  int v4 = *(_DWORD *)(v0 + 2273);
  *(_DWORD *)(v0 + 1716) = *(_DWORD *)(v0 + 2276);
  *(_DWORD *)(v0 + 1713) = v4;
  *(void *)(v0 + 4136) = *(void *)(v0 + 2280);
  *(void *)(v0 + 4144) = *(void *)(v0 + 2288);
  *(unsigned char *)(v0 + 2687) = *(unsigned char *)(v0 + 2296);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 4152) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000FA0F4;
  uint64_t v6 = *(void *)(v0 + 3936);
  uint64_t v7 = *(void *)(v0 + 3928);
  uint64_t v8 = *(void *)(v0 + 3432);
  uint64_t v9 = *(void *)(v0 + 3416);
  uint64_t v10 = *(void *)(v0 + 3408);
  return sub_1000FE53C(v7, v6, v10, v9, v8, v1 & 1);
}

uint64_t sub_1000FA0F4()
{
  unsigned __int8 v2 = (void *)*v1;
  v2[520] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000FBB2C, 0, 0);
  }
  else
  {
    int v3 = (void *)swift_task_alloc();
    v2[521] = v3;
    *int v3 = v2;
    v3[1] = sub_1000FA268;
    uint64_t v4 = v2[422];
    return sub_1000E5070(v4);
  }
}

uint64_t sub_1000FA268()
{
  *(void *)(*(void *)v1 + 4176) = v0;
  swift_task_dealloc();
  if (v0) {
    unsigned __int8 v2 = sub_1000FBFC8;
  }
  else {
    unsigned __int8 v2 = sub_1000FA37C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FA37C()
{
  char v25 = *(unsigned char *)(v0 + 2687);
  uint64_t v23 = *(void *)(v0 + 4136);
  uint64_t v24 = *(void *)(v0 + 4144);
  uint64_t v22 = *(void *)(v0 + 4128);
  __int16 v21 = *(_WORD *)(v0 + 2685);
  uint64_t v20 = *(void *)(v0 + 4120);
  uint64_t v19 = *(void *)(v0 + 4112);
  char v18 = *(unsigned char *)(v0 + 2684);
  uint64_t v16 = *(void *)(v0 + 4096);
  uint64_t v17 = *(void *)(v0 + 4104);
  __int16 v1 = *(_WORD *)(v0 + 1306);
  __int16 v2 = *(_WORD *)(v0 + 2682);
  char v3 = *(unsigned char *)(v0 + 2681);
  char v4 = *(unsigned char *)(v0 + 2495);
  __int16 v5 = *(_WORD *)(v0 + 2493);
  uint64_t v6 = *(void *)(v0 + 4088);
  long long v14 = *(_OWORD *)(v0 + 4056);
  long long v15 = *(_OWORD *)(v0 + 4072);
  long long v12 = *(_OWORD *)(v0 + 4024);
  long long v13 = *(_OWORD *)(v0 + 4040);
  __int16 v7 = *(_WORD *)(v0 + 2491);
  uint64_t v8 = sub_100012D78((void *)(*(void *)(v0 + 3400) + 472), *(void *)(*(void *)(v0 + 3400) + 496));
  *(_WORD *)(v0 + 1528) = v7;
  *(_DWORD *)(v0 + 1530) = *(_DWORD *)(v0 + 226);
  *(_WORD *)(v0 + 1534) = *(_WORD *)(v0 + 230);
  *(_OWORD *)(v0 + 1536) = v12;
  *(_OWORD *)(v0 + 1552) = v13;
  *(_OWORD *)(v0 + 1568) = v14;
  *(_OWORD *)(v0 + 1584) = v15;
  *(void *)(v0 + 1600) = v6;
  *(_WORD *)(v0 + 1608) = v5;
  *(unsigned char *)(v0 + 1610) = v4;
  *(unsigned char *)(v0 + 1611) = v3;
  *(_WORD *)(v0 + 1612) = v2;
  *(_WORD *)(v0 + 1614) = v1;
  *(void *)(v0 + 1616) = v16;
  *(unsigned char *)(v0 + 1624) = *(unsigned char *)(v0 + 4256);
  *(_DWORD *)(v0 + 1625) = *(_DWORD *)(v0 + 1315);
  *(_DWORD *)(v0 + 1628) = *(_DWORD *)(v0 + 1318);
  *(void *)(v0 + 1632) = v17;
  *(unsigned char *)(v0 + 1640) = *(unsigned char *)(v0 + 4248);
  *(unsigned char *)(v0 + 1641) = v18;
  *(_DWORD *)(v0 + 1642) = *(_DWORD *)(v0 + 658);
  *(_WORD *)(v0 + 1646) = *(_WORD *)(v0 + 662);
  *(void *)(v0 + 1648) = v19;
  *(unsigned char *)(v0 + 1656) = *(unsigned char *)(v0 + 4280);
  int v9 = *(_DWORD *)(v0 + 1905);
  *(_DWORD *)(v0 + 1660) = *(_DWORD *)(v0 + 1908);
  *(_DWORD *)(v0 + 1657) = v9;
  *(void *)(v0 + 1664) = v20;
  *(unsigned char *)(v0 + 1672) = *(unsigned char *)(v0 + 4296);
  *(_WORD *)(v0 + 1673) = v21;
  *(unsigned char *)(v0 + 1679) = *(unsigned char *)(v0 + 2101);
  *(_DWORD *)(v0 + 1675) = *(_DWORD *)(v0 + 2097);
  *(void *)(v0 + 1680) = v22;
  *(unsigned char *)(v0 + 1688) = *(unsigned char *)(v0 + 4312);
  *(_DWORD *)(v0 + 1689) = *(_DWORD *)(v0 + 1713);
  *(_DWORD *)(v0 + 1692) = *(_DWORD *)(v0 + 1716);
  *(void *)(v0 + 1696) = v23;
  *(void *)(v0 + 1704) = v24;
  *(unsigned char *)(v0 + 1712) = v25;
  uint64_t v10 = *v8;
  *(void *)(v0 + 4184) = *v8;
  return _swift_task_switch(sub_1000FA608, v10, 0);
}

uint64_t sub_1000FA608()
{
  __int16 v1 = *(void (**)(uint64_t, uint64_t))(v0 + 3992);
  uint64_t v2 = *(void *)(v0 + 3496);
  uint64_t v3 = *(void *)(v0 + 3480);
  uint64_t v4 = *(void *)(v0 + 3416);
  uint64_t v5 = *(void *)(v0 + 3408);
  long long v6 = *(_OWORD *)(v0 + 1672);
  *(_OWORD *)(v0 + 792) = *(_OWORD *)(v0 + 1656);
  *(_OWORD *)(v0 + 808) = v6;
  *(_OWORD *)(v0 + 824) = *(_OWORD *)(v0 + 1688);
  *(_OWORD *)(v0 + 833) = *(_OWORD *)(v0 + 1697);
  long long v7 = *(_OWORD *)(v0 + 1608);
  *(_OWORD *)(v0 + 728) = *(_OWORD *)(v0 + 1592);
  *(_OWORD *)(v0 + 744) = v7;
  long long v8 = *(_OWORD *)(v0 + 1640);
  *(_OWORD *)(v0 + 760) = *(_OWORD *)(v0 + 1624);
  *(_OWORD *)(v0 + 776) = v8;
  long long v9 = *(_OWORD *)(v0 + 1544);
  *(_OWORD *)(v0 + 664) = *(_OWORD *)(v0 + 1528);
  *(_OWORD *)(v0 + 680) = v9;
  long long v10 = *(_OWORD *)(v0 + 1576);
  *(_OWORD *)(v0 + 696) = *(_OWORD *)(v0 + 1560);
  *(_OWORD *)(v0 + 712) = v10;
  *(void *)(v0 + 856) = v5;
  *(void *)(v0 + 864) = v4;
  *(_WORD *)(v0 + 872) = 257;
  sub_10003675C(v0 + 664);
  sub_1000367C8(v0 + 664, v0 + 880);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 1528);
  AsyncStream.Continuation.yield(_:)();
  v1(v2, v3);
  sub_100036824(v0 + 1528);
  return _swift_task_switch(sub_1000FA758, 0, 0);
}

uint64_t sub_1000FA758()
{
  sub_100012D78((void *)(v0[425] + 432), *(void *)(v0[425] + 456));
  swift_bridgeObjectRelease();
  __int16 v1 = (void *)swift_task_alloc();
  v0[524] = v1;
  void *v1 = v0;
  v1[1] = sub_1000FA82C;
  uint64_t v2 = v0[495];
  uint64_t v3 = v0[494];
  uint64_t v4 = v0[492];
  uint64_t v5 = v0[491];
  uint64_t v6 = v0[427];
  uint64_t v7 = v0[426];
  uint64_t v8 = v0[424];
  uint64_t v9 = v0[423];
  return sub_1000B394C(v7, v6, v9, v8, v3, v2, v5, v4);
}

uint64_t sub_1000FA82C()
{
  *(void *)(*(void *)v1 + 4200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000FAA00;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000FA974;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FA974()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FAA00()
{
  uint64_t v1 = v0[434];
  uint64_t v2 = v0[431];
  uint64_t v3 = v0[430];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[417] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to report conversion: %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[431] + 8))(v0[434], v0[430]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000FAC60()
{
  uint64_t v1 = *v0 + 2688;
  swift_task_dealloc();
  swift_errorRelease();
  sub_100036824(v1);
  return _swift_task_switch(sub_1000FAD84, 0, 0);
}

uint64_t sub_1000FAD84()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FAE18()
{
  uint64_t v65 = v0;
  uint64_t v1 = *(void *)(v0 + 3664);
  *(void *)(v0 + 4208) = v1;
  uint64_t v2 = *(void *)(v0 + 3464);
  uint64_t v3 = *(void *)(v0 + 3448);
  uint64_t v4 = *(void *)(v0 + 3440);
  uint64_t v5 = *(void *)(v0 + 3376);
  uint64_t v6 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10005D5A0(v5);
  swift_errorRetain();
  sub_10005D5A0(v5);
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v60 = *(void *)(v0 + 3448);
    uint64_t v61 = *(void *)(v0 + 3440);
    uint64_t v62 = *(void *)(v0 + 3464);
    uint64_t v9 = *(void *)(v0 + 3376);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = v1;
    uint64_t v13 = *(void *)(v9 + 56);
    unint64_t v12 = *(void *)(v9 + 64);
    swift_bridgeObjectRetain();
    uint64_t v14 = v13;
    uint64_t v1 = v11;
    *(void *)(v0 + 3328) = sub_100147668(v14, v12, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v9);
    sub_10005D5D8(v9);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3320) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v56 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Fetch postback failed for conversion ID: %s, error: %@", (uint8_t *)v10, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 3464);
    uint64_t v17 = *(void *)(v0 + 3448);
    uint64_t v18 = *(void *)(v0 + 3440);
    uint64_t v19 = *(void *)(v0 + 3376);
    sub_10005D5D8(v19);
    sub_10005D5D8(v19);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  uint64_t v54 = v1;
  char v59 = *(unsigned char *)(v0 + 2490);
  uint64_t v57 = *(void *)(v0 + 3616);
  uint64_t v58 = *(void *)(v0 + 3624);
  uint64_t v55 = *(void *)(v0 + 3608);
  char v52 = *(unsigned char *)(v0 + 2303);
  char v53 = *(unsigned char *)(v0 + 2489);
  uint64_t v50 = *(void *)(v0 + 3592);
  uint64_t v51 = *(void *)(v0 + 3600);
  char v49 = *(unsigned char *)(v0 + 2302);
  uint64_t v47 = *(void *)(v0 + 3576);
  uint64_t v48 = *(void *)(v0 + 3584);
  char v45 = *(unsigned char *)(v0 + 2111);
  char v46 = *(unsigned char *)(v0 + 2301);
  uint64_t v44 = *(void *)(v0 + 3568);
  long long v42 = *(_OWORD *)(v0 + 3536);
  long long v43 = *(_OWORD *)(v0 + 3552);
  __int16 v41 = *(_WORD *)(v0 + 2109);
  uint64_t v63 = *(void *)(v0 + 3416);
  uint64_t v20 = *(void *)(v0 + 3400);
  int v21 = *(_DWORD *)(v0 + 2297);
  uint64_t v40 = sub_100094708(v1);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100012D78((void *)(v20 + 472), *(void *)(v20 + 496));
  *(_DWORD *)(v0 + 2769) = v21;
  *(unsigned char *)(v0 + 2784) = *(unsigned char *)(v0 + 4288);
  *(unsigned char *)(v0 + 2800) = *(unsigned char *)(v0 + 4272);
  *(unsigned char *)(v0 + 2816) = *(unsigned char *)(v0 + 4240);
  *(unsigned char *)(v0 + 2832) = *(unsigned char *)(v0 + 4264);
  *(unsigned char *)(v0 + 2848) = *(unsigned char *)(v0 + 4304);
  *(_WORD *)(v0 + 2688) = v41;
  *(void *)(v0 + 2696) = v40;
  *(void *)(v0 + 2704) = v23;
  *(void *)(v0 + 2712) = v25;
  *(void *)(v0 + 2720) = v27;
  *(_OWORD *)(v0 + 2728) = v42;
  *(_OWORD *)(v0 + 2744) = v43;
  *(void *)(v0 + 2760) = v44;
  *(unsigned char *)(v0 + 2768) = v45;
  *(unsigned char *)(v0 + 2773) = v46;
  *(void *)(v0 + 2776) = v47;
  *(void *)(v0 + 2792) = v48;
  *(unsigned char *)(v0 + 2801) = v49;
  *(void *)(v0 + 2808) = v50;
  *(void *)(v0 + 2824) = v51;
  *(unsigned char *)(v0 + 2833) = v52;
  *(unsigned char *)(v0 + 2834) = v53;
  *(void *)(v0 + 2840) = v55;
  *(void *)(v0 + 2856) = v57;
  *(void *)(v0 + 2864) = v58;
  *(unsigned char *)(v0 + 2872) = v59;
  long long v28 = *(_OWORD *)(v0 + 2857);
  long long v29 = *(_OWORD *)(v0 + 2688);
  long long v30 = *(_OWORD *)(v0 + 2704);
  *(_OWORD *)(v0 + 2544) = *(_OWORD *)(v0 + 2736);
  *(_OWORD *)(v0 + 2528) = *(_OWORD *)(v0 + 2720);
  *(_OWORD *)(v0 + 2512) = v30;
  *(_OWORD *)(v0 + 2496) = v29;
  long long v31 = *(_OWORD *)(v0 + 2752);
  long long v32 = *(_OWORD *)(v0 + 2768);
  *(_OWORD *)(v0 + 2608) = *(_OWORD *)(v0 + 2800);
  *(_OWORD *)(v0 + 2592) = *(_OWORD *)(v0 + 2784);
  *(_OWORD *)(v0 + 2576) = v32;
  *(_OWORD *)(v0 + 2560) = v31;
  long long v33 = *(_OWORD *)(v0 + 2816);
  long long v34 = *(_OWORD *)(v0 + 2832);
  long long v35 = *(_OWORD *)(v0 + 2848);
  *(_OWORD *)(v0 + 2665) = v28;
  *(_OWORD *)(v0 + 2656) = v35;
  *(_OWORD *)(v0 + 2640) = v34;
  *(_OWORD *)(v0 + 2624) = v33;
  swift_errorRetain();
  long long v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 4216) = v36;
  *long long v36 = v0;
  v36[1] = sub_1000FAC60;
  uint64_t v37 = *(void *)(v0 + 3424);
  uint64_t v38 = *(void *)(v0 + 3408);
  return sub_10012D974((_OWORD *)(v0 + 2496), v38, v63, 1, v37, v54);
}

uint64_t sub_1000FB38C()
{
  uint64_t v65 = v0;
  uint64_t v1 = *(void *)(v0 + 3800);
  *(void *)(v0 + 4208) = v1;
  uint64_t v2 = *(void *)(v0 + 3464);
  uint64_t v3 = *(void *)(v0 + 3448);
  uint64_t v4 = *(void *)(v0 + 3440);
  uint64_t v5 = *(void *)(v0 + 3376);
  uint64_t v6 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10005D5A0(v5);
  swift_errorRetain();
  sub_10005D5A0(v5);
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v60 = *(void *)(v0 + 3448);
    uint64_t v61 = *(void *)(v0 + 3440);
    uint64_t v62 = *(void *)(v0 + 3464);
    uint64_t v9 = *(void *)(v0 + 3376);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = v1;
    uint64_t v13 = *(void *)(v9 + 56);
    unint64_t v12 = *(void *)(v9 + 64);
    swift_bridgeObjectRetain();
    uint64_t v14 = v13;
    uint64_t v1 = v11;
    *(void *)(v0 + 3328) = sub_100147668(v14, v12, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v9);
    sub_10005D5D8(v9);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3320) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v56 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Fetch postback failed for conversion ID: %s, error: %@", (uint8_t *)v10, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 3464);
    uint64_t v17 = *(void *)(v0 + 3448);
    uint64_t v18 = *(void *)(v0 + 3440);
    uint64_t v19 = *(void *)(v0 + 3376);
    sub_10005D5D8(v19);
    sub_10005D5D8(v19);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  uint64_t v54 = v1;
  char v59 = *(unsigned char *)(v0 + 2490);
  uint64_t v57 = *(void *)(v0 + 3616);
  uint64_t v58 = *(void *)(v0 + 3624);
  uint64_t v55 = *(void *)(v0 + 3608);
  char v52 = *(unsigned char *)(v0 + 2303);
  char v53 = *(unsigned char *)(v0 + 2489);
  uint64_t v50 = *(void *)(v0 + 3592);
  uint64_t v51 = *(void *)(v0 + 3600);
  char v49 = *(unsigned char *)(v0 + 2302);
  uint64_t v47 = *(void *)(v0 + 3576);
  uint64_t v48 = *(void *)(v0 + 3584);
  char v45 = *(unsigned char *)(v0 + 2111);
  char v46 = *(unsigned char *)(v0 + 2301);
  uint64_t v44 = *(void *)(v0 + 3568);
  long long v42 = *(_OWORD *)(v0 + 3536);
  long long v43 = *(_OWORD *)(v0 + 3552);
  __int16 v41 = *(_WORD *)(v0 + 2109);
  uint64_t v63 = *(void *)(v0 + 3416);
  uint64_t v20 = *(void *)(v0 + 3400);
  int v21 = *(_DWORD *)(v0 + 2297);
  uint64_t v40 = sub_100094708(v1);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100012D78((void *)(v20 + 472), *(void *)(v20 + 496));
  *(_DWORD *)(v0 + 2769) = v21;
  *(unsigned char *)(v0 + 2784) = *(unsigned char *)(v0 + 4288);
  *(unsigned char *)(v0 + 2800) = *(unsigned char *)(v0 + 4272);
  *(unsigned char *)(v0 + 2816) = *(unsigned char *)(v0 + 4240);
  *(unsigned char *)(v0 + 2832) = *(unsigned char *)(v0 + 4264);
  *(unsigned char *)(v0 + 2848) = *(unsigned char *)(v0 + 4304);
  *(_WORD *)(v0 + 2688) = v41;
  *(void *)(v0 + 2696) = v40;
  *(void *)(v0 + 2704) = v23;
  *(void *)(v0 + 2712) = v25;
  *(void *)(v0 + 2720) = v27;
  *(_OWORD *)(v0 + 2728) = v42;
  *(_OWORD *)(v0 + 2744) = v43;
  *(void *)(v0 + 2760) = v44;
  *(unsigned char *)(v0 + 2768) = v45;
  *(unsigned char *)(v0 + 2773) = v46;
  *(void *)(v0 + 2776) = v47;
  *(void *)(v0 + 2792) = v48;
  *(unsigned char *)(v0 + 2801) = v49;
  *(void *)(v0 + 2808) = v50;
  *(void *)(v0 + 2824) = v51;
  *(unsigned char *)(v0 + 2833) = v52;
  *(unsigned char *)(v0 + 2834) = v53;
  *(void *)(v0 + 2840) = v55;
  *(void *)(v0 + 2856) = v57;
  *(void *)(v0 + 2864) = v58;
  *(unsigned char *)(v0 + 2872) = v59;
  long long v28 = *(_OWORD *)(v0 + 2857);
  long long v29 = *(_OWORD *)(v0 + 2688);
  long long v30 = *(_OWORD *)(v0 + 2704);
  *(_OWORD *)(v0 + 2544) = *(_OWORD *)(v0 + 2736);
  *(_OWORD *)(v0 + 2528) = *(_OWORD *)(v0 + 2720);
  *(_OWORD *)(v0 + 2512) = v30;
  *(_OWORD *)(v0 + 2496) = v29;
  long long v31 = *(_OWORD *)(v0 + 2752);
  long long v32 = *(_OWORD *)(v0 + 2768);
  *(_OWORD *)(v0 + 2608) = *(_OWORD *)(v0 + 2800);
  *(_OWORD *)(v0 + 2592) = *(_OWORD *)(v0 + 2784);
  *(_OWORD *)(v0 + 2576) = v32;
  *(_OWORD *)(v0 + 2560) = v31;
  long long v33 = *(_OWORD *)(v0 + 2816);
  long long v34 = *(_OWORD *)(v0 + 2832);
  long long v35 = *(_OWORD *)(v0 + 2848);
  *(_OWORD *)(v0 + 2665) = v28;
  *(_OWORD *)(v0 + 2656) = v35;
  *(_OWORD *)(v0 + 2640) = v34;
  *(_OWORD *)(v0 + 2624) = v33;
  swift_errorRetain();
  long long v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 4216) = v36;
  *long long v36 = v0;
  v36[1] = sub_1000FAC60;
  uint64_t v37 = *(void *)(v0 + 3424);
  uint64_t v38 = *(void *)(v0 + 3408);
  return sub_10012D974((_OWORD *)(v0 + 2496), v38, v63, 1, v37, v54);
}

uint64_t sub_1000FB900()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 3992);
  uint64_t v2 = *(void *)(v0 + 3496);
  uint64_t v3 = *(void *)(v0 + 3480);
  uint64_t v4 = *(void *)(v0 + 3416);
  uint64_t v5 = *(void *)(v0 + 3408);
  long long v6 = *(_OWORD *)(v0 + 1864);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 1848);
  *(_OWORD *)(v0 + 592) = v6;
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 1880);
  *(_OWORD *)(v0 + 617) = *(_OWORD *)(v0 + 1889);
  long long v7 = *(_OWORD *)(v0 + 1800);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 1784);
  *(_OWORD *)(v0 + 528) = v7;
  long long v8 = *(_OWORD *)(v0 + 1832);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 1816);
  *(_OWORD *)(v0 + 560) = v8;
  long long v9 = *(_OWORD *)(v0 + 1736);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1720);
  *(_OWORD *)(v0 + 464) = v9;
  long long v10 = *(_OWORD *)(v0 + 1768);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 1752);
  *(_OWORD *)(v0 + 496) = v10;
  *(void *)(v0 + 640) = v5;
  *(void *)(v0 + 648) = v4;
  *(_WORD *)(v0 + 656) = 257;
  sub_10003675C(v0 + 448);
  sub_1000367C8(v0 + 448, v0 + 1096);
  swift_bridgeObjectRetain();
  sub_10001547C(v0 + 1720);
  AsyncStream.Continuation.yield(_:)();
  v1(v2, v3);
  sub_100036824(v0 + 1720);
  return _swift_task_switch(sub_1000FBA50, 0, 0);
}

uint64_t sub_1000FBA50()
{
  swift_errorRelease();
  sub_100012D78((void *)(v0[425] + 432), *(void *)(v0[425] + 456));
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[524] = v1;
  void *v1 = v0;
  v1[1] = sub_1000FA82C;
  uint64_t v2 = v0[495];
  uint64_t v3 = v0[494];
  uint64_t v4 = v0[492];
  uint64_t v5 = v0[491];
  uint64_t v6 = v0[427];
  uint64_t v7 = v0[426];
  uint64_t v8 = v0[424];
  uint64_t v9 = v0[423];
  return sub_1000B394C(v7, v6, v9, v8, v3, v2, v5, v4);
}

uint64_t sub_1000FBB2C()
{
  uint64_t v57 = v0;
  uint64_t v1 = *(void *)(v0 + 4160);
  *(void *)(v0 + 4224) = v1;
  uint64_t v2 = *(void *)(v0 + 3456);
  uint64_t v3 = *(void *)(v0 + 3448);
  uint64_t v4 = *(void *)(v0 + 3440);
  uint64_t v5 = *(void *)(v0 + 3376);
  uint64_t v6 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10005D5A0(v5);
  swift_errorRetain();
  sub_10005D5A0(v5);
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v54 = *(void *)(v0 + 3456);
    uint64_t v50 = *(void *)(v0 + 3448);
    uint64_t v52 = *(void *)(v0 + 3440);
    uint64_t v9 = *(void *)(v0 + 3376);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v47 = (void *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v12 = *(void *)(v9 + 56);
    unint64_t v11 = *(void *)(v9 + 64);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 3352) = sub_100147668(v12, v11, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v9);
    sub_10005D5D8(v9);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3360) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v47 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Postback finalization failed for conversion ID: %s, error: %@", (uint8_t *)v10, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v52);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 3456);
    uint64_t v15 = *(void *)(v0 + 3448);
    uint64_t v16 = *(void *)(v0 + 3440);
    uint64_t v17 = *(void *)(v0 + 3376);
    sub_10005D5D8(v17);
    sub_10005D5D8(v17);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  char v55 = *(unsigned char *)(v0 + 2687);
  uint64_t v53 = *(void *)(v0 + 4144);
  uint64_t v49 = *(void *)(v0 + 4128);
  uint64_t v51 = *(void *)(v0 + 4136);
  __int16 v48 = *(_WORD *)(v0 + 2685);
  uint64_t v45 = *(void *)(v0 + 4112);
  uint64_t v46 = *(void *)(v0 + 4120);
  char v44 = *(unsigned char *)(v0 + 2684);
  uint64_t v42 = *(void *)(v0 + 4096);
  uint64_t v43 = *(void *)(v0 + 4104);
  char v40 = *(unsigned char *)(v0 + 2681);
  __int16 v41 = *(_WORD *)(v0 + 2682);
  __int16 v38 = *(_WORD *)(v0 + 2493);
  char v39 = *(unsigned char *)(v0 + 2495);
  uint64_t v37 = *(void *)(v0 + 4088);
  long long v35 = *(_OWORD *)(v0 + 4056);
  long long v36 = *(_OWORD *)(v0 + 4072);
  uint64_t v18 = *(void *)(v0 + 3400);
  __int16 v19 = *(_WORD *)(v0 + 2491);
  uint64_t v20 = sub_100094708(v1);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_100012D78((void *)(v18 + 472), *(void *)(v18 + 496));
  char v28 = *(unsigned char *)(v0 + 4256);
  char v29 = *(unsigned char *)(v0 + 4248);
  char v30 = *(unsigned char *)(v0 + 4280);
  char v31 = *(unsigned char *)(v0 + 4296);
  char v32 = *(unsigned char *)(v0 + 4312);
  *(_WORD *)(v0 + 1720) = v19;
  *(void *)(v0 + 1728) = v20;
  *(void *)(v0 + 1736) = v22;
  *(void *)(v0 + 1744) = v24;
  *(void *)(v0 + 1752) = v26;
  *(_OWORD *)(v0 + 1760) = v35;
  *(_OWORD *)(v0 + 1776) = v36;
  *(void *)(v0 + 1792) = v37;
  *(_WORD *)(v0 + 1800) = v38;
  *(unsigned char *)(v0 + 1802) = v39;
  *(unsigned char *)(v0 + 1803) = v40;
  *(_WORD *)(v0 + 1804) = v41;
  *(void *)(v0 + 1808) = v42;
  *(unsigned char *)(v0 + 1816) = v28;
  *(void *)(v0 + 1824) = v43;
  *(unsigned char *)(v0 + 1832) = v29;
  *(unsigned char *)(v0 + 1833) = v44;
  *(void *)(v0 + 1840) = v45;
  *(unsigned char *)(v0 + 1848) = v30;
  *(void *)(v0 + 1856) = v46;
  *(unsigned char *)(v0 + 1864) = v31;
  *(_WORD *)(v0 + 1865) = v48;
  *(void *)(v0 + 1872) = v49;
  *(unsigned char *)(v0 + 1880) = v32;
  *(void *)(v0 + 1888) = v51;
  *(void *)(v0 + 1896) = v53;
  *(unsigned char *)(v0 + 1904) = v55;
  uint64_t v33 = *v27;
  *(void *)(v0 + 4232) = *v27;
  return _swift_task_switch(sub_1000FB900, v33, 0);
}

uint64_t sub_1000FBFC8()
{
  uint64_t v57 = v0;
  uint64_t v1 = *(void *)(v0 + 4176);
  *(void *)(v0 + 4224) = v1;
  uint64_t v2 = *(void *)(v0 + 3456);
  uint64_t v3 = *(void *)(v0 + 3448);
  uint64_t v4 = *(void *)(v0 + 3440);
  uint64_t v5 = *(void *)(v0 + 3376);
  uint64_t v6 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10005D5A0(v5);
  swift_errorRetain();
  sub_10005D5A0(v5);
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v54 = *(void *)(v0 + 3456);
    uint64_t v50 = *(void *)(v0 + 3448);
    uint64_t v52 = *(void *)(v0 + 3440);
    uint64_t v9 = *(void *)(v0 + 3376);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v47 = (void *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v12 = *(void *)(v9 + 56);
    unint64_t v11 = *(void *)(v9 + 64);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 3352) = sub_100147668(v12, v11, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005D5D8(v9);
    sub_10005D5D8(v9);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3360) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v47 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Postback finalization failed for conversion ID: %s, error: %@", (uint8_t *)v10, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v52);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 3456);
    uint64_t v15 = *(void *)(v0 + 3448);
    uint64_t v16 = *(void *)(v0 + 3440);
    uint64_t v17 = *(void *)(v0 + 3376);
    sub_10005D5D8(v17);
    sub_10005D5D8(v17);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  char v55 = *(unsigned char *)(v0 + 2687);
  uint64_t v53 = *(void *)(v0 + 4144);
  uint64_t v49 = *(void *)(v0 + 4128);
  uint64_t v51 = *(void *)(v0 + 4136);
  __int16 v48 = *(_WORD *)(v0 + 2685);
  uint64_t v45 = *(void *)(v0 + 4112);
  uint64_t v46 = *(void *)(v0 + 4120);
  char v44 = *(unsigned char *)(v0 + 2684);
  uint64_t v42 = *(void *)(v0 + 4096);
  uint64_t v43 = *(void *)(v0 + 4104);
  char v40 = *(unsigned char *)(v0 + 2681);
  __int16 v41 = *(_WORD *)(v0 + 2682);
  __int16 v38 = *(_WORD *)(v0 + 2493);
  char v39 = *(unsigned char *)(v0 + 2495);
  uint64_t v37 = *(void *)(v0 + 4088);
  long long v35 = *(_OWORD *)(v0 + 4056);
  long long v36 = *(_OWORD *)(v0 + 4072);
  uint64_t v18 = *(void *)(v0 + 3400);
  __int16 v19 = *(_WORD *)(v0 + 2491);
  uint64_t v20 = sub_100094708(v1);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_100012D78((void *)(v18 + 472), *(void *)(v18 + 496));
  char v28 = *(unsigned char *)(v0 + 4256);
  char v29 = *(unsigned char *)(v0 + 4248);
  char v30 = *(unsigned char *)(v0 + 4280);
  char v31 = *(unsigned char *)(v0 + 4296);
  char v32 = *(unsigned char *)(v0 + 4312);
  *(_WORD *)(v0 + 1720) = v19;
  *(void *)(v0 + 1728) = v20;
  *(void *)(v0 + 1736) = v22;
  *(void *)(v0 + 1744) = v24;
  *(void *)(v0 + 1752) = v26;
  *(_OWORD *)(v0 + 1760) = v35;
  *(_OWORD *)(v0 + 1776) = v36;
  *(void *)(v0 + 1792) = v37;
  *(_WORD *)(v0 + 1800) = v38;
  *(unsigned char *)(v0 + 1802) = v39;
  *(unsigned char *)(v0 + 1803) = v40;
  *(_WORD *)(v0 + 1804) = v41;
  *(void *)(v0 + 1808) = v42;
  *(unsigned char *)(v0 + 1816) = v28;
  *(void *)(v0 + 1824) = v43;
  *(unsigned char *)(v0 + 1832) = v29;
  *(unsigned char *)(v0 + 1833) = v44;
  *(void *)(v0 + 1840) = v45;
  *(unsigned char *)(v0 + 1848) = v30;
  *(void *)(v0 + 1856) = v46;
  *(unsigned char *)(v0 + 1864) = v31;
  *(_WORD *)(v0 + 1865) = v48;
  *(void *)(v0 + 1872) = v49;
  *(unsigned char *)(v0 + 1880) = v32;
  *(void *)(v0 + 1888) = v51;
  *(void *)(v0 + 1896) = v53;
  *(unsigned char *)(v0 + 1904) = v55;
  uint64_t v33 = *v27;
  *(void *)(v0 + 4232) = *v27;
  return _swift_task_switch(sub_1000FB900, v33, 0);
}

double sub_1000FC464@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 connection];
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = [self predicateWithProperty:v5 equalToValue:v6];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v8 = sub_10011D1D8(v4, v7, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  long long v23 = 0u;
  memset(v24, 0, 19);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v18 = &v19;
  sub_10012893C((uint64_t)sub_10004EC74, (uint64_t)v17, v8);
  if (v2)
  {
    sub_10004EC7C(v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1));
  }
  else
  {

    __int16 v10 = v24[1];
    char v11 = BYTE2(v24[1]);
    double result = *(double *)&v19;
    long long v12 = v20;
    long long v13 = v21;
    long long v14 = v22;
    long long v15 = v23;
    long long v16 = v24[0];
    *(_OWORD *)a2 = v19;
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v14;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v16;
    *(unsigned char *)(a2 + 98) = v11;
    *(_WORD *)(a2 + 96) = v10;
  }
  return result;
}

void sub_1000FC654(uint64_t a1@<X8>)
{
  sub_10008EF20((uint64_t)v3);
  if (!v1) {
    sub_100059F98((uint64_t)v3, a1, &qword_1001E3D38);
  }
}

uint64_t sub_1000FC6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[141] = v6;
  v7[140] = a6;
  v7[139] = a5;
  v7[138] = a4;
  v7[137] = a3;
  v7[136] = a2;
  v7[135] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[142] = v8;
  v7[143] = *(void *)(v8 - 8);
  v7[144] = swift_task_alloc();
  v7[145] = swift_task_alloc();
  v7[146] = swift_task_alloc();
  v7[147] = swift_task_alloc();
  uint64_t v9 = sub_100012960(&qword_1001E1370);
  v7[148] = v9;
  v7[149] = *(void *)(v9 - 8);
  v7[150] = swift_task_alloc();
  sub_100012960(&qword_1001E3D18);
  v7[151] = swift_task_alloc();
  v7[152] = swift_task_alloc();
  return _swift_task_switch(sub_1000FC854, 0, 0);
}

uint64_t sub_1000FC854()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 1080) + 16);
  *(void *)(v0 + 1224) = v1;
  if (v1)
  {
    char v101 = (_OWORD *)(v0 + 864);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      *(void *)(v0 + 1240) = v3;
      *(void *)(v0 + 1232) = v2;
      uint64_t v4 = *(void *)(*(void *)(v0 + 1080) + 32 * v2 + 56);
      if (*(void *)(*(void *)(v0 + 1112) + 16))
      {
        unint64_t v5 = sub_1000AF084(v4);
        if (v6)
        {
          uint64_t v61 = *(void *)(v0 + 1216);
          uint64_t v106 = *(void *)(v0 + 1208);
          unint64_t v62 = *(void *)(*(void *)(v0 + 1112) + 56) + (v5 << 6);
          unint64_t v63 = *(void *)(v62 + 8);
          uint64_t v102 = *(void *)v62;
          int v104 = *(unsigned __int8 *)(v62 + 16);
          uint64_t v64 = sub_100012960(&qword_1001E1380);
          uint64_t v99 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56);
          uint64_t v100 = *(void *)(v64 - 8);
          v99(v61, 1, 1, v64);
          unint64_t v65 = type metadata accessor for AppImpressionPayload();
          unint64_t v66 = sub_100036B14();
          uint64_t v67 = sub_100100A94(&qword_1001E13C0, (void (*)(uint64_t))type metadata accessor for AppImpressionPayload);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          JWS.init(compactJWS:)(v102, v63, v65, v66, v67, v106);
          uint64_t v75 = *(void *)(v0 + 1216);
          uint64_t v76 = *(void *)(v0 + 1208);
          v99(v76, 0, 1, v64);
          sub_100103D58(v76, v75);
          *(void *)(v0 + 1248) = 0;
          Swift::String v77 = String.lowercased()();
          unint64_t v78 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BFA90, v77);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v78 >= 4) {
            char v79 = 0;
          }
          else {
            char v79 = v78;
          }
          uint64_t v80 = *(void *)(v0 + 1216);
          sub_10001D1E4();
          uint64_t v81 = swift_allocError();
          unsigned char *v82 = v79;
          uint64_t v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
          int v84 = v83(v80, 1, v64);
          uint64_t v85 = 0;
          uint64_t v86 = 0;
          uint64_t v87 = *(void *)(v0 + 1216);
          if (!v84)
          {
            char v88 = (uint64_t *)(v87 + *(int *)(v65 + 40) + *(int *)(v64 + 52));
            uint64_t v85 = *v88;
            uint64_t v86 = v88[1];
            swift_bridgeObjectRetain();
          }
          int v89 = v83(v87, 1, v64);
          unsigned __int8 v90 = 2;
          if (!v89) {
            unsigned __int8 v90 = *(unsigned char *)(v87 + *(int *)(v64 + 52) + *(int *)(v65 + 44));
          }
          uint64_t v91 = *(void *)(v0 + 1128);
          sub_10009485C(0, 1, v81, v85, v86, 0, 2, v104, v101, v90, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
            0,
            1u,
            2u,
            3u,
            0,
            1u,
            0,
            0,
            2u);
          long long v92 = *(_OWORD *)(v0 + 1008);
          *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 992);
          *(_OWORD *)(v0 + 816) = v92;
          *(_OWORD *)(v0 + 832) = *(_OWORD *)(v0 + 1024);
          *(_OWORD *)(v0 + 841) = *(_OWORD *)(v0 + 1033);
          long long v93 = *(_OWORD *)(v0 + 944);
          *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 928);
          *(_OWORD *)(v0 + 752) = v93;
          long long v94 = *(_OWORD *)(v0 + 976);
          *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 960);
          *(_OWORD *)(v0 + 784) = v94;
          long long v95 = *(_OWORD *)(v0 + 880);
          *(_OWORD *)(v0 + 672) = *v101;
          *(_OWORD *)(v0 + 688) = v95;
          long long v96 = *(_OWORD *)(v0 + 912);
          *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 896);
          *(_OWORD *)(v0 + 720) = v96;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v97 = sub_100012D78((void *)(v91 + 472), *(void *)(v91 + 496));
          uint64_t v98 = *v97;
          *(void *)(v0 + 1256) = *v97;
          return _swift_task_switch(sub_1000FD528, v98, 0);
        }
      }
      if (*(void *)(*(void *)(v0 + 1120) + 16) && (unint64_t v7 = sub_1000AF084(v4), (v8 & 1) != 0))
      {
        uint64_t v9 = (_OWORD *)(*(void *)(*(void *)(v0 + 1120) + 56) + 224 * v7);
        long long v10 = v9[1];
        *(_OWORD *)(v0 + 16) = *v9;
        *(_OWORD *)(v0 + 32) = v10;
        long long v11 = v9[5];
        long long v13 = v9[2];
        long long v12 = v9[3];
        *(_OWORD *)(v0 + 80) = v9[4];
        *(_OWORD *)(v0 + 96) = v11;
        *(_OWORD *)(v0 + 48) = v13;
        *(_OWORD *)(v0 + 64) = v12;
        long long v14 = v9[9];
        long long v16 = v9[6];
        long long v15 = v9[7];
        *(_OWORD *)(v0 + 144) = v9[8];
        *(_OWORD *)(v0 + 160) = v14;
        *(_OWORD *)(v0 + 112) = v16;
        *(_OWORD *)(v0 + 128) = v15;
        long long v18 = v9[11];
        long long v17 = v9[12];
        long long v19 = v9[10];
        *(_OWORD *)(v0 + 217) = *(_OWORD *)((char *)v9 + 201);
        *(_OWORD *)(v0 + 192) = v18;
        *(_OWORD *)(v0 + 208) = v17;
        *(_OWORD *)(v0 + 176) = v19;
        if (*(void *)(v0 + 24)) {
          char v20 = 1;
        }
        else {
          char v20 = 4;
        }
        if (*(unsigned char *)(v0 + 152)) {
          char v21 = v20;
        }
        else {
          char v21 = 0;
        }
        long long v22 = *(void **)(v0 + 200);
        if (v22)
        {
          uint64_t v23 = *(void *)(v0 + 192);
          swift_bridgeObjectRetain();
          sub_100013AE8(v0 + 16);
          swift_bridgeObjectRetain();
          v24._countAndFlagsBits = v23;
          v24._object = v22;
          Swift::Int v25 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C2018, v24);
          swift_bridgeObjectRelease();
          if (v25 == 1) {
            char v26 = 1;
          }
          else {
            char v26 = 2;
          }
          if (!v25) {
            char v26 = 0;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_100013AE8(v0 + 16);
          char v26 = 2;
        }
        char v105 = v26;
        Swift::String v34 = String.lowercased()();
        unint64_t v35 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BFA90, v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v35 >= 4) {
          char v36 = 0;
        }
        else {
          char v36 = v35;
        }
        sub_10001D1E4();
        swift_allocError();
        *uint64_t v37 = v36;
        __int16 v38 = (void *)_convertErrorToNSError(_:)();
        swift_errorRelease();
        uint64_t v39 = *(void *)(v0 + 48);
        uint64_t v103 = *(void *)(v0 + 40);
        swift_bridgeObjectRetain();
        id v40 = [v38 domain];
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v43 = v42;

        id v44 = [v38 code];
        sub_100013B74(v0 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v46 = v3;
        char v47 = v21;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v46 = sub_10013A354(0, v46[2] + 1, 1, v46);
        }
        unint64_t v49 = v46[2];
        unint64_t v48 = v46[3];
        if (v49 >= v48 >> 1) {
          uint64_t v46 = sub_10013A354((void *)(v48 > 1), v49 + 1, 1, v46);
        }
        v46[2] = v49 + 1;
        uint64_t v50 = &v46[10 * v49];
        *((_WORD *)v50 + 16) = 256;
        v50[5] = v103;
        v50[6] = v39;
        *((unsigned char *)v50 + 56) = v47;
        uint64_t v3 = v46;
        *((unsigned char *)v50 + 57) = v105;
        *((unsigned char *)v50 + 58) = 3;
        v50[8] = 0;
        *((_WORD *)v50 + 36) = 513;
        v50[10] = v41;
        v50[11] = v43;
        v50[12] = v44;
        *((unsigned char *)v50 + 104) = 0;
      }
      else
      {
        uint64_t v27 = *(void *)(v0 + 1176);
        uint64_t v28 = *(void *)(v0 + 1144);
        uint64_t v29 = *(void *)(v0 + 1136);
        swift_bridgeObjectRetain();
        uint64_t v30 = Logger.postback.unsafeMutableAddressor();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v30, v29);
        swift_bridgeObjectRetain();
        char v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = swift_slowAlloc();
          *(_DWORD *)uint64_t v33 = 134217984;
          swift_bridgeObjectRelease();
          *(void *)(v33 + 4) = v4;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "Could not find impression with ordering index: %ld in AAK or SKAN maps", (uint8_t *)v33, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        (*(void (**)(void, void))(*(void *)(v0 + 1144) + 8))(*(void *)(v0 + 1176), *(void *)(v0 + 1136));
      }
      uint64_t v2 = *(void *)(v0 + 1232) + 1;
    }
    while (v2 != *(void *)(v0 + 1224));
    swift_bridgeObjectRelease();
    if (!v3[2]) {
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2])
  {
LABEL_35:
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)(v0 + 1072) = v3;
    sub_100012960(&qword_1001E3D20);
    sub_100103C98(&qword_1001E3D28, &qword_1001E3D20, (void (*)(void))sub_100103D04);
    uint64_t v68 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v70 = v69;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v0 + 1264) = v70;
    *(void *)(v0 + 1272) = v68;
    uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001E3E58 + dword_1001E3E58);
    uint64_t v71 = (void *)swift_task_alloc();
    *(void *)(v0 + 1280) = v71;
    *uint64_t v71 = v0;
    v71[1] = sub_1000FE37C;
    uint64_t v72 = *(void *)(v0 + 1088);
    return v107(v68, v70, v72);
  }
LABEL_37:
  uint64_t v51 = *(void *)(v0 + 1168);
  uint64_t v52 = *(void *)(v0 + 1144);
  uint64_t v53 = *(void *)(v0 + 1136);
  swift_bridgeObjectRelease();
  uint64_t v54 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v51, v54, v53);
  char v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Received no skan impression errors", v57, 2u);
    swift_slowDealloc();
  }
  uint64_t v58 = *(void *)(v0 + 1168);
  uint64_t v59 = *(void *)(v0 + 1144);
  uint64_t v60 = *(void *)(v0 + 1136);

  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v74 = *(uint64_t (**)(void))(v0 + 8);
  return v74();
}

uint64_t sub_1000FD528()
{
  uint64_t v1 = *(void *)(v0 + 1200);
  uint64_t v2 = *(void *)(v0 + 1192);
  uint64_t v3 = *(void *)(v0 + 1184);
  uint64_t v4 = *(void *)(v0 + 1104);
  uint64_t v5 = *(void *)(v0 + 1096);
  long long v6 = *(_OWORD *)(v0 + 816);
  *(_OWORD *)(v0 + 584) = *(_OWORD *)(v0 + 800);
  *(_OWORD *)(v0 + 600) = v6;
  *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 832);
  long long v7 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 536) = v7;
  long long v8 = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 552) = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 568) = v8;
  long long v9 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 472) = v9;
  long long v10 = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 504) = v10;
  *(_OWORD *)(v0 + 625) = *(_OWORD *)(v0 + 841);
  *(void *)(v0 + 648) = v5;
  *(void *)(v0 + 656) = v4;
  *(_WORD *)(v0 + 664) = 257;
  sub_10003675C(v0 + 456);
  sub_1000367C8(v0 + 456, v0 + 240);
  sub_10001547C(v0 + 864);
  swift_bridgeObjectRetain();
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 864);
  return _swift_task_switch(sub_1000FD67C, 0, 0);
}

uint64_t sub_1000FD67C()
{
  sub_100019960(*(void *)(v0 + 1216), &qword_1001E3D18);
  uint64_t v1 = *(void *)(v0 + 1248);
  uint64_t v2 = *(void **)(v0 + 1240);
  uint64_t v3 = *(void *)(v0 + 1232) + 1;
  if (v3 == *(void *)(v0 + 1224))
  {
LABEL_35:
    swift_bridgeObjectRelease();
    if (v2[2])
    {
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      *(void *)(v0 + 1072) = v2;
      sub_100012960(&qword_1001E3D20);
      sub_100103C98(&qword_1001E3D28, &qword_1001E3D20, (void (*)(void))sub_100103D04);
      uint64_t v47 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      if (!v1)
      {
        uint64_t v86 = v47;
        uint64_t v87 = v48;
        swift_bridgeObjectRelease();
        swift_release();
        *(void *)(v0 + 1264) = v87;
        *(void *)(v0 + 1272) = v86;
        os_log_type_t v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001E3E58 + dword_1001E3E58);
        char v88 = (void *)swift_task_alloc();
        *(void *)(v0 + 1280) = v88;
        *char v88 = v0;
        v88[1] = sub_1000FE37C;
        uint64_t v89 = *(void *)(v0 + 1088);
        return v128(v86, v87, v89);
      }
      uint64_t v49 = *(void *)(v0 + 1152);
      uint64_t v50 = *(void *)(v0 + 1144);
      uint64_t v51 = *(void *)(v0 + 1136);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v52 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v49, v52, v51);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = *(void *)(v0 + 1088);
        uint64_t v56 = swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 134218242;
        *(void *)(v0 + 1056) = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v56 + 12) = 2112;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1064) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Encountered error while storing skanner events for app %llu with error: %@", (uint8_t *)v56, 0x16u);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      (*(void (**)(void, void))(*(void *)(v0 + 1144) + 8))(*(void *)(v0 + 1152), *(void *)(v0 + 1136));
    }
    else
    {
      uint64_t v59 = *(void *)(v0 + 1168);
      uint64_t v60 = *(void *)(v0 + 1144);
      uint64_t v61 = *(void *)(v0 + 1136);
      swift_bridgeObjectRelease();
      uint64_t v62 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v59, v62, v61);
      unint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        unint64_t v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v65 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Received no skan impression errors", v65, 2u);
        swift_slowDealloc();
      }
      uint64_t v66 = *(void *)(v0 + 1168);
      uint64_t v67 = *(void *)(v0 + 1144);
      uint64_t v68 = *(void *)(v0 + 1136);

      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v91 = *(uint64_t (**)(void))(v0 + 8);
    return v91();
  }
  uint64_t v126 = (_OWORD *)(v0 + 864);
  uint64_t v127 = *(void *)(v0 + 1248);
  while (1)
  {
    *(void *)(v0 + 1240) = v2;
    *(void *)(v0 + 1232) = v3;
    uint64_t v4 = *(void *)(*(void *)(v0 + 1080) + 32 * v3 + 56);
    if (*(void *)(*(void *)(v0 + 1112) + 16))
    {
      unint64_t v5 = sub_1000AF084(v4);
      if (v6) {
        break;
      }
    }
    if (*(void *)(*(void *)(v0 + 1120) + 16) && (unint64_t v7 = sub_1000AF084(v4), (v8 & 1) != 0))
    {
      long long v16 = (_OWORD *)(*(void *)(*(void *)(v0 + 1120) + 56) + 224 * v7);
      long long v17 = v16[1];
      *(_OWORD *)(v0 + 16) = *v16;
      *(_OWORD *)(v0 + 32) = v17;
      long long v18 = v16[5];
      long long v20 = v16[2];
      long long v19 = v16[3];
      *(_OWORD *)(v0 + 80) = v16[4];
      *(_OWORD *)(v0 + 96) = v18;
      *(_OWORD *)(v0 + 48) = v20;
      *(_OWORD *)(v0 + 64) = v19;
      long long v21 = v16[9];
      long long v23 = v16[6];
      long long v22 = v16[7];
      *(_OWORD *)(v0 + 144) = v16[8];
      *(_OWORD *)(v0 + 160) = v21;
      *(_OWORD *)(v0 + 112) = v23;
      *(_OWORD *)(v0 + 128) = v22;
      long long v25 = v16[11];
      long long v24 = v16[12];
      long long v26 = v16[10];
      *(_OWORD *)(v0 + 217) = *(_OWORD *)((char *)v16 + 201);
      *(_OWORD *)(v0 + 192) = v25;
      *(_OWORD *)(v0 + 208) = v24;
      *(_OWORD *)(v0 + 176) = v26;
      if (*(void *)(v0 + 24)) {
        char v27 = 1;
      }
      else {
        char v27 = 4;
      }
      if (*(unsigned char *)(v0 + 152)) {
        char v28 = v27;
      }
      else {
        char v28 = 0;
      }
      char v124 = v28;
      uint64_t v29 = *(void **)(v0 + 200);
      if (v29)
      {
        uint64_t v30 = *(void *)(v0 + 192);
        swift_bridgeObjectRetain();
        sub_100013AE8(v0 + 16);
        swift_bridgeObjectRetain();
        v31._countAndFlagsBits = v30;
        v31._object = v29;
        Swift::Int v32 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C2018, v31);
        swift_bridgeObjectRelease();
        if (v32 == 1) {
          char v33 = 1;
        }
        else {
          char v33 = 2;
        }
        if (!v32) {
          char v33 = 0;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_100013AE8(v0 + 16);
        char v33 = 2;
      }
      char v116 = v33;
      Swift::String v34 = String.lowercased()();
      unint64_t v35 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BFA90, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35 >= 4) {
        char v36 = 0;
      }
      else {
        char v36 = v35;
      }
      sub_10001D1E4();
      swift_allocError();
      *uint64_t v37 = v36;
      __int16 v38 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
      uint64_t v39 = *(void *)(v0 + 48);
      uint64_t v122 = *(void *)(v0 + 40);
      swift_bridgeObjectRetain();
      id v40 = [v38 domain];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v118 = v42;
      uint64_t v120 = v41;

      id v43 = [v38 code];
      sub_100013B74(v0 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = sub_10013A354(0, v2[2] + 1, 1, v2);
      }
      unint64_t v45 = v2[2];
      unint64_t v44 = v2[3];
      if (v45 >= v44 >> 1) {
        uint64_t v2 = sub_10013A354((void *)(v44 > 1), v45 + 1, 1, v2);
      }
      v2[2] = v45 + 1;
      uint64_t v46 = &v2[10 * v45];
      *((_WORD *)v46 + 16) = 256;
      void v46[5] = v122;
      v46[6] = v39;
      *((unsigned char *)v46 + 56) = v124;
      *((unsigned char *)v46 + 57) = v116;
      *((unsigned char *)v46 + 58) = 3;
      v46[8] = 0;
      *((_WORD *)v46 + 36) = 513;
      v46[10] = v120;
      v46[11] = v118;
      v46[12] = v43;
      *((unsigned char *)v46 + 104) = 0;

      uint64_t v3 = *(void *)(v0 + 1232) + 1;
      uint64_t v1 = v127;
      if (v3 == *(void *)(v0 + 1224)) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(v0 + 1176);
      uint64_t v10 = *(void *)(v0 + 1144);
      uint64_t v11 = *(void *)(v0 + 1136);
      swift_bridgeObjectRetain();
      uint64_t v12 = Logger.postback.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
      swift_bridgeObjectRetain();
      long long v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 134217984;
        swift_bridgeObjectRelease();
        *(void *)(v15 + 4) = v4;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Could not find impression with ordering index: %ld in AAK or SKAN maps", (uint8_t *)v15, 0xCu);
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(void, void))(*(void *)(v0 + 1144) + 8))(*(void *)(v0 + 1176), *(void *)(v0 + 1136));
      uint64_t v3 = *(void *)(v0 + 1232) + 1;
      if (v3 == *(void *)(v0 + 1224))
      {
        uint64_t v1 = v127;
        goto LABEL_35;
      }
    }
  }
  uint64_t v69 = *(void *)(v0 + 1216);
  uint64_t v125 = *(void *)(v0 + 1208);
  unint64_t v70 = *(void *)(*(void *)(v0 + 1112) + 56) + (v5 << 6);
  unint64_t v71 = *(void *)(v70 + 8);
  uint64_t v119 = *(void *)v70;
  int v123 = *(unsigned __int8 *)(v70 + 16);
  uint64_t v72 = sub_100012960(&qword_1001E1380);
  uint64_t v121 = *(void *)(v72 - 8);
  v117 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
  v117(v69, 1, 1, v72);
  unint64_t v73 = type metadata accessor for AppImpressionPayload();
  unint64_t v74 = sub_100036B14();
  uint64_t v75 = sub_100100A94(&qword_1001E13C0, (void (*)(uint64_t))type metadata accessor for AppImpressionPayload);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  JWS.init(compactJWS:)(v119, v71, v73, v74, v75, v125);
  if (v127)
  {
    uint64_t v76 = *(void *)(v0 + 1160);
    uint64_t v77 = *(void *)(v0 + 1144);
    uint64_t v78 = *(void *)(v0 + 1136);
    uint64_t v79 = Logger.postback.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v76, v79, v78);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      char v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Failed to create impression JWS", v82, 2u);
      swift_slowDealloc();
    }
    uint64_t v83 = *(void *)(v0 + 1160);
    uint64_t v84 = *(void *)(v0 + 1144);
    uint64_t v85 = *(void *)(v0 + 1136);
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v85);
  }
  else
  {
    uint64_t v92 = *(void *)(v0 + 1216);
    uint64_t v93 = *(void *)(v0 + 1208);
    v117(v93, 0, 1, v72);
    sub_100103D58(v93, v92);
  }
  *(void *)(v0 + 1248) = 0;
  Swift::String v94 = String.lowercased()();
  unint64_t v95 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BFA90, v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v95 >= 4) {
    char v96 = 0;
  }
  else {
    char v96 = v95;
  }
  uint64_t v97 = *(void *)(v0 + 1216);
  sub_10001D1E4();
  uint64_t v98 = swift_allocError();
  *uint64_t v99 = v96;
  uint64_t v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  int v101 = v100(v97, 1, v72);
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = *(void *)(v0 + 1216);
  if (!v101)
  {
    char v105 = (uint64_t *)(v104 + *(int *)(v73 + 40) + *(int *)(v72 + 52));
    uint64_t v102 = *v105;
    uint64_t v103 = v105[1];
    swift_bridgeObjectRetain();
  }
  int v106 = v100(v104, 1, v72);
  unsigned __int8 v107 = 2;
  if (!v106) {
    unsigned __int8 v107 = *(unsigned char *)(v104 + *(int *)(v72 + 52) + *(int *)(v73 + 44));
  }
  uint64_t v108 = *(void *)(v0 + 1128);
  sub_10009485C(0, 1, v98, v102, v103, 0, 2, v123, v126, v107, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  long long v109 = *(_OWORD *)(v0 + 1008);
  *(_OWORD *)(v0 + 800) = *(_OWORD *)(v0 + 992);
  *(_OWORD *)(v0 + 816) = v109;
  *(_OWORD *)(v0 + 832) = *(_OWORD *)(v0 + 1024);
  *(_OWORD *)(v0 + 841) = *(_OWORD *)(v0 + 1033);
  long long v110 = *(_OWORD *)(v0 + 944);
  *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 928);
  *(_OWORD *)(v0 + 752) = v110;
  long long v111 = *(_OWORD *)(v0 + 976);
  *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 960);
  *(_OWORD *)(v0 + 784) = v111;
  long long v112 = *(_OWORD *)(v0 + 880);
  *(_OWORD *)(v0 + 672) = *v126;
  *(_OWORD *)(v0 + 688) = v112;
  long long v113 = *(_OWORD *)(v0 + 912);
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 896);
  *(_OWORD *)(v0 + 720) = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v114 = sub_100012D78((void *)(v108 + 472), *(void *)(v108 + 496));
  uint64_t v115 = *v114;
  *(void *)(v0 + 1256) = *v114;
  return _swift_task_switch(sub_1000FD528, v115, 0);
}

uint64_t sub_1000FE37C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FE478, 0, 0);
}

uint64_t sub_1000FE478()
{
  sub_100020930(v0[159], v0[158]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000FE53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v7 + 240) = a6;
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(void *)(v7 + 104) = a1;
  *(void *)(v7 + 112) = a2;
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v7 + 152) = v8;
  *(void *)(v7 + 160) = *(void *)(v8 - 8);
  *(void *)(v7 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_1000FE608, 0, 0);
}

uint64_t sub_1000FE608()
{
  uint64_t v1 = v0 + 104;
  uint64_t v2 = *(void *)(*(void *)(v0 + 104) + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
    uint64_t v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v5 = *(v3 - 2);
      uint64_t v6 = *(v3 - 1);
      uint64_t v7 = v3[1];
      uint64_t v8 = v3[3];
      uint64_t v33 = v3[2];
      uint64_t v34 = *v3;
      uint64_t v9 = v3[5];
      uint64_t v31 = v3[6];
      uint64_t v32 = v3[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_10013A474(0, v4[2] + 1, 1, v4);
      }
      unint64_t v11 = v4[2];
      unint64_t v10 = v4[3];
      if (v11 >= v10 >> 1) {
        uint64_t v4 = sub_10013A474((void *)(v10 > 1), v11 + 1, 1, v4);
      }
      v4[2] = v11 + 1;
      uint64_t v12 = &v4[9 * v11];
      v12[4] = v5;
      v12[5] = v6;
      v12[6] = v34;
      v12[7] = v7;
      long long v12[8] = v33;
      v12[9] = v8;
      v12[10] = v32;
      v12[11] = v9;
      v12[12] = v31;
      v3 += 10;
      --v2;
    }
    while (v2);
    uint64_t v1 = v29;
    swift_bridgeObjectRelease();
    uint64_t v0 = v30;
  }
  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  *(void *)(v0 + 176) = v4;
  uint64_t v13 = v4[2];
  *(void *)(v0 + 184) = v13;
  if (v13)
  {
    uint64_t v14 = v1 - 88;
    *(void *)(v0 + 208) = 0;
    char v15 = *(unsigned char *)(v0 + 240);
    *(_OWORD *)uint64_t v14 = *((_OWORD *)v4 + 2);
    long long v17 = *((_OWORD *)v4 + 4);
    long long v16 = *((_OWORD *)v4 + 5);
    long long v18 = *((_OWORD *)v4 + 3);
    *(void *)(v14 + 64) = v4[12];
    *(_OWORD *)(v14 + 32) = v17;
    *(_OWORD *)(v14 + 48) = v16;
    *(_OWORD *)(v14 + 16) = v18;
    swift_bridgeObjectRetain();
    sub_100103920(v1 - 88);
    long long v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v19;
    *long long v19 = v0;
    v19[1] = sub_1000FEB2C;
    uint64_t v20 = *(void *)(v0 + 136);
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 128);
    return sub_1000DC670(v1 - 88, v21, v22, v20, v15 & 1);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v0 + 112);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)(v0 + 88) = v24;
    sub_100012960(&qword_1001E1018);
    sub_100103C98(&qword_1001E1088, &qword_1001E1018, (void (*)(void))sub_10001E658);
    uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v27 = v26;
    *(void *)(v0 + 192) = v25;
    *(void *)(v0 + 200) = v26;
    swift_release();
    unint64_t v35 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001E3E60 + dword_1001E3E60);
    char v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v28;
    *char v28 = v0;
    v28[1] = sub_1000FF04C;
    return v35(v25, v27);
  }
}

uint64_t sub_1000FEB2C()
{
  uint64_t v1 = *v0 + 16;
  swift_task_dealloc();
  sub_100103978(v1);
  return _swift_task_switch(sub_1000FEC34, 0, 0);
}

uint64_t sub_1000FEC34()
{
  uint64_t v1 = *(void *)(v0 + 208) + 1;
  if (v1 == *(void *)(v0 + 184))
  {
    swift_bridgeObjectRelease_n();
    uint64_t v2 = *(void *)(v0 + 112);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)(v0 + 88) = v2;
    sub_100012960(&qword_1001E1018);
    sub_100103C98(&qword_1001E1088, &qword_1001E1018, (void (*)(void))sub_10001E658);
    uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v5 = v4;
    *(void *)(v0 + 192) = v3;
    *(void *)(v0 + 200) = v4;
    swift_release();
    long long v17 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001E3E60 + dword_1001E3E60);
    long long v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v16;
    *long long v16 = v0;
    v16[1] = sub_1000FF04C;
    return v17(v3, v5);
  }
  else
  {
    *(void *)(v0 + 208) = v1;
    char v6 = *(unsigned char *)(v0 + 240);
    uint64_t v7 = *(void *)(v0 + 176) + 72 * v1;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v7 + 32);
    long long v9 = *(_OWORD *)(v7 + 64);
    long long v8 = *(_OWORD *)(v7 + 80);
    long long v10 = *(_OWORD *)(v7 + 48);
    *(void *)(v0 + 80) = *(void *)(v7 + 96);
    *(_OWORD *)(v0 + 48) = v9;
    *(_OWORD *)(v0 + 64) = v8;
    *(_OWORD *)(v0 + 32) = v10;
    sub_100103920(v0 + 16);
    unint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v11;
    *unint64_t v11 = v0;
    v11[1] = sub_1000FEB2C;
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 128);
    return sub_1000DC670(v0 + 16, v13, v14, v12, v6 & 1);
  }
}

uint64_t sub_1000FF04C()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000FF1CC;
  }
  else {
    uint64_t v2 = sub_1000FF160;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FF160()
{
  sub_100020930(v0[24], v0[25]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000FF1CC()
{
  sub_100020930(v0[24], v0[25]);
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[19];
  uint64_t v4 = Logger.postback.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    long long v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Encountered error while trying to woof SKAN postbacks over %@", v7, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  swift_task_dealloc();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000FF3C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000B93F0();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

void sub_1000FF3F8(void *a1, uint64_t a2, uint64_t (*a3)(id, id, void *, void, void))
{
  id v4 = [a1 connection];
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = [self predicateWithProperty:v5 equalToValue:v6];
  swift_unknownObjectRelease();

  long long v8 = (void *)a3(v4, v7, _swiftEmptyArrayStorage, 0, 0);
  if (([v8 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100100A94((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_1000FF590(void *a1)
{
  id v1 = [a1 connection];
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v4 = [self predicateWithProperty:v2 equalToValue:v3];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v5 = sub_10011DBB0(v1, v4, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v5 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_100100A94((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t sub_1000FF744@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = static ConversionType.allCasesSet.getter();
  uint64_t v8 = a2(a1, v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1000FF7C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FF7D0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000FF7E0(void *a1)
{
  sub_1000FF3F8(a1, *(void *)(v1 + 16), (uint64_t (*)(id, id, void *, void, void))sub_10011DEC4);
}

uint64_t sub_1000FF810()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000FF820()
{
}

uint64_t sub_1000FF84C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000FF85C(void *a1)
{
  sub_1000FF3F8(a1, *(void *)(v1 + 16), (uint64_t (*)(id, id, void *, void, void))sub_10011D1D8);
}

BOOL sub_1000FF88C@<W0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  BOOL result = sub_10008F374(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

BOOL sub_1000FF8C4@<W0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  BOOL result = sub_10008F3A4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void sub_1000FF8FC(void *a1, long long *a2)
{
  id v4 = [a1 connection];
  id v5 = sub_100022CEC(a2, v4);

  if (!v2) {
}
  }

uint64_t sub_1000FF968(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v4 = a2;
    uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
  }
  else
  {
    unint64_t v6 = 0xF000000000000000;
  }
  v8[0] = v2;
  v8[1] = v6;
  sub_100059F98((uint64_t)v8, *(void *)(*(void *)(v3 + 64) + 40), &qword_1001E1E10);
  return swift_continuation_resume();
}

uint64_t sub_1000FF9F8(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_1000FFE9C(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_100139EE0(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    uint64_t v13 = sub_100139EE0((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  void v13[2] = v27 + 1;
  char v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_100139EE0(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      uint64_t v13 = sub_100139EE0((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    void v13[2] = v39 + 1;
    id v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FFE9C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_100139EE0(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_100139EE0((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    id v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FFFF8(uint64_t a1)
{
  return sub_100123704(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void sub_100100004()
{
}

uint64_t sub_100100030(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_100100040(void *a1)
{
}

void sub_10010005C()
{
}

unsigned __int8 *sub_100100088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_100101774();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1001003F8();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = sub_10010017C(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_10010017C(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }
      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }
      if (result)
      {
        unint64_t v29 = 0;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          if (!is_mul_ok(v29, a3)) {
            return 0;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }
  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }
      else
      {
        char v23 = -55;
      }
    }
    else
    {
      char v23 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0;
    }
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1001003F8()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100100478(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100100478(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1001005D0(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100147B08(v9, 0),
          unint64_t v12 = sub_1001006D0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1001005D0(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_100147B70(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_100147B70(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_1001006D0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    uint64_t v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100147B70(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_100147B70(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001008E4(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

void sub_100100940(void *a1)
{
  sub_1000ED6BC(a1, (long long *)(v1 + 16));
}

uint64_t sub_10010095C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100100994()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001009A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100100B08(a1);
}

unint64_t sub_1001009BC()
{
  unint64_t result = qword_1001E3AF8;
  if (!qword_1001E3AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3AF8);
  }
  return result;
}

uint64_t sub_100100A10()
{
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15) {
    sub_100020930(v0[4], v1);
  }
  unint64_t v2 = v0[7];
  if (v2 >> 60 != 15) {
    sub_100020930(v0[6], v2);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100100A78(void *a1)
{
  sub_1000F61C4(a1, (long long *)(v1 + 16));
}

uint64_t sub_100100A94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100100ADC(void *a1)
{
}

uint64_t sub_100100AF8()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100100B08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10008E844(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

unint64_t sub_100100B44()
{
  unint64_t result = qword_1001E3B10;
  if (!qword_1001E3B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3B10);
  }
  return result;
}

unint64_t sub_100100B98()
{
  unint64_t result = qword_1001E3B20;
  if (!qword_1001E3B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3B20);
  }
  return result;
}

uint64_t sub_100100BEC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100100BFC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001032DC((uint64_t (*)(void))sub_1000B8D84, a1);
}

uint64_t sub_100100C28()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100100C38()
{
}

uint64_t sub_100100C64()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100100C74@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000FF744(*(void *)(v1 + 16), sub_1000B8FC0, a1);
}

uint64_t sub_100100CA8(void *a1)
{
  return sub_1000F6054(a1, v1);
}

uint64_t sub_100100CC4(uint64_t a1)
{
  return sub_100123754(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100100CD0()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100100D08()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100100D18@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000FF744(*(void *)(v1 + 16), sub_1000BA794, a1);
}

uint64_t sub_100100D4C(void *a1)
{
  return sub_1000F6114(a1, v1);
}

uint64_t sub_100100D68(uint64_t a1)
{
  return sub_1001237F4(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t type metadata accessor for PostbackUpdateData()
{
  uint64_t result = qword_1001E3BD8;
  if (!qword_1001E3BD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100100DC0(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for PostbackUpdateData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t sub_100100E24()
{
  uint64_t v1 = (int *)(type metadata accessor for PostbackUpdateData() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 536) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 17));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 25));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 30));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 35));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 40));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 45));
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 51));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 56));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 61));
  swift_bridgeObjectRelease();
  unsigned __int8 v6 = (char *)v0 + v3 + v1[10];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100100FC8(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for PostbackUpdateData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 32))(a2, a1, updated);
  return a2;
}

uint64_t sub_10010102C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PostbackUpdateData() - 8);
  uint64_t v5 = v1 + 16;
  uint64_t v6 = *(void *)(v1 + 528);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 536) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100012AB8;
  return sub_1000DF700(a1, v5, v6, v7);
}

unint64_t sub_10010111C()
{
  unint64_t result = qword_1001E2DC0;
  if (!qword_1001E2DC0)
  {
    sub_100011ECC(&qword_1001E2DB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E2DC0);
  }
  return result;
}

uint64_t sub_100101178(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001011D8()
{
  unint64_t result = qword_1001E3B58;
  if (!qword_1001E3B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E3B58);
  }
  return result;
}

uint64_t sub_10010122C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100101264@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001012BC(sub_1000B8FC0, a1);
}

uint64_t sub_100101290@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001012BC(sub_1000BA794, a1);
}

uint64_t sub_1001012BC@<X0>(uint64_t (*a1)(void, void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = a1(*(void *)(v2 + 16), *(void *)(v2 + 24));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1001012FC(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_100101354(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_100147B70(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_96;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_100147B70(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_100147B70(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_92;
  }
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 48;
        unsigned __int8 v34 = a6 + 55;
        unsigned __int8 v35 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v33 = 58;
        }
        else
        {
          unsigned __int8 v35 = 97;
          unsigned __int8 v34 = 65;
        }
        if (v19)
        {
          unint64_t v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0;
                if (v38 < 0x61 || v38 >= v35) {
                  return v29;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            if (!is_mul_ok(v24, a6)) {
              return 0;
            }
            unint64_t v40 = v24 * a6;
            unsigned __int8 v41 = v38 + v39;
            BOOL v32 = __CFADD__(v40, v41);
            unint64_t v24 = v40 + v41;
            if (v32) {
              return 0;
            }
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 48;
      unsigned __int8 v43 = a6 + 55;
      unsigned __int8 v44 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v42 = 58;
      }
      else
      {
        unsigned __int8 v44 = 97;
        unsigned __int8 v43 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0;
              if (v45 < 0x61 || v45 >= v44) {
                return v29;
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v47 = v24 * a6;
          unsigned __int8 v48 = v45 + v46;
          BOOL v32 = __CFADD__(v47, v48);
          unint64_t v24 = v47 + v48;
          if (v32) {
            return 0;
          }
          ++v19;
          if (!--result) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v30 = v24 * a6;
          unsigned __int8 v31 = v27 + v28;
          BOOL v32 = v30 >= v31;
          unint64_t v24 = v30 - v31;
          if (!v32) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

unint64_t sub_100101774()
{
  unint64_t result = qword_1001E3B70;
  if (!qword_1001E3B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E3B70);
  }
  return result;
}

uint64_t sub_1001017C8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100101800()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100101810@<X0>(uint64_t a1@<X8>)
{
  id result = sub_10011167C();
  if (!v1)
  {
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 8) = v4 & 1;
  }
  return result;
}

uint64_t sub_100101850()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100101860()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100101870()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100101880()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100101890()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001018A0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001018B0(void *a1)
{
  sub_1000FF3F8(a1, *(void *)(v1 + 16), (uint64_t (*)(id, id, void *, void, void))sub_10011CC88);
}

void sub_1001018E0()
{
}

uint64_t sub_1001018FC(uint64_t a1)
{
  return sub_1001237A4(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t destroy for PostbackManagerError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_errorRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s20AttributionKitDaemon20PostbackManagerErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
  }
  else
  {
    swift_errorRetain();
    uint64_t v6 = a2[1];
    uint64_t v5 = a2[2];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *assignWithCopy for PostbackManagerError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      swift_errorRetain();
      *a1 = v4;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  swift_errorRetain();
  *a1 = v4;
  swift_errorRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for PostbackManagerError(void *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(void *)(a2 + 16);
    return a1;
  }
  *a1 = *(void *)a2;
  swift_errorRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  a1[1] = *(void *)(a2 + 8);
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackManagerError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF4 && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483637);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 10;
  if (v4 >= 0xC) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PostbackManagerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF5)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483637;
    if (a3 >= 0x7FFFFFF5) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF5) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 10;
    }
  }
  return result;
}

uint64_t sub_100101BCC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100101BE4(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PostbackManagerError()
{
  return &type metadata for PostbackManagerError;
}

void *sub_100101C14(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_100101D0C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100101D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_100101E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100101ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100101F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100102008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010201C);
}

uint64_t sub_10010201C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 32);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1001020D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001020EC);
}

uint64_t sub_1001020EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100102194()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for PostbackManager(id *a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 15));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 23));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 28));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 33));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 38));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 43));
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 49));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 54));

  return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(a1 + 59));
}

uint64_t initializeWithCopy for PostbackManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v10 = *(void **)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v9;
  uint64_t v37 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v37;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  char v39 = *(void **)(a2 + 112);
  *(void *)(a1 + 112) = v39;
  uint64_t v40 = a2 + 120;
  long long v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v12;
  uint64_t v38 = v12;
  uint64_t v36 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  swift_bridgeObjectRetain();
  id v13 = v6;
  swift_bridgeObjectRetain();
  id v14 = v7;
  swift_bridgeObjectRetain();
  id v15 = v10;
  swift_bridgeObjectRetain();
  id v16 = v37;
  swift_bridgeObjectRetain();
  id v17 = v39;
  v36(a1 + 120, v40, v38);
  uint64_t v18 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v18;
  char v19 = *(void **)(a2 + 176);
  *(void *)(a1 + 176) = v19;
  long long v20 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 208) = v20;
  uint64_t v21 = v20;
  unsigned __int8 v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8);
  swift_bridgeObjectRetain();
  id v23 = v19;
  v22(a1 + 184, a2 + 184, v21);
  long long v24 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 248) = v24;
  (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 224, a2 + 224);
  long long v25 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 288) = v25;
  (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 264, a2 + 264);
  uint64_t v26 = *(void *)(a2 + 328);
  uint64_t v27 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = v26;
  *(void *)(a1 + 336) = v27;
  (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1 + 304, a2 + 304);
  long long v28 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 368) = v28;
  (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 344, a2 + 344);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  long long v29 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 416) = v29;
  uint64_t v30 = v29;
  unsigned __int8 v31 = **(void (***)(uint64_t, uint64_t, uint64_t))(v29 - 8);
  swift_bridgeObjectRetain();
  v31(a1 + 392, a2 + 392, v30);
  uint64_t v32 = *(void *)(a2 + 456);
  uint64_t v33 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = v32;
  *(void *)(a1 + 464) = v33;
  (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1 + 432, a2 + 432);
  long long v34 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 496) = v34;
  (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 472, a2 + 472);
  return a1;
}

uint64_t *assignWithCopy for PostbackManager(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = (uint64_t)v4;
  id v6 = v4;

  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a2[5];
  uint64_t v8 = (void *)a1[5];
  a1[5] = (uint64_t)v7;
  id v9 = v7;

  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)a2[8];
  uint64_t v11 = (void *)a1[8];
  a1[8] = (uint64_t)v10;
  id v12 = v10;

  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v13 = (void *)a2[11];
  id v14 = (void *)a1[11];
  a1[11] = (uint64_t)v13;
  id v15 = v13;

  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v16 = (void *)a2[14];
  id v17 = (void *)a1[14];
  a1[14] = (uint64_t)v16;
  id v18 = v16;

  sub_100017B78(a1 + 15, a2 + 15);
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v19 = (void *)a2[22];
  long long v20 = (void *)a1[22];
  a1[22] = (uint64_t)v19;
  id v21 = v19;

  sub_100017B78(a1 + 23, a2 + 23);
  sub_100017B78(a1 + 28, a2 + 28);
  sub_100017B78(a1 + 33, a2 + 33);
  sub_100017B78(a1 + 38, a2 + 38);
  sub_100017B78(a1 + 43, a2 + 43);
  a1[48] = a2[48];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100017B78(a1 + 49, a2 + 49);
  sub_100017B78(a1 + 54, a2 + 54);
  sub_100017B78(a1 + 59, a2 + 59);
  return a1;
}

void *initializeWithTake for PostbackManager(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x200uLL);
}

uint64_t assignWithTake for PostbackManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);

  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  id v13 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  id v14 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 184);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 224);
  long long v15 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v15;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 264);
  long long v16 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v16;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 304);
  long long v17 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v17;
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 344);
  long long v18 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v18;
  uint64_t v19 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v19;
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 392);
  long long v20 = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = v20;
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 432);
  long long v21 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v21;
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(a1 + 472);
  long long v22 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v22;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 512)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 504) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 512) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 512) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackManager()
{
  return &type metadata for PostbackManager;
}

unint64_t sub_100102C28(uint64_t a1)
{
  unint64_t result = sub_1001011D8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100102C50@<X0>(void *a1@<X8>)
{
  return sub_1000E8148(*(void *)(v1 + 16), a1);
}

uint64_t sub_100102C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100013480;
  return sub_1000E826C(a1, a2, v7, v6);
}

unint64_t sub_100102D20()
{
  unint64_t result = qword_1001E3C38;
  if (!qword_1001E3C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E3C38);
  }
  return result;
}

uint64_t sub_100102D74()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 52));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 60));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 65));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 70));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 75));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 80));
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 86));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 91));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 96));

  return _swift_deallocObject(v0, 808, 7);
}

uint64_t sub_100102E94(int a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100013480;
  return sub_1000E87BC(a1, v4, v5, v1 + 4, (uint64_t)(v1 + 37));
}

uint64_t sub_100102F58()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100102F90(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100013480;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001E3C48 + dword_1001E3C48);
  return v6(a1, v4);
}

uint64_t sub_100103048(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1001030E4()
{
}

uint64_t sub_1001030FC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100013480;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_1000EAF14, 0, 0);
}

void sub_1001031AC()
{
}

uint64_t sub_1001031DC()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1001031EC@<X0>(void *a1@<X8>)
{
  id result = sub_1000BA688();
  *a1 = result;
  return result;
}

uint64_t sub_100103230(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 184);
  uint64_t v2 = *(void *)(result + 96) & 1;
  uint64_t v3 = *(void *)(result + 112) & 0xFF01;
  uint64_t v4 = *(void *)(result + 128) & 1;
  uint64_t v5 = *(void *)(result + 144) & 0xFFFF01;
  uint64_t v6 = *(void *)(result + 160) & 1;
  __int16 v7 = *(_WORD *)(result + 208) & 0x103 | 0x8000;
  *(void *)(result + 80) &= 0xFFFFFFFFFFFFuLL;
  *(void *)(result + 96) = v2;
  *(void *)(result + 112) = v3;
  *(void *)(result + 128) = v4;
  *(void *)(result + 144) = v5;
  *(void *)(result + 160) = v6;
  *(void *)(result + 184) = v1;
  *(_WORD *)(result + 208) = v7;
  return result;
}

uint64_t sub_1001032A0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001032B0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001032DC((uint64_t (*)(void))sub_1000B94CC, a1);
}

uint64_t sub_1001032DC@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = a1(*(void *)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100103318(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100012AB8;
  return sub_1000F641C(a1, a2, v7, v6);
}

uint64_t sub_1001033CC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 37));
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 45));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 50));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 55));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 60));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 65));
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 71));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 76));
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)(v0 + 81));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 721, 7);
}

uint64_t sub_1001034D4(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v10 = v1[2];
  uint64_t v5 = v1[20];
  uint64_t v6 = v1[21];
  uint64_t v7 = v1[86];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100013480;
  return sub_1000F6A00(a1, v10, v4, (uint64_t)(v1 + 4), v5, v6, (uint64_t)(v1 + 22), v7);
}

double sub_1001035E8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000FC464(a1, a2);
}

unint64_t sub_100103604()
{
  unint64_t result = qword_1001E3CB0;
  if (!qword_1001E3CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001E3CB0);
  }
  return result;
}

uint64_t sub_100103658()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 152, 7);
}

void sub_100103698(uint64_t a1@<X8>)
{
}

uint64_t sub_1001036B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10010371C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100103770(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001037C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    sub_10005EA64(a3, a4);
    sub_10005EA64(a5, a6);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_100103834()
{
  unint64_t result = qword_1001E3CE0;
  if (!qword_1001E3CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3CE0);
  }
  return result;
}

void sub_10010388C(void *a1@<X0>, void *a2@<X8>)
{
  sub_1000E7FA8(a1, v2 + 16, a2);
}

uint64_t sub_1001038AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 144, 7);
}

void sub_1001038EC()
{
  sub_100049014(*(void *)(v0 + 72), *(void *)(v0 + 80));
}

void *sub_100103918(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BBCAC(a1, a2, a3, *(void ***)(v3 + 16));
}

uint64_t sub_100103920(uint64_t a1)
{
  return a1;
}

uint64_t sub_100103978(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001039D0(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E3D50);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_100012D78(a1, a1[3]);
  sub_1001041C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100103BBC()
{
  unint64_t result = qword_1001E3D10;
  if (!qword_1001E3D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3D10);
  }
  return result;
}

uint64_t sub_100103C14()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 273, 7);
}

void sub_100103C7C(void *a1)
{
  sub_1000DF01C(a1, (void *)(v1 + 16));
}

uint64_t sub_100103C98(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100011ECC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100103D04()
{
  unint64_t result = qword_1001E3D30;
  if (!qword_1001E3D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3D30);
  }
  return result;
}

uint64_t sub_100103D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100012960(&qword_1001E3D18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100103DC0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100103E50@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Date();
  uint64_t result = sub_1000B8AC4();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100103ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PostbackManager.AdvertisedAppInfoPlist(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PostbackManager.AdvertisedAppInfoPlist(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackManager.AdvertisedAppInfoPlist(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackManager.AdvertisedAppInfoPlist(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackManager.AdvertisedAppInfoPlist()
{
  return &type metadata for PostbackManager.AdvertisedAppInfoPlist;
}

unsigned char *storeEnumTagSinglePayload for GhostbackError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100104108);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GhostbackError()
{
  return &type metadata for GhostbackError;
}

unint64_t sub_100104140(uint64_t a1)
{
  unint64_t result = sub_100103604();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10010416C()
{
  unint64_t result = qword_1001E3D48;
  if (!qword_1001E3D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3D48);
  }
  return result;
}

unint64_t sub_1001041C0()
{
  unint64_t result = qword_1001E3D58;
  if (!qword_1001E3D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3D58);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PostbackManager.AdvertisedAppInfoPlist.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001042E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackManager.AdvertisedAppInfoPlist.CodingKeys()
{
  return &type metadata for PostbackManager.AdvertisedAppInfoPlist.CodingKeys;
}

unint64_t sub_10010431C()
{
  unint64_t result = qword_1001E3D60;
  if (!qword_1001E3D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3D60);
  }
  return result;
}

unint64_t sub_100104374()
{
  unint64_t result = qword_1001E3D68;
  if (!qword_1001E3D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3D68);
  }
  return result;
}

unint64_t sub_1001043CC()
{
  unint64_t result = qword_1001E3D70;
  if (!qword_1001E3D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3D70);
  }
  return result;
}

void sub_100104420()
{
}

void sub_10010448C(void *a1)
{
}

void sub_1001044A4()
{
}

uint64_t sub_1001044BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100100C74(a1);
}

uint64_t sub_1001044D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100100D18(a1);
}

void sub_1001044EC(void *a1)
{
}

void sub_100104504(void *a1)
{
}

ValueMetadata *type metadata accessor for AppLaunchDatabaseStore()
{
  return &type metadata for AppLaunchDatabaseStore;
}

uint64_t sub_10010452C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - v7;
  if (sub_100006764((uint64_t)a1) > 17399) {
    return 1;
  }
  uint64_t v27 = v2;
  while (1)
  {
    uint64_t v9 = sub_100006764((uint64_t)a1);
    if (v9 != 17400)
    {
      if (v9)
      {
        uint64_t v21 = Logger.impression.unsafeMutableAddressor();
        uint64_t v13 = v3;
        long long v22 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
        uint64_t v15 = v27;
        v22(v8, v21, v27);
        id v23 = a1;
        long long v17 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v24))
        {
          uint64_t v25 = swift_slowAlloc();
          *(_DWORD *)uint64_t v25 = 134218240;
          aBlock[0] = sub_100006764((uint64_t)v23);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v25 + 12) = 2048;
          aBlock[0] = 17400;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v17, v24, "Error: No database migration for %lld to %lld", (uint8_t *)v25, 0x16u);
          swift_slowDealloc();
        }
        else
        {

          long long v17 = v23;
        }
        goto LABEL_15;
      }
      aBlock[4] = sub_100104924;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000399B4;
      aBlock[3] = &unk_1001CA160;
      uint64_t v10 = _Block_copy(aBlock);
      swift_release();
      int v11 = sub_100006AE0((uint64_t)a1, 17400, v10);
      _Block_release(v10);
      if (!v11) {
        break;
      }
    }
    if (sub_100006764((uint64_t)a1) >= 17400) {
      return 1;
    }
  }
  uint64_t v12 = Logger.impression.unsafeMutableAddressor();
  uint64_t v13 = v3;
  id v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v15 = v27;
  v14(v6, v12, v27);
  long long v16 = a1;
  long long v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134218240;
    aBlock[0] = sub_100006764((uint64_t)v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v19 + 12) = 2048;
    aBlock[0] = 17400;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Migration failed for current schema version: %lld while trying to migrate to %lld", (uint8_t *)v19, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    long long v17 = v16;
  }
  uint64_t v8 = v6;
LABEL_15:

  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v15);
  return 0;
}

uint64_t sub_100104928(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100104938()
{
  return swift_release();
}

void sub_100104940(uint64_t a1)
{
  _StringGuts.grow(_:)(110);
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  v2._object = (void *)0x8000000100185720;
  String.append(_:)(v2);
  id v3 = [(id)type metadata accessor for AppDistributorMetadataEntity() databaseTable];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 665632;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0xD000000000000012;
  v9._object = (void *)0x8000000100184760;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x52454745544E4920;
  v10._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000015;
  v11._object = (void *)0x80000001001852B0;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xA2C5458455420;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x737265765F707061;
  v13._object = (void *)0xEE0064695F6E6F69;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x52454745544E4920;
  v14._object = (void *)0xEA00000000000A2CLL;
  String.append(_:)(v14);
  v15._object = (void *)0x8000000100184CF0;
  v15._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD000000000000011;
  v16._object = (void *)0x8000000100185740;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000012;
  v17._object = (void *)0x8000000100184760;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD000000000000018;
  v18._object = (void *)0x8000000100185760;
  String.append(_:)(v18);
  id v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000B74C(a1, v19);
}

uint64_t sub_100104B80(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6D617473656D6974;
  }
  else {
    uint64_t v3 = 0x2D6465646E696C62;
  }
  if (v2) {
    unint64_t v4 = 0xEF746E656D656C65;
  }
  else {
    unint64_t v4 = 0xE900000000000070;
  }
  if (a2) {
    uint64_t v5 = 0x6D617473656D6974;
  }
  else {
    uint64_t v5 = 0x2D6465646E696C62;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000070;
  }
  else {
    unint64_t v6 = 0xEF746E656D656C65;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100104C38(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 6580587;
  }
  else {
    uint64_t v2 = 6777953;
  }
  if (a2) {
    uint64_t v3 = 6580587;
  }
  else {
    uint64_t v3 = 6777953;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_100104CA8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7368801;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 7368801;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6973726556707061;
      unint64_t v3 = 0xEA00000000006E6FLL;
      break;
    case 2:
      uint64_t v5 = 0x7372655665736162;
      unint64_t v3 = 0xEB000000006E6F69;
      break;
    case 3:
      uint64_t v5 = 0x726556746E657665;
      unint64_t v3 = 0xEC0000006E6F6973;
      break;
    case 4:
      uint64_t v5 = 0x56646C697542736FLL;
      uint64_t v6 = 0x6E6F69737265;
      goto LABEL_9;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656D614E736FLL;
      break;
    case 6:
      uint64_t v5 = 0x6F6973726556736FLL;
      unint64_t v3 = 0xE90000000000006ELL;
      break;
    case 7:
      uint64_t v5 = 0x656E6F7A656D6974;
      uint64_t v6 = 0x74657366664FLL;
LABEL_9:
      unint64_t v3 = v6 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xEA00000000006E6FLL;
      if (v5 == 0x6973726556707061) {
        goto LABEL_25;
      }
      goto LABEL_27;
    case 2:
      unint64_t v7 = 0xEB000000006E6F69;
      if (v5 != 0x7372655665736162) {
        goto LABEL_27;
      }
      goto LABEL_25;
    case 3:
      unint64_t v7 = 0xEC0000006E6F6973;
      if (v5 != 0x726556746E657665) {
        goto LABEL_27;
      }
      goto LABEL_25;
    case 4:
      uint64_t v8 = 0x56646C697542736FLL;
      uint64_t v9 = 0x6E6F69737265;
      goto LABEL_24;
    case 5:
      unint64_t v7 = 0xE600000000000000;
      if (v5 != 0x656D614E736FLL) {
        goto LABEL_27;
      }
      goto LABEL_25;
    case 6:
      uint64_t v2 = 0x6F6973726556736FLL;
      unint64_t v7 = 0xE90000000000006ELL;
      goto LABEL_21;
    case 7:
      uint64_t v8 = 0x656E6F7A656D6974;
      uint64_t v9 = 0x74657366664FLL;
LABEL_24:
      unint64_t v7 = v9 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      if (v5 == v8) {
        goto LABEL_25;
      }
      goto LABEL_27;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_27;
      }
LABEL_25:
      if (v3 == v7) {
        char v10 = 1;
      }
      else {
LABEL_27:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_100104F70(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x695F656C646E7562;
  }
  else {
    uint64_t v3 = 0x64695F6D657469;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000064;
  }
  if (a2) {
    uint64_t v5 = 0x695F656C646E7562;
  }
  else {
    uint64_t v5 = 0x64695F6D657469;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000064;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10010501C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA0000000000676ELL;
  uint64_t v3 = 0x697274732D73776ALL;
  uint64_t v4 = a1;
  unint64_t v5 = 0x697274732D73776ALL;
  unint64_t v6 = 0xEA0000000000676ELL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0x8000000100184BF0;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 2:
      unint64_t v5 = 0x676E69726564726FLL;
      unint64_t v6 = 0xEE007865646E692DLL;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000016;
      unint64_t v6 = 0x8000000100184C10;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x8000000100184BF0;
      if (v5 == 0xD000000000000013) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x676E69726564726FLL;
      unint64_t v2 = 0xEE007865646E692DLL;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0x8000000100184C10;
      if (v5 == 0xD000000000000016) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1001051E4(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x8000000100184760;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000015;
      unint64_t v6 = "distributor_bundle_id";
      goto LABEL_5;
    case 2:
      unint64_t v5 = 0x737265765F707061;
      unint64_t v3 = 0xEE0064695F6E6F69;
      break;
    case 3:
      unint64_t v6 = "creation_timestamp";
LABEL_5:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x8000000100184760;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xD000000000000015;
      uint64_t v8 = "distributor_bundle_id";
      goto LABEL_10;
    case 2:
      unint64_t v2 = 0x737265765F707061;
      unint64_t v7 = 0xEE0064695F6E6F69;
      break;
    case 3:
      uint64_t v8 = "creation_timestamp";
LABEL_10:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_100105360(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED000064695F6E6FLL;
  unint64_t v3 = 0x69737265766E6F63;
  uint64_t v4 = a1;
  unint64_t v5 = 0x69737265766E6F63;
  unint64_t v6 = 0xED000064695F6E6FLL;
  switch(v4)
  {
    case 1:
      unint64_t v7 = "advertised_item_id";
      goto LABEL_5;
    case 2:
      unint64_t v6 = 0xEF657079745F6E6FLL;
      break;
    case 3:
      unint64_t v7 = "creation_timestamp";
LABEL_5:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000012;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v8 = "advertised_item_id";
      goto LABEL_10;
    case 2:
      unint64_t v2 = 0xEF657079745F6E6FLL;
      break;
    case 3:
      uint64_t v8 = "creation_timestamp";
LABEL_10:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000012;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1001054E0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x726F727265;
    }
    else {
      uint64_t v3 = 0x676E69726564726FLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xEE007865646E692DLL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x726F727265;
      }
      else {
        uint64_t v6 = 0x676E69726564726FLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xEE007865646E692DLL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x737574617473;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x737574617473)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100105604(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E776F6E6B6E75;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6E776F6E6B6E75;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x7265747369676572;
      unint64_t v3 = 0xEE00726F72726520;
      break;
    case 2:
      unint64_t v5 = 0x7265206E656B6F74;
      unint64_t v3 = 0xEB00000000726F72;
      break;
    case 3:
      unint64_t v3 = 0x80000001001848E0;
      unint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEE00726F72726520;
      if (v5 == 0x7265747369676572) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x7265206E656B6F74;
      unint64_t v6 = 0xEB00000000726F72;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0x80000001001848E0;
      if (v5 == 0xD000000000000010) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1001057C4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x737574617473;
  }
  else {
    uint64_t v3 = 0x6B63616274736F70;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x737574617473;
  }
  else {
    uint64_t v5 = 0x6B63616274736F70;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100105868(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x524F525245;
  }
  else {
    uint64_t v3 = 19279;
  }
  if (v2) {
    unint64_t v4 = 0xE200000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x524F525245;
  }
  else {
    uint64_t v5 = 19279;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE200000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100105900(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEC0000007365736ELL;
  unint64_t v3 = 0x6F707365722D6163;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000015;
    }
    else {
      unint64_t v5 = 0x65722D726F727265;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x8000000100184870;
    }
    else {
      unint64_t v6 = 0xEF7365736E6F7073;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x6F707365722D6163;
  unint64_t v6 = 0xEC0000007365736ELL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0xD000000000000015;
    }
    else {
      unint64_t v3 = 0x65722D726F727265;
    }
    if (v7 == 1) {
      unint64_t v2 = 0x8000000100184870;
    }
    else {
      unint64_t v2 = 0xEF7365736E6F7073;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100105A3C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x8000000100184DE0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000014;
      unint64_t v6 = "skan_impression_data";
      goto LABEL_4;
    case 2:
      unint64_t v6 = "advertised_item_id";
LABEL_4:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 3:
      unint64_t v5 = 0x63616274736F6867;
      unint64_t v3 = 0xEC00000064695F6BLL;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x8000000100184DE0;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xD000000000000014;
      char v8 = "skan_impression_data";
      goto LABEL_9;
    case 2:
      char v8 = "advertised_item_id";
LABEL_9:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_10;
    case 3:
      unint64_t v7 = 0xEC00000064695F6BLL;
      if (v5 == 0x63616274736F6867) {
        goto LABEL_13;
      }
      goto LABEL_15;
    default:
LABEL_10:
      if (v5 != v2) {
        goto LABEL_15;
      }
LABEL_13:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_15:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_100105BB8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA0000000000676ELL;
  unint64_t v3 = 0x697274732D73776ALL;
  uint64_t v4 = a1;
  unint64_t v5 = 0x697274732D73776ALL;
  unint64_t v6 = 0xEA0000000000676ELL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000013;
      unint64_t v7 = "ad-interaction-type";
      goto LABEL_5;
    case 2:
      unint64_t v6 = 0x8000000100184FD0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000017;
      unint64_t v7 = "coarse-conversion-value";
LABEL_5:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v3 = 0xD000000000000013;
      char v8 = "ad-interaction-type";
      goto LABEL_10;
    case 2:
      unint64_t v2 = 0x8000000100184FD0;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v3 = 0xD000000000000017;
      char v8 = "coarse-conversion-value";
LABEL_10:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_100105D40(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      uint64_t v4 = 0x2D6465646E696C62;
      unint64_t v3 = 0xEF746E656D656C65;
      break;
    case 2:
      uint64_t v4 = 0x6D617473656D6974;
      unint64_t v3 = 0xE900000000000070;
      break;
    case 3:
      uint64_t v4 = 0x6564692D6D657469;
      unint64_t v3 = 0xEF7265696669746ELL;
      break;
    case 4:
      uint64_t v4 = 0x6D6E6F7269766E65;
      unint64_t v3 = 0xEB00000000746E65;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xEF746E656D656C65;
      if (v4 == 0x2D6465646E696C62) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE900000000000070;
      if (v4 != 0x6D617473656D6974) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v6 = 0x6564692D6D657469;
      unint64_t v5 = 0xEF7265696669746ELL;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xEB00000000746E65;
      if (v4 != 0x6D6E6F7269766E65) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100105F40(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006F66;
  unint64_t v3 = 0x6E692D6E656B6F74;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6E692D6E656B6F74;
  unint64_t v6 = 0xEA00000000006F66;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6973736572706D69;
      uint64_t v7 = 7564911;
      goto LABEL_6;
    case 2:
      unint64_t v5 = 0xD000000000000017;
      unint64_t v6 = 0x8000000100184E70;
      break;
    case 3:
      unint64_t v6 = 0x8000000100184E90;
      unint64_t v5 = 0xD000000000000016;
      break;
    case 4:
      unint64_t v5 = 0x6D6E6F7269766E65;
      uint64_t v7 = 7630437;
LABEL_6:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v8 = 0x6973736572706D69;
      uint64_t v9 = 7564911;
      goto LABEL_15;
    case 2:
      unint64_t v2 = 0x8000000100184E70;
      if (v5 != 0xD000000000000017) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0x8000000100184E90;
      unint64_t v3 = 0xD000000000000016;
      goto LABEL_12;
    case 4:
      uint64_t v8 = 0x6D6E6F7269766E65;
      uint64_t v9 = 7630437;
LABEL_15:
      unint64_t v2 = v9 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      if (v5 == v8) {
        goto LABEL_16;
      }
      goto LABEL_18;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_18;
      }
LABEL_16:
      if (v6 == v2) {
        char v10 = 1;
      }
      else {
LABEL_18:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_100106140(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED000064695F6E6FLL;
  uint64_t v3 = 0x69737265766E6F63;
  uint64_t v4 = a1;
  unint64_t v5 = 0x69737265766E6F63;
  unint64_t v6 = 0xED000064695F6E6FLL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0x8000000100184760;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 2:
      unint64_t v5 = 0x5F65746176697270;
      unint64_t v6 = 0xED00007475706E69;
      break;
    case 3:
      unint64_t v5 = 0x657A696C616E6966;
      unint64_t v6 = 0xEF6E656B6F745F64;
      break;
    case 4:
      unint64_t v5 = 0x6D617473656D6974;
      unint64_t v6 = 0xE900000000000070;
      break;
    case 5:
      unint64_t v5 = 0x6369666974726563;
      unint64_t v6 = 0xEB00000000657461;
      break;
    case 6:
      unint64_t v6 = 0xEF657079745F6E6FLL;
      break;
    case 7:
      unint64_t v5 = 0x6D6E6F7269766E65;
      unint64_t v6 = 0xEB00000000746E65;
      break;
    case 8:
      unint64_t v5 = 0x636F6C6C615F7369;
      unint64_t v6 = 0xEC00000064657461;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x8000000100184760;
      if (v5 == 0xD000000000000012) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v2 = 0xED00007475706E69;
      if (v5 != 0x5F65746176697270) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v2 = 0xEF6E656B6F745F64;
      if (v5 != 0x657A696C616E6966) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v2 = 0xE900000000000070;
      if (v5 != 0x6D617473656D6974) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v2 = 0xEB00000000657461;
      if (v5 != 0x6369666974726563) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v2 = 0xEF657079745F6E6FLL;
      if (v5 != 0x69737265766E6F63) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      uint64_t v3 = 0x6D6E6F7269766E65;
      unint64_t v2 = 0xEB00000000746E65;
      goto LABEL_24;
    case 8:
      unint64_t v2 = 0xEC00000064657461;
      if (v5 != 0x636F6C6C615F7369) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v3) {
        goto LABEL_28;
      }
LABEL_25:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10010648C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 1146049104;
  }
  else {
    uint64_t v3 = 5653828;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 1146049104;
  }
  else {
    uint64_t v5 = 5653828;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100106524(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6564692D6D657469;
    }
    else {
      uint64_t v3 = 0x6E692D6E656B6F74;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEF7265696669746ELL;
    }
    else {
      unint64_t v4 = 0xEA00000000006F66;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6564692D6D657469;
      }
      else {
        uint64_t v6 = 0x6E692D6E656B6F74;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEF7265696669746ELL;
      }
      else {
        unint64_t v7 = 0xEA00000000006F66;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 6582128;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 6582128)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100106650(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000014;
  }
  else {
    unint64_t v3 = 0x736F506863746566;
  }
  if (v2) {
    unint64_t v4 = 0xED00006B63616274;
  }
  else {
    unint64_t v4 = 0x80000001001852F0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000014;
  }
  else {
    unint64_t v5 = 0x736F506863746566;
  }
  if (a2) {
    unint64_t v6 = 0x80000001001852F0;
  }
  else {
    unint64_t v6 = 0xED00006B63616274;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100106708(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA0000000000676ELL;
  unint64_t v3 = 0x697274732D73776ALL;
  uint64_t v4 = a1;
  unint64_t v5 = 0x697274732D73776ALL;
  unint64_t v6 = 0xEA0000000000676ELL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000013;
      char v7 = "ad-interaction-type";
      goto LABEL_5;
    case 2:
      unint64_t v5 = 0x676E69726564726FLL;
      unint64_t v6 = 0xEE007865646E692DLL;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000016;
      char v7 = "marketplace-identifier";
LABEL_5:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v6 = 0x8000000100184C30;
      unint64_t v5 = 0xD000000000000012;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v3 = 0xD000000000000013;
      char v8 = "ad-interaction-type";
      goto LABEL_12;
    case 2:
      unint64_t v2 = 0xEE007865646E692DLL;
      if (v5 != 0x676E69726564726FLL) {
        goto LABEL_17;
      }
      goto LABEL_14;
    case 3:
      unint64_t v3 = 0xD000000000000016;
      char v8 = "marketplace-identifier";
LABEL_12:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_13;
    case 4:
      unint64_t v2 = 0x8000000100184C30;
      if (v5 != 0xD000000000000012) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v3) {
        goto LABEL_17;
      }
LABEL_14:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_17:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_1001068EC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA0000000000676ELL;
  unint64_t v3 = 0x697274732D73776ALL;
  uint64_t v4 = a1;
  unint64_t v5 = 0x697274732D73776ALL;
  unint64_t v6 = 0xEA0000000000676ELL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6B63616274736F70;
      unint64_t v6 = 0xEC0000006C72752DLL;
      break;
    case 2:
      unint64_t v6 = 0x8000000100184BF0;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000015;
      unint64_t v6 = 0x80000001001853B0;
      break;
    case 4:
      unint64_t v5 = 0x676E69726564726FLL;
      unint64_t v6 = 0xEE007865646E692DLL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEC0000006C72752DLL;
      if (v5 == 0x6B63616274736F70) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0x8000000100184BF0;
      if (v5 != 0xD000000000000013) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v3 = 0xD000000000000015;
      unint64_t v2 = 0x80000001001853B0;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0xEE007865646E692DLL;
      if (v5 != 0x676E69726564726FLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100106B00(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x64695F79726F7473;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x64695F79726F7473;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000012;
      unint64_t v6 = "advertised_item_id";
      goto LABEL_10;
    case 2:
      unint64_t v5 = 0x69737265766E6F63;
      unint64_t v3 = 0xED000064695F6E6FLL;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000010;
      unint64_t v6 = "is_story_sampled";
      goto LABEL_10;
    case 4:
      char v7 = "is_story_complete";
      goto LABEL_8;
    case 5:
      unint64_t v5 = 0x5F676E69646E6570;
      unint64_t v3 = 0xEE0073746E657665;
      break;
    case 6:
      char v7 = "total_event_count";
LABEL_8:
      unint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 7:
      unint64_t v5 = 0xD000000000000017;
      unint64_t v6 = "last_modified_timestamp";
LABEL_10:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v8 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v9 = 0xD000000000000012;
      char v10 = "advertised_item_id";
      goto LABEL_24;
    case 2:
      unint64_t v8 = 0xED000064695F6E6FLL;
      if (v5 != 0x69737265766E6F63) {
        goto LABEL_27;
      }
      goto LABEL_25;
    case 3:
      unint64_t v9 = 0xD000000000000010;
      char v10 = "is_story_sampled";
      goto LABEL_24;
    case 4:
      Swift::String v11 = "is_story_complete";
      goto LABEL_20;
    case 5:
      unint64_t v8 = 0xEE0073746E657665;
      if (v5 != 0x5F676E69646E6570) {
        goto LABEL_27;
      }
      goto LABEL_25;
    case 6:
      Swift::String v11 = "total_event_count";
LABEL_20:
      unint64_t v8 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000011;
      goto LABEL_21;
    case 7:
      unint64_t v9 = 0xD000000000000017;
      char v10 = "last_modified_timestamp";
LABEL_24:
      unint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      if (v5 == v9) {
        goto LABEL_25;
      }
      goto LABEL_27;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_27;
      }
LABEL_25:
      if (v3 == v8) {
        char v12 = 1;
      }
      else {
LABEL_27:
      }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

uint64_t sub_100106D80(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x696669746E656469;
  unint64_t v3 = 0xEA00000000007265;
  uint64_t v4 = a1;
  unint64_t v5 = 0x696669746E656469;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x616E5F70756F7267;
      unint64_t v3 = 0xEA0000000000656DLL;
      break;
    case 2:
      unint64_t v5 = 0x6F635F7972746572;
      unint64_t v3 = 0xEB00000000746E75;
      break;
    case 3:
      unint64_t v3 = 0x8000000100184840;
      unint64_t v5 = 0xD000000000000016;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xEA00000000007265;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA0000000000656DLL;
      if (v5 == 0x616E5F70756F7267) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x6F635F7972746572;
      unint64_t v6 = 0xEB00000000746E75;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0x8000000100184840;
      if (v5 == 0xD000000000000016) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100106F38(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000035;
  }
  else {
    unint64_t v3 = 0xD000000000000017;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100185340;
  }
  else {
    unint64_t v4 = 0x8000000100185360;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000035;
  }
  else {
    unint64_t v5 = 0xD000000000000017;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100185360;
  }
  else {
    unint64_t v6 = 0x8000000100185340;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100106FE4(char a1, char a2)
{
  unint64_t v3 = 6583649;
  unint64_t v4 = 0xE300000000000000;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 6580578;
      break;
    case 2:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v5 = 1887007844;
      goto LABEL_7;
    case 3:
      unint64_t v3 = 7627113;
      break;
    case 4:
      unint64_t v3 = 7566185;
      break;
    case 5:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v5 = 1668181870;
LABEL_7:
      unint64_t v3 = v5 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
      break;
    default:
      break;
  }
  uint64_t v6 = 6583649;
  unint64_t v7 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      if (v3 == 6580578) {
        goto LABEL_19;
      }
      goto LABEL_21;
    case 2:
      unint64_t v7 = 0xE500000000000000;
      uint64_t v8 = 1887007844;
      goto LABEL_18;
    case 3:
      if (v3 != 7627113) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 4:
      uint64_t v6 = 7566185;
      goto LABEL_15;
    case 5:
      unint64_t v7 = 0xE500000000000000;
      uint64_t v8 = 1668181870;
LABEL_18:
      if (v3 == (v8 & 0xFFFF0000FFFFFFFFLL | 0x6500000000)) {
        goto LABEL_19;
      }
      goto LABEL_21;
    default:
LABEL_15:
      if (v3 != v6) {
        goto LABEL_21;
      }
LABEL_19:
      if (v4 == v7) {
        char v9 = 1;
      }
      else {
LABEL_21:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_100107180(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6B63696C63;
  }
  else {
    uint64_t v3 = 2003134838;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6B63696C63;
  }
  else {
    uint64_t v5 = 2003134838;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10010721C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x6973736572706D69;
  unint64_t v3 = 0xED000064695F6E6FLL;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6973736572706D69;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000011;
      unint64_t v6 = "publisher_item_id";
      goto LABEL_7;
    case 2:
      char v7 = "advertised_item_id";
      goto LABEL_10;
    case 3:
      unint64_t v5 = 0x6F7774656E5F6461;
      unint64_t v3 = 0xED000064695F6B72;
      break;
    case 4:
      unint64_t v5 = 0x6D617473656D6974;
      unint64_t v3 = 0xE900000000000070;
      break;
    case 5:
      unint64_t v5 = 0xD000000000000010;
      unint64_t v6 = "interaction_type";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v5 = 0x5F746361706D6F63;
      uint64_t v8 = 7567210;
      goto LABEL_12;
    case 7:
      char v7 = "creation_timestamp";
LABEL_10:
      unint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 8:
      unint64_t v5 = 0x6D6E6F7269766E65;
      uint64_t v8 = 7630437;
LABEL_12:
      unint64_t v3 = v8 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  unint64_t v9 = 0xED000064695F6E6FLL;
  switch(a2)
  {
    case 1:
      unint64_t v10 = 0xD000000000000011;
      Swift::String v11 = "publisher_item_id";
      goto LABEL_21;
    case 2:
      char v12 = "advertised_item_id";
      goto LABEL_25;
    case 3:
      unint64_t v9 = 0xED000064695F6B72;
      if (v5 != 0x6F7774656E5F6461) {
        goto LABEL_31;
      }
      goto LABEL_27;
    case 4:
      unint64_t v9 = 0xE900000000000070;
      if (v5 != 0x6D617473656D6974) {
        goto LABEL_31;
      }
      goto LABEL_27;
    case 5:
      unint64_t v10 = 0xD000000000000010;
      Swift::String v11 = "interaction_type";
LABEL_21:
      unint64_t v9 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      if (v5 != v10) {
        goto LABEL_31;
      }
      goto LABEL_27;
    case 6:
      uint64_t v13 = 0x5F746361706D6F63;
      uint64_t v14 = 7567210;
      goto LABEL_30;
    case 7:
      char v12 = "creation_timestamp";
LABEL_25:
      unint64_t v9 = (unint64_t)(v12 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000012;
      goto LABEL_26;
    case 8:
      uint64_t v13 = 0x6D6E6F7269766E65;
      uint64_t v14 = 7630437;
LABEL_30:
      unint64_t v9 = v14 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      if (v5 != v13) {
        goto LABEL_31;
      }
      goto LABEL_27;
    default:
LABEL_26:
      if (v5 != v2) {
        goto LABEL_31;
      }
LABEL_27:
      if (v3 == v9) {
        char v15 = 1;
      }
      else {
LABEL_31:
      }
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v15 & 1;
  }
}

uint64_t sub_100107518(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEF7265696669746ELL;
  uint64_t v3 = 0x6564692D6D657469;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6564692D6D657469;
  unint64_t v6 = 0xEF7265696669746ELL;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x2D65746176697270;
      unint64_t v6 = 0xED00007475706E69;
      break;
    case 2:
      uint64_t v5 = 0x65696C632D667270;
      unint64_t v6 = 0xEA0000000000746ELL;
      break;
    case 3:
      uint64_t v5 = 0x776F6465722D7369;
      unint64_t v6 = 0xED000064616F6C6ELL;
      break;
    case 4:
      uint64_t v5 = 0x6D617473656D6974;
      unint64_t v6 = 0xE900000000000070;
      break;
    case 5:
      uint64_t v5 = 0x6369666974726563;
      uint64_t v7 = 6648929;
      goto LABEL_8;
    case 6:
      uint64_t v5 = 0x6D6E6F7269766E65;
      uint64_t v7 = 7630437;
LABEL_8:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v8 = 0x2D65746176697270;
      uint64_t v9 = 0x7475706E69;
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xEA0000000000746ELL;
      if (v5 != 0x65696C632D667270) {
        goto LABEL_23;
      }
      goto LABEL_20;
    case 3:
      uint64_t v8 = 0x776F6465722D7369;
      uint64_t v9 = 0x64616F6C6ELL;
LABEL_14:
      unint64_t v2 = v9 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      if (v5 != v8) {
        goto LABEL_23;
      }
      goto LABEL_20;
    case 4:
      unint64_t v2 = 0xE900000000000070;
      if (v5 != 0x6D617473656D6974) {
        goto LABEL_23;
      }
      goto LABEL_20;
    case 5:
      uint64_t v3 = 0x6369666974726563;
      unint64_t v2 = 0xEB00000000657461;
      goto LABEL_19;
    case 6:
      unint64_t v2 = 0xEB00000000746E65;
      if (v5 != 0x6D6E6F7269766E65) {
        goto LABEL_23;
      }
      goto LABEL_20;
    default:
LABEL_19:
      if (v5 != v3) {
        goto LABEL_23;
      }
LABEL_20:
      if (v6 == v2) {
        char v10 = 1;
      }
      else {
LABEL_23:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_1001077CC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x657372616F63;
    }
    else {
      uint64_t v3 = 1701736302;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE600000000000000;
    }
    else {
      unint64_t v4 = 0xE400000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x657372616F63;
      }
      else {
        uint64_t v6 = 1701736302;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE600000000000000;
      }
      else {
        unint64_t v7 = 0xE400000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701734758;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701734758)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1001078B8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 2003134838;
  }
  else {
    uint64_t v3 = 0x6B63696C63;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 2003134838;
  }
  else {
    uint64_t v5 = 0x6B63696C63;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100107954(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x65706F6C65766564;
  }
  else {
    uint64_t v3 = 0x726F7774654E6461;
  }
  if (v2) {
    unint64_t v4 = 0xE90000000000006BLL;
  }
  else {
    unint64_t v4 = 0xE900000000000072;
  }
  if (a2) {
    uint64_t v5 = 0x65706F6C65766564;
  }
  else {
    uint64_t v5 = 0x726F7774654E6461;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000072;
  }
  else {
    unint64_t v6 = 0xE90000000000006BLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100107A00(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA0000000000746ELL;
  uint64_t v3 = 0x65696C632D667270;
  uint64_t v4 = a1;
  uint64_t v5 = 0x65696C632D667270;
  unint64_t v6 = 0xEA0000000000746ELL;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x2D65746176697270;
      uint64_t v7 = 0x7475706E69;
      goto LABEL_7;
    case 2:
      uint64_t v5 = 0x6D617473656D6974;
      unint64_t v6 = 0xE900000000000070;
      break;
    case 3:
      uint64_t v5 = 0x6369666974726563;
      unint64_t v6 = 0xEB00000000657461;
      break;
    case 4:
      uint64_t v5 = 0x6564692D6D657469;
      unint64_t v6 = 0xEF7265696669746ELL;
      break;
    case 5:
      uint64_t v5 = 0x776F6465722D7369;
      uint64_t v7 = 0x64616F6C6ELL;
LABEL_7:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v8 = 0x2D65746176697270;
      uint64_t v9 = 0x7475706E69;
      goto LABEL_18;
    case 2:
      unint64_t v2 = 0xE900000000000070;
      if (v5 != 0x6D617473656D6974) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 3:
      unint64_t v2 = 0xEB00000000657461;
      if (v5 != 0x6369666974726563) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 4:
      uint64_t v3 = 0x6564692D6D657469;
      unint64_t v2 = 0xEF7265696669746ELL;
      goto LABEL_15;
    case 5:
      uint64_t v8 = 0x776F6465722D7369;
      uint64_t v9 = 0x64616F6C6ELL;
LABEL_18:
      unint64_t v2 = v9 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      if (v5 == v8) {
        goto LABEL_19;
      }
      goto LABEL_21;
    default:
LABEL_15:
      if (v5 != v3) {
        goto LABEL_21;
      }
LABEL_19:
      if (v6 == v2) {
        char v10 = 1;
      }
      else {
LABEL_21:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_100107C68(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7368801;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 7368801;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 6448503;
      break;
    case 2:
      uint64_t v5 = 0x6F72685477656976;
      unint64_t v3 = 0xEB00000000686775;
      break;
    case 3:
      uint64_t v5 = 0x7268546B63696C63;
      unint64_t v3 = 0xEC0000006867756FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 6448503) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x6F72685477656976;
      unint64_t v6 = 0xEB00000000686775;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEC0000006867756FLL;
      if (v5 == 0x7268546B63696C63) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100107DF0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x657372616F63;
    }
    else {
      uint64_t v3 = 1701734758;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE600000000000000;
    }
    else {
      unint64_t v4 = 0xE400000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x657372616F63;
      }
      else {
        uint64_t v6 = 1701734758;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE600000000000000;
      }
      else {
        unint64_t v7 = 0xE400000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v3 = 1701736302;
    unint64_t v4 = 0xE400000000000000;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701736302)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100107ED8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x64657A696C616572;
  }
  else {
    uint64_t v3 = 0x676E69646E6570;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x64657A696C616572;
  }
  else {
    uint64_t v5 = 0x676E69646E6570;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100107F80(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xE90000000000006BLL;
  uint64_t v3 = 0x726F7774654E6461;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x656372656D6D6F63;
    }
    else {
      uint64_t v5 = 0x65706F6C65766564;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE800000000000000;
    }
    else {
      unint64_t v6 = 0xE900000000000072;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x726F7774654E6461;
  unint64_t v6 = 0xE90000000000006BLL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x656372656D6D6F63;
    }
    else {
      uint64_t v3 = 0x65706F6C65766564;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE800000000000000;
    }
    else {
      unint64_t v2 = 0xE900000000000072;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10010809C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000064;
  uint64_t v3 = 0x657A696C616E6966;
  uint64_t v4 = a1;
  uint64_t v5 = 0x657A696C616E6966;
  unint64_t v6 = 0xE900000000000064;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v5 = 0x64657463656A6572;
      break;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x657461647075;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x6572756C696166;
      break;
    case 4:
      uint64_t v5 = 0x73696D736E617274;
      unint64_t v6 = 0xEC0000006E6F6973;
      break;
    case 5:
      uint64_t v5 = 0x6365526E656B6F74;
      unint64_t v6 = 0xED00006465766965;
      break;
    case 6:
      uint64_t v5 = 0x52646579616C6564;
      unint64_t v6 = 0xEE00747069656365;
      break;
    case 7:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x73736563637573;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      if (v5 == 0x64657463656A6572) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v2 = 0xE600000000000000;
      if (v5 != 0x657461647075) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x6572756C696166) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v2 = 0xEC0000006E6F6973;
      if (v5 != 0x73696D736E617274) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v2 = 0xED00006465766965;
      if (v5 != 0x6365526E656B6F74) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v3 = 0x52646579616C6564;
      unint64_t v2 = 0xEE00747069656365;
      goto LABEL_21;
    case 7:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x73736563637573) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v3) {
        goto LABEL_25;
      }
LABEL_22:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100108368(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x647261646E617473;
  }
  else {
    uint64_t v3 = 7107189;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x647261646E617473;
  }
  else {
    uint64_t v5 = 7107189;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100108408(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6C7074656B72616DLL;
  }
  else {
    uint64_t v3 = 7368801;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xEB00000000656361;
  }
  if (a2) {
    uint64_t v5 = 0x6C7074656B72616DLL;
  }
  else {
    uint64_t v5 = 7368801;
  }
  if (a2) {
    unint64_t v6 = 0xEB00000000656361;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1001084B0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC0000006E6F6973;
  uint64_t v3 = 0x736572706D496461;
  uint64_t v4 = a1;
  uint64_t v5 = 0x736572706D496461;
  unint64_t v6 = 0xEC0000006E6F6973;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x64696C6156706174;
      uint64_t v7 = 0x6E6F697461;
      goto LABEL_8;
    case 2:
      uint64_t v5 = 0x746C69466B6E696CLL;
      unint64_t v6 = 0xEA00000000007265;
      break;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x68636E75616CLL;
      break;
    case 4:
      uint64_t v5 = 0x7265766E6F436461;
      break;
    case 5:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x74736575716572;
      break;
    case 6:
      uint64_t v5 = 0x6D6F4379726F7473;
      uint64_t v7 = 0x6574656C70;
LABEL_8:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v8 = 0x64696C6156706174;
      uint64_t v9 = 0x6E6F697461;
      goto LABEL_21;
    case 2:
      unint64_t v2 = 0xEA00000000007265;
      if (v5 != 0x746C69466B6E696CLL) {
        goto LABEL_24;
      }
      goto LABEL_22;
    case 3:
      unint64_t v2 = 0xE600000000000000;
      if (v5 != 0x68636E75616CLL) {
        goto LABEL_24;
      }
      goto LABEL_22;
    case 4:
      if (v5 != 0x7265766E6F436461) {
        goto LABEL_24;
      }
      goto LABEL_22;
    case 5:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x74736575716572;
      goto LABEL_18;
    case 6:
      uint64_t v8 = 0x6D6F4379726F7473;
      uint64_t v9 = 0x6574656C70;
LABEL_21:
      unint64_t v2 = v9 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      if (v5 == v8) {
        goto LABEL_22;
      }
      goto LABEL_24;
    default:
LABEL_18:
      if (v5 != v3) {
        goto LABEL_24;
      }
LABEL_22:
      if (v6 == v2) {
        char v10 = 1;
      }
      else {
LABEL_24:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_100108728(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x656761676E656572;
  }
  else {
    uint64_t v3 = 0x6C6C6174736E69;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xEC000000746E656DLL;
  }
  if (a2) {
    uint64_t v5 = 0x656761676E656572;
  }
  else {
    uint64_t v5 = 0x6C6C6174736E69;
  }
  if (a2) {
    unint64_t v6 = 0xEC000000746E656DLL;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1001087D8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED00006E6F697461;
  unint64_t v3 = 0x7A69726F68747541;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7A69726F68747541;
  unint64_t v6 = 0xED00006E6F697461;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x2D746E65746E6F43;
      unint64_t v6 = 0xEC00000065707954;
      break;
    case 2:
      unint64_t v5 = 0x6567412D72657355;
      unint64_t v6 = 0xEA0000000000746ELL;
      break;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v5 = 0x65676E6152;
      break;
    case 4:
      unint64_t v6 = 0x8000000100184A60;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 5:
      unint64_t v5 = 0x4C2D747065636341;
      unint64_t v6 = 0xEF65676175676E61;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEC00000065707954;
      if (v5 == 0x2D746E65746E6F43) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v2 = 0xEA0000000000746ELL;
      if (v5 != 0x6567412D72657355) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x65676E6152) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v2 = 0x8000000100184A60;
      unint64_t v3 = 0xD000000000000013;
      goto LABEL_15;
    case 5:
      unint64_t v2 = 0xEF65676175676E61;
      if (v5 != 0x4C2D747065636341) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v3) {
        goto LABEL_19;
      }
LABEL_16:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int sub_100108A2C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100108B20()
{
  return Hasher._finalize()();
}

Swift::Int sub_100108C14()
{
  return Hasher._finalize()();
}

Swift::Int sub_100108D4C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100108E60()
{
  return Hasher._finalize()();
}

Swift::Int sub_100108F48()
{
  return Hasher._finalize()();
}

Swift::Int sub_100109040()
{
  return Hasher._finalize()();
}

Swift::Int sub_100109158()
{
  return Hasher._finalize()();
}

Swift::Int sub_100109244()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010938C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010946C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100109558()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001095E0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001096FC()
{
  return Hasher._finalize()();
}

uint64_t sub_1001097E4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100109940()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100109A24()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100109AF0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100109BB8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100109C80()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100109D58()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100109E5C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100109FF0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010A0F0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010A1F8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010A348()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010A4CC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010A624()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10010A748()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010A87C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010A9C4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010AB2C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010AC70()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010ADD8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010AEB4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010AF38()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B028()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B188()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B2A0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B3B0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B4C4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B5AC()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B690()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B780()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B864()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010B94C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10010BA40()
{
  return Hasher._finalize()();
}

uint64_t Postback.init(postbackResponse:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  unint64_t v8 = sub_1000B74F0();
  unint64_t v9 = sub_1000B7544();
  swift_bridgeObjectRetain();
  JWS.init(compactJWS:)(v6, v7, (unint64_t)&type metadata for Postback.JWSPayload, v8, v9, (uint64_t)v23);
  if (v3) {
    return sub_100103978((uint64_t)a1);
  }
  long long v11 = v23[11];
  *(_OWORD *)(a2 + 208) = v23[10];
  *(_OWORD *)(a2 + 224) = v11;
  *(void *)(a2 + 240) = v24;
  long long v12 = v23[7];
  *(_OWORD *)(a2 + 144) = v23[6];
  *(_OWORD *)(a2 + 160) = v12;
  long long v13 = v23[9];
  *(_OWORD *)(a2 + 176) = v23[8];
  *(_OWORD *)(a2 + 192) = v13;
  long long v14 = v23[3];
  *(_OWORD *)(a2 + 80) = v23[2];
  *(_OWORD *)(a2 + 96) = v14;
  long long v15 = v23[5];
  *(_OWORD *)(a2 + 112) = v23[4];
  *(_OWORD *)(a2 + 128) = v15;
  long long v16 = v23[1];
  *(_OWORD *)(a2 + 48) = v23[0];
  *(_OWORD *)(a2 + 64) = v16;
  uint64_t v18 = a1[2];
  uint64_t v17 = a1[3];
  uint64_t v20 = a1[4];
  uint64_t v19 = a1[5];
  uint64_t v22 = a1[6];
  uint64_t v21 = a1[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_100103978((uint64_t)a1);
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v21;
  return result;
}

__n128 Postback.payload.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 v14 = v1[13];
  __n128 v11 = v1[9];
  __n128 v12 = v1[10];
  __n128 v13 = v1[12];
  __n128 v7 = v1[5];
  __n128 v8 = v1[6];
  __n128 v9 = v1[7];
  __n128 v10 = v1[8];
  __n128 v21 = v1[11];
  __n128 v22 = v13;
  unint64_t v23 = v14.n128_u64[0];
  __n128 v17 = v9;
  __n128 v18 = v10;
  __n128 v19 = v11;
  __n128 v20 = v12;
  __n128 v15 = v7;
  __n128 v16 = v8;
  sub_100082490((uint64_t)&v15);
  __n128 v3 = v22;
  a1[6] = v21;
  a1[7] = v3;
  a1[8].n128_u64[0] = v23;
  __n128 v4 = v18;
  a1[2] = v17;
  a1[3] = v4;
  __n128 v5 = v20;
  a1[4] = v19;
  a1[5] = v5;
  __n128 result = v16;
  *a1 = v15;
  a1[1] = result;
  return result;
}

uint64_t Postback.compactJWS.getter()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_10010BDB4(char a1)
{
  unint64_t result = 0x697274732D73776ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6B63616274736F70;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x676E69726564726FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10010BE88(char a1)
{
  unint64_t result = 0x697274732D73776ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6B63616274736F70;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x676E69726564726FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10010BF5C(unsigned __int8 *a1, char *a2)
{
  return sub_1001068EC(*a1, *a2);
}

Swift::Int sub_10010BF68()
{
  return sub_1001095E0();
}

uint64_t sub_10010BF70()
{
  return sub_10010A0F0();
}

Swift::Int sub_10010BF78()
{
  return sub_10010B188();
}

unint64_t sub_10010BF80@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10010D548(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10010BFB0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10010BDB4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10010BFDC()
{
  return sub_10010BE88(*v0);
}

unint64_t sub_10010BFE4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10010D548(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10010C00C(uint64_t a1)
{
  unint64_t v2 = sub_10010C25C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010C048(uint64_t a1)
{
  unint64_t v2 = sub_10010C25C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PostbackResponse.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E3DA8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_10010C25C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10010C25C()
{
  unint64_t result = qword_1001E3DB0;
  if (!qword_1001E3DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3DB0);
  }
  return result;
}

__n128 PostbackResponse.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10010D594(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10010C304(void *a1)
{
  return PostbackResponse.encode(to:)(a1);
}

BOOL Postback.Version.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C2100, v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

uint64_t Postback.Version.rawValue.getter()
{
  return 6647407;
}

Swift::Int sub_10010C374()
{
  return Hasher._finalize()();
}

uint64_t sub_10010C3C0()
{
  return String.hash(into:)();
}

Swift::Int sub_10010C3D0()
{
  return Hasher._finalize()();
}

uint64_t sub_10010C418@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C2138, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_10010C46C(void *a1@<X8>)
{
  *a1 = 6647407;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_10010C480()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10010C4E0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Postback.JWSHeader.algorithm.getter(uint64_t a1)
{
  return a1;
}

uint64_t Postback.JWSHeader.keyID.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_10010C598(char *a1, char *a2)
{
  return sub_100104C38(*a1, *a2);
}

Swift::Int sub_10010C5A4()
{
  return Hasher._finalize()();
}

uint64_t sub_10010C60C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10010C658()
{
  return Hasher._finalize()();
}

uint64_t sub_10010C6BC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C2170, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10010C71C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6777953;
  if (*v1) {
    uint64_t v2 = 6580587;
  }
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_10010C744()
{
  if (*v0) {
    return 6580587;
  }
  else {
    return 6777953;
  }
}

uint64_t sub_10010C768@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C2170, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_10010C7CC(uint64_t a1)
{
  unint64_t v2 = sub_10010D968();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010C808(uint64_t a1)
{
  unint64_t v2 = sub_10010D968();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Postback.JWSHeader.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_100012960(&qword_1001E3DB8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  __n128 v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10010D968();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t Postback.JWSHeader.init(from:)(void *a1)
{
  uint64_t result = sub_10010D9BC(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_10010C9E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10010D9BC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10010CA14(void *a1)
{
  return Postback.JWSHeader.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t Postback.postbackURL.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Postback.conversionValueTier.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Postback.JWSPayload.publisherItemID.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t Postback.JWSPayload.advertisedItemID.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t Postback.JWSPayload.sourceIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Postback.JWSPayload.adNetworkID.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Postback.JWSPayload.conversionType.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Postback.JWSPayload.didWin.getter()
{
  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t Postback.JWSPayload.sequenceIndex.getter()
{
  return *(void *)(v0 + 128);
}

unint64_t sub_10010CB48(char a1)
{
  unint64_t result = 0x6973736572706D69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0x69737265766E6F63;
      break;
    case 8:
      unint64_t result = 0x6E69772D646964;
      break;
    case 9:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10010CC98(char a1)
{
  unint64_t result = 0x6973736572706D69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0x69737265766E6F63;
      break;
    case 8:
      unint64_t result = 0x6E69772D646964;
      break;
    case 9:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10010CDE8(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10010CB48(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10010CB48(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10010CE74()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10010CB48(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10010CED8()
{
  sub_10010CB48(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10010CF2C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10010CB48(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_10010CF8C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10010DC18(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10010CFBC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10010CB48(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10010CFE8()
{
  return sub_10010CC98(*v0);
}

unint64_t sub_10010CFF0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10010DC18(a1);
  *a2 = result;
  return result;
}

void sub_10010D018(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10010D024(uint64_t a1)
{
  unint64_t v2 = sub_10010DBC4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010D060(uint64_t a1)
{
  unint64_t v2 = sub_10010DBC4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Postback.JWSPayload.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E3DC8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_10010DBC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

__n128 Postback.JWSPayload.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10010DC64(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(void *)(a2 + 128) = v9;
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10010D3AC(void *a1)
{
  return Postback.JWSPayload.encode(to:)(a1);
}

uint64_t Postback.header.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Postback.signature.getter()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Postback.interactionType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Postback.interactionType.modify())()
{
  return PostbackUpdateTestingRequest.fineCV.getter;
}

uint64_t Postback.postbackURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Postback.postbackURL.modify())()
{
  return PostbackUpdateTestingRequest.fineCV.getter;
}

uint64_t Postback.conversionValueTier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*Postback.conversionValueTier.modify())()
{
  return PostbackUpdateTestingRequest.fineCV.getter;
}

unint64_t sub_10010D548(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C2068, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_10010D594@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E3E40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10010C25C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v35 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v29 = v9;
  char v34 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v30 = v13;
  uint64_t v26 = v12;
  char v33 = 2;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
  char v32 = 3;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v15;
  uint64_t v23 = v16;
  uint64_t v24 = v17;
  char v31 = 4;
  swift_bridgeObjectRetain();
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t v19 = v24;
  swift_bridgeObjectRelease();
  uint64_t v20 = v30;
  swift_bridgeObjectRelease();
  uint64_t v21 = v27;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v29;
  a2[1] = v11;
  a2[2] = v25;
  a2[3] = v21;
  a2[4] = v26;
  a2[5] = v20;
  a2[6] = v23;
  a2[7] = v19;
  a2[8] = v18;
  return result;
}

unint64_t sub_10010D968()
{
  unint64_t result = qword_1001E3DC0;
  if (!qword_1001E3DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3DC0);
  }
  return result;
}

uint64_t sub_10010D9BC(void *a1)
{
  uint64_t v3 = sub_100012960(&qword_1001E3E38);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_100012D78(a1, a1[3]);
  sub_10010D968();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_10010DBC4()
{
  unint64_t result = qword_1001E3DD0;
  if (!qword_1001E3DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3DD0);
  }
  return result;
}

unint64_t sub_10010DC18(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C21C0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t sub_10010DC64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E3E30);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v83 = a1;
  sub_100012D78(a1, v9);
  sub_10010DBC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v83);
  }
  uint64_t v10 = v6;
  uint64_t v55 = a2;
  LOBYTE(v66[0]) = 0;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v66[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v66[0]) = 2;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v56 = v15;
  uint64_t v53 = v16;
  LOBYTE(v66[0]) = 3;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain();
  uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v52 = v18;
  char v82 = v19 & 1;
  LOBYTE(v66[0]) = 4;
  LODWORD(v18) = v19;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  int v48 = v18;
  uint64_t v49 = v20;
  uint64_t v50 = v11;
  LOBYTE(v66[0]) = 5;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = v22;
  uint64_t v46 = v21;
  LOBYTE(v66[0]) = 6;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v47 = v25;
  uint64_t v43 = v24;
  uint64_t v45 = v23;
  LOBYTE(v66[0]) = 7;
  swift_bridgeObjectRetain();
  uint64_t v44 = 0;
  uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v42 = v26;
  LOBYTE(v66[0]) = 8;
  swift_bridgeObjectRetain();
  LOBYTE(v23) = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v42;
  char v79 = 9;
  uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
  LODWORD(v23) = v23 & 1;
  LODWORD(v44) = v23;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  *(void *)&long long v57 = v50;
  *((void *)&v57 + 1) = v13;
  uint64_t v29 = v56;
  *(void *)&long long v58 = v54;
  *((void *)&v58 + 1) = v56;
  *(void *)&long long v59 = v53;
  *((void *)&v59 + 1) = v52;
  *(void *)&long long v60 = v51;
  BYTE8(v60) = v48 & 1;
  uint64_t v30 = v45;
  *(void *)&long long v61 = v49;
  *((void *)&v61 + 1) = v46;
  *(void *)&long long v62 = v45;
  *((void *)&v62 + 1) = v43;
  *(void *)&long long v63 = v47;
  *((void *)&v63 + 1) = v41;
  uint64_t v31 = v27;
  *(void *)&long long v64 = v27;
  BYTE8(v64) = v23;
  uint64_t v65 = v28;
  sub_100082490((uint64_t)&v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = v52;
  swift_bridgeObjectRelease();
  uint64_t v33 = v30;
  swift_bridgeObjectRelease();
  uint64_t v34 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v83);
  v66[0] = v50;
  v66[1] = v13;
  v66[2] = v54;
  v66[3] = v29;
  v66[4] = v53;
  v66[5] = v32;
  v66[6] = v51;
  char v67 = v82;
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v81;
  *(_DWORD *)&v68[3] = *(_DWORD *)&v81[3];
  uint64_t v69 = v49;
  uint64_t v70 = v46;
  uint64_t v71 = v33;
  uint64_t v72 = v43;
  uint64_t v73 = v34;
  uint64_t v74 = v41;
  uint64_t v75 = v31;
  char v76 = v44;
  *(_DWORD *)uint64_t v77 = *(_DWORD *)v80;
  *(_DWORD *)&v77[3] = *(_DWORD *)&v80[3];
  uint64_t v78 = v28;
  uint64_t result = sub_100082508((uint64_t)v66);
  long long v36 = v64;
  uint64_t v37 = v55;
  *(_OWORD *)(v55 + 96) = v63;
  *(_OWORD *)(v37 + 112) = v36;
  *(void *)(v37 + 128) = v65;
  long long v38 = v60;
  *(_OWORD *)(v37 + 32) = v59;
  *(_OWORD *)(v37 + 48) = v38;
  long long v39 = v62;
  *(_OWORD *)(v37 + 64) = v61;
  *(_OWORD *)(v37 + 80) = v39;
  long long v40 = v58;
  *(_OWORD *)uint64_t v37 = v57;
  *(_OWORD *)(v37 + 16) = v40;
  return result;
}

unint64_t sub_10010E3E4()
{
  unint64_t result = qword_1001E3DD8;
  if (!qword_1001E3DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3DD8);
  }
  return result;
}

void *initializeWithCopy for PostbackResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PostbackResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  return a1;
}

void *assignWithTake for PostbackResponse(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for PostbackResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostbackResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackResponse()
{
  return &type metadata for PostbackResponse;
}

uint64_t destroy for Postback()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Postback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  uint64_t v13 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v13;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Postback(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Postback(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for Postback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Postback(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Postback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 248) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Postback()
{
  return &type metadata for Postback;
}

unsigned char *storeEnumTagSinglePayload for Postback.Version(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10010ED2CLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Postback.Version()
{
  return &type metadata for Postback.Version;
}

void *initializeWithCopy for Postback.JWSHeader(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Postback.JWSHeader(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Postback.JWSHeader(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Postback.JWSHeader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Postback.JWSHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Postback.JWSHeader()
{
  return &type metadata for Postback.JWSHeader;
}

uint64_t destroy for Postback.JWSPayload()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Postback.JWSPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Postback.JWSPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

__n128 initializeWithTake for Postback.JWSPayload(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for Postback.JWSPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for Postback.JWSPayload(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Postback.JWSPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Postback.JWSPayload()
{
  return &type metadata for Postback.JWSPayload;
}

unsigned char *storeEnumTagSinglePayload for Postback.JWSPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *__n128 result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010F388);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Postback.JWSPayload.CodingKeys()
{
  return &type metadata for Postback.JWSPayload.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Postback.JWSHeader.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010F48CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Postback.JWSHeader.CodingKeys()
{
  return &type metadata for Postback.JWSHeader.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PostbackResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010F590);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostbackResponse.CodingKeys()
{
  return &type metadata for PostbackResponse.CodingKeys;
}

unint64_t sub_10010F5CC()
{
  unint64_t result = qword_1001E3DE0;
  if (!qword_1001E3DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3DE0);
  }
  return result;
}

unint64_t sub_10010F624()
{
  unint64_t result = qword_1001E3DE8;
  if (!qword_1001E3DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3DE8);
  }
  return result;
}

unint64_t sub_10010F67C()
{
  unint64_t result = qword_1001E3DF0;
  if (!qword_1001E3DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3DF0);
  }
  return result;
}

unint64_t sub_10010F6D4()
{
  unint64_t result = qword_1001E3DF8;
  if (!qword_1001E3DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3DF8);
  }
  return result;
}

unint64_t sub_10010F72C()
{
  unint64_t result = qword_1001E3E00;
  if (!qword_1001E3E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3E00);
  }
  return result;
}

unint64_t sub_10010F784()
{
  unint64_t result = qword_1001E3E08;
  if (!qword_1001E3E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3E08);
  }
  return result;
}

unint64_t sub_10010F7DC()
{
  unint64_t result = qword_1001E3E10;
  if (!qword_1001E3E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3E10);
  }
  return result;
}

unint64_t sub_10010F834()
{
  unint64_t result = qword_1001E3E18;
  if (!qword_1001E3E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3E18);
  }
  return result;
}

unint64_t sub_10010F88C()
{
  unint64_t result = qword_1001E3E20;
  if (!qword_1001E3E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3E20);
  }
  return result;
}

unint64_t sub_10010F8E0()
{
  unint64_t result = qword_1001E3E28;
  if (!qword_1001E3E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3E28);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeveloperModeResetBarktivity()
{
  return &type metadata for DeveloperModeResetBarktivity;
}

uint64_t sub_10010F944()
{
  int v3 = (uint64_t (__cdecl *)())((char *)&dword_1001E3E50 + dword_1001E3E50);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100012AB8;
  return v3();
}

uint64_t sub_10010F9E4()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = v1;
  v0[9] = *(void *)(v1 - 8);
  v0[10] = swift_task_alloc();
  return _swift_task_switch(sub_10010FAA0, 0, 0);
}

uint64_t sub_10010FAA0()
{
  uint64_t v16 = v0;
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = Logger.developerMode.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Resetting developer mode", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[9];
  uint64_t v8 = v0[10];
  uint64_t v10 = v0[8];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  id v11 = [self sharedScheduler];
  void v15[3] = &type metadata for ActivityManager;
  void v15[4] = &off_1001CCE58;
  uint64_t v12 = (void *)swift_allocObject();
  v15[0] = v12;
  v12[5] = &type metadata for BackgroundSystemTaskScheduler;
  v12[6] = &off_1001C30C8;
  void v12[2] = v11;
  sub_100087C5C((uint64_t)v15, (uint64_t)(v0 + 2));
  sub_100087D78(0);
  sub_10005D720((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10010FC4C()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010FC84()
{
  return swift_continuation_resume();
}

uint64_t sub_10010FC8C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_100012960(&qword_1001E12E8);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t sub_10010FD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  return _swift_task_switch(sub_10010FD48, 0, 0);
}

uint64_t sub_10010FD48()
{
  id v1 = [self sharedInstance];
  v0[18] = v1;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[19] = isa;
  Class v3 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v0[20] = v3;
  v0[2] = v0;
  v0[3] = sub_10010FEA0;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10010FC84;
  v0[13] = &unk_1001CA708;
  v0[14] = v4;
  [v1 storeSkannerEvents:isa advertisedItemID:v3 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10010FEA0()
{
  return _swift_task_switch(sub_10010FF80, 0, 0);
}

uint64_t sub_10010FF80()
{
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 160);

  Class v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

ValueMetadata *type metadata accessor for AppStoreDaemonSKANInterop()
{
  return &type metadata for AppStoreDaemonSKANInterop;
}

uint64_t sub_10010FFFC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return _swift_task_switch(sub_10011001C, 0, 0);
}

uint64_t sub_10011001C()
{
  id v1 = [self sharedInstance];
  v0[17] = v1;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[18] = isa;
  v0[2] = v0;
  v0[3] = sub_10011015C;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10010FC8C;
  v0[13] = &unk_1001CA760;
  v0[14] = v3;
  [v1 storePostbacks:isa completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10011015C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_1001102D4;
  }
  else {
    uint64_t v2 = sub_10011026C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011026C()
{
  uint64_t v1 = *(void **)(v0 + 144);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001102D4()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = (void *)v0[17];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

id sub_1001104F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SoloEventEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SoloEventEntity()
{
  return self;
}

unint64_t sub_10011054C()
{
  unint64_t result = qword_1001E3E90;
  if (!qword_1001E3E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3E90);
  }
  return result;
}

uint64_t sub_1001105A0()
{
  os_activity_scope_state_s v2 = *(os_activity_scope_state_s *)(v0 + 16);
  os_activity_scope_leave(&v2);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LogActivity()
{
  return self;
}

uint64_t sub_10011062C()
{
  qword_1001E3EB0 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");

  return swift_unknownObjectRetain();
}

os_activity_t sub_100110668(os_activity_t description, char a2, void *dso)
{
  uint64_t v4 = (const char *)description;
  if (a2)
  {
    if ((unint64_t)description >> 32)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (description >> 11 == 27)
    {
      __break(1u);
      return description;
    }
    if (description >> 16 > 0x10)
    {
      __break(1u);
    }
    else if ((description & 0xFFFFFF80) == 0)
    {
      if (description > 0xFF)
      {
        __break(1u);
        goto LABEL_26;
      }
      unsigned int v6 = ((_BYTE)description + 1);
LABEL_13:
      *(void *)descriptiona = (v6 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v6) & 0x38)) & 0x38));
      if (qword_1001E0938 == -1) {
        return _os_activity_create(dso, descriptiona, (os_activity_t)qword_1001E3EB0, OS_ACTIVITY_FLAG_DEFAULT);
      }
LABEL_26:
      swift_once();
      return _os_activity_create(dso, descriptiona, (os_activity_t)qword_1001E3EB0, OS_ACTIVITY_FLAG_DEFAULT);
    }
    int v7 = (description & 0x3F) << 8;
    unsigned int v8 = (v7 | (description >> 6)) + 33217;
    unsigned int v9 = (v7 | (description >> 6) & 0x3F) << 8;
    unsigned int v10 = (((v9 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
    unsigned int v11 = (v9 | (description >> 12)) + 8487393;
    if (description >> 16) {
      unsigned int v6 = v10;
    }
    else {
      unsigned int v6 = v11;
    }
    if (description < 0x800) {
      unsigned int v6 = v8;
    }
    goto LABEL_13;
  }
  if (!description)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (qword_1001E0938 != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v5 = qword_1001E3EB0;

  return _os_activity_create(dso, v4, v5, OS_ACTIVITY_FLAG_DEFAULT);
}

id sub_1001109C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FinalizedTokenEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FinalizedTokenEntity()
{
  return self;
}

unint64_t sub_100110A24()
{
  unint64_t result = qword_1001E3F80;
  if (!qword_1001E3F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3F80);
  }
  return result;
}

unint64_t sub_100110A7C()
{
  unint64_t result = qword_1001E3FA0;
  if (!qword_1001E3FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3FA0);
  }
  return result;
}

unint64_t sub_100110AD4()
{
  unint64_t result = qword_1001E3FA8;
  if (!qword_1001E3FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3FA8);
  }
  return result;
}

unint64_t sub_100110B28(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100110B58();
  unint64_t result = sub_1000240E8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100110B58()
{
  unint64_t result = qword_1001E3FF8;
  if (!qword_1001E3FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E3FF8);
  }
  return result;
}

uint64_t sub_100110BAC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E4028);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned int v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012D78(a1, a1[3]);
  sub_100110AD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13] = *(unsigned char *)(v3 + 40);
    v10[12] = 2;
    sub_10005D6CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    _OWORD v10[11] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100110D74(unsigned __int8 *a1, char *a2)
{
  return sub_100105360(*a1, *a2);
}

Swift::Int sub_100110D80()
{
  return sub_1001096FC();
}

uint64_t sub_100110D88()
{
  return sub_100109AF0();
}

Swift::Int sub_100110D90()
{
  return sub_10010B780();
}

unint64_t sub_100110D98@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100111118(*a1);
  *a2 = result;
  return result;
}

void sub_100110DC8(void *a1@<X8>)
{
  unint64_t v2 = 0xED000064695F6E6FLL;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = "advertised_item_id";
      goto LABEL_6;
    case 2:
      unint64_t v2 = 0xEF657079745F6E6FLL;
      goto LABEL_4;
    case 3:
      uint64_t v3 = "creation_timestamp";
LABEL_6:
      *a1 = 0xD000000000000012;
      a1[1] = (unint64_t)(v3 - 32) | 0x8000000000000000;
      return;
    default:
LABEL_4:
      *a1 = 0x69737265766E6F63;
      a1[1] = v2;
      return;
  }
}

unint64_t sub_100110E60()
{
  unint64_t result = 0x69737265766E6F63;
  switch(*v0)
  {
    case 1:
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100110EF0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100111118(a1);
  *a2 = result;
  return result;
}

void sub_100110F18(void *a1@<X8>)
{
  *a1 = &off_1001C2350;
}

uint64_t sub_100110F28(uint64_t a1)
{
  unint64_t v2 = sub_100110AD4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100110F64(uint64_t a1)
{
  unint64_t v2 = sub_100110AD4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100110FA0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100111164(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100110FF0(void *a1)
{
  return sub_100110BAC(a1);
}

unint64_t sub_10011100C()
{
  unint64_t result = qword_1001E4000;
  if (!qword_1001E4000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4000);
  }
  return result;
}

unint64_t sub_100111064()
{
  unint64_t result = qword_1001E4008;
  if (!qword_1001E4008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4008);
  }
  return result;
}

unint64_t sub_1001110BC()
{
  unint64_t result = qword_1001E4010;
  if (!qword_1001E4010)
  {
    sub_100011ECC(&qword_1001E4018);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4010);
  }
  return result;
}

unint64_t sub_100111118(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C22D0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100111164@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E4020);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_100110AD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v20 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v19 = 1;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  char v17 = 2;
  sub_10005D54C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  HIDWORD(v14) = v18;
  char v16 = 3;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v15;
  *(unsigned char *)(a2 + 40) = BYTE4(v14);
  *(void *)(a2 + 48) = v12;
  return result;
}

unsigned char *storeEnumTagSinglePayload for AllocatedTokenMetadataModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001114ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AllocatedTokenMetadataModel.CodingKeys()
{
  return &type metadata for AllocatedTokenMetadataModel.CodingKeys;
}

uint64_t initializeWithCopy for AllocatedTokenMetadataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AllocatedTokenMetadataModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 48) = a2[6];
  return a1;
}

uint64_t assignWithTake for AllocatedTokenMetadataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for AllocatedTokenMetadataModel()
{
  return &type metadata for AllocatedTokenMetadataModel;
}

unint64_t sub_100111628()
{
  unint64_t result = qword_1001E4030;
  if (!qword_1001E4030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4030);
  }
  return result;
}

id sub_10011167C()
{
  id v2 = [v0 connection];
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v5 = [self predicateWithProperty:v3 equalToValue:v4];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v6 = sub_10011E35C(v2, v5, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  void v8[2] = &v9;
  sub_10012A200((uint64_t)sub_100111988, (uint64_t)v8, v6);
  if (v1)
  {

    swift_bridgeObjectRelease();
  }
  else
  {

    if (v11)
    {
      id v2 = (id)v10;
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id sub_1001118B4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppMetadataDatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppMetadataDatabaseSession()
{
  return self;
}

uint64_t sub_10011190C(uint64_t *a1, uint64_t a2, unsigned char *a3, void *a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  swift_bridgeObjectRelease();
  *a4 = v6;
  a4[1] = v7;
  a4[2] = v8;
  a4[3] = v9;
  a4[4] = v10;
  *a3 = 1;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100111988(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  return sub_10011190C(a1, a2, a3, *(void **)(v3 + 16));
}

ValueMetadata *type metadata accessor for BootstrapActivity()
{
  return &type metadata for BootstrapActivity;
}

uint64_t sub_1001119A0()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1001E4068 + dword_1001E4068);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100012AB8;
  return v3();
}

uint64_t sub_100111A40()
{
  return _swift_task_switch(sub_100111A5C, 0, 0);
}

uint64_t sub_100111A5C()
{
  uint64_t v26 = v0;
  uint64_t v1 = self;
  id v2 = [v1 sharedScheduler];
  uint64_t v24 = &type metadata for ActivityManager;
  uint64_t v25 = &off_1001CCE58;
  uint64_t v3 = (void *)swift_allocObject();
  v23[0] = v3;
  v3[5] = &type metadata for BackgroundSystemTaskScheduler;
  v3[6] = &off_1001C30C8;
  v3[2] = v2;
  sub_100087C5C((uint64_t)v23, v0 + 528);
  sub_100088AE0();
  sub_10005D720(v0 + 528);
  if (qword_1001E08D8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v0 + 584) = sub_100012E74(v4, (uint64_t)qword_1001E5FB0);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Scheduling postback fetch if needed", v7, 2u);
    swift_slowDealloc();
  }

  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  id v8 = (id)qword_1001E5F88;
  id v9 = [v1 sharedScheduler];
  *(void *)(v0 + 160) = &type metadata for ActivityManager;
  *(void *)(v0 + 168) = &off_1001CCE58;
  uint64_t v10 = (void *)swift_allocObject();
  *(void *)(v0 + 136) = v10;
  v10[5] = &type metadata for BackgroundSystemTaskScheduler;
  v10[6] = &off_1001C30C8;
  v10[2] = v9;
  *(void *)(v0 + 224) = &type metadata for AttributionKitCanineArbiter;
  *(void *)(v0 + 232) = &off_1001C3FF8;
  uint64_t v11 = qword_1001E0880;
  id v12 = v8;
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1001E5F50;
  *(void *)(v0 + 264) = type metadata accessor for TaskGreyhound();
  *(void *)(v0 + 272) = &off_1001C2490;
  *(void *)(v0 + 240) = v13;
  *(void *)(v0 + 304) = &type metadata for LaunchServicesRecordFactory;
  *(void *)(v0 + 312) = &off_1001C6D08;
  *(void *)(v0 + 344) = &type metadata for AMSDogBag;
  *(void *)(v0 + 352) = &off_1001CAA18;
  swift_retain();
  id v14 = [v1 sharedScheduler];
  uint64_t v24 = &type metadata for ActivityManager;
  uint64_t v25 = &off_1001CCE58;
  uint64_t v15 = (void *)swift_allocObject();
  v23[0] = v15;
  void v15[5] = &type metadata for BackgroundSystemTaskScheduler;
  v15[6] = &off_1001C30C8;
  v15[2] = v14;
  sub_100087C5C((uint64_t)v23, v0 + 360);
  *(void *)(v0 + 432) = &type metadata for AppStoreDaemonSKANInterop;
  *(void *)(v0 + 440) = &off_1001CA740;
  char v16 = (void *)qword_1001E5F88;
  *(void *)(v0 + 472) = &type metadata for AggregatedReportingManager;
  *(void *)(v0 + 480) = &off_1001C7F28;
  char v17 = (void *)swift_allocObject();
  *(void *)(v0 + 448) = v17;
  unsigned char v17[8] = &type metadata for AMSDogBag;
  v17[9] = &off_1001CAA18;
  v17[13] = &type metadata for BiomeEventStreamDog;
  v17[14] = &off_1001C8C58;
  v17[2] = 0x74735F6E656B6F74;
  v17[3] = 0xEB0000000065726FLL;
  void v17[4] = v16;
  uint64_t v18 = qword_1001E0940;
  id v19 = v16;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1001E60E8;
  *(void *)(v0 + 512) = type metadata accessor for SnoutManager();
  *(void *)(v0 + 520) = &off_1001CB0F8;
  *(void *)(v0 + 488) = v20;
  strcpy((char *)(v0 + 16), "postback_store");
  *(unsigned char *)(v0 + 31) = -18;
  *(void *)(v0 + 32) = v12;
  *(void *)(v0 + 40) = 0x63616274736F6867;
  *(void *)(v0 + 48) = 0xEF65726F74735F6BLL;
  *(void *)(v0 + 56) = v12;
  *(void *)(v0 + 64) = 0xD000000000000010;
  *(void *)(v0 + 72) = 0x8000000100185910;
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = 0x74735F6E656B6F74;
  *(void *)(v0 + 96) = 0xEB0000000065726FLL;
  *(void *)(v0 + 104) = v12;
  *(void *)(v0 + 112) = 0xD000000000000012;
  *(void *)(v0 + 120) = 0x8000000100185930;
  *(void *)(v0 + 128) = v12;
  *(void *)(v0 + 176) = 0xD000000000000011;
  *(void *)(v0 + 184) = 0x8000000100185AE0;
  *(void *)(v0 + 192) = v12;
  swift_retain();
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v21;
  void *v21 = v0;
  v21[1] = sub_100111F64;
  return sub_1000EFC6C();
}

uint64_t sub_100111F64()
{
  *(void *)(*(void *)v1 + 600) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_100112078;
  }
  else {
    id v2 = sub_10004819C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100112078()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 576) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to schedule postback fetch with error: %@", v3, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100048284(v0 + 16);
  os_log_type_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100112240()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100112278()
{
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 40);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

unint64_t sub_1001122C8(char a1)
{
  unint64_t result = 0x7363697274656DLL;
  switch(a1)
  {
    case 1:
    case 16:
      unint64_t result = 0xD000000000000032;
      break;
    case 2:
      unint64_t result = 0xD000000000000036;
      break;
    case 3:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000042;
      break;
    case 5:
      unint64_t result = 0xD000000000000038;
      break;
    case 6:
      unint64_t result = 0xD000000000000039;
      break;
    case 7:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 8:
      unint64_t result = 0xD00000000000003BLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000046;
      break;
    case 10:
      unint64_t result = 0xD000000000000036;
      break;
    case 11:
      unint64_t result = 0xD000000000000043;
      break;
    case 12:
      unint64_t result = 0xD000000000000046;
      break;
    case 13:
      unint64_t result = 0xD000000000000031;
      break;
    case 14:
      unint64_t result = 0xD000000000000038;
      break;
    case 15:
      unint64_t result = 0xD000000000000042;
      break;
    case 17:
      unint64_t result = 0xD000000000000039;
      break;
    case 18:
      unint64_t result = 0xD00000000000003ELL;
      break;
    case 19:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 20:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100112540(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 129) = a2;
  *(void *)(v2 + 136) = a1;
  return _swift_task_switch(sub_100112564, 0, 0);
}

uint64_t sub_100112564()
{
  char v1 = *(unsigned char *)(v0 + 129);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self bagForProfile:v2 profileVersion:v3];

  sub_1001122C8(v1);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 URLForKey:v5];
  *(void *)(v0 + 144) = v6;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_100112728;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_10011253C;
  *(void *)(v0 + 104) = &unk_1001CA9B0;
  *(void *)(v0 + 112) = v7;
  [v6 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100112728()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    NSString v2 = sub_1001128EC;
  }
  else {
    NSString v2 = sub_100112838;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100112838()
{
  uint64_t v1 = (void *)v0[18];
  NSString v2 = (void *)v0[15];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = v0[17];
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  NSString v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001128EC()
{
  uint64_t v16 = v0;
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E5FC8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = *(unsigned char *)(v0 + 129);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    unint64_t v8 = sub_1001122C8(v5);
    *(void *)(v0 + 80) = sub_100147668(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to get bag value for key %s, error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = *(void *)(v0 + 136);
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100112BBC(char a1)
{
  *(unsigned char *)(v1 + 129) = a1;
  return _swift_task_switch(sub_100112BDC, 0, 0);
}

uint64_t sub_100112BDC()
{
  char v1 = *(unsigned char *)(v0 + 129);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self bagForProfile:v2 profileVersion:v3];

  sub_1001122C8(v1);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 BOOLForKey:v5];
  *(void *)(v0 + 136) = v6;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_100112DA0;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_10011253C;
  *(void *)(v0 + 104) = &unk_1001CA980;
  *(void *)(v0 + 112) = v7;
  [v6 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100112DA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    NSString v2 = sub_100112F38;
  }
  else {
    NSString v2 = sub_100112EB0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100112EB0()
{
  uint64_t v1 = (void *)v0[17];
  NSString v2 = (void *)v0[15];
  id v3 = [v2 BOOLValue];

  uint64_t v4 = (uint64_t (*)(id))v0[1];
  return v4(v3);
}

uint64_t sub_100112F38()
{
  uint64_t v14 = v0;
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E5FC8);
  swift_errorRetain();
  swift_errorRetain();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = *(unsigned char *)(v0 + 129);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    unint64_t v8 = sub_1001122C8(v5);
    *(void *)(v0 + 80) = sub_100147668(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to get BOOL bag value for key %s, error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v11(2);
}

uint64_t sub_1001131C8(char a1)
{
  *(unsigned char *)(v1 + 129) = a1;
  return _swift_task_switch(sub_1001131E8, 0, 0);
}

uint64_t sub_1001131E8()
{
  char v1 = *(unsigned char *)(v0 + 129);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self bagForProfile:v2 profileVersion:v3];

  sub_1001122C8(v1);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 doubleForKey:v5];
  *(void *)(v0 + 136) = v6;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_1001133AC;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_10011253C;
  *(void *)(v0 + 104) = &unk_1001CA998;
  *(void *)(v0 + 112) = v7;
  [v6 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1001133AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    NSString v2 = sub_100113550;
  }
  else {
    NSString v2 = sub_1001134BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001134BC()
{
  uint64_t v1 = (void *)v0[17];
  NSString v2 = (void *)v0[15];
  [v2 doubleValue];
  uint64_t v4 = v3;

  BOOL v5 = v0[18] != 0;
  id v6 = (uint64_t (*)(uint64_t, BOOL))v0[1];
  return v6(v4, v5);
}

uint64_t sub_100113550()
{
  uint64_t v15 = v0;
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E5FC8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = *(unsigned char *)(v0 + 129);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    unint64_t v8 = sub_1001122C8(v5);
    *(void *)(v0 + 80) = sub_100147668(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to get bag value for key %s, error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  BOOL v11 = *(void *)(v0 + 144) != 0;
  uint64_t v12 = *(uint64_t (**)(void, BOOL))(v0 + 8);
  return v12(0, v11);
}

uint64_t sub_1001137EC(char a1)
{
  *(unsigned char *)(v1 + 129) = a1;
  return _swift_task_switch(sub_10011380C, 0, 0);
}

uint64_t sub_10011380C()
{
  char v1 = *(unsigned char *)(v0 + 129);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self bagForProfile:v2 profileVersion:v3];

  sub_1001122C8(v1);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 integerForKey:v5];
  *(void *)(v0 + 136) = v6;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_1001139D0;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_10011253C;
  *(void *)(v0 + 104) = &unk_1001CA9C8;
  *(void *)(v0 + 112) = v7;
  [v6 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1001139D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    NSString v2 = sub_100114194;
  }
  else {
    NSString v2 = sub_100113AE0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100113AE0()
{
  uint64_t v1 = (void *)v0[17];
  NSString v2 = (void *)v0[15];
  id v3 = [v2 integerValue];

  BOOL v4 = v0[18] != 0;
  NSString v5 = (uint64_t (*)(id, BOOL))v0[1];
  return v5(v3, v4);
}

uint64_t sub_100113B74(char a1)
{
  *(unsigned char *)(v1 + 129) = a1;
  return _swift_task_switch(sub_100113B94, 0, 0);
}

uint64_t sub_100113B94()
{
  char v1 = *(unsigned char *)(v0 + 129);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self bagForProfile:v2 profileVersion:v3];

  sub_1001122C8(v1);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 stringForKey:v5];
  *(void *)(v0 + 136) = v6;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_100113D58;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_10011253C;
  *(void *)(v0 + 104) = &unk_1001CA9E0;
  *(void *)(v0 + 112) = v7;
  [v6 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100113D58()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    NSString v2 = sub_100113EF0;
  }
  else {
    NSString v2 = sub_100113E68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100113E68()
{
  uint64_t v1 = (void *)v0[17];
  NSString v2 = (void *)v0[15];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  id v6 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v6(v3, v5);
}

uint64_t sub_100113EF0()
{
  uint64_t v14 = v0;
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  if (qword_1001E08E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100012E74(v2, (uint64_t)qword_1001E5FC8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = *(unsigned char *)(v0 + 129);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    unint64_t v8 = sub_1001122C8(v5);
    *(void *)(v0 + 80) = sub_100147668(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to get bag value for key %s, error: %@", (uint8_t *)v6, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  BOOL v11 = *(uint64_t (**)(void, void))(v0 + 8);
  return v11(0, 0);
}

ValueMetadata *type metadata accessor for AMSDogBag()
{
  return &type metadata for AMSDogBag;
}

uint64_t sub_100114198(uint64_t a1, uint64_t a2)
{
  v3[184] = v2;
  v3[183] = a2;
  v3[182] = a1;
  uint64_t v4 = sub_100012960(&qword_1001E1370);
  v3[185] = v4;
  v3[186] = *(void *)(v4 - 8);
  v3[187] = swift_task_alloc();
  return _swift_task_switch(sub_100114264, v2, 0);
}

uint64_t sub_100114264()
{
  uint64_t v1 = *(void **)(v0 + 1456);
  sub_10009485C(1, 8, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 880), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
    0,
    1u,
    2u,
    3u,
    0,
    1u,
    0,
    0,
    2u);
  *(_WORD *)(v0 + 228) = *(_WORD *)(v0 + 880);
  *(_OWORD *)(v0 + 1504) = *(_OWORD *)(v0 + 888);
  *(_OWORD *)(v0 + 1520) = *(_OWORD *)(v0 + 904);
  *(_OWORD *)(v0 + 1536) = *(_OWORD *)(v0 + 920);
  *(_OWORD *)(v0 + 1552) = *(_OWORD *)(v0 + 936);
  *(void *)(v0 + 1568) = *(void *)(v0 + 952);
  *(_WORD *)(v0 + 230) = *(_WORD *)(v0 + 960);
  *(_DWORD *)(v0 + 442) = *(_DWORD *)(v0 + 962);
  *(_WORD *)(v0 + 226) = *(_WORD *)(v0 + 966);
  *(void *)(v0 + 1576) = *(void *)(v0 + 968);
  char v2 = *(unsigned char *)(v0 + 976);
  *(unsigned char *)(v0 + 446) = v2;
  *(unsigned char *)(v0 + 1696) = v2;
  *(void *)(v0 + 1584) = *(void *)(v0 + 984);
  char v3 = *(unsigned char *)(v0 + 992);
  *(unsigned char *)(v0 + 447) = v3;
  *(unsigned char *)(v0 + 1712) = v3;
  *(unsigned char *)(v0 + 658) = *(unsigned char *)(v0 + 993);
  *(void *)(v0 + 1592) = *(void *)(v0 + 1000);
  char v4 = *(unsigned char *)(v0 + 1008);
  *(unsigned char *)(v0 + 659) = v4;
  *(unsigned char *)(v0 + 1680) = v4;
  *(void *)(v0 + 1600) = *(void *)(v0 + 1016);
  char v5 = *(unsigned char *)(v0 + 1024);
  *(unsigned char *)(v0 + 660) = v5;
  *(unsigned char *)(v0 + 1688) = v5;
  *(_WORD *)(v0 + 661) = *(_WORD *)(v0 + 1025);
  *(void *)(v0 + 1608) = *(void *)(v0 + 1032);
  char v6 = *(unsigned char *)(v0 + 1040);
  *(unsigned char *)(v0 + 663) = v6;
  *(unsigned char *)(v0 + 1704) = v6;
  *(_OWORD *)(v0 + 1616) = *(_OWORD *)(v0 + 1048);
  *(unsigned char *)(v0 + 874) = *(unsigned char *)(v0 + 1064);
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  sub_100012D78(v1, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) == 0xC181BADB23D8497BLL)
  {
    uint64_t v9 = v1[3];
    uint64_t v10 = v1[4];
    sub_100012D78(*(void **)(v0 + 1456), v9);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10) == 1589136771)
    {
      uint64_t v11 = *(void *)(v0 + 1472);
      uint64_t v12 = v1[3];
      uint64_t v13 = v1[4];
      sub_100012D78(*(void **)(v0 + 1456), v12);
      if (*(void *)(v11 + 192) < (unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13))
      {
        uint64_t v15 = v1[3];
        uint64_t v14 = v1[4];
        sub_100012D78(*(void **)(v0 + 1456), v15);
        *(void *)(v11 + 192) = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v15, v14);
        uint64_t v53 = (uint64_t (*)(uint64_t))((char *)&dword_1001E1638 + dword_1001E1638);
        uint64_t v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 1632) = v16;
        *uint64_t v16 = v0;
        v16[1] = sub_100114824;
        uint64_t v17 = *(void *)(v0 + 1456);
        return v53(v17);
      }
      sub_100115410();
      uint64_t v19 = swift_allocError();
      char v22 = 2;
    }
    else
    {
      sub_100115410();
      uint64_t v19 = swift_allocError();
      char v22 = 1;
    }
    char *v21 = v22;
  }
  else
  {
    sub_100115410();
    uint64_t v19 = swift_allocError();
    unsigned char *v20 = 0;
  }
  swift_willThrow();
  *(void *)(v0 + 1664) = v19;
  char v54 = *(unsigned char *)(v0 + 874);
  uint64_t v51 = *(void *)(v0 + 1616);
  uint64_t v52 = *(void *)(v0 + 1624);
  uint64_t v50 = *(void *)(v0 + 1608);
  __int16 v49 = *(_WORD *)(v0 + 661);
  uint64_t v47 = *(void *)(v0 + 1592);
  uint64_t v48 = *(void *)(v0 + 1600);
  char v46 = *(unsigned char *)(v0 + 658);
  uint64_t v45 = *(void *)(v0 + 1584);
  uint64_t v44 = *(void *)(v0 + 1576);
  __int16 v43 = *(_WORD *)(v0 + 230);
  uint64_t v42 = *(void *)(v0 + 1568);
  long long v40 = *(_OWORD *)(v0 + 1536);
  long long v41 = *(_OWORD *)(v0 + 1552);
  __int16 v38 = *(_WORD *)(v0 + 228);
  uint64_t v23 = *(void *)(v0 + 1472);
  int v39 = *(_DWORD *)(v0 + 442);
  uint64_t v24 = sub_100094708(v19);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_100012D78((void *)(v23 + 152), *(void *)(v23 + 176));
  char v32 = *(unsigned char *)(v0 + 1696);
  char v33 = *(unsigned char *)(v0 + 1712);
  char v34 = *(unsigned char *)(v0 + 1680);
  char v35 = *(unsigned char *)(v0 + 1688);
  char v36 = *(unsigned char *)(v0 + 1704);
  *(_WORD *)(v0 + 1264) = v38;
  *(void *)(v0 + 1272) = v24;
  *(void *)(v0 + 1280) = v26;
  *(void *)(v0 + 1288) = v28;
  *(void *)(v0 + 1296) = v30;
  *(_OWORD *)(v0 + 1304) = v40;
  *(_OWORD *)(v0 + 1320) = v41;
  *(void *)(v0 + 1336) = v42;
  *(_WORD *)(v0 + 1344) = v43;
  *(_DWORD *)(v0 + 1346) = v39;
  *(void *)(v0 + 1352) = v44;
  *(unsigned char *)(v0 + 1360) = v32;
  *(void *)(v0 + 1368) = v45;
  *(unsigned char *)(v0 + 1376) = v33;
  *(unsigned char *)(v0 + 1377) = v46;
  *(void *)(v0 + 1384) = v47;
  *(unsigned char *)(v0 + 1392) = v34;
  *(void *)(v0 + 1400) = v48;
  *(unsigned char *)(v0 + 1408) = v35;
  *(_WORD *)(v0 + 1409) = v49;
  *(void *)(v0 + 1416) = v50;
  *(unsigned char *)(v0 + 1424) = v36;
  *(void *)(v0 + 1432) = v51;
  *(void *)(v0 + 1440) = v52;
  *(unsigned char *)(v0 + 1448) = v54;
  uint64_t v37 = *v31;
  *(void *)(v0 + 1672) = *v31;
  return _swift_task_switch(sub_1001151DC, v37, 0);
}

uint64_t sub_100114824(uint64_t a1)
{
  char v4 = (void *)*v2;
  v4[205] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[184];
  if (v1)
  {
    char v6 = sub_100114E08;
  }
  else
  {
    v4[206] = a1;
    char v6 = sub_100114960;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100114960()
{
  uint64_t v1 = (int *)(v0 + 442);
  if ((*(void *)(v0 + 1648) & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    char v61 = *(unsigned char *)(v0 + 874);
    uint64_t v57 = *(void *)(v0 + 1616);
    uint64_t v59 = *(void *)(v0 + 1624);
    char v55 = *(unsigned char *)(v0 + 663);
    uint64_t v53 = *(void *)(v0 + 1608);
    char v51 = *(unsigned char *)(v0 + 662);
    __int16 v49 = *(_WORD *)(v0 + 660);
    uint64_t v47 = *(void *)(v0 + 1600);
    char v44 = *(unsigned char *)(v0 + 659);
    uint64_t v42 = *(void *)(v0 + 1592);
    char v39 = *(unsigned char *)(v0 + 658);
    char v37 = *(unsigned char *)(v0 + 447);
    uint64_t v35 = *(void *)(v0 + 1584);
    char v34 = *(unsigned char *)(v0 + 446);
    uint64_t v32 = *(void *)(v0 + 1576);
    __int16 v31 = *(_WORD *)(v0 + 226);
    __int16 v30 = *(_WORD *)(v0 + 230);
    uint64_t v29 = *(void *)(v0 + 1568);
    long long v27 = *(_OWORD *)(v0 + 1536);
    long long v28 = *(_OWORD *)(v0 + 1552);
    long long v25 = *(_OWORD *)(v0 + 1504);
    long long v26 = *(_OWORD *)(v0 + 1520);
    __int16 v2 = *(_WORD *)(v0 + 228);
    int v3 = *v1;
    char v4 = sub_100012D78((void *)(*(void *)(v0 + 1472) + 152), *(void *)(*(void *)(v0 + 1472) + 176));
    *(_DWORD *)(v0 + 1154) = v3;
    *(_WORD *)(v0 + 1072) = v2;
    *(_DWORD *)(v0 + 1074) = *(_DWORD *)(v0 + 882);
    *(_WORD *)(v0 + 1078) = *(_WORD *)(v0 + 886);
    *(_OWORD *)(v0 + 1080) = v25;
    *(_OWORD *)(v0 + 1096) = v26;
    *(_OWORD *)(v0 + 1112) = v27;
    *(_OWORD *)(v0 + 1128) = v28;
    *(void *)(v0 + 1144) = v29;
    *(_WORD *)(v0 + 1152) = v30;
    *(_WORD *)(v0 + 1158) = v31;
    *(void *)(v0 + 1160) = v32;
    *(unsigned char *)(v0 + 1168) = v34;
    int v5 = *(_DWORD *)(v0 + 977);
    *(_DWORD *)(v0 + 1172) = *(_DWORD *)(v0 + 980);
    *(_DWORD *)(v0 + 1169) = v5;
    *(void *)(v0 + 1176) = v35;
    *(unsigned char *)(v0 + 1184) = v37;
    *(unsigned char *)(v0 + 1185) = v39;
    *(_DWORD *)(v0 + 1186) = *(_DWORD *)(v0 + 994);
    *(_WORD *)(v0 + 1190) = *(_WORD *)(v0 + 998);
    *(void *)(v0 + 1192) = v42;
    *(unsigned char *)(v0 + 1200) = v44;
    *(_DWORD *)(v0 + 1201) = *(_DWORD *)(v0 + 1009);
    *(_DWORD *)(v0 + 1204) = *(_DWORD *)(v0 + 1012);
    *(void *)(v0 + 1208) = v47;
    *(_WORD *)(v0 + 1216) = v49;
    *(unsigned char *)(v0 + 1218) = v51;
    *(unsigned char *)(v0 + 1223) = *(unsigned char *)(v0 + 1031);
    *(_DWORD *)(v0 + 1219) = *(_DWORD *)(v0 + 1027);
    *(void *)(v0 + 1224) = v53;
    *(unsigned char *)(v0 + 1232) = v55;
    *(_DWORD *)(v0 + 1236) = *(_DWORD *)(v0 + 1044);
    *(_DWORD *)(v0 + 1233) = *(_DWORD *)(v0 + 1041);
    *(void *)(v0 + 1240) = v57;
    *(void *)(v0 + 1248) = v59;
    *(unsigned char *)(v0 + 1256) = v61;
    uint64_t v6 = *v4;
    *(void *)(v0 + 1656) = *v4;
    uint64_t v7 = sub_10011501C;
  }
  else
  {
    sub_100115410();
    uint64_t v8 = swift_allocError();
    *uint64_t v9 = 3;
    swift_willThrow();
    *(void *)(v0 + 1664) = v8;
    char v62 = *(unsigned char *)(v0 + 874);
    uint64_t v58 = *(void *)(v0 + 1616);
    uint64_t v60 = *(void *)(v0 + 1624);
    uint64_t v56 = *(void *)(v0 + 1608);
    __int16 v54 = *(_WORD *)(v0 + 661);
    uint64_t v50 = *(void *)(v0 + 1592);
    uint64_t v52 = *(void *)(v0 + 1600);
    char v48 = *(unsigned char *)(v0 + 658);
    uint64_t v45 = *(void *)(v0 + 1576);
    uint64_t v46 = *(void *)(v0 + 1584);
    __int16 v43 = *(_WORD *)(v0 + 230);
    uint64_t v41 = *(void *)(v0 + 1568);
    long long v38 = *(_OWORD *)(v0 + 1536);
    long long v40 = *(_OWORD *)(v0 + 1552);
    __int16 v33 = *(_WORD *)(v0 + 228);
    uint64_t v10 = *(void *)(v0 + 1472);
    int v36 = *v1;
    uint64_t v11 = sub_100094708(v8);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_100012D78((void *)(v10 + 152), *(void *)(v10 + 176));
    char v19 = *(unsigned char *)(v0 + 1696);
    char v20 = *(unsigned char *)(v0 + 1712);
    char v21 = *(unsigned char *)(v0 + 1680);
    char v22 = *(unsigned char *)(v0 + 1688);
    char v23 = *(unsigned char *)(v0 + 1704);
    *(_WORD *)(v0 + 1264) = v33;
    *(void *)(v0 + 1272) = v11;
    *(void *)(v0 + 1280) = v13;
    *(void *)(v0 + 1288) = v15;
    *(void *)(v0 + 1296) = v17;
    *(_OWORD *)(v0 + 1304) = v38;
    *(_OWORD *)(v0 + 1320) = v40;
    *(void *)(v0 + 1336) = v41;
    *(_WORD *)(v0 + 1344) = v43;
    *(_DWORD *)(v0 + 1346) = v36;
    *(void *)(v0 + 1352) = v45;
    *(unsigned char *)(v0 + 1360) = v19;
    *(void *)(v0 + 1368) = v46;
    *(unsigned char *)(v0 + 1376) = v20;
    *(unsigned char *)(v0 + 1377) = v48;
    *(void *)(v0 + 1384) = v50;
    *(unsigned char *)(v0 + 1392) = v21;
    *(void *)(v0 + 1400) = v52;
    *(unsigned char *)(v0 + 1408) = v22;
    *(_WORD *)(v0 + 1409) = v54;
    *(void *)(v0 + 1416) = v56;
    *(unsigned char *)(v0 + 1424) = v23;
    *(void *)(v0 + 1432) = v58;
    *(void *)(v0 + 1440) = v60;
    *(unsigned char *)(v0 + 1448) = v62;
    uint64_t v6 = *v18;
    *(void *)(v0 + 1672) = *v18;
    uint64_t v7 = sub_1001151DC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100114E08()
{
  uint64_t v1 = *(void *)(v0 + 1640);
  *(void *)(v0 + 1664) = v1;
  char v33 = *(unsigned char *)(v0 + 874);
  uint64_t v31 = *(void *)(v0 + 1616);
  uint64_t v32 = *(void *)(v0 + 1624);
  uint64_t v30 = *(void *)(v0 + 1608);
  __int16 v29 = *(_WORD *)(v0 + 661);
  uint64_t v27 = *(void *)(v0 + 1592);
  uint64_t v28 = *(void *)(v0 + 1600);
  char v26 = *(unsigned char *)(v0 + 658);
  uint64_t v24 = *(void *)(v0 + 1576);
  uint64_t v25 = *(void *)(v0 + 1584);
  __int16 v23 = *(_WORD *)(v0 + 230);
  uint64_t v22 = *(void *)(v0 + 1568);
  long long v20 = *(_OWORD *)(v0 + 1536);
  long long v21 = *(_OWORD *)(v0 + 1552);
  __int16 v18 = *(_WORD *)(v0 + 228);
  uint64_t v2 = *(void *)(v0 + 1472);
  int v19 = *(_DWORD *)(v0 + 442);
  uint64_t v3 = sub_100094708(v1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_100012D78((void *)(v2 + 152), *(void *)(v2 + 176));
  char v11 = *(unsigned char *)(v0 + 1696);
  char v12 = *(unsigned char *)(v0 + 1712);
  char v13 = *(unsigned char *)(v0 + 1680);
  char v14 = *(unsigned char *)(v0 + 1688);
  char v15 = *(unsigned char *)(v0 + 1704);
  *(_WORD *)(v0 + 1264) = v18;
  *(void *)(v0 + 1272) = v3;
  *(void *)(v0 + 1280) = v5;
  *(void *)(v0 + 1288) = v7;
  *(void *)(v0 + 1296) = v9;
  *(_OWORD *)(v0 + 1304) = v20;
  *(_OWORD *)(v0 + 1320) = v21;
  *(void *)(v0 + 1336) = v22;
  *(_WORD *)(v0 + 1344) = v23;
  *(_DWORD *)(v0 + 1346) = v19;
  *(void *)(v0 + 1352) = v24;
  *(unsigned char *)(v0 + 1360) = v11;
  *(void *)(v0 + 1368) = v25;
  *(unsigned char *)(v0 + 1376) = v12;
  *(unsigned char *)(v0 + 1377) = v26;
  *(void *)(v0 + 1384) = v27;
  *(unsigned char *)(v0 + 1392) = v13;
  *(void *)(v0 + 1400) = v28;
  *(unsigned char *)(v0 + 1408) = v14;
  *(_WORD *)(v0 + 1409) = v29;
  *(void *)(v0 + 1416) = v30;
  *(unsigned char *)(v0 + 1424) = v15;
  *(void *)(v0 + 1432) = v31;
  *(void *)(v0 + 1440) = v32;
  *(unsigned char *)(v0 + 1448) = v33;
  uint64_t v16 = *v10;
  *(void *)(v0 + 1672) = *v10;
  return _swift_task_switch(sub_1001151DC, v16, 0);
}

uint64_t sub_10011501C()
{
  uint64_t v1 = *(void *)(v0 + 1496);
  uint64_t v2 = *(void *)(v0 + 1488);
  uint64_t v3 = *(void *)(v0 + 1480);
  uint64_t v4 = *(void *)(v0 + 1472);
  uint64_t v5 = *(void *)(v0 + 1464);
  long long v6 = *(_OWORD *)(v0 + 1216);
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 1200);
  *(_OWORD *)(v0 + 376) = v6;
  *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 1232);
  long long v7 = *(_OWORD *)(v0 + 1152);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 1136);
  *(_OWORD *)(v0 + 312) = v7;
  long long v8 = *(_OWORD *)(v0 + 1184);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 1168);
  *(_OWORD *)(v0 + 344) = v8;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 1072);
  *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 1088);
  long long v9 = *(_OWORD *)(v0 + 1120);
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 1104);
  *(_OWORD *)(v0 + 280) = v9;
  *(_OWORD *)(v0 + 401) = *(_OWORD *)(v0 + 1241);
  *(void *)(v0 + 424) = v5;
  *(void *)(v0 + 432) = 0;
  *(_WORD *)(v0 + 440) = 256;
  sub_10003675C(v0 + 232);
  sub_1000367C8(v0 + 232, v0 + 664);
  sub_10001547C(v0 + 1072);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1072);
  return _swift_task_switch(sub_100115178, v4, 0);
}

uint64_t sub_100115178()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001151DC()
{
  uint64_t v1 = *(void *)(v0 + 1496);
  uint64_t v2 = *(void *)(v0 + 1488);
  uint64_t v3 = *(void *)(v0 + 1480);
  uint64_t v4 = *(void *)(v0 + 1472);
  uint64_t v5 = *(void *)(v0 + 1464);
  long long v6 = *(_OWORD *)(v0 + 1408);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 1392);
  *(_OWORD *)(v0 + 160) = v6;
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 1424);
  long long v7 = *(_OWORD *)(v0 + 1344);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 1328);
  *(_OWORD *)(v0 + 96) = v7;
  long long v8 = *(_OWORD *)(v0 + 1376);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 1360);
  *(_OWORD *)(v0 + 128) = v8;
  long long v9 = *(_OWORD *)(v0 + 1280);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 1264);
  *(_OWORD *)(v0 + 32) = v9;
  long long v10 = *(_OWORD *)(v0 + 1312);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 1296);
  *(_OWORD *)(v0 + 64) = v10;
  *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 1433);
  *(void *)(v0 + 208) = v5;
  *(void *)(v0 + 216) = 0;
  *(_WORD *)(v0 + 224) = 256;
  sub_10003675C(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 448);
  sub_10001547C(v0 + 1264);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100036824(v0 + 1264);
  return _swift_task_switch(sub_100115334, v4, 0);
}

uint64_t sub_100115334()
{
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001153AC()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 112);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 152);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TapEventValidator()
{
  return self;
}

unint64_t sub_100115410()
{
  unint64_t result = qword_1001E4178;
  if (!qword_1001E4178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4178);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TapEventValidatorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100115530);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapEventValidatorError()
{
  return &type metadata for TapEventValidatorError;
}

unint64_t sub_100115568(uint64_t a1)
{
  unint64_t result = sub_100115410();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100115594()
{
  unint64_t result = qword_1001E4180;
  if (!qword_1001E4180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4180);
  }
  return result;
}

uint64_t type metadata accessor for AppMetadataDatabaseTransaction()
{
  return self;
}

id sub_100115724()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServiceListenerDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ServiceListenerDelegate()
{
  return self;
}

uint64_t sub_10011578C(void *a1)
{
  int v3 = self;
  id v4 = [v3 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon17XPCClientProtocol_];
  [a1 setRemoteObjectInterface:v4];

  id v5 = [v3 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon15ServiceProtocol_];
  [a1 setExportedInterface:v5];

  [a1 setExportedObject:*(void *)(v1 + OBJC_IVAR____TtC20AttributionKitDaemon23ServiceListenerDelegate_serviceBridge)];
  [a1 resume];
  id v6 = [a1 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100012960((uint64_t *)&unk_1001E1FD0);
  if (swift_dynamicCast())
  {
    swift_getObjectType();
    XPCClientProtocol.handleMessage(_:)(0, 0);
    swift_unknownObjectRelease();
  }
  return 1;
}

void *sub_1001158F8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_100115928()
{
  return swift_release();
}

void *sub_100115930(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_10011596C(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_1001159A0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001159E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for InlineAsyncTask()
{
  return sub_10005A688();
}

uint64_t sub_100115A3C(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[1] = sub_100012AB8;
  return v6(a1);
}

uint64_t sub_100115B18(uint64_t a1)
{
  id v4 = *v1;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = sub_100013480;
  long long v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  id v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *id v6 = v5;
  v6[1] = sub_100012AB8;
  return v8(a1);
}

uint64_t destroy for SnoutInteropPayload()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SnoutInteropPayload(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SnoutInteropPayload(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  return a1;
}

uint64_t assignWithTake for SnoutInteropPayload(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SnoutInteropPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SnoutInteropPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutInteropPayload()
{
  return &type metadata for SnoutInteropPayload;
}

uint64_t sub_100115F08(char a1)
{
  uint64_t result = 0x707954746E657665;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7954746C75736572;
      break;
    case 2:
      uint64_t result = 0x726F7774654E6461;
      break;
    case 3:
      uint64_t result = 0x657079546461;
      break;
    case 4:
      uint64_t result = 0x7463617265746E69;
      break;
    case 5:
      uint64_t result = 0x74616E6974736564;
      break;
    case 6:
      uint64_t result = 0x7461745370747468;
      break;
    case 7:
      uint64_t result = 0x6B63616274736F70;
      break;
    case 8:
      uint64_t result = 0x6D6F44726F727265;
      break;
    case 9:
      uint64_t result = 0x646F43726F727265;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100116084(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100012960(&qword_1001E4298);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_100116594();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = *v3;
  char v11 = 0;
  sub_100097938();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_100059F98((uint64_t)(v3 + 1), (uint64_t)&v17, &qword_1001E2C20);
    sub_100059F98((uint64_t)&v17, (uint64_t)&v12, &qword_1001E2C20);
    char v11 = 1;
    sub_10009798C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 24), (uint64_t)&v16, &qword_1001E2C30);
    sub_100059F98((uint64_t)&v16, (uint64_t)&v12, &qword_1001E2C30);
    char v11 = 3;
    sub_1000979E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 25), (uint64_t)&v15, &qword_1001E2C50);
    sub_100059F98((uint64_t)&v15, (uint64_t)&v12, &qword_1001E2C50);
    char v11 = 4;
    sub_1000462F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 26), (uint64_t)&v14, &qword_1001E2C78);
    sub_100059F98((uint64_t)&v14, (uint64_t)&v12, &qword_1001E2C78);
    char v11 = 5;
    sub_100097B30();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100059F98((uint64_t)(v3 + 41), (uint64_t)&v13, &qword_1001E2C68);
    sub_100059F98((uint64_t)&v13, (uint64_t)&v12, &qword_1001E2C68);
    char v11 = 7;
    sub_100097ADC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10011645C()
{
  return sub_100115F08(*v0);
}

uint64_t sub_100116464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001165E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10011648C(uint64_t a1)
{
  unint64_t v2 = sub_100116594();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001164C8(uint64_t a1)
{
  unint64_t v2 = sub_100116594();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100116504@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100116AAC(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 57) = *(_OWORD *)((char *)v7 + 9);
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100116550(void *a1)
{
  return sub_100116084(a1);
}

unint64_t sub_100116594()
{
  unint64_t result = qword_1001E42A0;
  if (!qword_1001E42A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E42A0);
  }
  return result;
}

uint64_t sub_1001165E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x707954746E657665 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7954746C75736572 && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F7774654E6461 && a2 == 0xEB0000000044496BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657079546461 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7463617265746E69 && a2 == 0xEF657079546E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7461745370747468 && a2 == 0xEE0065646F437375 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6B63616274736F70 && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6D6F44726F727265 && a2 == 0xEB000000006E6961 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_100116AAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100012960(&qword_1001E42A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_100116594();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  char v37 = 0;
  sub_100097644();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unsigned __int8 v9 = v38;
  char v37 = 1;
  sub_100097698();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v10 = v38;
  unsigned __int8 v38 = 2;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v35 = v11;
  int v36 = v10;
  char v37 = 3;
  sub_1000976EC();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v34 = v13;
  int v14 = v38;
  char v37 = 4;
  sub_10004732C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v33 = v14;
  int v15 = v38;
  char v37 = 5;
  sub_10009783C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v32 = v15;
  int v16 = v38;
  unsigned __int8 v38 = 6;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v29 = v18;
  uint64_t v30 = v17;
  int v31 = v16;
  char v37 = 7;
  sub_1000977E8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v28 = v38;
  unsigned __int8 v38 = 8;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v20 = v19;
  unsigned __int8 v38 = 9;
  swift_bridgeObjectRetain();
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  HIDWORD(v26) = v22;
  uint64_t v23 = v21;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v24 = v34;
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v9;
  *(unsigned char *)(a2 + 1) = v36;
  *(void *)(a2 + 8) = v35;
  *(void *)(a2 + 16) = v24;
  *(unsigned char *)(a2 + 24) = v33;
  *(unsigned char *)(a2 + 25) = v32;
  *(unsigned char *)(a2 + 26) = v31;
  *(void *)(a2 + 32) = v30;
  *(unsigned char *)(a2 + 40) = v29 & 1;
  *(unsigned char *)(a2 + 41) = v28;
  *(void *)(a2 + 48) = v27;
  *(void *)(a2 + 56) = v20;
  *(void *)(a2 + 64) = v23;
  *(unsigned char *)(a2 + 72) = BYTE4(v26) & 1;
  return result;
}

unsigned char *storeEnumTagSinglePayload for SnoutInteropPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10011703CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutInteropPayload.CodingKeys()
{
  return &type metadata for SnoutInteropPayload.CodingKeys;
}

unint64_t sub_100117078()
{
  unint64_t result = qword_1001E42B0;
  if (!qword_1001E42B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E42B0);
  }
  return result;
}

unint64_t sub_1001170D0()
{
  unint64_t result = qword_1001E42B8;
  if (!qword_1001E42B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E42B8);
  }
  return result;
}

unint64_t sub_100117128()
{
  unint64_t result = qword_1001E42C0;
  if (!qword_1001E42C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E42C0);
  }
  return result;
}

id sub_10011720C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ImpressionIntakeServiceListenerDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ImpressionIntakeServiceListenerDelegate()
{
  return self;
}

uint64_t sub_100117274(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = sub_10006F74C();
  if (v8)
  {
    unsigned __int8 v9 = self;
    id v10 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon17XPCClientProtocol_];
    [a1 setRemoteObjectInterface:v10];

    id v11 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP20AttributionKitCommon31ImpressionIntakeServiceProtocol_];
    [a1 setExportedInterface:v11];

    [a1 setExportedObject:*(void *)(v2 + OBJC_IVAR____TtC20AttributionKitDaemon39ImpressionIntakeServiceListenerDelegate_serviceBridge)];
    [a1 resume];
    id v12 = [a1 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100012960((uint64_t *)&unk_1001E1FD0);
    if (swift_dynamicCast())
    {
      swift_getObjectType();
      XPCClientProtocol.handleMessage(_:)(0, 0);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v13 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
    int v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      int v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing entitlement for ImpressionIntakeService", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v8 & 1;
}

uint64_t sub_100117524()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_1001175E0, 0, 0);
}

uint64_t sub_1001175E0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = Logger.xpc.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Inside the daemon static library code now", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[3];
  uint64_t v8 = v0[4];
  uint64_t v10 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  id v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100117868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_100013480;
  return sub_10004AEF4(a2, a3, a4);
}

uint64_t sub_100117B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  *int v14 = v7;
  v14[1] = sub_100013480;
  return sub_10004B3D8(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100117E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_100013480;
  return sub_10004BAF8(a2, a3, a4, a5);
}

uint64_t sub_10011812C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_100013480;
  return sub_10004BFF4(a2, a3, a4, a5);
}

uint64_t sub_100118404(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v12 = sub_100012960(&qword_1001E1170);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v15 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a7;
  uint64_t v19 = a6 + OBJC_IVAR____TtC20AttributionKitDaemon16ServiceXPCBridge_service;
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v17, 1, 1, v20);
  sub_1000207C4(a5, (uint64_t)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v21 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  int v22 = (void *)swift_allocObject();
  uint64_t v23 = v28;
  v22[2] = v27;
  v22[3] = v23;
  v22[4] = a3;
  v22[5] = a4;
  sub_10004DA50((uint64_t)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v22 + v21);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = &unk_1001E4338;
  *(void *)(v24 + 24) = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  id v25 = a4;
  swift_retain();
  sub_100142434((uint64_t)"Process Tap", 11, 2, (void (*)(void))sub_10006C590, v18, v19, (uint64_t)v17, (uint64_t)&unk_1001E4348, v24);
  swift_release();
  swift_release();
  swift_release();
  sub_100019960((uint64_t)v17, &qword_1001E0EC0);
  return swift_release();
}

uint64_t sub_10011869C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_100012AB8;
  return sub_10004C664(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100118940()
{
  return sub_100019C1C(v0 + OBJC_IVAR____TtC20AttributionKitDaemon16ServiceXPCBridge_service);
}

uint64_t type metadata accessor for ServiceXPCBridge()
{
  return self;
}

uint64_t sub_100118984()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001189BC()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E1170) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_bridgeObjectRelease();

  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100118AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(sub_100012960(&qword_1001E1170) - 8);
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = v2[5];
  uint64_t v11 = (uint64_t)v2 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_100012AB8;
  return sub_10011869C(a1, a2, v7, v8, v9, v10, v11);
}

uint64_t sub_100118BFC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10006C404;
  return sub_100117524();
}

uint64_t sub_100118C9C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100118CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(v3 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100013480;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001E4340 + dword_1001E4340);
  return v10(a1, a2, a3, v8);
}

uint64_t sub_100118DA4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100118DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100013480;
  return sub_10011812C(a1, a2, v6, v7, v8);
}

uint64_t sub_100118E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100013480;
  return sub_100117E54(a1, a2, v6, v7, v8);
}

uint64_t sub_100118F5C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100118F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100013480;
  return sub_100117B3C(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_100119070()
{
  sub_100020930(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001190A8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100013480;
  return sub_100117868(a1, a2, v7, v6);
}

uint64_t sub_100119180@<X0>(char *a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v54 = v1;
  uint64_t v55 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v52 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v48 - v5;
  uint64_t v7 = type metadata accessor for URL.DirectoryHint();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100012960(&qword_1001E1170);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v53 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = self;
  id v18 = [v17 defaultManager];
  id v19 = [v18 URLsForDirectory:13 inDomains:1];

  uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v20 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v13, v20 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), v14);
    unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v21(v13, 0, 1, v14);
  }
  else
  {
    unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v21(v13, 1, 1, v14);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100020764((uint64_t)v13);
    uint64_t v22 = Logger.general.unsafeMutableAddressor();
    uint64_t v23 = v54;
    uint64_t v24 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v6, v22, v54);
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No caches directory url found", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v23);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21)(v56, 1, 1, v14);
  }
  else
  {
    int v29 = v53;
    (*(void (**)(void))(v15 + 32))();
    v58[0] = (id)0xD000000000000019;
    v58[1] = (id)0x8000000100185660;
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for URL.DirectoryHint.inferFromPath(_:), v7);
    sub_10003985C();
    URL.append<A>(path:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    id v30 = [v17 defaultManager];
    URL._bridgeToObjectiveC()(v31);
    int v33 = v32;
    v58[0] = 0;
    unsigned int v34 = [v30 createDirectoryAtURL:v32 withIntermediateDirectories:1 attributes:0 error:v58];

    id v35 = v58[0];
    if (v34)
    {
      int v36 = v56;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v29, v14);
      v21(v36, 0, 1, v14);
    }
    else
    {
      char v37 = v35;
      char v51 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v38 = Logger.general.unsafeMutableAddressor();
      uint64_t v40 = v54;
      uint64_t v39 = v55;
      uint64_t v41 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v52, v38, v54);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        __int16 v49 = (void *)swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        uint64_t v59 = v50;
        *(_DWORD *)uint64_t v44 = 136315394;
        swift_beginAccess();
        sub_10011998C();
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v57 = sub_100147668(v45, v46, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2112;
        swift_errorRetain();
        uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v57 = v47;
        int v29 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v49 = v47;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to create caches directory %s with error: %@", (uint8_t *)v44, 0x16u);
        sub_100012960(&qword_1001E0B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v40);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v40);
      }
      v51((uint64_t)v56, 1, 1, v14);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v29, v14);
  }
}

unint64_t sub_10011998C()
{
  unint64_t result = qword_1001E43C0;
  if (!qword_1001E43C0)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E43C0);
  }
  return result;
}

uint64_t sub_1001199E4()
{
  uint64_t result = os_transaction_get_description();
  if (result) {
    return String.init(cString:)();
  }
  return result;
}

unint64_t sub_100119A14()
{
  uint64_t v1 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100012960(&qword_1001E4480);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v50 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v42 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v42 - v14;
  uint64_t v52 = v0;
  uint64_t v16 = *(void *)(v0 + 16);
  __uint64_t v17 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW_APPROX);
  unint64_t result = os_transaction_get_timestamp();
  unint64_t v53 = result;
  if (v17 < result)
  {
    __break(1u);
  }
  else
  {
    id v49 = self;
    id v19 = [v49 nanoseconds];
    sub_10011AD0C();
    Measurement.init(value:unit:)();
    uint64_t v20 = Logger.general.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v6, v20, v4);
    unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    char v51 = v15;
    v21(v13, v15, v7);
    swift_unknownObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    int v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      int v44 = v23;
      unint64_t v46 = v6;
      uint64_t v48 = v3;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v56 = v43;
      *(_DWORD *)uint64_t v24 = 33555202;
      LOWORD(v55) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 6) = 2080;
      swift_unknownObjectRetain();
      uint64_t description = os_transaction_get_description();
      uint64_t v47 = v4;
      os_log_t v45 = v22;
      if (description)
      {
        uint64_t v26 = String.init(cString:)();
        unint64_t v28 = v27;
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v26 = 0;
        unint64_t v28 = 0xE000000000000000;
      }
      uint64_t v55 = sub_100147668(v26, v28, &v56);
      v42[1] = &v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 16) = 2080;
      id v32 = objc_msgSend(v49, "milliseconds", v24 + 18);
      int v33 = v50;
      Measurement<>.converted(to:)();

      uint64_t v34 = Measurement<>.formatted()();
      unint64_t v36 = v35;
      id v30 = *(void (**)(char *, uint64_t))(v8 + 8);
      v30(v33, v7);
      uint64_t v55 = sub_100147668(v34, v36, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v30(v13, v7);
      os_log_t v37 = v45;
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "[TXN%hx] 🐏 Ending transaction (%s) (%s)", (uint8_t *)v24, 0x1Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v54 + 8))(v46, v47);
      uint64_t v3 = v48;
    }
    else
    {
      swift_unknownObjectRelease_n();
      uint64_t v29 = v4;
      id v30 = *(void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v31 = v54;
      v30(v13, v7);

      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v29);
    }
    uint64_t v38 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v3, 1, 1, v38);
    uint64_t v39 = (void *)swift_allocObject();
    v39[2] = 0;
    v39[3] = 0;
    unint64_t v40 = v53;
    v39[4] = v16;
    v39[5] = v40;
    swift_unknownObjectRetain();
    sub_10011A658((uint64_t)v3, (uint64_t)&unk_1001E4498, (uint64_t)v39);
    swift_release();
    v30(v51, v7);
    uint64_t v41 = v52;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return v41;
  }
  return result;
}

uint64_t sub_10011A00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = type metadata accessor for Logger();
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v5[8] = v7;
  v5[9] = *(void *)(v7 - 8);
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_10011A128, 0, 0);
}

uint64_t sub_10011A128()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1001E44A0 + dword_1001E44A0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  void *v1 = v0;
  v1[1] = sub_10011A1F0;
  return v3(0xB469471F80140000, 0, 0, 0, 1);
}

uint64_t sub_10011A1F0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 72);
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_10011A360;
  }
  else {
    uint64_t v5 = sub_10011A3D0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011A360()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011A3D0()
{
  uint64_t v21 = v0;
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = Logger.general.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_unknownObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 32);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 33554946;
    *(_WORD *)(v0 + 104) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 6) = 2080;
    swift_unknownObjectRetain();
    if (os_transaction_get_description())
    {
      uint64_t v9 = String.init(cString:)();
      unint64_t v11 = v10;
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      uint64_t v9 = 0;
      unint64_t v11 = 0xE000000000000000;
    }
    uint64_t v15 = *(void *)(v0 + 48);
    uint64_t v18 = *(void *)(v0 + 40);
    uint64_t v19 = *(void *)(v0 + 56);
    *(void *)(v0 + 16) = sub_100147668(v9, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[TXN%hx] 🐏 Releasing transaction (%s)", (uint8_t *)v8, 0x10u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v19, v18);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 56);
    uint64_t v14 = *(void *)(v0 + 40);
    swift_unknownObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10011A658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10006E9CC(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10011A7D8()
{
  sub_100119A14();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Transaction()
{
  return self;
}

ValueMetadata *type metadata accessor for Transaction.SendableTransaction()
{
  return &type metadata for Transaction.SendableTransaction;
}

uint64_t sub_10011A840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_10011A944, 0, 0);
}

uint64_t sub_10011A944()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_10011AE4C(&qword_1001E44A8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_10011AE4C((unint64_t *)&unk_1001E44B0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10011AAE4;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_10011AAE4()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_10011ACA0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_10011ACA0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_10011AD0C()
{
  unint64_t result = qword_1001E4488;
  if (!qword_1001E4488)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1001E4488);
  }
  return result;
}

uint64_t sub_10011AD4C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10011AD8C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100012AB8;
  return sub_10011A00C(a1, v4, v5, v7, v6);
}

uint64_t sub_10011AE4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10011AE98()
{
  unint64_t result = qword_1001E44C0;
  if (!qword_1001E44C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E44C0);
  }
  return result;
}

unint64_t sub_10011AEF0()
{
  unint64_t result = qword_1001E44C8;
  if (!qword_1001E44C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E44C8);
  }
  return result;
}

unint64_t sub_10011AF44(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10011AF74();
  unint64_t result = sub_100024094();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10011AF74()
{
  unint64_t result = qword_1001E4518;
  if (!qword_1001E4518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4518);
  }
  return result;
}

uint64_t sub_10011AFC8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100012960(&qword_1001E4548);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012D78(a1, a1[3]);
  sub_10011AEF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v8 = v2[10];
  unsigned char v15[8] = v2[9];
  v15[9] = v8;
  v16[0] = v2[11];
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v2 + 185);
  long long v9 = v2[6];
  void v15[4] = v2[5];
  void v15[5] = v9;
  long long v10 = v2[8];
  v15[6] = v2[7];
  v15[7] = v10;
  long long v11 = v2[2];
  v15[0] = v2[1];
  long long v12 = v2[3];
  long long v13 = v2[4];
  v15[1] = v11;
  v15[2] = v12;
  void v15[3] = v13;
  sub_100015428();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int sub_10011B150()
{
  return Hasher._finalize()();
}

uint64_t sub_10011B1AC()
{
  return String.hash(into:)();
}

Swift::Int sub_10011B1CC()
{
  return Hasher._finalize()();
}

uint64_t sub_10011B224@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C2378, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_10011B278(void *a1@<X8>)
{
  *a1 = 0x76655F74756F6E73;
  a1[1] = 0xEB00000000746E65;
}

uint64_t sub_10011B29C()
{
  return 0x76655F74756F6E73;
}

uint64_t sub_10011B2BC@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C23B0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void sub_10011B314(void *a1@<X8>)
{
  *a1 = &off_1001C23E8;
}

uint64_t sub_10011B324(uint64_t a1)
{
  unint64_t v2 = sub_10011AEF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011B360(uint64_t a1)
{
  unint64_t v2 = sub_10011AEF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10011B39C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10011B530(a1, (uint64_t)v10);
  if (!v2)
  {
    long long v5 = v11[0];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 185) = *(_OWORD *)((char *)v11 + 9);
    long long v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    long long v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    long long v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    long long v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10011B408(void *a1)
{
  return sub_10011AFC8(a1);
}

unint64_t sub_10011B424()
{
  unint64_t result = qword_1001E4520;
  if (!qword_1001E4520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4520);
  }
  return result;
}

unint64_t sub_10011B47C()
{
  unint64_t result = qword_1001E4528;
  if (!qword_1001E4528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4528);
  }
  return result;
}

unint64_t sub_10011B4D4()
{
  unint64_t result = qword_1001E4530;
  if (!qword_1001E4530)
  {
    sub_100011ECC(&qword_1001E4538);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4530);
  }
  return result;
}

uint64_t sub_10011B530@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v4 = sub_100012960(&qword_1001E4540);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v46 = 1;
  sub_100012D78(a1, a1[3]);
  sub_10011AEF0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  }
  sub_10001525C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16[8] = v42;
  v16[9] = v43;
  v17[0] = v44[0];
  *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)((char *)v44 + 9);
  v16[4] = v38;
  v16[5] = v39;
  v16[6] = v40;
  v16[7] = v41;
  v16[0] = v34;
  v16[1] = v35;
  _OWORD v16[2] = v36;
  v16[3] = v37;
  *(_OWORD *)((char *)&v45[8] + 7) = v42;
  *(_OWORD *)((char *)&v45[9] + 7) = v43;
  *(_OWORD *)((char *)&v45[10] + 7) = v44[0];
  v45[11] = *(_OWORD *)((char *)v44 + 9);
  *(_OWORD *)((char *)&v45[4] + 7) = v38;
  *(_OWORD *)((char *)&v45[5] + 7) = v39;
  *(_OWORD *)((char *)&v45[6] + 7) = v40;
  *(_OWORD *)((char *)&v45[7] + 7) = v41;
  *(_OWORD *)((char *)v45 + 7) = v34;
  *(_OWORD *)((char *)&v45[1] + 7) = v35;
  *(_OWORD *)((char *)&v45[2] + 7) = v36;
  *(_OWORD *)((char *)&v45[3] + 7) = v37;
  *(_OWORD *)((char *)&v18[8] + 7) = v42;
  *(_OWORD *)((char *)&v18[9] + 7) = v43;
  *(_OWORD *)((char *)&v18[10] + 7) = v44[0];
  v18[11] = *(_OWORD *)((char *)v44 + 9);
  *(_OWORD *)((char *)&v18[4] + 7) = v38;
  *(_OWORD *)((char *)&v18[5] + 7) = v39;
  *(_OWORD *)((char *)&v18[6] + 7) = v40;
  *(_OWORD *)((char *)&v18[7] + 7) = v41;
  *(_OWORD *)((char *)v18 + 7) = v34;
  *(_OWORD *)((char *)&v18[1] + 7) = v35;
  *(_OWORD *)((char *)&v18[2] + 7) = v36;
  char v19 = 1;
  *(_OWORD *)((char *)&v18[3] + 7) = v37;
  sub_10001547C((uint64_t)v16);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)a1);
  long long v30 = v45[8];
  long long v31 = v45[9];
  long long v32 = v45[10];
  long long v33 = v45[11];
  long long v26 = v45[4];
  long long v27 = v45[5];
  long long v28 = v45[6];
  long long v29 = v45[7];
  long long v22 = v45[0];
  long long v23 = v45[1];
  long long v24 = v45[2];
  uint64_t v20 = 0;
  char v21 = v46;
  long long v25 = v45[3];
  uint64_t result = sub_10011B878((uint64_t)&v20);
  long long v9 = v18[9];
  uint64_t v10 = v47;
  *(_OWORD *)(v47 + 137) = v18[8];
  *(_OWORD *)(v10 + 153) = v9;
  long long v11 = v18[11];
  *(_OWORD *)(v10 + 169) = v18[10];
  *(_OWORD *)(v10 + 185) = v11;
  long long v12 = v18[5];
  *(_OWORD *)(v10 + 73) = v18[4];
  *(_OWORD *)(v10 + 89) = v12;
  long long v13 = v18[7];
  *(_OWORD *)(v10 + 105) = v18[6];
  *(_OWORD *)(v10 + 121) = v13;
  long long v14 = v18[1];
  *(_OWORD *)(v10 + 9) = v18[0];
  *(_OWORD *)(v10 + 25) = v14;
  long long v15 = v18[3];
  *(_OWORD *)(v10 + 41) = v18[2];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = v19;
  *(_OWORD *)(v10 + 57) = v15;
  return result;
}

uint64_t sub_10011B878(uint64_t a1)
{
  return a1;
}

unsigned char *storeEnumTagSinglePayload for SoloEventModel.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10011B980);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SoloEventModel.CodingKeys()
{
  return &type metadata for SoloEventModel.CodingKeys;
}

uint64_t destroy for SoloEventModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SoloEventModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v6;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_WORD *)(a1 + 161) = *(_WORD *)(a2 + 161);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  uint64_t v7 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v7;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SoloEventModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(unsigned char *)(a1 + 97) = *((unsigned char *)a2 + 97);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  *(unsigned char *)(a1 + 99) = *((unsigned char *)a2 + 99);
  *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 + 100);
  *(unsigned char *)(a1 + 101) = *((unsigned char *)a2 + 101);
  uint64_t v5 = a2[13];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 104) = v5;
  uint64_t v6 = a2[15];
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(void *)(a1 + 120) = v6;
  *(unsigned char *)(a1 + 129) = *((unsigned char *)a2 + 129);
  uint64_t v7 = a2[17];
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  *(void *)(a1 + 136) = v7;
  uint64_t v8 = a2[19];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(void *)(a1 + 152) = v8;
  *(unsigned char *)(a1 + 161) = *((unsigned char *)a2 + 161);
  *(unsigned char *)(a1 + 162) = *((unsigned char *)a2 + 162);
  uint64_t v9 = a2[21];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 184) = a2[23];
  *(void *)(a1 + 192) = a2[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
  return a1;
}

__n128 initializeWithTake for SoloEventModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for SoloEventModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v7 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v7;
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for SoloEventModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 201)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SoloEventModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 200) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 201) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 88) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 201) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SoloEventModel()
{
  return &type metadata for SoloEventModel;
}

unint64_t sub_10011BED8()
{
  unint64_t result = qword_1001E4550;
  if (!qword_1001E4550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4550);
  }
  return result;
}

id sub_10011BF2C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for RetryCountEntity();
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    long long v32 = a1;
    long long v33 = a2;
    uint64_t v34 = a4;
    uint64_t v35 = a5;
    swift_bridgeObjectRetain();
    long long v11 = (unsigned __int8 *)(a3 + 33);
    long long v12 = _swiftEmptyArrayStorage;
    long long v13 = _swiftEmptyArrayStorage;
    do
    {
      int v14 = *v11;
      unint64_t v15 = 0xEA00000000007265;
      unint64_t v16 = 0x696669746E656469;
      switch(*(v11 - 1))
      {
        case 1u:
          unint64_t v16 = 0x616E5F70756F7267;
          unint64_t v15 = 0xEA0000000000656DLL;
          break;
        case 2u:
          unint64_t v15 = 0xEB00000000746E75;
          unint64_t v16 = 0x6F635F7972746572;
          break;
        case 3u:
          unint64_t v15 = 0x8000000100184840;
          unint64_t v16 = 0xD000000000000016;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v13 = sub_1001393C4(0, v13[2] + 1, 1, v13);
      }
      unint64_t v18 = v13[2];
      unint64_t v17 = v13[3];
      if (v18 >= v17 >> 1) {
        long long v13 = sub_1001393C4((void *)(v17 > 1), v18 + 1, 1, v13);
      }
      void v13[2] = v18 + 1;
      char v19 = &v13[2 * v18];
      v19[4] = v16;
      void v19[5] = v15;
      BOOL v20 = v14 == 0;
      if (v14) {
        uint64_t v21 = 1129530692;
      }
      else {
        uint64_t v21 = 4412225;
      }
      if (v20) {
        unint64_t v22 = 0xE300000000000000;
      }
      else {
        unint64_t v22 = 0xE400000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v24 = v12[2];
      unint64_t v23 = v12[3];
      if (v24 >= v23 >> 1) {
        long long v12 = sub_1001393C4((void *)(v23 > 1), v24 + 1, 1, v12);
      }
      void v12[2] = v24 + 1;
      long long v25 = &v12[2 * v24];
      v25[4] = v21;
      v25[5] = v22;
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a4 = v34;
    a5 = v35;
    a1 = v32;
    a2 = v33;
  }
  else
  {
    long long v12 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v27 = swift_bridgeObjectRetain();
  sub_10011E858(v27);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v12);
  swift_bridgeObjectRelease();
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v30 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v29, a4, a5);

  return v30;
}

id sub_10011C244(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for SnoutStoryEntity();
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v34 = a1;
    uint64_t v35 = a2;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    swift_bridgeObjectRetain();
    long long v11 = (unsigned __int8 *)(a3 + 33);
    long long v12 = _swiftEmptyArrayStorage;
    long long v13 = _swiftEmptyArrayStorage;
    do
    {
      int v14 = *v11;
      unint64_t v15 = 0xE800000000000000;
      unint64_t v16 = 0x64695F79726F7473;
      switch(*(v11 - 1))
      {
        case 1u:
          unint64_t v16 = 0xD000000000000012;
          unint64_t v17 = "x-responding-instance";
          goto LABEL_12;
        case 2u:
          unint64_t v15 = 0xED000064695F6E6FLL;
          unint64_t v16 = 0x69737265766E6F63;
          break;
        case 3u:
          unint64_t v16 = 0xD000000000000010;
          unint64_t v17 = "id";
          goto LABEL_12;
        case 4u:
          unint64_t v18 = "is_story_sampled";
          goto LABEL_10;
        case 5u:
          unint64_t v15 = 0xEE0073746E657665;
          unint64_t v16 = 0x5F676E69646E6570;
          break;
        case 6u:
          unint64_t v18 = "e";
LABEL_10:
          unint64_t v15 = (unint64_t)v18 | 0x8000000000000000;
          unint64_t v16 = 0xD000000000000011;
          break;
        case 7u:
          unint64_t v16 = 0xD000000000000017;
          unint64_t v17 = "total_event_count";
LABEL_12:
          unint64_t v15 = (unint64_t)v17 | 0x8000000000000000;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v13 = sub_1001393C4(0, v13[2] + 1, 1, v13);
      }
      unint64_t v20 = v13[2];
      unint64_t v19 = v13[3];
      if (v20 >= v19 >> 1) {
        long long v13 = sub_1001393C4((void *)(v19 > 1), v20 + 1, 1, v13);
      }
      void v13[2] = v20 + 1;
      uint64_t v21 = &v13[2 * v20];
      void v21[4] = v16;
      v21[5] = v15;
      BOOL v22 = v14 == 0;
      if (v14) {
        uint64_t v23 = 1129530692;
      }
      else {
        uint64_t v23 = 4412225;
      }
      if (v22) {
        unint64_t v24 = 0xE300000000000000;
      }
      else {
        unint64_t v24 = 0xE400000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v26 = v12[2];
      unint64_t v25 = v12[3];
      if (v26 >= v25 >> 1) {
        long long v12 = sub_1001393C4((void *)(v25 > 1), v26 + 1, 1, v12);
      }
      void v12[2] = v26 + 1;
      uint64_t v27 = &v12[2 * v26];
      v27[4] = v23;
      v27[5] = v24;
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a4 = v36;
    a5 = v37;
    a1 = v34;
    a2 = v35;
  }
  else
  {
    long long v12 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_10011E858(v29);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v12);
  swift_bridgeObjectRelease();
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v31, a4, a5);

  return v32;
}

id sub_10011C5F0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for SoloEventEntity();
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    id v30 = a1;
    uint64_t v31 = a4;
    uint64_t v32 = a5;
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    long long v12 = _swiftEmptyArrayStorage;
    long long v13 = _swiftEmptyArrayStorage;
    do
    {
      int v14 = *(unsigned __int8 *)(a3 + v11 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v13 = sub_1001393C4(0, v13[2] + 1, 1, v13);
      }
      unint64_t v16 = v13[2];
      unint64_t v15 = v13[3];
      if (v16 >= v15 >> 1) {
        long long v13 = sub_1001393C4((void *)(v15 > 1), v16 + 1, 1, v13);
      }
      void v13[2] = v16 + 1;
      unint64_t v17 = &v13[2 * v16];
      void v17[4] = 0x76655F74756F6E73;
      void v17[5] = 0xEB00000000746E65;
      BOOL v18 = v14 == 0;
      if (v14) {
        uint64_t v19 = 1129530692;
      }
      else {
        uint64_t v19 = 4412225;
      }
      if (v18) {
        unint64_t v20 = 0xE300000000000000;
      }
      else {
        unint64_t v20 = 0xE400000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v22 = v12[2];
      unint64_t v21 = v12[3];
      if (v22 >= v21 >> 1) {
        long long v12 = sub_1001393C4((void *)(v21 > 1), v22 + 1, 1, v12);
      }
      ++v11;
      void v12[2] = v22 + 1;
      uint64_t v23 = &v12[2 * v22];
      v23[4] = v19;
      v23[5] = v20;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
    a4 = v31;
    a5 = v32;
    a1 = v30;
  }
  else
  {
    long long v12 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v25 = swift_bridgeObjectRetain();
  sub_10011E858(v25);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v12);
  swift_bridgeObjectRelease();
  Class v27 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v27, a4, a5);

  return v28;
}

id sub_10011C87C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10011C8AC(a1, a2, a3, a4, a5, (void (*)(void))type metadata accessor for PendingImpressionEntity);
}

id sub_10011C894(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10011C8AC(a1, a2, a3, a4, a5, (void (*)(void))type metadata accessor for ImpressionEntity);
}

id sub_10011C8AC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  a6(0);
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11)
  {
    uint64_t v34 = a1;
    uint64_t v35 = a2;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    swift_bridgeObjectRetain();
    long long v12 = _swiftEmptyArrayStorage;
    long long v13 = (unsigned __int8 *)(a3 + 33);
    int v14 = _swiftEmptyArrayStorage;
    do
    {
      int v15 = *v13;
      unint64_t v16 = 0xED000064695F6E6FLL;
      unint64_t v17 = 0x6973736572706D69;
      switch(*(v13 - 1))
      {
        case 1u:
          unint64_t v17 = 0xD000000000000011;
          unint64_t v16 = 0x8000000100184CB0;
          break;
        case 2u:
          BOOL v18 = "x-responding-instance";
          goto LABEL_11;
        case 3u:
          unint64_t v17 = 0x6F7774656E5F6461;
          unint64_t v16 = 0xED000064695F6B72;
          break;
        case 4u:
          unint64_t v16 = 0xE900000000000070;
          unint64_t v17 = 0x6D617473656D6974;
          break;
        case 5u:
          unint64_t v17 = 0xD000000000000010;
          unint64_t v16 = 0x8000000100184CD0;
          break;
        case 6u:
          unint64_t v16 = 0xEB0000000073776ALL;
          unint64_t v17 = 0x5F746361706D6F63;
          break;
        case 7u:
          BOOL v18 = "interaction_type";
LABEL_11:
          unint64_t v16 = (unint64_t)v18 | 0x8000000000000000;
          unint64_t v17 = 0xD000000000000012;
          break;
        case 8u:
          unint64_t v16 = 0xEB00000000746E65;
          unint64_t v17 = 0x6D6E6F7269766E65;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v14 = sub_1001393C4(0, v14[2] + 1, 1, v14);
      }
      unint64_t v20 = v14[2];
      unint64_t v19 = v14[3];
      if (v20 >= v19 >> 1) {
        int v14 = sub_1001393C4((void *)(v19 > 1), v20 + 1, 1, v14);
      }
      id v14[2] = v20 + 1;
      unint64_t v21 = &v14[2 * v20];
      void v21[4] = v17;
      v21[5] = v16;
      BOOL v22 = v15 == 0;
      if (v15) {
        uint64_t v23 = 1129530692;
      }
      else {
        uint64_t v23 = 4412225;
      }
      if (v22) {
        unint64_t v24 = 0xE300000000000000;
      }
      else {
        unint64_t v24 = 0xE400000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v26 = v12[2];
      unint64_t v25 = v12[3];
      if (v26 >= v25 >> 1) {
        long long v12 = sub_1001393C4((void *)(v25 > 1), v26 + 1, 1, v12);
      }
      void v12[2] = v26 + 1;
      Class v27 = &v12[2 * v26];
      v27[4] = v23;
      v27[5] = v24;
      v13 += 2;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    a4 = v36;
    a5 = v37;
    a1 = v34;
    a2 = v35;
  }
  else
  {
    long long v12 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_10011E858(v29);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v12);
  swift_bridgeObjectRelease();
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v31, a4, a5);

  return v32;
}

id sub_10011CC88(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for PostbackEntity();
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v34 = a1;
    uint64_t v35 = a2;
    uint64_t v36 = a4;
    swift_bridgeObjectRetain();
    uint64_t v11 = (unsigned __int8 *)(a3 + 33);
    long long v12 = _swiftEmptyArrayStorage;
    long long v13 = _swiftEmptyArrayStorage;
    do
    {
      int v14 = *v11;
      unint64_t v15 = 0xEE0064695F656361;
      unint64_t v16 = 0x6C7074656B72616DLL;
      switch(*(v11 - 1))
      {
        case 1u:
          unint64_t v15 = 0xEB0000000064695FLL;
          goto LABEL_15;
        case 2u:
          unint64_t v16 = 0xD000000000000012;
          unint64_t v17 = "advertised_item_id";
          goto LABEL_31;
        case 3u:
          unint64_t v16 = 0xD000000000000011;
          unint64_t v17 = "publisher_item_id";
          goto LABEL_31;
        case 4u:
          unint64_t v16 = 0x6F7774656E5F6461;
          unint64_t v15 = 0xED000064695F6B72;
          break;
        case 5u:
          BOOL v18 = "interaction_type";
          goto LABEL_19;
        case 6u:
          unint64_t v16 = 0xD000000000000015;
          unint64_t v17 = "conversion_value_tier";
          goto LABEL_31;
        case 7u:
          unint64_t v15 = 0xEF657079745F6E6FLL;
          goto LABEL_28;
        case 8u:
          unint64_t v16 = 0xD000000000000015;
          unint64_t v17 = "fine_conversion_value";
          goto LABEL_31;
        case 9u:
          unint64_t v16 = 0xD000000000000017;
          unint64_t v17 = "coarse_conversion_value";
          goto LABEL_31;
        case 0xAu:
          unint64_t v16 = 0xD000000000000011;
          unint64_t v17 = "source_identifier";
          goto LABEL_31;
        case 0xBu:
          unint64_t v15 = 0xEC0000006C72755FLL;
LABEL_15:
          unint64_t v16 = 0x6B63616274736F70;
          break;
        case 0xCu:
          unint64_t v15 = 0xEB0000000073776ALL;
          unint64_t v16 = 0x5F746361706D6F63;
          break;
        case 0xDu:
          unint64_t v16 = 0xD000000000000012;
          unint64_t v17 = "creation_timestamp";
          goto LABEL_31;
        case 0xEu:
          BOOL v18 = "origin_timestamp";
LABEL_19:
          unint64_t v15 = (unint64_t)(v18 - 32) | 0x8000000000000000;
          unint64_t v16 = 0xD000000000000010;
          break;
        case 0xFu:
          unint64_t v15 = 0xEE00706D61747365;
          unint64_t v16 = 0x6D69745F6B636F6CLL;
          break;
        case 0x10u:
          unint64_t v16 = 0xD000000000000016;
          unint64_t v17 = "transmission_timestamp";
          goto LABEL_31;
        case 0x11u:
          unint64_t v15 = 0xE700000000000000;
          unint64_t v16 = 0x6E69775F646964;
          break;
        case 0x12u:
          unint64_t v15 = 0xEE007865646E695FLL;
          unint64_t v16 = 0x65636E6575716573;
          break;
        case 0x13u:
          unint64_t v15 = 0xE900000000000064;
          unint64_t v16 = 0x656B636F6C5F7369;
          break;
        case 0x14u:
          unint64_t v15 = 0xEA00000000006465;
          unint64_t v16 = 0x7265747369676572;
          break;
        case 0x15u:
          unint64_t v16 = 0xD000000000000014;
          unint64_t v17 = "postback_destination";
          goto LABEL_31;
        case 0x16u:
          unint64_t v15 = 0xED000064695F6E6FLL;
LABEL_28:
          unint64_t v16 = 0x69737265766E6F63;
          break;
        case 0x17u:
          unint64_t v15 = 0xEB00000000746E65;
          unint64_t v16 = 0x6D6E6F7269766E65;
          break;
        case 0x18u:
          unint64_t v16 = 0xD000000000000014;
          unint64_t v17 = "conversion_timestamp";
LABEL_31:
          unint64_t v15 = (unint64_t)(v17 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v20 = v12[2];
      unint64_t v19 = v12[3];
      if (v20 >= v19 >> 1) {
        long long v12 = sub_1001393C4((void *)(v19 > 1), v20 + 1, 1, v12);
      }
      void v12[2] = v20 + 1;
      unint64_t v21 = &v12[2 * v20];
      void v21[4] = v16;
      v21[5] = v15;
      BOOL v22 = v14 == 0;
      if (v14) {
        uint64_t v23 = 1129530692;
      }
      else {
        uint64_t v23 = 4412225;
      }
      if (v22) {
        unint64_t v24 = 0xE300000000000000;
      }
      else {
        unint64_t v24 = 0xE400000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v13 = sub_1001393C4(0, v13[2] + 1, 1, v13);
      }
      unint64_t v26 = v13[2];
      unint64_t v25 = v13[3];
      if (v26 >= v25 >> 1) {
        long long v13 = sub_1001393C4((void *)(v25 > 1), v26 + 1, 1, v13);
      }
      void v13[2] = v26 + 1;
      Class v27 = &v13[2 * v26];
      v27[4] = v23;
      v27[5] = v24;
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a4 = v36;
    a1 = v34;
    a2 = v35;
  }
  else
  {
    long long v13 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_10011E858(v29);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v13);
  swift_bridgeObjectRelease();
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v31, a4, a5);

  return v32;
}

id sub_10011D1D8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for FinalizedTokenEntity();
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    id v30 = a2;
    uint64_t v31 = a4;
    uint64_t v32 = a5;
    swift_bridgeObjectRetain();
    uint64_t v10 = (unsigned __int8 *)(a3 + 33);
    uint64_t v11 = _swiftEmptyArrayStorage;
    long long v12 = _swiftEmptyArrayStorage;
    do
    {
      int v13 = *v10;
      unint64_t v14 = 0xED000064695F6E6FLL;
      unint64_t v15 = 0x69737265766E6F63;
      switch(*(v10 - 1))
      {
        case 1u:
          unint64_t v14 = 0x8000000100184760;
          unint64_t v15 = 0xD000000000000012;
          break;
        case 2u:
          unint64_t v14 = 0xED00007475706E69;
          unint64_t v15 = 0x5F65746176697270;
          break;
        case 3u:
          unint64_t v14 = 0xEF6E656B6F745F64;
          unint64_t v15 = 0x657A696C616E6966;
          break;
        case 4u:
          unint64_t v14 = 0xE900000000000070;
          unint64_t v15 = 0x6D617473656D6974;
          break;
        case 5u:
          unint64_t v14 = 0xEB00000000657461;
          unint64_t v15 = 0x6369666974726563;
          break;
        case 6u:
          unint64_t v14 = 0xEF657079745F6E6FLL;
          break;
        case 7u:
          unint64_t v14 = 0xEB00000000746E65;
          unint64_t v15 = 0x6D6E6F7269766E65;
          break;
        case 8u:
          unint64_t v14 = 0xEC00000064657461;
          unint64_t v15 = 0x636F6C6C615F7369;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v17 = v12[2];
      unint64_t v16 = v12[3];
      if (v17 >= v16 >> 1) {
        long long v12 = sub_1001393C4((void *)(v16 > 1), v17 + 1, 1, v12);
      }
      void v12[2] = v17 + 1;
      BOOL v18 = &v12[2 * v17];
      v18[4] = v15;
      v18[5] = v14;
      if (v13) {
        uint64_t v19 = 1129530692;
      }
      else {
        uint64_t v19 = 4412225;
      }
      if (v13) {
        unint64_t v20 = 0xE400000000000000;
      }
      else {
        unint64_t v20 = 0xE300000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = sub_1001393C4(0, v11[2] + 1, 1, v11);
      }
      unint64_t v22 = v11[2];
      unint64_t v21 = v11[3];
      if (v22 >= v21 >> 1) {
        uint64_t v11 = sub_1001393C4((void *)(v21 > 1), v22 + 1, 1, v11);
      }
      _OWORD v11[2] = v22 + 1;
      uint64_t v23 = &v11[2 * v22];
      v23[4] = v19;
      v23[5] = v20;
      v10 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    a4 = v31;
    a5 = v32;
    a2 = v30;
  }
  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v25 = swift_bridgeObjectRetain();
  sub_10011E858(v25);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v11);
  swift_bridgeObjectRelease();
  Class v27 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v27, a4, a5);

  return v28;
}

id sub_10011D59C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for AllocatedTokenMetadataEntity();
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v31 = a2;
    uint64_t v32 = a4;
    uint64_t v33 = a5;
    swift_bridgeObjectRetain();
    uint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v11 = (unsigned __int8 *)(a3 + 33);
    long long v12 = _swiftEmptyArrayStorage;
    do
    {
      int v13 = *v11;
      unint64_t v14 = 0xED000064695F6E6FLL;
      unint64_t v15 = 0x69737265766E6F63;
      switch(*(v11 - 1))
      {
        case 1u:
          unint64_t v16 = "x-responding-instance";
          goto LABEL_7;
        case 2u:
          unint64_t v14 = 0xEF657079745F6E6FLL;
          break;
        case 3u:
          unint64_t v16 = "interaction_type";
LABEL_7:
          unint64_t v14 = (unint64_t)v16 | 0x8000000000000000;
          unint64_t v15 = 0xD000000000000012;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v18 = v12[2];
      unint64_t v17 = v12[3];
      if (v18 >= v17 >> 1) {
        long long v12 = sub_1001393C4((void *)(v17 > 1), v18 + 1, 1, v12);
      }
      void v12[2] = v18 + 1;
      uint64_t v19 = &v12[2 * v18];
      v19[4] = v15;
      void v19[5] = v14;
      if (v13) {
        uint64_t v20 = 1129530692;
      }
      else {
        uint64_t v20 = 4412225;
      }
      if (v13) {
        unint64_t v21 = 0xE400000000000000;
      }
      else {
        unint64_t v21 = 0xE300000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = sub_1001393C4(0, v10[2] + 1, 1, v10);
      }
      unint64_t v23 = v10[2];
      unint64_t v22 = v10[3];
      if (v23 >= v22 >> 1) {
        uint64_t v10 = sub_1001393C4((void *)(v22 > 1), v23 + 1, 1, v10);
      }
      v10[2] = v23 + 1;
      unint64_t v24 = &v10[2 * v23];
      v24[4] = v20;
      v24[5] = v21;
      v11 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    a4 = v32;
    a5 = v33;
    a2 = v31;
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v26 = swift_bridgeObjectRetain();
  sub_10011E858(v26);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v10);
  swift_bridgeObjectRelease();
  Class v28 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v28, a4, a5);

  return v29;
}

id sub_10011D89C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for AppDistributorMetadataEntity();
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v32 = a1;
    uint64_t v33 = a4;
    uint64_t v34 = a5;
    swift_bridgeObjectRetain();
    uint64_t v11 = (unsigned __int8 *)(a3 + 33);
    long long v12 = _swiftEmptyArrayStorage;
    int v13 = _swiftEmptyArrayStorage;
    do
    {
      int v14 = *v11;
      unint64_t v15 = 0x8000000100184760;
      unint64_t v16 = 0xD000000000000012;
      switch(*(v11 - 1))
      {
        case 1u:
          unint64_t v16 = 0xD000000000000015;
          unint64_t v17 = "nt";
          goto LABEL_7;
        case 2u:
          unint64_t v15 = 0xEE0064695F6E6F69;
          unint64_t v16 = 0x737265765F707061;
          break;
        case 3u:
          unint64_t v17 = "interaction_type";
LABEL_7:
          unint64_t v15 = (unint64_t)v17 | 0x8000000000000000;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v13 = sub_1001393C4(0, v13[2] + 1, 1, v13);
      }
      unint64_t v19 = v13[2];
      unint64_t v18 = v13[3];
      if (v19 >= v18 >> 1) {
        int v13 = sub_1001393C4((void *)(v18 > 1), v19 + 1, 1, v13);
      }
      void v13[2] = v19 + 1;
      uint64_t v20 = &v13[2 * v19];
      v20[4] = v16;
      v20[5] = v15;
      if (v14) {
        uint64_t v21 = 1129530692;
      }
      else {
        uint64_t v21 = 4412225;
      }
      if (v14) {
        unint64_t v22 = 0xE400000000000000;
      }
      else {
        unint64_t v22 = 0xE300000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v24 = v12[2];
      unint64_t v23 = v12[3];
      if (v24 >= v23 >> 1) {
        long long v12 = sub_1001393C4((void *)(v23 > 1), v24 + 1, 1, v12);
      }
      void v12[2] = v24 + 1;
      uint64_t v25 = &v12[2 * v24];
      v25[4] = v21;
      v25[5] = v22;
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a4 = v33;
    a5 = v34;
    a1 = v32;
  }
  else
  {
    long long v12 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v27 = swift_bridgeObjectRetain();
  sub_10011E858(v27);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v12);
  swift_bridgeObjectRelease();
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v30 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v29, a4, a5);

  return v30;
}

id sub_10011DBB0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for FrozenImpressionEntity();
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v31 = a1;
    uint64_t v32 = a4;
    uint64_t v33 = a5;
    swift_bridgeObjectRetain();
    uint64_t v11 = (unsigned __int8 *)(a3 + 33);
    long long v12 = _swiftEmptyArrayStorage;
    int v13 = _swiftEmptyArrayStorage;
    do
    {
      int v14 = *v11;
      unint64_t v15 = 0x8000000100184DE0;
      unint64_t v16 = 0xD000000000000012;
      switch(*(v11 - 1))
      {
        case 1u:
          unint64_t v16 = 0xD000000000000014;
          unint64_t v15 = 0x8000000100184E00;
          break;
        case 2u:
          unint64_t v15 = 0x8000000100184760;
          break;
        case 3u:
          unint64_t v15 = 0xEC00000064695F6BLL;
          unint64_t v16 = 0x63616274736F6867;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v13 = sub_1001393C4(0, v13[2] + 1, 1, v13);
      }
      unint64_t v18 = v13[2];
      unint64_t v17 = v13[3];
      if (v18 >= v17 >> 1) {
        int v13 = sub_1001393C4((void *)(v17 > 1), v18 + 1, 1, v13);
      }
      void v13[2] = v18 + 1;
      unint64_t v19 = &v13[2 * v18];
      v19[4] = v16;
      void v19[5] = v15;
      if (v14) {
        uint64_t v20 = 1129530692;
      }
      else {
        uint64_t v20 = 4412225;
      }
      if (v14) {
        unint64_t v21 = 0xE400000000000000;
      }
      else {
        unint64_t v21 = 0xE300000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v23 = v12[2];
      unint64_t v22 = v12[3];
      if (v23 >= v22 >> 1) {
        long long v12 = sub_1001393C4((void *)(v22 > 1), v23 + 1, 1, v12);
      }
      void v12[2] = v23 + 1;
      unint64_t v24 = &v12[2 * v23];
      v24[4] = v20;
      v24[5] = v21;
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a4 = v32;
    a5 = v33;
    a1 = v31;
  }
  else
  {
    long long v12 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v26 = swift_bridgeObjectRetain();
  sub_10011E858(v26);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v12);
  swift_bridgeObjectRelease();
  Class v28 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v28, a4, a5);

  return v29;
}

id sub_10011DEC4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for GhostbackEntity();
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v31 = a1;
    uint64_t v32 = a4;
    uint64_t v33 = a5;
    swift_bridgeObjectRetain();
    uint64_t v11 = _swiftEmptyArrayStorage;
    long long v12 = (unsigned __int8 *)(a3 + 33);
    int v13 = _swiftEmptyArrayStorage;
    do
    {
      int v14 = *v12;
      unint64_t v15 = 0x8000000100184760;
      unint64_t v16 = 0xD000000000000012;
      switch(*(v12 - 1))
      {
        case 1u:
          unint64_t v16 = 0xD000000000000015;
          unint64_t v15 = 0x8000000100184D10;
          break;
        case 2u:
          unint64_t v16 = 0xD000000000000017;
          unint64_t v15 = 0x8000000100184D30;
          break;
        case 3u:
          unint64_t v15 = 0xE900000000000064;
          unint64_t v16 = 0x656B636F6C5F7369;
          break;
        case 4u:
          unint64_t v15 = 0xEA00000000006465;
          unint64_t v16 = 0x7265747369676572;
          break;
        case 5u:
          unint64_t v15 = 0x8000000100184CF0;
          break;
        case 6u:
          unint64_t v16 = 0xD000000000000010;
          unint64_t v15 = 0x8000000100184D60;
          break;
        case 7u:
          unint64_t v15 = 0xEE00706D61747365;
          unint64_t v16 = 0x6D69745F6B636F6CLL;
          break;
        case 8u:
          unint64_t v15 = 0xEF706D617473656DLL;
          unint64_t v16 = 0x69745F6863746566;
          break;
        case 9u:
          unint64_t v15 = 0xEC00000064695F6BLL;
          unint64_t v16 = 0x63616274736F6867;
          break;
        case 0xAu:
          unint64_t v15 = 0xEF657079745F6E6FLL;
          unint64_t v16 = 0x69737265766E6F63;
          break;
        case 0xBu:
          unint64_t v15 = 0xEB00000000746E65;
          unint64_t v16 = 0x6D6E6F7269766E65;
          break;
        case 0xCu:
          unint64_t v16 = 0xD000000000000016;
          unint64_t v15 = 0x8000000100184DB0;
          break;
        case 0xDu:
          unint64_t v15 = 0xEE0064695F656361;
          unint64_t v16 = 0x6C7074656B72616DLL;
          break;
        default:
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = sub_1001393C4(0, v11[2] + 1, 1, v11);
      }
      unint64_t v18 = v11[2];
      unint64_t v17 = v11[3];
      if (v18 >= v17 >> 1) {
        uint64_t v11 = sub_1001393C4((void *)(v17 > 1), v18 + 1, 1, v11);
      }
      _OWORD v11[2] = v18 + 1;
      unint64_t v19 = &v11[2 * v18];
      v19[4] = v16;
      void v19[5] = v15;
      if (v14) {
        uint64_t v20 = 1129530692;
      }
      else {
        uint64_t v20 = 4412225;
      }
      if (v14) {
        unint64_t v21 = 0xE400000000000000;
      }
      else {
        unint64_t v21 = 0xE300000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v13 = sub_1001393C4(0, v13[2] + 1, 1, v13);
      }
      unint64_t v23 = v13[2];
      unint64_t v22 = v13[3];
      if (v23 >= v22 >> 1) {
        int v13 = sub_1001393C4((void *)(v22 > 1), v23 + 1, 1, v13);
      }
      void v13[2] = v23 + 1;
      unint64_t v24 = &v13[2 * v23];
      v24[4] = v20;
      v24[5] = v21;
      v12 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a4 = v32;
    a5 = v33;
    a1 = v31;
  }
  else
  {
    int v13 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v26 = swift_bridgeObjectRetain();
  sub_10011E858(v26);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v13);
  swift_bridgeObjectRelease();
  Class v28 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v28, a4, a5);

  return v29;
}

id sub_10011E35C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for ItemIdentifierBundleIDMapEntity();
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v31 = a2;
    uint64_t v32 = a4;
    uint64_t v33 = a5;
    swift_bridgeObjectRetain();
    uint64_t v11 = (unsigned __int8 *)(a3 + 33);
    long long v12 = _swiftEmptyArrayStorage;
    int v13 = _swiftEmptyArrayStorage;
    do
    {
      int v14 = *v11;
      if (*(v11 - 1)) {
        uint64_t v15 = 0x695F656C646E7562;
      }
      else {
        uint64_t v15 = 0x64695F6D657469;
      }
      if (*(v11 - 1)) {
        unint64_t v16 = 0xE900000000000064;
      }
      else {
        unint64_t v16 = 0xE700000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v13 = sub_1001393C4(0, v13[2] + 1, 1, v13);
      }
      unint64_t v18 = v13[2];
      unint64_t v17 = v13[3];
      if (v18 >= v17 >> 1) {
        int v13 = sub_1001393C4((void *)(v17 > 1), v18 + 1, 1, v13);
      }
      void v13[2] = v18 + 1;
      unint64_t v19 = &v13[2 * v18];
      v19[4] = v15;
      void v19[5] = v16;
      if (v14) {
        uint64_t v20 = 1129530692;
      }
      else {
        uint64_t v20 = 4412225;
      }
      if (v14) {
        unint64_t v21 = 0xE400000000000000;
      }
      else {
        unint64_t v21 = 0xE300000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = sub_1001393C4(0, v12[2] + 1, 1, v12);
      }
      unint64_t v23 = v12[2];
      unint64_t v22 = v12[3];
      if (v23 >= v22 >> 1) {
        long long v12 = sub_1001393C4((void *)(v22 > 1), v23 + 1, 1, v12);
      }
      void v12[2] = v23 + 1;
      unint64_t v24 = &v12[2 * v23];
      v24[4] = v20;
      v24[5] = v21;
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a4 = v32;
    a5 = v33;
    a2 = v31;
  }
  else
  {
    long long v12 = _swiftEmptyArrayStorage;
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v26 = swift_bridgeObjectRetain();
  sub_10011E858(v26);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011E858((uint64_t)v12);
  swift_bridgeObjectRelease();
  Class v28 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = sub_10000E99C(ObjCClassFromMetadata, a1, a2, isa, v28, a4, a5);

  return v29;
}

void *sub_10011E604(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  id v30 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    uint64_t v24 = v2;
    uint64_t v31 = _swiftEmptyArrayStorage;
    sub_10013A7F8(0, v7, 0);
    uint64_t v8 = v31;
    uint64_t v9 = (_OWORD *)(a1 + 32);
    swift_beginAccess();
    uint64_t v10 = type metadata accessor for SnoutStoryModel();
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v27 = v10;
    uint64_t v28 = a2;
    uint64_t v29 = v5 + 16;
    uint64_t v25 = (void (**)(char *, uint64_t))(v5 + 8);
    do
    {
      long long v11 = v9[9];
      v33[8] = v9[8];
      v33[9] = v11;
      v34[0] = v9[10];
      *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v9 + 169);
      long long v12 = v9[5];
      v33[4] = v9[4];
      v33[5] = v12;
      long long v13 = v9[7];
      v33[6] = v9[6];
      v33[7] = v13;
      long long v14 = v9[3];
      v33[2] = v9[2];
      v33[3] = v14;
      long long v15 = v9[1];
      v33[0] = *v9;
      v33[1] = v15;
      unint64_t v16 = v30;
      uint64_t v17 = v35;
      v26(v30, a2 + *(int *)(v27 + 20), v35);
      sub_10001547C((uint64_t)v33);
      uint64_t v18 = UUID.uuidString.getter();
      uint64_t v20 = v19;
      (*v25)(v16, v17);
      sub_100098E38((uint64_t)v33, v18, v20, (uint64_t)v32);
      sub_100036824((uint64_t)v33);
      uint64_t v31 = v8;
      unint64_t v22 = v8[2];
      unint64_t v21 = v8[3];
      if (v22 >= v21 >> 1)
      {
        sub_10013A7F8(v21 > 1, v22 + 1, 1);
        uint64_t v8 = v31;
      }
      void v8[2] = v22 + 1;
      memcpy(&v8[53 * v22 + 4], v32, 0x1A1uLL);
      v9 += 12;
      --v7;
      a2 = v28;
    }
    while (v7);
  }
  return v8;
}

void *sub_10011E858(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    sub_10013A630(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10013A630(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_10013A630(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_100037488(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10011E980(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  long long v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  long long v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10013A630(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100019F68(0, &qword_1001E48F0);
        swift_dynamicCast();
        long long v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10013A630(0, v3[2] + 1, 1);
          long long v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_10013A630(v6 > 1, v7 + 1, 1);
          long long v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_100037488(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      long long v8 = (id *)(a1 + 32);
      sub_100019F68(0, &qword_1001E48F0);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        long long v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10013A630(0, v3[2] + 1, 1);
          long long v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_10013A630(v10 > 1, v11 + 1, 1);
          long long v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_100037488(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_10011EBE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ImpressionModel();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_10013A6C8(0, v6, 0);
    unint64_t v7 = v17;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_10013EC80(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
      uint64_t v17 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10013A6C8(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v17;
      }
      uint64_t v15 = v2;
      unint64_t v16 = &off_1001C4050;
      long long v12 = sub_100012DBC((uint64_t *)&v14);
      sub_10013EC80((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
      _OWORD v7[2] = v11 + 1;
      sub_100012D60(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_10013ECE8((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_10011EDAC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_10013A6C8(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (long long *)(a1 + 32);
    do
    {
      long long v5 = v4[11];
      long long v34 = v4[10];
      long long v35 = v5;
      v36[0] = v4[12];
      *(_OWORD *)((char *)v36 + 9) = *(long long *)((char *)v4 + 201);
      long long v6 = v4[7];
      long long v30 = v4[6];
      long long v31 = v6;
      long long v7 = v4[9];
      long long v32 = v4[8];
      long long v33 = v7;
      long long v8 = v4[3];
      long long v26 = v4[2];
      long long v27 = v8;
      long long v9 = v4[5];
      long long v28 = v4[4];
      long long v29 = v9;
      long long v10 = v4[1];
      long long v24 = *v4;
      long long v25 = v10;
      sub_100013AE8((uint64_t)&v24);
      uint64_t v37 = v2;
      unint64_t v12 = v2[2];
      unint64_t v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_10013A6C8(v11 > 1, v12 + 1, 1);
        uint64_t v2 = v37;
      }
      unint64_t v22 = &type metadata for SKAdNetworkImpression;
      unint64_t v23 = &off_1001C4030;
      long long v13 = (_OWORD *)swift_allocObject();
      *(void *)&long long v21 = v13;
      long long v14 = v35;
      v13[11] = v34;
      v13[12] = v14;
      v13[13] = v36[0];
      *(_OWORD *)((char *)v13 + 217) = *(_OWORD *)((char *)v36 + 9);
      long long v15 = v31;
      v13[7] = v30;
      unsigned char v13[8] = v15;
      long long v16 = v33;
      v13[9] = v32;
      v13[10] = v16;
      long long v17 = v27;
      v13[3] = v26;
      void v13[4] = v17;
      long long v18 = v29;
      v13[5] = v28;
      v13[6] = v18;
      long long v19 = v25;
      v13[1] = v24;
      void v13[2] = v19;
      v2[2] = v12 + 1;
      sub_100012D60(&v21, (uint64_t)&v2[5 * v12 + 4]);
      v4 += 14;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10011EF40(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  long long v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10013A738(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        long long v17 = v3;
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10013A738(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }
        ++v5;
        uint64_t v15 = sub_100019F68(0, &qword_1001E30B0);
        long long v16 = &off_1001C80D8;
        *(void *)&long long v14 = v6;
        v3[2] = v8 + 1;
        sub_100012D60(&v14, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      long long v9 = (void **)(a1 + 32);
      do
      {
        long long v10 = *v9;
        long long v17 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_10013A738(v11 > 1, v12 + 1, 1);
          uint64_t v3 = v17;
        }
        uint64_t v15 = sub_100019F68(0, &qword_1001E30B0);
        long long v16 = &off_1001C80D8;
        *(void *)&long long v14 = v13;
        v3[2] = v12 + 1;
        sub_100012D60(&v14, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_10011F134(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v23 = _swiftEmptyArrayStorage;
    sub_10013A7C8(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (char *)(a1 + 32);
    unint64_t v5 = sub_10013DE1C();
    do
    {
      memcpy(v22, v4, 0x1A1uLL);
      uint64_t v20 = &type metadata for SnoutEventPayload;
      unint64_t v21 = v5;
      v19[0] = swift_allocObject();
      memcpy((void *)(v19[0] + 16), v4, 0x1A1uLL);
      sub_10013DF48((uint64_t)v22);
      unint64_t v23 = v2;
      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10013A7C8(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v23;
      }
      unint64_t v14 = v7 + 1;
      uint64_t v8 = sub_10004DD80((uint64_t)v19, (uint64_t)v20);
      uint64_t v15 = &v13;
      __chkstk_darwin(v8);
      long long v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v11 + 16))(v10);
      long long v17 = &type metadata for SnoutEventPayload;
      unint64_t v18 = v5;
      *(void *)&long long v16 = swift_allocObject();
      memcpy((void *)(v16 + 16), v10, 0x1A1uLL);
      v2[2] = v14;
      sub_100012D60(&v16, (uint64_t)&v2[5 * v7 + 4]);
      _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v19);
      v4 += 424;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10011F350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_10011F378, 0, 0);
}

uint64_t sub_10011F378()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for ImpressionDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3118;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v8 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10013E888, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10011F4B4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100140694, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 16);
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10011F614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_10011F63C, 0, 0);
}

uint64_t sub_10011F63C()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for TokenDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E2260;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v8 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10013EE2C, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10011F778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_10011F7A0, 0, 0);
}

uint64_t sub_10011F7A0()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for RetryCountDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E2530;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v8 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10013EBC0, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10011F8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_10011F904, 0, 0);
}

uint64_t sub_10011F904()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for GhostbackDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3A98;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v8 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10013E9F0, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10011FA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_10011FA68, 0, 0);
}

uint64_t sub_10011FA68()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for AppLaunchDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3D78;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v8 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10013F4DC, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10011FBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_10011FBCC, 0, 0);
}

uint64_t sub_10011FBCC()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for SnoutDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E14A0;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v8 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10013DD08, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10011FD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_10011FD30, 0, 0);
}

uint64_t sub_10011FD30()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for PostbackDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E1450;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v8 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_10013F2C0, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10011FE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_10011FE94, 0, 0);
}

uint64_t sub_10011FE94()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for ImpressionDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3118;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E1378);
  *unint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v9 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013F410, v5, v8);
}

uint64_t sub_10011FFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return _swift_task_switch(sub_10011FFFC, 0, 0);
}

uint64_t sub_10011FFFC()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for TokenDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E2260;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_100120138;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013F00C, v5, &type metadata for Int);
}

uint64_t sub_100120138()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100140694, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 56);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 16);
    id v4 = *(uint64_t (**)(uint64_t))(v2 + 8);
    return v4(v3);
  }
}

uint64_t sub_1001202A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return _swift_task_switch(sub_1001202C8, 0, 0);
}

uint64_t sub_1001202C8()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for GhostbackDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3A98;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E4850);
  *unint64_t v7 = v0;
  v7[1] = sub_100120138;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013EB04, v5, v8);
}

uint64_t sub_10012040C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  v6[17] = a3;
  v6[18] = a4;
  v6[15] = a1;
  v6[16] = a2;
  return _swift_task_switch(sub_100120434, 0, 0);
}

uint64_t sub_100120434()
{
  uint64_t v2 = *(void *)(v0 + 152);
  int64_t v1 = *(void **)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  *(void *)(v0 + 104) = &type metadata for AppLaunchDatabaseStore;
  *(void *)(v0 + 112) = &off_1001E3D78;
  *(void *)(v0 + 80) = v3;
  *(void *)(v0 + 88) = v2;
  *(void *)(v0 + 96) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  long long v6 = *(_OWORD *)(v0 + 128);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 80;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E1B70);
  *unint64_t v7 = v0;
  v7[1] = sub_100120578;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013E650, v5, v8);
}

uint64_t sub_100120578()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100120718, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 120);

    swift_task_dealloc();
    long long v9 = *(_OWORD *)(v2 + 32);
    long long v10 = *(_OWORD *)(v2 + 16);
    long long v8 = *(_OWORD *)(v2 + 48);
    uint64_t v5 = *(void *)(v2 + 64);
    uint64_t v4 = *(void *)(v2 + 72);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 80);
    *(_OWORD *)uint64_t v3 = v10;
    *(_OWORD *)(v3 + 16) = v9;
    *(_OWORD *)(v3 + 32) = v8;
    *(void *)(v3 + 48) = v5;
    *(void *)(v3 + 56) = v4;
    long long v6 = *(uint64_t (**)(void))(v2 + 8);
    return v6();
  }
}

uint64_t sub_100120718()
{
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 80);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100120790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return _swift_task_switch(sub_1001207B8, 0, 0);
}

uint64_t sub_1001207B8()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for PostbackDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E1450;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E48E0);
  *unint64_t v7 = v0;
  v7[1] = sub_100120138;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013F204, v5, v8);
}

uint64_t sub_1001208FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return _swift_task_switch(sub_100120924, 0, 0);
}

uint64_t sub_100120924()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for SnoutDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E14A0;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E4748);
  *unint64_t v7 = v0;
  v7[1] = sub_100120138;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013D7E0, v5, v8);
}

uint64_t sub_100120A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return _swift_task_switch(sub_100120A90, 0, 0);
}

uint64_t sub_100120A90()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for ImpressionDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3118;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E4960);
  *unint64_t v7 = v0;
  v7[1] = sub_100120138;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013F6D8, v5, v8);
}

uint64_t sub_100120BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return _swift_task_switch(sub_100120BFC, 0, 0);
}

uint64_t sub_100120BFC()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for ImpressionDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3118;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E4890);
  *unint64_t v7 = v0;
  v7[1] = sub_100120D40;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013ED48, v5, v8);
}

uint64_t sub_100120D40()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100120EA8, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 56);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 16);
    id v4 = *(uint64_t (**)(uint64_t))(v2 + 8);
    return v4(v3);
  }
}

uint64_t sub_100120EA8()
{
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100120F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[16] = a3;
  v6[17] = a4;
  v6[14] = a1;
  v6[15] = a2;
  return _swift_task_switch(sub_100120F48, 0, 0);
}

uint64_t sub_100120F48()
{
  uint64_t v2 = *(void *)(v0 + 144);
  int64_t v1 = *(void **)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  *(void *)(v0 + 96) = &type metadata for TokenDatabaseStore;
  *(void *)(v0 + 104) = &off_1001E2260;
  *(void *)(v0 + 72) = v3;
  *(void *)(v0 + 80) = v2;
  *(void *)(v0 + 88) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 160) = v5;
  long long v6 = *(_OWORD *)(v0 + 120);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 72;
  *(_OWORD *)(v5 + 32) = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E2F10);
  *unint64_t v7 = v0;
  v7[1] = sub_10012108C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013F644, v5, v8);
}

uint64_t sub_10012108C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100140698, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 112);

    swift_task_dealloc();
    long long v8 = *(_OWORD *)(v2 + 32);
    long long v9 = *(_OWORD *)(v2 + 16);
    long long v7 = *(_OWORD *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 64);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 72);
    *(_OWORD *)uint64_t v3 = v9;
    *(_OWORD *)(v3 + 16) = v8;
    *(_OWORD *)(v3 + 32) = v7;
    *(void *)(v3 + 48) = v4;
    uint64_t v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
}

uint64_t sub_10012122C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_100121254, 0, 0);
}

uint64_t sub_100121254()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for SnoutDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E14A0;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E3A68);
  *long long v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v9 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013D95C, v5, v8);
}

uint64_t sub_100121394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[10] = a4;
  v5[11] = a5;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return _swift_task_switch(sub_1001213BC, 0, 0);
}

uint64_t sub_1001213BC()
{
  uint64_t v2 = *(void *)(v0 + 80);
  int64_t v1 = *(void **)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  *(void *)(v0 + 40) = &type metadata for ImpressionDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3118;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  long long v6 = *(_OWORD *)(v0 + 56);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *long long v7 = v0;
  v7[1] = sub_1001214F8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 120, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013F318, v5, &type metadata for Bool);
}

uint64_t sub_1001214F8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100121660, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v3 = *(unsigned __int8 *)(v2 + 120);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 16);
    id v4 = *(uint64_t (**)(uint64_t))(v2 + 8);
    return v4(v3);
  }
}

uint64_t sub_100121660()
{
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1001216DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  return _swift_task_switch(sub_100121704, 0, 0);
}

uint64_t sub_100121704()
{
  uint64_t v2 = *(void *)(v0 + 96);
  int64_t v1 = *(void **)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  *(void *)(v0 + 40) = &type metadata for AppMetadataDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E1C70;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  long long v6 = *(_OWORD *)(v0 + 72);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E28D8);
  *long long v7 = v0;
  v7[1] = sub_100121848;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013FB0C, v5, v8);
}

uint64_t sub_100121848()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001219B8, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = *(unsigned __int8 *)(v2 + 64);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 16);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
    return v5(v3, v4);
  }
}

uint64_t sub_1001219B8()
{
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100121A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return _swift_task_switch(sub_100121A58, 0, 0);
}

uint64_t sub_100121A58()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for SnoutDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E14A0;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E47D0);
  *uint64_t v7 = v0;
  v7[1] = sub_100120138;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013E09C, v5, v8);
}

uint64_t sub_100121B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_100121BC4, 0, 0);
}

uint64_t sub_100121BC4()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for TokenDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E2260;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E2DD8);
  *uint64_t v7 = v0;
  v7[1] = sub_10011F4B4;
  uint64_t v9 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_10013EF40, v5, v8);
}

uint64_t sub_100121D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[16] = a3;
  v6[17] = a4;
  v6[14] = a1;
  v6[15] = a2;
  return _swift_task_switch(sub_100121D2C, 0, 0);
}

uint64_t sub_100121D2C()
{
  uint64_t v2 = *(void *)(v0 + 144);
  int64_t v1 = *(void **)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  *(void *)(v0 + 96) = &type metadata for RetryCountDatabaseStore;
  *(void *)(v0 + 104) = &off_1001E2530;
  *(void *)(v0 + 72) = v3;
  *(void *)(v0 + 80) = v2;
  *(void *)(v0 + 88) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 160) = v5;
  long long v6 = *(_OWORD *)(v0 + 120);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 72;
  *(_OWORD *)(v5 + 32) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E3200);
  *uint64_t v7 = v0;
  v7[1] = sub_100121E70;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100140104, v5, v8);
}

uint64_t sub_100121E70()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100122010, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 112);

    swift_task_dealloc();
    long long v8 = *(_OWORD *)(v2 + 32);
    long long v9 = *(_OWORD *)(v2 + 16);
    long long v7 = *(_OWORD *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 64);
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 72);
    *(_OWORD *)uint64_t v3 = v9;
    *(_OWORD *)(v3 + 16) = v8;
    *(_OWORD *)(v3 + 32) = v7;
    *(void *)(v3 + 48) = v4;
    uint64_t v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
}

uint64_t sub_100122010()
{
  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 72);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100122088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return _swift_task_switch(sub_1001220B0, 0, 0);
}

uint64_t sub_1001220B0()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for PostbackDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E1450;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *long long v7 = v0;
  v7[1] = sub_100120138;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100140234, v5, &type metadata for Int);
}

uint64_t sub_1001221EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return _swift_task_switch(sub_100122214, 0, 0);
}

uint64_t sub_100122214()
{
  uint64_t v2 = *(void *)(v0 + 88);
  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = &type metadata for ImpressionDatabaseStore;
  *(void *)(v0 + 48) = &off_1001E3118;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  id v4 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v0 + 16;
  *(_OWORD *)(v5 + 32) = v6;
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = sub_100012960(&qword_1001E3D38);
  *long long v7 = v0;
  v7[1] = sub_100122354;
  uint64_t v9 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, 0, 0, 0xD000000000000015, 0x80000001001869F0, sub_100140348, v5, v8);
}

uint64_t sub_100122354()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100120EA8, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v2 + 16);
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1001224B4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100122504(a1, a2, a3, a4, a5, &qword_1001E48D0, (uint64_t)&unk_1001CBC58, (uint64_t)sub_10013F070, (uint64_t)&unk_1001CBC70);
}

uint64_t sub_100122504(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v29 = a7;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v33 = a8;
  uint64_t v34 = a9;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v16 - 8);
  uint64_t v36 = v16;
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100012960(a6);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)&a2[OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_transactionQueue];
  sub_100029CD8(a3, (uint64_t)v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v19);
  unint64_t v23 = (*(unsigned __int8 *)(v20 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  long long v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = a2;
  sub_100012D60(v40, (uint64_t)(v24 + 24));
  uint64_t v25 = v31;
  *((void *)v24 + 8) = v30;
  *((void *)v24 + 9) = v25;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v24[v23], v22, v19);
  aBlock[4] = v33;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002437C;
  aBlock[3] = v34;
  long long v26 = _Block_copy(aBlock);
  long long v27 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  long long v38 = _swiftEmptyArrayStorage;
  sub_10013FAC4((unint64_t *)&qword_1001E3050, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100012960((uint64_t *)&unk_1001E0F60);
  sub_100019B64();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
  return swift_release();
}

uint64_t sub_100122898(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100122504(a1, a2, a3, a4, a5, &qword_1001E4908, (uint64_t)&unk_1001CBEB0, (uint64_t)sub_10013F37C, (uint64_t)&unk_1001CBEC8);
}

uint64_t sub_1001228E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100012960(&qword_1001E1378);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v16[-v12];
  id v14 = [objc_allocWithZone((Class)type metadata accessor for ImpressionDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_100123998(a2, v14, (uint64_t)sub_10013E98C, (uint64_t)v16, (uint64_t)v13);
  sub_100036994((uint64_t)v13, (uint64_t)v11, &qword_1001E1378);
  sub_100012960(&qword_1001E4918);
  CheckedContinuation.resume(returning:)();

  return sub_100019960((uint64_t)v13, &qword_1001E1378);
}

uint64_t sub_100122A7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)type metadata accessor for AppLaunchDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  v9[2] = a3;
  v9[3] = a4;
  sub_100124B58(a2, v7, (uint64_t)sub_10013E750, (uint64_t)v9, (uint64_t)v11);
  sub_100059F98((uint64_t)v11, (uint64_t)v10, &qword_1001E1B70);
  sub_10013E76C((uint64_t)v11);
  sub_100012960(&qword_1001E4830);
  CheckedContinuation.resume(returning:)();

  return sub_100059F2C((uint64_t)v11);
}

void sub_100122BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, uint64_t (*a8)(uint64_t, id, uint64_t, void *), uint64_t *a9)
{
  id v14 = [objc_allocWithZone((Class)a6(0)) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  v15[2] = a3;
  void v15[3] = a4;
  void v15[4] = a8(a2, v14, a7, v15);
  swift_bridgeObjectRetain();
  sub_100012960(a9);
  CheckedContinuation.resume(returning:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_100122CC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)type metadata accessor for TokenDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  v9[2] = a3;
  v9[3] = a4;
  sub_100125674(a2, v7, (uint64_t)sub_10014067C, (uint64_t)v9, (uint64_t)v11);
  sub_100059F98((uint64_t)v11, (uint64_t)v10, &qword_1001E2F10);
  sub_1001401A4((uint64_t)v11);
  sub_100012960(&qword_1001E4948);
  CheckedContinuation.resume(returning:)();

  return sub_1000B74C4((uint64_t)v11);
}

uint64_t sub_100122DEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100012960(&qword_1001E3A68);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v16[-v12];
  id v14 = [objc_allocWithZone((Class)type metadata accessor for SnoutDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1001258D8(a2, v14, (uint64_t)sub_10014069C, (uint64_t)v16, (uint64_t)v13);
  sub_100036994((uint64_t)v13, (uint64_t)v11, &qword_1001E3A68);
  sub_100012960(&qword_1001E4768);
  CheckedContinuation.resume(returning:)();

  return sub_100019960((uint64_t)v13, &qword_1001E3A68);
}

void sub_100122F80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)type metadata accessor for ImpressionDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  void v8[2] = a3;
  void v8[3] = a4;
  LOBYTE(v9) = sub_100126208(a2, v7, (uint64_t)sub_10013F39C, (uint64_t)v8) & 1;
  sub_100012960(&qword_1001E4908);
  CheckedContinuation.resume(returning:)();
}

void sub_100123088(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)type metadata accessor for AppMetadataDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  v9[2] = a3;
  v9[3] = a4;
  void v9[5] = sub_100126434(a2, v7, (uint64_t)sub_10013FB90, (uint64_t)v9);
  char v10 = v8 & 1;
  sub_100012960(&qword_1001E4980);
  CheckedContinuation.resume(returning:)();
}

uint64_t sub_100123194(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)type metadata accessor for TokenDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  sub_100126890(a2, v7, (uint64_t)sub_10013E98C, (uint64_t)v13, (uint64_t)&v30);
  uint64_t v8 = v33;
  uint64_t v16 = v30;
  uint64_t v17 = v31;
  uint64_t v10 = v30;
  uint64_t v11 = v32;
  uint64_t v12 = v31;
  uint64_t v18 = v32;
  uint64_t v19 = v33;
  uint64_t v20 = v34;
  uint64_t v21 = v35;
  uint64_t v22 = v36;
  uint64_t v23 = v37;
  uint64_t v24 = v38;
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  uint64_t v27 = v41;
  char v29 = v43;
  __int16 v28 = v42;
  sub_1001036B8(v30, v31, v32, v33);
  sub_100012960(&qword_1001E48C0);
  CheckedContinuation.resume(returning:)();

  return sub_10004EC7C(v10, v12, v11, v8);
}

uint64_t sub_100123348(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)type metadata accessor for RetryCountDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  v9[2] = a3;
  v9[3] = a4;
  sub_100126B54(a2, v7, (uint64_t)sub_100140188, (uint64_t)v9, (uint64_t)v11);
  sub_100059F98((uint64_t)v11, (uint64_t)v10, &qword_1001E3200);
  sub_1001401A4((uint64_t)v11);
  sub_100012960(&qword_1001E49E0);
  CheckedContinuation.resume(returning:)();

  return sub_1000B74C4((uint64_t)v11);
}

void sub_100123470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, uint64_t (*a8)(uint64_t, id, uint64_t, void *))
{
  id v13 = [objc_allocWithZone((Class)a6(0)) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  id v14[2] = a3;
  void v14[3] = a4;
  void v14[4] = a8(a2, v13, a7, v14);
  sub_100012960(&qword_1001E48D0);
  CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012357C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)type metadata accessor for ImpressionDatabaseSession()) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  sub_100126FE0(a2, v7, (uint64_t)sub_10013E98C, (uint64_t)v18, (uint64_t)&v30);
  uint64_t v8 = v30;
  uint64_t v9 = v31;
  uint64_t v10 = v32;
  unint64_t v11 = v33;
  uint64_t v12 = v34;
  unint64_t v13 = v35;
  uint64_t v14 = v36;
  uint64_t v15 = v38;
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  uint64_t v23 = v32;
  unint64_t v24 = v33;
  uint64_t v25 = v34;
  unint64_t v26 = v35;
  uint64_t v27 = v36;
  uint64_t v28 = v37;
  uint64_t v29 = v38;
  uint64_t v17 = v37;
  sub_1001037C4(v30, v31, v32, v33, v34, v35, v36, v37, v38);
  sub_100012960((uint64_t *)&unk_1001E4A10);
  CheckedContinuation.resume(returning:)();

  return sub_10008F6B0(v8, v9, v10, v11, v12, v13, v14, v17, v15);
}

uint64_t sub_100123704(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100122504(a1, a2, a3, a4, a5, &qword_1001E47A8, (uint64_t)&unk_1001CB6B8, (uint64_t)sub_10013E7D8, (uint64_t)&unk_1001CB6D0);
}

uint64_t sub_100123754(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100122504(a1, a2, a3, a4, a5, &qword_1001E47A8, (uint64_t)&unk_1001CB848, (uint64_t)sub_10013EA54, (uint64_t)&unk_1001CB860);
}

uint64_t sub_1001237A4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100122504(a1, a2, a3, a4, a5, &qword_1001E47A8, (uint64_t)&unk_1001CB3C0, (uint64_t)sub_10013DD6C, (uint64_t)&unk_1001CB3D8);
}

uint64_t sub_1001237F4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100122504(a1, a2, a3, a4, a5, &qword_1001E47A8, (uint64_t)&unk_1001CBD20, (uint64_t)sub_10013F154, (uint64_t)&unk_1001CBD38);
}

uint64_t sub_100123844(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100122504(a1, a2, a3, a4, a5, &qword_1001E47A8, (uint64_t)&unk_1001CC590, (uint64_t)sub_10013FD64, (uint64_t)&unk_1001CC5A8);
}

void sub_100123894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, void (*a8)(uint64_t, id, uint64_t, void *))
{
  id v13 = [objc_allocWithZone((Class)a6(0)) initWithConnection:*(void *)(a1 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection)];
  id v14[2] = a3;
  void v14[3] = a4;
  a8(a2, v13, a7, v14);
  sub_100012960(&qword_1001E47A8);
  CheckedContinuation.resume(returning:)();
}

void sub_100123998(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v11 = sub_100012960(&qword_1001E4920);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v28 - v15);
  sub_100052048(a1, 0);
  if (!v6)
  {
    uint64_t v29 = a5;
    uint64_t v17 = @"AKSQLErrorDomain";
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = AKErrorWithDescription(v17, 7, v18);
    uint64_t v31 = a3;
    uint64_t v20 = a2;
    id v21 = v19;

    *uint64_t v16 = v21;
    uint64_t v30 = v11;
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = *(void *)(v5 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v33;
    v23[2] = v31;
    void v23[3] = v24;
    v23[4] = v20;
    v23[5] = v16;
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = sub_10013F494;
    *(void *)(v25 + 24) = v23;
    aBlock[4] = sub_1001404F8;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100127260;
    aBlock[3] = &unk_1001CC008;
    unint64_t v26 = _Block_copy(aBlock);
    id v27 = v20;
    swift_retain();
    swift_release();
    sub_1000099D0(v22, v26);
    _Block_release(v26);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v17)
    {
      __break(1u);
    }
    else
    {
      sub_100036994((uint64_t)v16, (uint64_t)v14, &qword_1001E4920);
      if (swift_getEnumCaseMultiPayload() == 1) {
        swift_willThrow();
      }
      else {
        sub_100059F98((uint64_t)v14, v29, &qword_1001E1378);
      }
      sub_100019960((uint64_t)v16, &qword_1001E4920);
      swift_release();
    }
  }
}

void sub_100123C8C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (!v5)
  {
    uint64_t v9 = @"AKSQLErrorDomain";
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = AKErrorWithDescription(v9, 7, v10);

    uint64_t v19 = (uint64_t)v11;
    char v20 = 1;
    uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a3;
    v13[3] = a4;
    void v13[4] = a2;
    v13[5] = &v19;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_10013E9B8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_1001404F8;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100127260;
    v18[3] = &unk_1001CB810;
    uint64_t v15 = _Block_copy(v18);
    id v16 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v20 == 1)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013F404(v19, v20);
      }
      swift_release();
    }
  }
}

uint64_t sub_100123EA4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  uint64_t v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v21 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10013F110;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1001404F8;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CBCE8;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v21 == 1)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F404((uint64_t)v20, v21);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

void sub_1001240D0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (!v5)
  {
    uint64_t v9 = @"AKSQLErrorDomain";
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = AKErrorWithDescription(v9, 7, v10);

    uint64_t v19 = (uint64_t)v11;
    char v20 = 1;
    uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a3;
    v13[3] = a4;
    void v13[4] = a2;
    v13[5] = &v19;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1001406B8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_1001404F8;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100127260;
    v18[3] = &unk_1001CBB58;
    uint64_t v15 = _Block_copy(v18);
    id v16 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v20 == 1)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013F404(v19, v20);
      }
      swift_release();
    }
  }
}

void sub_1001242E8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (!v5)
  {
    uint64_t v9 = @"AKSQLErrorDomain";
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = AKErrorWithDescription(v9, 7, v10);

    uint64_t v19 = (uint64_t)v11;
    char v20 = 1;
    uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a3;
    v13[3] = a4;
    void v13[4] = a2;
    v13[5] = &v19;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1001406B8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_1001404F8;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100127260;
    v18[3] = &unk_1001CB748;
    uint64_t v15 = _Block_copy(v18);
    id v16 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v20 == 1)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013F404(v19, v20);
      }
      swift_release();
    }
  }
}

uint64_t sub_100124500(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  uint64_t v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v21 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001406B4;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1001404F8;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CB9A0;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F878((uint64_t)v20, v21);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

void sub_100124728(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (!v5)
  {
    uint64_t v9 = @"AKSQLErrorDomain";
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = AKErrorWithDescription(v9, 7, v10);

    uint64_t v19 = (uint64_t)v11;
    char v20 = 1;
    uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a3;
    v13[3] = a4;
    void v13[4] = a2;
    v13[5] = &v19;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1001406B8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_1001404F8;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100127260;
    v18[3] = &unk_1001CB8D8;
    uint64_t v15 = _Block_copy(v18);
    id v16 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v20 == 1)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013F404(v19, v20);
      }
      swift_release();
    }
  }
}

void sub_100124940(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (!v5)
  {
    uint64_t v9 = @"AKSQLErrorDomain";
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = AKErrorWithDescription(v9, 7, v10);

    uint64_t v19 = (uint64_t)v11;
    char v20 = 1;
    uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a3;
    v13[3] = a4;
    void v13[4] = a2;
    v13[5] = &v19;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1001406B8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_1001404F8;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100127260;
    v18[3] = &unk_1001CC0D0;
    uint64_t v15 = _Block_copy(v18);
    id v16 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v20 == 1)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013F404(v19, v20);
      }
      swift_release();
    }
  }
}

void sub_100124B58(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_100052048(a1, 0);
  if (!v6)
  {
    id v11 = @"AKSQLErrorDomain";
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = AKErrorWithDescription(v11, 7, v12);

    uint64_t v26 = (uint64_t)v13;
    char v31 = 1;
    uint64_t v14 = *(void *)(v5 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a3;
    void v15[3] = a4;
    void v15[4] = a2;
    void v15[5] = &v26;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_10013E798;
    *(void *)(v16 + 24) = v15;
    aBlock[4] = sub_1001404F8;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100127260;
    aBlock[3] = &unk_1001CB680;
    uint64_t v17 = _Block_copy(aBlock);
    id v18 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v14, v17);
    _Block_release(v17);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = v26;
      if (v31 == 1)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013E7B8(v26, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30, v31);
        swift_release();
      }
      else
      {
        uint64_t v21 = v30;
        long long v23 = v28;
        long long v24 = v29;
        long long v22 = v27;
        swift_release();
        *(void *)a5 = v20;
        *(_OWORD *)(a5 + 8) = v22;
        *(_OWORD *)(a5 + 24) = v23;
        *(_OWORD *)(a5 + 40) = v24;
        *(void *)(a5 + 56) = v21;
      }
    }
  }
}

uint64_t sub_100124DD4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  uint64_t v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v21 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  id v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001406B4;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1001404F8;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CBE78;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F878((uint64_t)v20, v21);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_100124FFC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  uint64_t v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v21 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  id v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001406B4;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_10013D8CC;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CB1D0;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F878((uint64_t)v20, v21);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_100125224(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  uint64_t v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v21 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  id v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001406B4;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1001404F8;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CC2D8;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F878((uint64_t)v20, v21);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_10012544C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  uint64_t v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v21 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  id v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10013EDF4;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1001404F8;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CBA90;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F878((uint64_t)v20, v21);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

void sub_100125674(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_100052048(a1, 0);
  if (!v6)
  {
    id v11 = @"AKSQLErrorDomain";
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = AKErrorWithDescription(v11, 7, v12);

    uint64_t v26 = (uint64_t)v13;
    char v31 = 1;
    uint64_t v14 = *(void *)(v5 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a3;
    void v15[3] = a4;
    void v15[4] = a2;
    void v15[5] = &v26;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_1001406BC;
    *(void *)(v16 + 24) = v15;
    aBlock[4] = sub_1001404F8;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100127260;
    aBlock[3] = &unk_1001CC210;
    uint64_t v17 = _Block_copy(aBlock);
    id v18 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v14, v17);
    _Block_release(v17);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = v26;
      if (v31)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_100140208(v26, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29, v30, v31);
        swift_release();
      }
      else
      {
        uint64_t v22 = v29;
        uint64_t v21 = v30;
        long long v23 = v27;
        long long v24 = v28;
        swift_release();
        *(void *)a5 = v20;
        *(_OWORD *)(a5 + 8) = v23;
        *(_OWORD *)(a5 + 24) = v24;
        *(void *)(a5 + 40) = v22;
        *(void *)(a5 + 48) = v21;
      }
    }
  }
}

void sub_1001258D8(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v11 = sub_100012960(&qword_1001E4770);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v28 - v15);
  sub_100052048(a1, 0);
  if (!v6)
  {
    uint64_t v29 = a5;
    uint64_t v17 = @"AKSQLErrorDomain";
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = AKErrorWithDescription(v17, 7, v18);
    uint64_t v31 = a3;
    uint64_t v20 = a2;
    id v21 = v19;

    *uint64_t v16 = v21;
    uint64_t v30 = v11;
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = *(void *)(v5 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    long long v23 = (void *)swift_allocObject();
    uint64_t v24 = v33;
    v23[2] = v31;
    void v23[3] = v24;
    v23[4] = v20;
    v23[5] = v16;
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = sub_10013D9E0;
    *(void *)(v25 + 24) = v23;
    aBlock[4] = sub_1001404F8;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100127260;
    aBlock[3] = &unk_1001CB2E8;
    uint64_t v26 = _Block_copy(aBlock);
    id v27 = v20;
    swift_retain();
    swift_release();
    sub_1000099D0(v22, v26);
    _Block_release(v26);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v17)
    {
      __break(1u);
    }
    else
    {
      sub_100036994((uint64_t)v16, (uint64_t)v14, &qword_1001E4770);
      if (swift_getEnumCaseMultiPayload() == 1) {
        swift_willThrow();
      }
      else {
        sub_100059F98((uint64_t)v14, v29, &qword_1001E3A68);
      }
      sub_100019960((uint64_t)v16, &qword_1001E4770);
      swift_release();
    }
  }
}

void sub_100125BCC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (!v5)
  {
    uint64_t v9 = @"AKSQLErrorDomain";
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = AKErrorWithDescription(v9, 7, v10);

    uint64_t v19 = (uint64_t)v11;
    char v20 = 1;
    uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a3;
    v13[3] = a4;
    void v13[4] = a2;
    v13[5] = &v19;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1001406B8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_1001404F8;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100127260;
    v18[3] = &unk_1001CB450;
    uint64_t v15 = _Block_copy(v18);
    id v16 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v20)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013F404(v19, v20);
      }
      swift_release();
    }
  }
}

void sub_100125DE0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (!v5)
  {
    uint64_t v9 = @"AKSQLErrorDomain";
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = AKErrorWithDescription(v9, 7, v10);

    uint64_t v19 = (uint64_t)v11;
    char v20 = 1;
    uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a3;
    v13[3] = a4;
    void v13[4] = a2;
    v13[5] = &v19;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1001406B8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_1001404F8;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100127260;
    v18[3] = &unk_1001CBDB0;
    uint64_t v15 = _Block_copy(v18);
    id v16 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v20)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013F404(v19, v20);
      }
      swift_release();
    }
  }
}

void sub_100125FF4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (!v5)
  {
    uint64_t v9 = @"AKSQLErrorDomain";
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = AKErrorWithDescription(v9, 7, v10);

    uint64_t v19 = (uint64_t)v11;
    char v20 = 1;
    uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a3;
    v13[3] = a4;
    void v13[4] = a2;
    v13[5] = &v19;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_1001406B8;
    *(void *)(v14 + 24) = v13;
    v18[4] = sub_1001404F8;
    v18[5] = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100127260;
    v18[3] = &unk_1001CC620;
    uint64_t v15 = _Block_copy(v18);
    id v16 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v12, v15);
    _Block_release(v15);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      if (v20)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013F404(v19, v20);
      }
      swift_release();
    }
  }
}

uint64_t sub_100126208(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return v9 & 1;
  }
  NSString v10 = @"AKSQLErrorDomain";
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = AKErrorWithDescription(v10, 7, v11);

  uint64_t v22 = (uint64_t)v12;
  char v23 = 1;
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  uint64_t v14 = (void *)swift_allocObject();
  id v14[2] = a3;
  void v14[3] = a4;
  void v14[4] = a2;
  void v14[5] = &v22;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_10013F3E4;
  *(void *)(v15 + 24) = v14;
  void v21[4] = sub_1001404F8;
  v21[5] = v15;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_100127260;
  v21[3] = &unk_1001CBF40;
  id v16 = _Block_copy(v21);
  id v17 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v13, v16);
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    char v20 = v22;
    if (v23)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F404(v22, v23);
      swift_release();
    }
    else
    {
      swift_release();
      char v9 = v20 & 1;
    }
    return v9 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100126434(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  char v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v22 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10013FBE0;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1001404F8;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CC508;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v22)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013FC00((uint64_t)v20, v21, v22);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_100126668(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  char v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v21 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001406B4;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1001404F8;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CB540;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F878((uint64_t)v20, v21);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

void sub_100126890(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_100052048(a1, 0);
  if (!v6)
  {
    id v11 = @"AKSQLErrorDomain";
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = AKErrorWithDescription(v11, 7, v12);

    uint64_t v30 = (uint64_t)v13;
    char v39 = 1;
    uint64_t v14 = *(void *)(v5 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a3;
    void v15[3] = a4;
    void v15[4] = a2;
    void v15[5] = &v30;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_10013EFC4;
    *(void *)(v16 + 24) = v15;
    aBlock[4] = sub_1001404F8;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100127260;
    aBlock[3] = &unk_1001CBC20;
    id v17 = _Block_copy(aBlock);
    id v18 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v14, v17);
    _Block_release(v17);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = v30;
      if (v39)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_10013EFE4(v30, v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37 | (v38 << 16), v39);
        swift_release();
      }
      else
      {
        unsigned __int16 v21 = v37;
        unsigned __int8 v22 = v38;
        uint64_t v23 = v36;
        long long v27 = v34;
        long long v28 = v35;
        long long v25 = v32;
        long long v26 = v33;
        long long v24 = v31;
        swift_release();
        *(void *)a5 = v20;
        *(_OWORD *)(a5 + 8) = v24;
        *(_OWORD *)(a5 + 24) = v25;
        *(_OWORD *)(a5 + 40) = v26;
        *(_OWORD *)(a5 + 56) = v27;
        *(_OWORD *)(a5 + 72) = v28;
        *(void *)(a5 + 88) = v23;
        *(unsigned char *)(a5 + 98) = v22;
        *(_WORD *)(a5 + 96) = v21;
      }
    }
  }
}

void sub_100126B54(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_100052048(a1, 0);
  if (!v6)
  {
    id v11 = @"AKSQLErrorDomain";
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = AKErrorWithDescription(v11, 7, v12);

    uint64_t v26 = (uint64_t)v13;
    char v31 = 1;
    uint64_t v14 = *(void *)(v5 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a3;
    void v15[3] = a4;
    void v15[4] = a2;
    void v15[5] = &v26;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_1001401D0;
    *(void *)(v16 + 24) = v15;
    aBlock[4] = sub_1001404F8;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100127260;
    aBlock[3] = &unk_1001CCA70;
    id v17 = _Block_copy(aBlock);
    id v18 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v14, v17);
    _Block_release(v17);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = v26;
      if (v31)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_100140208(v26, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29, v30, v31);
        swift_release();
      }
      else
      {
        uint64_t v22 = v29;
        uint64_t v21 = v30;
        long long v23 = v27;
        long long v24 = v28;
        swift_release();
        *(void *)a5 = v20;
        *(_OWORD *)(a5 + 8) = v23;
        *(_OWORD *)(a5 + 24) = v24;
        *(void *)(a5 + 40) = v22;
        *(void *)(a5 + 48) = v21;
      }
    }
  }
}

uint64_t sub_100126DB8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100052048(a1, 0);
  if (v5) {
    return (uint64_t)a2;
  }
  char v9 = @"AKSQLErrorDomain";
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = AKErrorWithDescription(v9, 7, v10);

  id v20 = v11;
  char v21 = 1;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
  id v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  v13[5] = &v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001406C0;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1001404F8;
  void v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100127260;
  void v19[3] = &unk_1001CCBB0;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  swift_retain();
  swift_release();
  sub_1000099D0(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    a2 = v20;
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
      sub_10013F404((uint64_t)v20, v21);
    }
    swift_release();
    return (uint64_t)a2;
  }
  __break(1u);
  return result;
}

void sub_100126FE0(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_100052048(a1, 0);
  if (!v6)
  {
    id v11 = @"AKSQLErrorDomain";
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = AKErrorWithDescription(v11, 7, v12);

    uint64_t v27 = (uint64_t)v13;
    char v33 = 1;
    uint64_t v14 = *(void *)(v5 + OBJC_IVAR____TtC20AttributionKitDaemon14SQLiteDatabase_connection);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a3;
    void v15[3] = a4;
    void v15[4] = a2;
    void v15[5] = &v27;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_1001404A4;
    *(void *)(v16 + 24) = v15;
    aBlock[4] = sub_1001404F8;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100127260;
    aBlock[3] = &unk_1001CCC78;
    id v17 = _Block_copy(aBlock);
    id v18 = a2;
    swift_retain();
    swift_release();
    sub_1000099D0(v14, v17);
    _Block_release(v17);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = v27;
      if (v33)
      {
        swift_errorRetain();
        swift_willThrow();
        sub_1001404C4(v27, v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30, *((uint64_t *)&v30 + 1), v31, v32, v33);
        swift_release();
      }
      else
      {
        uint64_t v22 = v31;
        uint64_t v21 = v32;
        long long v24 = v29;
        long long v25 = v30;
        long long v23 = v28;
        swift_release();
        *(void *)a5 = v20;
        *(_OWORD *)(a5 + 8) = v23;
        *(_OWORD *)(a5 + 24) = v24;
        *(_OWORD *)(a5 + 40) = v25;
        *(void *)(a5 + 56) = v22;
        *(void *)(a5 + 64) = v21;
      }
    }
  }
}

uint64_t sub_100127260(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))() & 1;
}

uint64_t sub_10012728C(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  return sub_1001272D4(a1, a2, a3, a4, &qword_1001E3A68, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
}

uint64_t sub_1001272B0(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  return sub_1001272D4(a1, a2, a3, a4, &qword_1001E1378, (uint64_t (*)(void))type metadata accessor for ImpressionModel, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
}

uint64_t sub_1001272D4(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  sub_100019960(a4, a5);
  sub_10013EC80(a1, a4, a6);
  uint64_t v12 = a7(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a4, 0, 1, v12);
  *a3 = 1;
  return result;
}

uint64_t sub_10012737C(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v5 = JSONDecoder.init()();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 4, 0);
  uint64_t v6 = _swiftEmptyArrayStorage;
  unint64_t v8 = _swiftEmptyArrayStorage[2];
  unint64_t v7 = _swiftEmptyArrayStorage[3];
  unint64_t v9 = v8 + 1;
  if (v8 >= v7 >> 1)
  {
    sub_10013A5D0(v7 > 1, v8 + 1, 1);
    uint64_t v6 = (void *)aBlock[0];
  }
  _OWORD v6[2] = v9;
  NSString v10 = &v6[2 * v8];
  v10[4] = 0x696669746E656469;
  v10[5] = 0xEA00000000007265;
  aBlock[0] = v6;
  unint64_t v11 = v6[3];
  int64_t v12 = v8 + 2;
  if (v9 >= v11 >> 1)
  {
    sub_10013A5D0(v11 > 1, v12, 1);
    uint64_t v6 = (void *)aBlock[0];
  }
  _OWORD v6[2] = v12;
  id v13 = &v6[2 * v9];
  void v13[4] = 0x616E5F70756F7267;
  v13[5] = 0xEA0000000000656DLL;
  aBlock[0] = v6;
  unint64_t v15 = v6[2];
  unint64_t v14 = v6[3];
  unint64_t v16 = v15 + 1;
  if (v15 >= v14 >> 1)
  {
    sub_10013A5D0(v14 > 1, v15 + 1, 1);
    uint64_t v6 = (void *)aBlock[0];
  }
  _OWORD v6[2] = v16;
  id v17 = &v6[2 * v15];
  void v17[4] = 0x6F635F7972746572;
  void v17[5] = 0xEB00000000746E75;
  aBlock[0] = v6;
  unint64_t v18 = v6[3];
  int64_t v19 = v15 + 2;
  if (v16 >= v18 >> 1)
  {
    sub_10013A5D0(v18 > 1, v19, 1);
    uint64_t v6 = (void *)aBlock[0];
  }
  _OWORD v6[2] = v19;
  uint64_t v20 = &v6[2 * v16];
  v20[4] = 0xD000000000000016;
  v20[5] = 0x8000000100184840;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v5;
  v22[3] = a1;
  v22[4] = a2;
  v22[5] = &v29;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_100140218;
  *(void *)(v23 + 24) = v22;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CCAE8;
  long long v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v24];

  _Block_release(v24);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x1001278ECLL);
  }
  if (v29)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_10012792C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v34 = 0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v6 = 8;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = JSONDecoder.init()();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 8, 0);
  unint64_t v7 = _swiftEmptyArrayStorage;
  unint64_t v8 = (unint64_t)"x-responding-instance";
  unint64_t v9 = 0xD000000000000010;
  unint64_t v10 = (unint64_t)"id";
  unint64_t v11 = (unint64_t)"is_story_sampled";
  int64_t v12 = &byte_1001BF8D8;
  do
  {
    int v13 = *v12++;
    unint64_t v14 = 0xE800000000000000;
    unint64_t v15 = 0x64695F79726F7473;
    switch(v13)
    {
      case 1:
        unint64_t v15 = 0xD000000000000012;
        unint64_t v14 = v8 | 0x8000000000000000;
        break;
      case 2:
        unint64_t v14 = 0xED000064695F6E6FLL;
        unint64_t v15 = 0x69737265766E6F63;
        break;
      case 3:
        unint64_t v14 = v10 | 0x8000000000000000;
        unint64_t v15 = v9;
        break;
      case 4:
        unint64_t v14 = v11 | 0x8000000000000000;
        goto LABEL_9;
      case 5:
        unint64_t v14 = 0xEE0073746E657665;
        unint64_t v15 = 0x5F676E69646E6570;
        break;
      case 6:
        unint64_t v14 = 0x80000001001847E0;
LABEL_9:
        unint64_t v15 = 0xD000000000000011;
        break;
      case 7:
        unint64_t v15 = 0xD000000000000017;
        unint64_t v14 = 0x8000000100184800;
        break;
      default:
        break;
    }
    aBlock[0] = v7;
    unint64_t v17 = v7[2];
    unint64_t v16 = v7[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v27 = v9;
      long long v28 = (const char *)v8;
      long long v25 = (const char *)v11;
      uint64_t v26 = (char *)v10;
      sub_10013A5D0(v16 > 1, v17 + 1, 1);
      unint64_t v11 = (unint64_t)v25;
      unint64_t v10 = (unint64_t)v26;
      unint64_t v9 = v27;
      unint64_t v8 = (unint64_t)v28;
      unint64_t v7 = (void *)aBlock[0];
    }
    _OWORD v7[2] = v17 + 1;
    unint64_t v18 = &v7[2 * v17];
    v18[4] = v15;
    v18[5] = v14;
    --v6;
  }
  while (v6);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = v32;
  v20[3] = v29;
  v20[4] = v30;
  v20[5] = &v34;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10013DA64;
  *(void *)(v21 + 24) = v20;
  aBlock[4] = sub_10013DA80;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CB360;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v31 enumeratePersistentIDsAndProperties:isa usingBlock:v22];

  _Block_release(v22);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x100127CECLL);
  }
  if (v34)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_100127D0C(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v6 = JSONDecoder.init()();
  v17[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 1, 0);
  unint64_t v7 = _swiftEmptyArrayStorage;
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  if (v9 >= v8 >> 1)
  {
    sub_10013A5D0(v8 > 1, v9 + 1, 1);
    unint64_t v7 = (void *)v17[0];
  }
  _OWORD v7[2] = v9 + 1;
  unint64_t v10 = &v7[2 * v9];
  v10[4] = 0x76655F74756F6E73;
  v10[5] = 0xEB00000000746E65;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  int64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = v6;
  v12[3] = a1;
  v12[4] = a2;
  v12[5] = &v18;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10013FE84;
  *(void *)(v13 + 24) = v12;
  void v17[4] = sub_1001404FC;
  void v17[5] = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  _OWORD v17[2] = sub_10012D790;
  v17[3] = &unk_1001CC878;
  unint64_t v14 = _Block_copy(v17);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v14];

  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    if (v18)
    {
      swift_errorRetain();
      swift_willThrow();
    }
    swift_release();
    swift_errorRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_100127F94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = 0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v6 = 9;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = JSONDecoder.init()();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 9, 0);
  unint64_t v7 = 0xD000000000000011;
  unint64_t v8 = _swiftEmptyArrayStorage;
  unint64_t v9 = (unint64_t)"";
  unint64_t v10 = (unint64_t)"x-responding-instance";
  unint64_t v11 = (unint64_t)"publisher_item_id";
  int64_t v12 = &byte_1001C0068;
  do
  {
    int v13 = *v12++;
    unint64_t v14 = 0xED000064695F6E6FLL;
    unint64_t v15 = 0x6973736572706D69;
    switch(v13)
    {
      case 1:
        unint64_t v14 = v9 | 0x8000000000000000;
        unint64_t v15 = v7;
        break;
      case 2:
        unint64_t v14 = v10 | 0x8000000000000000;
        goto LABEL_10;
      case 3:
        unint64_t v15 = 0x6F7774656E5F6461;
        unint64_t v14 = 0xED000064695F6B72;
        break;
      case 4:
        unint64_t v14 = 0xE900000000000070;
        unint64_t v15 = 0x6D617473656D6974;
        break;
      case 5:
        unint64_t v15 = 0xD000000000000010;
        unint64_t v14 = v11 | 0x8000000000000000;
        break;
      case 6:
        unint64_t v14 = 0xEB0000000073776ALL;
        unint64_t v15 = 0x5F746361706D6F63;
        break;
      case 7:
        unint64_t v14 = 0x8000000100184CF0;
LABEL_10:
        unint64_t v15 = 0xD000000000000012;
        break;
      case 8:
        unint64_t v14 = 0xEB00000000746E65;
        unint64_t v15 = 0x6D6E6F7269766E65;
        break;
      default:
        break;
    }
    aBlock[0] = v8;
    unint64_t v17 = v8[2];
    unint64_t v16 = v8[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v27 = (char *)v9;
      unint64_t v28 = v7;
      long long v25 = (const char *)v11;
      uint64_t v26 = (const char *)v10;
      sub_10013A5D0(v16 > 1, v17 + 1, 1);
      unint64_t v11 = (unint64_t)v25;
      unint64_t v10 = (unint64_t)v26;
      unint64_t v9 = (unint64_t)v27;
      unint64_t v7 = v28;
      unint64_t v8 = (void *)aBlock[0];
    }
    void v8[2] = v17 + 1;
    uint64_t v18 = &v8[2 * v17];
    v18[4] = v15;
    v18[5] = v14;
    --v6;
  }
  while (v6);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = v31;
  v20[3] = v29;
  v20[4] = v30;
  v20[5] = &v33;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10013FAA8;
  *(void *)(v21 + 24) = v20;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CC440;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v22];

  _Block_release(v22);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x100128380);
  }
  if (v33)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1001283A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v28 = 0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v6 = JSONDecoder.init()();
  uint64_t v7 = 25;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 25, 0);
  unint64_t v8 = &byte_1001C05A8;
  unint64_t v9 = _swiftEmptyArrayStorage;
  do
  {
    int v10 = *v8++;
    unint64_t v11 = 0xEE0064695F656361;
    unint64_t v12 = 0x6C7074656B72616DLL;
    switch(v10)
    {
      case 1:
        unint64_t v11 = 0xEB0000000064695FLL;
        goto LABEL_14;
      case 2:
        unint64_t v12 = 0xD000000000000012;
        int v13 = "advertised_item_id";
        goto LABEL_30;
      case 3:
        unint64_t v12 = 0xD000000000000011;
        int v13 = "publisher_item_id";
        goto LABEL_30;
      case 4:
        unint64_t v12 = 0x6F7774656E5F6461;
        unint64_t v11 = 0xED000064695F6B72;
        break;
      case 5:
        unint64_t v14 = "interaction_type";
        goto LABEL_18;
      case 6:
        unint64_t v12 = 0xD000000000000015;
        int v13 = "conversion_value_tier";
        goto LABEL_30;
      case 7:
        unint64_t v11 = 0xEF657079745F6E6FLL;
        goto LABEL_27;
      case 8:
        unint64_t v12 = 0xD000000000000015;
        int v13 = "fine_conversion_value";
        goto LABEL_30;
      case 9:
        unint64_t v12 = 0xD000000000000017;
        int v13 = "coarse_conversion_value";
        goto LABEL_30;
      case 10:
        unint64_t v12 = 0xD000000000000011;
        int v13 = "source_identifier";
        goto LABEL_30;
      case 11:
        unint64_t v11 = 0xEC0000006C72755FLL;
LABEL_14:
        unint64_t v12 = 0x6B63616274736F70;
        break;
      case 12:
        unint64_t v11 = 0xEB0000000073776ALL;
        unint64_t v12 = 0x5F746361706D6F63;
        break;
      case 13:
        unint64_t v12 = 0xD000000000000012;
        int v13 = "creation_timestamp";
        goto LABEL_30;
      case 14:
        unint64_t v14 = "origin_timestamp";
LABEL_18:
        unint64_t v11 = (unint64_t)(v14 - 32) | 0x8000000000000000;
        unint64_t v12 = 0xD000000000000010;
        break;
      case 15:
        unint64_t v11 = 0xEE00706D61747365;
        unint64_t v12 = 0x6D69745F6B636F6CLL;
        break;
      case 16:
        unint64_t v12 = 0xD000000000000016;
        int v13 = "transmission_timestamp";
        goto LABEL_30;
      case 17:
        unint64_t v11 = 0xE700000000000000;
        unint64_t v12 = 0x6E69775F646964;
        break;
      case 18:
        unint64_t v11 = 0xEE007865646E695FLL;
        unint64_t v12 = 0x65636E6575716573;
        break;
      case 19:
        unint64_t v11 = 0xE900000000000064;
        unint64_t v12 = 0x656B636F6C5F7369;
        break;
      case 20:
        unint64_t v11 = 0xEA00000000006465;
        unint64_t v12 = 0x7265747369676572;
        break;
      case 21:
        unint64_t v12 = 0xD000000000000014;
        int v13 = "postback_destination";
        goto LABEL_30;
      case 22:
        unint64_t v11 = 0xED000064695F6E6FLL;
LABEL_27:
        unint64_t v12 = 0x69737265766E6F63;
        break;
      case 23:
        unint64_t v11 = 0xEB00000000746E65;
        unint64_t v12 = 0x6D6E6F7269766E65;
        break;
      case 24:
        unint64_t v12 = 0xD000000000000014;
        int v13 = "conversion_timestamp";
LABEL_30:
        unint64_t v11 = (unint64_t)(v13 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    aBlock[0] = v9;
    unint64_t v16 = v9[2];
    unint64_t v15 = v9[3];
    if (v16 >= v15 >> 1)
    {
      sub_10013A5D0(v15 > 1, v16 + 1, 1);
      unint64_t v9 = (void *)aBlock[0];
    }
    v9[2] = v16 + 1;
    unint64_t v17 = &v9[2 * v16];
    void v17[4] = v12;
    void v17[5] = v11;
    --v7;
  }
  while (v7);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  int64_t v19 = (void *)swift_allocObject();
  v19[2] = v6;
  void v19[3] = v24;
  v19[4] = v25;
  void v19[5] = &v28;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_10013FE68;
  *(void *)(v20 + 24) = v19;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CC800;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v26 enumeratePersistentIDsAndProperties:isa usingBlock:v21];

  _Block_release(v21);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x1001288D8);
  }
  if (v28)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_10012893C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v25 = 0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v6 = JSONDecoder.init()();
  uint64_t v7 = 9;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 9, 0);
  unint64_t v8 = &byte_1001C0610;
  unint64_t v9 = _swiftEmptyArrayStorage;
  do
  {
    int v10 = *v8++;
    unint64_t v11 = 0xED000064695F6E6FLL;
    unint64_t v12 = 0x69737265766E6F63;
    switch(v10)
    {
      case 1:
        unint64_t v11 = 0x8000000100184760;
        unint64_t v12 = 0xD000000000000012;
        break;
      case 2:
        unint64_t v11 = 0xED00007475706E69;
        unint64_t v12 = 0x5F65746176697270;
        break;
      case 3:
        unint64_t v11 = 0xEF6E656B6F745F64;
        unint64_t v12 = 0x657A696C616E6966;
        break;
      case 4:
        unint64_t v11 = 0xE900000000000070;
        unint64_t v12 = 0x6D617473656D6974;
        break;
      case 5:
        unint64_t v11 = 0xEB00000000657461;
        unint64_t v12 = 0x6369666974726563;
        break;
      case 6:
        unint64_t v11 = 0xEF657079745F6E6FLL;
        break;
      case 7:
        unint64_t v11 = 0xEB00000000746E65;
        unint64_t v12 = 0x6D6E6F7269766E65;
        break;
      case 8:
        unint64_t v11 = 0xEC00000064657461;
        unint64_t v12 = 0x636F6C6C615F7369;
        break;
      default:
        break;
    }
    aBlock[0] = v9;
    unint64_t v14 = v9[2];
    unint64_t v13 = v9[3];
    if (v14 >= v13 >> 1)
    {
      sub_10013A5D0(v13 > 1, v14 + 1, 1);
      unint64_t v9 = (void *)aBlock[0];
    }
    v9[2] = v14 + 1;
    unint64_t v15 = &v9[2 * v14];
    void v15[4] = v12;
    void v15[5] = v11;
    --v7;
  }
  while (v7);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = v6;
  v17[3] = v22;
  void v17[4] = v23;
  void v17[5] = &v25;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_10013FE4C;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CC788;
  int64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v19];

  _Block_release(v19);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x100128D14);
  }
  if (v25)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_100128D38(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v4 = JSONDecoder.init()();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 4, 0);
  uint64_t v5 = _swiftEmptyArrayStorage;
  unint64_t v7 = _swiftEmptyArrayStorage[2];
  unint64_t v6 = _swiftEmptyArrayStorage[3];
  unint64_t v8 = v7 + 1;
  if (v7 >= v6 >> 1)
  {
    sub_10013A5D0(v6 > 1, v7 + 1, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v8;
  unint64_t v9 = (char *)&v5[2 * v7];
  strcpy(v9 + 32, "conversion_id");
  *((_WORD *)v9 + 23) = -4864;
  aBlock[0] = v5;
  unint64_t v10 = v5[3];
  int64_t v11 = v7 + 2;
  if (v8 >= v10 >> 1)
  {
    sub_10013A5D0(v10 > 1, v11, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v11;
  unint64_t v12 = &v5[2 * v8];
  v12[4] = 0xD000000000000012;
  v12[5] = 0x8000000100184760;
  aBlock[0] = v5;
  unint64_t v14 = v5[2];
  unint64_t v13 = v5[3];
  unint64_t v15 = v14 + 1;
  if (v14 >= v13 >> 1)
  {
    sub_10013A5D0(v13 > 1, v14 + 1, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v15;
  unint64_t v16 = &v5[2 * v14];
  v16[4] = 0x69737265766E6F63;
  v16[5] = 0xEF657079745F6E6FLL;
  aBlock[0] = v5;
  unint64_t v17 = v5[3];
  int64_t v18 = v14 + 2;
  if (v15 >= v17 >> 1)
  {
    sub_10013A5D0(v17 > 1, v18, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v18;
  int64_t v19 = &v5[2 * v15];
  v19[4] = 0xD000000000000012;
  void v19[5] = 0x8000000100184CF0;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v4;
  v21[3] = a1;
  void v21[4] = a2;
  v21[5] = &v29;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10013FE30;
  *(void *)(v22 + 24) = v21;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CC710;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v23];

  _Block_release(v23);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x100129264);
  }
  if (v29)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1001292A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v29 = 0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v4 = JSONDecoder.init()();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 4, 0);
  uint64_t v5 = _swiftEmptyArrayStorage;
  unint64_t v7 = _swiftEmptyArrayStorage[2];
  unint64_t v6 = _swiftEmptyArrayStorage[3];
  unint64_t v8 = v7 + 1;
  if (v7 >= v6 >> 1)
  {
    sub_10013A5D0(v6 > 1, v7 + 1, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v8;
  unint64_t v9 = &v5[2 * v7];
  uint64_t v9[4] = 0xD000000000000012;
  void v9[5] = 0x8000000100184760;
  aBlock[0] = v5;
  unint64_t v10 = v5[3];
  int64_t v11 = v7 + 2;
  if (v8 >= v10 >> 1)
  {
    sub_10013A5D0(v10 > 1, v11, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v11;
  unint64_t v12 = &v5[2 * v8];
  v12[4] = 0xD000000000000015;
  v12[5] = 0x80000001001852B0;
  aBlock[0] = v5;
  unint64_t v14 = v5[2];
  unint64_t v13 = v5[3];
  unint64_t v15 = v14 + 1;
  if (v14 >= v13 >> 1)
  {
    sub_10013A5D0(v13 > 1, v14 + 1, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v15;
  unint64_t v16 = (char *)&v5[2 * v14];
  strcpy(v16 + 32, "app_version_id");
  v16[47] = -18;
  aBlock[0] = v5;
  unint64_t v17 = v5[3];
  int64_t v18 = v14 + 2;
  if (v15 >= v17 >> 1)
  {
    sub_10013A5D0(v17 > 1, v18, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v18;
  int64_t v19 = &v5[2 * v15];
  v19[4] = 0xD000000000000012;
  void v19[5] = 0x8000000100184CF0;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v4;
  v21[3] = a1;
  void v21[4] = a2;
  v21[5] = &v29;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10013FE14;
  *(void *)(v22 + 24) = v21;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CC698;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v23];

  _Block_release(v23);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x1001297C0);
  }
  if (v29)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_100129800(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v29 = 0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v4 = JSONDecoder.init()();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 4, 0);
  uint64_t v5 = _swiftEmptyArrayStorage;
  unint64_t v7 = _swiftEmptyArrayStorage[2];
  unint64_t v6 = _swiftEmptyArrayStorage[3];
  unint64_t v8 = v7 + 1;
  if (v7 >= v6 >> 1)
  {
    sub_10013A5D0(v6 > 1, v7 + 1, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v8;
  unint64_t v9 = &v5[2 * v7];
  uint64_t v9[4] = 0xD000000000000012;
  void v9[5] = 0x8000000100184DE0;
  aBlock[0] = v5;
  unint64_t v10 = v5[3];
  int64_t v11 = v7 + 2;
  if (v8 >= v10 >> 1)
  {
    sub_10013A5D0(v10 > 1, v11, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v11;
  unint64_t v12 = &v5[2 * v8];
  v12[4] = 0xD000000000000014;
  v12[5] = 0x8000000100184E00;
  aBlock[0] = v5;
  unint64_t v14 = v5[2];
  unint64_t v13 = v5[3];
  unint64_t v15 = v14 + 1;
  if (v14 >= v13 >> 1)
  {
    sub_10013A5D0(v13 > 1, v14 + 1, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v15;
  unint64_t v16 = &v5[2 * v14];
  v16[4] = 0xD000000000000012;
  v16[5] = 0x8000000100184760;
  aBlock[0] = v5;
  unint64_t v17 = v5[3];
  int64_t v18 = v14 + 2;
  if (v15 >= v17 >> 1)
  {
    sub_10013A5D0(v17 > 1, v18, 1);
    uint64_t v5 = (void *)aBlock[0];
  }
  v5[2] = v18;
  int64_t v19 = (char *)&v5[2 * v15];
  strcpy(v19 + 32, "ghostback_id");
  v19[45] = 0;
  *((_WORD *)v19 + 23) = -5120;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v4;
  v21[3] = a1;
  void v21[4] = a2;
  v21[5] = &v29;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10013FA8C;
  *(void *)(v22 + 24) = v21;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CC3C8;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v23];

  _Block_release(v23);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x100129D0CLL);
  }
  if (v29)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_100129D4C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v35 = 0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v6 = 14;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v33 = JSONDecoder.init()();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 14, 0);
  unint64_t v7 = _swiftEmptyArrayStorage;
  unint64_t v8 = (unint64_t)"creation_timestamp";
  unint64_t v9 = (unint64_t)"fine_conversion_value";
  unint64_t v10 = (unint64_t)"interaction_type";
  unint64_t v11 = (unint64_t)"n_value";
  unint64_t v12 = (unint64_t)"ghostback_id";
  unint64_t v13 = &byte_1001C0948;
  do
  {
    int v14 = *v13++;
    unint64_t v15 = 0x8000000100184760;
    unint64_t v16 = 0xD000000000000012;
    switch(v14)
    {
      case 1:
        unint64_t v16 = 0xD000000000000015;
        unint64_t v15 = v8 | 0x8000000000000000;
        break;
      case 2:
        unint64_t v16 = 0xD000000000000017;
        unint64_t v15 = v9 | 0x8000000000000000;
        break;
      case 3:
        unint64_t v15 = 0xE900000000000064;
        unint64_t v16 = 0x656B636F6C5F7369;
        break;
      case 4:
        unint64_t v15 = 0xEA00000000006465;
        unint64_t v16 = 0x7265747369676572;
        break;
      case 5:
        unint64_t v15 = v10 | 0x8000000000000000;
        break;
      case 6:
        unint64_t v16 = 0xD000000000000010;
        unint64_t v15 = v11 | 0x8000000000000000;
        break;
      case 7:
        unint64_t v15 = 0xEE00706D61747365;
        unint64_t v16 = 0x6D69745F6B636F6CLL;
        break;
      case 8:
        unint64_t v15 = 0xEF706D617473656DLL;
        unint64_t v16 = 0x69745F6863746566;
        break;
      case 9:
        unint64_t v15 = 0xEC00000064695F6BLL;
        unint64_t v16 = 0x63616274736F6867;
        break;
      case 10:
        unint64_t v15 = 0xEF657079745F6E6FLL;
        unint64_t v16 = 0x69737265766E6F63;
        break;
      case 11:
        unint64_t v15 = 0xEB00000000746E65;
        unint64_t v16 = 0x6D6E6F7269766E65;
        break;
      case 12:
        unint64_t v16 = 0xD000000000000016;
        unint64_t v15 = v12 | 0x8000000000000000;
        break;
      case 13:
        unint64_t v15 = 0xEE0064695F656361;
        unint64_t v16 = 0x6C7074656B72616DLL;
        break;
      default:
        break;
    }
    aBlock[0] = v7;
    unint64_t v18 = v7[2];
    unint64_t v17 = v7[3];
    if (v18 >= v17 >> 1)
    {
      uint64_t v29 = (const char *)v9;
      uint64_t v30 = (const char *)v8;
      unint64_t v27 = (char *)v11;
      uint64_t v28 = (const char *)v10;
      uint64_t v26 = (const char *)v12;
      sub_10013A5D0(v17 > 1, v18 + 1, 1);
      unint64_t v12 = (unint64_t)v26;
      unint64_t v11 = (unint64_t)v27;
      unint64_t v10 = (unint64_t)v28;
      unint64_t v9 = (unint64_t)v29;
      unint64_t v8 = (unint64_t)v30;
      unint64_t v7 = (void *)aBlock[0];
    }
    _OWORD v7[2] = v18 + 1;
    int64_t v19 = &v7[2 * v18];
    v19[4] = v16;
    void v19[5] = v15;
    --v6;
  }
  while (v6);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v33;
  v21[3] = v31;
  void v21[4] = v32;
  v21[5] = &v35;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10013F884;
  *(void *)(v22 + 24) = v21;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CC350;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v23];

  _Block_release(v23);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    JUMPOUT(0x10012A1C8);
  }
  if (v35)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  swift_release();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_10012A200(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = 0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v3 = JSONDecoder.init()();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013A5D0(0, 2, 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  unint64_t v6 = _swiftEmptyArrayStorage[2];
  unint64_t v5 = _swiftEmptyArrayStorage[3];
  unint64_t v7 = v5 >> 1;
  unint64_t v8 = v6 + 1;
  if (v5 >> 1 <= v6)
  {
    sub_10013A5D0(v5 > 1, v6 + 1, 1);
    uint64_t v4 = (void *)aBlock[0];
    unint64_t v5 = *(void *)(aBlock[0] + 24);
    unint64_t v7 = v5 >> 1;
  }
  v4[2] = v8;
  unint64_t v9 = &v4[2 * v6];
  uint64_t v9[4] = 0x64695F6D657469;
  void v9[5] = 0xE700000000000000;
  aBlock[0] = v4;
  if (v7 <= v8)
  {
    sub_10013A5D0(v5 > 1, v6 + 2, 1);
    uint64_t v4 = (void *)aBlock[0];
  }
  v4[2] = v6 + 2;
  unint64_t v10 = &v4[2 * v8];
  v10[4] = 0x695F656C646E7562;
  v10[5] = 0xE900000000000064;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  unint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = v3;
  v12[3] = a1;
  v12[4] = a2;
  v12[5] = &v21;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10013F628;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_1001404FC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012D790;
  aBlock[3] = &unk_1001CC148;
  int v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [a3 enumeratePersistentIDsAndProperties:isa usingBlock:v14];

  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
    }
    swift_release();
    swift_errorRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10012A510(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  unint64_t v12 = self;
  id v30 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v30 = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:&v30];
    swift_unknownObjectRelease();
    id v15 = v30;
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_100015FF8();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      uint64_t v38 = v32;
      uint64_t v39 = v33;
      char v40 = v34;
      long long v41 = v35;
      uint64_t v36 = a1;
      char v37 = 0;
      a6(&v36, a3, a4);
      return swift_bridgeObjectRelease();
    }
    uint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v31 = sub_100147668(0x756F437972746552, 0xEF6C65646F4D746ELL, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v31 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012A96C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(char *, void, unsigned char *), uint64_t a7, uint64_t *a8)
{
  v31[1] = a7;
  uint64_t v32 = a6;
  uint64_t v33 = a4;
  v31[0] = a3;
  uint64_t v11 = type metadata accessor for SnoutStoryModel();
  __chkstk_darwin(v11);
  unsigned int v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = self;
  id v35 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v15 = [v14 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v15)
  {
    id v35 = a2;
    swift_bridgeObjectRetain();
    uint64_t v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v35 = 0;
    id v17 = [v14 dataWithJSONObject:v16 options:0 error:&v35];
    swift_unknownObjectRelease();
    id v18 = v35;
    if (v17)
    {
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      sub_10013FAC4(&qword_1001E0CB8, (void (*)(uint64_t))type metadata accessor for SnoutStoryModel);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v19, v21);
      swift_bridgeObjectRelease();
      *(void *)unsigned int v13 = a1;
      unsigned char v13[8] = 0;
      v32(v13, v31[0], v33);
      return sub_10013ECE8((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
    }
    os_log_type_t v23 = v18;
    uint64_t v22 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v22 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100012E74(v24, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    id v35 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v34 = sub_100147668(0x6F745374756F6E53, 0xEF6C65646F4D7972, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 12) = 2112;
    swift_errorRetain();
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v34 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v28 = v29;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v27, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v22;
  swift_errorRetain();
  swift_errorRelease();
  *uint64_t v33 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012AE38(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = self;
  *(void *)&v30[0] = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    *(void *)&v30[0] = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:v30];
    swift_unknownObjectRelease();
    id v15 = *(id *)&v30[0];
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_10011AF74();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      uint64_t v32 = a1;
      char v33 = 0;
      a6(&v32, a3, a4);
      v30[8] = v42;
      v30[9] = v43;
      v31[0] = v44[0];
      *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)v44 + 9);
      v30[4] = v38;
      v30[5] = v39;
      v30[6] = v40;
      v30[7] = v41;
      v30[0] = v34;
      v30[1] = v35;
      v30[2] = v36;
      v30[3] = v37;
      return sub_100036824((uint64_t)v30);
    }
    unint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    *(void *)&v30[0] = sub_100147668(0x6E6576456F6C6F53, 0xEE006C65646F4D74, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)&v30[0] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012B2F8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(char *, void, unsigned char *), uint64_t a7, uint64_t *a8)
{
  v31[1] = a7;
  uint64_t v32 = a6;
  char v33 = a4;
  v31[0] = a3;
  uint64_t v11 = type metadata accessor for ImpressionModel();
  __chkstk_darwin(v11);
  unsigned int v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = self;
  id v35 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v15 = [v14 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v15)
  {
    id v35 = a2;
    swift_bridgeObjectRetain();
    uint64_t v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v35 = 0;
    id v17 = [v14 dataWithJSONObject:v16 options:0 error:&v35];
    swift_unknownObjectRelease();
    id v18 = v35;
    if (v17)
    {
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      sub_10013FAC4(&qword_1001E1958, (void (*)(uint64_t))type metadata accessor for ImpressionModel);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v19, v21);
      swift_bridgeObjectRelease();
      *(void *)unsigned int v13 = a1;
      unsigned char v13[8] = 0;
      v32(v13, v31[0], v33);
      return sub_10013ECE8((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
    }
    os_log_type_t v23 = v18;
    uint64_t v22 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v22 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100012E74(v24, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    id v35 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v34 = sub_100147668(0x6973736572706D49, 0xEF6C65646F4D6E6FLL, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 12) = 2112;
    swift_errorRetain();
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v34 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v28 = v29;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v27, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v22;
  swift_errorRetain();
  swift_errorRelease();
  *char v33 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012B7C4(void *a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = self;
  id v30 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v30 = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:&v30];
    swift_unknownObjectRelease();
    id v15 = v30;
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_10007D158();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      uint64_t v62 = (uint64_t)a1;
      char v63 = 0;
      a6(&v62, a3, a4);
      id v30 = a1;
      char v31 = 0;
      long long v32 = v64;
      long long v33 = v65;
      uint64_t v34 = v66;
      char v35 = v67;
      long long v36 = v68;
      long long v37 = v69;
      uint64_t v38 = v70;
      char v39 = v71;
      char v40 = v72;
      long long v41 = v73;
      char v42 = v74;
      char v43 = v75;
      long long v44 = v76;
      uint64_t v45 = v77;
      uint64_t v46 = v78;
      char v47 = v79;
      char v48 = v80;
      char v49 = v81;
      char v50 = v82;
      char v51 = v83;
      uint64_t v52 = v84;
      uint64_t v53 = v85;
      char v54 = v86;
      long long v55 = v87;
      uint64_t v56 = v88;
      char v57 = v89;
      uint64_t v58 = v90;
      char v59 = v91;
      uint64_t v60 = v92;
      char v61 = v93;
      return sub_10008150C((uint64_t)&v30);
    }
    unint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    id v30 = (id)sub_100147668(0x6B63616274736F50, 0xED00006C65646F4DLL, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    os_log_type_t v26 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012BD0C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = self;
  id v30 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v30 = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:&v30];
    swift_unknownObjectRelease();
    id v15 = v30;
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_1000C540C();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      uint64_t v31 = a1;
      char v32 = 0;
      a6(&v31, a3, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    unint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    id v30 = (id)sub_100147668(0xD000000000000013, 0x8000000100188260, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    os_log_type_t v26 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012C16C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = self;
  id v30 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v30 = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:&v30];
    swift_unknownObjectRelease();
    id v15 = v30;
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_100110B58();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      uint64_t v39 = v32;
      uint64_t v40 = v33;
      uint64_t v41 = v34;
      char v42 = v35;
      uint64_t v43 = v36;
      uint64_t v37 = a1;
      char v38 = 0;
      a6(&v37, a3, a4);
      return swift_bridgeObjectRelease();
    }
    unint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v31 = sub_100147668(0xD00000000000001BLL, 0x8000000100188240, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v31 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012C5C8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = self;
  id v30 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v30 = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:&v30];
    swift_unknownObjectRelease();
    id v15 = v30;
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_1000B7824();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      long long v39 = v32;
      uint64_t v40 = v33;
      uint64_t v41 = v34;
      char v42 = v35;
      uint64_t v43 = v36;
      uint64_t v37 = a1;
      char v38 = 0;
      a6(&v37, a3, a4);
      return swift_bridgeObjectRelease();
    }
    unint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v31 = sub_100147668(0xD00000000000001BLL, 0x8000000100188220, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v31 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012CA24(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = self;
  id v32 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v32 = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:&v32];
    swift_unknownObjectRelease();
    id v15 = v32;
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_10005DFB0();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      uint64_t v33 = a1;
      char v34 = 0;
      a6(&v33, a3, a4);
      uint64_t v27 = v37;
      unint64_t v28 = v38;
      sub_10005E9FC(v35, v36);
      sub_10005E9FC(v27, v28);
      return swift_bridgeObjectRelease();
    }
    unint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    id v32 = (id)sub_100147668(0xD000000000000015, 0x8000000100188200, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    uint64_t v26 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v32 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012CE7C(void *a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = self;
  id v30 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v30 = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:&v30];
    swift_unknownObjectRelease();
    id v15 = v30;
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_10005B994();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      uint64_t v49 = (uint64_t)a1;
      char v50 = 0;
      a6(&v49, a3, a4);
      id v30 = a1;
      char v31 = 0;
      long long v32 = v51;
      uint64_t v33 = v52;
      uint64_t v34 = v53;
      char v35 = v54;
      char v36 = v55;
      char v37 = v56;
      char v38 = v57;
      uint64_t v39 = v58;
      uint64_t v40 = v59;
      char v41 = v60;
      char v42 = v61;
      char v43 = v62;
      long long v44 = v63;
      char v45 = v64;
      uint64_t v46 = v65;
      char v47 = v66;
      uint64_t v48 = v67;
      return sub_10005D5D8((uint64_t)&v30);
    }
    unint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    id v30 = (id)sub_100147668(0x63616274736F6847, 0xEE006C65646F4D6BLL, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    uint64_t v26 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012D344(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, unsigned char *), uint64_t a7, uint64_t *a8)
{
  uint64_t v12 = self;
  id v30 = a2;
  swift_bridgeObjectRetain_n();
  sub_100012960(&qword_1001E11F8);
  unsigned int v13 = [v12 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRetain();
    id v30 = 0;
    id v14 = [v12 dataWithJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() options:0 error:&v30];
    swift_unknownObjectRelease();
    id v15 = v30;
    if (v14)
    {
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_100062598();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_100020930(v16, v18);
      swift_bridgeObjectRelease();
      long long v36 = v32;
      uint64_t v37 = v33;
      uint64_t v34 = a1;
      char v35 = 0;
      a6(&v34, a3, a4);
      return swift_bridgeObjectRelease();
    }
    unint64_t v20 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)();
  }
  else
  {
    sub_1000400C0();
    uint64_t v19 = swift_allocError();
  }
  swift_willThrow();
  swift_bridgeObjectRelease();
  if (qword_1001E08F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100012E74(v21, (uint64_t)qword_1001E6010);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v31 = sub_100147668(0xD00000000000001ELL, 0x80000001001881E0, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2112;
    swift_errorRetain();
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v31 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v26;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decode %s from dictionary with error: %@", (uint8_t *)v24, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a8 = v19;
  swift_errorRetain();
  swift_errorRelease();
  *a4 = 1;
  return swift_errorRelease();
}

uint64_t sub_10012D790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v8(a2, v9, a4, a5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10012D824()
{
  if (qword_1001E08A8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1001E5F88;
  unint64_t v5 = &type metadata for AMSDogBag;
  unint64_t v6 = &off_1001CAA18;
  sub_10008FDEC((uint64_t)v4, (uint64_t)v3);
  int64_t v1 = sub_10013C000(0x74735F74756F6E73, 0xEB0000000065726FLL, v0, (uint64_t)v3, 1);
  uint64_t result = sub_10008FE48((uint64_t)v4);
  qword_1001E60E8 = (uint64_t)v1;
  return result;
}

uint64_t sub_10012D8E4()
{
  int64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100013480;
  return sub_10012DF44();
}

uint64_t sub_10012D974(_OWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 696) = v6;
  *(void *)(v7 + 688) = a6;
  *(void *)(v7 + 680) = a5;
  *(unsigned char *)(v7 + 226) = a4;
  *(void *)(v7 + 672) = a3;
  *(void *)(v7 + 664) = a2;
  *(void *)(v7 + 656) = a1;
  long long v8 = a1[9];
  *(_OWORD *)(v7 + 576) = a1[8];
  *(_OWORD *)(v7 + 592) = v8;
  *(_OWORD *)(v7 + 608) = a1[10];
  *(_OWORD *)(v7 + 617) = *(_OWORD *)((char *)a1 + 169);
  long long v9 = a1[5];
  *(_OWORD *)(v7 + 512) = a1[4];
  *(_OWORD *)(v7 + 528) = v9;
  long long v10 = a1[7];
  *(_OWORD *)(v7 + 544) = a1[6];
  *(_OWORD *)(v7 + 560) = v10;
  long long v11 = a1[1];
  *(_OWORD *)(v7 + 448) = *a1;
  *(_OWORD *)(v7 + 464) = v11;
  long long v12 = a1[3];
  *(_OWORD *)(v7 + 480) = a1[2];
  *(_OWORD *)(v7 + 496) = v12;
  uint64_t v13 = sub_100012960(&qword_1001E1370);
  *(void *)(v7 + 704) = v13;
  *(void *)(v7 + 712) = *(void *)(v13 - 8);
  *(void *)(v7 + 720) = swift_task_alloc();
  return _swift_task_switch(sub_10012DA8C, v6, 0);
}

uint64_t sub_10012DA8C()
{
  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 712);
  uint64_t v34 = *(void *)(v0 + 704);
  uint64_t v36 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 672);
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(void *)(v0 + 656);
  long long v6 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 160) = v6;
  long long v7 = *(_OWORD *)(v0 + 624);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 608);
  *(_OWORD *)(v0 + 192) = v7;
  long long v8 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 96) = v8;
  long long v9 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 128) = v9;
  long long v10 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 32) = v10;
  long long v11 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 64) = v11;
  char v12 = *(unsigned char *)(v0 + 226);
  *(void *)(v0 + 208) = v4;
  *(void *)(v0 + 216) = v3;
  *(unsigned char *)(v0 + 224) = v12;
  *(unsigned char *)(v0 + 225) = 1;
  sub_10003675C(v0 + 16);
  sub_1000367C8(v0 + 16, v0 + 232);
  sub_10001547C(v5);
  sub_1000B2884(v4, v3, v12);
  sub_100012960(&qword_1001E1388);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v34);
  if (v36
    && (*(void *)(v0 + 640) = *(void *)(v0 + 688),
        swift_errorRetain(),
        sub_100012960(&qword_1001E12E8),
        sub_100019F68(0, &qword_1001E4810),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v13 = *(void *)(v0 + 656);
    id v14 = *(void **)(v0 + 648);
    uint64_t v15 = *(void *)(v13 + 48);
    uint64_t v37 = *(void *)(v13 + 40);
    swift_bridgeObjectRetain();
    id v16 = [v14 domain];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v18;
    uint64_t v35 = v17;

    id v32 = [v14 code];
    char v31 = 0;
    uint64_t v19 = *(__int16 **)(v0 + 656);
  }
  else
  {
    uint64_t v19 = *(__int16 **)(v0 + 656);
    uint64_t v15 = *((void *)v19 + 6);
    uint64_t v37 = *((void *)v19 + 5);
    swift_bridgeObjectRetain();
    id v32 = 0;
    uint64_t v33 = 0;
    uint64_t v35 = 0;
    id v14 = 0;
    char v31 = 1;
  }
  *(void *)(v0 + 728) = v14;
  char v20 = *((unsigned char *)v19 + 85);
  uint64_t v21 = *((void *)v19 + 15);
  char v22 = *((unsigned char *)v19 + 128);
  char v23 = *((unsigned char *)v19 + 113);
  char v24 = *((unsigned char *)v19 + 83);
  char v25 = *((unsigned char *)v19 + 80);
  __int16 v26 = *v19;
  sub_100012960(&qword_1001E3CC0);
  uint64_t v27 = swift_allocObject();
  *(void *)(v0 + 736) = v27;
  *(_OWORD *)(v27 + 16) = xmmword_100179990;
  *(_WORD *)(v27 + 32) = v26;
  *(void *)(v27 + 40) = v37;
  *(void *)(v27 + 48) = v15;
  *(unsigned char *)(v27 + 56) = v25;
  *(unsigned char *)(v27 + 57) = v24;
  *(unsigned char *)(v27 + 58) = v23;
  *(void *)(v27 + 64) = v21;
  *(unsigned char *)(v27 + 72) = v22;
  *(unsigned char *)(v27 + 73) = v20;
  *(void *)(v27 + 80) = v35;
  *(void *)(v27 + 88) = v33;
  *(void *)(v27 + 96) = v32;
  *(unsigned char *)(v27 + 104) = v31;
  unint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 744) = v28;
  *unint64_t v28 = v0;
  v28[1] = sub_10012DDAC;
  uint64_t v29 = *(void *)(v0 + 696);
  v28[6] = *(void *)(v0 + 680);
  v28[7] = v29;
  v28[5] = v27;
  return _swift_task_switch(sub_10013800C, v29, 0);
}

uint64_t sub_10012DDAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 696);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10012DED8, v1, 0);
}

uint64_t sub_10012DED8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10012DF44()
{
  v1[134] = v0;
  uint64_t v2 = sub_100012960(&qword_1001E47F0);
  v1[135] = v2;
  v1[136] = *(void *)(v2 - 8);
  v1[137] = swift_task_alloc();
  return _swift_task_switch(sub_10012E008, v0, 0);
}

uint64_t sub_10012E008()
{
  sub_100012960(&qword_1001E47F8);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = sub_10013FAC4(&qword_1001E4800, (void (*)(uint64_t))type metadata accessor for SnoutManager);
  v0[138] = v1;
  uint64_t v2 = v0[134];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[139] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10012E124;
  uint64_t v4 = v0[135];
  return AsyncStream.Iterator.next(isolation:)(v0 + 56, v2, v1, v4);
}

uint64_t sub_10012E124()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1072);
  swift_task_dealloc();
  return _swift_task_switch(sub_10012E234, v1, 0);
}

uint64_t sub_10012E234()
{
  sub_100059F98(v0 + 448, v0 + 232, &qword_1001E4808);
  sub_100059F98(v0 + 232, v0 + 16, &qword_1001E4808);
  if (sub_10013E4AC(v0 + 16) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 1088) + 8))(*(void *)(v0 + 1096), *(void *)(v0 + 1080));
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    sub_1000367C8(v0 + 16, v0 + 664);
    int v3 = sub_100138F0C(v0 + 664);
    if (v3)
    {
      if (v3 == 1)
      {
        uint64_t v4 = (uint64_t *)sub_100138F18(v0 + 664);
        uint64_t v6 = *v4;
        uint64_t v5 = v4[1];
        uint64_t v7 = v4[2];
        long long v8 = (void *)swift_task_alloc();
        *(void *)(v0 + 1128) = v8;
        *long long v8 = v0;
        v8[1] = sub_10012E6F0;
        return sub_100130C28(v6, v5, v7);
      }
      else
      {
        uint64_t v24 = sub_100138F18(v0 + 664);
        uint64_t v26 = *(void *)v24;
        uint64_t v25 = *(void *)(v24 + 8);
        char v27 = *(unsigned char *)(v24 + 16);
        unint64_t v28 = (void *)swift_task_alloc();
        *(void *)(v0 + 1136) = v28;
        *unint64_t v28 = v0;
        v28[1] = sub_10012E800;
        return sub_100131BD0(v26, v25, v27);
      }
    }
    else
    {
      uint64_t v9 = sub_100138F18(v0 + 664);
      long long v10 = *(_OWORD *)(v9 + 48);
      long long v12 = *(_OWORD *)v9;
      long long v11 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v0 + 912) = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(v0 + 928) = v10;
      *(_OWORD *)(v0 + 880) = v12;
      *(_OWORD *)(v0 + 896) = v11;
      long long v13 = *(_OWORD *)(v9 + 112);
      long long v15 = *(_OWORD *)(v9 + 64);
      long long v14 = *(_OWORD *)(v9 + 80);
      *(_OWORD *)(v0 + 976) = *(_OWORD *)(v9 + 96);
      *(_OWORD *)(v0 + 992) = v13;
      *(_OWORD *)(v0 + 944) = v15;
      *(_OWORD *)(v0 + 960) = v14;
      long long v17 = *(_OWORD *)(v9 + 144);
      long long v16 = *(_OWORD *)(v9 + 160);
      long long v18 = *(_OWORD *)(v9 + 128);
      *(_OWORD *)(v0 + 1049) = *(_OWORD *)(v9 + 169);
      *(_OWORD *)(v0 + 1024) = v17;
      *(_OWORD *)(v0 + 1040) = v16;
      *(_OWORD *)(v0 + 1008) = v18;
      uint64_t v19 = *(void *)(v9 + 192);
      uint64_t v20 = *(void *)(v9 + 200);
      char v21 = *(unsigned char *)(v9 + 209);
      char v22 = *(unsigned char *)(v9 + 208);
      char v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 1120) = v23;
      *char v23 = v0;
      v23[1] = sub_10012E51C;
      return sub_10012E910((_OWORD *)(v0 + 880), v19, v20, v22, v21);
    }
  }
}

uint64_t sub_10012E51C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1072);
  swift_task_dealloc();
  return _swift_task_switch(sub_10012E62C, v1, 0);
}

uint64_t sub_10012E62C()
{
  sub_10013E4CC((uint64_t)(v0 + 29));
  uint64_t v1 = v0[138];
  uint64_t v2 = v0[134];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[139] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10012E124;
  uint64_t v4 = v0[135];
  return AsyncStream.Iterator.next(isolation:)(v0 + 56, v2, v1, v4);
}

uint64_t sub_10012E6F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1072);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001404DC, v1, 0);
}

uint64_t sub_10012E800()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1072);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001404DC, v1, 0);
}

uint64_t sub_10012E910(_OWORD *a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(unsigned char *)(v6 + 394) = a5;
  *(unsigned char *)(v6 + 393) = a4;
  *(void *)(v6 + 432) = a3;
  *(void *)(v6 + 440) = v5;
  *(void *)(v6 + 416) = a1;
  *(void *)(v6 + 424) = a2;
  long long v7 = a1[9];
  *(_OWORD *)(v6 + 336) = a1[8];
  *(_OWORD *)(v6 + 352) = v7;
  *(_OWORD *)(v6 + 368) = a1[10];
  *(_OWORD *)(v6 + 377) = *(_OWORD *)((char *)a1 + 169);
  long long v8 = a1[5];
  *(_OWORD *)(v6 + 272) = a1[4];
  *(_OWORD *)(v6 + 288) = v8;
  long long v9 = a1[7];
  *(_OWORD *)(v6 + 304) = a1[6];
  *(_OWORD *)(v6 + 320) = v9;
  long long v10 = a1[1];
  *(_OWORD *)(v6 + 208) = *a1;
  *(_OWORD *)(v6 + 224) = v10;
  long long v11 = a1[3];
  *(_OWORD *)(v6 + 240) = a1[2];
  *(_OWORD *)(v6 + 256) = v11;
  uint64_t v12 = type metadata accessor for SnoutStoryModel();
  *(void *)(v6 + 448) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 456) = v13;
  *(void *)(v6 + 464) = *(void *)(v13 + 64);
  *(void *)(v6 + 472) = swift_task_alloc();
  *(void *)(v6 + 480) = swift_task_alloc();
  sub_100012960(&qword_1001E3A68);
  *(void *)(v6 + 488) = swift_task_alloc();
  *(void *)(v6 + 496) = swift_task_alloc();
  return _swift_task_switch(sub_10012EA70, v5, 0);
}

uint64_t sub_10012EA70()
{
  sub_100012D78((void *)(*(void *)(v0 + 440) + 136), *(void *)(*(void *)(v0 + 440) + 160));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v1;
  void *v1 = v0;
  v1[1] = sub_10012EB10;
  return sub_100016E98();
}

uint64_t sub_10012EB10(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 440);
  *(unsigned char *)(*(void *)v1 + 395) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10012EC28, v2, 0);
}

uint64_t sub_10012EC28()
{
  if (*(unsigned char *)(v0 + 395) == 1)
  {
    if (*(unsigned char *)(v0 + 393) == 2 && *(_OWORD *)(v0 + 424) == 0)
    {
      sub_100012D78((void *)(*(void *)(v0 + 440) + 136), *(void *)(*(void *)(v0 + 440) + 160));
      long long v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 512) = v9;
      *long long v9 = v0;
      v9[1] = sub_10012EDC8;
      return sub_100017768();
    }
    else
    {
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 560) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_10012F32C;
      uint64_t v3 = *(void *)(v0 + 496);
      uint64_t v4 = *(void *)(v0 + 432);
      uint64_t v5 = *(void *)(v0 + 424);
      char v6 = *(unsigned char *)(v0 + 393);
      return sub_100136E88(v3, v5, v4, v6);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_10012EDC8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 440);
  *(unsigned char *)(*(void *)v1 + 396) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10012EEE0, v2, 0);
}

uint64_t sub_10012EEE0()
{
  if (*(unsigned char *)(v0 + 396) == 1)
  {
    long long v1 = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 135) = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 119) = v1;
    long long v2 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 103) = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 87) = v2;
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 377);
    *(_OWORD *)(v0 + 183) = *(_OWORD *)(v0 + 368);
    long long v3 = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 167) = *(_OWORD *)(v0 + 352);
    *(_OWORD *)(v0 + 151) = v3;
    long long v4 = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 23) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 39) = v4;
    long long v5 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 55) = *(_OWORD *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 440);
    uint64_t v7 = *(void *)(v0 + 416);
    *(unsigned char *)(v0 + 664) = 1;
    *(_OWORD *)(v0 + 71) = v5;
    char v8 = *(unsigned char *)(v0 + 664);
    *(void *)(v0 + 520) = *(void *)(v6 + 120);
    long long v9 = *(void **)(v6 + 128);
    *(void *)(v0 + 528) = v9;
    uint64_t v10 = swift_allocObject();
    long long v11 = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v10 + 153) = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v10 + 169) = v11;
    long long v12 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v10 + 185) = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v10 + 201) = v12;
    long long v13 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v10 + 89) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v10 + 105) = v13;
    long long v14 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v10 + 121) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v10 + 137) = v14;
    long long v15 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v10 + 25) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v10 + 41) = v15;
    long long v16 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)(v0 + 48);
    *(void *)(v0 + 536) = v10;
    *(void *)(v10 + 16) = 0;
    *(unsigned char *)(v10 + 24) = v8;
    *(_OWORD *)(v10 + 73) = v16;
    sub_10001547C(v7);
    uint64_t v20 = (uint64_t (*)(void))((char *)&dword_1001E47A0 + dword_1001E47A0);
    swift_bridgeObjectRetain();
    v9;
    long long v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v17;
    *long long v17 = v0;
    v17[1] = sub_10012F124;
    return v20();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_10012F124()
{
  uint64_t v2 = *v1;
  long long v3 = *(void **)(*v1 + 528);
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v2 + 440);
  if (v0) {
    long long v5 = sub_1001300D0;
  }
  else {
    long long v5 = sub_10012F2A8;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10012F2A8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10012F32C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 440);
  if (v0) {
    uint64_t v4 = sub_100130344;
  }
  else {
    uint64_t v4 = sub_10012F458;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10012F458()
{
  uint64_t v50 = v0;
  uint64_t v2 = *(void *)(v0 + 488);
  uint64_t v1 = *(void *)(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 448);
  uint64_t v4 = *(void *)(v0 + 456);
  uint64_t v5 = swift_allocBox();
  uint64_t v7 = v6;
  *(void *)(v0 + 576) = v5;
  sub_100036994(v1, v2, &qword_1001E3A68);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  uint64_t v9 = *(void *)(v0 + 488);
  if (v8 == 1)
  {
    int v10 = *(unsigned __int8 *)(v0 + 394);
    int v11 = *(unsigned __int8 *)(v0 + 393);
    sub_100019960(v9, &qword_1001E3A68);
    swift_deallocBox();
    if (v11 || !v10)
    {
      if (qword_1001E0918 != -1) {
        swift_once();
      }
      uint64_t v31 = *(void *)(v0 + 424);
      uint64_t v32 = *(void *)(v0 + 432);
      char v33 = *(unsigned char *)(v0 + 393);
      uint64_t v34 = type metadata accessor for Logger();
      sub_100012E74(v34, (uint64_t)qword_1001E6070);
      sub_1000B2884(v31, v32, v33);
      sub_1000B2884(v31, v32, v33);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      BOOL v37 = os_log_type_enabled(v35, v36);
      uint64_t v38 = *(void *)(v0 + 496);
      char v39 = *(unsigned char *)(v0 + 393);
      uint64_t v41 = *(void *)(v0 + 424);
      uint64_t v40 = *(void *)(v0 + 432);
      if (v37)
      {
        uint64_t v48 = *(void *)(v0 + 496);
        char v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)char v42 = 136315138;
        uint64_t v43 = sub_100130B58(v41, v40, v39);
        *(void *)(v0 + 408) = sub_100147668(v43, v44, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000B28F0(v41, v40, v39);
        sub_1000B28F0(v41, v40, v39);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "No story found for identifier: '%s'", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v45 = v48;
      }
      else
      {

        sub_1000B28F0(v41, v40, v39);
        sub_1000B28F0(v41, v40, v39);
        uint64_t v45 = v38;
      }
      sub_100019960(v45, &qword_1001E3A68);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
      return v46();
    }
    else
    {
      sub_100012D78((void *)(*(void *)(v0 + 440) + 136), *(void *)(*(void *)(v0 + 440) + 160));
      long long v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 616) = v12;
      *long long v12 = v0;
      v12[1] = sub_10012FB94;
      return sub_100017768();
    }
  }
  else
  {
    long long v14 = *(void **)(v0 + 440);
    long long v15 = *(long long **)(v0 + 416);
    sub_10013E21C(v9, v7);
    sub_100012960(&qword_1001E47E8);
    long long v16 = (_OWORD *)swift_allocObject();
    v16[1] = xmmword_100179990;
    long long v17 = v15[3];
    long long v19 = *v15;
    long long v18 = v15[1];
    v16[4] = v15[2];
    v16[5] = v17;
    _OWORD v16[2] = v19;
    v16[3] = v18;
    long long v20 = v15[7];
    long long v22 = v15[4];
    long long v21 = v15[5];
    v16[8] = v15[6];
    v16[9] = v20;
    v16[6] = v22;
    v16[7] = v21;
    long long v24 = v15[9];
    long long v23 = v15[10];
    long long v25 = v15[8];
    *(_OWORD *)((char *)v16 + 201) = *(long long *)((char *)v15 + 169);
    v16[11] = v24;
    v16[12] = v23;
    _OWORD v16[10] = v25;
    sub_10001547C((uint64_t)v15);
    sub_1000145F0((uint64_t)v16);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v26 = v14[14];
    uint64_t v27 = v14[15];
    *(void *)(v0 + 584) = v27;
    unint64_t v28 = (void *)v14[16];
    *(void *)(v0 + 592) = v28;
    char v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E47A0
                                                                                       + dword_1001E47A0);
    swift_bridgeObjectRetain();
    id v29 = v28;
    swift_retain();
    id v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v30;
    *id v30 = v0;
    v30[1] = sub_10012F970;
    return v47((uint64_t)v47, (uint64_t)sub_10013E190, v5, v26, v27, (uint64_t)v29);
  }
}

uint64_t sub_10012F970()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 592);
  *(void *)(*v1 + 608) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v2 + 440);
  if (v0) {
    uint64_t v5 = sub_1001305B8;
  }
  else {
    uint64_t v5 = sub_10012FAF4;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10012FAF4()
{
  sub_100019960(*(void *)(v0 + 496), &qword_1001E3A68);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10012FB94(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 440);
  *(unsigned char *)(*(void *)v1 + 397) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10012FCAC, v2, 0);
}

uint64_t sub_10012FCAC()
{
  char v1 = *(unsigned char *)(v0 + 397);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 456);
  uint64_t v5 = *(void **)(v0 + 440);
  uint64_t v7 = *(long long **)(v0 + 416);
  uint64_t v6 = *(void *)(v0 + 424);
  sub_100012960(&qword_1001E47E8);
  int v8 = (_OWORD *)swift_allocObject();
  v8[1] = xmmword_100179990;
  long long v9 = v7[3];
  long long v11 = *v7;
  long long v10 = v7[1];
  void v8[4] = v7[2];
  v8[5] = v9;
  void v8[2] = v11;
  void v8[3] = v10;
  long long v12 = v7[7];
  long long v14 = v7[4];
  long long v13 = v7[5];
  _OWORD v8[8] = v7[6];
  v8[9] = v12;
  v8[6] = v14;
  v8[7] = v13;
  long long v16 = v7[9];
  long long v15 = v7[10];
  long long v17 = v7[8];
  *(_OWORD *)((char *)v8 + 201) = *(long long *)((char *)v7 + 169);
  v8[11] = v16;
  v8[12] = v15;
  v8[10] = v17;
  sub_10001547C((uint64_t)v7);
  sub_10001410C(v6, v1, (uint64_t)v8, v3);
  uint64_t v18 = v5[14];
  uint64_t v19 = v5[15];
  *(void *)(v0 + 624) = v19;
  long long v20 = (void *)v5[16];
  *(void *)(v0 + 632) = v20;
  sub_10013EC80(v3, v2, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
  unint64_t v21 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v22 = swift_allocObject();
  *(void *)(v0 + 640) = v22;
  sub_10013E21C(v2, v22 + v21);
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E47A0
                                                                                     + dword_1001E47A0);
  swift_bridgeObjectRetain();
  id v23 = v20;
  long long v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 648) = v24;
  *long long v24 = v0;
  v24[1] = sub_10012FE98;
  return v26((uint64_t)v26, (uint64_t)sub_10013E3C4, v22, v18, v19, (uint64_t)v23);
}

uint64_t sub_10012FE98()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 632);
  *(void *)(*v1 + 656) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v2 + 440);
  if (v0) {
    uint64_t v5 = sub_100130848;
  }
  else {
    uint64_t v5 = sub_10013001C;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10013001C()
{
  uint64_t v1 = v0[62];
  sub_10013ECE8(v0[60], (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
  sub_100019960(v1, &qword_1001E3A68);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001300D0()
{
  uint64_t v17 = v0;
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v1 = *(void *)(v0 + 432);
  char v3 = *(unsigned char *)(v0 + 393);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100012E74(v4, (uint64_t)qword_1001E6070);
  sub_1000B2884(v2, v1, v3);
  sub_1000B2884(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  char v8 = *(unsigned char *)(v0 + 393);
  uint64_t v10 = *(void *)(v0 + 424);
  uint64_t v9 = *(void *)(v0 + 432);
  if (v7)
  {
    long long v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)long long v11 = 136315138;
    uint64_t v12 = sub_100130B58(v10, v9, v8);
    *(void *)(v0 + 400) = sub_100147668(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B28F0(v10, v9, v8);
    sub_1000B28F0(v10, v9, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Encountered error while logging event to story: '%s'", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B28F0(*(void *)(v0 + 424), *(void *)(v0 + 432), *(unsigned char *)(v0 + 393));
    sub_1000B28F0(v10, v9, v8);
  }
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100130344()
{
  uint64_t v17 = v0;
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v1 = *(void *)(v0 + 432);
  char v3 = *(unsigned char *)(v0 + 393);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100012E74(v4, (uint64_t)qword_1001E6070);
  sub_1000B2884(v2, v1, v3);
  sub_1000B2884(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  char v8 = *(unsigned char *)(v0 + 393);
  uint64_t v10 = *(void *)(v0 + 424);
  uint64_t v9 = *(void *)(v0 + 432);
  if (v7)
  {
    long long v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)long long v11 = 136315138;
    uint64_t v12 = sub_100130B58(v10, v9, v8);
    *(void *)(v0 + 400) = sub_100147668(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B28F0(v10, v9, v8);
    sub_1000B28F0(v10, v9, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Encountered error while logging event to story: '%s'", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B28F0(*(void *)(v0 + 424), *(void *)(v0 + 432), *(unsigned char *)(v0 + 393));
    sub_1000B28F0(v10, v9, v8);
  }
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1001305B8()
{
  uint64_t v17 = v0;
  sub_100019960(*(void *)(v0 + 496), &qword_1001E3A68);
  swift_release();
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v1 = *(void *)(v0 + 432);
  char v3 = *(unsigned char *)(v0 + 393);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100012E74(v4, (uint64_t)qword_1001E6070);
  sub_1000B2884(v2, v1, v3);
  sub_1000B2884(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  char v8 = *(unsigned char *)(v0 + 393);
  uint64_t v10 = *(void *)(v0 + 424);
  uint64_t v9 = *(void *)(v0 + 432);
  if (v7)
  {
    long long v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)long long v11 = 136315138;
    uint64_t v12 = sub_100130B58(v10, v9, v8);
    *(void *)(v0 + 400) = sub_100147668(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B28F0(v10, v9, v8);
    sub_1000B28F0(v10, v9, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Encountered error while logging event to story: '%s'", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B28F0(*(void *)(v0 + 424), *(void *)(v0 + 432), *(unsigned char *)(v0 + 393));
    sub_1000B28F0(v10, v9, v8);
  }
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100130848()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void *)(v0 + 496);
  sub_10013ECE8(*(void *)(v0 + 480), (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
  sub_100019960(v1, &qword_1001E3A68);
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  char v4 = *(unsigned char *)(v0 + 393);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100012E74(v5, (uint64_t)qword_1001E6070);
  sub_1000B2884(v3, v2, v4);
  sub_1000B2884(v3, v2, v4);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  char v9 = *(unsigned char *)(v0 + 393);
  uint64_t v11 = *(void *)(v0 + 424);
  uint64_t v10 = *(void *)(v0 + 432);
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v13 = sub_100130B58(v11, v10, v9);
    *(void *)(v0 + 400) = sub_100147668(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B28F0(v11, v10, v9);
    sub_1000B28F0(v11, v10, v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Encountered error while logging event to story: '%s'", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B28F0(*(void *)(v0 + 424), *(void *)(v0 + 432), *(unsigned char *)(v0 + 393));
    sub_1000B28F0(v11, v10, v9);
  }
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

void sub_100130AEC(void *a1, long long *a2)
{
  id v4 = [a1 connection];
  id v5 = sub_100021470(a2, v4);

  if (!v2) {
}
  }

uint64_t sub_100130B58(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
  {
    uint64_t v5 = 0x6973736572706D69;
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return v5;
  }
  if (a3 == 1)
  {
    uint64_t v5 = 0x69737265766E6F63;
    String.append(_:)(*(Swift::String *)&a1);
    return v5;
  }
  return 0x6576652D6F6C6F73;
}

uint64_t sub_100130C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  sub_100012960(&qword_1001E3A68);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_100130CD0, v3, 0);
}

uint64_t sub_100130CD0()
{
  sub_100012D78((void *)(*(void *)(v0 + 64) + 136), *(void *)(*(void *)(v0 + 64) + 160));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  void *v1 = v0;
  v1[1] = sub_100130D70;
  return sub_100016E98();
}

uint64_t sub_100130D70(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(unsigned char *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100130E88, v2, 0);
}

uint64_t sub_100130E88()
{
  if (*(unsigned char *)(v0 + 168) == 1)
  {
    uint64_t v1 = *(void **)(v0 + 64);
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v3 = v1[14];
    *(void *)(v0 + 96) = v3;
    uint64_t v4 = v1[15];
    *(void *)(v0 + 104) = v4;
    uint64_t v5 = (void *)v1[16];
    *(void *)(v0 + 112) = v5;
    uint64_t v6 = swift_allocObject();
    *(void *)(v0 + 120) = v6;
    *(void *)(v6 + 16) = v2;
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E4760
                                                                                       + dword_1001E4760);
    swift_bridgeObjectRetain();
    id v7 = v5;
    BOOL v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v8;
    *BOOL v8 = v0;
    v8[1] = sub_10013100C;
    uint64_t v9 = *(void *)(v0 + 80);
    return v12(v9, (uint64_t)sub_10013E290, v6, v3, v4, (uint64_t)v7);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_10013100C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 112);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v5 = sub_100131684;
  }
  else {
    uint64_t v5 = sub_100131190;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100131190()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = type metadata accessor for SnoutStoryModel();
  uint64_t v4 = swift_allocBox();
  uint64_t v6 = v5;
  v0[18] = v4;
  sub_100036994(v1, v2, &qword_1001E3A68);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    sub_100019960(v0[9], &qword_1001E3A68);
    swift_deallocBox();
    if (qword_1001E0918 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100012E74(v7, (uint64_t)qword_1001E6070);
    BOOL v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = v0[5];
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134217984;
      v0[4] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No story found to rotate for app %llu", v11, 0xCu);
      swift_slowDealloc();
    }

    sub_100019960(v0[10], &qword_1001E3A68);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    unint64_t v14 = (void *)v0[14];
    uint64_t v16 = v0[6];
    uint64_t v15 = v0[7];
    sub_10013E21C(v0[9], v6);
    uint64_t v17 = (void *)(v6 + *(int *)(v3 + 28));
    *uint64_t v17 = v16;
    v17[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001E47A0
                                                                                       + dword_1001E47A0);
    swift_bridgeObjectRetain();
    id v18 = v14;
    swift_retain();
    uint64_t v19 = (void *)swift_task_alloc();
    v0[19] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10013147C;
    uint64_t v20 = v0[13];
    uint64_t v21 = v0[14];
    uint64_t v22 = v0[12];
    return v23((uint64_t)v23, (uint64_t)sub_10013E190, v4, v22, v20, v21);
  }
}

uint64_t sub_10013147C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 112);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v5 = sub_1001318A8;
  }
  else {
    uint64_t v5 = sub_100131600;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100131600()
{
  sub_100019960(*(void *)(v0 + 80), &qword_1001E3A68);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100131684()
{
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[5];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134218242;
    v0[2] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Encountered error while logging event to story for app: %llu, error: %@", (uint8_t *)v5, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001318A8()
{
  sub_100019960(v0[10], &qword_1001E3A68);
  swift_release();
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[5];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134218242;
    v0[2] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Encountered error while logging event to story for app: %llu, error: %@", (uint8_t *)v5, 0x16u);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100131AE8()
{
  uint64_t v0 = type metadata accessor for SnoutStoryModel();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = swift_projectBox();
  swift_beginAccess();
  sub_10013EC80(v3, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
  sub_100020F74((uint64_t)v2);
  return sub_10013ECE8((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
}

uint64_t sub_100131BD0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 456) = a2;
  *(void *)(v4 + 464) = v3;
  *(unsigned char *)(v4 + 425) = a3;
  *(void *)(v4 + 448) = a1;
  sub_100012960(&qword_1001E3A68);
  *(void *)(v4 + 472) = swift_task_alloc();
  return _swift_task_switch(sub_100131C6C, v3, 0);
}

uint64_t sub_100131C6C()
{
  sub_100012D78((void *)(*(void *)(v0 + 464) + 136), *(void *)(*(void *)(v0 + 464) + 160));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v1;
  void *v1 = v0;
  v1[1] = sub_100131D0C;
  return sub_100016E98();
}

uint64_t sub_100131D0C(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  if (a1)
  {
    *(void *)(v3 + 488) = type metadata accessor for SnoutStoryModel();
    *(void *)(v3 + 496) = swift_allocBox();
    *(void *)(v3 + 504) = v5;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v3 + 512) = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100131EA4;
    uint64_t v7 = *(void *)(v3 + 472);
    uint64_t v8 = *(void *)(v3 + 448);
    uint64_t v9 = *(void *)(v3 + 456);
    char v10 = *(unsigned char *)(v3 + 425);
    return sub_100136E88(v7, v8, v9, v10);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v4 + 8);
    return v12();
  }
}

uint64_t sub_100131EA4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 520) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 464);
  if (v0) {
    uint64_t v4 = sub_10013286C;
  }
  else {
    uint64_t v4 = sub_100131FD0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100131FD0()
{
  uint64_t v47 = v0;
  uint64_t v1 = *(void *)(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 472);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    sub_100019960(v2, &qword_1001E3A68);
    swift_deallocBox();
    uint64_t v3 = &unk_1001E0000;
    if (qword_1001E0918 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 448);
    uint64_t v4 = *(void *)(v0 + 456);
    char v6 = *(unsigned char *)(v0 + 425);
    uint64_t v44 = type metadata accessor for Logger();
    sub_100012E74(v44, (uint64_t)qword_1001E6070);
    sub_1000B2884(v5, v4, v6);
    sub_1000B2884(v5, v4, v6);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    char v10 = *(unsigned char *)(v0 + 425);
    uint64_t v12 = *(void *)(v0 + 448);
    uint64_t v11 = *(void *)(v0 + 456);
    if (v9)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v14 = sub_100130B58(v12, v11, v10);
      *(void *)(v0 + 440) = sub_100147668(v14, v15, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000B28F0(v12, v11, v10);
      sub_1000B28F0(v12, v11, v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No story found for identifier: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = (void *)&unk_1001E0000;
      swift_slowDealloc();
    }
    else
    {
      sub_1000B28F0(v12, v11, v10);
      sub_1000B28F0(v12, v11, v10);
    }

    sub_10013E1C8();
    swift_allocError();
    swift_willThrow();
    if (v3[291] != -1) {
      swift_once();
    }
    uint64_t v31 = *(void *)(v0 + 448);
    uint64_t v32 = *(void *)(v0 + 456);
    char v33 = *(unsigned char *)(v0 + 425);
    sub_100012E74(v44, (uint64_t)qword_1001E6070);
    sub_1000B2884(v31, v32, v33);
    sub_1000B2884(v31, v32, v33);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    char v37 = *(unsigned char *)(v0 + 425);
    uint64_t v39 = *(void *)(v0 + 448);
    uint64_t v38 = *(void *)(v0 + 456);
    if (v36)
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v41 = sub_100130B58(v39, v38, v37);
      *(void *)(v0 + 432) = sub_100147668(v41, v42, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000B28F0(v39, v38, v37);
      sub_1000B28F0(v39, v38, v37);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Encountered error while completing story for app: '%s'", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000B28F0(*(void *)(v0 + 448), *(void *)(v0 + 456), *(unsigned char *)(v0 + 425));
      sub_1000B28F0(v39, v38, v37);
    }
    swift_errorRelease();

    swift_task_dealloc();
    uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
    return v43();
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 504);
    uint64_t v17 = *(void *)(v0 + 464);
    sub_10013E21C(v2, v16);
    sub_100012960(&qword_1001E47E8);
    uint64_t inited = (_OWORD *)swift_initStackObject();
    inited[1] = xmmword_100179990;
    sub_10009485C(6, 8, 0, 0, 0, 0, 2, 2, (_OWORD *)(v0 + 240), 2u, 2u, 2u, 0, 1u, 0, 1u, 3u, 0, 1u,
      0,
      1u,
      2u,
      3u,
      0,
      1u,
      0,
      0,
      2u);
    long long v19 = *(_OWORD *)(v0 + 240);
    long long v20 = *(_OWORD *)(v0 + 256);
    long long v21 = *(_OWORD *)(v0 + 288);
    inited[4] = *(_OWORD *)(v0 + 272);
    inited[5] = v21;
    inited[2] = v19;
    inited[3] = v20;
    long long v22 = *(_OWORD *)(v0 + 304);
    long long v23 = *(_OWORD *)(v0 + 320);
    long long v24 = *(_OWORD *)(v0 + 352);
    inited[8] = *(_OWORD *)(v0 + 336);
    inited[9] = v24;
    inited[6] = v22;
    inited[7] = v23;
    long long v25 = *(_OWORD *)(v0 + 368);
    long long v26 = *(_OWORD *)(v0 + 384);
    long long v27 = *(_OWORD *)(v0 + 400);
    *(_OWORD *)((char *)inited + 201) = *(_OWORD *)(v0 + 409);
    inited[11] = v26;
    inited[12] = v27;
    inited[10] = v25;
    sub_1000145F0((uint64_t)inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    *(unsigned char *)(v16 + *(int *)(v1 + 36)) = 1;
    *(void *)(v0 + 528) = *(void *)(v17 + 120);
    unint64_t v28 = *(void **)(v17 + 128);
    *(void *)(v0 + 536) = v28;
    uint64_t v45 = (uint64_t (*)(void))((char *)&dword_1001E47A0 + dword_1001E47A0);
    swift_bridgeObjectRetain();
    v28;
    swift_retain();
    id v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v29;
    *id v29 = v0;
    v29[1] = sub_100132680;
    return v45();
  }
}

uint64_t sub_100132680()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 536);
  uint64_t v4 = *(void *)(v2 + 464);
  swift_release();
  swift_bridgeObjectRelease();

  if (v0) {
    uint64_t v5 = sub_100132ACC;
  }
  else {
    uint64_t v5 = sub_100132804;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100132804()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013286C()
{
  uint64_t v17 = v0;
  swift_deallocBox();
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v1 = *(void *)(v0 + 456);
  char v3 = *(unsigned char *)(v0 + 425);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100012E74(v4, (uint64_t)qword_1001E6070);
  sub_1000B2884(v2, v1, v3);
  sub_1000B2884(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  char v8 = *(unsigned char *)(v0 + 425);
  uint64_t v10 = *(void *)(v0 + 448);
  uint64_t v9 = *(void *)(v0 + 456);
  if (v7)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = sub_100130B58(v10, v9, v8);
    *(void *)(v0 + 432) = sub_100147668(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B28F0(v10, v9, v8);
    sub_1000B28F0(v10, v9, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Encountered error while completing story for app: '%s'", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B28F0(*(void *)(v0 + 448), *(void *)(v0 + 456), *(unsigned char *)(v0 + 425));
    sub_1000B28F0(v10, v9, v8);
  }
  swift_errorRelease();

  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100132ACC()
{
  uint64_t v17 = v0;
  swift_release();
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v1 = *(void *)(v0 + 456);
  char v3 = *(unsigned char *)(v0 + 425);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100012E74(v4, (uint64_t)qword_1001E6070);
  sub_1000B2884(v2, v1, v3);
  sub_1000B2884(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  char v8 = *(unsigned char *)(v0 + 425);
  uint64_t v10 = *(void *)(v0 + 448);
  uint64_t v9 = *(void *)(v0 + 456);
  if (v7)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = sub_100130B58(v10, v9, v8);
    *(void *)(v0 + 432) = sub_100147668(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B28F0(v10, v9, v8);
    sub_1000B28F0(v10, v9, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Encountered error while completing story for app: '%s'", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B28F0(*(void *)(v0 + 448), *(void *)(v0 + 456), *(unsigned char *)(v0 + 425));
    sub_1000B28F0(v10, v9, v8);
  }
  swift_errorRelease();

  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100132D2C()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_100132D4C, v0, 0);
}

uint64_t sub_100132D4C()
{
  sub_100012D78((void *)(*(void *)(v0 + 64) + 136), *(void *)(*(void *)(v0 + 64) + 160));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  void *v1 = v0;
  v1[1] = sub_100132DEC;
  return sub_100016E98();
}

uint64_t sub_100132DEC(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  if (a1)
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v3 + 80) = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_100132F68;
    uint64_t v6 = *(void *)(v3 + 64);
    v5[85] = v6;
    return _swift_task_switch(sub_100133834, v6, 0);
  }
  else
  {
    BOOL v7 = *(uint64_t (**)(void))(v4 + 8);
    return v7();
  }
}

uint64_t sub_100132F68()
{
  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[8];
    uint64_t v4 = sub_10013341C;
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v2[12] = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_1001330C8;
    uint64_t v3 = v2[8];
    v5[110] = v3;
    uint64_t v4 = sub_1001353E0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001330C8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_100133618;
  }
  else {
    uint64_t v4 = sub_1001331F4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001331F4()
{
  *(void *)(v0 + 112) = sub_100012D78((void *)(*(void *)(v0 + 64) + 136), *(void *)(*(void *)(v0 + 64) + 160));
  return _swift_task_switch(sub_100133268, 0, 0);
}

uint64_t sub_100133268()
{
  sub_100029CD8(*(void *)(v0 + 112), v0 + 16);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  void *v1 = v0;
  v1[1] = sub_10013331C;
  return sub_100026494(0xD000000000000010, 0x8000000100186DC0);
}

uint64_t sub_10013331C()
{
  uint64_t v1 = *v0 + 16;
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_10013DCB4(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_10013341C()
{
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "encountered error during pending event flush %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100133618()
{
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "encountered error during pending event flush %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100133814()
{
  *(void *)(v1 + 680) = v0;
  return _swift_task_switch(sub_100133834, v0, 0);
}

uint64_t sub_100133834()
{
  uint64_t v1 = (void *)v0[85];
  uint64_t v2 = v1[14];
  v0[86] = v2;
  uint64_t v3 = v1[15];
  v0[87] = v3;
  uint64_t v4 = (void *)v1[16];
  v0[88] = v4;
  char v8 = (char *)&dword_1001E4740 + dword_1001E4740;
  swift_bridgeObjectRetain();
  id v5 = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[89] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100133934;
  return ((uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), void, uint64_t, uint64_t, id))v8)(sub_1001350E0, 0, v2, v3, v5);
}

uint64_t sub_100133934(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  id v5 = (void *)*v2;
  v4[90] = a1;
  v4[91] = v1;
  swift_task_dealloc();
  uint64_t v6 = (void *)v3[88];
  if (v1)
  {
    swift_bridgeObjectRelease();

    uint64_t v7 = (uint64_t (*)(void))v5[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v4[85];
    swift_bridgeObjectRelease();

    return _swift_task_switch(sub_100133ACC, v9, 0);
  }
}

uint64_t sub_100133ACC()
{
  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 736) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 680);
    uint64_t v4 = type metadata accessor for SnoutStoryModel();
    *(void *)(v0 + 744) = v4;
    uint64_t v7 = *(void *)(v4 - 8);
    *(void *)(v0 + 752) = v7;
    int v8 = *(_DWORD *)(v7 + 80);
    *(_DWORD *)(v0 + 436) = v8;
    *(void *)(v0 + 760) = 0;
    if (*(void *)(v1 + 16))
    {
      uint64_t v9 = v4;
      uint64_t v10 = v1 + ((v8 + 32) & ~(unint64_t)v8);
      uint64_t v11 = swift_allocBox();
      uint64_t v13 = v12;
      *(void *)(v0 + 768) = v11;
      *(void *)(v0 + 776) = v12;
      sub_10013EC80(v10, v12, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
      swift_beginAccess();
      uint64_t v14 = *(int *)(v9 + 40);
      uint64_t v15 = *(void *)(v13 + v14);
      *(void *)(v13 + v14) = _swiftEmptyArrayStorage;
      uint64_t v16 = sub_10011E604(v15, v13);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 784) = sub_100012D78((void *)(v3 + 136), *(void *)(v3 + 160));
      int64_t v17 = v16[2];
      if (v17)
      {
        __dst = (void *)(v0 + 16);
        uint64_t v33 = v0 + 520;
        *(void *)(v0 + 672) = _swiftEmptyArrayStorage;
        sub_10013A7C8(0, v17, 0);
        uint64_t v18 = *(void **)(v0 + 672);
        unint64_t v19 = sub_10013DE1C();
        int64_t v37 = v17 - 1;
        uint64_t v20 = 32;
        os_log_type_t v35 = v16;
        unint64_t v32 = v19;
        while (1)
        {
          uint64_t v36 = v20;
          long long v21 = (char *)v16 + v20;
          memcpy(__dst, (char *)v16 + v20, 0x1A1uLL);
          *(void *)(v0 + 544) = &type metadata for SnoutEventPayload;
          *(void *)(v0 + 552) = v19;
          uint64_t v22 = swift_allocObject();
          *(void *)(v0 + 520) = v22;
          memmove((void *)(v22 + 16), v21, 0x1A1uLL);
          sub_10013DF48((uint64_t)__dst);
          *(void *)(v0 + 672) = v18;
          unint64_t v24 = v18[2];
          unint64_t v23 = v18[3];
          if (v24 >= v23 >> 1)
          {
            sub_10013A7C8(v23 > 1, v24 + 1, 1);
            uint64_t v18 = *(void **)(v0 + 672);
          }
          uint64_t v25 = *(void *)(v0 + 544);
          uint64_t v26 = sub_10004DD80(v33, v25);
          uint64_t v27 = *(void *)(v25 - 8);
          unint64_t v28 = (const void *)swift_task_alloc();
          (*(void (**)(const void *, uint64_t, uint64_t))(v27 + 16))(v28, v26, v25);
          *(void *)(v0 + 504) = &type metadata for SnoutEventPayload;
          *(void *)(v0 + 512) = v32;
          uint64_t v29 = swift_allocObject();
          *(void *)(v0 + 480) = v29;
          memmove((void *)(v29 + 16), v28, 0x1A1uLL);
          v18[2] = v24 + 1;
          sub_100012D60((long long *)(v0 + 480), (uint64_t)&v18[5 * v24 + 4]);
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v33);
          swift_task_dealloc();
          if (!v37) {
            break;
          }
          unint64_t v19 = v32;
          --v37;
          uint64_t v16 = v35;
          uint64_t v20 = v36 + 424;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = _swiftEmptyArrayStorage;
      }
      *(void *)(v0 + 792) = v18;
      uint64_t v4 = (uint64_t)sub_100133EB8;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      __break(1u);
    }
    return _swift_task_switch(v4, v5, v6);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
}

uint64_t sub_100133EB8()
{
  sub_100029CD8(v0[98], (uint64_t)(v0 + 75));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[100] = (uint64_t)v1;
  void *v1 = v0;
  v1[1] = sub_100133F5C;
  uint64_t v2 = v0[99];
  return sub_100025380(v2);
}

uint64_t sub_100133F5C()
{
  uint64_t v1 = *(void *)v0 + 600;
  uint64_t v2 = *(void *)(*(void *)v0 + 680);
  swift_task_dealloc();
  sub_10013DCB4(v1);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10013409C, v2, 0);
}

uint64_t sub_10013409C()
{
  uint64_t v1 = (void *)v0[88];
  if (*(unsigned char *)(v0[97] + *(int *)(v0[93] + 36)) == 1)
  {
    uint64_t v2 = sub_100134168;
    swift_bridgeObjectRetain();
    id v3 = v1;
    swift_retain();
  }
  else
  {
    uint64_t v2 = sub_100134920;
    swift_retain();
    swift_bridgeObjectRetain();
    id v4 = v1;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100134168()
{
  uint64_t v1 = v0[96];
  uint64_t v2 = (void *)v0[88];
  uint64_t v3 = v0[87];
  uint64_t v4 = v0[86];
  v0[58] = &type metadata for SnoutDatabaseStore;
  v0[59] = &off_1001E14A0;
  v0[55] = v4;
  v0[56] = v3;
  v0[57] = v2;
  id v5 = v2;
  swift_bridgeObjectRetain();
  id v6 = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[101] = v7;
  _OWORD v7[2] = v6;
  void v7[3] = v0 + 55;
  v7[4] = sub_10013E1AC;
  _OWORD v7[5] = v1;
  int v8 = (void *)swift_task_alloc();
  v0[102] = v8;
  *int v8 = v0;
  v8[1] = sub_1001342B4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100140500, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_1001342B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 824) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1001347F8;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = v2 + 440;
    id v6 = *(void **)(v2 + 704);
    uint64_t v7 = *(void *)(v2 + 680);

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v5);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_100134420;
    uint64_t v4 = v7;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100134420()
{
  uint64_t v1 = *(void *)(v0 + 760);
  uint64_t v2 = *(void *)(v0 + 736);
  uint64_t v3 = (uint64_t (*)())swift_release();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    id v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    unint64_t v8 = *(void *)(v0 + 760) + 1;
    *(void *)(v0 + 760) = v8;
    uint64_t v9 = *(void *)(v0 + 720);
    if (v8 >= *(void *)(v9 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + 744);
      uint64_t v11 = *(void *)(v0 + 680);
      uint64_t v12 = v9
          + ((*(unsigned __int8 *)(v0 + 436) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 436))
          + *(void *)(*(void *)(v0 + 752) + 72) * v8;
      uint64_t v13 = swift_allocBox();
      uint64_t v15 = v14;
      *(void *)(v0 + 768) = v13;
      *(void *)(v0 + 776) = v14;
      sub_10013EC80(v12, v14, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
      swift_beginAccess();
      uint64_t v16 = *(int *)(v10 + 40);
      uint64_t v17 = *(void *)(v15 + v16);
      *(void *)(v15 + v16) = _swiftEmptyArrayStorage;
      uint64_t v18 = sub_10011E604(v17, v15);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 784) = sub_100012D78((void *)(v11 + 136), *(void *)(v11 + 160));
      int64_t v19 = v18[2];
      if (v19)
      {
        __dst = (void *)(v0 + 16);
        uint64_t v33 = v0 + 520;
        *(void *)(v0 + 672) = _swiftEmptyArrayStorage;
        sub_10013A7C8(0, v19, 0);
        uint64_t v20 = *(void **)(v0 + 672);
        unint64_t v21 = sub_10013DE1C();
        int64_t v37 = v19 - 1;
        uint64_t v22 = 32;
        os_log_type_t v35 = v18;
        unint64_t v32 = v21;
        while (1)
        {
          uint64_t v36 = v22;
          unint64_t v23 = (char *)v18 + v22;
          memcpy(__dst, (char *)v18 + v22, 0x1A1uLL);
          *(void *)(v0 + 544) = &type metadata for SnoutEventPayload;
          *(void *)(v0 + 552) = v21;
          uint64_t v24 = swift_allocObject();
          *(void *)(v0 + 520) = v24;
          memmove((void *)(v24 + 16), v23, 0x1A1uLL);
          sub_10013DF48((uint64_t)__dst);
          *(void *)(v0 + 672) = v20;
          unint64_t v26 = v20[2];
          unint64_t v25 = v20[3];
          if (v26 >= v25 >> 1)
          {
            sub_10013A7C8(v25 > 1, v26 + 1, 1);
            uint64_t v20 = *(void **)(v0 + 672);
          }
          uint64_t v27 = *(void *)(v0 + 544);
          uint64_t v28 = sub_10004DD80(v33, v27);
          uint64_t v29 = *(void *)(v27 - 8);
          id v30 = (const void *)swift_task_alloc();
          (*(void (**)(const void *, uint64_t, uint64_t))(v29 + 16))(v30, v28, v27);
          *(void *)(v0 + 504) = &type metadata for SnoutEventPayload;
          *(void *)(v0 + 512) = v32;
          uint64_t v31 = swift_allocObject();
          *(void *)(v0 + 480) = v31;
          memmove((void *)(v31 + 16), v30, 0x1A1uLL);
          v20[2] = v26 + 1;
          sub_100012D60((long long *)(v0 + 480), (uint64_t)&v20[5 * v26 + 4]);
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v33);
          swift_task_dealloc();
          if (!v37) {
            break;
          }
          unint64_t v21 = v32;
          --v37;
          uint64_t v18 = v35;
          uint64_t v22 = v36 + 424;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = _swiftEmptyArrayStorage;
      }
      *(void *)(v0 + 792) = v20;
      uint64_t v3 = sub_100133EB8;
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    return _swift_task_switch(v3, v4, v5);
  }
}

uint64_t sub_1001347F8()
{
  uint64_t v1 = *(void **)(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 680);

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 440);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001348BC, v2, 0);
}

uint64_t sub_1001348BC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100134920()
{
  uint64_t v1 = v0[96];
  uint64_t v2 = (void *)v0[88];
  uint64_t v3 = v0[87];
  uint64_t v4 = v0[86];
  v0[73] = &type metadata for SnoutDatabaseStore;
  v0[74] = &off_1001E14A0;
  v0[70] = v4;
  v0[71] = v3;
  v0[72] = v2;
  id v5 = v2;
  swift_bridgeObjectRetain();
  id v6 = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[104] = v7;
  _OWORD v7[2] = v6;
  void v7[3] = v0 + 70;
  v7[4] = sub_10013E190;
  _OWORD v7[5] = v1;
  unint64_t v8 = (void *)swift_task_alloc();
  v0[105] = v8;
  *unint64_t v8 = v0;
  v8[1] = sub_100134A74;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001BLL, 0x8000000100186A10, sub_100140500, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100134A74()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 848) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100134FB8;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = v2 + 560;
    id v6 = *(void **)(v2 + 704);
    uint64_t v7 = *(void *)(v2 + 680);

    swift_task_dealloc();
    _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v5);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = sub_100134BE0;
    uint64_t v4 = v7;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100134BE0()
{
  uint64_t v1 = *(void *)(v0 + 760);
  uint64_t v2 = *(void *)(v0 + 736);
  uint64_t v3 = (uint64_t (*)())swift_release();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    id v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    unint64_t v8 = *(void *)(v0 + 760) + 1;
    *(void *)(v0 + 760) = v8;
    uint64_t v9 = *(void *)(v0 + 720);
    if (v8 >= *(void *)(v9 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + 744);
      uint64_t v11 = *(void *)(v0 + 680);
      uint64_t v12 = v9
          + ((*(unsigned __int8 *)(v0 + 436) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 436))
          + *(void *)(*(void *)(v0 + 752) + 72) * v8;
      uint64_t v13 = swift_allocBox();
      uint64_t v15 = v14;
      *(void *)(v0 + 768) = v13;
      *(void *)(v0 + 776) = v14;
      sub_10013EC80(v12, v14, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
      swift_beginAccess();
      uint64_t v16 = *(int *)(v10 + 40);
      uint64_t v17 = *(void *)(v15 + v16);
      *(void *)(v15 + v16) = _swiftEmptyArrayStorage;
      uint64_t v18 = sub_10011E604(v17, v15);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 784) = sub_100012D78((void *)(v11 + 136), *(void *)(v11 + 160));
      int64_t v19 = v18[2];
      if (v19)
      {
        __dst = (void *)(v0 + 16);
        uint64_t v33 = v0 + 520;
        *(void *)(v0 + 672) = _swiftEmptyArrayStorage;
        sub_10013A7C8(0, v19, 0);
        uint64_t v20 = *(void **)(v0 + 672);
        unint64_t v21 = sub_10013DE1C();
        int64_t v37 = v19 - 1;
        uint64_t v22 = 32;
        os_log_type_t v35 = v18;
        unint64_t v32 = v21;
        while (1)
        {
          uint64_t v36 = v22;
          unint64_t v23 = (char *)v18 + v22;
          memcpy(__dst, (char *)v18 + v22, 0x1A1uLL);
          *(void *)(v0 + 544) = &type metadata for SnoutEventPayload;
          *(void *)(v0 + 552) = v21;
          uint64_t v24 = swift_allocObject();
          *(void *)(v0 + 520) = v24;
          memmove((void *)(v24 + 16), v23, 0x1A1uLL);
          sub_10013DF48((uint64_t)__dst);
          *(void *)(v0 + 672) = v20;
          unint64_t v26 = v20[2];
          unint64_t v25 = v20[3];
          if (v26 >= v25 >> 1)
          {
            sub_10013A7C8(v25 > 1, v26 + 1, 1);
            uint64_t v20 = *(void **)(v0 + 672);
          }
          uint64_t v27 = *(void *)(v0 + 544);
          uint64_t v28 = sub_10004DD80(v33, v27);
          uint64_t v29 = *(void *)(v27 - 8);
          id v30 = (const void *)swift_task_alloc();
          (*(void (**)(const void *, uint64_t, uint64_t))(v29 + 16))(v30, v28, v27);
          *(void *)(v0 + 504) = &type metadata for SnoutEventPayload;
          *(void *)(v0 + 512) = v32;
          uint64_t v31 = swift_allocObject();
          *(void *)(v0 + 480) = v31;
          memmove((void *)(v31 + 16), v30, 0x1A1uLL);
          v20[2] = v26 + 1;
          sub_100012D60((long long *)(v0 + 480), (uint64_t)&v20[5 * v26 + 4]);
          _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v33);
          swift_task_dealloc();
          if (!v37) {
            break;
          }
          unint64_t v21 = v32;
          --v37;
          uint64_t v18 = v35;
          uint64_t v22 = v36 + 424;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = _swiftEmptyArrayStorage;
      }
      *(void *)(v0 + 792) = v20;
      uint64_t v3 = sub_100133EB8;
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    return _swift_task_switch(v3, v4, v5);
  }
}

uint64_t sub_100134FB8()
{
  uint64_t v1 = *(void **)(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 680);

  swift_task_dealloc();
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 560);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10013507C, v2, 0);
}

uint64_t sub_10013507C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001350E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000D430C();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100135110(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = type metadata accessor for SnoutStoryModel();
  uint64_t v10 = swift_projectBox();
  swift_beginAccess();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11(v8, v10 + *(int *)(v9 + 20), v2);
  id v12 = [a1 connection];
  NSString v13 = String._bridgeToObjectiveC()();
  v11(v6, (uint64_t)v8, v2);
  uint64_t v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v15 = [self predicateWithProperty:v13 equalToValue:v14];
  swift_unknownObjectRelease();

  id v16 = sub_10011C244(v12, v15, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (([v16 deleteAllEntities] & 1) == 0)
  {
    type metadata accessor for AKSQLError(0);
    uint64_t v18 = 8;
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_10013FAC4((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_1001353C0()
{
  *(void *)(v1 + 880) = v0;
  return _swift_task_switch(sub_1001353E0, v0, 0);
}

uint64_t sub_1001353E0()
{
  uint64_t v1 = (void *)v0[110];
  uint64_t v2 = v1[14];
  v0[111] = v2;
  uint64_t v3 = v1[15];
  v0[112] = v3;
  uint64_t v4 = (void *)v1[16];
  v0[113] = v4;
  unint64_t v8 = (char *)&dword_1001E4798 + dword_1001E4798;
  swift_bridgeObjectRetain();
  id v5 = v4;
  id v6 = (void *)swift_task_alloc();
  v0[114] = v6;
  *id v6 = v0;
  v6[1] = sub_1001354E0;
  return ((uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), void, uint64_t, uint64_t, id))v8)(sub_100135CC0, 0, v2, v3, v5);
}

uint64_t sub_1001354E0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void **)(*v2 + 904);
  uint64_t v5 = *v2;
  *(void *)(*v2 + 920) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 880);
    return _swift_task_switch(sub_10013566C, v8, 0);
  }
}

uint64_t sub_10013566C()
{
  uint64_t v1 = *(void *)(v0 + 920);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (const void *)(v0 + 16);
    uint64_t v4 = (_OWORD *)(v0 + 440);
    uint64_t v5 = (_OWORD *)(v0 + 648);
    sub_10013A7F8(0, v2, 0);
    id v6 = (_OWORD *)(v1 + 32);
    for (int64_t i = v2 - 1; ; --i)
    {
      long long v8 = v6[1];
      long long v9 = v6[2];
      long long v10 = v6[3];
      *(_OWORD *)(v0 + 504) = v6[4];
      long long v11 = v6[5];
      long long v12 = v6[6];
      long long v13 = v6[8];
      *(_OWORD *)(v0 + 552) = v6[7];
      *(_OWORD *)(v0 + 568) = v13;
      *(_OWORD *)(v0 + 520) = v11;
      *(_OWORD *)(v0 + 536) = v12;
      long long v14 = v6[9];
      long long v15 = v6[10];
      long long v16 = v6[11];
      *(_OWORD *)(v0 + 625) = *(_OWORD *)((char *)v6 + 185);
      *(_OWORD *)(v0 + 600) = v15;
      *(_OWORD *)(v0 + 616) = v16;
      *(_OWORD *)(v0 + 584) = v14;
      *(_OWORD *)(v0 + 472) = v9;
      *(_OWORD *)(v0 + 488) = v10;
      *(_OWORD *)(v0 + 456) = v8;
      *uint64_t v4 = *v6;
      long long v17 = *(_OWORD *)(v0 + 504);
      *(_OWORD *)(v0 + 680) = *(_OWORD *)(v0 + 488);
      *(_OWORD *)(v0 + 696) = v17;
      long long v18 = *(_OWORD *)(v0 + 472);
      *uint64_t v5 = *(_OWORD *)(v0 + 456);
      *(_OWORD *)(v0 + 664) = v18;
      long long v19 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 744) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 760) = v19;
      long long v20 = *(_OWORD *)(v0 + 536);
      *(_OWORD *)(v0 + 712) = *(_OWORD *)(v0 + 520);
      *(_OWORD *)(v0 + 728) = v20;
      *(_OWORD *)(v0 + 817) = *(_OWORD *)(v0 + 625);
      long long v21 = *(_OWORD *)(v0 + 616);
      long long v22 = *(_OWORD *)(v0 + 584);
      *(_OWORD *)(v0 + 792) = *(_OWORD *)(v0 + 600);
      *(_OWORD *)(v0 + 808) = v21;
      *(_OWORD *)(v0 + 776) = v22;
      sub_10008F9E8((uint64_t)v4);
      sub_100098E38((uint64_t)v5, 0, 0, (uint64_t)v3);
      sub_10011B878((uint64_t)v4);
      unint64_t v24 = _swiftEmptyArrayStorage[2];
      unint64_t v23 = _swiftEmptyArrayStorage[3];
      if (v24 >= v23 >> 1) {
        sub_10013A7F8(v23 > 1, v24 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v24 + 1;
      memcpy(&_swiftEmptyArrayStorage[53 * v24 + 4], v3, 0x1A1uLL);
      if (!i) {
        break;
      }
      v6 += 13;
    }
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 928) = sub_100012D78((void *)(*(void *)(v0 + 880) + 136), *(void *)(*(void *)(v0 + 880) + 160));
  *(void *)(v0 + 936) = sub_10011F134((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100135880, 0, 0);
}

uint64_t sub_100135880()
{
  sub_100029CD8(v0[116], (uint64_t)(v0 + 105));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[118] = (uint64_t)v1;
  void *v1 = v0;
  v1[1] = sub_100135924;
  uint64_t v2 = v0[117];
  return sub_100025380(v2);
}

uint64_t sub_100135924()
{
  uint64_t v1 = *(void *)v0 + 840;
  uint64_t v2 = *(void *)(*(void *)v0 + 880);
  swift_task_dealloc();
  sub_10013DCB4(v1);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100135A64, v2, 0);
}

uint64_t sub_100135A64()
{
  uint64_t v1 = *(void **)(v0 + 904);
  uint64_t v5 = (uint64_t (*)(void))((char *)&dword_1001E47A0 + dword_1001E47A0);
  swift_bridgeObjectRetain();
  id v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 952) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100135B40;
  return v5();
}

uint64_t sub_100135B40()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 904);
  *(void *)(*v1 + 960) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v2 + 880);
  if (v0) {
    uint64_t v5 = sub_100135CA8;
  }
  else {
    uint64_t v5 = sub_1000EB1AC;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100135CA8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100135CC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000D4958();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

void sub_100135CF0(void *a1)
{
  id v1 = [a1 connection];
  id v2 = sub_10011C5F0(v1, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (![v2 deleteAllEntities])
  {
    type metadata accessor for AKSQLError(0);
    sub_100138FA8((uint64_t)_swiftEmptyArrayStorage);
    sub_10013FAC4((unint64_t *)&qword_1001E1200, type metadata accessor for AKSQLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

void sub_100135DFC()
{
}

uint64_t sub_100135E28(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for SnoutStoryModel();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[9] = v5;
  v2[10] = *(void *)(v5 + 64);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100135F4C, v1, 0);
}

uint64_t sub_100135F4C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v7 = v5[14];
  uint64_t v6 = v5[15];
  v0[12] = v6;
  long long v8 = (void *)v5[16];
  v0[13] = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  v0[14] = v10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v2);
  long long v14 = (uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4740 + dword_1001E4740);
  swift_bridgeObjectRetain();
  id v11 = v8;
  long long v12 = (void *)swift_task_alloc();
  v0[15] = v12;
  *long long v12 = v0;
  v12[1] = sub_1001360BC;
  return v14(sub_10013DC34, v10, v7, v6, v11);
}

uint64_t sub_1001360BC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 104);
  *(void *)(v4 + 128) = a1;
  *(void *)(v4 + 136) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v6 = *(void *)(v3 + 32);
  if (v1) {
    uint64_t v7 = sub_1001368A0;
  }
  else {
    uint64_t v7 = sub_100136248;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100136248()
{
  uint64_t v22 = v0;
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_100147668(v5, v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Stories: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v8 + 16);
  *(void *)(v0 + 144) = v9;
  if (v9)
  {
    uint64_t v11 = *(void *)(v0 + 40);
    uint64_t v10 = *(void *)(v0 + 48);
    int v12 = *(_DWORD *)(v10 + 80);
    *(_DWORD *)(v0 + 192) = v12;
    *(void *)(v0 + 152) = *(void *)(v10 + 72);
    *(void *)(v0 + 160) = 0;
    uint64_t v13 = *(void *)(v0 + 56);
    sub_10013EC80(v8 + ((v12 + 32) & ~(unint64_t)v12), v13, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
    long long v14 = (uint64_t *)(v13 + *(int *)(v11 + 28));
    uint64_t v15 = v14[1];
    *(void *)(v0 + 168) = v15;
    if (v15)
    {
      char v16 = 1;
    }
    else
    {
      char v16 = 0;
      long long v14 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 40) + 24));
    }
    *(unsigned char *)(v0 + 196) = v16;
    uint64_t v19 = *v14;
    *(void *)(v0 + 176) = *v14;
    swift_bridgeObjectRetain();
    long long v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v20;
    void *v20 = v0;
    v20[1] = sub_10013658C;
    return sub_100131BD0(v19, v15, v16);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

uint64_t sub_10013658C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  uint64_t v2 = *(void *)(*(void *)v0 + 168);
  uint64_t v3 = *(void *)(*(void *)v0 + 32);
  char v4 = *(unsigned char *)(*(void *)v0 + 196);
  swift_task_dealloc();
  sub_1000B28F0(v1, v2, v4);
  return _swift_task_switch(sub_1001366E0, v3, 0);
}

uint64_t sub_1001366E0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 160) + 1;
  sub_10013ECE8(*(void *)(v0 + 56), (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 160) + 1;
    *(void *)(v0 + 160) = v6;
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 40);
    sub_10013EC80(*(void *)(v0 + 128)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ v5 * v6, v7, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
    uint64_t v9 = (uint64_t *)(v7 + *(int *)(v8 + 28));
    uint64_t v10 = v9[1];
    *(void *)(v0 + 168) = v10;
    if (v10)
    {
      char v11 = 1;
    }
    else
    {
      char v11 = 0;
      uint64_t v9 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 40) + 24));
    }
    *(unsigned char *)(v0 + 196) = v11;
    uint64_t v12 = *v9;
    *(void *)(v0 + 176) = *v9;
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10013658C;
    return sub_100131BD0(v12, v10, v11);
  }
}

uint64_t sub_1001368A0()
{
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    char v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to complete expired stories", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001369D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[71] = v3;
  v4[70] = a3;
  v4[69] = a2;
  v4[68] = a1;
  uint64_t v5 = sub_100012960(&qword_1001E1370);
  v4[72] = v5;
  v4[73] = *(void *)(v5 - 8);
  v4[74] = swift_task_alloc();
  return _swift_task_switch(sub_100136AA4, v3, 0);
}

uint64_t sub_100136AA4()
{
  uint64_t v21 = v0;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100012960(&qword_1001E3D20);
  sub_10013DAA8(&qword_1001E4788, (void (*)(void))sub_10013DB18);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v19 = *(void *)(v0 + 528);
  uint64_t v1 = *(void *)(v19 + 16);
  if (v1)
  {
    uint64_t v2 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 584) + 8);
    uint64_t v3 = v1 - 1;
    for (uint64_t i = 32; ; i += 80)
    {
      uint64_t v5 = *(void *)(v0 + 592);
      uint64_t v6 = *(void *)(v0 + 576);
      uint64_t v7 = *(void *)(v0 + 560);
      *(_OWORD *)(v0 + 448) = *(_OWORD *)(v19 + i);
      long long v8 = *(_OWORD *)(v19 + i + 16);
      long long v9 = *(_OWORD *)(v19 + i + 32);
      long long v10 = *(_OWORD *)(v19 + i + 48);
      *(_OWORD *)(v0 + 505) = *(_OWORD *)(v19 + i + 57);
      *(_OWORD *)(v0 + 480) = v9;
      *(_OWORD *)(v0 + 496) = v10;
      *(_OWORD *)(v0 + 464) = v8;
      sub_10013DB6C(v0 + 448);
      sub_100094DC0((unsigned __int8 *)(v0 + 448), v20);
      long long v11 = v20[9];
      *(_OWORD *)(v0 + 144) = v20[8];
      *(_OWORD *)(v0 + 160) = v11;
      long long v12 = v20[11];
      *(_OWORD *)(v0 + 176) = v20[10];
      *(_OWORD *)(v0 + 192) = v12;
      long long v13 = v20[5];
      *(_OWORD *)(v0 + 80) = v20[4];
      *(_OWORD *)(v0 + 96) = v13;
      long long v14 = v20[7];
      *(_OWORD *)(v0 + 112) = v20[6];
      *(_OWORD *)(v0 + 128) = v14;
      long long v15 = v20[1];
      *(_OWORD *)(v0 + 16) = v20[0];
      *(_OWORD *)(v0 + 32) = v15;
      long long v16 = v20[3];
      *(_OWORD *)(v0 + 48) = v20[2];
      *(_OWORD *)(v0 + 64) = v16;
      *(void *)(v0 + 208) = v7;
      *(void *)(v0 + 216) = 0;
      *(_WORD *)(v0 + 224) = 0;
      sub_10003675C(v0 + 16);
      sub_1000367C8(v0 + 16, v0 + 232);
      sub_100012960(&qword_1001E1388);
      AsyncStream.Continuation.yield(_:)();
      (*v2)(v5, v6);
      if (!v3) {
        break;
      }
      --v3;
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  long long v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100136E88(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 144) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  sub_100012960(&qword_1001E3A68);
  *(void *)(v5 + 48) = swift_task_alloc();
  *(void *)(v5 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_100136F34, v4, 0);
}

uint64_t sub_100136F34()
{
  if (!*(unsigned char *)(v0 + 144))
  {
    long long v16 = *(void **)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 24);
    uint64_t v19 = v16[14];
    uint64_t v18 = v16[15];
    *(void *)(v0 + 104) = v18;
    long long v20 = (void *)v16[16];
    *(void *)(v0 + 112) = v20;
    uint64_t v21 = swift_allocObject();
    *(void *)(v0 + 120) = v21;
    *(void *)(v21 + 16) = v17;
    uint64_t v28 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4760
                                                                                 + dword_1001E4760);
    swift_bridgeObjectRetain();
    id v22 = v20;
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100137368;
    uint64_t v10 = *(void *)(v0 + 56);
    long long v11 = sub_1001404E0;
    uint64_t v12 = v21;
    uint64_t v13 = v19;
    uint64_t v14 = v18;
    id v15 = v22;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v0 + 144) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v1 = *(void **)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v5 = v1[14];
    uint64_t v4 = v1[15];
    *(void *)(v0 + 64) = v4;
    uint64_t v6 = (void *)v1[16];
    *(void *)(v0 + 72) = v6;
    uint64_t v7 = swift_allocObject();
    *(void *)(v0 + 80) = v7;
    *(void *)(v7 + 16) = v3;
    *(void *)(v7 + 24) = v2;
    sub_1000B2884(v3, v2, 1);
    uint64_t v28 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, id))((char *)&dword_1001E4760
                                                                                 + dword_1001E4760);
    swift_bridgeObjectRetain();
    id v8 = v6;
    long long v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v9;
    *long long v9 = v0;
    v9[1] = sub_1001371E4;
    uint64_t v10 = *(void *)(v0 + 48);
    long long v11 = sub_10013D930;
    uint64_t v12 = v7;
    uint64_t v13 = v5;
    uint64_t v14 = v4;
    id v15 = v8;
LABEL_5:
    return v28(v10, v11, v12, v13, v14, v15);
  }
  uint64_t v25 = *(void *)(v0 + 16);
  uint64_t v26 = type metadata accessor for SnoutStoryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_1001371E4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 72);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v5 = sub_100137658;
  }
  else {
    uint64_t v5 = sub_10013756C;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100137368()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 112);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v5 = sub_1001375EC;
  }
  else {
    uint64_t v5 = sub_1001374EC;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001374EC()
{
  sub_100059F98(v0[7], v0[2], &qword_1001E3A68);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10013756C()
{
  sub_100059F98(v0[6], v0[2], &qword_1001E3A68);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001375EC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100137658()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001376C4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_100012960(&qword_1001E3A68);
  __chkstk_darwin(v9 - 8);
  long long v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v12 = [a1 connection];
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  swift_bridgeObjectRetain();
  uint64_t v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v15 = [self predicateWithProperty:v13 equalToValue:v14];
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  id v16 = sub_10011C244(v12, v15, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  uint64_t v17 = type metadata accessor for SnoutStoryModel();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 1, 1, v17);
  uint64_t v19 = v11;
  sub_10012792C((uint64_t)sub_10013DA28, (uint64_t)v18, v16);
  if (v4) {
    sub_100019960((uint64_t)v11, &qword_1001E3A68);
  }
  else {
    sub_100059F98((uint64_t)v11, a4, &qword_1001E3A68);
  }
}

uint64_t sub_1001378E0()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_100137900, v0, 0);
}

uint64_t sub_100137900()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v3 = v1[14];
  uint64_t v2 = v1[15];
  v0[5] = v2;
  uint64_t v4 = (void *)v1[16];
  v0[6] = v4;
  id v8 = (char *)&dword_1001E4740 + dword_1001E4740;
  swift_bridgeObjectRetain();
  id v5 = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001379F8;
  return ((uint64_t (*)(uint64_t (*)@<X0>(uint64_t *@<X8>), void, uint64_t, uint64_t, id))v8)(sub_1001407B4, 0, v3, v2, v5);
}

uint64_t sub_1001379F8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 64) = a1;
  *(void *)(v4 + 72) = v1;
  swift_task_dealloc();
  id v5 = *(void **)(v3 + 48);
  uint64_t v6 = *(void *)(v3 + 32);
  swift_bridgeObjectRelease();

  if (v1) {
    uint64_t v7 = sub_100137DE4;
  }
  else {
    uint64_t v7 = sub_100137B60;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100137B60()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[3] = v2;
  sub_100012960(&qword_1001E4748);
  sub_10013D73C();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  swift_bridgeObjectRelease();
  if (v1)
  {
    if (qword_1001E0918 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100012E74(v6, (uint64_t)qword_1001E6070);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_t log = v7;
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      v0[2] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v8, "Failed to retrieve stories: %@", v9, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
  }
  id v12 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v12(v3, v5);
}

uint64_t sub_100137DE4()
{
  if (qword_1001E0918 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100012E74(v1, (uint64_t)qword_1001E6070);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    unint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to retrieve stories: %@", v4, 0xCu);
    sub_100012960(&qword_1001E0B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
  return v7(0, 0xF000000000000000);
}

uint64_t sub_100137FE8(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return _swift_task_switch(sub_10013800C, v2, 0);
}

uint64_t sub_10013800C()
{
  uint64_t v1 = v0[5];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[2] = v1;
  sub_100012960(&qword_1001E3D20);
  sub_10013DAA8(&qword_1001E3D28, (void (*)(void))sub_100103D04);
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v4 = v3;
  swift_release();
  v0[8] = v4;
  v0[9] = v2;
  os_log_type_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001E3E58 + dword_1001E3E58);
  unint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *unint64_t v5 = v0;
  v5[1] = sub_10013835C;
  uint64_t v6 = v0[6];
  return v8(v2, v4, v6);
}

uint64_t sub_10013835C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_10013846C, v1, 0);
}

uint64_t sub_10013846C()
{
  sub_100020930(v0[9], v0[8]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001384CC()
{
  uint64_t v1 = *(void **)(v0 + 128);
  swift_bridgeObjectRelease();

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 136);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 176);
  uint64_t v2 = v0 + OBJC_IVAR____TtC20AttributionKitDaemon12SnoutManager_snoutActionStream;
  uint64_t v3 = sub_100012960(&qword_1001E47F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = v0 + OBJC_IVAR____TtC20AttributionKitDaemon12SnoutManager_snoutActionContinuation;
  uint64_t v5 = sub_100012960(&qword_1001E1388);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001385B0()
{
  return type metadata accessor for SnoutManager();
}

uint64_t type metadata accessor for SnoutManager()
{
  uint64_t result = qword_1001E4590;
  if (!qword_1001E4590) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100138604()
{
  sub_100138724(319, &qword_1001E4608, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_100138724(319, (unint64_t *)&unk_1001E4610, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100138724(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for SnoutManager.SnoutAction);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100138774(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int16 a27)
{
  int v27 = a27 >> 14;
  if (v27 == 2)
  {
LABEL_5:
    return sub_1000B2884(result, a2, a3);
  }
  if (v27 != 1)
  {
    if (v27) {
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = a25;
    a2 = a26;
    a3 = a27;
    goto LABEL_5;
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for SnoutManager.SnoutAction(uint64_t a1)
{
  return sub_1001388CC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
           *(void *)(a1 + 152),
           *(void *)(a1 + 160),
           *(void *)(a1 + 168),
           *(void *)(a1 + 176),
           *(void *)(a1 + 184),
           *(void *)(a1 + 192),
           *(void *)(a1 + 200),
           *(_WORD *)(a1 + 208));
}

uint64_t sub_1001388CC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int16 a27)
{
  int v27 = a27 >> 14;
  if (v27 == 2)
  {
LABEL_5:
    return sub_1000B28F0(result, a2, a3);
  }
  if (v27 != 1)
  {
    if (v27) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = a25;
    a2 = a26;
    a3 = a27;
    goto LABEL_5;
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SnoutManager.SnoutAction(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  uint64_t v26 = *(void *)(a2 + 176);
  uint64_t v27 = *(void *)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 192);
  uint64_t v29 = *(void *)(a2 + 200);
  unsigned __int16 v30 = *(_WORD *)(a2 + 208);
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  sub_100138774(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(void *)(a1 + 176) = v26;
  *(void *)(a1 + 184) = v27;
  *(void *)(a1 + 192) = v28;
  *(void *)(a1 + 200) = v29;
  *(_WORD *)(a1 + 208) = v30;
  return a1;
}

uint64_t assignWithCopy for SnoutManager.SnoutAction(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *(void *)(a2 + 72);
  uint64_t v33 = *(void *)(a2 + 80);
  uint64_t v34 = *(void *)(a2 + 88);
  uint64_t v35 = *(void *)(a2 + 96);
  uint64_t v36 = *(void *)(a2 + 104);
  uint64_t v37 = *(void *)(a2 + 112);
  uint64_t v38 = *(void *)(a2 + 120);
  uint64_t v39 = *(void *)(a2 + 128);
  uint64_t v40 = *(void *)(a2 + 136);
  uint64_t v41 = *(void *)(a2 + 144);
  uint64_t v42 = *(void *)(a2 + 152);
  uint64_t v43 = *(void *)(a2 + 160);
  uint64_t v44 = *(void *)(a2 + 168);
  uint64_t v45 = *(void *)(a2 + 176);
  uint64_t v46 = *(void *)(a2 + 184);
  uint64_t v47 = *(void *)(a2 + 192);
  uint64_t v48 = *(void *)(a2 + 200);
  unsigned __int16 v49 = *(_WORD *)(a2 + 208);
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  sub_100138774(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v32;
  *(void *)(a1 + 80) = v33;
  *(void *)(a1 + 88) = v34;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v35;
  *(void *)(a1 + 104) = v36;
  *(void *)(a1 + 112) = v37;
  *(void *)(a1 + 120) = v38;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v39;
  *(void *)(a1 + 136) = v40;
  *(void *)(a1 + 144) = v41;
  *(void *)(a1 + 152) = v42;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160) = v43;
  *(void *)(a1 + 168) = v44;
  *(void *)(a1 + 176) = v45;
  *(void *)(a1 + 184) = v46;
  uint64_t v28 = *(void *)(a1 + 192);
  uint64_t v29 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = v47;
  *(void *)(a1 + 200) = v48;
  unsigned __int16 v30 = *(_WORD *)(a1 + 208);
  *(_WORD *)(a1 + 208) = v49;
  sub_1001388CC(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    v29,
    v30);
  return a1;
}

__n128 initializeWithTake for SnoutManager.SnoutAction(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for SnoutManager.SnoutAction(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a2 + 208);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 160);
  long long v20 = *(_OWORD *)(a1 + 176);
  uint64_t v21 = *(void *)(a1 + 192);
  uint64_t v22 = *(void *)(a1 + 200);
  unsigned __int16 v23 = *(_WORD *)(a1 + 208);
  long long v24 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v24;
  long long v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v25;
  long long v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v26;
  long long v27 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v27;
  long long v28 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v28;
  long long v29 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v29;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_WORD *)(a1 + 208) = v4;
  sub_1001388CC(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    v22,
    v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for SnoutManager.SnoutAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 210)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 86) | ((unsigned __int16)(*(_DWORD *)(a1 + 96) >> 1) << 16);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SnoutManager.SnoutAction(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 200) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 208) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 210) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      unint64_t v4 = -a2;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 80) = v4 << 48;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = (v4 >> 15) & 0x1FFFE;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_OWORD *)(a1 + 184) = 0u;
      *(_OWORD *)(a1 + 194) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 210) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_100138F0C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 208) >> 14;
}

uint64_t sub_100138F18(uint64_t result)
{
  *(_WORD *)(result + 208) &= 0x3FFFu;
  return result;
}

uint64_t sub_100138F28(uint64_t result, __int16 a2)
{
  uint64_t v2 = *(unsigned __int8 *)(result + 184);
  uint64_t v3 = *(void *)(result + 96) & 1;
  uint64_t v4 = *(void *)(result + 112) & 0xFF01;
  uint64_t v5 = *(void *)(result + 128) & 1;
  uint64_t v6 = *(void *)(result + 144) & 0xFFFF01;
  uint64_t v7 = *(void *)(result + 160) & 1;
  __int16 v8 = *(_WORD *)(result + 208) & 0x103 | (a2 << 14);
  *(void *)(result + 80) &= 0xFFFFFFFFFFFFuLL;
  *(void *)(result + 96) = v3;
  *(void *)(result + 112) = v4;
  *(void *)(result + 128) = v5;
  *(void *)(result + 144) = v6;
  *(void *)(result + 160) = v7;
  *(void *)(result + 184) = v2;
  *(_WORD *)(result + 208) = v8;
  return result;
}

ValueMetadata *type metadata accessor for SnoutManager.SnoutAction()
{
  return &type metadata for SnoutManager.SnoutAction;
}

unint64_t sub_100138FA8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012960(&qword_1001E2E20);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100036994(v6, (uint64_t)&v15, &qword_1001E2E90);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1001390E0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100037488(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001390E0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100139158(a1, a2, v4);
}

unint64_t sub_100139158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

void *sub_1001392A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E47E8);
      char v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 192);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 4]) {
          memmove(v12, a4 + 4, 192 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013CA58(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001393C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E4778);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 4);
      BOOL v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      BOOL v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10013CB50(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001394D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100139664(a1, a2, a3, a4, &qword_1001E49C8, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
}

void *sub_100139508(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E49C0);
      char v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[26 * v8 + 4]) {
          memmove(v12, a4 + 4, 208 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013D108(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100139630(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100139664(a1, a2, a3, a4, &qword_1001E4878, (uint64_t (*)(void))type metadata accessor for ImpressionModel, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
}

uint64_t sub_100139664(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    long long v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100012960(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  long long v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10013D1FC(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_1001398E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E48A8);
      char v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013CC44(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001399E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E48B0);
      char v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013CD2C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100139B04(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E4870);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10013CE24(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100139C14(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E4868);
      char v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 224);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[28 * v8 + 4]) {
          memmove(v12, a4 + 4, 224 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013CF18(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100139D3C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10013A004(a1, a2, a3, a4, &qword_1001E16A0, &qword_1001E1690);
}

void *sub_100139D50(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E49B8);
      char v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 264);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[33 * v8 + 4]) {
          memmove(v12, a4 + 4, 264 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013D010(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100139E78(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100139664(a1, a2, a3, a4, &qword_1001E1EC8, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_100139EAC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100139664(a1, a2, a3, a4, &qword_1001E4880, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_100139EE0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E4938);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10013D358(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100139FF0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10013A004(a1, a2, a3, a4, &qword_1001E49A8, &qword_1001E2A10);
}

void *sub_10013A004(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100012960(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      void v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013D44C(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_10013A134(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E4970);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 7);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10013F998(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10013A244(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E4930);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10013D558(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10013A354(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E3CC0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4]) {
          memmove(v12, a4 + 4, 80 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013D644(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10013A474(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100012960(&qword_1001E4A00);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10013F8A0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013A5A0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10013A5D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013A818(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A5F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013A984(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A610(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013AB0C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A630(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013AC8C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A650(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013AE1C(a1, a2, a3, (void *)*v3, &qword_1001E4880, (uint64_t (*)(void))&type metadata accessor for UUID);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10013A68C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013AE1C(a1, a2, a3, (void *)*v3, &qword_1001E4878, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10013A6C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B7C8(a1, a2, a3, (void *)*v3, &qword_1001E16A0, &qword_1001E1690);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10013A6F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B078(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A718(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B1F8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A738(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B7C8(a1, a2, a3, (void *)*v3, &qword_1001E4818, &qword_1001E4820);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10013A768(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B378(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A788(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B4E4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A7A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B644(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A7C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B7C8(a1, a2, a3, (void *)*v3, &qword_1001E47B8, &qword_1001E47C0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10013A7F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B970(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10013A818(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E4778);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013A984(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E49F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013AB0C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E49F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 208 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013AC8C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E4780);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013ADFC(char a1, int64_t a2, char a3, void *a4)
{
  return sub_10013AE1C(a1, a2, a3, a4, &qword_1001E4878, (uint64_t (*)(void))type metadata accessor for ImpressionModel);
}

uint64_t sub_10013AE1C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100012960(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  _OWORD v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  long long v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013B064(char a1, int64_t a2, char a3, void *a4)
{
  return sub_10013B7C8(a1, a2, a3, a4, &qword_1001E16A0, &qword_1001E1690);
}

uint64_t sub_10013B078(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E4868);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 224);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 224 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013B1F8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E49B8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 264);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 264 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013B378(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E4950);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013B4E4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E4930);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013B644(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E49B0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013B7C8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100012960(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    void v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_100012960(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013B970(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100012960(&qword_1001E47C8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 424);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 424 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10013BAF0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, void *a6)
{
  int v47 = a5;
  uint64_t v48 = a1;
  uint64_t v10 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v10 - 8);
  uint64_t v40 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100012960(&qword_1001E4988);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100012960(&qword_1001E4990) - 8;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v44 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v39 - v19;
  v53[3] = &type metadata for SnoutStoryMetrics;
  v53[4] = &off_1001C2828;
  uint64_t v21 = swift_allocObject();
  v53[0] = v21;
  long long v22 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v21 + 32) = v22;
  *(void *)(v21 + 48) = *(void *)(a4 + 32);
  uint64_t v51 = &type metadata for AppStoreDaemonSKANInterop;
  uint64_t v52 = &off_1001CA740;
  swift_defaultActor_initialize();
  a6[14] = v48;
  a6[15] = a2;
  a6[16] = a3;
  uint64_t v45 = a6;
  sub_100029CD8((uint64_t)v53, (uint64_t)(a6 + 17));
  sub_100029CD8((uint64_t)v50, (uint64_t)(a6 + 22));
  uint64_t v43 = v16;
  uint64_t v23 = &v20[*(int *)(v16 + 56)];
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v12);
  uint64_t v48 = a2;
  swift_bridgeObjectRetain();
  id v46 = a3;
  unsigned __int16 v49 = v20;
  uint64_t v41 = v23;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v24 = *(int *)(v16 + 56);
  unint64_t v25 = v44;
  long long v26 = &v44[v24];
  uint64_t v27 = sub_100012960(&qword_1001E47F8);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v42(v25, v20, v27);
  uint64_t v29 = sub_100012960(&qword_1001E1388);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v31(v26, v23, v29);
  uint64_t v32 = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))((uint64_t)v45 + OBJC_IVAR____TtC20AttributionKitDaemon12SnoutManager_snoutActionStream, v25, v27);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v29);
  uint64_t v33 = v25;
  uint64_t v34 = &v25[*(int *)(v43 + 56)];
  v42(v33, v49, v27);
  v31(v34, v41, v29);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))((uint64_t)v32 + OBJC_IVAR____TtC20AttributionKitDaemon12SnoutManager_snoutActionContinuation, v34, v29);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
  if (v47)
  {
    uint64_t v35 = type metadata accessor for TaskPriority();
    uint64_t v36 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v40, 1, 1, v35);
    uint64_t v37 = (void *)swift_allocObject();
    v37[2] = 0;
    v37[3] = 0;
    id v37[4] = v32;
    swift_retain();
    sub_100017E98(v36, (uint64_t)&unk_1001E49A0, (uint64_t)v37);

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v50);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v53);
  sub_100019960((uint64_t)v49, &qword_1001E4990);
  return v32;
}

void *sub_10013C000(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  v24[3] = &type metadata for SnoutStoryMetrics;
  v24[4] = &off_1001C2828;
  uint64_t v10 = swift_allocObject();
  v24[0] = v10;
  long long v11 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v10 + 32) = v11;
  *(void *)(v10 + 48) = *(void *)(a4 + 32);
  long long v22 = &type metadata for AppStoreDaemonSKANInterop;
  uint64_t v23 = &off_1001CA740;
  type metadata accessor for SnoutManager();
  uint64_t v12 = (void *)swift_allocObject();
  uint64_t v13 = sub_10004DD80((uint64_t)v24, (uint64_t)&type metadata for SnoutStoryMetrics);
  __chkstk_darwin(v13);
  unint64_t v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *))(v16 + 16))(v15);
  uint64_t v17 = sub_10004DD80((uint64_t)v21, (uint64_t)&type metadata for AppStoreDaemonSKANInterop);
  __chkstk_darwin(v17);
  (*(void (**)(void))(v18 + 16))();
  uint64_t v19 = sub_10013BAF0(a1, a2, a3, (uint64_t)v15, a5, v12);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v21);
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0((uint64_t)v24);
  return v19;
}

double sub_10013C210@<D0>(void *a1@<X0>, void (*a2)(_OWORD *__return_ptr, void)@<X1>, _OWORD *a3@<X8>)
{
  a2(v9, *a1);
  if (!v3)
  {
    double result = *(double *)v9;
    long long v6 = v9[1];
    long long v7 = v9[2];
    long long v8 = v9[3];
    *a3 = v9[0];
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v8;
  }
  return result;
}

uint64_t sub_10013C260(void (*a1)(_OWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = *a3;
  a1(v8, &v9);
  sub_10013E7B8(*(void *)a4, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), *(void *)(a4 + 48), *(void *)(a4 + 56), *(unsigned char *)(a4 + 64));
  long long v5 = v8[1];
  *(_OWORD *)a4 = v8[0];
  *(_OWORD *)(a4 + 16) = v5;
  long long v6 = v8[3];
  *(_OWORD *)(a4 + 32) = v8[2];
  *(_OWORD *)(a4 + 48) = v6;
  *(unsigned char *)(a4 + 64) = 0;
  return 1;
}

uint64_t sub_10013C330(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  a1(&v6, &v7);
  sub_10013F878(*(void *)a4, *(unsigned char *)(a4 + 8));
  *(void *)a4 = v6;
  *(unsigned char *)(a4 + 8) = 0;
  return 1;
}

uint64_t sub_10013C3C4(void (*a1)(uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11 = sub_100012960(a5);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a3;
  a1(&v16);
  sub_100019960(a4, a6);
  sub_100059F98((uint64_t)v13, a4, a5);
  sub_100012960(a6);
  swift_storeEnumTagMultiPayload();
  return 1;
}

uint64_t sub_10013C4D8(void (*a1)(uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  a1(&v6);
  sub_10013F404(*(void *)a4, *(unsigned char *)(a4 + 8));
  *(void *)a4 = 0;
  *(unsigned char *)(a4 + 8) = 0;
  return 1;
}

uint64_t sub_10013C54C(void (*a1)(unsigned __int8 *__return_ptr, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  a1(&v6, &v7);
  sub_10013F404(*(void *)a4, *(unsigned char *)(a4 + 8));
  *(void *)a4 = v6;
  *(unsigned char *)(a4 + 8) = 0;
  return 1;
}

uint64_t sub_10013C5E0(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = *a3;
  a1(&v7, &v9);
  sub_10013FC00(*(void *)a4, *(unsigned __int8 *)(a4 + 8), *(unsigned char *)(a4 + 9));
  unsigned __int8 v5 = v8;
  *(void *)a4 = v7;
  *(_WORD *)(a4 + 8) = v5;
  return 1;
}

uint64_t sub_10013C684(void (*a1)(_OWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v14 = *a3;
  a1(v11, &v14);
  sub_10013EFE4(*(void *)a4, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), *(void *)(a4 + 48), *(void *)(a4 + 56), *(void *)(a4 + 64), *(void *)(a4 + 72), *(void *)(a4 + 80), *(void *)(a4 + 88), *(unsigned __int16 *)(a4 + 96) | (*(unsigned __int8 *)(a4 + 98) << 16), *(unsigned char *)(a4 + 99));
  __int16 v5 = v12;
  char v6 = v13;
  long long v7 = v11[1];
  *(_OWORD *)a4 = v11[0];
  *(_OWORD *)(a4 + 16) = v7;
  long long v8 = v11[3];
  *(_OWORD *)(a4 + 32) = v11[2];
  *(_OWORD *)(a4 + 48) = v8;
  long long v9 = v11[5];
  *(_OWORD *)(a4 + 64) = v11[4];
  *(_OWORD *)(a4 + 80) = v9;
  *(unsigned char *)(a4 + 98) = v6;
  *(_WORD *)(a4 + 96) = v5;
  *(unsigned char *)(a4 + 99) = 0;
  return 1;
}

double sub_10013C7B8@<D0>(void *a1@<X0>, void (*a2)(_OWORD *__return_ptr, void)@<X1>, uint64_t a3@<X8>)
{
  a2(v9, *a1);
  if (!v3)
  {
    uint64_t v6 = v10;
    double result = *(double *)v9;
    long long v7 = v9[1];
    long long v8 = v9[2];
    *(_OWORD *)a3 = v9[0];
    *(_OWORD *)(a3 + 16) = v7;
    *(_OWORD *)(a3 + 32) = v8;
    *(void *)(a3 + 48) = v6;
  }
  return result;
}

uint64_t sub_10013C810(void (*a1)(_OWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v10 = *a3;
  a1(v8, &v10);
  sub_100140208(*(void *)a4, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), *(void *)(a4 + 48), *(unsigned char *)(a4 + 56));
  uint64_t v5 = v9;
  long long v6 = v8[1];
  *(_OWORD *)a4 = v8[0];
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = v8[2];
  *(void *)(a4 + 48) = v5;
  *(unsigned char *)(a4 + 56) = 0;
  return 1;
}

uint64_t sub_10013C8DC(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  a1(&v6, &v7);
  sub_10013F404(*(void *)a4, *(unsigned char *)(a4 + 8));
  *(void *)a4 = v6;
  *(unsigned char *)(a4 + 8) = 0;
  return 1;
}

uint64_t sub_10013C970(void (*a1)(_OWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v11 = *a3;
  a1(v9, &v11);
  sub_1001404C4(*(void *)a4, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), *(void *)(a4 + 48), *(void *)(a4 + 56), *(void *)(a4 + 64), *(unsigned char *)(a4 + 72));
  uint64_t v5 = v10;
  long long v6 = v9[1];
  *(_OWORD *)a4 = v9[0];
  *(_OWORD *)(a4 + 16) = v6;
  long long v7 = v9[3];
  *(_OWORD *)(a4 + 32) = v9[2];
  *(_OWORD *)(a4 + 48) = v7;
  *(void *)(a4 + 64) = v5;
  *(unsigned char *)(a4 + 72) = 0;
  return 1;
}

uint64_t sub_10013CA58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 192 * a1 + 32;
    unint64_t v6 = a3 + 192 * v4;
    if (v5 >= v6 || v5 + 192 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013CB50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10013CC44(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013CD2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013CE24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013CF18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 224 * a1 + 32;
    unint64_t v6 = a3 + 224 * v4;
    if (v5 >= v6 || v5 + 224 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013D010(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 264 * a1 + 32;
    unint64_t v6 = a3 + 264 * v4;
    if (v5 >= v6 || v5 + 264 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013D108(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 208 * a1 + 32;
    unint64_t v6 = a3 + 208 * v4;
    if (v5 >= v6 || v5 + 208 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013D1FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013D358(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013D44C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_100012960(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10013D558(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013D644(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 80 * a1 + 32;
    unint64_t v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10013D73C()
{
  unint64_t result = qword_1001E4750;
  if (!qword_1001E4750)
  {
    sub_100011ECC(&qword_1001E4748);
    sub_10013FAC4(&qword_1001E0CC0, (void (*)(uint64_t))type metadata accessor for SnoutStoryModel);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4750);
  }
  return result;
}

uint64_t sub_10013D7E0(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4758, (uint64_t)&unk_1001CB140, (uint64_t)sub_10013D844, (uint64_t)&unk_1001CB158);
}

uint64_t sub_10013D838()
{
  return sub_1001403AC(&qword_1001E4758);
}

void sub_10013D844()
{
}

uint64_t sub_10013D88C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013D89C()
{
  return swift_release();
}

void *sub_10013D8A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10013F820(a1, a2);
}

uint64_t sub_10013D8BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013D8CC()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10013D8F8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10013D930(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001376C4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_10013D94C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013D95C(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4768, (uint64_t)&unk_1001CB258, (uint64_t)sub_10013D9C0, (uint64_t)&unk_1001CB270);
}

uint64_t sub_10013D9B4()
{
  return sub_1001403AC(&qword_1001E4768);
}

uint64_t sub_10013D9C0()
{
  return sub_10013E6D4(&qword_1001E4768, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_100122DEC);
}

uint64_t sub_10013D9E0()
{
  return sub_10013C3C4(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40), &qword_1001E3A68, &qword_1001E4770) & 1;
}

uint64_t sub_10013DA18()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013DA28(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_1001272D4(a1, a2, a3, *(void *)(v3 + 16), &qword_1001E3A68, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel, (uint64_t (*)(void))type metadata accessor for SnoutStoryModel);
}

uint64_t sub_10013DA64(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012A96C(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(char *, void, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013DA70()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013DA80()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10013DAA8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100011ECC(&qword_1001E3D20);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10013DB18()
{
  unint64_t result = qword_1001E4790;
  if (!qword_1001E4790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E4790);
  }
  return result;
}

uint64_t sub_10013DB6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013DBA4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10013DC34@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Date();
  uint64_t result = sub_1000D468C();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_10013DCB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013DD08(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E47A8, (uint64_t)&unk_1001CB3C0, (uint64_t)sub_10013DD6C, (uint64_t)&unk_1001CB3D8);
}

uint64_t sub_10013DD60()
{
  return sub_1001403AC(&qword_1001E47A8);
}

void sub_10013DD6C()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E47A8) - 8);
  sub_100123894(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for SnoutDatabaseTransaction, (uint64_t)sub_10014069C, (void (*)(uint64_t, id, uint64_t, void *))sub_100125BCC);
}

uint64_t sub_10013DE0C()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10013DE1C()
{
  unint64_t result = qword_1001E47B0;
  if (!qword_1001E47B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E47B0);
  }
  return result;
}

uint64_t sub_10013DE70()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 433, 7);
}

uint64_t sub_10013DF48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10013E09C(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E47D8, (uint64_t)&unk_1001CB4B0, (uint64_t)sub_10013E100, (uint64_t)&unk_1001CB4C8);
}

uint64_t sub_10013E0F4()
{
  return sub_1001403AC(&qword_1001E47D8);
}

void sub_10013E100()
{
}

uint64_t sub_10013E148()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10013E180()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013E190()
{
  return sub_100131AE8();
}

uint64_t sub_10013E1AC(void *a1)
{
  return sub_100135110(a1);
}

unint64_t sub_10013E1C8()
{
  unint64_t result = qword_1001E47E0;
  if (!qword_1001E47E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E47E0);
  }
  return result;
}

uint64_t sub_10013E21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnoutStoryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013E280()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10013E290(uint64_t a1@<X8>)
{
  sub_1000D43E8(*(void *)(v1 + 16), a1);
}

uint64_t sub_10013E2BC()
{
  uint64_t v1 = type metadata accessor for SnoutStoryModel();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_10013E3C4()
{
  uint64_t v1 = *(void *)(type metadata accessor for SnoutStoryModel() - 8);
  sub_100020F74(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10013E438()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 217, 7);
}

void sub_10013E490(void *a1)
{
  sub_100130AEC(a1, (long long *)(v1 + 16));
}

uint64_t sub_10013E4AC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 86) | ((unsigned __int16)(*(_DWORD *)(a1 + 96) >> 1) << 16);
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10013E4CC(uint64_t a1)
{
  sub_10013E540(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(_WORD *)(a1 + 208));
  return a1;
}

uint64_t sub_10013E540(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,uint64_t a26,unsigned __int16 a27)
{
  if (a11 < 0xFFFF000000000000
    || (a13 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFE
    || (a15 & 0xFFFFFFFFFFFF00FELL) != 0
    || a17 > 1
    || (a19 & 0xFFFFFFFFFF0000FELL) != 0
    || a21 > 1
    || a24 > 0xFF
    || (a27 & 0xFEFC) != 0)
  {
    return sub_1001388CC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27);
  }
  return result;
}

uint64_t sub_10013E650(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4830, (uint64_t)&unk_1001CB5F0, (uint64_t)sub_10013E6B4, (uint64_t)&unk_1001CB608);
}

uint64_t sub_10013E6A8()
{
  return sub_1001403AC(&qword_1001E4830);
}

uint64_t sub_10013E6B4()
{
  return sub_10013E6D4(&qword_1001E4830, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_100122A7C);
}

uint64_t sub_10013E6D4(uint64_t *a1, uint64_t (*a2)(uint64_t, void *, uint64_t, uint64_t, char *))
{
  uint64_t v3 = *(void *)(sub_100012960(a1) - 8);
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[8];
  uint64_t v6 = v2[9];
  uint64_t v7 = (char *)v2 + ((*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v2 + 3, v5, v6, v7);
}

double sub_10013E750@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10013C210(a1, *(void (**)(_OWORD *__return_ptr, void))(v2 + 16), a2);
}

uint64_t sub_10013E76C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013E798()
{
  return sub_10013C260(*(void (**)(_OWORD *__return_ptr, uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10013E7A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013E7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10013E7CC()
{
  return sub_1001403AC(&qword_1001E47A8);
}

void sub_10013E7D8()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E47A8) - 8);
  sub_100123894(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for RetryCountDatabaseTransaction, (uint64_t)sub_10014069C, (void (*)(uint64_t, id, uint64_t, void *))sub_1001242E8);
}

uint64_t sub_10013E878()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013E888(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E47A8, (uint64_t)&unk_1001CB780, (uint64_t)sub_10013E8EC, (uint64_t)&unk_1001CB798);
}

uint64_t sub_10013E8E0()
{
  return sub_1001403AC(&qword_1001E47A8);
}

void sub_10013E8EC()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E47A8) - 8);
  sub_100123894(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for ImpressionDatabaseTransaction, (uint64_t)sub_10013E98C, (void (*)(uint64_t, id, uint64_t, void *))sub_100123C8C);
}

uint64_t sub_10013E98C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10013E9B8()
{
  return sub_10013C4D8(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40)) & 1;
}

uint64_t sub_10013E9E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013E9F0(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E47A8, (uint64_t)&unk_1001CB848, (uint64_t)sub_10013EA54, (uint64_t)&unk_1001CB860);
}

uint64_t sub_10013EA48()
{
  return sub_1001403AC(&qword_1001E47A8);
}

void sub_10013EA54()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E47A8) - 8);
  sub_100123894(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for GhostbackDatabaseTransaction, (uint64_t)sub_10014069C, (void (*)(uint64_t, id, uint64_t, void *))sub_100124728);
}

uint64_t sub_10013EAF4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013EB04(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4858, (uint64_t)&unk_1001CB910, (uint64_t)sub_10013EB68, (uint64_t)&unk_1001CB928);
}

uint64_t sub_10013EB5C()
{
  return sub_1001403AC(&qword_1001E4858);
}

void sub_10013EB68()
{
}

uint64_t sub_10013EBB0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013EBC0(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E47A8, (uint64_t)&unk_1001CB6B8, (uint64_t)sub_10013E7D8, (uint64_t)&unk_1001CB6D0);
}

uint64_t sub_10013EC18()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 233, 7);
}

uint64_t sub_10013EC80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10013ECE8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10013ED48(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4898, (uint64_t)&unk_1001CBA00, (uint64_t)sub_10013EDAC, (uint64_t)&unk_1001CBA18);
}

uint64_t sub_10013EDA0()
{
  return sub_1001403AC(&qword_1001E4898);
}

void sub_10013EDAC()
{
}

uint64_t sub_10013EDF4()
{
  return sub_10013C330(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40)) & 1;
}

uint64_t sub_10013EE1C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013EE2C(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E47A8, (uint64_t)&unk_1001CBAC8, (uint64_t)sub_10013EE90, (uint64_t)&unk_1001CBAE0);
}

uint64_t sub_10013EE84()
{
  return sub_1001403AC(&qword_1001E47A8);
}

void sub_10013EE90()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E47A8) - 8);
  sub_100123894(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for TokenDatabaseTransaction, (uint64_t)sub_10014069C, (void (*)(uint64_t, id, uint64_t, void *))sub_1001240D0);
}

uint64_t sub_10013EF30()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013EF40(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E48C0, (uint64_t)&unk_1001CBB90, (uint64_t)sub_10013EFA4, (uint64_t)&unk_1001CBBA8);
}

uint64_t sub_10013EF98()
{
  return sub_1001403AC(&qword_1001E48C0);
}

uint64_t sub_10013EFA4()
{
  return sub_10013E6D4(&qword_1001E48C0, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_100123194);
}

uint64_t sub_10013EFC4()
{
  return sub_10013C684(*(void (**)(_OWORD *__return_ptr, uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10013EFD4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013EFE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  if (a14) {
    return swift_errorRelease();
  }
  else {
    return sub_10004EC7C(a1, a2, a3, a4);
  }
}

uint64_t sub_10013F00C(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E48D0, (uint64_t)&unk_1001CBC58, (uint64_t)sub_10013F070, (uint64_t)&unk_1001CBC70);
}

uint64_t sub_10013F064()
{
  return sub_1001403AC(&qword_1001E48D0);
}

void sub_10013F070()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E48D0) - 8);
  sub_100123470(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for TokenDatabaseSession, (uint64_t)sub_10013D8A4, (uint64_t (*)(uint64_t, id, uint64_t, void *))sub_100123EA4);
}

uint64_t sub_10013F110()
{
  return sub_10013C8DC(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40)) & 1;
}

uint64_t sub_10013F138()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F148()
{
  return sub_1001403AC(&qword_1001E47A8);
}

void sub_10013F154()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E47A8) - 8);
  sub_100123894(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for PostbackDatabaseTransaction, (uint64_t)sub_10014069C, (void (*)(uint64_t, id, uint64_t, void *))sub_100125DE0);
}

uint64_t sub_10013F1F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F204(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E48E8, (uint64_t)&unk_1001CBDE8, (uint64_t)sub_10013F268, (uint64_t)&unk_1001CBE00);
}

uint64_t sub_10013F25C()
{
  return sub_1001403AC(&qword_1001E48E8);
}

void sub_10013F268()
{
}

uint64_t sub_10013F2B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F2C0(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E47A8, (uint64_t)&unk_1001CBD20, (uint64_t)sub_10013F154, (uint64_t)&unk_1001CBD38);
}

uint64_t sub_10013F318(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4908, (uint64_t)&unk_1001CBEB0, (uint64_t)sub_10013F37C, (uint64_t)&unk_1001CBEC8);
}

uint64_t sub_10013F370()
{
  return sub_1001403AC(&qword_1001E4908);
}

uint64_t sub_10013F37C()
{
  return sub_10013E6D4(&qword_1001E4908, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_100122F80);
}

void *sub_10013F39C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(v2 + 16))(&v6, *a1);
  if (!v3) {
    *a2 = v6;
  }
  return result;
}

uint64_t sub_10013F3E4()
{
  return sub_10013C54C(*(void (**)(unsigned __int8 *__return_ptr, uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10013F3F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F404(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10013F410(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4918, (uint64_t)&unk_1001CBF78, (uint64_t)sub_10013F474, (uint64_t)&unk_1001CBF90);
}

uint64_t sub_10013F468()
{
  return sub_1001403AC(&qword_1001E4918);
}

uint64_t sub_10013F474()
{
  return sub_10013E6D4(&qword_1001E4918, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_1001228E8);
}

uint64_t sub_10013F494()
{
  return sub_10013C3C4(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40), &qword_1001E1378, &qword_1001E4920) & 1;
}

uint64_t sub_10013F4CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F4DC(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E47A8, (uint64_t)&unk_1001CC040, (uint64_t)sub_10013F540, (uint64_t)&unk_1001CC058);
}

uint64_t sub_10013F534()
{
  return sub_1001403AC(&qword_1001E47A8);
}

void sub_10013F540()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E47A8) - 8);
  sub_100123894(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for AppLaunchDatabaseTransaction, (uint64_t)sub_10014069C, (void (*)(uint64_t, id, uint64_t, void *))sub_100124940);
}

uint64_t sub_10013F5E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F5F0()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10013F628(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012D344(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013F634()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F644(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4948, (uint64_t)&unk_1001CC180, (uint64_t)sub_10013F6A8, (uint64_t)&unk_1001CC198);
}

uint64_t sub_10013F69C()
{
  return sub_1001403AC(&qword_1001E4948);
}

uint64_t sub_10013F6A8()
{
  return sub_10013E6D4(&qword_1001E4948, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_100122CC4);
}

uint64_t sub_10013F6C8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F6D8(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4968, (uint64_t)&unk_1001CC248, (uint64_t)sub_10013F73C, (uint64_t)&unk_1001CC260);
}

uint64_t sub_10013F730()
{
  return sub_1001403AC(&qword_1001E4968);
}

void sub_10013F73C()
{
}

void sub_10013F784(uint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, id, uint64_t, void *))
{
  uint64_t v9 = *(void *)(sub_100012960(a1) - 8);
  sub_100122BA4(v4[2], (uint64_t)(v4 + 3), v4[8], v4[9], (uint64_t)v4 + ((*(unsigned __int8 *)(v9 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a2, a3, a4, a1);
}

void *sub_10013F820@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(v2 + 16))(&v6, *a1);
  if (!v3) {
    *a2 = v6;
  }
  return result;
}

uint64_t sub_10013F868()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F878(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10013F884(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012CE7C(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013F890()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013F8A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013F998(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 7) + 32;
    unint64_t v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013FA8C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012CA24(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013FA98()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013FAA8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012B2F8(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(char *, void, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013FAB4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013FAC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013FB0C(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E4980, (uint64_t)&unk_1001CC478, (uint64_t)sub_10013FB70, (uint64_t)&unk_1001CC490);
}

uint64_t sub_10013FB64()
{
  return sub_1001403AC(&qword_1001E4980);
}

uint64_t sub_10013FB70()
{
  return sub_10013E6D4(&qword_1001E4980, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_100123088);
}

void *sub_10013FB90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(v2 + 16))(&v7, *a1);
  if (!v3)
  {
    char v6 = v8;
    *(void *)a2 = v7;
    *(unsigned char *)(a2 + 8) = v6;
  }
  return result;
}

uint64_t sub_10013FBE0()
{
  return sub_10013C5E0(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10013FBF0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013FC00(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10013FC0C()
{
  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013FC44()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013FC84()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100012AB8;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100013480;
  return sub_10012DF44();
}

uint64_t sub_10013FD58()
{
  return sub_1001403AC(&qword_1001E47A8);
}

void sub_10013FD64()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E47A8) - 8);
  sub_100123894(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for AppMetadataDatabaseTransaction, (uint64_t)sub_10014069C, (void (*)(uint64_t, id, uint64_t, void *))sub_100125FF4);
}

uint64_t sub_10013FE04()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013FE14(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012C5C8(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013FE20()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013FE30(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012C16C(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013FE3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013FE4C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012BD0C(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013FE58()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013FE68(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012B7C4(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013FE74()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013FE84(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012AE38(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_10013FE90()
{
  return _swift_deallocObject(v0, 32, 7);
}

unsigned char *storeEnumTagSinglePayload for SnoutManagerError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10013FF3CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SnoutManagerError()
{
  return &type metadata for SnoutManagerError;
}

uint64_t destroy for SnoutManager.StoryIdentifier(uint64_t a1)
{
  return sub_1000B28F0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s20AttributionKitDaemon12SnoutManagerC15StoryIdentifierOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000B2884(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SnoutManager.StoryIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000B2884(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000B28F0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SnoutManager.StoryIdentifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000B28F0(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for SnoutManager.StoryIdentifier()
{
  return &type metadata for SnoutManager.StoryIdentifier;
}

unint64_t sub_100140084(uint64_t a1)
{
  unint64_t result = sub_10013E1C8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001400B0()
{
  unint64_t result = qword_1001E49D0;
  if (!qword_1001E49D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001E49D0);
  }
  return result;
}

uint64_t sub_100140104(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E49E0, (uint64_t)&unk_1001CC9E0, (uint64_t)sub_100140168, (uint64_t)&unk_1001CC9F8);
}

uint64_t sub_10014015C()
{
  return sub_1001403AC(&qword_1001E49E0);
}

uint64_t sub_100140168()
{
  return sub_10013E6D4(&qword_1001E49E0, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_100123348);
}

double sub_100140188@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10013C7B8(a1, *(void (**)(_OWORD *__return_ptr, void))(v2 + 16), a2);
}

uint64_t sub_1001401A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001401D0()
{
  return sub_10013C810(*(void (**)(_OWORD *__return_ptr, uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40)) & 1;
}

uint64_t sub_1001401F8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100140208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100140218(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  return sub_10012A510(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, uint64_t, unsigned char *))(v4 + 24), *(void *)(v4 + 32), *(uint64_t **)(v4 + 40));
}

uint64_t sub_100140224()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100140234(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), &qword_1001E48D0, (uint64_t)&unk_1001CCB20, (uint64_t)sub_100140298, (uint64_t)&unk_1001CCB38);
}

uint64_t sub_10014028C()
{
  return sub_1001403AC(&qword_1001E48D0);
}

void sub_100140298()
{
  uint64_t v1 = *(void *)(sub_100012960(&qword_1001E48D0) - 8);
  sub_100123470(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t (*)(void))type metadata accessor for PostbackDatabaseSession, (uint64_t)sub_10013D8A4, (uint64_t (*)(uint64_t, id, uint64_t, void *))sub_100126DB8);
}

uint64_t sub_100140338()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100140348(uint64_t a1)
{
  return sub_100122504(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), (uint64_t *)&unk_1001E4A10, (uint64_t)&unk_1001CCBE8, (uint64_t)sub_100140484, (uint64_t)&unk_1001CCC00);
}

uint64_t sub_1001403A0()
{
  return sub_1001403AC((uint64_t *)&unk_1001E4A10);
}

uint64_t sub_1001403AC(uint64_t *a1)
{
  uint64_t v2 = sub_100012960(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 80) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;

  _s20AttributionKitDaemon17SnoutStoryMetricsVwxx_0(v1 + 24);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100140484()
{
  return sub_10013E6D4((uint64_t *)&unk_1001E4A10, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, char *))sub_10012357C);
}

uint64_t sub_1001404A4()
{
  return sub_10013C970(*(void (**)(_OWORD *__return_ptr, uint64_t *))(v0 + 16), *(void *)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001404B4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001404C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10) {
    return swift_errorRelease();
  }
  else {
    return sub_10008F6B0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_1001404E0(uint64_t a1@<X8>)
{
}

double sub_10014067C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100140188(a1, a2);
}

uint64_t sub_10014069C(void *a1)
{
  return sub_10013E98C(a1);
}

uint64_t sub_1001407B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001350E0(a1);
}

void sub_1001407CC(void *a1)
{
  xpc_type_t type = xpc_get_type(a1);
  if (type == (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    uint64_t v3 = (const char *)XPC_EVENT_KEY_NAME.getter();
    if (xpc_dictionary_get_string(a1, v3))
    {
      uint64_t v4 = String.init(cString:)();
      unint64_t v6 = v5;
      if (qword_1001E08E0 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100012E74(v7, (uint64_t)qword_1001E5FC8);
      swift_bridgeObjectRetain_n();
      char v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v18 = sub_100147668(v4, v6, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received xpc event: %s", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      xpc_object_t v11 = xpc_dictionary_get_dictionary(a1, "UserInfo");
      if (v11)
      {
        xpc_type_t v12 = xpc_get_type(v11);
        if (v12 == (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
        {
          uint64_t v15 = _CFXPCCreateCFObjectFromXPCObject();
          if (v15 && (uint64_t v19 = v15, sub_100012960(&qword_1001E11F8), swift_dynamicCast())) {
            uint64_t v16 = v18;
          }
          else {
            uint64_t v16 = 0;
          }
          id v17 = [self defaultCenter];
          NSString v13 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          if (v16)
          {
            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            Class isa = 0;
          }
          objc_msgSend(v17, "postNotificationName:object:userInfo:", v13, 0, isa, v18, v19);
          swift_unknownObjectRelease();

          goto LABEL_20;
        }
        swift_unknownObjectRelease();
      }
      NSString v13 = [self defaultCenter];
      Class isa = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v13 postNotificationName:isa object:0];
LABEL_20:
    }
  }
}

uint64_t sub_100140B34(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(void *)(v8 + 96) = v12;
  *(void *)(v8 + 104) = v13;
  *(_OWORD *)(v8 + 80) = v11;
  *(unsigned char *)(v8 + 170) = a8;
  *(unsigned char *)(v8 + 169) = a7;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a6;
  *(unsigned char *)(v8 + 168) = a4;
  *(void *)(v8 + 48) = a2;
  *(void *)(v8 + 56) = a3;
  *(void *)(v8 + 40) = a1;
  sub_100012960(&qword_1001E0EE0);
  *(void *)(v8 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_100140BF0, 0, 0);
}

uint64_t sub_100140BF0()
{
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 72);
  char v4 = *(unsigned char *)(v0 + 170);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v7 = *(const char **)(v0 + 48);
  int v8 = *(unsigned __int8 *)(v0 + 169);
  int v9 = *(unsigned __int8 *)(v0 + 168);
  sub_100036994(*(void *)(v0 + 80), v1, &qword_1001E0EE0);
  sub_10002AE10(v5, v3, v8);
  uint64_t v10 = sub_10002A4A8(v7, v6, v9, v5, v3, v8, v4, v1, v2);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  *(void *)(v0 + 120) = v10;
  *(void *)(v0 + 128) = v11;
  *(void *)(v0 + 136) = v13;
  if (qword_1001E0888 != -1) {
    swift_once();
  }
  char v15 = *(unsigned char *)(v0 + 169);
  uint64_t v17 = *(void *)(v0 + 64);
  uint64_t v16 = *(void *)(v0 + 72);
  *(void *)(v0 + 16) = v10;
  *(void *)(v0 + 24) = v12;
  *(void *)(v0 + 32) = v14;
  uint64_t v18 = swift_task_alloc();
  *(void *)(v0 + 144) = v18;
  long long v19 = *(_OWORD *)(v0 + 88);
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v16;
  *(unsigned char *)(v18 + 32) = v15;
  *(void *)(v18 + 40) = v10;
  *(void *)(v18 + 48) = v12;
  *(void *)(v18 + 56) = v14;
  *(_OWORD *)(v18 + 64) = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v20;
  void *v20 = v0;
  v20[1] = sub_100140E04;
  uint64_t v21 = *(void *)(v0 + 40);
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v21, v0 + 16, &unk_1001E4B08, v18, 0, 0, 0xD00000000000002BLL, 0x8000000100188500);
}

uint64_t sub_100140E04()
{
  uint64_t v2 = *v1;
  v2[20] = v0;
  swift_task_dealloc();
  sub_1001481FC(v2[2], v2[3]);
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100140FD0;
  }
  else {
    uint64_t v3 = sub_100140F48;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100140F48()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100140FD0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100141058(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 56) = v10;
  *(unsigned char *)(v8 + 72) = a4;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  return _swift_task_switch(sub_10014108C, 0, 0);
}

uint64_t sub_10014108C()
{
  uint64_t v17 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 != 255)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = v2;
    unint64_t v5 = v3;
    unsigned __int8 v6 = *(unsigned char *)(v0 + 72);
LABEL_3:
    sub_10002AE10(v2, v3, v1);
    char v7 = v6 & 1;
    sub_10002AB04(v4, v5, v7);
    sub_10002AD9C(v4, v5, v7);
    goto LABEL_4;
  }
  uint64_t v11 = *(os_unfair_lock_s **)(v0 + 40);
  uint64_t v12 = (uint64_t)&v11[4];
  uint64_t v13 = v11 + 9;
  os_unfair_lock_lock(v11 + 9);
  sub_10002A454(v12, (uint64_t)v15);
  os_unfair_lock_unlock(v13);
  unsigned __int8 v6 = v16;
  if (v16 != 255)
  {
    uint64_t v4 = v15[0];
    unint64_t v5 = v15[1];
    LOBYTE(v1) = *(unsigned char *)(v0 + 72);
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    goto LABEL_3;
  }
LABEL_4:
  uint64_t v14 = (uint64_t (*)(uint64_t))(*(void *)(v0 + 48) + **(int **)(v0 + 48));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100141210;
  uint64_t v9 = *(void *)(v0 + 16);
  return v14(v9);
}

uint64_t sub_100141210()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_100141304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a3 + 16))(a3, isa);
}

uint64_t sub_10014135C(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a8;
  uint64_t v44 = a4;
  LODWORD(v42) = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unsigned __int8 v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v17 - 8);
  long long v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = [self currentConnection];
  if (v20)
  {
    uint64_t v21 = v20;
    [v20 auditToken];
    sub_100086E14(v47[0], v47[1], v47[2], v47[3], (uint64_t)v48);

    sub_100036994(a7, (uint64_t)v19, &qword_1001E0EC0);
    sub_100019C70(a6, (uint64_t)v47);
    sub_1000862D4((uint64_t)v48, (uint64_t)v45);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    uint64_t v23 = v41;
    *(void *)(v22 + 32) = v40;
    *(void *)(v22 + 40) = v23;
    *(unsigned char *)(v22 + 48) = v42;
    *(void *)(v22 + 56) = v43;
    *(void *)(v22 + 64) = a9;
    memcpy((void *)(v22 + 72), v47, 0x1C8uLL);
    long long v24 = v45[1];
    *(_OWORD *)(v22 + 528) = v45[0];
    *(_OWORD *)(v22 + 544) = v24;
    *(void *)(v22 + 560) = v46;
    *(void *)(v22 + 568) = v9;
    *(void *)(v22 + 576) = v44;
    *(void *)(v22 + 584) = a5;
    swift_retain();
    id v25 = v9;
    swift_retain();
    sub_100017E98((uint64_t)v19, (uint64_t)&unk_1001E4C10, v22);
    swift_release();
    return sub_100086398((uint64_t)v48);
  }
  else
  {
    uint64_t v43 = a5;
    sub_1000C210C();
    swift_allocError();
    swift_willThrow();
    uint64_t v27 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v27, v13);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v41 = v13;
      uint64_t v42 = v14;
      uint64_t v31 = (uint8_t *)v30;
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412290;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      v47[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received error while getting client: %@", v31, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v13 = v41;
      uint64_t v14 = v42;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v34 = v44;

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    unsigned __int8 v35 = sub_1000C1ADC();
    uint64_t v36 = sub_100148830(v35 | 0x100u, &qword_1001E4B10, &qword_1001E4B18);
    unint64_t v38 = v37;
    v34();
    sub_100020930(v36, v38);
    return swift_errorRelease();
  }
}

uint64_t sub_100141794(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a8;
  uint64_t v44 = a4;
  LODWORD(v42) = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unsigned __int8 v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v17 - 8);
  long long v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = [self currentConnection];
  if (v20)
  {
    uint64_t v21 = v20;
    [v20 auditToken];
    sub_100086E14(v47[0], v47[1], v47[2], v47[3], (uint64_t)v48);

    sub_100036994(a7, (uint64_t)v19, &qword_1001E0EC0);
    sub_100019EB8(a6, (uint64_t)v47);
    sub_1000862D4((uint64_t)v48, (uint64_t)v45);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    uint64_t v23 = v41;
    *(void *)(v22 + 32) = v40;
    *(void *)(v22 + 40) = v23;
    *(unsigned char *)(v22 + 48) = v42;
    *(void *)(v22 + 56) = v43;
    *(void *)(v22 + 64) = a9;
    memcpy((void *)(v22 + 72), v47, 0x318uLL);
    long long v24 = v45[1];
    *(_OWORD *)(v22 + 864) = v45[0];
    *(_OWORD *)(v22 + 880) = v24;
    *(void *)(v22 + 896) = v46;
    *(void *)(v22 + 904) = v9;
    *(void *)(v22 + 912) = v44;
    *(void *)(v22 + 920) = a5;
    swift_retain();
    id v25 = v9;
    swift_retain();
    sub_100017E98((uint64_t)v19, (uint64_t)&unk_1001E4BA0, v22);
    swift_release();
    return sub_100086398((uint64_t)v48);
  }
  else
  {
    uint64_t v43 = a5;
    sub_1000C210C();
    swift_allocError();
    swift_willThrow();
    uint64_t v27 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v27, v13);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v41 = v13;
      uint64_t v42 = v14;
      uint64_t v31 = (uint8_t *)v30;
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412290;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      v47[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received error while getting client: %@", v31, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v13 = v41;
      uint64_t v14 = v42;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v34 = v44;

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    unsigned __int8 v35 = sub_1000C1ADC();
    uint64_t v36 = sub_100148830(v35 | 0x100u, &qword_1001E4B10, &qword_1001E4B18);
    unint64_t v38 = v37;
    v34();
    sub_100020930(v36, v38);
    return swift_errorRelease();
  }
}

uint64_t sub_100141BCC(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v41 = a8;
  uint64_t v42 = a4;
  LODWORD(v40) = a3;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unsigned __int8 v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v17 - 8);
  long long v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = [self currentConnection];
  if (v20)
  {
    uint64_t v21 = v20;
    [v20 auditToken];
    sub_100086E14(v45[0], v45[1], v45[2], v45[3], (uint64_t)v46);

    sub_100036994(a7, (uint64_t)v19, &qword_1001E0EC0);
    sub_100019EB8(a6, (uint64_t)v45);
    sub_1000862D4((uint64_t)v46, (uint64_t)v43);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    uint64_t v23 = v39;
    *(void *)(v22 + 32) = v38;
    *(void *)(v22 + 40) = v23;
    *(unsigned char *)(v22 + 48) = v40;
    *(void *)(v22 + 56) = v41;
    *(void *)(v22 + 64) = a9;
    memcpy((void *)(v22 + 72), v45, 0x318uLL);
    long long v24 = v43[1];
    *(_OWORD *)(v22 + 864) = v43[0];
    *(_OWORD *)(v22 + 880) = v24;
    *(void *)(v22 + 896) = v44;
    *(void *)(v22 + 904) = v9;
    *(void *)(v22 + 912) = v42;
    *(void *)(v22 + 920) = a5;
    swift_retain();
    id v25 = v9;
    swift_retain();
    sub_100017E98((uint64_t)v19, (uint64_t)&unk_1001E4BC0, v22);
    swift_release();
    return sub_100086398((uint64_t)v46);
  }
  else
  {
    uint64_t v41 = a5;
    sub_1000C210C();
    swift_allocError();
    swift_willThrow();
    uint64_t v27 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v27, v13);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v39 = v13;
      uint64_t v40 = v14;
      uint64_t v31 = (uint8_t *)v30;
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412290;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      v45[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received error while getting client: %@", v31, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v13 = v39;
      uint64_t v14 = v40;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v34 = v42;

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    sub_1000C1ADC();
    uint64_t v35 = sub_100148560();
    unint64_t v37 = v36;
    v34();
    sub_100020930(v35, v37);
    return swift_errorRelease();
  }
}

uint64_t sub_100141FF8(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a8;
  uint64_t v44 = a4;
  LODWORD(v42) = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unsigned __int8 v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v17 - 8);
  long long v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = [self currentConnection];
  if (v20)
  {
    uint64_t v21 = v20;
    [v20 auditToken];
    sub_100086E14(v47[0], v47[1], v47[2], v47[3], (uint64_t)v48);

    sub_100036994(a7, (uint64_t)v19, &qword_1001E0EC0);
    sub_100019D20(a6, (uint64_t)v47);
    sub_1000862D4((uint64_t)v48, (uint64_t)v45);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    uint64_t v23 = v41;
    *(void *)(v22 + 32) = v40;
    *(void *)(v22 + 40) = v23;
    *(unsigned char *)(v22 + 48) = v42;
    *(void *)(v22 + 56) = v43;
    *(void *)(v22 + 64) = a9;
    memcpy((void *)(v22 + 72), v47, 0x160uLL);
    long long v24 = v45[1];
    *(_OWORD *)(v22 + 424) = v45[0];
    *(_OWORD *)(v22 + 440) = v24;
    *(void *)(v22 + 456) = v46;
    *(void *)(v22 + 464) = v9;
    *(void *)(v22 + 472) = v44;
    *(void *)(v22 + 480) = a5;
    swift_retain();
    id v25 = v9;
    swift_retain();
    sub_100017E98((uint64_t)v19, (uint64_t)&unk_1001E4B80, v22);
    swift_release();
    return sub_100086398((uint64_t)v48);
  }
  else
  {
    uint64_t v43 = a5;
    sub_1000C210C();
    swift_allocError();
    swift_willThrow();
    uint64_t v27 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v27, v13);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    uint64_t v30 = v13;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v41 = v13;
      uint64_t v42 = v14;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      swift_errorRetain();
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      v47[0] = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v33 = v34;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received error while getting client: %@", v32, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v30 = v41;
      uint64_t v14 = v42;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v35 = v44;

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v30);
    unsigned __int8 v36 = sub_1000C1ADC();
    uint64_t v37 = sub_100148830(v36 | 0x100u, &qword_1001E4B10, &qword_1001E4B18);
    unint64_t v39 = v38;
    v35();
    sub_100020930(v37, v39);
    return swift_errorRelease();
  }
}

uint64_t sub_100142434(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a8;
  uint64_t v44 = a4;
  LODWORD(v42) = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unsigned __int8 v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v17 - 8);
  long long v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = [self currentConnection];
  if (v20)
  {
    uint64_t v21 = v20;
    [v20 auditToken];
    sub_100086E14(v47[0], v47[1], v47[2], v47[3], (uint64_t)v48);

    sub_100036994(a7, (uint64_t)v19, &qword_1001E0EC0);
    sub_100019BC0(a6, (uint64_t)v47);
    sub_1000862D4((uint64_t)v48, (uint64_t)v45);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    uint64_t v23 = v41;
    *(void *)(v22 + 32) = v40;
    *(void *)(v22 + 40) = v23;
    *(unsigned char *)(v22 + 48) = v42;
    *(void *)(v22 + 56) = v43;
    *(void *)(v22 + 64) = a9;
    memcpy((void *)(v22 + 72), v47, 0x4B0uLL);
    long long v24 = v45[1];
    *(_OWORD *)(v22 + 1272) = v45[0];
    *(_OWORD *)(v22 + 1288) = v24;
    *(void *)(v22 + 1304) = v46;
    *(void *)(v22 + 1312) = v9;
    *(void *)(v22 + 1320) = v44;
    *(void *)(v22 + 1328) = a5;
    swift_retain();
    id v25 = v9;
    swift_retain();
    sub_100017E98((uint64_t)v19, (uint64_t)&unk_1001E4B60, v22);
    swift_release();
    return sub_100086398((uint64_t)v48);
  }
  else
  {
    uint64_t v43 = a5;
    sub_1000C210C();
    swift_allocError();
    swift_willThrow();
    uint64_t v27 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v27, v13);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    uint64_t v30 = v13;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v41 = v13;
      uint64_t v42 = v14;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      swift_errorRetain();
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      v47[0] = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v33 = v34;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received error while getting client: %@", v32, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v30 = v41;
      uint64_t v14 = v42;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v35 = v44;

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v30);
    unsigned __int8 v36 = sub_1000C1ADC();
    uint64_t v37 = sub_100148830(v36 | 0x100u, &qword_1001E4B10, &qword_1001E4B18);
    unint64_t v39 = v38;
    v35();
    sub_100020930(v37, v39);
    return swift_errorRelease();
  }
}

uint64_t sub_100142878(NSObject *a1, unint64_t *a2, int a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, unint64_t *a13)
{
  uint64_t v51 = a8;
  LODWORD(v50) = a3;
  unsigned __int16 v49 = a2;
  uint64_t v48 = a1;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100012960(&qword_1001E0EC0);
  __chkstk_darwin(v22 - 8);
  long long v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = [self currentConnection];
  if (v25)
  {
    long long v26 = v25;
    [v25 auditToken];
    sub_100086E14(v54, *((unint64_t *)&v54 + 1), v55, *((unint64_t *)&v55 + 1), (uint64_t)v57);

    sub_100036994(a7, (uint64_t)v24, &qword_1001E0EC0);
    sub_100019E08(a6, (uint64_t)&v54);
    sub_1000862D4((uint64_t)v57, (uint64_t)v52);
    uint64_t v27 = swift_allocObject();
    long long v28 = v55;
    *(_OWORD *)(v27 + 72) = v54;
    *(_OWORD *)(v27 + 88) = v28;
    *(_OWORD *)(v27 + 104) = v56;
    long long v29 = v52[0];
    *(_OWORD *)(v27 + 136) = v52[1];
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    uint64_t v30 = v49;
    *(void *)(v27 + 32) = v48;
    *(void *)(v27 + 40) = v30;
    *(unsigned char *)(v27 + 48) = (_BYTE)v50;
    *(void *)(v27 + 56) = v51;
    *(void *)(v27 + 64) = a9;
    uint64_t v31 = v53;
    *(_OWORD *)(v27 + 120) = v29;
    *(void *)(v27 + 152) = v31;
    *(void *)(v27 + 160) = v13;
    *(void *)(v27 + 168) = a4;
    *(void *)(v27 + 176) = a5;
    swift_retain();
    id v32 = v13;
    swift_retain();
    sub_100017E98((uint64_t)v24, a11, v27);
    swift_release();
    return sub_100086398((uint64_t)v57);
  }
  else
  {
    uint64_t v50 = a4;
    uint64_t v51 = a5;
    uint64_t v35 = a12;
    uint64_t v34 = a13;
    sub_1000C210C();
    swift_allocError();
    swift_willThrow();
    uint64_t v36 = Logger.xpc.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v36, v18);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      unsigned __int16 v49 = a13;
      uint64_t v40 = (uint8_t *)v39;
      int v47 = (void *)swift_slowAlloc();
      uint64_t v48 = v37;
      *(_DWORD *)uint64_t v40 = 138412290;
      swift_errorRetain();
      uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v54 = v41;
      uint64_t v37 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v47 = v41;
      uint64_t v35 = a12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Received error while getting client: %@", v40, 0xCu);
      sub_100012960(&qword_1001E0B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v34 = v49;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v42 = v50;

    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    unsigned __int8 v43 = sub_1000C1ADC();
    uint64_t v44 = sub_100148830(v43 | 0x100u, v35, v34);
    unint64_t v46 = v45;
    v42();
    sub_100020930(v44, v46);
    return swift_errorRelease();
  }
}

uint64_t sub_100142CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 96) = v12;
  *(_OWORD *)(v8 + 112) = v13;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = a8;
  *(unsigned char *)(v8 + 200) = a6;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 72) = a5;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 136) = v9;
  *(void *)(v8 + 144) = *(void *)(v9 - 8);
  *(void *)(v8 + 152) = swift_task_alloc();
  sub_100012960(&qword_1001E0EE0);
  *(void *)(v8 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_100142DD0, 0, 0);
}

void sub_100142DD0()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  char v7 = *(unsigned char *)(v0 + 200);
  type metadata accessor for Transaction();
  long long v10 = *(_OWORD *)(v0 + 96);
  long long v11 = *(_OWORD *)(v0 + 80);
  long long v12 = *(_OWORD *)(v0 + 112);
  *(void *)(v0 + 168) = swift_initStackObject();
  *(void *)(v0 + 176) = sub_100146C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v1, 1, 1, v2);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 184) = v8;
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v10;
  *(void *)(v8 + 48) = v6;
  *(void *)(v8 + 56) = v5;
  *(unsigned char *)(v8 + 64) = v7;
  *(_OWORD *)(v8 + 72) = v12;
  *(void *)(v8 + 88) = v4;
  long long v13 = (char *)&dword_1001E4AF0 + dword_1001E4AF0;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100142F78;
  __asm { BR              X0; sub_100140B34 }
}

uint64_t sub_100142F78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100019960(v1, &qword_1001E0EE0);
  return _swift_task_switch(sub_100149ECC, 0, 0);
}

uint64_t sub_1001430B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 96) = v12;
  *(_OWORD *)(v8 + 112) = v13;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = a8;
  *(unsigned char *)(v8 + 200) = a6;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 72) = a5;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 136) = v9;
  *(void *)(v8 + 144) = *(void *)(v9 - 8);
  *(void *)(v8 + 152) = swift_task_alloc();
  sub_100012960(&qword_1001E0EE0);
  *(void *)(v8 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_1001431C0, 0, 0);
}

void sub_1001431C0()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  char v7 = *(unsigned char *)(v0 + 200);
  type metadata accessor for Transaction();
  long long v10 = *(_OWORD *)(v0 + 96);
  long long v11 = *(_OWORD *)(v0 + 80);
  long long v12 = *(_OWORD *)(v0 + 112);
  *(void *)(v0 + 168) = swift_initStackObject();
  *(void *)(v0 + 176) = sub_100146C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v1, 1, 1, v2);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 184) = v8;
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v10;
  *(void *)(v8 + 48) = v6;
  *(void *)(v8 + 56) = v5;
  *(unsigned char *)(v8 + 64) = v7;
  *(_OWORD *)(v8 + 72) = v12;
  *(void *)(v8 + 88) = v4;
  long long v13 = (char *)&dword_1001E4AF0 + dword_1001E4AF0;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100142F78;
  __asm { BR              X0; sub_100140B34 }
}

uint64_t sub_100143368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 96) = v12;
  *(_OWORD *)(v8 + 112) = v13;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = a8;
  *(unsigned char *)(v8 + 200) = a6;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 72) = a5;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 136) = v9;
  *(void *)(v8 + 144) = *(void *)(v9 - 8);
  *(void *)(v8 + 152) = swift_task_alloc();
  sub_100012960(&qword_1001E0EE0);
  *(void *)(v8 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_100143474, 0, 0);
}

void sub_100143474()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  char v7 = *(unsigned char *)(v0 + 200);
  type metadata accessor for Transaction();
  long long v10 = *(_OWORD *)(v0 + 96);
  long long v11 = *(_OWORD *)(v0 + 80);
  long long v12 = *(_OWORD *)(v0 + 112);
  *(void *)(v0 + 168) = swift_initStackObject();
  *(void *)(v0 + 176) = sub_100146C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v1, 1, 1, v2);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 184) = v8;
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v10;
  *(void *)(v8 + 48) = v6;
  *(void *)(v8 + 56) = v5;
  *(unsigned char *)(v8 + 64) = v7;
  *(_OWORD *)(v8 + 72) = v12;
  *(void *)(v8 + 88) = v4;
  long long v13 = (char *)&dword_1001E4AF0 + dword_1001E4AF0;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100142F78;
  __asm { BR              X0; sub_100140B34 }
}